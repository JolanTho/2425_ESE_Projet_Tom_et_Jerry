
RTOS_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f60  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08008140  08008140  00009140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a4  080083a4  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  080083a4  080083a4  000093a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083ac  080083ac  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083ac  080083ac  000093ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083b0  080083b0  000093b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080083b4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001500  20000074  08008428  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001574  08008428  0000a574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2c9  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f99  00000000  00000000  0002436d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  00028308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b9  00000000  00000000  00029a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e87  00000000  00000000  0002abc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b879  00000000  00000000  0004ca50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0488  00000000  00000000  000682c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138751  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006828  00000000  00000000  00138794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0013efbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008128 	.word	0x08008128

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08008128 	.word	0x08008128

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_FREERTOS_Init+0x50>)
 80005b8:	f107 0414 	add.w	r4, r7, #20
 80005bc:	461d      	mov	r5, r3
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	682b      	ldr	r3, [r5, #0]
 80005c4:	6023      	str	r3, [r4, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f005 f81c 	bl	800560a <osThreadCreate>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <MX_FREERTOS_Init+0x54>)
 80005d6:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	osThreadDef(task_shell, shell, osPriorityNormal, 0, 128);
 80005d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <MX_FREERTOS_Init+0x58>)
 80005da:	463c      	mov	r4, r7
 80005dc:	461d      	mov	r5, r3
 80005de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e2:	682b      	ldr	r3, [r5, #0]
 80005e4:	6023      	str	r3, [r4, #0]
	task_shellHandle = osThreadCreate(osThread(task_shell), NULL);
 80005e6:	463b      	mov	r3, r7
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 f80d 	bl	800560a <osThreadCreate>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a06      	ldr	r2, [pc, #24]	@ (800060c <MX_FREERTOS_Init+0x5c>)
 80005f4:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_THREADS */

}
 80005f6:	bf00      	nop
 80005f8:	3728      	adds	r7, #40	@ 0x28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bdb0      	pop	{r4, r5, r7, pc}
 80005fe:	bf00      	nop
 8000600:	0800814c 	.word	0x0800814c
 8000604:	20000094 	.word	0x20000094
 8000608:	0800816c 	.word	0x0800816c
 800060c:	20000090 	.word	0x20000090

08000610 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f005 f81d 	bl	8005658 <osDelay>
 800061e:	e7fb      	b.n	8000618 <StartDefaultTask+0x8>

08000620 <shell>:
	/* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void shell(void const * argument){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	shell_init();
 8000628:	f006 fa00 	bl	8006a2c <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 800062c:	4a06      	ldr	r2, [pc, #24]	@ (8000648 <shell+0x28>)
 800062e:	4907      	ldr	r1, [pc, #28]	@ (800064c <shell+0x2c>)
 8000630:	2066      	movs	r0, #102	@ 0x66
 8000632:	f006 fa1d 	bl	8006a70 <shell_add>
	shell_add('a', addition, "Une fonction sommeuses");
 8000636:	4a06      	ldr	r2, [pc, #24]	@ (8000650 <shell+0x30>)
 8000638:	4906      	ldr	r1, [pc, #24]	@ (8000654 <shell+0x34>)
 800063a:	2061      	movs	r0, #97	@ 0x61
 800063c:	f006 fa18 	bl	8006a70 <shell_add>
	for(;;){
		shell_run();
 8000640:	f006 fac2 	bl	8006bc8 <shell_run>
 8000644:	e7fc      	b.n	8000640 <shell+0x20>
 8000646:	bf00      	nop
 8000648:	08008180 	.word	0x08008180
 800064c:	08006c9d 	.word	0x08006c9d
 8000650:	08008198 	.word	0x08008198
 8000654:	08006cdd 	.word	0x08006cdd

08000658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800065e:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <MX_DMA_Init+0x70>)
 8000660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000662:	4a19      	ldr	r2, [pc, #100]	@ (80006c8 <MX_DMA_Init+0x70>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	6493      	str	r3, [r2, #72]	@ 0x48
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <MX_DMA_Init+0x70>)
 800066c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000676:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_DMA_Init+0x70>)
 8000678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800067a:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <MX_DMA_Init+0x70>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6493      	str	r3, [r2, #72]	@ 0x48
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_DMA_Init+0x70>)
 8000684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2105      	movs	r1, #5
 8000692:	200b      	movs	r0, #11
 8000694:	f000 fe66 	bl	8001364 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000698:	200b      	movs	r0, #11
 800069a:	f000 fe7d 	bl	8001398 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2105      	movs	r1, #5
 80006a2:	200c      	movs	r0, #12
 80006a4:	f000 fe5e 	bl	8001364 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006a8:	200c      	movs	r0, #12
 80006aa:	f000 fe75 	bl	8001398 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2105      	movs	r1, #5
 80006b2:	200d      	movs	r0, #13
 80006b4:	f000 fe56 	bl	8001364 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80006b8:	200d      	movs	r0, #13
 80006ba:	f000 fe6d 	bl	8001398 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b35      	ldr	r3, [pc, #212]	@ (80007b8 <MX_GPIO_Init+0xec>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a34      	ldr	r2, [pc, #208]	@ (80007b8 <MX_GPIO_Init+0xec>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b32      	ldr	r3, [pc, #200]	@ (80007b8 <MX_GPIO_Init+0xec>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006fa:	4b2f      	ldr	r3, [pc, #188]	@ (80007b8 <MX_GPIO_Init+0xec>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a2e      	ldr	r2, [pc, #184]	@ (80007b8 <MX_GPIO_Init+0xec>)
 8000700:	f043 0320 	orr.w	r3, r3, #32
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b2c      	ldr	r3, [pc, #176]	@ (80007b8 <MX_GPIO_Init+0xec>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0320 	and.w	r3, r3, #32
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b29      	ldr	r3, [pc, #164]	@ (80007b8 <MX_GPIO_Init+0xec>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	4a28      	ldr	r2, [pc, #160]	@ (80007b8 <MX_GPIO_Init+0xec>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071e:	4b26      	ldr	r3, [pc, #152]	@ (80007b8 <MX_GPIO_Init+0xec>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b23      	ldr	r3, [pc, #140]	@ (80007b8 <MX_GPIO_Init+0xec>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	4a22      	ldr	r2, [pc, #136]	@ (80007b8 <MX_GPIO_Init+0xec>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000736:	4b20      	ldr	r3, [pc, #128]	@ (80007b8 <MX_GPIO_Init+0xec>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074a:	f001 fa2f 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2130      	movs	r1, #48	@ 0x30
 8000752:	481a      	ldr	r0, [pc, #104]	@ (80007bc <MX_GPIO_Init+0xf0>)
 8000754:	f001 fa2a 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000758:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	4814      	ldr	r0, [pc, #80]	@ (80007c0 <MX_GPIO_Init+0xf4>)
 8000770:	f001 f89a 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000774:	2320      	movs	r3, #32
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078e:	f001 f88b 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin;
 8000792:	2330      	movs	r3, #48	@ 0x30
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_GPIO_Init+0xf0>)
 80007aa:	f001 f87d 	bl	80018a8 <HAL_GPIO_Init>

}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	@ 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000400 	.word	0x48000400
 80007c0:	48000800 	.word	0x48000800

080007c4 <__io_putchar>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int __io_putchar(int ch)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80007cc:	1d39      	adds	r1, r7, #4
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007d2:	2201      	movs	r2, #1
 80007d4:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <__io_putchar+0x20>)
 80007d6:	f003 fbf3 	bl	8003fc0 <HAL_UART_Transmit>
	return ch;
 80007da:	687b      	ldr	r3, [r7, #4]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200001c8 	.word	0x200001c8

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f000 fccb 	bl	8001186 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f810 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f7ff ff6a 	bl	80006cc <MX_GPIO_Init>
  MX_DMA_Init();
 80007f8:	f7ff ff2e 	bl	8000658 <MX_DMA_Init>
  MX_TIM2_Init();
 80007fc:	f000 fa08 	bl	8000c10 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000800:	f000 fad4 	bl	8000dac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000804:	f000 fb1e 	bl	8000e44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000808:	f7ff fed2 	bl	80005b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800080c:	f004 fef6 	bl	80055fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <main+0x28>

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	@ 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	2238      	movs	r2, #56	@ 0x38
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f006 fc18 	bl	8007058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000836:	2000      	movs	r0, #0
 8000838:	f001 f9d0 	bl	8001bdc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083c:	2302      	movs	r3, #2
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000846:	2340      	movs	r3, #64	@ 0x40
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084e:	2302      	movs	r3, #2
 8000850:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000852:	2304      	movs	r3, #4
 8000854:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000856:	2355      	movs	r3, #85	@ 0x55
 8000858:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800085e:	2302      	movs	r3, #2
 8000860:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000862:	2302      	movs	r3, #2
 8000864:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fa6a 	bl	8001d44 <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000876:	f000 f82b 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	230f      	movs	r3, #15
 800087c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2303      	movs	r3, #3
 8000880:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2104      	movs	r1, #4
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fd68 	bl	8002368 <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800089e:	f000 f817 	bl	80008d0 <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	3750      	adds	r7, #80	@ 0x50
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a04      	ldr	r2, [pc, #16]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d101      	bne.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008be:	f000 fc7b 	bl	80011b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40012c00 	.word	0x40012c00

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_MspInit+0x50>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e6:	4a11      	ldr	r2, [pc, #68]	@ (800092c <HAL_MspInit+0x50>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <HAL_MspInit+0x50>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <HAL_MspInit+0x50>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <HAL_MspInit+0x50>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	@ 0x58
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <HAL_MspInit+0x50>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	210f      	movs	r1, #15
 8000916:	f06f 0001 	mvn.w	r0, #1
 800091a:	f000 fd23 	bl	8001364 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800091e:	f001 fa01 	bl	8001d24 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	@ 0x30
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000940:	4b2c      	ldr	r3, [pc, #176]	@ (80009f4 <HAL_InitTick+0xc4>)
 8000942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000944:	4a2b      	ldr	r2, [pc, #172]	@ (80009f4 <HAL_InitTick+0xc4>)
 8000946:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800094a:	6613      	str	r3, [r2, #96]	@ 0x60
 800094c:	4b29      	ldr	r3, [pc, #164]	@ (80009f4 <HAL_InitTick+0xc4>)
 800094e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000950:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000958:	f107 020c 	add.w	r2, r7, #12
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fed6 	bl	8002714 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000968:	f001 febe 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 800096c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800096e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000970:	4a21      	ldr	r2, [pc, #132]	@ (80009f8 <HAL_InitTick+0xc8>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	0c9b      	lsrs	r3, r3, #18
 8000978:	3b01      	subs	r3, #1
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800097c:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <HAL_InitTick+0xcc>)
 800097e:	4a20      	ldr	r2, [pc, #128]	@ (8000a00 <HAL_InitTick+0xd0>)
 8000980:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000982:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <HAL_InitTick+0xcc>)
 8000984:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000988:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800098a:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <HAL_InitTick+0xcc>)
 800098c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000990:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <HAL_InitTick+0xcc>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <HAL_InitTick+0xcc>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800099c:	4817      	ldr	r0, [pc, #92]	@ (80009fc <HAL_InitTick+0xcc>)
 800099e:	f002 f921 	bl	8002be4 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d11b      	bne.n	80009e8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009b0:	4812      	ldr	r0, [pc, #72]	@ (80009fc <HAL_InitTick+0xcc>)
 80009b2:	f002 f96f 	bl	8002c94 <HAL_TIM_Base_Start_IT>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d111      	bne.n	80009e8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009c4:	2019      	movs	r0, #25
 80009c6:	f000 fce7 	bl	8001398 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d808      	bhi.n	80009e2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	2019      	movs	r0, #25
 80009d6:	f000 fcc5 	bl	8001364 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <HAL_InitTick+0xd4>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	e002      	b.n	80009e8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3730      	adds	r7, #48	@ 0x30
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40021000 	.word	0x40021000
 80009f8:	431bde83 	.word	0x431bde83
 80009fc:	20000098 	.word	0x20000098
 8000a00:	40012c00 	.word	0x40012c00
 8000a04:	20000004 	.word	0x20000004

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <NMI_Handler+0x4>

08000a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <MemManage_Handler+0x4>

08000a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <DMA1_Channel1_IRQHandler+0x10>)
 8000a46:	f000 fe1d 	bl	8001684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000031c 	.word	0x2000031c

08000a54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <DMA1_Channel2_IRQHandler+0x10>)
 8000a5a:	f000 fe13 	bl	8001684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200002bc 	.word	0x200002bc

08000a68 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <DMA1_Channel3_IRQHandler+0x10>)
 8000a6e:	f000 fe09 	bl	8001684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000025c 	.word	0x2000025c

08000a7c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a82:	f002 f9d2 	bl	8002e2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000098 	.word	0x20000098

08000a90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <USART1_IRQHandler+0x10>)
 8000a96:	f003 fbe9 	bl	800426c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000134 	.word	0x20000134

08000aa4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	e00a      	b.n	8000acc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab6:	f3af 8000 	nop.w
 8000aba:	4601      	mov	r1, r0
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	b2ca      	uxtb	r2, r1
 8000ac4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	dbf0      	blt.n	8000ab6 <_read+0x12>
  }

  return len;
 8000ad4:	687b      	ldr	r3, [r7, #4]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	e009      	b.n	8000b04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	60ba      	str	r2, [r7, #8]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fe63 	bl	80007c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3301      	adds	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	dbf1      	blt.n	8000af0 <_write+0x12>
  }
  return len;
 8000b0c:	687b      	ldr	r3, [r7, #4]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_close>:

int _close(int file)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_isatty>:

int _isatty(int file)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	@ (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	@ (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f006 fab0 	bl	8007114 <__errno>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <_sbrk+0x64>)
 8000bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20008000 	.word	0x20008000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	200000e4 	.word	0x200000e4
 8000be8:	20001578 	.word	0x20001578

08000bec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08e      	sub	sp, #56	@ 0x38
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c42:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf8 <MX_TIM2_Init+0xe8>)
 8000c44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf8 <MX_TIM2_Init+0xe8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b29      	ldr	r3, [pc, #164]	@ (8000cf8 <MX_TIM2_Init+0xe8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 169999;
 8000c56:	4b28      	ldr	r3, [pc, #160]	@ (8000cf8 <MX_TIM2_Init+0xe8>)
 8000c58:	4a28      	ldr	r2, [pc, #160]	@ (8000cfc <MX_TIM2_Init+0xec>)
 8000c5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b26      	ldr	r3, [pc, #152]	@ (8000cf8 <MX_TIM2_Init+0xe8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c62:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <MX_TIM2_Init+0xe8>)
 8000c64:	2280      	movs	r2, #128	@ 0x80
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c68:	4823      	ldr	r0, [pc, #140]	@ (8000cf8 <MX_TIM2_Init+0xe8>)
 8000c6a:	f001 ffbb 	bl	8002be4 <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c74:	f7ff fe2c 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c82:	4619      	mov	r1, r3
 8000c84:	481c      	ldr	r0, [pc, #112]	@ (8000cf8 <MX_TIM2_Init+0xe8>)
 8000c86:	f002 fb33 	bl	80032f0 <HAL_TIM_ConfigClockSource>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c90:	f7ff fe1e 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c94:	4818      	ldr	r0, [pc, #96]	@ (8000cf8 <MX_TIM2_Init+0xe8>)
 8000c96:	f002 f867 	bl	8002d68 <HAL_TIM_PWM_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ca0:	f7ff fe16 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4811      	ldr	r0, [pc, #68]	@ (8000cf8 <MX_TIM2_Init+0xe8>)
 8000cb4:	f003 f86c 	bl	8003d90 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cbe:	f7ff fe07 	bl	80008d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc2:	2360      	movs	r3, #96	@ 0x60
 8000cc4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 85000;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <MX_TIM2_Init+0xf0>)
 8000cc8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4807      	ldr	r0, [pc, #28]	@ (8000cf8 <MX_TIM2_Init+0xe8>)
 8000cda:	f002 f9f5 	bl	80030c8 <HAL_TIM_PWM_ConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ce4:	f7ff fdf4 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <MX_TIM2_Init+0xe8>)
 8000cea:	f000 f829 	bl	8000d40 <HAL_TIM_MspPostInit>

}
 8000cee:	bf00      	nop
 8000cf0:	3738      	adds	r7, #56	@ 0x38
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000e8 	.word	0x200000e8
 8000cfc:	0002980f 	.word	0x0002980f
 8000d00:	00014c08 	.word	0x00014c08

08000d04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d14:	d10b      	bne.n	8000d2e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <HAL_TIM_Base_MspInit+0x38>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d1a:	4a08      	ldr	r2, [pc, #32]	@ (8000d3c <HAL_TIM_Base_MspInit+0x38>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_TIM_Base_MspInit+0x38>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d60:	d11b      	bne.n	8000d9a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <HAL_TIM_MspPostInit+0x64>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	4a0f      	ldr	r2, [pc, #60]	@ (8000da4 <HAL_TIM_MspPostInit+0x64>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <HAL_TIM_MspPostInit+0x64>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin;
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIDAR_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	4619      	mov	r1, r3
 8000d94:	4804      	ldr	r0, [pc, #16]	@ (8000da8 <HAL_TIM_MspPostInit+0x68>)
 8000d96:	f000 fd87 	bl	80018a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3720      	adds	r7, #32
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000
 8000da8:	48000400 	.word	0x48000400

08000dac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db0:	4b22      	ldr	r3, [pc, #136]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000db2:	4a23      	ldr	r2, [pc, #140]	@ (8000e40 <MX_USART1_UART_Init+0x94>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 128000;
 8000db6:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000db8:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8000dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de8:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dee:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000df4:	4811      	ldr	r0, [pc, #68]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000df6:	f003 f893 	bl	8003f20 <HAL_UART_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e00:	f7ff fd66 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e04:	2100      	movs	r1, #0
 8000e06:	480d      	ldr	r0, [pc, #52]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000e08:	f004 fb15 	bl	8005436 <HAL_UARTEx_SetTxFifoThreshold>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e12:	f7ff fd5d 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e16:	2100      	movs	r1, #0
 8000e18:	4808      	ldr	r0, [pc, #32]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000e1a:	f004 fb4a 	bl	80054b2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e24:	f7ff fd54 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	@ (8000e3c <MX_USART1_UART_Init+0x90>)
 8000e2a:	f004 facb 	bl	80053c4 <HAL_UARTEx_DisableFifoMode>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e34:	f7ff fd4c 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000134 	.word	0x20000134
 8000e40:	40013800 	.word	0x40013800

08000e44 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e48:	4b22      	ldr	r3, [pc, #136]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000e4a:	4a23      	ldr	r2, [pc, #140]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e4e:	4b21      	ldr	r3, [pc, #132]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000e50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e86:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e8c:	4811      	ldr	r0, [pc, #68]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000e8e:	f003 f847 	bl	8003f20 <HAL_UART_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e98:	f7ff fd1a 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	480d      	ldr	r0, [pc, #52]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000ea0:	f004 fac9 	bl	8005436 <HAL_UARTEx_SetTxFifoThreshold>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000eaa:	f7ff fd11 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4808      	ldr	r0, [pc, #32]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000eb2:	f004 fafe 	bl	80054b2 <HAL_UARTEx_SetRxFifoThreshold>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ebc:	f7ff fd08 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ec0:	4804      	ldr	r0, [pc, #16]	@ (8000ed4 <MX_USART2_UART_Init+0x90>)
 8000ec2:	f004 fa7f 	bl	80053c4 <HAL_UARTEx_DisableFifoMode>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ecc:	f7ff fd00 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200001c8 	.word	0x200001c8
 8000ed8:	40004400 	.word	0x40004400

08000edc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b09c      	sub	sp, #112	@ 0x70
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	2244      	movs	r2, #68	@ 0x44
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f006 f8ab 	bl	8007058 <memset>
  if(uartHandle->Instance==USART1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a81      	ldr	r2, [pc, #516]	@ (800110c <HAL_UART_MspInit+0x230>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	f040 8094 	bne.w	8001036 <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f16:	f107 0318 	add.w	r3, r7, #24
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 fc72 	bl	8002804 <HAL_RCCEx_PeriphCLKConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f26:	f7ff fcd3 	bl	80008d0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f2a:	4b79      	ldr	r3, [pc, #484]	@ (8001110 <HAL_UART_MspInit+0x234>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2e:	4a78      	ldr	r2, [pc, #480]	@ (8001110 <HAL_UART_MspInit+0x234>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f34:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f36:	4b76      	ldr	r3, [pc, #472]	@ (8001110 <HAL_UART_MspInit+0x234>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	4b73      	ldr	r3, [pc, #460]	@ (8001110 <HAL_UART_MspInit+0x234>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	4a72      	ldr	r2, [pc, #456]	@ (8001110 <HAL_UART_MspInit+0x234>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4e:	4b70      	ldr	r3, [pc, #448]	@ (8001110 <HAL_UART_MspInit+0x234>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LIDAR_RXnTX_STM_Pin|LIDAR_TXnTRX_STM_Pin;
 8000f5a:	2330      	movs	r3, #48	@ 0x30
 8000f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f72:	4619      	mov	r1, r3
 8000f74:	4867      	ldr	r0, [pc, #412]	@ (8001114 <HAL_UART_MspInit+0x238>)
 8000f76:	f000 fc97 	bl	80018a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8000f7a:	4b67      	ldr	r3, [pc, #412]	@ (8001118 <HAL_UART_MspInit+0x23c>)
 8000f7c:	4a67      	ldr	r2, [pc, #412]	@ (800111c <HAL_UART_MspInit+0x240>)
 8000f7e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000f80:	4b65      	ldr	r3, [pc, #404]	@ (8001118 <HAL_UART_MspInit+0x23c>)
 8000f82:	2219      	movs	r2, #25
 8000f84:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f86:	4b64      	ldr	r3, [pc, #400]	@ (8001118 <HAL_UART_MspInit+0x23c>)
 8000f88:	2210      	movs	r2, #16
 8000f8a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8c:	4b62      	ldr	r3, [pc, #392]	@ (8001118 <HAL_UART_MspInit+0x23c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f92:	4b61      	ldr	r3, [pc, #388]	@ (8001118 <HAL_UART_MspInit+0x23c>)
 8000f94:	2280      	movs	r2, #128	@ 0x80
 8000f96:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f98:	4b5f      	ldr	r3, [pc, #380]	@ (8001118 <HAL_UART_MspInit+0x23c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f9e:	4b5e      	ldr	r3, [pc, #376]	@ (8001118 <HAL_UART_MspInit+0x23c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000fa4:	4b5c      	ldr	r3, [pc, #368]	@ (8001118 <HAL_UART_MspInit+0x23c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000faa:	4b5b      	ldr	r3, [pc, #364]	@ (8001118 <HAL_UART_MspInit+0x23c>)
 8000fac:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000fb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000fb2:	4859      	ldr	r0, [pc, #356]	@ (8001118 <HAL_UART_MspInit+0x23c>)
 8000fb4:	f000 f9fe 	bl	80013b4 <HAL_DMA_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000fbe:	f7ff fc87 	bl	80008d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a54      	ldr	r2, [pc, #336]	@ (8001118 <HAL_UART_MspInit+0x23c>)
 8000fc6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000fc8:	4a53      	ldr	r2, [pc, #332]	@ (8001118 <HAL_UART_MspInit+0x23c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000fce:	4b54      	ldr	r3, [pc, #336]	@ (8001120 <HAL_UART_MspInit+0x244>)
 8000fd0:	4a54      	ldr	r2, [pc, #336]	@ (8001124 <HAL_UART_MspInit+0x248>)
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000fd4:	4b52      	ldr	r3, [pc, #328]	@ (8001120 <HAL_UART_MspInit+0x244>)
 8000fd6:	2218      	movs	r2, #24
 8000fd8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fda:	4b51      	ldr	r3, [pc, #324]	@ (8001120 <HAL_UART_MspInit+0x244>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8001120 <HAL_UART_MspInit+0x244>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8001120 <HAL_UART_MspInit+0x244>)
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fec:	4b4c      	ldr	r3, [pc, #304]	@ (8001120 <HAL_UART_MspInit+0x244>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8001120 <HAL_UART_MspInit+0x244>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000ff8:	4b49      	ldr	r3, [pc, #292]	@ (8001120 <HAL_UART_MspInit+0x244>)
 8000ffa:	2220      	movs	r2, #32
 8000ffc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ffe:	4b48      	ldr	r3, [pc, #288]	@ (8001120 <HAL_UART_MspInit+0x244>)
 8001000:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001004:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001006:	4846      	ldr	r0, [pc, #280]	@ (8001120 <HAL_UART_MspInit+0x244>)
 8001008:	f000 f9d4 	bl	80013b4 <HAL_DMA_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001012:	f7ff fc5d 	bl	80008d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a41      	ldr	r2, [pc, #260]	@ (8001120 <HAL_UART_MspInit+0x244>)
 800101a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800101e:	4a40      	ldr	r2, [pc, #256]	@ (8001120 <HAL_UART_MspInit+0x244>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2105      	movs	r1, #5
 8001028:	2025      	movs	r0, #37	@ 0x25
 800102a:	f000 f99b 	bl	8001364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800102e:	2025      	movs	r0, #37	@ 0x25
 8001030:	f000 f9b2 	bl	8001398 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001034:	e065      	b.n	8001102 <HAL_UART_MspInit+0x226>
  else if(uartHandle->Instance==USART2)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a3b      	ldr	r2, [pc, #236]	@ (8001128 <HAL_UART_MspInit+0x24c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d160      	bne.n	8001102 <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001048:	f107 0318 	add.w	r3, r7, #24
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fbd9 	bl	8002804 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_UART_MspInit+0x180>
      Error_Handler();
 8001058:	f7ff fc3a 	bl	80008d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800105c:	4b2c      	ldr	r3, [pc, #176]	@ (8001110 <HAL_UART_MspInit+0x234>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001060:	4a2b      	ldr	r2, [pc, #172]	@ (8001110 <HAL_UART_MspInit+0x234>)
 8001062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001066:	6593      	str	r3, [r2, #88]	@ 0x58
 8001068:	4b29      	ldr	r3, [pc, #164]	@ (8001110 <HAL_UART_MspInit+0x234>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <HAL_UART_MspInit+0x234>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001078:	4a25      	ldr	r2, [pc, #148]	@ (8001110 <HAL_UART_MspInit+0x234>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001080:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <HAL_UART_MspInit+0x234>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800108c:	230c      	movs	r3, #12
 800108e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800109c:	2307      	movs	r3, #7
 800109e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010aa:	f000 fbfd 	bl	80018a8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80010ae:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <HAL_UART_MspInit+0x250>)
 80010b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001130 <HAL_UART_MspInit+0x254>)
 80010b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <HAL_UART_MspInit+0x250>)
 80010b6:	221b      	movs	r2, #27
 80010b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <HAL_UART_MspInit+0x250>)
 80010bc:	2210      	movs	r2, #16
 80010be:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <HAL_UART_MspInit+0x250>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <HAL_UART_MspInit+0x250>)
 80010c8:	2280      	movs	r2, #128	@ 0x80
 80010ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <HAL_UART_MspInit+0x250>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d2:	4b16      	ldr	r3, [pc, #88]	@ (800112c <HAL_UART_MspInit+0x250>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <HAL_UART_MspInit+0x250>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80010de:	4b13      	ldr	r3, [pc, #76]	@ (800112c <HAL_UART_MspInit+0x250>)
 80010e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80010e6:	4811      	ldr	r0, [pc, #68]	@ (800112c <HAL_UART_MspInit+0x250>)
 80010e8:	f000 f964 	bl	80013b4 <HAL_DMA_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_UART_MspInit+0x21a>
      Error_Handler();
 80010f2:	f7ff fbed 	bl	80008d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <HAL_UART_MspInit+0x250>)
 80010fa:	67da      	str	r2, [r3, #124]	@ 0x7c
 80010fc:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <HAL_UART_MspInit+0x250>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001102:	bf00      	nop
 8001104:	3770      	adds	r7, #112	@ 0x70
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40013800 	.word	0x40013800
 8001110:	40021000 	.word	0x40021000
 8001114:	48000800 	.word	0x48000800
 8001118:	2000025c 	.word	0x2000025c
 800111c:	40020030 	.word	0x40020030
 8001120:	200002bc 	.word	0x200002bc
 8001124:	4002001c 	.word	0x4002001c
 8001128:	40004400 	.word	0x40004400
 800112c:	2000031c 	.word	0x2000031c
 8001130:	40020008 	.word	0x40020008

08001134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001134:	480d      	ldr	r0, [pc, #52]	@ (800116c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001136:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001138:	f7ff fd58 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <LoopForever+0x6>)
  ldr r1, =_edata
 800113e:	490d      	ldr	r1, [pc, #52]	@ (8001174 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001140:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <LoopForever+0xe>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001154:	4c0a      	ldr	r4, [pc, #40]	@ (8001180 <LoopForever+0x16>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001162:	f005 ffdd 	bl	8007120 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001166:	f7ff fb3f 	bl	80007e8 <main>

0800116a <LoopForever>:

LoopForever:
    b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   r0, =_estack
 800116c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001178:	080083b4 	.word	0x080083b4
  ldr r2, =_sbss
 800117c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001180:	20001574 	.word	0x20001574

08001184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_2_IRQHandler>

08001186 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f8dc 	bl	800134e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001196:	200f      	movs	r0, #15
 8001198:	f7ff fbca 	bl	8000930 <HAL_InitTick>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	e001      	b.n	80011ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a8:	f7ff fb98 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ac:	79fb      	ldrb	r3, [r7, #7]

}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <HAL_IncTick+0x1c>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <HAL_IncTick+0x20>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a03      	ldr	r2, [pc, #12]	@ (80011d4 <HAL_IncTick+0x1c>)
 80011c8:	6013      	str	r3, [r2, #0]
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	2000037c 	.word	0x2000037c
 80011d8:	20000008 	.word	0x20000008

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <HAL_GetTick+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	2000037c 	.word	0x2000037c

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f003 021f 	and.w	r2, r3, #31
 8001270:	4907      	ldr	r1, [pc, #28]	@ (8001290 <__NVIC_EnableIRQ+0x38>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	095b      	lsrs	r3, r3, #5
 8001278:	2001      	movs	r0, #1
 800127a:	fa00 f202 	lsl.w	r2, r0, r2
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	@ (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	@ (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	@ 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ff4c 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001372:	f7ff ff63 	bl	800123c <__NVIC_GetPriorityGrouping>
 8001376:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	68b9      	ldr	r1, [r7, #8]
 800137c:	6978      	ldr	r0, [r7, #20]
 800137e:	f7ff ffb3 	bl	80012e8 <NVIC_EncodePriority>
 8001382:	4602      	mov	r2, r0
 8001384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff82 	bl	8001294 <__NVIC_SetPriority>
}
 8001390:	bf00      	nop
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff56 	bl	8001258 <__NVIC_EnableIRQ>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e08d      	b.n	80014e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b47      	ldr	r3, [pc, #284]	@ (80014ec <HAL_DMA_Init+0x138>)
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d80f      	bhi.n	80013f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b45      	ldr	r3, [pc, #276]	@ (80014f0 <HAL_DMA_Init+0x13c>)
 80013da:	4413      	add	r3, r2
 80013dc:	4a45      	ldr	r2, [pc, #276]	@ (80014f4 <HAL_DMA_Init+0x140>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	009a      	lsls	r2, r3, #2
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a42      	ldr	r2, [pc, #264]	@ (80014f8 <HAL_DMA_Init+0x144>)
 80013ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80013f0:	e00e      	b.n	8001410 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b40      	ldr	r3, [pc, #256]	@ (80014fc <HAL_DMA_Init+0x148>)
 80013fa:	4413      	add	r3, r2
 80013fc:	4a3d      	ldr	r2, [pc, #244]	@ (80014f4 <HAL_DMA_Init+0x140>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	009a      	lsls	r2, r3, #2
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a3c      	ldr	r2, [pc, #240]	@ (8001500 <HAL_DMA_Init+0x14c>)
 800140e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2202      	movs	r2, #2
 8001414:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800142a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001434:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001440:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f9be 	bl	80017e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001470:	d102      	bne.n	8001478 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800148c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d010      	beq.n	80014b8 <HAL_DMA_Init+0x104>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b04      	cmp	r3, #4
 800149c:	d80c      	bhi.n	80014b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f9de 	bl	8001860 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	e008      	b.n	80014ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40020407 	.word	0x40020407
 80014f0:	bffdfff8 	.word	0xbffdfff8
 80014f4:	cccccccd 	.word	0xcccccccd
 80014f8:	40020000 	.word	0x40020000
 80014fc:	bffdfbf8 	.word	0xbffdfbf8
 8001500:	40020400 	.word	0x40020400

08001504 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d005      	beq.n	8001528 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2204      	movs	r2, #4
 8001520:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	e037      	b.n	8001598 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 020e 	bic.w	r2, r2, #14
 8001536:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001542:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001546:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	2101      	movs	r1, #1
 8001566:	fa01 f202 	lsl.w	r2, r1, r2
 800156a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001574:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00c      	beq.n	8001598 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001588:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800158c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001596:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d00d      	beq.n	80015ea <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2204      	movs	r2, #4
 80015d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e047      	b.n	800167a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 020e 	bic.w	r2, r2, #14
 80015f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0201 	bic.w	r2, r2, #1
 8001608:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001614:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001618:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	f003 021f 	and.w	r2, r3, #31
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001636:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00c      	beq.n	800165a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800164e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001658:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	4798      	blx	r3
    }
  }
  return status;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2204      	movs	r2, #4
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d026      	beq.n	80016fe <HAL_DMA_IRQHandler+0x7a>
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d021      	beq.n	80016fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d107      	bne.n	80016d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0204 	bic.w	r2, r2, #4
 80016d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	2104      	movs	r1, #4
 80016e6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d071      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80016fc:	e06c      	b.n	80017d8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	2202      	movs	r2, #2
 8001708:	409a      	lsls	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d02e      	beq.n	8001770 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d029      	beq.n	8001770 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10b      	bne.n	8001742 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 020a 	bic.w	r2, r2, #10
 8001738:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	f003 021f 	and.w	r2, r3, #31
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	2102      	movs	r1, #2
 8001750:	fa01 f202 	lsl.w	r2, r1, r2
 8001754:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001762:	2b00      	cmp	r3, #0
 8001764:	d038      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800176e:	e033      	b.n	80017d8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	2208      	movs	r2, #8
 800177a:	409a      	lsls	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d02a      	beq.n	80017da <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d025      	beq.n	80017da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 020e 	bic.w	r2, r2, #14
 800179c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	f003 021f 	and.w	r2, r3, #31
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	2101      	movs	r1, #1
 80017ac:	fa01 f202 	lsl.w	r2, r1, r2
 80017b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
}
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b16      	ldr	r3, [pc, #88]	@ (800184c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d802      	bhi.n	80017fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80017f8:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e001      	b.n	8001802 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001800:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	3b08      	subs	r3, #8
 800180e:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	009a      	lsls	r2, r3, #2
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4413      	add	r3, r2
 8001824:	461a      	mov	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a0b      	ldr	r2, [pc, #44]	@ (800185c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800182e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	2201      	movs	r2, #1
 8001838:	409a      	lsls	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800183e:	bf00      	nop
 8001840:	371c      	adds	r7, #28
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40020407 	.word	0x40020407
 8001850:	40020800 	.word	0x40020800
 8001854:	40020820 	.word	0x40020820
 8001858:	cccccccd 	.word	0xcccccccd
 800185c:	40020880 	.word	0x40020880

08001860 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	461a      	mov	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001882:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3b01      	subs	r3, #1
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	2201      	movs	r2, #1
 800188e:	409a      	lsls	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	1000823f 	.word	0x1000823f
 80018a4:	40020940 	.word	0x40020940

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018b6:	e15a      	b.n	8001b6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2101      	movs	r1, #1
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 814c 	beq.w	8001b68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d005      	beq.n	80018e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d130      	bne.n	800194a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800191e:	2201      	movs	r2, #1
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	f003 0201 	and.w	r2, r3, #1
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b03      	cmp	r3, #3
 8001954:	d017      	beq.n	8001986 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d123      	bne.n	80019da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	08da      	lsrs	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3208      	adds	r2, #8
 800199a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	220f      	movs	r2, #15
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	08da      	lsrs	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3208      	adds	r2, #8
 80019d4:	6939      	ldr	r1, [r7, #16]
 80019d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0203 	and.w	r2, r3, #3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80a6 	beq.w	8001b68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8001b8c <HAL_GPIO_Init+0x2e4>)
 8001a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a20:	4a5a      	ldr	r2, [pc, #360]	@ (8001b8c <HAL_GPIO_Init+0x2e4>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a28:	4b58      	ldr	r3, [pc, #352]	@ (8001b8c <HAL_GPIO_Init+0x2e4>)
 8001a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a34:	4a56      	ldr	r2, [pc, #344]	@ (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a5e:	d01f      	beq.n	8001aa0 <HAL_GPIO_Init+0x1f8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a4c      	ldr	r2, [pc, #304]	@ (8001b94 <HAL_GPIO_Init+0x2ec>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d019      	beq.n	8001a9c <HAL_GPIO_Init+0x1f4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a4b      	ldr	r2, [pc, #300]	@ (8001b98 <HAL_GPIO_Init+0x2f0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d013      	beq.n	8001a98 <HAL_GPIO_Init+0x1f0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a4a      	ldr	r2, [pc, #296]	@ (8001b9c <HAL_GPIO_Init+0x2f4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d00d      	beq.n	8001a94 <HAL_GPIO_Init+0x1ec>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a49      	ldr	r2, [pc, #292]	@ (8001ba0 <HAL_GPIO_Init+0x2f8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d007      	beq.n	8001a90 <HAL_GPIO_Init+0x1e8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a48      	ldr	r2, [pc, #288]	@ (8001ba4 <HAL_GPIO_Init+0x2fc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d101      	bne.n	8001a8c <HAL_GPIO_Init+0x1e4>
 8001a88:	2305      	movs	r3, #5
 8001a8a:	e00a      	b.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a8c:	2306      	movs	r3, #6
 8001a8e:	e008      	b.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a90:	2304      	movs	r3, #4
 8001a92:	e006      	b.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a94:	2303      	movs	r3, #3
 8001a96:	e004      	b.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e002      	b.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	f002 0203 	and.w	r2, r2, #3
 8001aa8:	0092      	lsls	r2, r2, #2
 8001aaa:	4093      	lsls	r3, r2
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab2:	4937      	ldr	r1, [pc, #220]	@ (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac0:	4b39      	ldr	r3, [pc, #228]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ae4:	4a30      	ldr	r2, [pc, #192]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b0e:	4a26      	ldr	r2, [pc, #152]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b14:	4b24      	ldr	r3, [pc, #144]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b62:	4a11      	ldr	r2, [pc, #68]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f47f ae9d 	bne.w	80018b8 <HAL_GPIO_Init+0x10>
  }
}
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	371c      	adds	r7, #28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010000 	.word	0x40010000
 8001b94:	48000400 	.word	0x48000400
 8001b98:	48000800 	.word	0x48000800
 8001b9c:	48000c00 	.word	0x48000c00
 8001ba0:	48001000 	.word	0x48001000
 8001ba4:	48001400 	.word	0x48001400
 8001ba8:	40010400 	.word	0x40010400

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d141      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bea:	4b4b      	ldr	r3, [pc, #300]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf6:	d131      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf8:	4b47      	ldr	r3, [pc, #284]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bfe:	4a46      	ldr	r2, [pc, #280]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c08:	4b43      	ldr	r3, [pc, #268]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c10:	4a41      	ldr	r2, [pc, #260]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c18:	4b40      	ldr	r3, [pc, #256]	@ (8001d1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2232      	movs	r2, #50	@ 0x32
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a3f      	ldr	r2, [pc, #252]	@ (8001d20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2e:	e002      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c36:	4b38      	ldr	r3, [pc, #224]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c42:	d102      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f2      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c4a:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c56:	d158      	bne.n	8001d0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e057      	b.n	8001d0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c62:	4a2d      	ldr	r2, [pc, #180]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c6c:	e04d      	b.n	8001d0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c74:	d141      	bne.n	8001cfa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c76:	4b28      	ldr	r3, [pc, #160]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c82:	d131      	bne.n	8001ce8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c84:	4b24      	ldr	r3, [pc, #144]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c8a:	4a23      	ldr	r2, [pc, #140]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c94:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ca2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2232      	movs	r2, #50	@ 0x32
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	4a1c      	ldr	r2, [pc, #112]	@ (8001d20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	0c9b      	lsrs	r3, r3, #18
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cba:	e002      	b.n	8001cc2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cce:	d102      	bne.n	8001cd6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f2      	bne.n	8001cbc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ce2:	d112      	bne.n	8001d0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e011      	b.n	8001d0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001cf8:	e007      	b.n	8001d0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cfa:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d02:	4a05      	ldr	r2, [pc, #20]	@ (8001d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	40007000 	.word	0x40007000
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d32:	6093      	str	r3, [r2, #8]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40007000 	.word	0x40007000

08001d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e2fe      	b.n	8002354 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d075      	beq.n	8001e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d62:	4b97      	ldr	r3, [pc, #604]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d6c:	4b94      	ldr	r3, [pc, #592]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	d102      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3e>
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_OscConfig+0x44>
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d10b      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d88:	4b8d      	ldr	r3, [pc, #564]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d05b      	beq.n	8001e4c <HAL_RCC_OscConfig+0x108>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d157      	bne.n	8001e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e2d9      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001da8:	d106      	bne.n	8001db8 <HAL_RCC_OscConfig+0x74>
 8001daa:	4b85      	ldr	r3, [pc, #532]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a84      	ldr	r2, [pc, #528]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e01d      	b.n	8001df4 <HAL_RCC_OscConfig+0xb0>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x98>
 8001dc2:	4b7f      	ldr	r3, [pc, #508]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a7e      	ldr	r2, [pc, #504]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b7c      	ldr	r3, [pc, #496]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a7b      	ldr	r2, [pc, #492]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0xb0>
 8001ddc:	4b78      	ldr	r3, [pc, #480]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a77      	ldr	r2, [pc, #476]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b75      	ldr	r3, [pc, #468]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a74      	ldr	r2, [pc, #464]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d013      	beq.n	8001e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff f9ee 	bl	80011dc <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff f9ea 	bl	80011dc <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	@ 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e29e      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e16:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0xc0>
 8001e22:	e014      	b.n	8001e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7ff f9da 	bl	80011dc <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff f9d6 	bl	80011dc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	@ 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e28a      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e3e:	4b60      	ldr	r3, [pc, #384]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0xe8>
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d075      	beq.n	8001f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e5a:	4b59      	ldr	r3, [pc, #356]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e64:	4b56      	ldr	r3, [pc, #344]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b0c      	cmp	r3, #12
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_OscConfig+0x136>
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d002      	beq.n	8001e80 <HAL_RCC_OscConfig+0x13c>
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d11f      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e80:	4b4f      	ldr	r3, [pc, #316]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x154>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e25d      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e98:	4b49      	ldr	r3, [pc, #292]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	061b      	lsls	r3, r3, #24
 8001ea6:	4946      	ldr	r1, [pc, #280]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001eac:	4b45      	ldr	r3, [pc, #276]	@ (8001fc4 <HAL_RCC_OscConfig+0x280>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fd3d 	bl	8000930 <HAL_InitTick>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d043      	beq.n	8001f44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e249      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d023      	beq.n	8001f10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec8:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f982 	bl	80011dc <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001edc:	f7ff f97e 	bl	80011dc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e232      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eee:	4b34      	ldr	r3, [pc, #208]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efa:	4b31      	ldr	r3, [pc, #196]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	061b      	lsls	r3, r3, #24
 8001f08:	492d      	ldr	r1, [pc, #180]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
 8001f0e:	e01a      	b.n	8001f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f10:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a2a      	ldr	r2, [pc, #168]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001f16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f95e 	bl	80011dc <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f24:	f7ff f95a 	bl	80011dc <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e20e      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f36:	4b22      	ldr	r3, [pc, #136]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1e0>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d041      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01c      	beq.n	8001f94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5a:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f60:	4a17      	ldr	r2, [pc, #92]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6a:	f7ff f937 	bl	80011dc <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f72:	f7ff f933 	bl	80011dc <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e1e7      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f84:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0ef      	beq.n	8001f72 <HAL_RCC_OscConfig+0x22e>
 8001f92:	e020      	b.n	8001fd6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f94:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f9a:	4a09      	ldr	r2, [pc, #36]	@ (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa4:	f7ff f91a 	bl	80011dc <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001faa:	e00d      	b.n	8001fc8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fac:	f7ff f916 	bl	80011dc <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d906      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1ca      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc8:	4b8c      	ldr	r3, [pc, #560]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8001fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1ea      	bne.n	8001fac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80a6 	beq.w	8002130 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fe8:	4b84      	ldr	r3, [pc, #528]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x2b4>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_OscConfig+0x2b6>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00d      	beq.n	800201a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b7f      	ldr	r3, [pc, #508]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002002:	4a7e      	ldr	r2, [pc, #504]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002008:	6593      	str	r3, [r2, #88]	@ 0x58
 800200a:	4b7c      	ldr	r3, [pc, #496]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002016:	2301      	movs	r3, #1
 8002018:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201a:	4b79      	ldr	r3, [pc, #484]	@ (8002200 <HAL_RCC_OscConfig+0x4bc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d118      	bne.n	8002058 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002026:	4b76      	ldr	r3, [pc, #472]	@ (8002200 <HAL_RCC_OscConfig+0x4bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a75      	ldr	r2, [pc, #468]	@ (8002200 <HAL_RCC_OscConfig+0x4bc>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002032:	f7ff f8d3 	bl	80011dc <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7ff f8cf 	bl	80011dc <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e183      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204c:	4b6c      	ldr	r3, [pc, #432]	@ (8002200 <HAL_RCC_OscConfig+0x4bc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d108      	bne.n	8002072 <HAL_RCC_OscConfig+0x32e>
 8002060:	4b66      	ldr	r3, [pc, #408]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002066:	4a65      	ldr	r2, [pc, #404]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002070:	e024      	b.n	80020bc <HAL_RCC_OscConfig+0x378>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b05      	cmp	r3, #5
 8002078:	d110      	bne.n	800209c <HAL_RCC_OscConfig+0x358>
 800207a:	4b60      	ldr	r3, [pc, #384]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002080:	4a5e      	ldr	r2, [pc, #376]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800208a:	4b5c      	ldr	r3, [pc, #368]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002090:	4a5a      	ldr	r2, [pc, #360]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800209a:	e00f      	b.n	80020bc <HAL_RCC_OscConfig+0x378>
 800209c:	4b57      	ldr	r3, [pc, #348]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a2:	4a56      	ldr	r2, [pc, #344]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020ac:	4b53      	ldr	r3, [pc, #332]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b2:	4a52      	ldr	r2, [pc, #328]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d016      	beq.n	80020f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7ff f88a 	bl	80011dc <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020cc:	f7ff f886 	bl	80011dc <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e138      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e2:	4b46      	ldr	r3, [pc, #280]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ed      	beq.n	80020cc <HAL_RCC_OscConfig+0x388>
 80020f0:	e015      	b.n	800211e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7ff f873 	bl	80011dc <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff f86f 	bl	80011dc <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e121      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002110:	4b3a      	ldr	r3, [pc, #232]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ed      	bne.n	80020fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800211e:	7ffb      	ldrb	r3, [r7, #31]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002124:	4b35      	ldr	r3, [pc, #212]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	4a34      	ldr	r2, [pc, #208]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 800212a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800212e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	d03c      	beq.n	80021b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01c      	beq.n	800217e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002144:	4b2d      	ldr	r3, [pc, #180]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8002146:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800214a:	4a2c      	ldr	r2, [pc, #176]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7ff f842 	bl	80011dc <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800215c:	f7ff f83e 	bl	80011dc <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e0f2      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800216e:	4b23      	ldr	r3, [pc, #140]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8002170:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ef      	beq.n	800215c <HAL_RCC_OscConfig+0x418>
 800217c:	e01b      	b.n	80021b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800217e:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8002180:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002184:	4a1d      	ldr	r2, [pc, #116]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218e:	f7ff f825 	bl	80011dc <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002196:	f7ff f821 	bl	80011dc <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0d5      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021a8:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 80021aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1ef      	bne.n	8002196 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80c9 	beq.w	8002352 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021c0:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	f000 8083 	beq.w	80022d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d15e      	bne.n	8002294 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a08      	ldr	r2, [pc, #32]	@ (80021fc <HAL_RCC_OscConfig+0x4b8>)
 80021dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e2:	f7fe fffb 	bl	80011dc <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e8:	e00c      	b.n	8002204 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ea:	f7fe fff7 	bl	80011dc <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d905      	bls.n	8002204 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0ab      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
 80021fc:	40021000 	.word	0x40021000
 8002200:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002204:	4b55      	ldr	r3, [pc, #340]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ec      	bne.n	80021ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002210:	4b52      	ldr	r3, [pc, #328]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	4b52      	ldr	r3, [pc, #328]	@ (8002360 <HAL_RCC_OscConfig+0x61c>)
 8002216:	4013      	ands	r3, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6a11      	ldr	r1, [r2, #32]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002220:	3a01      	subs	r2, #1
 8002222:	0112      	lsls	r2, r2, #4
 8002224:	4311      	orrs	r1, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800222a:	0212      	lsls	r2, r2, #8
 800222c:	4311      	orrs	r1, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002232:	0852      	lsrs	r2, r2, #1
 8002234:	3a01      	subs	r2, #1
 8002236:	0552      	lsls	r2, r2, #21
 8002238:	4311      	orrs	r1, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800223e:	0852      	lsrs	r2, r2, #1
 8002240:	3a01      	subs	r2, #1
 8002242:	0652      	lsls	r2, r2, #25
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800224a:	06d2      	lsls	r2, r2, #27
 800224c:	430a      	orrs	r2, r1
 800224e:	4943      	ldr	r1, [pc, #268]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 8002250:	4313      	orrs	r3, r2
 8002252:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002254:	4b41      	ldr	r3, [pc, #260]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a40      	ldr	r2, [pc, #256]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 800225a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800225e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002260:	4b3e      	ldr	r3, [pc, #248]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a3d      	ldr	r2, [pc, #244]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 8002266:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800226a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7fe ffb6 	bl	80011dc <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7fe ffb2 	bl	80011dc <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e066      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002286:	4b35      	ldr	r3, [pc, #212]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x530>
 8002292:	e05e      	b.n	8002352 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002294:	4b31      	ldr	r3, [pc, #196]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a30      	ldr	r2, [pc, #192]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 800229a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800229e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe ff9c 	bl	80011dc <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7fe ff98 	bl	80011dc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e04c      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ba:	4b28      	ldr	r3, [pc, #160]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022c6:	4b25      	ldr	r3, [pc, #148]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	4924      	ldr	r1, [pc, #144]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 80022cc:	4b25      	ldr	r3, [pc, #148]	@ (8002364 <HAL_RCC_OscConfig+0x620>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	60cb      	str	r3, [r1, #12]
 80022d2:	e03e      	b.n	8002352 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e039      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022e0:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f003 0203 	and.w	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d12c      	bne.n	800234e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	3b01      	subs	r3, #1
 8002300:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d123      	bne.n	800234e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002310:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d11b      	bne.n	800234e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002320:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d113      	bne.n	800234e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	3b01      	subs	r3, #1
 8002334:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d109      	bne.n	800234e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	3b01      	subs	r3, #1
 8002348:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3720      	adds	r7, #32
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	019f800c 	.word	0x019f800c
 8002364:	feeefffc 	.word	0xfeeefffc

08002368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e11e      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002380:	4b91      	ldr	r3, [pc, #580]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d910      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b8e      	ldr	r3, [pc, #568]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 020f 	bic.w	r2, r3, #15
 8002396:	498c      	ldr	r1, [pc, #560]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b8a      	ldr	r3, [pc, #552]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e106      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d073      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d129      	bne.n	8002418 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c4:	4b81      	ldr	r3, [pc, #516]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0f4      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023d4:	f000 f9d0 	bl	8002778 <RCC_GetSysClockFreqFromPLLSource>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4a7c      	ldr	r2, [pc, #496]	@ (80025d0 <HAL_RCC_ClockConfig+0x268>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d93f      	bls.n	8002462 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023e2:	4b7a      	ldr	r3, [pc, #488]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d033      	beq.n	8002462 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d12f      	bne.n	8002462 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002402:	4b72      	ldr	r3, [pc, #456]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800240a:	4a70      	ldr	r2, [pc, #448]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 800240c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002410:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002412:	2380      	movs	r3, #128	@ 0x80
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e024      	b.n	8002462 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d107      	bne.n	8002430 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002420:	4b6a      	ldr	r3, [pc, #424]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d109      	bne.n	8002440 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0c6      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002430:	4b66      	ldr	r3, [pc, #408]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0be      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002440:	f000 f8ce 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8002444:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4a61      	ldr	r2, [pc, #388]	@ (80025d0 <HAL_RCC_ClockConfig+0x268>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d909      	bls.n	8002462 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800244e:	4b5f      	ldr	r3, [pc, #380]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002456:	4a5d      	ldr	r2, [pc, #372]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800245c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800245e:	2380      	movs	r3, #128	@ 0x80
 8002460:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002462:	4b5a      	ldr	r3, [pc, #360]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 0203 	bic.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4957      	ldr	r1, [pc, #348]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002470:	4313      	orrs	r3, r2
 8002472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002474:	f7fe feb2 	bl	80011dc <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	e00a      	b.n	8002492 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247c:	f7fe feae 	bl	80011dc <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e095      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	4b4e      	ldr	r3, [pc, #312]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 020c 	and.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d1eb      	bne.n	800247c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d023      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024bc:	4b43      	ldr	r3, [pc, #268]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a42      	ldr	r2, [pc, #264]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 80024c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024d4:	4b3d      	ldr	r3, [pc, #244]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80024dc:	4a3b      	ldr	r2, [pc, #236]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 80024de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e4:	4b39      	ldr	r3, [pc, #228]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4936      	ldr	r1, [pc, #216]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
 80024f6:	e008      	b.n	800250a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b80      	cmp	r3, #128	@ 0x80
 80024fc:	d105      	bne.n	800250a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024fe:	4b33      	ldr	r3, [pc, #204]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	4a32      	ldr	r2, [pc, #200]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002504:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002508:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800250a:	4b2f      	ldr	r3, [pc, #188]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d21d      	bcs.n	8002554 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002518:	4b2b      	ldr	r3, [pc, #172]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 020f 	bic.w	r2, r3, #15
 8002520:	4929      	ldr	r1, [pc, #164]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002528:	f7fe fe58 	bl	80011dc <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	e00a      	b.n	8002546 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7fe fe54 	bl	80011dc <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e03b      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b20      	ldr	r3, [pc, #128]	@ (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d1ed      	bne.n	8002530 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002560:	4b1a      	ldr	r3, [pc, #104]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4917      	ldr	r1, [pc, #92]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257e:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	490f      	ldr	r1, [pc, #60]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002592:	f000 f825 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8002596:	4602      	mov	r2, r0
 8002598:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <HAL_RCC_ClockConfig+0x264>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	490c      	ldr	r1, [pc, #48]	@ (80025d4 <HAL_RCC_ClockConfig+0x26c>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <HAL_RCC_ClockConfig+0x270>)
 80025b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025b2:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <HAL_RCC_ClockConfig+0x274>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe f9ba 	bl	8000930 <HAL_InitTick>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40022000 	.word	0x40022000
 80025cc:	40021000 	.word	0x40021000
 80025d0:	04c4b400 	.word	0x04c4b400
 80025d4:	08008230 	.word	0x08008230
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000004 	.word	0x20000004

080025e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d102      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025f2:	4b2a      	ldr	r3, [pc, #168]	@ (800269c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	e047      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025f8:	4b27      	ldr	r3, [pc, #156]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d102      	bne.n	800260a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002604:	4b26      	ldr	r3, [pc, #152]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	e03e      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800260a:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d136      	bne.n	8002684 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002616:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002620:	4b1d      	ldr	r3, [pc, #116]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3301      	adds	r3, #1
 800262c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d10c      	bne.n	800264e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002634:	4a1a      	ldr	r2, [pc, #104]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	fbb2 f3f3 	udiv	r3, r2, r3
 800263c:	4a16      	ldr	r2, [pc, #88]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 800263e:	68d2      	ldr	r2, [r2, #12]
 8002640:	0a12      	lsrs	r2, r2, #8
 8002642:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002646:	fb02 f303 	mul.w	r3, r2, r3
 800264a:	617b      	str	r3, [r7, #20]
      break;
 800264c:	e00c      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800264e:	4a13      	ldr	r2, [pc, #76]	@ (800269c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	fbb2 f3f3 	udiv	r3, r2, r3
 8002656:	4a10      	ldr	r2, [pc, #64]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	0a12      	lsrs	r2, r2, #8
 800265c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	617b      	str	r3, [r7, #20]
      break;
 8002666:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002668:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0e5b      	lsrs	r3, r3, #25
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	3301      	adds	r3, #1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	e001      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002688:	693b      	ldr	r3, [r7, #16]
}
 800268a:	4618      	mov	r0, r3
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000
 800269c:	00f42400 	.word	0x00f42400
 80026a0:	016e3600 	.word	0x016e3600

080026a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a8:	4b03      	ldr	r3, [pc, #12]	@ (80026b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000

080026bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026c0:	f7ff fff0 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4904      	ldr	r1, [pc, #16]	@ (80026e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	08008240 	.word	0x08008240

080026e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026ec:	f7ff ffda 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b06      	ldr	r3, [pc, #24]	@ (800270c <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0adb      	lsrs	r3, r3, #11
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4904      	ldr	r1, [pc, #16]	@ (8002710 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	08008240 	.word	0x08008240

08002714 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	220f      	movs	r2, #15
 8002722:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002724:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0203 	and.w	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002730:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <HAL_RCC_GetClockConfig+0x5c>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800273c:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <HAL_RCC_GetClockConfig+0x5c>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002748:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <HAL_RCC_GetClockConfig+0x5c>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	08db      	lsrs	r3, r3, #3
 800274e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002756:	4b07      	ldr	r3, [pc, #28]	@ (8002774 <HAL_RCC_GetClockConfig+0x60>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 020f 	and.w	r2, r3, #15
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	601a      	str	r2, [r3, #0]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	40022000 	.word	0x40022000

08002778 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800277e:	4b1e      	ldr	r3, [pc, #120]	@ (80027f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002788:	4b1b      	ldr	r3, [pc, #108]	@ (80027f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	3301      	adds	r3, #1
 8002794:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d10c      	bne.n	80027b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800279c:	4a17      	ldr	r2, [pc, #92]	@ (80027fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	4a14      	ldr	r2, [pc, #80]	@ (80027f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027a6:	68d2      	ldr	r2, [r2, #12]
 80027a8:	0a12      	lsrs	r2, r2, #8
 80027aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	617b      	str	r3, [r7, #20]
    break;
 80027b4:	e00c      	b.n	80027d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027b6:	4a12      	ldr	r2, [pc, #72]	@ (8002800 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	4a0e      	ldr	r2, [pc, #56]	@ (80027f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027c0:	68d2      	ldr	r2, [r2, #12]
 80027c2:	0a12      	lsrs	r2, r2, #8
 80027c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
    break;
 80027ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	0e5b      	lsrs	r3, r3, #25
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	3301      	adds	r3, #1
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027ea:	687b      	ldr	r3, [r7, #4]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	40021000 	.word	0x40021000
 80027fc:	016e3600 	.word	0x016e3600
 8002800:	00f42400 	.word	0x00f42400

08002804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800280c:	2300      	movs	r3, #0
 800280e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002810:	2300      	movs	r3, #0
 8002812:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8098 	beq.w	8002952 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002826:	4b43      	ldr	r3, [pc, #268]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10d      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	4b40      	ldr	r3, [pc, #256]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002836:	4a3f      	ldr	r2, [pc, #252]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800283c:	6593      	str	r3, [r2, #88]	@ 0x58
 800283e:	4b3d      	ldr	r3, [pc, #244]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284a:	2301      	movs	r3, #1
 800284c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800284e:	4b3a      	ldr	r3, [pc, #232]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a39      	ldr	r2, [pc, #228]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002858:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800285a:	f7fe fcbf 	bl	80011dc <HAL_GetTick>
 800285e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002860:	e009      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002862:	f7fe fcbb 	bl	80011dc <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d902      	bls.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	74fb      	strb	r3, [r7, #19]
        break;
 8002874:	e005      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002876:	4b30      	ldr	r3, [pc, #192]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0ef      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002882:	7cfb      	ldrb	r3, [r7, #19]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d159      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002888:	4b2a      	ldr	r3, [pc, #168]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002892:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01e      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d019      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028a4:	4b23      	ldr	r3, [pc, #140]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b0:	4b20      	ldr	r3, [pc, #128]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028d0:	4a18      	ldr	r2, [pc, #96]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fc7b 	bl	80011dc <HAL_GetTick>
 80028e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e8:	e00b      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe fc77 	bl	80011dc <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d902      	bls.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002900:	e006      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002902:	4b0c      	ldr	r3, [pc, #48]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ec      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10b      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002916:	4b07      	ldr	r3, [pc, #28]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	4903      	ldr	r1, [pc, #12]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800292c:	e008      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800292e:	7cfb      	ldrb	r3, [r7, #19]
 8002930:	74bb      	strb	r3, [r7, #18]
 8002932:	e005      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002940:	7c7b      	ldrb	r3, [r7, #17]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d105      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002946:	4ba6      	ldr	r3, [pc, #664]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294a:	4aa5      	ldr	r2, [pc, #660]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002950:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800295e:	4ba0      	ldr	r3, [pc, #640]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002964:	f023 0203 	bic.w	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	499c      	ldr	r1, [pc, #624]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002980:	4b97      	ldr	r3, [pc, #604]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002986:	f023 020c 	bic.w	r2, r3, #12
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	4994      	ldr	r1, [pc, #592]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029a2:	4b8f      	ldr	r3, [pc, #572]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	498b      	ldr	r1, [pc, #556]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029c4:	4b86      	ldr	r3, [pc, #536]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	4983      	ldr	r1, [pc, #524]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029e6:	4b7e      	ldr	r3, [pc, #504]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	497a      	ldr	r1, [pc, #488]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a08:	4b75      	ldr	r3, [pc, #468]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	4972      	ldr	r1, [pc, #456]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	4969      	ldr	r1, [pc, #420]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a4c:	4b64      	ldr	r3, [pc, #400]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	4961      	ldr	r1, [pc, #388]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	4958      	ldr	r1, [pc, #352]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a90:	4b53      	ldr	r3, [pc, #332]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9e:	4950      	ldr	r1, [pc, #320]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002aae:	d105      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a4a      	ldr	r2, [pc, #296]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d015      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ac8:	4b45      	ldr	r3, [pc, #276]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ace:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	4942      	ldr	r1, [pc, #264]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae8:	4b3d      	ldr	r3, [pc, #244]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a3c      	ldr	r2, [pc, #240]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002af2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b00:	4b37      	ldr	r3, [pc, #220]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	4934      	ldr	r1, [pc, #208]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b20:	4b2f      	ldr	r3, [pc, #188]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a2e      	ldr	r2, [pc, #184]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b38:	4b29      	ldr	r3, [pc, #164]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b46:	4926      	ldr	r1, [pc, #152]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b56:	d105      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b58:	4b21      	ldr	r3, [pc, #132]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a20      	ldr	r2, [pc, #128]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d015      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b70:	4b1b      	ldr	r3, [pc, #108]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7e:	4918      	ldr	r1, [pc, #96]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b90:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a12      	ldr	r2, [pc, #72]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb6:	490a      	ldr	r1, [pc, #40]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bc8:	4b05      	ldr	r3, [pc, #20]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a04      	ldr	r2, [pc, #16]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e049      	b.n	8002c8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe f87a 	bl	8000d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	4619      	mov	r1, r3
 8002c22:	4610      	mov	r0, r2
 8002c24:	f000 fc86 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d001      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e04a      	b.n	8002d42 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a21      	ldr	r2, [pc, #132]	@ (8002d50 <HAL_TIM_Base_Start_IT+0xbc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d018      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x6c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd6:	d013      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x6c>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002d54 <HAL_TIM_Base_Start_IT+0xc0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00e      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x6c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d58 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d009      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x6c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d5c <HAL_TIM_Base_Start_IT+0xc8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x6c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a19      	ldr	r2, [pc, #100]	@ (8002d60 <HAL_TIM_Base_Start_IT+0xcc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d115      	bne.n	8002d2c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	4b17      	ldr	r3, [pc, #92]	@ (8002d64 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d015      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0xaa>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d18:	d011      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2a:	e008      	b.n	8002d3e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e000      	b.n	8002d40 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40000800 	.word	0x40000800
 8002d5c:	40013400 	.word	0x40013400
 8002d60:	40014000 	.word	0x40014000
 8002d64:	00010007 	.word	0x00010007

08002d68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e049      	b.n	8002e0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f841 	bl	8002e16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	4619      	mov	r1, r3
 8002da6:	4610      	mov	r0, r2
 8002da8:	f000 fbc4 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01b      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f06f 0202 	mvn.w	r2, #2
 8002e5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fb3f 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8002e7a:	e005      	b.n	8002e88 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fb31 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fb42 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d020      	beq.n	8002eda <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01b      	beq.n	8002eda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f06f 0204 	mvn.w	r2, #4
 8002eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fb19 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8002ec6:	e005      	b.n	8002ed4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fb0b 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fb1c 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d020      	beq.n	8002f26 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01b      	beq.n	8002f26 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f06f 0208 	mvn.w	r2, #8
 8002ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2204      	movs	r2, #4
 8002efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 faf3 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8002f12:	e005      	b.n	8002f20 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fae5 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 faf6 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d020      	beq.n	8002f72 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01b      	beq.n	8002f72 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f06f 0210 	mvn.w	r2, #16
 8002f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2208      	movs	r2, #8
 8002f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 facd 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8002f5e:	e005      	b.n	8002f6c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fabf 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fad0 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00c      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f06f 0201 	mvn.w	r2, #1
 8002f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7fd fc8b 	bl	80008ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d104      	bne.n	8002faa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 ff72 	bl	8003ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 ff6a 	bl	8003ebc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00c      	beq.n	800300c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fa8a 	bl	8003520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00c      	beq.n	8003030 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0220 	mvn.w	r2, #32
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 ff32 	bl	8003e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 ff3e 	bl	8003ed0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00c      	beq.n	8003078 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 ff36 	bl	8003ee4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00c      	beq.n	800309c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 ff2e 	bl	8003ef8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00c      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d007      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80030b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 ff26 	bl	8003f0c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e0ff      	b.n	80032e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b14      	cmp	r3, #20
 80030f2:	f200 80f0 	bhi.w	80032d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80030f6:	a201      	add	r2, pc, #4	@ (adr r2, 80030fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	08003151 	.word	0x08003151
 8003100:	080032d7 	.word	0x080032d7
 8003104:	080032d7 	.word	0x080032d7
 8003108:	080032d7 	.word	0x080032d7
 800310c:	08003191 	.word	0x08003191
 8003110:	080032d7 	.word	0x080032d7
 8003114:	080032d7 	.word	0x080032d7
 8003118:	080032d7 	.word	0x080032d7
 800311c:	080031d3 	.word	0x080031d3
 8003120:	080032d7 	.word	0x080032d7
 8003124:	080032d7 	.word	0x080032d7
 8003128:	080032d7 	.word	0x080032d7
 800312c:	08003213 	.word	0x08003213
 8003130:	080032d7 	.word	0x080032d7
 8003134:	080032d7 	.word	0x080032d7
 8003138:	080032d7 	.word	0x080032d7
 800313c:	08003255 	.word	0x08003255
 8003140:	080032d7 	.word	0x080032d7
 8003144:	080032d7 	.word	0x080032d7
 8003148:	080032d7 	.word	0x080032d7
 800314c:	08003295 	.word	0x08003295
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fa88 	bl	800366c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0208 	orr.w	r2, r2, #8
 800316a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0204 	bic.w	r2, r2, #4
 800317a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6999      	ldr	r1, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	619a      	str	r2, [r3, #24]
      break;
 800318e:	e0a5      	b.n	80032dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 faf8 	bl	800378c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6999      	ldr	r1, [r3, #24]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	021a      	lsls	r2, r3, #8
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	619a      	str	r2, [r3, #24]
      break;
 80031d0:	e084      	b.n	80032dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fb61 	bl	80038a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0208 	orr.w	r2, r2, #8
 80031ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0204 	bic.w	r2, r2, #4
 80031fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69d9      	ldr	r1, [r3, #28]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	61da      	str	r2, [r3, #28]
      break;
 8003210:	e064      	b.n	80032dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fbc9 	bl	80039b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800322c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800323c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69d9      	ldr	r1, [r3, #28]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	021a      	lsls	r2, r3, #8
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	61da      	str	r2, [r3, #28]
      break;
 8003252:	e043      	b.n	80032dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fc32 	bl	8003ac4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0208 	orr.w	r2, r2, #8
 800326e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0204 	bic.w	r2, r2, #4
 800327e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003292:	e023      	b.n	80032dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fc76 	bl	8003b8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	021a      	lsls	r2, r3, #8
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80032d4:	e002      	b.n	80032dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
      break;
 80032da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop

080032f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_TIM_ConfigClockSource+0x1c>
 8003308:	2302      	movs	r3, #2
 800330a:	e0de      	b.n	80034ca <HAL_TIM_ConfigClockSource+0x1da>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800332a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800332e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a63      	ldr	r2, [pc, #396]	@ (80034d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	f000 80a9 	beq.w	800349e <HAL_TIM_ConfigClockSource+0x1ae>
 800334c:	4a61      	ldr	r2, [pc, #388]	@ (80034d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	f200 80ae 	bhi.w	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003354:	4a60      	ldr	r2, [pc, #384]	@ (80034d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	f000 80a1 	beq.w	800349e <HAL_TIM_ConfigClockSource+0x1ae>
 800335c:	4a5e      	ldr	r2, [pc, #376]	@ (80034d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	f200 80a6 	bhi.w	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003364:	4a5d      	ldr	r2, [pc, #372]	@ (80034dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8003366:	4293      	cmp	r3, r2
 8003368:	f000 8099 	beq.w	800349e <HAL_TIM_ConfigClockSource+0x1ae>
 800336c:	4a5b      	ldr	r2, [pc, #364]	@ (80034dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800336e:	4293      	cmp	r3, r2
 8003370:	f200 809e 	bhi.w	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003374:	4a5a      	ldr	r2, [pc, #360]	@ (80034e0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	f000 8091 	beq.w	800349e <HAL_TIM_ConfigClockSource+0x1ae>
 800337c:	4a58      	ldr	r2, [pc, #352]	@ (80034e0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	f200 8096 	bhi.w	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003384:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003388:	f000 8089 	beq.w	800349e <HAL_TIM_ConfigClockSource+0x1ae>
 800338c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003390:	f200 808e 	bhi.w	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003398:	d03e      	beq.n	8003418 <HAL_TIM_ConfigClockSource+0x128>
 800339a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800339e:	f200 8087 	bhi.w	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a6:	f000 8086 	beq.w	80034b6 <HAL_TIM_ConfigClockSource+0x1c6>
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ae:	d87f      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033b0:	2b70      	cmp	r3, #112	@ 0x70
 80033b2:	d01a      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0xfa>
 80033b4:	2b70      	cmp	r3, #112	@ 0x70
 80033b6:	d87b      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033b8:	2b60      	cmp	r3, #96	@ 0x60
 80033ba:	d050      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x16e>
 80033bc:	2b60      	cmp	r3, #96	@ 0x60
 80033be:	d877      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033c0:	2b50      	cmp	r3, #80	@ 0x50
 80033c2:	d03c      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x14e>
 80033c4:	2b50      	cmp	r3, #80	@ 0x50
 80033c6:	d873      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033c8:	2b40      	cmp	r3, #64	@ 0x40
 80033ca:	d058      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x18e>
 80033cc:	2b40      	cmp	r3, #64	@ 0x40
 80033ce:	d86f      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033d0:	2b30      	cmp	r3, #48	@ 0x30
 80033d2:	d064      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x1ae>
 80033d4:	2b30      	cmp	r3, #48	@ 0x30
 80033d6:	d86b      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d060      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x1ae>
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d867      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d05c      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x1ae>
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d05a      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x1ae>
 80033e8:	e062      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033fa:	f000 fca9 	bl	8003d50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800340c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	609a      	str	r2, [r3, #8]
      break;
 8003416:	e04f      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003428:	f000 fc92 	bl	8003d50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800343a:	609a      	str	r2, [r3, #8]
      break;
 800343c:	e03c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800344a:	461a      	mov	r2, r3
 800344c:	f000 fc04 	bl	8003c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2150      	movs	r1, #80	@ 0x50
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fc5d 	bl	8003d16 <TIM_ITRx_SetConfig>
      break;
 800345c:	e02c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800346a:	461a      	mov	r2, r3
 800346c:	f000 fc23 	bl	8003cb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2160      	movs	r1, #96	@ 0x60
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fc4d 	bl	8003d16 <TIM_ITRx_SetConfig>
      break;
 800347c:	e01c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800348a:	461a      	mov	r2, r3
 800348c:	f000 fbe4 	bl	8003c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2140      	movs	r1, #64	@ 0x40
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fc3d 	bl	8003d16 <TIM_ITRx_SetConfig>
      break;
 800349c:	e00c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4619      	mov	r1, r3
 80034a8:	4610      	mov	r0, r2
 80034aa:	f000 fc34 	bl	8003d16 <TIM_ITRx_SetConfig>
      break;
 80034ae:	e003      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
      break;
 80034b4:	e000      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80034b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	00100070 	.word	0x00100070
 80034d8:	00100040 	.word	0x00100040
 80034dc:	00100030 	.word	0x00100030
 80034e0:	00100020 	.word	0x00100020

080034e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a42      	ldr	r2, [pc, #264]	@ (8003650 <TIM_Base_SetConfig+0x11c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00f      	beq.n	800356c <TIM_Base_SetConfig+0x38>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003552:	d00b      	beq.n	800356c <TIM_Base_SetConfig+0x38>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a3f      	ldr	r2, [pc, #252]	@ (8003654 <TIM_Base_SetConfig+0x120>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d007      	beq.n	800356c <TIM_Base_SetConfig+0x38>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3e      	ldr	r2, [pc, #248]	@ (8003658 <TIM_Base_SetConfig+0x124>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d003      	beq.n	800356c <TIM_Base_SetConfig+0x38>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a3d      	ldr	r2, [pc, #244]	@ (800365c <TIM_Base_SetConfig+0x128>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d108      	bne.n	800357e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a33      	ldr	r2, [pc, #204]	@ (8003650 <TIM_Base_SetConfig+0x11c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01b      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358c:	d017      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a30      	ldr	r2, [pc, #192]	@ (8003654 <TIM_Base_SetConfig+0x120>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2f      	ldr	r2, [pc, #188]	@ (8003658 <TIM_Base_SetConfig+0x124>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00f      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2e      	ldr	r2, [pc, #184]	@ (800365c <TIM_Base_SetConfig+0x128>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00b      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003660 <TIM_Base_SetConfig+0x12c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003664 <TIM_Base_SetConfig+0x130>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003668 <TIM_Base_SetConfig+0x134>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d108      	bne.n	80035d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a16      	ldr	r2, [pc, #88]	@ (8003650 <TIM_Base_SetConfig+0x11c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00f      	beq.n	800361c <TIM_Base_SetConfig+0xe8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a17      	ldr	r2, [pc, #92]	@ (800365c <TIM_Base_SetConfig+0x128>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00b      	beq.n	800361c <TIM_Base_SetConfig+0xe8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a16      	ldr	r2, [pc, #88]	@ (8003660 <TIM_Base_SetConfig+0x12c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d007      	beq.n	800361c <TIM_Base_SetConfig+0xe8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a15      	ldr	r2, [pc, #84]	@ (8003664 <TIM_Base_SetConfig+0x130>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d003      	beq.n	800361c <TIM_Base_SetConfig+0xe8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a14      	ldr	r2, [pc, #80]	@ (8003668 <TIM_Base_SetConfig+0x134>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d103      	bne.n	8003624 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d105      	bne.n	8003642 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	611a      	str	r2, [r3, #16]
  }
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40013400 	.word	0x40013400
 8003660:	40014000 	.word	0x40014000
 8003664:	40014400 	.word	0x40014400
 8003668:	40014800 	.word	0x40014800

0800366c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f023 0201 	bic.w	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800369a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0303 	bic.w	r3, r3, #3
 80036a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f023 0302 	bic.w	r3, r3, #2
 80036b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003778 <TIM_OC1_SetConfig+0x10c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00f      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a2b      	ldr	r2, [pc, #172]	@ (800377c <TIM_OC1_SetConfig+0x110>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00b      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003780 <TIM_OC1_SetConfig+0x114>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d007      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a29      	ldr	r2, [pc, #164]	@ (8003784 <TIM_OC1_SetConfig+0x118>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a28      	ldr	r2, [pc, #160]	@ (8003788 <TIM_OC1_SetConfig+0x11c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d10c      	bne.n	8003706 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 0308 	bic.w	r3, r3, #8
 80036f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a1b      	ldr	r2, [pc, #108]	@ (8003778 <TIM_OC1_SetConfig+0x10c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00f      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1a      	ldr	r2, [pc, #104]	@ (800377c <TIM_OC1_SetConfig+0x110>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00b      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a19      	ldr	r2, [pc, #100]	@ (8003780 <TIM_OC1_SetConfig+0x114>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a18      	ldr	r2, [pc, #96]	@ (8003784 <TIM_OC1_SetConfig+0x118>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <TIM_OC1_SetConfig+0x11c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d111      	bne.n	8003752 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800373c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40013400 	.word	0x40013400
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800

0800378c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f023 0210 	bic.w	r2, r3, #16
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0320 	bic.w	r3, r3, #32
 80037da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a28      	ldr	r2, [pc, #160]	@ (800388c <TIM_OC2_SetConfig+0x100>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_OC2_SetConfig+0x6c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a27      	ldr	r2, [pc, #156]	@ (8003890 <TIM_OC2_SetConfig+0x104>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10d      	bne.n	8003814 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003812:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <TIM_OC2_SetConfig+0x100>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00f      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a1c      	ldr	r2, [pc, #112]	@ (8003890 <TIM_OC2_SetConfig+0x104>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00b      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a1b      	ldr	r2, [pc, #108]	@ (8003894 <TIM_OC2_SetConfig+0x108>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a1a      	ldr	r2, [pc, #104]	@ (8003898 <TIM_OC2_SetConfig+0x10c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a19      	ldr	r2, [pc, #100]	@ (800389c <TIM_OC2_SetConfig+0x110>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d113      	bne.n	8003864 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40013400 	.word	0x40013400
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400
 800389c:	40014800 	.word	0x40014800

080038a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a27      	ldr	r2, [pc, #156]	@ (800399c <TIM_OC3_SetConfig+0xfc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_OC3_SetConfig+0x6a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a26      	ldr	r2, [pc, #152]	@ (80039a0 <TIM_OC3_SetConfig+0x100>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10d      	bne.n	8003926 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1c      	ldr	r2, [pc, #112]	@ (800399c <TIM_OC3_SetConfig+0xfc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00f      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1b      	ldr	r2, [pc, #108]	@ (80039a0 <TIM_OC3_SetConfig+0x100>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1a      	ldr	r2, [pc, #104]	@ (80039a4 <TIM_OC3_SetConfig+0x104>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a19      	ldr	r2, [pc, #100]	@ (80039a8 <TIM_OC3_SetConfig+0x108>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a18      	ldr	r2, [pc, #96]	@ (80039ac <TIM_OC3_SetConfig+0x10c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d113      	bne.n	8003976 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800395c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	621a      	str	r2, [r3, #32]
}
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40013400 	.word	0x40013400
 80039a4:	40014000 	.word	0x40014000
 80039a8:	40014400 	.word	0x40014400
 80039ac:	40014800 	.word	0x40014800

080039b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	031b      	lsls	r3, r3, #12
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a28      	ldr	r2, [pc, #160]	@ (8003ab0 <TIM_OC4_SetConfig+0x100>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d003      	beq.n	8003a1c <TIM_OC4_SetConfig+0x6c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a27      	ldr	r2, [pc, #156]	@ (8003ab4 <TIM_OC4_SetConfig+0x104>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d10d      	bne.n	8003a38 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	031b      	lsls	r3, r3, #12
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab0 <TIM_OC4_SetConfig+0x100>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00f      	beq.n	8003a60 <TIM_OC4_SetConfig+0xb0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab4 <TIM_OC4_SetConfig+0x104>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <TIM_OC4_SetConfig+0xb0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab8 <TIM_OC4_SetConfig+0x108>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <TIM_OC4_SetConfig+0xb0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a1a      	ldr	r2, [pc, #104]	@ (8003abc <TIM_OC4_SetConfig+0x10c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_OC4_SetConfig+0xb0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a19      	ldr	r2, [pc, #100]	@ (8003ac0 <TIM_OC4_SetConfig+0x110>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d113      	bne.n	8003a88 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	019b      	lsls	r3, r3, #6
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	019b      	lsls	r3, r3, #6
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40013400 	.word	0x40013400
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003b08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a17      	ldr	r2, [pc, #92]	@ (8003b78 <TIM_OC5_SetConfig+0xb4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00f      	beq.n	8003b3e <TIM_OC5_SetConfig+0x7a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a16      	ldr	r2, [pc, #88]	@ (8003b7c <TIM_OC5_SetConfig+0xb8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_OC5_SetConfig+0x7a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a15      	ldr	r2, [pc, #84]	@ (8003b80 <TIM_OC5_SetConfig+0xbc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_OC5_SetConfig+0x7a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a14      	ldr	r2, [pc, #80]	@ (8003b84 <TIM_OC5_SetConfig+0xc0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_OC5_SetConfig+0x7a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a13      	ldr	r2, [pc, #76]	@ (8003b88 <TIM_OC5_SetConfig+0xc4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d109      	bne.n	8003b52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	621a      	str	r2, [r3, #32]
}
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40013400 	.word	0x40013400
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40014400 	.word	0x40014400
 8003b88:	40014800 	.word	0x40014800

08003b8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	051b      	lsls	r3, r3, #20
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a18      	ldr	r2, [pc, #96]	@ (8003c44 <TIM_OC6_SetConfig+0xb8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00f      	beq.n	8003c08 <TIM_OC6_SetConfig+0x7c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a17      	ldr	r2, [pc, #92]	@ (8003c48 <TIM_OC6_SetConfig+0xbc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <TIM_OC6_SetConfig+0x7c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a16      	ldr	r2, [pc, #88]	@ (8003c4c <TIM_OC6_SetConfig+0xc0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d007      	beq.n	8003c08 <TIM_OC6_SetConfig+0x7c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a15      	ldr	r2, [pc, #84]	@ (8003c50 <TIM_OC6_SetConfig+0xc4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_OC6_SetConfig+0x7c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a14      	ldr	r2, [pc, #80]	@ (8003c54 <TIM_OC6_SetConfig+0xc8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d109      	bne.n	8003c1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	029b      	lsls	r3, r3, #10
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40013400 	.word	0x40013400
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40014400 	.word	0x40014400
 8003c54:	40014800 	.word	0x40014800

08003c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f023 0201 	bic.w	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f023 030a 	bic.w	r3, r3, #10
 8003c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	621a      	str	r2, [r3, #32]
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b087      	sub	sp, #28
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f023 0210 	bic.w	r2, r3, #16
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	031b      	lsls	r3, r3, #12
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	621a      	str	r2, [r3, #32]
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003d2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f043 0307 	orr.w	r3, r3, #7
 8003d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	609a      	str	r2, [r3, #8]
}
 8003d44:	bf00      	nop
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	021a      	lsls	r2, r3, #8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	609a      	str	r2, [r3, #8]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e065      	b.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d108      	bne.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003de2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1b      	ldr	r2, [pc, #108]	@ (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d018      	beq.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e1e:	d013      	beq.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a18      	ldr	r2, [pc, #96]	@ (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00e      	beq.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a17      	ldr	r2, [pc, #92]	@ (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d009      	beq.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a12      	ldr	r2, [pc, #72]	@ (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d004      	beq.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a13      	ldr	r2, [pc, #76]	@ (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d10c      	bne.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40013400 	.word	0x40013400
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40014000 	.word	0x40014000

08003e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e042      	b.n	8003fb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d106      	bne.n	8003f4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7fc ffc9 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2224      	movs	r2, #36	@ 0x24
 8003f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 ffac 	bl	8004ec8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fcdd 	bl	8004930 <UART_SetConfig>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e01b      	b.n	8003fb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f001 f82b 	bl	800500c <UART_CheckIdleState>
 8003fb6:	4603      	mov	r3, r0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	@ 0x28
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d17b      	bne.n	80040d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_UART_Transmit+0x26>
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e074      	b.n	80040d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2221      	movs	r2, #33	@ 0x21
 8003ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ffa:	f7fd f8ef 	bl	80011dc <HAL_GetTick>
 8003ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	88fa      	ldrh	r2, [r7, #6]
 8004004:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004018:	d108      	bne.n	800402c <HAL_UART_Transmit+0x6c>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e003      	b.n	8004034 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004034:	e030      	b.n	8004098 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2200      	movs	r2, #0
 800403e:	2180      	movs	r1, #128	@ 0x80
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f001 f88d 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e03d      	b.n	80040d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	3302      	adds	r3, #2
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	e007      	b.n	8004086 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	3301      	adds	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1c8      	bne.n	8004036 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2200      	movs	r2, #0
 80040ac:	2140      	movs	r1, #64	@ 0x40
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f001 f856 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e006      	b.n	80040d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	e000      	b.n	80040d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80040d2:	2302      	movs	r3, #2
  }
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3720      	adds	r7, #32
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	@ 0x28
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	f040 80b5 	bne.w	8004262 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_UART_Receive+0x28>
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0ad      	b.n	8004264 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2222      	movs	r2, #34	@ 0x22
 8004114:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800411e:	f7fd f85d 	bl	80011dc <HAL_GetTick>
 8004122:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	88fa      	ldrh	r2, [r7, #6]
 8004128:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	88fa      	ldrh	r2, [r7, #6]
 8004130:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800413c:	d10e      	bne.n	800415c <HAL_UART_Receive+0x80>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d105      	bne.n	8004152 <HAL_UART_Receive+0x76>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800414c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004150:	e02d      	b.n	80041ae <HAL_UART_Receive+0xd2>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	22ff      	movs	r2, #255	@ 0xff
 8004156:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800415a:	e028      	b.n	80041ae <HAL_UART_Receive+0xd2>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10d      	bne.n	8004180 <HAL_UART_Receive+0xa4>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <HAL_UART_Receive+0x9a>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	22ff      	movs	r2, #255	@ 0xff
 8004170:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004174:	e01b      	b.n	80041ae <HAL_UART_Receive+0xd2>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	227f      	movs	r2, #127	@ 0x7f
 800417a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800417e:	e016      	b.n	80041ae <HAL_UART_Receive+0xd2>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004188:	d10d      	bne.n	80041a6 <HAL_UART_Receive+0xca>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d104      	bne.n	800419c <HAL_UART_Receive+0xc0>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	227f      	movs	r2, #127	@ 0x7f
 8004196:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800419a:	e008      	b.n	80041ae <HAL_UART_Receive+0xd2>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	223f      	movs	r2, #63	@ 0x3f
 80041a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80041a4:	e003      	b.n	80041ae <HAL_UART_Receive+0xd2>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80041b4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041be:	d108      	bne.n	80041d2 <HAL_UART_Receive+0xf6>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	e003      	b.n	80041da <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80041da:	e036      	b.n	800424a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2200      	movs	r2, #0
 80041e4:	2120      	movs	r1, #32
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 ffba 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e032      	b.n	8004264 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10c      	bne.n	800421e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	b29a      	uxth	r2, r3
 800420c:	8a7b      	ldrh	r3, [r7, #18]
 800420e:	4013      	ands	r3, r2
 8004210:	b29a      	uxth	r2, r3
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	3302      	adds	r3, #2
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	e00c      	b.n	8004238 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	b2da      	uxtb	r2, r3
 8004226:	8a7b      	ldrh	r3, [r7, #18]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	4013      	ands	r3, r2
 800422c:	b2da      	uxtb	r2, r3
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3301      	adds	r3, #1
 8004236:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1c2      	bne.n	80041dc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	e000      	b.n	8004264 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004262:	2302      	movs	r3, #2
  }
}
 8004264:	4618      	mov	r0, r3
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b0ba      	sub	sp, #232	@ 0xe8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004292:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004296:	f640 030f 	movw	r3, #2063	@ 0x80f
 800429a:	4013      	ands	r3, r2
 800429c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80042a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d11b      	bne.n	80042e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d015      	beq.n	80042e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d105      	bne.n	80042cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8300 	beq.w	80048d6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	4798      	blx	r3
      }
      return;
 80042de:	e2fa      	b.n	80048d6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80042e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8123 	beq.w	8004530 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80042ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80042ee:	4b8d      	ldr	r3, [pc, #564]	@ (8004524 <HAL_UART_IRQHandler+0x2b8>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80042f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80042fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004528 <HAL_UART_IRQHandler+0x2bc>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 8116 	beq.w	8004530 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d011      	beq.n	8004334 <HAL_UART_IRQHandler+0xc8>
 8004310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00b      	beq.n	8004334 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2201      	movs	r2, #1
 8004322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432a:	f043 0201 	orr.w	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d011      	beq.n	8004364 <HAL_UART_IRQHandler+0xf8>
 8004340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00b      	beq.n	8004364 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2202      	movs	r2, #2
 8004352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435a:	f043 0204 	orr.w	r2, r3, #4
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d011      	beq.n	8004394 <HAL_UART_IRQHandler+0x128>
 8004370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00b      	beq.n	8004394 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2204      	movs	r2, #4
 8004382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438a:	f043 0202 	orr.w	r2, r3, #2
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d017      	beq.n	80043d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d105      	bne.n	80043b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80043ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80043b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004524 <HAL_UART_IRQHandler+0x2b8>)
 80043b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00b      	beq.n	80043d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2208      	movs	r2, #8
 80043be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c6:	f043 0208 	orr.w	r2, r3, #8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d012      	beq.n	8004402 <HAL_UART_IRQHandler+0x196>
 80043dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00c      	beq.n	8004402 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f8:	f043 0220 	orr.w	r2, r3, #32
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8266 	beq.w	80048da <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800440e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d013      	beq.n	8004442 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800441a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b00      	cmp	r3, #0
 8004424:	d105      	bne.n	8004432 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800442a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004448:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004456:	2b40      	cmp	r3, #64	@ 0x40
 8004458:	d005      	beq.n	8004466 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800445a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800445e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004462:	2b00      	cmp	r3, #0
 8004464:	d054      	beq.n	8004510 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fee7 	bl	800523a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004476:	2b40      	cmp	r3, #64	@ 0x40
 8004478:	d146      	bne.n	8004508 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3308      	adds	r3, #8
 8004480:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004490:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3308      	adds	r3, #8
 80044a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80044be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1d9      	bne.n	800447a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d017      	beq.n	8004500 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044d6:	4a15      	ldr	r2, [pc, #84]	@ (800452c <HAL_UART_IRQHandler+0x2c0>)
 80044d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fd f868 	bl	80015b6 <HAL_DMA_Abort_IT>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d019      	beq.n	8004520 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80044fa:	4610      	mov	r0, r2
 80044fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fe:	e00f      	b.n	8004520 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f9ff 	bl	8004904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004506:	e00b      	b.n	8004520 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f9fb 	bl	8004904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800450e:	e007      	b.n	8004520 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f9f7 	bl	8004904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800451e:	e1dc      	b.n	80048da <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004520:	bf00      	nop
    return;
 8004522:	e1da      	b.n	80048da <HAL_UART_IRQHandler+0x66e>
 8004524:	10000001 	.word	0x10000001
 8004528:	04000120 	.word	0x04000120
 800452c:	08005307 	.word	0x08005307

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004534:	2b01      	cmp	r3, #1
 8004536:	f040 8170 	bne.w	800481a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800453a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8169 	beq.w	800481a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8162 	beq.w	800481a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2210      	movs	r2, #16
 800455c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004568:	2b40      	cmp	r3, #64	@ 0x40
 800456a:	f040 80d8 	bne.w	800471e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800457c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80af 	beq.w	80046e4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800458c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004590:	429a      	cmp	r2, r3
 8004592:	f080 80a7 	bcs.w	80046e4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800459c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f040 8087 	bne.w	80046c2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80045c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1da      	bne.n	80045b4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3308      	adds	r3, #8
 8004604:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800460e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3308      	adds	r3, #8
 800461e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004622:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004626:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800462a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e1      	bne.n	80045fe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3308      	adds	r3, #8
 8004640:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800464a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800464c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004650:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800465e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004660:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004664:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800466c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e3      	bne.n	800463a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800468e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004690:	f023 0310 	bic.w	r3, r3, #16
 8004694:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e4      	bne.n	8004680 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fc ff21 	bl	8001504 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	b29b      	uxth	r3, r3
 80046da:	4619      	mov	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f91b 	bl	8004918 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80046e2:	e0fc      	b.n	80048de <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80046ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046ee:	429a      	cmp	r2, r3
 80046f0:	f040 80f5 	bne.w	80048de <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b20      	cmp	r3, #32
 8004704:	f040 80eb 	bne.w	80048de <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f8fe 	bl	8004918 <HAL_UARTEx_RxEventCallback>
      return;
 800471c:	e0df      	b.n	80048de <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800472a:	b29b      	uxth	r3, r3
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80d1 	beq.w	80048e2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80cc 	beq.w	80048e2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800475a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800475e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800476c:	647b      	str	r3, [r7, #68]	@ 0x44
 800476e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004772:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004774:	e841 2300 	strex	r3, r2, [r1]
 8004778:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800477a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e4      	bne.n	800474a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	623b      	str	r3, [r7, #32]
   return(result);
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3308      	adds	r3, #8
 80047a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80047aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e1      	bne.n	8004780 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f023 0310 	bic.w	r3, r3, #16
 80047e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	69b9      	ldr	r1, [r7, #24]
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	617b      	str	r3, [r7, #20]
   return(result);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e4      	bne.n	80047d0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800480c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004810:	4619      	mov	r1, r3
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f880 	bl	8004918 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004818:	e063      	b.n	80048e2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800481e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00e      	beq.n	8004844 <HAL_UART_IRQHandler+0x5d8>
 8004826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800482a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800483a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fda3 	bl	8005388 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004842:	e051      	b.n	80048e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800484c:	2b00      	cmp	r3, #0
 800484e:	d014      	beq.n	800487a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004858:	2b00      	cmp	r3, #0
 800485a:	d105      	bne.n	8004868 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800485c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004860:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800486c:	2b00      	cmp	r3, #0
 800486e:	d03a      	beq.n	80048e6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	4798      	blx	r3
    }
    return;
 8004878:	e035      	b.n	80048e6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <HAL_UART_IRQHandler+0x62e>
 8004886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800488a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fd4d 	bl	8005332 <UART_EndTransmit_IT>
    return;
 8004898:	e026      	b.n	80048e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_UART_IRQHandler+0x64e>
 80048a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fd7c 	bl	80053b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048b8:	e016      	b.n	80048e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80048ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d010      	beq.n	80048e8 <HAL_UART_IRQHandler+0x67c>
 80048c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	da0c      	bge.n	80048e8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fd64 	bl	800539c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048d4:	e008      	b.n	80048e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80048d6:	bf00      	nop
 80048d8:	e006      	b.n	80048e8 <HAL_UART_IRQHandler+0x67c>
    return;
 80048da:	bf00      	nop
 80048dc:	e004      	b.n	80048e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80048de:	bf00      	nop
 80048e0:	e002      	b.n	80048e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <HAL_UART_IRQHandler+0x67c>
    return;
 80048e6:	bf00      	nop
  }
}
 80048e8:	37e8      	adds	r7, #232	@ 0xe8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop

080048f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004934:	b08c      	sub	sp, #48	@ 0x30
 8004936:	af00      	add	r7, sp, #0
 8004938:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	431a      	orrs	r2, r3
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	431a      	orrs	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	4313      	orrs	r3, r2
 8004956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4bab      	ldr	r3, [pc, #684]	@ (8004c0c <UART_SetConfig+0x2dc>)
 8004960:	4013      	ands	r3, r2
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004968:	430b      	orrs	r3, r1
 800496a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4aa0      	ldr	r2, [pc, #640]	@ (8004c10 <UART_SetConfig+0x2e0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004998:	4313      	orrs	r3, r2
 800499a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80049a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049b0:	430b      	orrs	r3, r1
 80049b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	f023 010f 	bic.w	r1, r3, #15
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a91      	ldr	r2, [pc, #580]	@ (8004c14 <UART_SetConfig+0x2e4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d125      	bne.n	8004a20 <UART_SetConfig+0xf0>
 80049d4:	4b90      	ldr	r3, [pc, #576]	@ (8004c18 <UART_SetConfig+0x2e8>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d81a      	bhi.n	8004a18 <UART_SetConfig+0xe8>
 80049e2:	a201      	add	r2, pc, #4	@ (adr r2, 80049e8 <UART_SetConfig+0xb8>)
 80049e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e8:	080049f9 	.word	0x080049f9
 80049ec:	08004a09 	.word	0x08004a09
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a11 	.word	0x08004a11
 80049f8:	2301      	movs	r3, #1
 80049fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049fe:	e0d6      	b.n	8004bae <UART_SetConfig+0x27e>
 8004a00:	2302      	movs	r3, #2
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a06:	e0d2      	b.n	8004bae <UART_SetConfig+0x27e>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0e:	e0ce      	b.n	8004bae <UART_SetConfig+0x27e>
 8004a10:	2308      	movs	r3, #8
 8004a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a16:	e0ca      	b.n	8004bae <UART_SetConfig+0x27e>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a1e:	e0c6      	b.n	8004bae <UART_SetConfig+0x27e>
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a7d      	ldr	r2, [pc, #500]	@ (8004c1c <UART_SetConfig+0x2ec>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d138      	bne.n	8004a9c <UART_SetConfig+0x16c>
 8004a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c18 <UART_SetConfig+0x2e8>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b0c      	cmp	r3, #12
 8004a36:	d82d      	bhi.n	8004a94 <UART_SetConfig+0x164>
 8004a38:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <UART_SetConfig+0x110>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a75 	.word	0x08004a75
 8004a44:	08004a95 	.word	0x08004a95
 8004a48:	08004a95 	.word	0x08004a95
 8004a4c:	08004a95 	.word	0x08004a95
 8004a50:	08004a85 	.word	0x08004a85
 8004a54:	08004a95 	.word	0x08004a95
 8004a58:	08004a95 	.word	0x08004a95
 8004a5c:	08004a95 	.word	0x08004a95
 8004a60:	08004a7d 	.word	0x08004a7d
 8004a64:	08004a95 	.word	0x08004a95
 8004a68:	08004a95 	.word	0x08004a95
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a8d 	.word	0x08004a8d
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a7a:	e098      	b.n	8004bae <UART_SetConfig+0x27e>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a82:	e094      	b.n	8004bae <UART_SetConfig+0x27e>
 8004a84:	2304      	movs	r3, #4
 8004a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a8a:	e090      	b.n	8004bae <UART_SetConfig+0x27e>
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a92:	e08c      	b.n	8004bae <UART_SetConfig+0x27e>
 8004a94:	2310      	movs	r3, #16
 8004a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a9a:	e088      	b.n	8004bae <UART_SetConfig+0x27e>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a5f      	ldr	r2, [pc, #380]	@ (8004c20 <UART_SetConfig+0x2f0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d125      	bne.n	8004af2 <UART_SetConfig+0x1c2>
 8004aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8004c18 <UART_SetConfig+0x2e8>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ab0:	2b30      	cmp	r3, #48	@ 0x30
 8004ab2:	d016      	beq.n	8004ae2 <UART_SetConfig+0x1b2>
 8004ab4:	2b30      	cmp	r3, #48	@ 0x30
 8004ab6:	d818      	bhi.n	8004aea <UART_SetConfig+0x1ba>
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d00a      	beq.n	8004ad2 <UART_SetConfig+0x1a2>
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d814      	bhi.n	8004aea <UART_SetConfig+0x1ba>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <UART_SetConfig+0x19a>
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d008      	beq.n	8004ada <UART_SetConfig+0x1aa>
 8004ac8:	e00f      	b.n	8004aea <UART_SetConfig+0x1ba>
 8004aca:	2300      	movs	r3, #0
 8004acc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad0:	e06d      	b.n	8004bae <UART_SetConfig+0x27e>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad8:	e069      	b.n	8004bae <UART_SetConfig+0x27e>
 8004ada:	2304      	movs	r3, #4
 8004adc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae0:	e065      	b.n	8004bae <UART_SetConfig+0x27e>
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae8:	e061      	b.n	8004bae <UART_SetConfig+0x27e>
 8004aea:	2310      	movs	r3, #16
 8004aec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af0:	e05d      	b.n	8004bae <UART_SetConfig+0x27e>
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a4b      	ldr	r2, [pc, #300]	@ (8004c24 <UART_SetConfig+0x2f4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d125      	bne.n	8004b48 <UART_SetConfig+0x218>
 8004afc:	4b46      	ldr	r3, [pc, #280]	@ (8004c18 <UART_SetConfig+0x2e8>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b06:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b08:	d016      	beq.n	8004b38 <UART_SetConfig+0x208>
 8004b0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b0c:	d818      	bhi.n	8004b40 <UART_SetConfig+0x210>
 8004b0e:	2b80      	cmp	r3, #128	@ 0x80
 8004b10:	d00a      	beq.n	8004b28 <UART_SetConfig+0x1f8>
 8004b12:	2b80      	cmp	r3, #128	@ 0x80
 8004b14:	d814      	bhi.n	8004b40 <UART_SetConfig+0x210>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <UART_SetConfig+0x1f0>
 8004b1a:	2b40      	cmp	r3, #64	@ 0x40
 8004b1c:	d008      	beq.n	8004b30 <UART_SetConfig+0x200>
 8004b1e:	e00f      	b.n	8004b40 <UART_SetConfig+0x210>
 8004b20:	2300      	movs	r3, #0
 8004b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b26:	e042      	b.n	8004bae <UART_SetConfig+0x27e>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b2e:	e03e      	b.n	8004bae <UART_SetConfig+0x27e>
 8004b30:	2304      	movs	r3, #4
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b36:	e03a      	b.n	8004bae <UART_SetConfig+0x27e>
 8004b38:	2308      	movs	r3, #8
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b3e:	e036      	b.n	8004bae <UART_SetConfig+0x27e>
 8004b40:	2310      	movs	r3, #16
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b46:	e032      	b.n	8004bae <UART_SetConfig+0x27e>
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a30      	ldr	r2, [pc, #192]	@ (8004c10 <UART_SetConfig+0x2e0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d12a      	bne.n	8004ba8 <UART_SetConfig+0x278>
 8004b52:	4b31      	ldr	r3, [pc, #196]	@ (8004c18 <UART_SetConfig+0x2e8>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b60:	d01a      	beq.n	8004b98 <UART_SetConfig+0x268>
 8004b62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b66:	d81b      	bhi.n	8004ba0 <UART_SetConfig+0x270>
 8004b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b6c:	d00c      	beq.n	8004b88 <UART_SetConfig+0x258>
 8004b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b72:	d815      	bhi.n	8004ba0 <UART_SetConfig+0x270>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <UART_SetConfig+0x250>
 8004b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b7c:	d008      	beq.n	8004b90 <UART_SetConfig+0x260>
 8004b7e:	e00f      	b.n	8004ba0 <UART_SetConfig+0x270>
 8004b80:	2300      	movs	r3, #0
 8004b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b86:	e012      	b.n	8004bae <UART_SetConfig+0x27e>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b8e:	e00e      	b.n	8004bae <UART_SetConfig+0x27e>
 8004b90:	2304      	movs	r3, #4
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b96:	e00a      	b.n	8004bae <UART_SetConfig+0x27e>
 8004b98:	2308      	movs	r3, #8
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b9e:	e006      	b.n	8004bae <UART_SetConfig+0x27e>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba6:	e002      	b.n	8004bae <UART_SetConfig+0x27e>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a17      	ldr	r2, [pc, #92]	@ (8004c10 <UART_SetConfig+0x2e0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	f040 80a8 	bne.w	8004d0a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d834      	bhi.n	8004c2c <UART_SetConfig+0x2fc>
 8004bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc8 <UART_SetConfig+0x298>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004c2d 	.word	0x08004c2d
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004c2d 	.word	0x08004c2d
 8004bd8:	08004bfb 	.word	0x08004bfb
 8004bdc:	08004c2d 	.word	0x08004c2d
 8004be0:	08004c2d 	.word	0x08004c2d
 8004be4:	08004c2d 	.word	0x08004c2d
 8004be8:	08004c03 	.word	0x08004c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7fd fd66 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8004bf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bf2:	e021      	b.n	8004c38 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <UART_SetConfig+0x2f8>)
 8004bf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bf8:	e01e      	b.n	8004c38 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfa:	f7fd fcf1 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8004bfe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c00:	e01a      	b.n	8004c38 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c08:	e016      	b.n	8004c38 <UART_SetConfig+0x308>
 8004c0a:	bf00      	nop
 8004c0c:	cfff69f3 	.word	0xcfff69f3
 8004c10:	40008000 	.word	0x40008000
 8004c14:	40013800 	.word	0x40013800
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40004400 	.word	0x40004400
 8004c20:	40004800 	.word	0x40004800
 8004c24:	40004c00 	.word	0x40004c00
 8004c28:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 812a 	beq.w	8004e94 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c44:	4a9e      	ldr	r2, [pc, #632]	@ (8004ec0 <UART_SetConfig+0x590>)
 8004c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	4413      	add	r3, r2
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d305      	bcc.n	8004c70 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d903      	bls.n	8004c78 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c76:	e10d      	b.n	8004e94 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	60fa      	str	r2, [r7, #12]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c84:	4a8e      	ldr	r2, [pc, #568]	@ (8004ec0 <UART_SetConfig+0x590>)
 8004c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c9a:	f7fb fb11 	bl	80002c0 <__aeabi_uldivmod>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	020b      	lsls	r3, r1, #8
 8004cb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cb4:	0202      	lsls	r2, r0, #8
 8004cb6:	6979      	ldr	r1, [r7, #20]
 8004cb8:	6849      	ldr	r1, [r1, #4]
 8004cba:	0849      	lsrs	r1, r1, #1
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	eb12 0804 	adds.w	r8, r2, r4
 8004cc6:	eb43 0905 	adc.w	r9, r3, r5
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	469a      	mov	sl, r3
 8004cd2:	4693      	mov	fp, r2
 8004cd4:	4652      	mov	r2, sl
 8004cd6:	465b      	mov	r3, fp
 8004cd8:	4640      	mov	r0, r8
 8004cda:	4649      	mov	r1, r9
 8004cdc:	f7fb faf0 	bl	80002c0 <__aeabi_uldivmod>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cee:	d308      	bcc.n	8004d02 <UART_SetConfig+0x3d2>
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cf6:	d204      	bcs.n	8004d02 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6a3a      	ldr	r2, [r7, #32]
 8004cfe:	60da      	str	r2, [r3, #12]
 8004d00:	e0c8      	b.n	8004e94 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d08:	e0c4      	b.n	8004e94 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d12:	d167      	bne.n	8004de4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004d14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d828      	bhi.n	8004d6e <UART_SetConfig+0x43e>
 8004d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d24 <UART_SetConfig+0x3f4>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d51 	.word	0x08004d51
 8004d2c:	08004d59 	.word	0x08004d59
 8004d30:	08004d6f 	.word	0x08004d6f
 8004d34:	08004d5f 	.word	0x08004d5f
 8004d38:	08004d6f 	.word	0x08004d6f
 8004d3c:	08004d6f 	.word	0x08004d6f
 8004d40:	08004d6f 	.word	0x08004d6f
 8004d44:	08004d67 	.word	0x08004d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d48:	f7fd fcb8 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8004d4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d4e:	e014      	b.n	8004d7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d50:	f7fd fcca 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 8004d54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d56:	e010      	b.n	8004d7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d58:	4b5a      	ldr	r3, [pc, #360]	@ (8004ec4 <UART_SetConfig+0x594>)
 8004d5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d5c:	e00d      	b.n	8004d7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5e:	f7fd fc3f 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8004d62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d64:	e009      	b.n	8004d7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d6c:	e005      	b.n	8004d7a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8089 	beq.w	8004e94 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	4a4e      	ldr	r2, [pc, #312]	@ (8004ec0 <UART_SetConfig+0x590>)
 8004d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d94:	005a      	lsls	r2, r3, #1
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	085b      	lsrs	r3, r3, #1
 8004d9c:	441a      	add	r2, r3
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	2b0f      	cmp	r3, #15
 8004dac:	d916      	bls.n	8004ddc <UART_SetConfig+0x4ac>
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db4:	d212      	bcs.n	8004ddc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f023 030f 	bic.w	r3, r3, #15
 8004dbe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	8bfb      	ldrh	r3, [r7, #30]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	8bfa      	ldrh	r2, [r7, #30]
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	e05b      	b.n	8004e94 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004de2:	e057      	b.n	8004e94 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004de4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d828      	bhi.n	8004e3e <UART_SetConfig+0x50e>
 8004dec:	a201      	add	r2, pc, #4	@ (adr r2, 8004df4 <UART_SetConfig+0x4c4>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e19 	.word	0x08004e19
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e29 	.word	0x08004e29
 8004e00:	08004e3f 	.word	0x08004e3f
 8004e04:	08004e2f 	.word	0x08004e2f
 8004e08:	08004e3f 	.word	0x08004e3f
 8004e0c:	08004e3f 	.word	0x08004e3f
 8004e10:	08004e3f 	.word	0x08004e3f
 8004e14:	08004e37 	.word	0x08004e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e18:	f7fd fc50 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8004e1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e1e:	e014      	b.n	8004e4a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e20:	f7fd fc62 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 8004e24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e26:	e010      	b.n	8004e4a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e28:	4b26      	ldr	r3, [pc, #152]	@ (8004ec4 <UART_SetConfig+0x594>)
 8004e2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e2c:	e00d      	b.n	8004e4a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2e:	f7fd fbd7 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8004e32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e34:	e009      	b.n	8004e4a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e3c:	e005      	b.n	8004e4a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e48:	bf00      	nop
    }

    if (pclk != 0U)
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d021      	beq.n	8004e94 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec0 <UART_SetConfig+0x590>)
 8004e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	441a      	add	r2, r3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	2b0f      	cmp	r3, #15
 8004e78:	d909      	bls.n	8004e8e <UART_SetConfig+0x55e>
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e80:	d205      	bcs.n	8004e8e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60da      	str	r2, [r3, #12]
 8004e8c:	e002      	b.n	8004e94 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2200      	movs	r2, #0
 8004eae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004eb0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3730      	adds	r7, #48	@ 0x30
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ebe:	bf00      	nop
 8004ec0:	08008248 	.word	0x08008248
 8004ec4:	00f42400 	.word	0x00f42400

08004ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01a      	beq.n	8004fde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fc6:	d10a      	bne.n	8004fde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]
  }
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b098      	sub	sp, #96	@ 0x60
 8005010:	af02      	add	r7, sp, #8
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800501c:	f7fc f8de 	bl	80011dc <HAL_GetTick>
 8005020:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b08      	cmp	r3, #8
 800502e:	d12f      	bne.n	8005090 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005030:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005038:	2200      	movs	r2, #0
 800503a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f88e 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d022      	beq.n	8005090 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800505e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005068:	647b      	str	r3, [r7, #68]	@ 0x44
 800506a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800506e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e6      	bne.n	800504a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e063      	b.n	8005158 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d149      	bne.n	8005132 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800509e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a6:	2200      	movs	r2, #0
 80050a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f857 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d03c      	beq.n	8005132 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	623b      	str	r3, [r7, #32]
   return(result);
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80050d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1e6      	bne.n	80050b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3308      	adds	r3, #8
 80050f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3308      	adds	r3, #8
 8005108:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800510a:	61fa      	str	r2, [r7, #28]
 800510c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	69b9      	ldr	r1, [r7, #24]
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	617b      	str	r3, [r7, #20]
   return(result);
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e5      	bne.n	80050ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e012      	b.n	8005158 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3758      	adds	r7, #88	@ 0x58
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	4613      	mov	r3, r2
 800516e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005170:	e04f      	b.n	8005212 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005178:	d04b      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517a:	f7fc f82f 	bl	80011dc <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	429a      	cmp	r2, r3
 8005188:	d302      	bcc.n	8005190 <UART_WaitOnFlagUntilTimeout+0x30>
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e04e      	b.n	8005232 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d037      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b80      	cmp	r3, #128	@ 0x80
 80051a6:	d034      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b40      	cmp	r3, #64	@ 0x40
 80051ac:	d031      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d110      	bne.n	80051de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2208      	movs	r2, #8
 80051c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f838 	bl	800523a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2208      	movs	r2, #8
 80051ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e029      	b.n	8005232 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051ec:	d111      	bne.n	8005212 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f81e 	bl	800523a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e00f      	b.n	8005232 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4013      	ands	r3, r2
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	429a      	cmp	r2, r3
 8005220:	bf0c      	ite	eq
 8005222:	2301      	moveq	r3, #1
 8005224:	2300      	movne	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	461a      	mov	r2, r3
 800522a:	79fb      	ldrb	r3, [r7, #7]
 800522c:	429a      	cmp	r2, r3
 800522e:	d0a0      	beq.n	8005172 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800523a:	b480      	push	{r7}
 800523c:	b095      	sub	sp, #84	@ 0x54
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005260:	643b      	str	r3, [r7, #64]	@ 0x40
 8005262:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005266:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800526e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e6      	bne.n	8005242 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3308      	adds	r3, #8
 800527a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	61fb      	str	r3, [r7, #28]
   return(result);
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800528a:	f023 0301 	bic.w	r3, r3, #1
 800528e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3308      	adds	r3, #8
 8005296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800529a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800529e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e3      	bne.n	8005274 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d118      	bne.n	80052e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f023 0310 	bic.w	r3, r3, #16
 80052c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6979      	ldr	r1, [r7, #20]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	613b      	str	r3, [r7, #16]
   return(result);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e6      	bne.n	80052b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80052fa:	bf00      	nop
 80052fc:	3754      	adds	r7, #84	@ 0x54
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005312:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7ff faed 	bl	8004904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b088      	sub	sp, #32
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	e853 3f00 	ldrex	r3, [r3]
 8005346:	60bb      	str	r3, [r7, #8]
   return(result);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	6979      	ldr	r1, [r7, #20]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	e841 2300 	strex	r3, r2, [r1]
 8005364:	613b      	str	r3, [r7, #16]
   return(result);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e6      	bne.n	800533a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff fab8 	bl	80048f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005380:	bf00      	nop
 8005382:	3720      	adds	r7, #32
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_UARTEx_DisableFifoMode+0x16>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e027      	b.n	800542a <HAL_UARTEx_DisableFifoMode+0x66>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2224      	movs	r2, #36	@ 0x24
 80053e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0201 	bic.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005408:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800544a:	2302      	movs	r3, #2
 800544c:	e02d      	b.n	80054aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2224      	movs	r2, #36	@ 0x24
 800545a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0201 	bic.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f850 	bl	8005530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e02d      	b.n	8005526 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2224      	movs	r2, #36	@ 0x24
 80054d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0201 	bic.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f812 	bl	8005530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800553c:	2b00      	cmp	r3, #0
 800553e:	d108      	bne.n	8005552 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005550:	e031      	b.n	80055b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005552:	2308      	movs	r3, #8
 8005554:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005556:	2308      	movs	r3, #8
 8005558:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	0e5b      	lsrs	r3, r3, #25
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	0f5b      	lsrs	r3, r3, #29
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800557a:	7bbb      	ldrb	r3, [r7, #14]
 800557c:	7b3a      	ldrb	r2, [r7, #12]
 800557e:	4911      	ldr	r1, [pc, #68]	@ (80055c4 <UARTEx_SetNbDataToProcess+0x94>)
 8005580:	5c8a      	ldrb	r2, [r1, r2]
 8005582:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005586:	7b3a      	ldrb	r2, [r7, #12]
 8005588:	490f      	ldr	r1, [pc, #60]	@ (80055c8 <UARTEx_SetNbDataToProcess+0x98>)
 800558a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800558c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005590:	b29a      	uxth	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	7b7a      	ldrb	r2, [r7, #13]
 800559c:	4909      	ldr	r1, [pc, #36]	@ (80055c4 <UARTEx_SetNbDataToProcess+0x94>)
 800559e:	5c8a      	ldrb	r2, [r1, r2]
 80055a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055a4:	7b7a      	ldrb	r2, [r7, #13]
 80055a6:	4908      	ldr	r1, [pc, #32]	@ (80055c8 <UARTEx_SetNbDataToProcess+0x98>)
 80055a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80055b6:	bf00      	nop
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	08008260 	.word	0x08008260
 80055c8:	08008268 	.word	0x08008268

080055cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055de:	2b84      	cmp	r3, #132	@ 0x84
 80055e0:	d005      	beq.n	80055ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80055e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4413      	add	r3, r2
 80055ea:	3303      	adds	r3, #3
 80055ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055ee:	68fb      	ldr	r3, [r7, #12]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005600:	f000 fa74 	bl	8005aec <vTaskStartScheduler>
  
  return osOK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	bd80      	pop	{r7, pc}

0800560a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800560a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800560c:	b087      	sub	sp, #28
 800560e:	af02      	add	r7, sp, #8
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685c      	ldr	r4, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005620:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ffcf 	bl	80055cc <makeFreeRtosPriority>
 800562e:	4602      	mov	r2, r0
 8005630:	f107 030c 	add.w	r3, r7, #12
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	9200      	str	r2, [sp, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	4632      	mov	r2, r6
 800563c:	4629      	mov	r1, r5
 800563e:	4620      	mov	r0, r4
 8005640:	f000 f8d2 	bl	80057e8 <xTaskCreate>
 8005644:	4603      	mov	r3, r0
 8005646:	2b01      	cmp	r3, #1
 8005648:	d001      	beq.n	800564e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	e000      	b.n	8005650 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800564e:	68fb      	ldr	r3, [r7, #12]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005658 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <osDelay+0x16>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	e000      	b.n	8005670 <osDelay+0x18>
 800566e:	2301      	movs	r3, #1
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fa05 	bl	8005a80 <vTaskDelay>
  
  return osOK;
 8005676:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f103 0208 	add.w	r2, r3, #8
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005698:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f103 0208 	add.w	r2, r3, #8
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f103 0208 	add.w	r2, r3, #8
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056da:	b480      	push	{r7}
 80056dc:	b085      	sub	sp, #20
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	601a      	str	r2, [r3, #0]
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005738:	d103      	bne.n	8005742 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e00c      	b.n	800575c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3308      	adds	r3, #8
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	e002      	b.n	8005750 <vListInsert+0x2e>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	429a      	cmp	r2, r3
 800575a:	d2f6      	bcs.n	800574a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	601a      	str	r2, [r3, #0]
}
 8005788:	bf00      	nop
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6892      	ldr	r2, [r2, #8]
 80057aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6852      	ldr	r2, [r2, #4]
 80057b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d103      	bne.n	80057c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	1e5a      	subs	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08c      	sub	sp, #48	@ 0x30
 80057ec:	af04      	add	r7, sp, #16
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057f8:	88fb      	ldrh	r3, [r7, #6]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fec3 	bl	8006588 <pvPortMalloc>
 8005802:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00e      	beq.n	8005828 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800580a:	20a0      	movs	r0, #160	@ 0xa0
 800580c:	f000 febc 	bl	8006588 <pvPortMalloc>
 8005810:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	631a      	str	r2, [r3, #48]	@ 0x30
 800581e:	e005      	b.n	800582c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005820:	6978      	ldr	r0, [r7, #20]
 8005822:	f000 ff7f 	bl	8006724 <vPortFree>
 8005826:	e001      	b.n	800582c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005828:	2300      	movs	r3, #0
 800582a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d013      	beq.n	800585a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005832:	88fa      	ldrh	r2, [r7, #6]
 8005834:	2300      	movs	r3, #0
 8005836:	9303      	str	r3, [sp, #12]
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	9302      	str	r3, [sp, #8]
 800583c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f80f 	bl	800586c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800584e:	69f8      	ldr	r0, [r7, #28]
 8005850:	f000 f8ac 	bl	80059ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005854:	2301      	movs	r3, #1
 8005856:	61bb      	str	r3, [r7, #24]
 8005858:	e002      	b.n	8005860 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800585a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800585e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005860:	69bb      	ldr	r3, [r7, #24]
	}
 8005862:	4618      	mov	r0, r3
 8005864:	3720      	adds	r7, #32
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800587a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005884:	3b01      	subs	r3, #1
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f023 0307 	bic.w	r3, r3, #7
 8005892:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00b      	beq.n	80058b6 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop
 80058b4:	e7fd      	b.n	80058b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01f      	beq.n	80058fc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058bc:	2300      	movs	r3, #0
 80058be:	61fb      	str	r3, [r7, #28]
 80058c0:	e012      	b.n	80058e8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	4413      	add	r3, r2
 80058c8:	7819      	ldrb	r1, [r3, #0]
 80058ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	4413      	add	r3, r2
 80058d0:	3334      	adds	r3, #52	@ 0x34
 80058d2:	460a      	mov	r2, r1
 80058d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	4413      	add	r3, r2
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d006      	beq.n	80058f0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	3301      	adds	r3, #1
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b0f      	cmp	r3, #15
 80058ec:	d9e9      	bls.n	80058c2 <prvInitialiseNewTask+0x56>
 80058ee:	e000      	b.n	80058f2 <prvInitialiseNewTask+0x86>
			{
				break;
 80058f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058fa:	e003      	b.n	8005904 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005906:	2b06      	cmp	r3, #6
 8005908:	d901      	bls.n	800590e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800590a:	2306      	movs	r3, #6
 800590c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800590e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005910:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005912:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005918:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800591a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591c:	2200      	movs	r2, #0
 800591e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005922:	3304      	adds	r3, #4
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff fecb 	bl	80056c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	3318      	adds	r3, #24
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fec6 	bl	80056c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005938:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800593a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593c:	f1c3 0207 	rsb	r2, r3, #7
 8005940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005942:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005948:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800594a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594c:	2200      	movs	r2, #0
 800594e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	2200      	movs	r2, #0
 8005956:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800595a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595c:	334c      	adds	r3, #76	@ 0x4c
 800595e:	224c      	movs	r2, #76	@ 0x4c
 8005960:	2100      	movs	r1, #0
 8005962:	4618      	mov	r0, r3
 8005964:	f001 fb78 	bl	8007058 <memset>
 8005968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596a:	4a0d      	ldr	r2, [pc, #52]	@ (80059a0 <prvInitialiseNewTask+0x134>)
 800596c:	651a      	str	r2, [r3, #80]	@ 0x50
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	4a0c      	ldr	r2, [pc, #48]	@ (80059a4 <prvInitialiseNewTask+0x138>)
 8005972:	655a      	str	r2, [r3, #84]	@ 0x54
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	4a0c      	ldr	r2, [pc, #48]	@ (80059a8 <prvInitialiseNewTask+0x13c>)
 8005978:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	68f9      	ldr	r1, [r7, #12]
 800597e:	69b8      	ldr	r0, [r7, #24]
 8005980:	f000 fbf2 	bl	8006168 <pxPortInitialiseStack>
 8005984:	4602      	mov	r2, r0
 8005986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005988:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800598a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005996:	bf00      	nop
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20001428 	.word	0x20001428
 80059a4:	20001490 	.word	0x20001490
 80059a8:	200014f8 	.word	0x200014f8

080059ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059b4:	f000 fd08 	bl	80063c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005a64 <prvAddNewTaskToReadyList+0xb8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3301      	adds	r3, #1
 80059be:	4a29      	ldr	r2, [pc, #164]	@ (8005a64 <prvAddNewTaskToReadyList+0xb8>)
 80059c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059c2:	4b29      	ldr	r3, [pc, #164]	@ (8005a68 <prvAddNewTaskToReadyList+0xbc>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059ca:	4a27      	ldr	r2, [pc, #156]	@ (8005a68 <prvAddNewTaskToReadyList+0xbc>)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059d0:	4b24      	ldr	r3, [pc, #144]	@ (8005a64 <prvAddNewTaskToReadyList+0xb8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d110      	bne.n	80059fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059d8:	f000 fabc 	bl	8005f54 <prvInitialiseTaskLists>
 80059dc:	e00d      	b.n	80059fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059de:	4b23      	ldr	r3, [pc, #140]	@ (8005a6c <prvAddNewTaskToReadyList+0xc0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d109      	bne.n	80059fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059e6:	4b20      	ldr	r3, [pc, #128]	@ (8005a68 <prvAddNewTaskToReadyList+0xbc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d802      	bhi.n	80059fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a68 <prvAddNewTaskToReadyList+0xbc>)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005a70 <prvAddNewTaskToReadyList+0xc4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3301      	adds	r3, #1
 8005a00:	4a1b      	ldr	r2, [pc, #108]	@ (8005a70 <prvAddNewTaskToReadyList+0xc4>)
 8005a02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	2201      	movs	r2, #1
 8005a0a:	409a      	lsls	r2, r3
 8005a0c:	4b19      	ldr	r3, [pc, #100]	@ (8005a74 <prvAddNewTaskToReadyList+0xc8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	4a18      	ldr	r2, [pc, #96]	@ (8005a74 <prvAddNewTaskToReadyList+0xc8>)
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4a15      	ldr	r2, [pc, #84]	@ (8005a78 <prvAddNewTaskToReadyList+0xcc>)
 8005a24:	441a      	add	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	f7ff fe54 	bl	80056da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a32:	f000 fcfb 	bl	800642c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a36:	4b0d      	ldr	r3, [pc, #52]	@ (8005a6c <prvAddNewTaskToReadyList+0xc0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00e      	beq.n	8005a5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a68 <prvAddNewTaskToReadyList+0xbc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d207      	bcs.n	8005a5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a7c <prvAddNewTaskToReadyList+0xd0>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a5c:	bf00      	nop
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20000480 	.word	0x20000480
 8005a68:	20000380 	.word	0x20000380
 8005a6c:	2000048c 	.word	0x2000048c
 8005a70:	2000049c 	.word	0x2000049c
 8005a74:	20000488 	.word	0x20000488
 8005a78:	20000384 	.word	0x20000384
 8005a7c:	e000ed04 	.word	0xe000ed04

08005a80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d018      	beq.n	8005ac4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a92:	4b14      	ldr	r3, [pc, #80]	@ (8005ae4 <vTaskDelay+0x64>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00b      	beq.n	8005ab2 <vTaskDelay+0x32>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	60bb      	str	r3, [r7, #8]
}
 8005aac:	bf00      	nop
 8005aae:	bf00      	nop
 8005ab0:	e7fd      	b.n	8005aae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ab2:	f000 f86d 	bl	8005b90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 faef 	bl	800609c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005abe:	f000 f875 	bl	8005bac <xTaskResumeAll>
 8005ac2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d107      	bne.n	8005ada <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005aca:	4b07      	ldr	r3, [pc, #28]	@ (8005ae8 <vTaskDelay+0x68>)
 8005acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200004a8 	.word	0x200004a8
 8005ae8:	e000ed04 	.word	0xe000ed04

08005aec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005af2:	4b1f      	ldr	r3, [pc, #124]	@ (8005b70 <vTaskStartScheduler+0x84>)
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	2300      	movs	r3, #0
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	2300      	movs	r3, #0
 8005afc:	2280      	movs	r2, #128	@ 0x80
 8005afe:	491d      	ldr	r1, [pc, #116]	@ (8005b74 <vTaskStartScheduler+0x88>)
 8005b00:	481d      	ldr	r0, [pc, #116]	@ (8005b78 <vTaskStartScheduler+0x8c>)
 8005b02:	f7ff fe71 	bl	80057e8 <xTaskCreate>
 8005b06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d11b      	bne.n	8005b46 <vTaskStartScheduler+0x5a>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	60bb      	str	r3, [r7, #8]
}
 8005b20:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b22:	4b16      	ldr	r3, [pc, #88]	@ (8005b7c <vTaskStartScheduler+0x90>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	334c      	adds	r3, #76	@ 0x4c
 8005b28:	4a15      	ldr	r2, [pc, #84]	@ (8005b80 <vTaskStartScheduler+0x94>)
 8005b2a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b2c:	4b15      	ldr	r3, [pc, #84]	@ (8005b84 <vTaskStartScheduler+0x98>)
 8005b2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b34:	4b14      	ldr	r3, [pc, #80]	@ (8005b88 <vTaskStartScheduler+0x9c>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b3a:	4b14      	ldr	r3, [pc, #80]	@ (8005b8c <vTaskStartScheduler+0xa0>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b40:	f000 fb9e 	bl	8006280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b44:	e00f      	b.n	8005b66 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b4c:	d10b      	bne.n	8005b66 <vTaskStartScheduler+0x7a>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	e7fd      	b.n	8005b62 <vTaskStartScheduler+0x76>
}
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	200004a4 	.word	0x200004a4
 8005b74:	080081b0 	.word	0x080081b0
 8005b78:	08005f25 	.word	0x08005f25
 8005b7c:	20000380 	.word	0x20000380
 8005b80:	20000024 	.word	0x20000024
 8005b84:	200004a0 	.word	0x200004a0
 8005b88:	2000048c 	.word	0x2000048c
 8005b8c:	20000484 	.word	0x20000484

08005b90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b94:	4b04      	ldr	r3, [pc, #16]	@ (8005ba8 <vTaskSuspendAll+0x18>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	4a03      	ldr	r2, [pc, #12]	@ (8005ba8 <vTaskSuspendAll+0x18>)
 8005b9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b9e:	bf00      	nop
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	200004a8 	.word	0x200004a8

08005bac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bba:	4b42      	ldr	r3, [pc, #264]	@ (8005cc4 <xTaskResumeAll+0x118>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10b      	bne.n	8005bda <xTaskResumeAll+0x2e>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	603b      	str	r3, [r7, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop
 8005bd8:	e7fd      	b.n	8005bd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bda:	f000 fbf5 	bl	80063c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bde:	4b39      	ldr	r3, [pc, #228]	@ (8005cc4 <xTaskResumeAll+0x118>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	4a37      	ldr	r2, [pc, #220]	@ (8005cc4 <xTaskResumeAll+0x118>)
 8005be6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005be8:	4b36      	ldr	r3, [pc, #216]	@ (8005cc4 <xTaskResumeAll+0x118>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d161      	bne.n	8005cb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bf0:	4b35      	ldr	r3, [pc, #212]	@ (8005cc8 <xTaskResumeAll+0x11c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d05d      	beq.n	8005cb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bf8:	e02e      	b.n	8005c58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bfa:	4b34      	ldr	r3, [pc, #208]	@ (8005ccc <xTaskResumeAll+0x120>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3318      	adds	r3, #24
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fdc4 	bl	8005794 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fdbf 	bl	8005794 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	409a      	lsls	r2, r3
 8005c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005cd0 <xTaskResumeAll+0x124>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	4a2a      	ldr	r2, [pc, #168]	@ (8005cd0 <xTaskResumeAll+0x124>)
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4a27      	ldr	r2, [pc, #156]	@ (8005cd4 <xTaskResumeAll+0x128>)
 8005c36:	441a      	add	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4610      	mov	r0, r2
 8005c40:	f7ff fd4b 	bl	80056da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c48:	4b23      	ldr	r3, [pc, #140]	@ (8005cd8 <xTaskResumeAll+0x12c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d302      	bcc.n	8005c58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c52:	4b22      	ldr	r3, [pc, #136]	@ (8005cdc <xTaskResumeAll+0x130>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c58:	4b1c      	ldr	r3, [pc, #112]	@ (8005ccc <xTaskResumeAll+0x120>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1cc      	bne.n	8005bfa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c66:	f000 f9f9 	bl	800605c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce0 <xTaskResumeAll+0x134>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d010      	beq.n	8005c98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c76:	f000 f837 	bl	8005ce8 <xTaskIncrementTick>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c80:	4b16      	ldr	r3, [pc, #88]	@ (8005cdc <xTaskResumeAll+0x130>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f1      	bne.n	8005c76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c92:	4b13      	ldr	r3, [pc, #76]	@ (8005ce0 <xTaskResumeAll+0x134>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c98:	4b10      	ldr	r3, [pc, #64]	@ (8005cdc <xTaskResumeAll+0x130>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d009      	beq.n	8005cb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce4 <xTaskResumeAll+0x138>)
 8005ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cb4:	f000 fbba 	bl	800642c <vPortExitCritical>

	return xAlreadyYielded;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	200004a8 	.word	0x200004a8
 8005cc8:	20000480 	.word	0x20000480
 8005ccc:	20000440 	.word	0x20000440
 8005cd0:	20000488 	.word	0x20000488
 8005cd4:	20000384 	.word	0x20000384
 8005cd8:	20000380 	.word	0x20000380
 8005cdc:	20000494 	.word	0x20000494
 8005ce0:	20000490 	.word	0x20000490
 8005ce4:	e000ed04 	.word	0xe000ed04

08005ce8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8005e30 <xTaskIncrementTick+0x148>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f040 808f 	bne.w	8005e1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8005e34 <xTaskIncrementTick+0x14c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3301      	adds	r3, #1
 8005d02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d04:	4a4b      	ldr	r2, [pc, #300]	@ (8005e34 <xTaskIncrementTick+0x14c>)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d121      	bne.n	8005d54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d10:	4b49      	ldr	r3, [pc, #292]	@ (8005e38 <xTaskIncrementTick+0x150>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00b      	beq.n	8005d32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	603b      	str	r3, [r7, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	bf00      	nop
 8005d30:	e7fd      	b.n	8005d2e <xTaskIncrementTick+0x46>
 8005d32:	4b41      	ldr	r3, [pc, #260]	@ (8005e38 <xTaskIncrementTick+0x150>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	4b40      	ldr	r3, [pc, #256]	@ (8005e3c <xTaskIncrementTick+0x154>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e38 <xTaskIncrementTick+0x150>)
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	4a3e      	ldr	r2, [pc, #248]	@ (8005e3c <xTaskIncrementTick+0x154>)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	4b3e      	ldr	r3, [pc, #248]	@ (8005e40 <xTaskIncrementTick+0x158>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e40 <xTaskIncrementTick+0x158>)
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	f000 f984 	bl	800605c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d54:	4b3b      	ldr	r3, [pc, #236]	@ (8005e44 <xTaskIncrementTick+0x15c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d348      	bcc.n	8005df0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d5e:	4b36      	ldr	r3, [pc, #216]	@ (8005e38 <xTaskIncrementTick+0x150>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d104      	bne.n	8005d72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d68:	4b36      	ldr	r3, [pc, #216]	@ (8005e44 <xTaskIncrementTick+0x15c>)
 8005d6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d6e:	601a      	str	r2, [r3, #0]
					break;
 8005d70:	e03e      	b.n	8005df0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d72:	4b31      	ldr	r3, [pc, #196]	@ (8005e38 <xTaskIncrementTick+0x150>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d203      	bcs.n	8005d92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d8a:	4a2e      	ldr	r2, [pc, #184]	@ (8005e44 <xTaskIncrementTick+0x15c>)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d90:	e02e      	b.n	8005df0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	3304      	adds	r3, #4
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fcfc 	bl	8005794 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d004      	beq.n	8005dae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	3318      	adds	r3, #24
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff fcf3 	bl	8005794 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	2201      	movs	r2, #1
 8005db4:	409a      	lsls	r2, r3
 8005db6:	4b24      	ldr	r3, [pc, #144]	@ (8005e48 <xTaskIncrementTick+0x160>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	4a22      	ldr	r2, [pc, #136]	@ (8005e48 <xTaskIncrementTick+0x160>)
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8005e4c <xTaskIncrementTick+0x164>)
 8005dce:	441a      	add	r2, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f7ff fc7f 	bl	80056da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e50 <xTaskIncrementTick+0x168>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d3b9      	bcc.n	8005d5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005dea:	2301      	movs	r3, #1
 8005dec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dee:	e7b6      	b.n	8005d5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005df0:	4b17      	ldr	r3, [pc, #92]	@ (8005e50 <xTaskIncrementTick+0x168>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df6:	4915      	ldr	r1, [pc, #84]	@ (8005e4c <xTaskIncrementTick+0x164>)
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d901      	bls.n	8005e0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e0c:	4b11      	ldr	r3, [pc, #68]	@ (8005e54 <xTaskIncrementTick+0x16c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e14:	2301      	movs	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	e004      	b.n	8005e24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e58 <xTaskIncrementTick+0x170>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	4a0d      	ldr	r2, [pc, #52]	@ (8005e58 <xTaskIncrementTick+0x170>)
 8005e22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e24:	697b      	ldr	r3, [r7, #20]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	200004a8 	.word	0x200004a8
 8005e34:	20000484 	.word	0x20000484
 8005e38:	20000438 	.word	0x20000438
 8005e3c:	2000043c 	.word	0x2000043c
 8005e40:	20000498 	.word	0x20000498
 8005e44:	200004a0 	.word	0x200004a0
 8005e48:	20000488 	.word	0x20000488
 8005e4c:	20000384 	.word	0x20000384
 8005e50:	20000380 	.word	0x20000380
 8005e54:	20000494 	.word	0x20000494
 8005e58:	20000490 	.word	0x20000490

08005e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e62:	4b2a      	ldr	r3, [pc, #168]	@ (8005f0c <vTaskSwitchContext+0xb0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e6a:	4b29      	ldr	r3, [pc, #164]	@ (8005f10 <vTaskSwitchContext+0xb4>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e70:	e045      	b.n	8005efe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005e72:	4b27      	ldr	r3, [pc, #156]	@ (8005f10 <vTaskSwitchContext+0xb4>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e78:	4b26      	ldr	r3, [pc, #152]	@ (8005f14 <vTaskSwitchContext+0xb8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	fab3 f383 	clz	r3, r3
 8005e84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e86:	7afb      	ldrb	r3, [r7, #11]
 8005e88:	f1c3 031f 	rsb	r3, r3, #31
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	4922      	ldr	r1, [pc, #136]	@ (8005f18 <vTaskSwitchContext+0xbc>)
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10b      	bne.n	8005eba <vTaskSwitchContext+0x5e>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	607b      	str	r3, [r7, #4]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <vTaskSwitchContext+0x5a>
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4a14      	ldr	r2, [pc, #80]	@ (8005f18 <vTaskSwitchContext+0xbc>)
 8005ec6:	4413      	add	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	605a      	str	r2, [r3, #4]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	3308      	adds	r3, #8
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d104      	bne.n	8005eea <vTaskSwitchContext+0x8e>
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8005f1c <vTaskSwitchContext+0xc0>)
 8005ef2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ef4:	4b09      	ldr	r3, [pc, #36]	@ (8005f1c <vTaskSwitchContext+0xc0>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	334c      	adds	r3, #76	@ 0x4c
 8005efa:	4a09      	ldr	r2, [pc, #36]	@ (8005f20 <vTaskSwitchContext+0xc4>)
 8005efc:	6013      	str	r3, [r2, #0]
}
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	200004a8 	.word	0x200004a8
 8005f10:	20000494 	.word	0x20000494
 8005f14:	20000488 	.word	0x20000488
 8005f18:	20000384 	.word	0x20000384
 8005f1c:	20000380 	.word	0x20000380
 8005f20:	20000024 	.word	0x20000024

08005f24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f2c:	f000 f852 	bl	8005fd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f30:	4b06      	ldr	r3, [pc, #24]	@ (8005f4c <prvIdleTask+0x28>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d9f9      	bls.n	8005f2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f38:	4b05      	ldr	r3, [pc, #20]	@ (8005f50 <prvIdleTask+0x2c>)
 8005f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f48:	e7f0      	b.n	8005f2c <prvIdleTask+0x8>
 8005f4a:	bf00      	nop
 8005f4c:	20000384 	.word	0x20000384
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	607b      	str	r3, [r7, #4]
 8005f5e:	e00c      	b.n	8005f7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4a12      	ldr	r2, [pc, #72]	@ (8005fb4 <prvInitialiseTaskLists+0x60>)
 8005f6c:	4413      	add	r3, r2
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fb86 	bl	8005680 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3301      	adds	r3, #1
 8005f78:	607b      	str	r3, [r7, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b06      	cmp	r3, #6
 8005f7e:	d9ef      	bls.n	8005f60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f80:	480d      	ldr	r0, [pc, #52]	@ (8005fb8 <prvInitialiseTaskLists+0x64>)
 8005f82:	f7ff fb7d 	bl	8005680 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f86:	480d      	ldr	r0, [pc, #52]	@ (8005fbc <prvInitialiseTaskLists+0x68>)
 8005f88:	f7ff fb7a 	bl	8005680 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f8c:	480c      	ldr	r0, [pc, #48]	@ (8005fc0 <prvInitialiseTaskLists+0x6c>)
 8005f8e:	f7ff fb77 	bl	8005680 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f92:	480c      	ldr	r0, [pc, #48]	@ (8005fc4 <prvInitialiseTaskLists+0x70>)
 8005f94:	f7ff fb74 	bl	8005680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f98:	480b      	ldr	r0, [pc, #44]	@ (8005fc8 <prvInitialiseTaskLists+0x74>)
 8005f9a:	f7ff fb71 	bl	8005680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fcc <prvInitialiseTaskLists+0x78>)
 8005fa0:	4a05      	ldr	r2, [pc, #20]	@ (8005fb8 <prvInitialiseTaskLists+0x64>)
 8005fa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd0 <prvInitialiseTaskLists+0x7c>)
 8005fa6:	4a05      	ldr	r2, [pc, #20]	@ (8005fbc <prvInitialiseTaskLists+0x68>)
 8005fa8:	601a      	str	r2, [r3, #0]
}
 8005faa:	bf00      	nop
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000384 	.word	0x20000384
 8005fb8:	20000410 	.word	0x20000410
 8005fbc:	20000424 	.word	0x20000424
 8005fc0:	20000440 	.word	0x20000440
 8005fc4:	20000454 	.word	0x20000454
 8005fc8:	2000046c 	.word	0x2000046c
 8005fcc:	20000438 	.word	0x20000438
 8005fd0:	2000043c 	.word	0x2000043c

08005fd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fda:	e019      	b.n	8006010 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fdc:	f000 f9f4 	bl	80063c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe0:	4b10      	ldr	r3, [pc, #64]	@ (8006024 <prvCheckTasksWaitingTermination+0x50>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff fbd1 	bl	8005794 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8006028 <prvCheckTasksWaitingTermination+0x54>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8006028 <prvCheckTasksWaitingTermination+0x54>)
 8005ffa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800602c <prvCheckTasksWaitingTermination+0x58>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3b01      	subs	r3, #1
 8006002:	4a0a      	ldr	r2, [pc, #40]	@ (800602c <prvCheckTasksWaitingTermination+0x58>)
 8006004:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006006:	f000 fa11 	bl	800642c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f810 	bl	8006030 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006010:	4b06      	ldr	r3, [pc, #24]	@ (800602c <prvCheckTasksWaitingTermination+0x58>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e1      	bne.n	8005fdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000454 	.word	0x20000454
 8006028:	20000480 	.word	0x20000480
 800602c:	20000468 	.word	0x20000468

08006030 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	334c      	adds	r3, #76	@ 0x4c
 800603c:	4618      	mov	r0, r3
 800603e:	f001 f813 	bl	8007068 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fb6c 	bl	8006724 <vPortFree>
			vPortFree( pxTCB );
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fb69 	bl	8006724 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006052:	bf00      	nop
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006062:	4b0c      	ldr	r3, [pc, #48]	@ (8006094 <prvResetNextTaskUnblockTime+0x38>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800606c:	4b0a      	ldr	r3, [pc, #40]	@ (8006098 <prvResetNextTaskUnblockTime+0x3c>)
 800606e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006074:	e008      	b.n	8006088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006076:	4b07      	ldr	r3, [pc, #28]	@ (8006094 <prvResetNextTaskUnblockTime+0x38>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	4a04      	ldr	r2, [pc, #16]	@ (8006098 <prvResetNextTaskUnblockTime+0x3c>)
 8006086:	6013      	str	r3, [r2, #0]
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	20000438 	.word	0x20000438
 8006098:	200004a0 	.word	0x200004a0

0800609c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060a6:	4b29      	ldr	r3, [pc, #164]	@ (800614c <prvAddCurrentTaskToDelayedList+0xb0>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ac:	4b28      	ldr	r3, [pc, #160]	@ (8006150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff fb6e 	bl	8005794 <uxListRemove>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80060be:	4b24      	ldr	r3, [pc, #144]	@ (8006150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c4:	2201      	movs	r2, #1
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	43da      	mvns	r2, r3
 80060cc:	4b21      	ldr	r3, [pc, #132]	@ (8006154 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4013      	ands	r3, r2
 80060d2:	4a20      	ldr	r2, [pc, #128]	@ (8006154 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060dc:	d10a      	bne.n	80060f4 <prvAddCurrentTaskToDelayedList+0x58>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d007      	beq.n	80060f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3304      	adds	r3, #4
 80060ea:	4619      	mov	r1, r3
 80060ec:	481a      	ldr	r0, [pc, #104]	@ (8006158 <prvAddCurrentTaskToDelayedList+0xbc>)
 80060ee:	f7ff faf4 	bl	80056da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060f2:	e026      	b.n	8006142 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4413      	add	r3, r2
 80060fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060fc:	4b14      	ldr	r3, [pc, #80]	@ (8006150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	429a      	cmp	r2, r3
 800610a:	d209      	bcs.n	8006120 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800610c:	4b13      	ldr	r3, [pc, #76]	@ (800615c <prvAddCurrentTaskToDelayedList+0xc0>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	4b0f      	ldr	r3, [pc, #60]	@ (8006150 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f7ff fb02 	bl	8005722 <vListInsert>
}
 800611e:	e010      	b.n	8006142 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006120:	4b0f      	ldr	r3, [pc, #60]	@ (8006160 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	4b0a      	ldr	r3, [pc, #40]	@ (8006150 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3304      	adds	r3, #4
 800612a:	4619      	mov	r1, r3
 800612c:	4610      	mov	r0, r2
 800612e:	f7ff faf8 	bl	8005722 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006132:	4b0c      	ldr	r3, [pc, #48]	@ (8006164 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	429a      	cmp	r2, r3
 800613a:	d202      	bcs.n	8006142 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800613c:	4a09      	ldr	r2, [pc, #36]	@ (8006164 <prvAddCurrentTaskToDelayedList+0xc8>)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	6013      	str	r3, [r2, #0]
}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	20000484 	.word	0x20000484
 8006150:	20000380 	.word	0x20000380
 8006154:	20000488 	.word	0x20000488
 8006158:	2000046c 	.word	0x2000046c
 800615c:	2000043c 	.word	0x2000043c
 8006160:	20000438 	.word	0x20000438
 8006164:	200004a0 	.word	0x200004a0

08006168 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3b04      	subs	r3, #4
 8006178:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3b04      	subs	r3, #4
 8006186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f023 0201 	bic.w	r2, r3, #1
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3b04      	subs	r3, #4
 8006196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006198:	4a0c      	ldr	r2, [pc, #48]	@ (80061cc <pxPortInitialiseStack+0x64>)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3b14      	subs	r3, #20
 80061a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3b04      	subs	r3, #4
 80061ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f06f 0202 	mvn.w	r2, #2
 80061b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3b20      	subs	r3, #32
 80061bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061be:	68fb      	ldr	r3, [r7, #12]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	080061d1 	.word	0x080061d1

080061d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061da:	4b13      	ldr	r3, [pc, #76]	@ (8006228 <prvTaskExitError+0x58>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061e2:	d00b      	beq.n	80061fc <prvTaskExitError+0x2c>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	60fb      	str	r3, [r7, #12]
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	e7fd      	b.n	80061f8 <prvTaskExitError+0x28>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	60bb      	str	r3, [r7, #8]
}
 800620e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006210:	bf00      	nop
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0fc      	beq.n	8006212 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	2000000c 	.word	0x2000000c
 800622c:	00000000 	.word	0x00000000

08006230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006230:	4b07      	ldr	r3, [pc, #28]	@ (8006250 <pxCurrentTCBConst2>)
 8006232:	6819      	ldr	r1, [r3, #0]
 8006234:	6808      	ldr	r0, [r1, #0]
 8006236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623a:	f380 8809 	msr	PSP, r0
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f04f 0000 	mov.w	r0, #0
 8006246:	f380 8811 	msr	BASEPRI, r0
 800624a:	4770      	bx	lr
 800624c:	f3af 8000 	nop.w

08006250 <pxCurrentTCBConst2>:
 8006250:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop

08006258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006258:	4808      	ldr	r0, [pc, #32]	@ (800627c <prvPortStartFirstTask+0x24>)
 800625a:	6800      	ldr	r0, [r0, #0]
 800625c:	6800      	ldr	r0, [r0, #0]
 800625e:	f380 8808 	msr	MSP, r0
 8006262:	f04f 0000 	mov.w	r0, #0
 8006266:	f380 8814 	msr	CONTROL, r0
 800626a:	b662      	cpsie	i
 800626c:	b661      	cpsie	f
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	df00      	svc	0
 8006278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800627a:	bf00      	nop
 800627c:	e000ed08 	.word	0xe000ed08

08006280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006286:	4b47      	ldr	r3, [pc, #284]	@ (80063a4 <xPortStartScheduler+0x124>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a47      	ldr	r2, [pc, #284]	@ (80063a8 <xPortStartScheduler+0x128>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d10b      	bne.n	80062a8 <xPortStartScheduler+0x28>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	613b      	str	r3, [r7, #16]
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	e7fd      	b.n	80062a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062a8:	4b3e      	ldr	r3, [pc, #248]	@ (80063a4 <xPortStartScheduler+0x124>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a3f      	ldr	r2, [pc, #252]	@ (80063ac <xPortStartScheduler+0x12c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d10b      	bne.n	80062ca <xPortStartScheduler+0x4a>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	60fb      	str	r3, [r7, #12]
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop
 80062c8:	e7fd      	b.n	80062c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062ca:	4b39      	ldr	r3, [pc, #228]	@ (80063b0 <xPortStartScheduler+0x130>)
 80062cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	22ff      	movs	r2, #255	@ 0xff
 80062da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	4b31      	ldr	r3, [pc, #196]	@ (80063b4 <xPortStartScheduler+0x134>)
 80062f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062f2:	4b31      	ldr	r3, [pc, #196]	@ (80063b8 <xPortStartScheduler+0x138>)
 80062f4:	2207      	movs	r2, #7
 80062f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062f8:	e009      	b.n	800630e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80062fa:	4b2f      	ldr	r3, [pc, #188]	@ (80063b8 <xPortStartScheduler+0x138>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3b01      	subs	r3, #1
 8006300:	4a2d      	ldr	r2, [pc, #180]	@ (80063b8 <xPortStartScheduler+0x138>)
 8006302:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	b2db      	uxtb	r3, r3
 800630c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	b2db      	uxtb	r3, r3
 8006312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006316:	2b80      	cmp	r3, #128	@ 0x80
 8006318:	d0ef      	beq.n	80062fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800631a:	4b27      	ldr	r3, [pc, #156]	@ (80063b8 <xPortStartScheduler+0x138>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f1c3 0307 	rsb	r3, r3, #7
 8006322:	2b04      	cmp	r3, #4
 8006324:	d00b      	beq.n	800633e <xPortStartScheduler+0xbe>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	60bb      	str	r3, [r7, #8]
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	e7fd      	b.n	800633a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800633e:	4b1e      	ldr	r3, [pc, #120]	@ (80063b8 <xPortStartScheduler+0x138>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	021b      	lsls	r3, r3, #8
 8006344:	4a1c      	ldr	r2, [pc, #112]	@ (80063b8 <xPortStartScheduler+0x138>)
 8006346:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006348:	4b1b      	ldr	r3, [pc, #108]	@ (80063b8 <xPortStartScheduler+0x138>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006350:	4a19      	ldr	r2, [pc, #100]	@ (80063b8 <xPortStartScheduler+0x138>)
 8006352:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	b2da      	uxtb	r2, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800635c:	4b17      	ldr	r3, [pc, #92]	@ (80063bc <xPortStartScheduler+0x13c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a16      	ldr	r2, [pc, #88]	@ (80063bc <xPortStartScheduler+0x13c>)
 8006362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006366:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006368:	4b14      	ldr	r3, [pc, #80]	@ (80063bc <xPortStartScheduler+0x13c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a13      	ldr	r2, [pc, #76]	@ (80063bc <xPortStartScheduler+0x13c>)
 800636e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006372:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006374:	f000 f8da 	bl	800652c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006378:	4b11      	ldr	r3, [pc, #68]	@ (80063c0 <xPortStartScheduler+0x140>)
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800637e:	f000 f8f9 	bl	8006574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006382:	4b10      	ldr	r3, [pc, #64]	@ (80063c4 <xPortStartScheduler+0x144>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a0f      	ldr	r2, [pc, #60]	@ (80063c4 <xPortStartScheduler+0x144>)
 8006388:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800638c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800638e:	f7ff ff63 	bl	8006258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006392:	f7ff fd63 	bl	8005e5c <vTaskSwitchContext>
	prvTaskExitError();
 8006396:	f7ff ff1b 	bl	80061d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	e000ed00 	.word	0xe000ed00
 80063a8:	410fc271 	.word	0x410fc271
 80063ac:	410fc270 	.word	0x410fc270
 80063b0:	e000e400 	.word	0xe000e400
 80063b4:	200004ac 	.word	0x200004ac
 80063b8:	200004b0 	.word	0x200004b0
 80063bc:	e000ed20 	.word	0xe000ed20
 80063c0:	2000000c 	.word	0x2000000c
 80063c4:	e000ef34 	.word	0xe000ef34

080063c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	607b      	str	r3, [r7, #4]
}
 80063e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063e2:	4b10      	ldr	r3, [pc, #64]	@ (8006424 <vPortEnterCritical+0x5c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3301      	adds	r3, #1
 80063e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006424 <vPortEnterCritical+0x5c>)
 80063ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006424 <vPortEnterCritical+0x5c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d110      	bne.n	8006416 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006428 <vPortEnterCritical+0x60>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00b      	beq.n	8006416 <vPortEnterCritical+0x4e>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	603b      	str	r3, [r7, #0]
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	e7fd      	b.n	8006412 <vPortEnterCritical+0x4a>
	}
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	2000000c 	.word	0x2000000c
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006432:	4b12      	ldr	r3, [pc, #72]	@ (800647c <vPortExitCritical+0x50>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10b      	bne.n	8006452 <vPortExitCritical+0x26>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	607b      	str	r3, [r7, #4]
}
 800644c:	bf00      	nop
 800644e:	bf00      	nop
 8006450:	e7fd      	b.n	800644e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006452:	4b0a      	ldr	r3, [pc, #40]	@ (800647c <vPortExitCritical+0x50>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3b01      	subs	r3, #1
 8006458:	4a08      	ldr	r2, [pc, #32]	@ (800647c <vPortExitCritical+0x50>)
 800645a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800645c:	4b07      	ldr	r3, [pc, #28]	@ (800647c <vPortExitCritical+0x50>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d105      	bne.n	8006470 <vPortExitCritical+0x44>
 8006464:	2300      	movs	r3, #0
 8006466:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800646e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	2000000c 	.word	0x2000000c

08006480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006480:	f3ef 8009 	mrs	r0, PSP
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	4b15      	ldr	r3, [pc, #84]	@ (80064e0 <pxCurrentTCBConst>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	f01e 0f10 	tst.w	lr, #16
 8006490:	bf08      	it	eq
 8006492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649a:	6010      	str	r0, [r2, #0]
 800649c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064a4:	f380 8811 	msr	BASEPRI, r0
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f7ff fcd4 	bl	8005e5c <vTaskSwitchContext>
 80064b4:	f04f 0000 	mov.w	r0, #0
 80064b8:	f380 8811 	msr	BASEPRI, r0
 80064bc:	bc09      	pop	{r0, r3}
 80064be:	6819      	ldr	r1, [r3, #0]
 80064c0:	6808      	ldr	r0, [r1, #0]
 80064c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c6:	f01e 0f10 	tst.w	lr, #16
 80064ca:	bf08      	it	eq
 80064cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064d0:	f380 8809 	msr	PSP, r0
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	f3af 8000 	nop.w

080064e0 <pxCurrentTCBConst>:
 80064e0:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop

080064e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	607b      	str	r3, [r7, #4]
}
 8006500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006502:	f7ff fbf1 	bl	8005ce8 <xTaskIncrementTick>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800650c:	4b06      	ldr	r3, [pc, #24]	@ (8006528 <SysTick_Handler+0x40>)
 800650e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	2300      	movs	r3, #0
 8006516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	f383 8811 	msr	BASEPRI, r3
}
 800651e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006520:	bf00      	nop
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006530:	4b0b      	ldr	r3, [pc, #44]	@ (8006560 <vPortSetupTimerInterrupt+0x34>)
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006536:	4b0b      	ldr	r3, [pc, #44]	@ (8006564 <vPortSetupTimerInterrupt+0x38>)
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800653c:	4b0a      	ldr	r3, [pc, #40]	@ (8006568 <vPortSetupTimerInterrupt+0x3c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a0a      	ldr	r2, [pc, #40]	@ (800656c <vPortSetupTimerInterrupt+0x40>)
 8006542:	fba2 2303 	umull	r2, r3, r2, r3
 8006546:	099b      	lsrs	r3, r3, #6
 8006548:	4a09      	ldr	r2, [pc, #36]	@ (8006570 <vPortSetupTimerInterrupt+0x44>)
 800654a:	3b01      	subs	r3, #1
 800654c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800654e:	4b04      	ldr	r3, [pc, #16]	@ (8006560 <vPortSetupTimerInterrupt+0x34>)
 8006550:	2207      	movs	r2, #7
 8006552:	601a      	str	r2, [r3, #0]
}
 8006554:	bf00      	nop
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	e000e010 	.word	0xe000e010
 8006564:	e000e018 	.word	0xe000e018
 8006568:	20000000 	.word	0x20000000
 800656c:	10624dd3 	.word	0x10624dd3
 8006570:	e000e014 	.word	0xe000e014

08006574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006574:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006584 <vPortEnableVFP+0x10>
 8006578:	6801      	ldr	r1, [r0, #0]
 800657a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800657e:	6001      	str	r1, [r0, #0]
 8006580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006582:	bf00      	nop
 8006584:	e000ed88 	.word	0xe000ed88

08006588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	@ 0x28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006590:	2300      	movs	r3, #0
 8006592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006594:	f7ff fafc 	bl	8005b90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006598:	4b5c      	ldr	r3, [pc, #368]	@ (800670c <pvPortMalloc+0x184>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065a0:	f000 f924 	bl	80067ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065a4:	4b5a      	ldr	r3, [pc, #360]	@ (8006710 <pvPortMalloc+0x188>)
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f040 8095 	bne.w	80066dc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d01e      	beq.n	80065f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80065b8:	2208      	movs	r2, #8
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4413      	add	r3, r2
 80065be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d015      	beq.n	80065f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f023 0307 	bic.w	r3, r3, #7
 80065d0:	3308      	adds	r3, #8
 80065d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00b      	beq.n	80065f6 <pvPortMalloc+0x6e>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	617b      	str	r3, [r7, #20]
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	e7fd      	b.n	80065f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d06f      	beq.n	80066dc <pvPortMalloc+0x154>
 80065fc:	4b45      	ldr	r3, [pc, #276]	@ (8006714 <pvPortMalloc+0x18c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	429a      	cmp	r2, r3
 8006604:	d86a      	bhi.n	80066dc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006606:	4b44      	ldr	r3, [pc, #272]	@ (8006718 <pvPortMalloc+0x190>)
 8006608:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800660a:	4b43      	ldr	r3, [pc, #268]	@ (8006718 <pvPortMalloc+0x190>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006610:	e004      	b.n	800661c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	429a      	cmp	r2, r3
 8006624:	d903      	bls.n	800662e <pvPortMalloc+0xa6>
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1f1      	bne.n	8006612 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800662e:	4b37      	ldr	r3, [pc, #220]	@ (800670c <pvPortMalloc+0x184>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006634:	429a      	cmp	r2, r3
 8006636:	d051      	beq.n	80066dc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2208      	movs	r2, #8
 800663e:	4413      	add	r3, r2
 8006640:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800664a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	1ad2      	subs	r2, r2, r3
 8006652:	2308      	movs	r3, #8
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	429a      	cmp	r2, r3
 8006658:	d920      	bls.n	800669c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800665a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4413      	add	r3, r2
 8006660:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <pvPortMalloc+0xfc>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	613b      	str	r3, [r7, #16]
}
 800667e:	bf00      	nop
 8006680:	bf00      	nop
 8006682:	e7fd      	b.n	8006680 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	1ad2      	subs	r2, r2, r3
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006696:	69b8      	ldr	r0, [r7, #24]
 8006698:	f000 f90a 	bl	80068b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800669c:	4b1d      	ldr	r3, [pc, #116]	@ (8006714 <pvPortMalloc+0x18c>)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006714 <pvPortMalloc+0x18c>)
 80066a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006714 <pvPortMalloc+0x18c>)
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	4b1b      	ldr	r3, [pc, #108]	@ (800671c <pvPortMalloc+0x194>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d203      	bcs.n	80066be <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066b6:	4b17      	ldr	r3, [pc, #92]	@ (8006714 <pvPortMalloc+0x18c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a18      	ldr	r2, [pc, #96]	@ (800671c <pvPortMalloc+0x194>)
 80066bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	4b13      	ldr	r3, [pc, #76]	@ (8006710 <pvPortMalloc+0x188>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80066d2:	4b13      	ldr	r3, [pc, #76]	@ (8006720 <pvPortMalloc+0x198>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3301      	adds	r3, #1
 80066d8:	4a11      	ldr	r2, [pc, #68]	@ (8006720 <pvPortMalloc+0x198>)
 80066da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066dc:	f7ff fa66 	bl	8005bac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00b      	beq.n	8006702 <pvPortMalloc+0x17a>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	60fb      	str	r3, [r7, #12]
}
 80066fc:	bf00      	nop
 80066fe:	bf00      	nop
 8006700:	e7fd      	b.n	80066fe <pvPortMalloc+0x176>
	return pvReturn;
 8006702:	69fb      	ldr	r3, [r7, #28]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3728      	adds	r7, #40	@ 0x28
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	200010bc 	.word	0x200010bc
 8006710:	200010d0 	.word	0x200010d0
 8006714:	200010c0 	.word	0x200010c0
 8006718:	200010b4 	.word	0x200010b4
 800671c:	200010c4 	.word	0x200010c4
 8006720:	200010c8 	.word	0x200010c8

08006724 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d04f      	beq.n	80067d6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006736:	2308      	movs	r3, #8
 8006738:	425b      	negs	r3, r3
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	4413      	add	r3, r2
 800673e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	4b25      	ldr	r3, [pc, #148]	@ (80067e0 <vPortFree+0xbc>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4013      	ands	r3, r2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10b      	bne.n	800676a <vPortFree+0x46>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	60fb      	str	r3, [r7, #12]
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop
 8006768:	e7fd      	b.n	8006766 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00b      	beq.n	800678a <vPortFree+0x66>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	60bb      	str	r3, [r7, #8]
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	e7fd      	b.n	8006786 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	4b14      	ldr	r3, [pc, #80]	@ (80067e0 <vPortFree+0xbc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4013      	ands	r3, r2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01e      	beq.n	80067d6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d11a      	bne.n	80067d6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	4b0e      	ldr	r3, [pc, #56]	@ (80067e0 <vPortFree+0xbc>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	43db      	mvns	r3, r3
 80067aa:	401a      	ands	r2, r3
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067b0:	f7ff f9ee 	bl	8005b90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	4b0a      	ldr	r3, [pc, #40]	@ (80067e4 <vPortFree+0xc0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4413      	add	r3, r2
 80067be:	4a09      	ldr	r2, [pc, #36]	@ (80067e4 <vPortFree+0xc0>)
 80067c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067c2:	6938      	ldr	r0, [r7, #16]
 80067c4:	f000 f874 	bl	80068b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80067c8:	4b07      	ldr	r3, [pc, #28]	@ (80067e8 <vPortFree+0xc4>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3301      	adds	r3, #1
 80067ce:	4a06      	ldr	r2, [pc, #24]	@ (80067e8 <vPortFree+0xc4>)
 80067d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80067d2:	f7ff f9eb 	bl	8005bac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067d6:	bf00      	nop
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	200010d0 	.word	0x200010d0
 80067e4:	200010c0 	.word	0x200010c0
 80067e8:	200010cc 	.word	0x200010cc

080067ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067f2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80067f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067f8:	4b27      	ldr	r3, [pc, #156]	@ (8006898 <prvHeapInit+0xac>)
 80067fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00c      	beq.n	8006820 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3307      	adds	r3, #7
 800680a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0307 	bic.w	r3, r3, #7
 8006812:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	4a1f      	ldr	r2, [pc, #124]	@ (8006898 <prvHeapInit+0xac>)
 800681c:	4413      	add	r3, r2
 800681e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006824:	4a1d      	ldr	r2, [pc, #116]	@ (800689c <prvHeapInit+0xb0>)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800682a:	4b1c      	ldr	r3, [pc, #112]	@ (800689c <prvHeapInit+0xb0>)
 800682c:	2200      	movs	r2, #0
 800682e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	4413      	add	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006838:	2208      	movs	r2, #8
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1a9b      	subs	r3, r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0307 	bic.w	r3, r3, #7
 8006846:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4a15      	ldr	r2, [pc, #84]	@ (80068a0 <prvHeapInit+0xb4>)
 800684c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800684e:	4b14      	ldr	r3, [pc, #80]	@ (80068a0 <prvHeapInit+0xb4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2200      	movs	r2, #0
 8006854:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006856:	4b12      	ldr	r3, [pc, #72]	@ (80068a0 <prvHeapInit+0xb4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	1ad2      	subs	r2, r2, r3
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800686c:	4b0c      	ldr	r3, [pc, #48]	@ (80068a0 <prvHeapInit+0xb4>)
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	4a0a      	ldr	r2, [pc, #40]	@ (80068a4 <prvHeapInit+0xb8>)
 800687a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	4a09      	ldr	r2, [pc, #36]	@ (80068a8 <prvHeapInit+0xbc>)
 8006882:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006884:	4b09      	ldr	r3, [pc, #36]	@ (80068ac <prvHeapInit+0xc0>)
 8006886:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800688a:	601a      	str	r2, [r3, #0]
}
 800688c:	bf00      	nop
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	200004b4 	.word	0x200004b4
 800689c:	200010b4 	.word	0x200010b4
 80068a0:	200010bc 	.word	0x200010bc
 80068a4:	200010c4 	.word	0x200010c4
 80068a8:	200010c0 	.word	0x200010c0
 80068ac:	200010d0 	.word	0x200010d0

080068b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068b8:	4b28      	ldr	r3, [pc, #160]	@ (800695c <prvInsertBlockIntoFreeList+0xac>)
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	e002      	b.n	80068c4 <prvInsertBlockIntoFreeList+0x14>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d8f7      	bhi.n	80068be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	4413      	add	r3, r2
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d108      	bne.n	80068f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	441a      	add	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	441a      	add	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d118      	bne.n	8006938 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	4b15      	ldr	r3, [pc, #84]	@ (8006960 <prvInsertBlockIntoFreeList+0xb0>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d00d      	beq.n	800692e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	441a      	add	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	e008      	b.n	8006940 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800692e:	4b0c      	ldr	r3, [pc, #48]	@ (8006960 <prvInsertBlockIntoFreeList+0xb0>)
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	e003      	b.n	8006940 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	429a      	cmp	r2, r3
 8006946:	d002      	beq.n	800694e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800694e:	bf00      	nop
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	200010b4 	.word	0x200010b4
 8006960:	200010bc 	.word	0x200010bc

08006964 <uart_read>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[SHELL_FUNC_LIST_MAX_SIZE];

static char print_buffer[BUFFER_SIZE];

static char uart_read() {
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, HAL_MAX_DELAY);
 800696a:	1df9      	adds	r1, r7, #7
 800696c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006970:	2201      	movs	r2, #1
 8006972:	4804      	ldr	r0, [pc, #16]	@ (8006984 <uart_read+0x20>)
 8006974:	f7fd fbb2 	bl	80040dc <HAL_UART_Receive>

	return c;
 8006978:	79fb      	ldrb	r3, [r7, #7]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	200001c8 	.word	0x200001c8

08006988 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8006994:	887a      	ldrh	r2, [r7, #2]
 8006996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800699a:	6879      	ldr	r1, [r7, #4]
 800699c:	4803      	ldr	r0, [pc, #12]	@ (80069ac <uart_write+0x24>)
 800699e:	f7fd fb0f 	bl	8003fc0 <HAL_UART_Transmit>
	return size;
 80069a2:	887b      	ldrh	r3, [r7, #2]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	200001c8 	.word	0x200001c8

080069b0 <sh_help>:

static int sh_help(int argc, char ** argv) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	e022      	b.n	8006a06 <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80069c0:	4916      	ldr	r1, [pc, #88]	@ (8006a1c <sh_help+0x6c>)
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	4613      	mov	r3, r2
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	4618      	mov	r0, r3
 80069d2:	4912      	ldr	r1, [pc, #72]	@ (8006a1c <sh_help+0x6c>)
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4613      	mov	r3, r2
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	3308      	adds	r3, #8
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	4603      	mov	r3, r0
 80069e8:	4a0d      	ldr	r2, [pc, #52]	@ (8006a20 <sh_help+0x70>)
 80069ea:	2128      	movs	r1, #40	@ 0x28
 80069ec:	480d      	ldr	r0, [pc, #52]	@ (8006a24 <sh_help+0x74>)
 80069ee:	f000 f9a7 	bl	8006d40 <sniprintf>
 80069f2:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	4619      	mov	r1, r3
 80069fa:	480a      	ldr	r0, [pc, #40]	@ (8006a24 <sh_help+0x74>)
 80069fc:	f7ff ffc4 	bl	8006988 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3301      	adds	r3, #1
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	4b08      	ldr	r3, [pc, #32]	@ (8006a28 <sh_help+0x78>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	dbd7      	blt.n	80069c0 <sh_help+0x10>
	}

	return 0;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	200010d8 	.word	0x200010d8
 8006a20:	080081b8 	.word	0x080081b8
 8006a24:	200013d8 	.word	0x200013d8
 8006a28:	200010d4 	.word	0x200010d4

08006a2c <shell_init>:

void shell_init() {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
	int size = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n---- *RTOS_BOARD v0.1 * ----\r\n");
 8006a36:	4a0a      	ldr	r2, [pc, #40]	@ (8006a60 <shell_init+0x34>)
 8006a38:	2128      	movs	r1, #40	@ 0x28
 8006a3a:	480a      	ldr	r0, [pc, #40]	@ (8006a64 <shell_init+0x38>)
 8006a3c:	f000 f980 	bl	8006d40 <sniprintf>
 8006a40:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	4619      	mov	r1, r3
 8006a48:	4806      	ldr	r0, [pc, #24]	@ (8006a64 <shell_init+0x38>)
 8006a4a:	f7ff ff9d 	bl	8006988 <uart_write>

	shell_add('h', sh_help, "Help");
 8006a4e:	4a06      	ldr	r2, [pc, #24]	@ (8006a68 <shell_init+0x3c>)
 8006a50:	4906      	ldr	r1, [pc, #24]	@ (8006a6c <shell_init+0x40>)
 8006a52:	2068      	movs	r0, #104	@ 0x68
 8006a54:	f000 f80c 	bl	8006a70 <shell_add>
}
 8006a58:	bf00      	nop
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	080081c4 	.word	0x080081c4
 8006a64:	200013d8 	.word	0x200013d8
 8006a68:	080081e8 	.word	0x080081e8
 8006a6c:	080069b1 	.word	0x080069b1

08006a70 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8006a7e:	4b19      	ldr	r3, [pc, #100]	@ (8006ae4 <shell_add+0x74>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a84:	dc26      	bgt.n	8006ad4 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8006a86:	4b17      	ldr	r3, [pc, #92]	@ (8006ae4 <shell_add+0x74>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4917      	ldr	r1, [pc, #92]	@ (8006ae8 <shell_add+0x78>)
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	7bfa      	ldrb	r2, [r7, #15]
 8006a98:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8006a9a:	4b12      	ldr	r3, [pc, #72]	@ (8006ae4 <shell_add+0x74>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	4912      	ldr	r1, [pc, #72]	@ (8006ae8 <shell_add+0x78>)
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	3304      	adds	r3, #4
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8006ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae4 <shell_add+0x74>)
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	490c      	ldr	r1, [pc, #48]	@ (8006ae8 <shell_add+0x78>)
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	440b      	add	r3, r1
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8006ac6:	4b07      	ldr	r3, [pc, #28]	@ (8006ae4 <shell_add+0x74>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	4a05      	ldr	r2, [pc, #20]	@ (8006ae4 <shell_add+0x74>)
 8006ace:	6013      	str	r3, [r2, #0]
		return 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e001      	b.n	8006ad8 <shell_add+0x68>
	}

	return -1;
 8006ad4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	200010d4 	.word	0x200010d4
 8006ae8:	200010d8 	.word	0x200010d8

08006aec <shell_exec>:

static int shell_exec(char * buf) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b090      	sub	sp, #64	@ 0x40
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8006afc:	2300      	movs	r3, #0
 8006afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b00:	e040      	b.n	8006b84 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8006b02:	492d      	ldr	r1, [pc, #180]	@ (8006bb8 <shell_exec+0xcc>)
 8006b04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b06:	4613      	mov	r3, r2
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	440b      	add	r3, r1
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d131      	bne.n	8006b7e <shell_exec+0x92>
			argc = 1;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b26:	e013      	b.n	8006b50 <shell_exec+0x64>
				if(*p == ' ') {
 8006b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	d10c      	bne.n	8006b4a <shell_exec+0x5e>
					*p = '\0';
 8006b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b32:	2200      	movs	r2, #0
 8006b34:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8006b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006b3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b3e:	3201      	adds	r2, #1
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	3340      	adds	r3, #64	@ 0x40
 8006b44:	443b      	add	r3, r7
 8006b46:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8006b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <shell_exec+0x72>
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	2b07      	cmp	r3, #7
 8006b5c:	dde4      	ble.n	8006b28 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8006b5e:	4916      	ldr	r1, [pc, #88]	@ (8006bb8 <shell_exec+0xcc>)
 8006b60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b62:	4613      	mov	r3, r2
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f107 020c 	add.w	r2, r7, #12
 8006b74:	4611      	mov	r1, r2
 8006b76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b78:	4798      	blx	r3
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	e017      	b.n	8006bae <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8006b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b80:	3301      	adds	r3, #1
 8006b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b84:	4b0d      	ldr	r3, [pc, #52]	@ (8006bbc <shell_exec+0xd0>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	dbb9      	blt.n	8006b02 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8006b8e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b92:	4a0b      	ldr	r2, [pc, #44]	@ (8006bc0 <shell_exec+0xd4>)
 8006b94:	2128      	movs	r1, #40	@ 0x28
 8006b96:	480b      	ldr	r0, [pc, #44]	@ (8006bc4 <shell_exec+0xd8>)
 8006b98:	f000 f8d2 	bl	8006d40 <sniprintf>
 8006b9c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 8006b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4807      	ldr	r0, [pc, #28]	@ (8006bc4 <shell_exec+0xd8>)
 8006ba6:	f7ff feef 	bl	8006988 <uart_write>
	return -1;
 8006baa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3740      	adds	r7, #64	@ 0x40
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	200010d8 	.word	0x200010d8
 8006bbc:	200010d4 	.word	0x200010d4
 8006bc0:	080081f0 	.word	0x080081f0
 8006bc4:	200013d8 	.word	0x200013d8

08006bc8 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
	int reading = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	482a      	ldr	r0, [pc, #168]	@ (8006c84 <shell_run+0xbc>)
 8006bda:	f7ff fed5 	bl	8006988 <uart_write>
		reading = 1;
 8006bde:	2301      	movs	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8006be2:	e047      	b.n	8006c74 <shell_run+0xac>
			char c = uart_read();
 8006be4:	f7ff febe 	bl	8006964 <uart_read>
 8006be8:	4603      	mov	r3, r0
 8006bea:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	2b08      	cmp	r3, #8
 8006bf0:	d025      	beq.n	8006c3e <shell_run+0x76>
 8006bf2:	2b0d      	cmp	r3, #13
 8006bf4:	d12e      	bne.n	8006c54 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8006bf6:	4a24      	ldr	r2, [pc, #144]	@ (8006c88 <shell_run+0xc0>)
 8006bf8:	2128      	movs	r1, #40	@ 0x28
 8006bfa:	4824      	ldr	r0, [pc, #144]	@ (8006c8c <shell_run+0xc4>)
 8006bfc:	f000 f8a0 	bl	8006d40 <sniprintf>
 8006c00:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	4619      	mov	r1, r3
 8006c08:	4820      	ldr	r0, [pc, #128]	@ (8006c8c <shell_run+0xc4>)
 8006c0a:	f7ff febd 	bl	8006988 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	60ba      	str	r2, [r7, #8]
 8006c14:	4a1e      	ldr	r2, [pc, #120]	@ (8006c90 <shell_run+0xc8>)
 8006c16:	2100      	movs	r1, #0
 8006c18:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c90 <shell_run+0xc8>)
 8006c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006c94 <shell_run+0xcc>)
 8006c1e:	2128      	movs	r1, #40	@ 0x28
 8006c20:	481a      	ldr	r0, [pc, #104]	@ (8006c8c <shell_run+0xc4>)
 8006c22:	f000 f88d 	bl	8006d40 <sniprintf>
 8006c26:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4817      	ldr	r0, [pc, #92]	@ (8006c8c <shell_run+0xc4>)
 8006c30:	f7ff feaa 	bl	8006988 <uart_write>
				reading = 0;        //exit read loop
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60bb      	str	r3, [r7, #8]
				break;
 8006c3c:	e01a      	b.n	8006c74 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	dd16      	ble.n	8006c72 <shell_run+0xaa>
					pos--;          //remove it in buffer
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8006c4a:	2103      	movs	r1, #3
 8006c4c:	4812      	ldr	r0, [pc, #72]	@ (8006c98 <shell_run+0xd0>)
 8006c4e:	f7ff fe9b 	bl	8006988 <uart_write>
				}
				break;
 8006c52:	e00e      	b.n	8006c72 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b27      	cmp	r3, #39	@ 0x27
 8006c58:	dc0c      	bgt.n	8006c74 <shell_run+0xac>
					uart_write(&c, 1);
 8006c5a:	1cfb      	adds	r3, r7, #3
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7ff fe92 	bl	8006988 <uart_write>
					cmd_buffer[pos++] = c; //store
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	60ba      	str	r2, [r7, #8]
 8006c6a:	78f9      	ldrb	r1, [r7, #3]
 8006c6c:	4a08      	ldr	r2, [pc, #32]	@ (8006c90 <shell_run+0xc8>)
 8006c6e:	54d1      	strb	r1, [r2, r3]
 8006c70:	e000      	b.n	8006c74 <shell_run+0xac>
				break;
 8006c72:	bf00      	nop
		while(reading) {
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1b4      	bne.n	8006be4 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8006c7a:	4805      	ldr	r0, [pc, #20]	@ (8006c90 <shell_run+0xc8>)
 8006c7c:	f7ff ff36 	bl	8006aec <shell_exec>
		uart_write(prompt, 2);
 8006c80:	e7a9      	b.n	8006bd6 <shell_run+0xe>
 8006c82:	bf00      	nop
 8006c84:	20000014 	.word	0x20000014
 8006c88:	08008208 	.word	0x08008208
 8006c8c:	200013d8 	.word	0x200013d8
 8006c90:	20001400 	.word	0x20001400
 8006c94:	0800820c 	.word	0x0800820c
 8006c98:	20000010 	.word	0x20000010

08006c9c <fonction>:
#include "shell.h"
#include "stdio.h"
#include "stdlib.h"

int fonction(int argc, char ** argv)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
	for (int i = 1; i<argc; i++){
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	e00c      	b.n	8006cc6 <fonction+0x2a>
		printf("argv[%d]: %s\r\n",i, argv[i]);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	68f9      	ldr	r1, [r7, #12]
 8006cba:	4807      	ldr	r0, [pc, #28]	@ (8006cd8 <fonction+0x3c>)
 8006cbc:	f000 f9ba 	bl	8007034 <iprintf>
	for (int i = 1; i<argc; i++){
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	dbee      	blt.n	8006cac <fonction+0x10>
	}
	return 0;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	08008214 	.word	0x08008214

08006cdc <addition>:

int addition(int argc, char ** argv){
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
	uint32_t sum = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
	if (argc<=1){
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	dc01      	bgt.n	8006cf4 <addition+0x18>
		return 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e01b      	b.n	8006d2c <addition+0x50>
	}
	for (int i = 1; i<argc; i++){
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	60bb      	str	r3, [r7, #8]
 8006cf8:	e00f      	b.n	8006d1a <addition+0x3e>
		sum = sum+atoi(argv[i]);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	4413      	add	r3, r2
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 f817 	bl	8006d38 <atoi>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4413      	add	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i<argc; i++){
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	3301      	adds	r3, #1
 8006d18:	60bb      	str	r3, [r7, #8]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	dbeb      	blt.n	8006cfa <addition+0x1e>
	}
	printf("++ >%lu\r\n",sum);
 8006d22:	68f9      	ldr	r1, [r7, #12]
 8006d24:	4803      	ldr	r0, [pc, #12]	@ (8006d34 <addition+0x58>)
 8006d26:	f000 f985 	bl	8007034 <iprintf>
	return 0;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	08008224 	.word	0x08008224

08006d38 <atoi>:
 8006d38:	220a      	movs	r2, #10
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	f000 b952 	b.w	8006fe4 <strtol>

08006d40 <sniprintf>:
 8006d40:	b40c      	push	{r2, r3}
 8006d42:	b530      	push	{r4, r5, lr}
 8006d44:	4b17      	ldr	r3, [pc, #92]	@ (8006da4 <sniprintf+0x64>)
 8006d46:	1e0c      	subs	r4, r1, #0
 8006d48:	681d      	ldr	r5, [r3, #0]
 8006d4a:	b09d      	sub	sp, #116	@ 0x74
 8006d4c:	da08      	bge.n	8006d60 <sniprintf+0x20>
 8006d4e:	238b      	movs	r3, #139	@ 0x8b
 8006d50:	602b      	str	r3, [r5, #0]
 8006d52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d56:	b01d      	add	sp, #116	@ 0x74
 8006d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d5c:	b002      	add	sp, #8
 8006d5e:	4770      	bx	lr
 8006d60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d68:	bf14      	ite	ne
 8006d6a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006d6e:	4623      	moveq	r3, r4
 8006d70:	9304      	str	r3, [sp, #16]
 8006d72:	9307      	str	r3, [sp, #28]
 8006d74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d78:	9002      	str	r0, [sp, #8]
 8006d7a:	9006      	str	r0, [sp, #24]
 8006d7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d80:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d82:	ab21      	add	r3, sp, #132	@ 0x84
 8006d84:	a902      	add	r1, sp, #8
 8006d86:	4628      	mov	r0, r5
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	f000 faa5 	bl	80072d8 <_svfiprintf_r>
 8006d8e:	1c43      	adds	r3, r0, #1
 8006d90:	bfbc      	itt	lt
 8006d92:	238b      	movlt	r3, #139	@ 0x8b
 8006d94:	602b      	strlt	r3, [r5, #0]
 8006d96:	2c00      	cmp	r4, #0
 8006d98:	d0dd      	beq.n	8006d56 <sniprintf+0x16>
 8006d9a:	9b02      	ldr	r3, [sp, #8]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	701a      	strb	r2, [r3, #0]
 8006da0:	e7d9      	b.n	8006d56 <sniprintf+0x16>
 8006da2:	bf00      	nop
 8006da4:	20000024 	.word	0x20000024

08006da8 <std>:
 8006da8:	2300      	movs	r3, #0
 8006daa:	b510      	push	{r4, lr}
 8006dac:	4604      	mov	r4, r0
 8006dae:	e9c0 3300 	strd	r3, r3, [r0]
 8006db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006db6:	6083      	str	r3, [r0, #8]
 8006db8:	8181      	strh	r1, [r0, #12]
 8006dba:	6643      	str	r3, [r0, #100]	@ 0x64
 8006dbc:	81c2      	strh	r2, [r0, #14]
 8006dbe:	6183      	str	r3, [r0, #24]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	305c      	adds	r0, #92	@ 0x5c
 8006dc6:	f000 f947 	bl	8007058 <memset>
 8006dca:	4b0d      	ldr	r3, [pc, #52]	@ (8006e00 <std+0x58>)
 8006dcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dce:	4b0d      	ldr	r3, [pc, #52]	@ (8006e04 <std+0x5c>)
 8006dd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e08 <std+0x60>)
 8006dd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e0c <std+0x64>)
 8006dd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dda:	4b0d      	ldr	r3, [pc, #52]	@ (8006e10 <std+0x68>)
 8006ddc:	6224      	str	r4, [r4, #32]
 8006dde:	429c      	cmp	r4, r3
 8006de0:	d006      	beq.n	8006df0 <std+0x48>
 8006de2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006de6:	4294      	cmp	r4, r2
 8006de8:	d002      	beq.n	8006df0 <std+0x48>
 8006dea:	33d0      	adds	r3, #208	@ 0xd0
 8006dec:	429c      	cmp	r4, r3
 8006dee:	d105      	bne.n	8006dfc <std+0x54>
 8006df0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df8:	f000 b9b6 	b.w	8007168 <__retarget_lock_init_recursive>
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	bf00      	nop
 8006e00:	08007d25 	.word	0x08007d25
 8006e04:	08007d47 	.word	0x08007d47
 8006e08:	08007d7f 	.word	0x08007d7f
 8006e0c:	08007da3 	.word	0x08007da3
 8006e10:	20001428 	.word	0x20001428

08006e14 <stdio_exit_handler>:
 8006e14:	4a02      	ldr	r2, [pc, #8]	@ (8006e20 <stdio_exit_handler+0xc>)
 8006e16:	4903      	ldr	r1, [pc, #12]	@ (8006e24 <stdio_exit_handler+0x10>)
 8006e18:	4803      	ldr	r0, [pc, #12]	@ (8006e28 <stdio_exit_handler+0x14>)
 8006e1a:	f000 b8ed 	b.w	8006ff8 <_fwalk_sglue>
 8006e1e:	bf00      	nop
 8006e20:	20000018 	.word	0x20000018
 8006e24:	08007cbd 	.word	0x08007cbd
 8006e28:	20000028 	.word	0x20000028

08006e2c <cleanup_stdio>:
 8006e2c:	6841      	ldr	r1, [r0, #4]
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e60 <cleanup_stdio+0x34>)
 8006e30:	4299      	cmp	r1, r3
 8006e32:	b510      	push	{r4, lr}
 8006e34:	4604      	mov	r4, r0
 8006e36:	d001      	beq.n	8006e3c <cleanup_stdio+0x10>
 8006e38:	f000 ff40 	bl	8007cbc <_fflush_r>
 8006e3c:	68a1      	ldr	r1, [r4, #8]
 8006e3e:	4b09      	ldr	r3, [pc, #36]	@ (8006e64 <cleanup_stdio+0x38>)
 8006e40:	4299      	cmp	r1, r3
 8006e42:	d002      	beq.n	8006e4a <cleanup_stdio+0x1e>
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 ff39 	bl	8007cbc <_fflush_r>
 8006e4a:	68e1      	ldr	r1, [r4, #12]
 8006e4c:	4b06      	ldr	r3, [pc, #24]	@ (8006e68 <cleanup_stdio+0x3c>)
 8006e4e:	4299      	cmp	r1, r3
 8006e50:	d004      	beq.n	8006e5c <cleanup_stdio+0x30>
 8006e52:	4620      	mov	r0, r4
 8006e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e58:	f000 bf30 	b.w	8007cbc <_fflush_r>
 8006e5c:	bd10      	pop	{r4, pc}
 8006e5e:	bf00      	nop
 8006e60:	20001428 	.word	0x20001428
 8006e64:	20001490 	.word	0x20001490
 8006e68:	200014f8 	.word	0x200014f8

08006e6c <global_stdio_init.part.0>:
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e9c <global_stdio_init.part.0+0x30>)
 8006e70:	4c0b      	ldr	r4, [pc, #44]	@ (8006ea0 <global_stdio_init.part.0+0x34>)
 8006e72:	4a0c      	ldr	r2, [pc, #48]	@ (8006ea4 <global_stdio_init.part.0+0x38>)
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	4620      	mov	r0, r4
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2104      	movs	r1, #4
 8006e7c:	f7ff ff94 	bl	8006da8 <std>
 8006e80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e84:	2201      	movs	r2, #1
 8006e86:	2109      	movs	r1, #9
 8006e88:	f7ff ff8e 	bl	8006da8 <std>
 8006e8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e90:	2202      	movs	r2, #2
 8006e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e96:	2112      	movs	r1, #18
 8006e98:	f7ff bf86 	b.w	8006da8 <std>
 8006e9c:	20001560 	.word	0x20001560
 8006ea0:	20001428 	.word	0x20001428
 8006ea4:	08006e15 	.word	0x08006e15

08006ea8 <__sfp_lock_acquire>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	@ (8006eb0 <__sfp_lock_acquire+0x8>)
 8006eaa:	f000 b95e 	b.w	800716a <__retarget_lock_acquire_recursive>
 8006eae:	bf00      	nop
 8006eb0:	20001569 	.word	0x20001569

08006eb4 <__sfp_lock_release>:
 8006eb4:	4801      	ldr	r0, [pc, #4]	@ (8006ebc <__sfp_lock_release+0x8>)
 8006eb6:	f000 b959 	b.w	800716c <__retarget_lock_release_recursive>
 8006eba:	bf00      	nop
 8006ebc:	20001569 	.word	0x20001569

08006ec0 <__sinit>:
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	f7ff fff0 	bl	8006ea8 <__sfp_lock_acquire>
 8006ec8:	6a23      	ldr	r3, [r4, #32]
 8006eca:	b11b      	cbz	r3, 8006ed4 <__sinit+0x14>
 8006ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed0:	f7ff bff0 	b.w	8006eb4 <__sfp_lock_release>
 8006ed4:	4b04      	ldr	r3, [pc, #16]	@ (8006ee8 <__sinit+0x28>)
 8006ed6:	6223      	str	r3, [r4, #32]
 8006ed8:	4b04      	ldr	r3, [pc, #16]	@ (8006eec <__sinit+0x2c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f5      	bne.n	8006ecc <__sinit+0xc>
 8006ee0:	f7ff ffc4 	bl	8006e6c <global_stdio_init.part.0>
 8006ee4:	e7f2      	b.n	8006ecc <__sinit+0xc>
 8006ee6:	bf00      	nop
 8006ee8:	08006e2d 	.word	0x08006e2d
 8006eec:	20001560 	.word	0x20001560

08006ef0 <_strtol_l.constprop.0>:
 8006ef0:	2b24      	cmp	r3, #36	@ 0x24
 8006ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef6:	4686      	mov	lr, r0
 8006ef8:	4690      	mov	r8, r2
 8006efa:	d801      	bhi.n	8006f00 <_strtol_l.constprop.0+0x10>
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d106      	bne.n	8006f0e <_strtol_l.constprop.0+0x1e>
 8006f00:	f000 f908 	bl	8007114 <__errno>
 8006f04:	2316      	movs	r3, #22
 8006f06:	6003      	str	r3, [r0, #0]
 8006f08:	2000      	movs	r0, #0
 8006f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f0e:	4834      	ldr	r0, [pc, #208]	@ (8006fe0 <_strtol_l.constprop.0+0xf0>)
 8006f10:	460d      	mov	r5, r1
 8006f12:	462a      	mov	r2, r5
 8006f14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f18:	5d06      	ldrb	r6, [r0, r4]
 8006f1a:	f016 0608 	ands.w	r6, r6, #8
 8006f1e:	d1f8      	bne.n	8006f12 <_strtol_l.constprop.0+0x22>
 8006f20:	2c2d      	cmp	r4, #45	@ 0x2d
 8006f22:	d12d      	bne.n	8006f80 <_strtol_l.constprop.0+0x90>
 8006f24:	782c      	ldrb	r4, [r5, #0]
 8006f26:	2601      	movs	r6, #1
 8006f28:	1c95      	adds	r5, r2, #2
 8006f2a:	f033 0210 	bics.w	r2, r3, #16
 8006f2e:	d109      	bne.n	8006f44 <_strtol_l.constprop.0+0x54>
 8006f30:	2c30      	cmp	r4, #48	@ 0x30
 8006f32:	d12a      	bne.n	8006f8a <_strtol_l.constprop.0+0x9a>
 8006f34:	782a      	ldrb	r2, [r5, #0]
 8006f36:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006f3a:	2a58      	cmp	r2, #88	@ 0x58
 8006f3c:	d125      	bne.n	8006f8a <_strtol_l.constprop.0+0x9a>
 8006f3e:	786c      	ldrb	r4, [r5, #1]
 8006f40:	2310      	movs	r3, #16
 8006f42:	3502      	adds	r5, #2
 8006f44:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006f48:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	fbbc f9f3 	udiv	r9, ip, r3
 8006f52:	4610      	mov	r0, r2
 8006f54:	fb03 ca19 	mls	sl, r3, r9, ip
 8006f58:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006f5c:	2f09      	cmp	r7, #9
 8006f5e:	d81b      	bhi.n	8006f98 <_strtol_l.constprop.0+0xa8>
 8006f60:	463c      	mov	r4, r7
 8006f62:	42a3      	cmp	r3, r4
 8006f64:	dd27      	ble.n	8006fb6 <_strtol_l.constprop.0+0xc6>
 8006f66:	1c57      	adds	r7, r2, #1
 8006f68:	d007      	beq.n	8006f7a <_strtol_l.constprop.0+0x8a>
 8006f6a:	4581      	cmp	r9, r0
 8006f6c:	d320      	bcc.n	8006fb0 <_strtol_l.constprop.0+0xc0>
 8006f6e:	d101      	bne.n	8006f74 <_strtol_l.constprop.0+0x84>
 8006f70:	45a2      	cmp	sl, r4
 8006f72:	db1d      	blt.n	8006fb0 <_strtol_l.constprop.0+0xc0>
 8006f74:	fb00 4003 	mla	r0, r0, r3, r4
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f7e:	e7eb      	b.n	8006f58 <_strtol_l.constprop.0+0x68>
 8006f80:	2c2b      	cmp	r4, #43	@ 0x2b
 8006f82:	bf04      	itt	eq
 8006f84:	782c      	ldrbeq	r4, [r5, #0]
 8006f86:	1c95      	addeq	r5, r2, #2
 8006f88:	e7cf      	b.n	8006f2a <_strtol_l.constprop.0+0x3a>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1da      	bne.n	8006f44 <_strtol_l.constprop.0+0x54>
 8006f8e:	2c30      	cmp	r4, #48	@ 0x30
 8006f90:	bf0c      	ite	eq
 8006f92:	2308      	moveq	r3, #8
 8006f94:	230a      	movne	r3, #10
 8006f96:	e7d5      	b.n	8006f44 <_strtol_l.constprop.0+0x54>
 8006f98:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006f9c:	2f19      	cmp	r7, #25
 8006f9e:	d801      	bhi.n	8006fa4 <_strtol_l.constprop.0+0xb4>
 8006fa0:	3c37      	subs	r4, #55	@ 0x37
 8006fa2:	e7de      	b.n	8006f62 <_strtol_l.constprop.0+0x72>
 8006fa4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006fa8:	2f19      	cmp	r7, #25
 8006faa:	d804      	bhi.n	8006fb6 <_strtol_l.constprop.0+0xc6>
 8006fac:	3c57      	subs	r4, #87	@ 0x57
 8006fae:	e7d8      	b.n	8006f62 <_strtol_l.constprop.0+0x72>
 8006fb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006fb4:	e7e1      	b.n	8006f7a <_strtol_l.constprop.0+0x8a>
 8006fb6:	1c53      	adds	r3, r2, #1
 8006fb8:	d108      	bne.n	8006fcc <_strtol_l.constprop.0+0xdc>
 8006fba:	2322      	movs	r3, #34	@ 0x22
 8006fbc:	f8ce 3000 	str.w	r3, [lr]
 8006fc0:	4660      	mov	r0, ip
 8006fc2:	f1b8 0f00 	cmp.w	r8, #0
 8006fc6:	d0a0      	beq.n	8006f0a <_strtol_l.constprop.0+0x1a>
 8006fc8:	1e69      	subs	r1, r5, #1
 8006fca:	e006      	b.n	8006fda <_strtol_l.constprop.0+0xea>
 8006fcc:	b106      	cbz	r6, 8006fd0 <_strtol_l.constprop.0+0xe0>
 8006fce:	4240      	negs	r0, r0
 8006fd0:	f1b8 0f00 	cmp.w	r8, #0
 8006fd4:	d099      	beq.n	8006f0a <_strtol_l.constprop.0+0x1a>
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	d1f6      	bne.n	8006fc8 <_strtol_l.constprop.0+0xd8>
 8006fda:	f8c8 1000 	str.w	r1, [r8]
 8006fde:	e794      	b.n	8006f0a <_strtol_l.constprop.0+0x1a>
 8006fe0:	08008271 	.word	0x08008271

08006fe4 <strtol>:
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	460a      	mov	r2, r1
 8006fe8:	4601      	mov	r1, r0
 8006fea:	4802      	ldr	r0, [pc, #8]	@ (8006ff4 <strtol+0x10>)
 8006fec:	6800      	ldr	r0, [r0, #0]
 8006fee:	f7ff bf7f 	b.w	8006ef0 <_strtol_l.constprop.0>
 8006ff2:	bf00      	nop
 8006ff4:	20000024 	.word	0x20000024

08006ff8 <_fwalk_sglue>:
 8006ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	4688      	mov	r8, r1
 8007000:	4614      	mov	r4, r2
 8007002:	2600      	movs	r6, #0
 8007004:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007008:	f1b9 0901 	subs.w	r9, r9, #1
 800700c:	d505      	bpl.n	800701a <_fwalk_sglue+0x22>
 800700e:	6824      	ldr	r4, [r4, #0]
 8007010:	2c00      	cmp	r4, #0
 8007012:	d1f7      	bne.n	8007004 <_fwalk_sglue+0xc>
 8007014:	4630      	mov	r0, r6
 8007016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800701a:	89ab      	ldrh	r3, [r5, #12]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d907      	bls.n	8007030 <_fwalk_sglue+0x38>
 8007020:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007024:	3301      	adds	r3, #1
 8007026:	d003      	beq.n	8007030 <_fwalk_sglue+0x38>
 8007028:	4629      	mov	r1, r5
 800702a:	4638      	mov	r0, r7
 800702c:	47c0      	blx	r8
 800702e:	4306      	orrs	r6, r0
 8007030:	3568      	adds	r5, #104	@ 0x68
 8007032:	e7e9      	b.n	8007008 <_fwalk_sglue+0x10>

08007034 <iprintf>:
 8007034:	b40f      	push	{r0, r1, r2, r3}
 8007036:	b507      	push	{r0, r1, r2, lr}
 8007038:	4906      	ldr	r1, [pc, #24]	@ (8007054 <iprintf+0x20>)
 800703a:	ab04      	add	r3, sp, #16
 800703c:	6808      	ldr	r0, [r1, #0]
 800703e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007042:	6881      	ldr	r1, [r0, #8]
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	f000 fa6d 	bl	8007524 <_vfiprintf_r>
 800704a:	b003      	add	sp, #12
 800704c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007050:	b004      	add	sp, #16
 8007052:	4770      	bx	lr
 8007054:	20000024 	.word	0x20000024

08007058 <memset>:
 8007058:	4402      	add	r2, r0
 800705a:	4603      	mov	r3, r0
 800705c:	4293      	cmp	r3, r2
 800705e:	d100      	bne.n	8007062 <memset+0xa>
 8007060:	4770      	bx	lr
 8007062:	f803 1b01 	strb.w	r1, [r3], #1
 8007066:	e7f9      	b.n	800705c <memset+0x4>

08007068 <_reclaim_reent>:
 8007068:	4b29      	ldr	r3, [pc, #164]	@ (8007110 <_reclaim_reent+0xa8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4283      	cmp	r3, r0
 800706e:	b570      	push	{r4, r5, r6, lr}
 8007070:	4604      	mov	r4, r0
 8007072:	d04b      	beq.n	800710c <_reclaim_reent+0xa4>
 8007074:	69c3      	ldr	r3, [r0, #28]
 8007076:	b1ab      	cbz	r3, 80070a4 <_reclaim_reent+0x3c>
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	b16b      	cbz	r3, 8007098 <_reclaim_reent+0x30>
 800707c:	2500      	movs	r5, #0
 800707e:	69e3      	ldr	r3, [r4, #28]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	5959      	ldr	r1, [r3, r5]
 8007084:	2900      	cmp	r1, #0
 8007086:	d13b      	bne.n	8007100 <_reclaim_reent+0x98>
 8007088:	3504      	adds	r5, #4
 800708a:	2d80      	cmp	r5, #128	@ 0x80
 800708c:	d1f7      	bne.n	800707e <_reclaim_reent+0x16>
 800708e:	69e3      	ldr	r3, [r4, #28]
 8007090:	4620      	mov	r0, r4
 8007092:	68d9      	ldr	r1, [r3, #12]
 8007094:	f000 f87a 	bl	800718c <_free_r>
 8007098:	69e3      	ldr	r3, [r4, #28]
 800709a:	6819      	ldr	r1, [r3, #0]
 800709c:	b111      	cbz	r1, 80070a4 <_reclaim_reent+0x3c>
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 f874 	bl	800718c <_free_r>
 80070a4:	6961      	ldr	r1, [r4, #20]
 80070a6:	b111      	cbz	r1, 80070ae <_reclaim_reent+0x46>
 80070a8:	4620      	mov	r0, r4
 80070aa:	f000 f86f 	bl	800718c <_free_r>
 80070ae:	69e1      	ldr	r1, [r4, #28]
 80070b0:	b111      	cbz	r1, 80070b8 <_reclaim_reent+0x50>
 80070b2:	4620      	mov	r0, r4
 80070b4:	f000 f86a 	bl	800718c <_free_r>
 80070b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80070ba:	b111      	cbz	r1, 80070c2 <_reclaim_reent+0x5a>
 80070bc:	4620      	mov	r0, r4
 80070be:	f000 f865 	bl	800718c <_free_r>
 80070c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070c4:	b111      	cbz	r1, 80070cc <_reclaim_reent+0x64>
 80070c6:	4620      	mov	r0, r4
 80070c8:	f000 f860 	bl	800718c <_free_r>
 80070cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80070ce:	b111      	cbz	r1, 80070d6 <_reclaim_reent+0x6e>
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 f85b 	bl	800718c <_free_r>
 80070d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80070d8:	b111      	cbz	r1, 80070e0 <_reclaim_reent+0x78>
 80070da:	4620      	mov	r0, r4
 80070dc:	f000 f856 	bl	800718c <_free_r>
 80070e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80070e2:	b111      	cbz	r1, 80070ea <_reclaim_reent+0x82>
 80070e4:	4620      	mov	r0, r4
 80070e6:	f000 f851 	bl	800718c <_free_r>
 80070ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80070ec:	b111      	cbz	r1, 80070f4 <_reclaim_reent+0x8c>
 80070ee:	4620      	mov	r0, r4
 80070f0:	f000 f84c 	bl	800718c <_free_r>
 80070f4:	6a23      	ldr	r3, [r4, #32]
 80070f6:	b14b      	cbz	r3, 800710c <_reclaim_reent+0xa4>
 80070f8:	4620      	mov	r0, r4
 80070fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070fe:	4718      	bx	r3
 8007100:	680e      	ldr	r6, [r1, #0]
 8007102:	4620      	mov	r0, r4
 8007104:	f000 f842 	bl	800718c <_free_r>
 8007108:	4631      	mov	r1, r6
 800710a:	e7bb      	b.n	8007084 <_reclaim_reent+0x1c>
 800710c:	bd70      	pop	{r4, r5, r6, pc}
 800710e:	bf00      	nop
 8007110:	20000024 	.word	0x20000024

08007114 <__errno>:
 8007114:	4b01      	ldr	r3, [pc, #4]	@ (800711c <__errno+0x8>)
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	20000024 	.word	0x20000024

08007120 <__libc_init_array>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	4d0d      	ldr	r5, [pc, #52]	@ (8007158 <__libc_init_array+0x38>)
 8007124:	4c0d      	ldr	r4, [pc, #52]	@ (800715c <__libc_init_array+0x3c>)
 8007126:	1b64      	subs	r4, r4, r5
 8007128:	10a4      	asrs	r4, r4, #2
 800712a:	2600      	movs	r6, #0
 800712c:	42a6      	cmp	r6, r4
 800712e:	d109      	bne.n	8007144 <__libc_init_array+0x24>
 8007130:	4d0b      	ldr	r5, [pc, #44]	@ (8007160 <__libc_init_array+0x40>)
 8007132:	4c0c      	ldr	r4, [pc, #48]	@ (8007164 <__libc_init_array+0x44>)
 8007134:	f000 fff8 	bl	8008128 <_init>
 8007138:	1b64      	subs	r4, r4, r5
 800713a:	10a4      	asrs	r4, r4, #2
 800713c:	2600      	movs	r6, #0
 800713e:	42a6      	cmp	r6, r4
 8007140:	d105      	bne.n	800714e <__libc_init_array+0x2e>
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	f855 3b04 	ldr.w	r3, [r5], #4
 8007148:	4798      	blx	r3
 800714a:	3601      	adds	r6, #1
 800714c:	e7ee      	b.n	800712c <__libc_init_array+0xc>
 800714e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007152:	4798      	blx	r3
 8007154:	3601      	adds	r6, #1
 8007156:	e7f2      	b.n	800713e <__libc_init_array+0x1e>
 8007158:	080083ac 	.word	0x080083ac
 800715c:	080083ac 	.word	0x080083ac
 8007160:	080083ac 	.word	0x080083ac
 8007164:	080083b0 	.word	0x080083b0

08007168 <__retarget_lock_init_recursive>:
 8007168:	4770      	bx	lr

0800716a <__retarget_lock_acquire_recursive>:
 800716a:	4770      	bx	lr

0800716c <__retarget_lock_release_recursive>:
 800716c:	4770      	bx	lr

0800716e <memcpy>:
 800716e:	440a      	add	r2, r1
 8007170:	4291      	cmp	r1, r2
 8007172:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007176:	d100      	bne.n	800717a <memcpy+0xc>
 8007178:	4770      	bx	lr
 800717a:	b510      	push	{r4, lr}
 800717c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007184:	4291      	cmp	r1, r2
 8007186:	d1f9      	bne.n	800717c <memcpy+0xe>
 8007188:	bd10      	pop	{r4, pc}
	...

0800718c <_free_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4605      	mov	r5, r0
 8007190:	2900      	cmp	r1, #0
 8007192:	d041      	beq.n	8007218 <_free_r+0x8c>
 8007194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007198:	1f0c      	subs	r4, r1, #4
 800719a:	2b00      	cmp	r3, #0
 800719c:	bfb8      	it	lt
 800719e:	18e4      	addlt	r4, r4, r3
 80071a0:	f000 fdb4 	bl	8007d0c <__malloc_lock>
 80071a4:	4a1d      	ldr	r2, [pc, #116]	@ (800721c <_free_r+0x90>)
 80071a6:	6813      	ldr	r3, [r2, #0]
 80071a8:	b933      	cbnz	r3, 80071b8 <_free_r+0x2c>
 80071aa:	6063      	str	r3, [r4, #4]
 80071ac:	6014      	str	r4, [r2, #0]
 80071ae:	4628      	mov	r0, r5
 80071b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071b4:	f000 bdb0 	b.w	8007d18 <__malloc_unlock>
 80071b8:	42a3      	cmp	r3, r4
 80071ba:	d908      	bls.n	80071ce <_free_r+0x42>
 80071bc:	6820      	ldr	r0, [r4, #0]
 80071be:	1821      	adds	r1, r4, r0
 80071c0:	428b      	cmp	r3, r1
 80071c2:	bf01      	itttt	eq
 80071c4:	6819      	ldreq	r1, [r3, #0]
 80071c6:	685b      	ldreq	r3, [r3, #4]
 80071c8:	1809      	addeq	r1, r1, r0
 80071ca:	6021      	streq	r1, [r4, #0]
 80071cc:	e7ed      	b.n	80071aa <_free_r+0x1e>
 80071ce:	461a      	mov	r2, r3
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	b10b      	cbz	r3, 80071d8 <_free_r+0x4c>
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	d9fa      	bls.n	80071ce <_free_r+0x42>
 80071d8:	6811      	ldr	r1, [r2, #0]
 80071da:	1850      	adds	r0, r2, r1
 80071dc:	42a0      	cmp	r0, r4
 80071de:	d10b      	bne.n	80071f8 <_free_r+0x6c>
 80071e0:	6820      	ldr	r0, [r4, #0]
 80071e2:	4401      	add	r1, r0
 80071e4:	1850      	adds	r0, r2, r1
 80071e6:	4283      	cmp	r3, r0
 80071e8:	6011      	str	r1, [r2, #0]
 80071ea:	d1e0      	bne.n	80071ae <_free_r+0x22>
 80071ec:	6818      	ldr	r0, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	6053      	str	r3, [r2, #4]
 80071f2:	4408      	add	r0, r1
 80071f4:	6010      	str	r0, [r2, #0]
 80071f6:	e7da      	b.n	80071ae <_free_r+0x22>
 80071f8:	d902      	bls.n	8007200 <_free_r+0x74>
 80071fa:	230c      	movs	r3, #12
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	e7d6      	b.n	80071ae <_free_r+0x22>
 8007200:	6820      	ldr	r0, [r4, #0]
 8007202:	1821      	adds	r1, r4, r0
 8007204:	428b      	cmp	r3, r1
 8007206:	bf04      	itt	eq
 8007208:	6819      	ldreq	r1, [r3, #0]
 800720a:	685b      	ldreq	r3, [r3, #4]
 800720c:	6063      	str	r3, [r4, #4]
 800720e:	bf04      	itt	eq
 8007210:	1809      	addeq	r1, r1, r0
 8007212:	6021      	streq	r1, [r4, #0]
 8007214:	6054      	str	r4, [r2, #4]
 8007216:	e7ca      	b.n	80071ae <_free_r+0x22>
 8007218:	bd38      	pop	{r3, r4, r5, pc}
 800721a:	bf00      	nop
 800721c:	20001570 	.word	0x20001570

08007220 <__ssputs_r>:
 8007220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007224:	688e      	ldr	r6, [r1, #8]
 8007226:	461f      	mov	r7, r3
 8007228:	42be      	cmp	r6, r7
 800722a:	680b      	ldr	r3, [r1, #0]
 800722c:	4682      	mov	sl, r0
 800722e:	460c      	mov	r4, r1
 8007230:	4690      	mov	r8, r2
 8007232:	d82d      	bhi.n	8007290 <__ssputs_r+0x70>
 8007234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007238:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800723c:	d026      	beq.n	800728c <__ssputs_r+0x6c>
 800723e:	6965      	ldr	r5, [r4, #20]
 8007240:	6909      	ldr	r1, [r1, #16]
 8007242:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007246:	eba3 0901 	sub.w	r9, r3, r1
 800724a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800724e:	1c7b      	adds	r3, r7, #1
 8007250:	444b      	add	r3, r9
 8007252:	106d      	asrs	r5, r5, #1
 8007254:	429d      	cmp	r5, r3
 8007256:	bf38      	it	cc
 8007258:	461d      	movcc	r5, r3
 800725a:	0553      	lsls	r3, r2, #21
 800725c:	d527      	bpl.n	80072ae <__ssputs_r+0x8e>
 800725e:	4629      	mov	r1, r5
 8007260:	f000 fa9a 	bl	8007798 <_malloc_r>
 8007264:	4606      	mov	r6, r0
 8007266:	b360      	cbz	r0, 80072c2 <__ssputs_r+0xa2>
 8007268:	6921      	ldr	r1, [r4, #16]
 800726a:	464a      	mov	r2, r9
 800726c:	f7ff ff7f 	bl	800716e <memcpy>
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800727a:	81a3      	strh	r3, [r4, #12]
 800727c:	6126      	str	r6, [r4, #16]
 800727e:	6165      	str	r5, [r4, #20]
 8007280:	444e      	add	r6, r9
 8007282:	eba5 0509 	sub.w	r5, r5, r9
 8007286:	6026      	str	r6, [r4, #0]
 8007288:	60a5      	str	r5, [r4, #8]
 800728a:	463e      	mov	r6, r7
 800728c:	42be      	cmp	r6, r7
 800728e:	d900      	bls.n	8007292 <__ssputs_r+0x72>
 8007290:	463e      	mov	r6, r7
 8007292:	6820      	ldr	r0, [r4, #0]
 8007294:	4632      	mov	r2, r6
 8007296:	4641      	mov	r1, r8
 8007298:	f000 feac 	bl	8007ff4 <memmove>
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	1b9b      	subs	r3, r3, r6
 80072a0:	60a3      	str	r3, [r4, #8]
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	4433      	add	r3, r6
 80072a6:	6023      	str	r3, [r4, #0]
 80072a8:	2000      	movs	r0, #0
 80072aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ae:	462a      	mov	r2, r5
 80072b0:	f000 fd7b 	bl	8007daa <_realloc_r>
 80072b4:	4606      	mov	r6, r0
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d1e0      	bne.n	800727c <__ssputs_r+0x5c>
 80072ba:	6921      	ldr	r1, [r4, #16]
 80072bc:	4650      	mov	r0, sl
 80072be:	f7ff ff65 	bl	800718c <_free_r>
 80072c2:	230c      	movs	r3, #12
 80072c4:	f8ca 3000 	str.w	r3, [sl]
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ce:	81a3      	strh	r3, [r4, #12]
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072d4:	e7e9      	b.n	80072aa <__ssputs_r+0x8a>
	...

080072d8 <_svfiprintf_r>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	4698      	mov	r8, r3
 80072de:	898b      	ldrh	r3, [r1, #12]
 80072e0:	061b      	lsls	r3, r3, #24
 80072e2:	b09d      	sub	sp, #116	@ 0x74
 80072e4:	4607      	mov	r7, r0
 80072e6:	460d      	mov	r5, r1
 80072e8:	4614      	mov	r4, r2
 80072ea:	d510      	bpl.n	800730e <_svfiprintf_r+0x36>
 80072ec:	690b      	ldr	r3, [r1, #16]
 80072ee:	b973      	cbnz	r3, 800730e <_svfiprintf_r+0x36>
 80072f0:	2140      	movs	r1, #64	@ 0x40
 80072f2:	f000 fa51 	bl	8007798 <_malloc_r>
 80072f6:	6028      	str	r0, [r5, #0]
 80072f8:	6128      	str	r0, [r5, #16]
 80072fa:	b930      	cbnz	r0, 800730a <_svfiprintf_r+0x32>
 80072fc:	230c      	movs	r3, #12
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007304:	b01d      	add	sp, #116	@ 0x74
 8007306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730a:	2340      	movs	r3, #64	@ 0x40
 800730c:	616b      	str	r3, [r5, #20]
 800730e:	2300      	movs	r3, #0
 8007310:	9309      	str	r3, [sp, #36]	@ 0x24
 8007312:	2320      	movs	r3, #32
 8007314:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007318:	f8cd 800c 	str.w	r8, [sp, #12]
 800731c:	2330      	movs	r3, #48	@ 0x30
 800731e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80074bc <_svfiprintf_r+0x1e4>
 8007322:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007326:	f04f 0901 	mov.w	r9, #1
 800732a:	4623      	mov	r3, r4
 800732c:	469a      	mov	sl, r3
 800732e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007332:	b10a      	cbz	r2, 8007338 <_svfiprintf_r+0x60>
 8007334:	2a25      	cmp	r2, #37	@ 0x25
 8007336:	d1f9      	bne.n	800732c <_svfiprintf_r+0x54>
 8007338:	ebba 0b04 	subs.w	fp, sl, r4
 800733c:	d00b      	beq.n	8007356 <_svfiprintf_r+0x7e>
 800733e:	465b      	mov	r3, fp
 8007340:	4622      	mov	r2, r4
 8007342:	4629      	mov	r1, r5
 8007344:	4638      	mov	r0, r7
 8007346:	f7ff ff6b 	bl	8007220 <__ssputs_r>
 800734a:	3001      	adds	r0, #1
 800734c:	f000 80a7 	beq.w	800749e <_svfiprintf_r+0x1c6>
 8007350:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007352:	445a      	add	r2, fp
 8007354:	9209      	str	r2, [sp, #36]	@ 0x24
 8007356:	f89a 3000 	ldrb.w	r3, [sl]
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 809f 	beq.w	800749e <_svfiprintf_r+0x1c6>
 8007360:	2300      	movs	r3, #0
 8007362:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800736a:	f10a 0a01 	add.w	sl, sl, #1
 800736e:	9304      	str	r3, [sp, #16]
 8007370:	9307      	str	r3, [sp, #28]
 8007372:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007376:	931a      	str	r3, [sp, #104]	@ 0x68
 8007378:	4654      	mov	r4, sl
 800737a:	2205      	movs	r2, #5
 800737c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007380:	484e      	ldr	r0, [pc, #312]	@ (80074bc <_svfiprintf_r+0x1e4>)
 8007382:	f7f8 ff4d 	bl	8000220 <memchr>
 8007386:	9a04      	ldr	r2, [sp, #16]
 8007388:	b9d8      	cbnz	r0, 80073c2 <_svfiprintf_r+0xea>
 800738a:	06d0      	lsls	r0, r2, #27
 800738c:	bf44      	itt	mi
 800738e:	2320      	movmi	r3, #32
 8007390:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007394:	0711      	lsls	r1, r2, #28
 8007396:	bf44      	itt	mi
 8007398:	232b      	movmi	r3, #43	@ 0x2b
 800739a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800739e:	f89a 3000 	ldrb.w	r3, [sl]
 80073a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80073a4:	d015      	beq.n	80073d2 <_svfiprintf_r+0xfa>
 80073a6:	9a07      	ldr	r2, [sp, #28]
 80073a8:	4654      	mov	r4, sl
 80073aa:	2000      	movs	r0, #0
 80073ac:	f04f 0c0a 	mov.w	ip, #10
 80073b0:	4621      	mov	r1, r4
 80073b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073b6:	3b30      	subs	r3, #48	@ 0x30
 80073b8:	2b09      	cmp	r3, #9
 80073ba:	d94b      	bls.n	8007454 <_svfiprintf_r+0x17c>
 80073bc:	b1b0      	cbz	r0, 80073ec <_svfiprintf_r+0x114>
 80073be:	9207      	str	r2, [sp, #28]
 80073c0:	e014      	b.n	80073ec <_svfiprintf_r+0x114>
 80073c2:	eba0 0308 	sub.w	r3, r0, r8
 80073c6:	fa09 f303 	lsl.w	r3, r9, r3
 80073ca:	4313      	orrs	r3, r2
 80073cc:	9304      	str	r3, [sp, #16]
 80073ce:	46a2      	mov	sl, r4
 80073d0:	e7d2      	b.n	8007378 <_svfiprintf_r+0xa0>
 80073d2:	9b03      	ldr	r3, [sp, #12]
 80073d4:	1d19      	adds	r1, r3, #4
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	9103      	str	r1, [sp, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bfbb      	ittet	lt
 80073de:	425b      	neglt	r3, r3
 80073e0:	f042 0202 	orrlt.w	r2, r2, #2
 80073e4:	9307      	strge	r3, [sp, #28]
 80073e6:	9307      	strlt	r3, [sp, #28]
 80073e8:	bfb8      	it	lt
 80073ea:	9204      	strlt	r2, [sp, #16]
 80073ec:	7823      	ldrb	r3, [r4, #0]
 80073ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80073f0:	d10a      	bne.n	8007408 <_svfiprintf_r+0x130>
 80073f2:	7863      	ldrb	r3, [r4, #1]
 80073f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f6:	d132      	bne.n	800745e <_svfiprintf_r+0x186>
 80073f8:	9b03      	ldr	r3, [sp, #12]
 80073fa:	1d1a      	adds	r2, r3, #4
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	9203      	str	r2, [sp, #12]
 8007400:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007404:	3402      	adds	r4, #2
 8007406:	9305      	str	r3, [sp, #20]
 8007408:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80074cc <_svfiprintf_r+0x1f4>
 800740c:	7821      	ldrb	r1, [r4, #0]
 800740e:	2203      	movs	r2, #3
 8007410:	4650      	mov	r0, sl
 8007412:	f7f8 ff05 	bl	8000220 <memchr>
 8007416:	b138      	cbz	r0, 8007428 <_svfiprintf_r+0x150>
 8007418:	9b04      	ldr	r3, [sp, #16]
 800741a:	eba0 000a 	sub.w	r0, r0, sl
 800741e:	2240      	movs	r2, #64	@ 0x40
 8007420:	4082      	lsls	r2, r0
 8007422:	4313      	orrs	r3, r2
 8007424:	3401      	adds	r4, #1
 8007426:	9304      	str	r3, [sp, #16]
 8007428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800742c:	4824      	ldr	r0, [pc, #144]	@ (80074c0 <_svfiprintf_r+0x1e8>)
 800742e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007432:	2206      	movs	r2, #6
 8007434:	f7f8 fef4 	bl	8000220 <memchr>
 8007438:	2800      	cmp	r0, #0
 800743a:	d036      	beq.n	80074aa <_svfiprintf_r+0x1d2>
 800743c:	4b21      	ldr	r3, [pc, #132]	@ (80074c4 <_svfiprintf_r+0x1ec>)
 800743e:	bb1b      	cbnz	r3, 8007488 <_svfiprintf_r+0x1b0>
 8007440:	9b03      	ldr	r3, [sp, #12]
 8007442:	3307      	adds	r3, #7
 8007444:	f023 0307 	bic.w	r3, r3, #7
 8007448:	3308      	adds	r3, #8
 800744a:	9303      	str	r3, [sp, #12]
 800744c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800744e:	4433      	add	r3, r6
 8007450:	9309      	str	r3, [sp, #36]	@ 0x24
 8007452:	e76a      	b.n	800732a <_svfiprintf_r+0x52>
 8007454:	fb0c 3202 	mla	r2, ip, r2, r3
 8007458:	460c      	mov	r4, r1
 800745a:	2001      	movs	r0, #1
 800745c:	e7a8      	b.n	80073b0 <_svfiprintf_r+0xd8>
 800745e:	2300      	movs	r3, #0
 8007460:	3401      	adds	r4, #1
 8007462:	9305      	str	r3, [sp, #20]
 8007464:	4619      	mov	r1, r3
 8007466:	f04f 0c0a 	mov.w	ip, #10
 800746a:	4620      	mov	r0, r4
 800746c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007470:	3a30      	subs	r2, #48	@ 0x30
 8007472:	2a09      	cmp	r2, #9
 8007474:	d903      	bls.n	800747e <_svfiprintf_r+0x1a6>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0c6      	beq.n	8007408 <_svfiprintf_r+0x130>
 800747a:	9105      	str	r1, [sp, #20]
 800747c:	e7c4      	b.n	8007408 <_svfiprintf_r+0x130>
 800747e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007482:	4604      	mov	r4, r0
 8007484:	2301      	movs	r3, #1
 8007486:	e7f0      	b.n	800746a <_svfiprintf_r+0x192>
 8007488:	ab03      	add	r3, sp, #12
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	462a      	mov	r2, r5
 800748e:	4b0e      	ldr	r3, [pc, #56]	@ (80074c8 <_svfiprintf_r+0x1f0>)
 8007490:	a904      	add	r1, sp, #16
 8007492:	4638      	mov	r0, r7
 8007494:	f3af 8000 	nop.w
 8007498:	1c42      	adds	r2, r0, #1
 800749a:	4606      	mov	r6, r0
 800749c:	d1d6      	bne.n	800744c <_svfiprintf_r+0x174>
 800749e:	89ab      	ldrh	r3, [r5, #12]
 80074a0:	065b      	lsls	r3, r3, #25
 80074a2:	f53f af2d 	bmi.w	8007300 <_svfiprintf_r+0x28>
 80074a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074a8:	e72c      	b.n	8007304 <_svfiprintf_r+0x2c>
 80074aa:	ab03      	add	r3, sp, #12
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	462a      	mov	r2, r5
 80074b0:	4b05      	ldr	r3, [pc, #20]	@ (80074c8 <_svfiprintf_r+0x1f0>)
 80074b2:	a904      	add	r1, sp, #16
 80074b4:	4638      	mov	r0, r7
 80074b6:	f000 fa5d 	bl	8007974 <_printf_i>
 80074ba:	e7ed      	b.n	8007498 <_svfiprintf_r+0x1c0>
 80074bc:	08008371 	.word	0x08008371
 80074c0:	0800837b 	.word	0x0800837b
 80074c4:	00000000 	.word	0x00000000
 80074c8:	08007221 	.word	0x08007221
 80074cc:	08008377 	.word	0x08008377

080074d0 <__sfputc_r>:
 80074d0:	6893      	ldr	r3, [r2, #8]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	b410      	push	{r4}
 80074d8:	6093      	str	r3, [r2, #8]
 80074da:	da08      	bge.n	80074ee <__sfputc_r+0x1e>
 80074dc:	6994      	ldr	r4, [r2, #24]
 80074de:	42a3      	cmp	r3, r4
 80074e0:	db01      	blt.n	80074e6 <__sfputc_r+0x16>
 80074e2:	290a      	cmp	r1, #10
 80074e4:	d103      	bne.n	80074ee <__sfputc_r+0x1e>
 80074e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074ea:	f000 bc8c 	b.w	8007e06 <__swbuf_r>
 80074ee:	6813      	ldr	r3, [r2, #0]
 80074f0:	1c58      	adds	r0, r3, #1
 80074f2:	6010      	str	r0, [r2, #0]
 80074f4:	7019      	strb	r1, [r3, #0]
 80074f6:	4608      	mov	r0, r1
 80074f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <__sfputs_r>:
 80074fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007500:	4606      	mov	r6, r0
 8007502:	460f      	mov	r7, r1
 8007504:	4614      	mov	r4, r2
 8007506:	18d5      	adds	r5, r2, r3
 8007508:	42ac      	cmp	r4, r5
 800750a:	d101      	bne.n	8007510 <__sfputs_r+0x12>
 800750c:	2000      	movs	r0, #0
 800750e:	e007      	b.n	8007520 <__sfputs_r+0x22>
 8007510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007514:	463a      	mov	r2, r7
 8007516:	4630      	mov	r0, r6
 8007518:	f7ff ffda 	bl	80074d0 <__sfputc_r>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d1f3      	bne.n	8007508 <__sfputs_r+0xa>
 8007520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007524 <_vfiprintf_r>:
 8007524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007528:	460d      	mov	r5, r1
 800752a:	b09d      	sub	sp, #116	@ 0x74
 800752c:	4614      	mov	r4, r2
 800752e:	4698      	mov	r8, r3
 8007530:	4606      	mov	r6, r0
 8007532:	b118      	cbz	r0, 800753c <_vfiprintf_r+0x18>
 8007534:	6a03      	ldr	r3, [r0, #32]
 8007536:	b90b      	cbnz	r3, 800753c <_vfiprintf_r+0x18>
 8007538:	f7ff fcc2 	bl	8006ec0 <__sinit>
 800753c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800753e:	07d9      	lsls	r1, r3, #31
 8007540:	d405      	bmi.n	800754e <_vfiprintf_r+0x2a>
 8007542:	89ab      	ldrh	r3, [r5, #12]
 8007544:	059a      	lsls	r2, r3, #22
 8007546:	d402      	bmi.n	800754e <_vfiprintf_r+0x2a>
 8007548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800754a:	f7ff fe0e 	bl	800716a <__retarget_lock_acquire_recursive>
 800754e:	89ab      	ldrh	r3, [r5, #12]
 8007550:	071b      	lsls	r3, r3, #28
 8007552:	d501      	bpl.n	8007558 <_vfiprintf_r+0x34>
 8007554:	692b      	ldr	r3, [r5, #16]
 8007556:	b99b      	cbnz	r3, 8007580 <_vfiprintf_r+0x5c>
 8007558:	4629      	mov	r1, r5
 800755a:	4630      	mov	r0, r6
 800755c:	f000 fc92 	bl	8007e84 <__swsetup_r>
 8007560:	b170      	cbz	r0, 8007580 <_vfiprintf_r+0x5c>
 8007562:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007564:	07dc      	lsls	r4, r3, #31
 8007566:	d504      	bpl.n	8007572 <_vfiprintf_r+0x4e>
 8007568:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800756c:	b01d      	add	sp, #116	@ 0x74
 800756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007572:	89ab      	ldrh	r3, [r5, #12]
 8007574:	0598      	lsls	r0, r3, #22
 8007576:	d4f7      	bmi.n	8007568 <_vfiprintf_r+0x44>
 8007578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800757a:	f7ff fdf7 	bl	800716c <__retarget_lock_release_recursive>
 800757e:	e7f3      	b.n	8007568 <_vfiprintf_r+0x44>
 8007580:	2300      	movs	r3, #0
 8007582:	9309      	str	r3, [sp, #36]	@ 0x24
 8007584:	2320      	movs	r3, #32
 8007586:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800758a:	f8cd 800c 	str.w	r8, [sp, #12]
 800758e:	2330      	movs	r3, #48	@ 0x30
 8007590:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007740 <_vfiprintf_r+0x21c>
 8007594:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007598:	f04f 0901 	mov.w	r9, #1
 800759c:	4623      	mov	r3, r4
 800759e:	469a      	mov	sl, r3
 80075a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075a4:	b10a      	cbz	r2, 80075aa <_vfiprintf_r+0x86>
 80075a6:	2a25      	cmp	r2, #37	@ 0x25
 80075a8:	d1f9      	bne.n	800759e <_vfiprintf_r+0x7a>
 80075aa:	ebba 0b04 	subs.w	fp, sl, r4
 80075ae:	d00b      	beq.n	80075c8 <_vfiprintf_r+0xa4>
 80075b0:	465b      	mov	r3, fp
 80075b2:	4622      	mov	r2, r4
 80075b4:	4629      	mov	r1, r5
 80075b6:	4630      	mov	r0, r6
 80075b8:	f7ff ffa1 	bl	80074fe <__sfputs_r>
 80075bc:	3001      	adds	r0, #1
 80075be:	f000 80a7 	beq.w	8007710 <_vfiprintf_r+0x1ec>
 80075c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075c4:	445a      	add	r2, fp
 80075c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80075c8:	f89a 3000 	ldrb.w	r3, [sl]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 809f 	beq.w	8007710 <_vfiprintf_r+0x1ec>
 80075d2:	2300      	movs	r3, #0
 80075d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075dc:	f10a 0a01 	add.w	sl, sl, #1
 80075e0:	9304      	str	r3, [sp, #16]
 80075e2:	9307      	str	r3, [sp, #28]
 80075e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80075ea:	4654      	mov	r4, sl
 80075ec:	2205      	movs	r2, #5
 80075ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f2:	4853      	ldr	r0, [pc, #332]	@ (8007740 <_vfiprintf_r+0x21c>)
 80075f4:	f7f8 fe14 	bl	8000220 <memchr>
 80075f8:	9a04      	ldr	r2, [sp, #16]
 80075fa:	b9d8      	cbnz	r0, 8007634 <_vfiprintf_r+0x110>
 80075fc:	06d1      	lsls	r1, r2, #27
 80075fe:	bf44      	itt	mi
 8007600:	2320      	movmi	r3, #32
 8007602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007606:	0713      	lsls	r3, r2, #28
 8007608:	bf44      	itt	mi
 800760a:	232b      	movmi	r3, #43	@ 0x2b
 800760c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007610:	f89a 3000 	ldrb.w	r3, [sl]
 8007614:	2b2a      	cmp	r3, #42	@ 0x2a
 8007616:	d015      	beq.n	8007644 <_vfiprintf_r+0x120>
 8007618:	9a07      	ldr	r2, [sp, #28]
 800761a:	4654      	mov	r4, sl
 800761c:	2000      	movs	r0, #0
 800761e:	f04f 0c0a 	mov.w	ip, #10
 8007622:	4621      	mov	r1, r4
 8007624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007628:	3b30      	subs	r3, #48	@ 0x30
 800762a:	2b09      	cmp	r3, #9
 800762c:	d94b      	bls.n	80076c6 <_vfiprintf_r+0x1a2>
 800762e:	b1b0      	cbz	r0, 800765e <_vfiprintf_r+0x13a>
 8007630:	9207      	str	r2, [sp, #28]
 8007632:	e014      	b.n	800765e <_vfiprintf_r+0x13a>
 8007634:	eba0 0308 	sub.w	r3, r0, r8
 8007638:	fa09 f303 	lsl.w	r3, r9, r3
 800763c:	4313      	orrs	r3, r2
 800763e:	9304      	str	r3, [sp, #16]
 8007640:	46a2      	mov	sl, r4
 8007642:	e7d2      	b.n	80075ea <_vfiprintf_r+0xc6>
 8007644:	9b03      	ldr	r3, [sp, #12]
 8007646:	1d19      	adds	r1, r3, #4
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	9103      	str	r1, [sp, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	bfbb      	ittet	lt
 8007650:	425b      	neglt	r3, r3
 8007652:	f042 0202 	orrlt.w	r2, r2, #2
 8007656:	9307      	strge	r3, [sp, #28]
 8007658:	9307      	strlt	r3, [sp, #28]
 800765a:	bfb8      	it	lt
 800765c:	9204      	strlt	r2, [sp, #16]
 800765e:	7823      	ldrb	r3, [r4, #0]
 8007660:	2b2e      	cmp	r3, #46	@ 0x2e
 8007662:	d10a      	bne.n	800767a <_vfiprintf_r+0x156>
 8007664:	7863      	ldrb	r3, [r4, #1]
 8007666:	2b2a      	cmp	r3, #42	@ 0x2a
 8007668:	d132      	bne.n	80076d0 <_vfiprintf_r+0x1ac>
 800766a:	9b03      	ldr	r3, [sp, #12]
 800766c:	1d1a      	adds	r2, r3, #4
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	9203      	str	r2, [sp, #12]
 8007672:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007676:	3402      	adds	r4, #2
 8007678:	9305      	str	r3, [sp, #20]
 800767a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007750 <_vfiprintf_r+0x22c>
 800767e:	7821      	ldrb	r1, [r4, #0]
 8007680:	2203      	movs	r2, #3
 8007682:	4650      	mov	r0, sl
 8007684:	f7f8 fdcc 	bl	8000220 <memchr>
 8007688:	b138      	cbz	r0, 800769a <_vfiprintf_r+0x176>
 800768a:	9b04      	ldr	r3, [sp, #16]
 800768c:	eba0 000a 	sub.w	r0, r0, sl
 8007690:	2240      	movs	r2, #64	@ 0x40
 8007692:	4082      	lsls	r2, r0
 8007694:	4313      	orrs	r3, r2
 8007696:	3401      	adds	r4, #1
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769e:	4829      	ldr	r0, [pc, #164]	@ (8007744 <_vfiprintf_r+0x220>)
 80076a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076a4:	2206      	movs	r2, #6
 80076a6:	f7f8 fdbb 	bl	8000220 <memchr>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d03f      	beq.n	800772e <_vfiprintf_r+0x20a>
 80076ae:	4b26      	ldr	r3, [pc, #152]	@ (8007748 <_vfiprintf_r+0x224>)
 80076b0:	bb1b      	cbnz	r3, 80076fa <_vfiprintf_r+0x1d6>
 80076b2:	9b03      	ldr	r3, [sp, #12]
 80076b4:	3307      	adds	r3, #7
 80076b6:	f023 0307 	bic.w	r3, r3, #7
 80076ba:	3308      	adds	r3, #8
 80076bc:	9303      	str	r3, [sp, #12]
 80076be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c0:	443b      	add	r3, r7
 80076c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80076c4:	e76a      	b.n	800759c <_vfiprintf_r+0x78>
 80076c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ca:	460c      	mov	r4, r1
 80076cc:	2001      	movs	r0, #1
 80076ce:	e7a8      	b.n	8007622 <_vfiprintf_r+0xfe>
 80076d0:	2300      	movs	r3, #0
 80076d2:	3401      	adds	r4, #1
 80076d4:	9305      	str	r3, [sp, #20]
 80076d6:	4619      	mov	r1, r3
 80076d8:	f04f 0c0a 	mov.w	ip, #10
 80076dc:	4620      	mov	r0, r4
 80076de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076e2:	3a30      	subs	r2, #48	@ 0x30
 80076e4:	2a09      	cmp	r2, #9
 80076e6:	d903      	bls.n	80076f0 <_vfiprintf_r+0x1cc>
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d0c6      	beq.n	800767a <_vfiprintf_r+0x156>
 80076ec:	9105      	str	r1, [sp, #20]
 80076ee:	e7c4      	b.n	800767a <_vfiprintf_r+0x156>
 80076f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80076f4:	4604      	mov	r4, r0
 80076f6:	2301      	movs	r3, #1
 80076f8:	e7f0      	b.n	80076dc <_vfiprintf_r+0x1b8>
 80076fa:	ab03      	add	r3, sp, #12
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	462a      	mov	r2, r5
 8007700:	4b12      	ldr	r3, [pc, #72]	@ (800774c <_vfiprintf_r+0x228>)
 8007702:	a904      	add	r1, sp, #16
 8007704:	4630      	mov	r0, r6
 8007706:	f3af 8000 	nop.w
 800770a:	4607      	mov	r7, r0
 800770c:	1c78      	adds	r0, r7, #1
 800770e:	d1d6      	bne.n	80076be <_vfiprintf_r+0x19a>
 8007710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007712:	07d9      	lsls	r1, r3, #31
 8007714:	d405      	bmi.n	8007722 <_vfiprintf_r+0x1fe>
 8007716:	89ab      	ldrh	r3, [r5, #12]
 8007718:	059a      	lsls	r2, r3, #22
 800771a:	d402      	bmi.n	8007722 <_vfiprintf_r+0x1fe>
 800771c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800771e:	f7ff fd25 	bl	800716c <__retarget_lock_release_recursive>
 8007722:	89ab      	ldrh	r3, [r5, #12]
 8007724:	065b      	lsls	r3, r3, #25
 8007726:	f53f af1f 	bmi.w	8007568 <_vfiprintf_r+0x44>
 800772a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800772c:	e71e      	b.n	800756c <_vfiprintf_r+0x48>
 800772e:	ab03      	add	r3, sp, #12
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	462a      	mov	r2, r5
 8007734:	4b05      	ldr	r3, [pc, #20]	@ (800774c <_vfiprintf_r+0x228>)
 8007736:	a904      	add	r1, sp, #16
 8007738:	4630      	mov	r0, r6
 800773a:	f000 f91b 	bl	8007974 <_printf_i>
 800773e:	e7e4      	b.n	800770a <_vfiprintf_r+0x1e6>
 8007740:	08008371 	.word	0x08008371
 8007744:	0800837b 	.word	0x0800837b
 8007748:	00000000 	.word	0x00000000
 800774c:	080074ff 	.word	0x080074ff
 8007750:	08008377 	.word	0x08008377

08007754 <sbrk_aligned>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	4e0f      	ldr	r6, [pc, #60]	@ (8007794 <sbrk_aligned+0x40>)
 8007758:	460c      	mov	r4, r1
 800775a:	6831      	ldr	r1, [r6, #0]
 800775c:	4605      	mov	r5, r0
 800775e:	b911      	cbnz	r1, 8007766 <sbrk_aligned+0x12>
 8007760:	f000 fcb8 	bl	80080d4 <_sbrk_r>
 8007764:	6030      	str	r0, [r6, #0]
 8007766:	4621      	mov	r1, r4
 8007768:	4628      	mov	r0, r5
 800776a:	f000 fcb3 	bl	80080d4 <_sbrk_r>
 800776e:	1c43      	adds	r3, r0, #1
 8007770:	d103      	bne.n	800777a <sbrk_aligned+0x26>
 8007772:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007776:	4620      	mov	r0, r4
 8007778:	bd70      	pop	{r4, r5, r6, pc}
 800777a:	1cc4      	adds	r4, r0, #3
 800777c:	f024 0403 	bic.w	r4, r4, #3
 8007780:	42a0      	cmp	r0, r4
 8007782:	d0f8      	beq.n	8007776 <sbrk_aligned+0x22>
 8007784:	1a21      	subs	r1, r4, r0
 8007786:	4628      	mov	r0, r5
 8007788:	f000 fca4 	bl	80080d4 <_sbrk_r>
 800778c:	3001      	adds	r0, #1
 800778e:	d1f2      	bne.n	8007776 <sbrk_aligned+0x22>
 8007790:	e7ef      	b.n	8007772 <sbrk_aligned+0x1e>
 8007792:	bf00      	nop
 8007794:	2000156c 	.word	0x2000156c

08007798 <_malloc_r>:
 8007798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800779c:	1ccd      	adds	r5, r1, #3
 800779e:	f025 0503 	bic.w	r5, r5, #3
 80077a2:	3508      	adds	r5, #8
 80077a4:	2d0c      	cmp	r5, #12
 80077a6:	bf38      	it	cc
 80077a8:	250c      	movcc	r5, #12
 80077aa:	2d00      	cmp	r5, #0
 80077ac:	4606      	mov	r6, r0
 80077ae:	db01      	blt.n	80077b4 <_malloc_r+0x1c>
 80077b0:	42a9      	cmp	r1, r5
 80077b2:	d904      	bls.n	80077be <_malloc_r+0x26>
 80077b4:	230c      	movs	r3, #12
 80077b6:	6033      	str	r3, [r6, #0]
 80077b8:	2000      	movs	r0, #0
 80077ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007894 <_malloc_r+0xfc>
 80077c2:	f000 faa3 	bl	8007d0c <__malloc_lock>
 80077c6:	f8d8 3000 	ldr.w	r3, [r8]
 80077ca:	461c      	mov	r4, r3
 80077cc:	bb44      	cbnz	r4, 8007820 <_malloc_r+0x88>
 80077ce:	4629      	mov	r1, r5
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7ff ffbf 	bl	8007754 <sbrk_aligned>
 80077d6:	1c43      	adds	r3, r0, #1
 80077d8:	4604      	mov	r4, r0
 80077da:	d158      	bne.n	800788e <_malloc_r+0xf6>
 80077dc:	f8d8 4000 	ldr.w	r4, [r8]
 80077e0:	4627      	mov	r7, r4
 80077e2:	2f00      	cmp	r7, #0
 80077e4:	d143      	bne.n	800786e <_malloc_r+0xd6>
 80077e6:	2c00      	cmp	r4, #0
 80077e8:	d04b      	beq.n	8007882 <_malloc_r+0xea>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	4639      	mov	r1, r7
 80077ee:	4630      	mov	r0, r6
 80077f0:	eb04 0903 	add.w	r9, r4, r3
 80077f4:	f000 fc6e 	bl	80080d4 <_sbrk_r>
 80077f8:	4581      	cmp	r9, r0
 80077fa:	d142      	bne.n	8007882 <_malloc_r+0xea>
 80077fc:	6821      	ldr	r1, [r4, #0]
 80077fe:	1a6d      	subs	r5, r5, r1
 8007800:	4629      	mov	r1, r5
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff ffa6 	bl	8007754 <sbrk_aligned>
 8007808:	3001      	adds	r0, #1
 800780a:	d03a      	beq.n	8007882 <_malloc_r+0xea>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	442b      	add	r3, r5
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	f8d8 3000 	ldr.w	r3, [r8]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	bb62      	cbnz	r2, 8007874 <_malloc_r+0xdc>
 800781a:	f8c8 7000 	str.w	r7, [r8]
 800781e:	e00f      	b.n	8007840 <_malloc_r+0xa8>
 8007820:	6822      	ldr	r2, [r4, #0]
 8007822:	1b52      	subs	r2, r2, r5
 8007824:	d420      	bmi.n	8007868 <_malloc_r+0xd0>
 8007826:	2a0b      	cmp	r2, #11
 8007828:	d917      	bls.n	800785a <_malloc_r+0xc2>
 800782a:	1961      	adds	r1, r4, r5
 800782c:	42a3      	cmp	r3, r4
 800782e:	6025      	str	r5, [r4, #0]
 8007830:	bf18      	it	ne
 8007832:	6059      	strne	r1, [r3, #4]
 8007834:	6863      	ldr	r3, [r4, #4]
 8007836:	bf08      	it	eq
 8007838:	f8c8 1000 	streq.w	r1, [r8]
 800783c:	5162      	str	r2, [r4, r5]
 800783e:	604b      	str	r3, [r1, #4]
 8007840:	4630      	mov	r0, r6
 8007842:	f000 fa69 	bl	8007d18 <__malloc_unlock>
 8007846:	f104 000b 	add.w	r0, r4, #11
 800784a:	1d23      	adds	r3, r4, #4
 800784c:	f020 0007 	bic.w	r0, r0, #7
 8007850:	1ac2      	subs	r2, r0, r3
 8007852:	bf1c      	itt	ne
 8007854:	1a1b      	subne	r3, r3, r0
 8007856:	50a3      	strne	r3, [r4, r2]
 8007858:	e7af      	b.n	80077ba <_malloc_r+0x22>
 800785a:	6862      	ldr	r2, [r4, #4]
 800785c:	42a3      	cmp	r3, r4
 800785e:	bf0c      	ite	eq
 8007860:	f8c8 2000 	streq.w	r2, [r8]
 8007864:	605a      	strne	r2, [r3, #4]
 8007866:	e7eb      	b.n	8007840 <_malloc_r+0xa8>
 8007868:	4623      	mov	r3, r4
 800786a:	6864      	ldr	r4, [r4, #4]
 800786c:	e7ae      	b.n	80077cc <_malloc_r+0x34>
 800786e:	463c      	mov	r4, r7
 8007870:	687f      	ldr	r7, [r7, #4]
 8007872:	e7b6      	b.n	80077e2 <_malloc_r+0x4a>
 8007874:	461a      	mov	r2, r3
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	42a3      	cmp	r3, r4
 800787a:	d1fb      	bne.n	8007874 <_malloc_r+0xdc>
 800787c:	2300      	movs	r3, #0
 800787e:	6053      	str	r3, [r2, #4]
 8007880:	e7de      	b.n	8007840 <_malloc_r+0xa8>
 8007882:	230c      	movs	r3, #12
 8007884:	6033      	str	r3, [r6, #0]
 8007886:	4630      	mov	r0, r6
 8007888:	f000 fa46 	bl	8007d18 <__malloc_unlock>
 800788c:	e794      	b.n	80077b8 <_malloc_r+0x20>
 800788e:	6005      	str	r5, [r0, #0]
 8007890:	e7d6      	b.n	8007840 <_malloc_r+0xa8>
 8007892:	bf00      	nop
 8007894:	20001570 	.word	0x20001570

08007898 <_printf_common>:
 8007898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800789c:	4616      	mov	r6, r2
 800789e:	4698      	mov	r8, r3
 80078a0:	688a      	ldr	r2, [r1, #8]
 80078a2:	690b      	ldr	r3, [r1, #16]
 80078a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078a8:	4293      	cmp	r3, r2
 80078aa:	bfb8      	it	lt
 80078ac:	4613      	movlt	r3, r2
 80078ae:	6033      	str	r3, [r6, #0]
 80078b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078b4:	4607      	mov	r7, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	b10a      	cbz	r2, 80078be <_printf_common+0x26>
 80078ba:	3301      	adds	r3, #1
 80078bc:	6033      	str	r3, [r6, #0]
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	0699      	lsls	r1, r3, #26
 80078c2:	bf42      	ittt	mi
 80078c4:	6833      	ldrmi	r3, [r6, #0]
 80078c6:	3302      	addmi	r3, #2
 80078c8:	6033      	strmi	r3, [r6, #0]
 80078ca:	6825      	ldr	r5, [r4, #0]
 80078cc:	f015 0506 	ands.w	r5, r5, #6
 80078d0:	d106      	bne.n	80078e0 <_printf_common+0x48>
 80078d2:	f104 0a19 	add.w	sl, r4, #25
 80078d6:	68e3      	ldr	r3, [r4, #12]
 80078d8:	6832      	ldr	r2, [r6, #0]
 80078da:	1a9b      	subs	r3, r3, r2
 80078dc:	42ab      	cmp	r3, r5
 80078de:	dc26      	bgt.n	800792e <_printf_common+0x96>
 80078e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078e4:	6822      	ldr	r2, [r4, #0]
 80078e6:	3b00      	subs	r3, #0
 80078e8:	bf18      	it	ne
 80078ea:	2301      	movne	r3, #1
 80078ec:	0692      	lsls	r2, r2, #26
 80078ee:	d42b      	bmi.n	8007948 <_printf_common+0xb0>
 80078f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078f4:	4641      	mov	r1, r8
 80078f6:	4638      	mov	r0, r7
 80078f8:	47c8      	blx	r9
 80078fa:	3001      	adds	r0, #1
 80078fc:	d01e      	beq.n	800793c <_printf_common+0xa4>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	6922      	ldr	r2, [r4, #16]
 8007902:	f003 0306 	and.w	r3, r3, #6
 8007906:	2b04      	cmp	r3, #4
 8007908:	bf02      	ittt	eq
 800790a:	68e5      	ldreq	r5, [r4, #12]
 800790c:	6833      	ldreq	r3, [r6, #0]
 800790e:	1aed      	subeq	r5, r5, r3
 8007910:	68a3      	ldr	r3, [r4, #8]
 8007912:	bf0c      	ite	eq
 8007914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007918:	2500      	movne	r5, #0
 800791a:	4293      	cmp	r3, r2
 800791c:	bfc4      	itt	gt
 800791e:	1a9b      	subgt	r3, r3, r2
 8007920:	18ed      	addgt	r5, r5, r3
 8007922:	2600      	movs	r6, #0
 8007924:	341a      	adds	r4, #26
 8007926:	42b5      	cmp	r5, r6
 8007928:	d11a      	bne.n	8007960 <_printf_common+0xc8>
 800792a:	2000      	movs	r0, #0
 800792c:	e008      	b.n	8007940 <_printf_common+0xa8>
 800792e:	2301      	movs	r3, #1
 8007930:	4652      	mov	r2, sl
 8007932:	4641      	mov	r1, r8
 8007934:	4638      	mov	r0, r7
 8007936:	47c8      	blx	r9
 8007938:	3001      	adds	r0, #1
 800793a:	d103      	bne.n	8007944 <_printf_common+0xac>
 800793c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007944:	3501      	adds	r5, #1
 8007946:	e7c6      	b.n	80078d6 <_printf_common+0x3e>
 8007948:	18e1      	adds	r1, r4, r3
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	2030      	movs	r0, #48	@ 0x30
 800794e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007952:	4422      	add	r2, r4
 8007954:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007958:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800795c:	3302      	adds	r3, #2
 800795e:	e7c7      	b.n	80078f0 <_printf_common+0x58>
 8007960:	2301      	movs	r3, #1
 8007962:	4622      	mov	r2, r4
 8007964:	4641      	mov	r1, r8
 8007966:	4638      	mov	r0, r7
 8007968:	47c8      	blx	r9
 800796a:	3001      	adds	r0, #1
 800796c:	d0e6      	beq.n	800793c <_printf_common+0xa4>
 800796e:	3601      	adds	r6, #1
 8007970:	e7d9      	b.n	8007926 <_printf_common+0x8e>
	...

08007974 <_printf_i>:
 8007974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007978:	7e0f      	ldrb	r7, [r1, #24]
 800797a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800797c:	2f78      	cmp	r7, #120	@ 0x78
 800797e:	4691      	mov	r9, r2
 8007980:	4680      	mov	r8, r0
 8007982:	460c      	mov	r4, r1
 8007984:	469a      	mov	sl, r3
 8007986:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800798a:	d807      	bhi.n	800799c <_printf_i+0x28>
 800798c:	2f62      	cmp	r7, #98	@ 0x62
 800798e:	d80a      	bhi.n	80079a6 <_printf_i+0x32>
 8007990:	2f00      	cmp	r7, #0
 8007992:	f000 80d2 	beq.w	8007b3a <_printf_i+0x1c6>
 8007996:	2f58      	cmp	r7, #88	@ 0x58
 8007998:	f000 80b9 	beq.w	8007b0e <_printf_i+0x19a>
 800799c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079a4:	e03a      	b.n	8007a1c <_printf_i+0xa8>
 80079a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079aa:	2b15      	cmp	r3, #21
 80079ac:	d8f6      	bhi.n	800799c <_printf_i+0x28>
 80079ae:	a101      	add	r1, pc, #4	@ (adr r1, 80079b4 <_printf_i+0x40>)
 80079b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079b4:	08007a0d 	.word	0x08007a0d
 80079b8:	08007a21 	.word	0x08007a21
 80079bc:	0800799d 	.word	0x0800799d
 80079c0:	0800799d 	.word	0x0800799d
 80079c4:	0800799d 	.word	0x0800799d
 80079c8:	0800799d 	.word	0x0800799d
 80079cc:	08007a21 	.word	0x08007a21
 80079d0:	0800799d 	.word	0x0800799d
 80079d4:	0800799d 	.word	0x0800799d
 80079d8:	0800799d 	.word	0x0800799d
 80079dc:	0800799d 	.word	0x0800799d
 80079e0:	08007b21 	.word	0x08007b21
 80079e4:	08007a4b 	.word	0x08007a4b
 80079e8:	08007adb 	.word	0x08007adb
 80079ec:	0800799d 	.word	0x0800799d
 80079f0:	0800799d 	.word	0x0800799d
 80079f4:	08007b43 	.word	0x08007b43
 80079f8:	0800799d 	.word	0x0800799d
 80079fc:	08007a4b 	.word	0x08007a4b
 8007a00:	0800799d 	.word	0x0800799d
 8007a04:	0800799d 	.word	0x0800799d
 8007a08:	08007ae3 	.word	0x08007ae3
 8007a0c:	6833      	ldr	r3, [r6, #0]
 8007a0e:	1d1a      	adds	r2, r3, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6032      	str	r2, [r6, #0]
 8007a14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e09d      	b.n	8007b5c <_printf_i+0x1e8>
 8007a20:	6833      	ldr	r3, [r6, #0]
 8007a22:	6820      	ldr	r0, [r4, #0]
 8007a24:	1d19      	adds	r1, r3, #4
 8007a26:	6031      	str	r1, [r6, #0]
 8007a28:	0606      	lsls	r6, r0, #24
 8007a2a:	d501      	bpl.n	8007a30 <_printf_i+0xbc>
 8007a2c:	681d      	ldr	r5, [r3, #0]
 8007a2e:	e003      	b.n	8007a38 <_printf_i+0xc4>
 8007a30:	0645      	lsls	r5, r0, #25
 8007a32:	d5fb      	bpl.n	8007a2c <_printf_i+0xb8>
 8007a34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a38:	2d00      	cmp	r5, #0
 8007a3a:	da03      	bge.n	8007a44 <_printf_i+0xd0>
 8007a3c:	232d      	movs	r3, #45	@ 0x2d
 8007a3e:	426d      	negs	r5, r5
 8007a40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a44:	4859      	ldr	r0, [pc, #356]	@ (8007bac <_printf_i+0x238>)
 8007a46:	230a      	movs	r3, #10
 8007a48:	e011      	b.n	8007a6e <_printf_i+0xfa>
 8007a4a:	6821      	ldr	r1, [r4, #0]
 8007a4c:	6833      	ldr	r3, [r6, #0]
 8007a4e:	0608      	lsls	r0, r1, #24
 8007a50:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a54:	d402      	bmi.n	8007a5c <_printf_i+0xe8>
 8007a56:	0649      	lsls	r1, r1, #25
 8007a58:	bf48      	it	mi
 8007a5a:	b2ad      	uxthmi	r5, r5
 8007a5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a5e:	4853      	ldr	r0, [pc, #332]	@ (8007bac <_printf_i+0x238>)
 8007a60:	6033      	str	r3, [r6, #0]
 8007a62:	bf14      	ite	ne
 8007a64:	230a      	movne	r3, #10
 8007a66:	2308      	moveq	r3, #8
 8007a68:	2100      	movs	r1, #0
 8007a6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a6e:	6866      	ldr	r6, [r4, #4]
 8007a70:	60a6      	str	r6, [r4, #8]
 8007a72:	2e00      	cmp	r6, #0
 8007a74:	bfa2      	ittt	ge
 8007a76:	6821      	ldrge	r1, [r4, #0]
 8007a78:	f021 0104 	bicge.w	r1, r1, #4
 8007a7c:	6021      	strge	r1, [r4, #0]
 8007a7e:	b90d      	cbnz	r5, 8007a84 <_printf_i+0x110>
 8007a80:	2e00      	cmp	r6, #0
 8007a82:	d04b      	beq.n	8007b1c <_printf_i+0x1a8>
 8007a84:	4616      	mov	r6, r2
 8007a86:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a8a:	fb03 5711 	mls	r7, r3, r1, r5
 8007a8e:	5dc7      	ldrb	r7, [r0, r7]
 8007a90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a94:	462f      	mov	r7, r5
 8007a96:	42bb      	cmp	r3, r7
 8007a98:	460d      	mov	r5, r1
 8007a9a:	d9f4      	bls.n	8007a86 <_printf_i+0x112>
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d10b      	bne.n	8007ab8 <_printf_i+0x144>
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	07df      	lsls	r7, r3, #31
 8007aa4:	d508      	bpl.n	8007ab8 <_printf_i+0x144>
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	6861      	ldr	r1, [r4, #4]
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	bfde      	ittt	le
 8007aae:	2330      	movle	r3, #48	@ 0x30
 8007ab0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ab4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007ab8:	1b92      	subs	r2, r2, r6
 8007aba:	6122      	str	r2, [r4, #16]
 8007abc:	f8cd a000 	str.w	sl, [sp]
 8007ac0:	464b      	mov	r3, r9
 8007ac2:	aa03      	add	r2, sp, #12
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	f7ff fee6 	bl	8007898 <_printf_common>
 8007acc:	3001      	adds	r0, #1
 8007ace:	d14a      	bne.n	8007b66 <_printf_i+0x1f2>
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ad4:	b004      	add	sp, #16
 8007ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	f043 0320 	orr.w	r3, r3, #32
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	4833      	ldr	r0, [pc, #204]	@ (8007bb0 <_printf_i+0x23c>)
 8007ae4:	2778      	movs	r7, #120	@ 0x78
 8007ae6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	6831      	ldr	r1, [r6, #0]
 8007aee:	061f      	lsls	r7, r3, #24
 8007af0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007af4:	d402      	bmi.n	8007afc <_printf_i+0x188>
 8007af6:	065f      	lsls	r7, r3, #25
 8007af8:	bf48      	it	mi
 8007afa:	b2ad      	uxthmi	r5, r5
 8007afc:	6031      	str	r1, [r6, #0]
 8007afe:	07d9      	lsls	r1, r3, #31
 8007b00:	bf44      	itt	mi
 8007b02:	f043 0320 	orrmi.w	r3, r3, #32
 8007b06:	6023      	strmi	r3, [r4, #0]
 8007b08:	b11d      	cbz	r5, 8007b12 <_printf_i+0x19e>
 8007b0a:	2310      	movs	r3, #16
 8007b0c:	e7ac      	b.n	8007a68 <_printf_i+0xf4>
 8007b0e:	4827      	ldr	r0, [pc, #156]	@ (8007bac <_printf_i+0x238>)
 8007b10:	e7e9      	b.n	8007ae6 <_printf_i+0x172>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	f023 0320 	bic.w	r3, r3, #32
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	e7f6      	b.n	8007b0a <_printf_i+0x196>
 8007b1c:	4616      	mov	r6, r2
 8007b1e:	e7bd      	b.n	8007a9c <_printf_i+0x128>
 8007b20:	6833      	ldr	r3, [r6, #0]
 8007b22:	6825      	ldr	r5, [r4, #0]
 8007b24:	6961      	ldr	r1, [r4, #20]
 8007b26:	1d18      	adds	r0, r3, #4
 8007b28:	6030      	str	r0, [r6, #0]
 8007b2a:	062e      	lsls	r6, r5, #24
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	d501      	bpl.n	8007b34 <_printf_i+0x1c0>
 8007b30:	6019      	str	r1, [r3, #0]
 8007b32:	e002      	b.n	8007b3a <_printf_i+0x1c6>
 8007b34:	0668      	lsls	r0, r5, #25
 8007b36:	d5fb      	bpl.n	8007b30 <_printf_i+0x1bc>
 8007b38:	8019      	strh	r1, [r3, #0]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6123      	str	r3, [r4, #16]
 8007b3e:	4616      	mov	r6, r2
 8007b40:	e7bc      	b.n	8007abc <_printf_i+0x148>
 8007b42:	6833      	ldr	r3, [r6, #0]
 8007b44:	1d1a      	adds	r2, r3, #4
 8007b46:	6032      	str	r2, [r6, #0]
 8007b48:	681e      	ldr	r6, [r3, #0]
 8007b4a:	6862      	ldr	r2, [r4, #4]
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f7f8 fb66 	bl	8000220 <memchr>
 8007b54:	b108      	cbz	r0, 8007b5a <_printf_i+0x1e6>
 8007b56:	1b80      	subs	r0, r0, r6
 8007b58:	6060      	str	r0, [r4, #4]
 8007b5a:	6863      	ldr	r3, [r4, #4]
 8007b5c:	6123      	str	r3, [r4, #16]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b64:	e7aa      	b.n	8007abc <_printf_i+0x148>
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	4632      	mov	r2, r6
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	47d0      	blx	sl
 8007b70:	3001      	adds	r0, #1
 8007b72:	d0ad      	beq.n	8007ad0 <_printf_i+0x15c>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	079b      	lsls	r3, r3, #30
 8007b78:	d413      	bmi.n	8007ba2 <_printf_i+0x22e>
 8007b7a:	68e0      	ldr	r0, [r4, #12]
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	4298      	cmp	r0, r3
 8007b80:	bfb8      	it	lt
 8007b82:	4618      	movlt	r0, r3
 8007b84:	e7a6      	b.n	8007ad4 <_printf_i+0x160>
 8007b86:	2301      	movs	r3, #1
 8007b88:	4632      	mov	r2, r6
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	47d0      	blx	sl
 8007b90:	3001      	adds	r0, #1
 8007b92:	d09d      	beq.n	8007ad0 <_printf_i+0x15c>
 8007b94:	3501      	adds	r5, #1
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	9903      	ldr	r1, [sp, #12]
 8007b9a:	1a5b      	subs	r3, r3, r1
 8007b9c:	42ab      	cmp	r3, r5
 8007b9e:	dcf2      	bgt.n	8007b86 <_printf_i+0x212>
 8007ba0:	e7eb      	b.n	8007b7a <_printf_i+0x206>
 8007ba2:	2500      	movs	r5, #0
 8007ba4:	f104 0619 	add.w	r6, r4, #25
 8007ba8:	e7f5      	b.n	8007b96 <_printf_i+0x222>
 8007baa:	bf00      	nop
 8007bac:	08008382 	.word	0x08008382
 8007bb0:	08008393 	.word	0x08008393

08007bb4 <__sflush_r>:
 8007bb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbc:	0716      	lsls	r6, r2, #28
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	d454      	bmi.n	8007c6e <__sflush_r+0xba>
 8007bc4:	684b      	ldr	r3, [r1, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	dc02      	bgt.n	8007bd0 <__sflush_r+0x1c>
 8007bca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dd48      	ble.n	8007c62 <__sflush_r+0xae>
 8007bd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bd2:	2e00      	cmp	r6, #0
 8007bd4:	d045      	beq.n	8007c62 <__sflush_r+0xae>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bdc:	682f      	ldr	r7, [r5, #0]
 8007bde:	6a21      	ldr	r1, [r4, #32]
 8007be0:	602b      	str	r3, [r5, #0]
 8007be2:	d030      	beq.n	8007c46 <__sflush_r+0x92>
 8007be4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	0759      	lsls	r1, r3, #29
 8007bea:	d505      	bpl.n	8007bf8 <__sflush_r+0x44>
 8007bec:	6863      	ldr	r3, [r4, #4]
 8007bee:	1ad2      	subs	r2, r2, r3
 8007bf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bf2:	b10b      	cbz	r3, 8007bf8 <__sflush_r+0x44>
 8007bf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bf6:	1ad2      	subs	r2, r2, r3
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bfc:	6a21      	ldr	r1, [r4, #32]
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b0      	blx	r6
 8007c02:	1c43      	adds	r3, r0, #1
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	d106      	bne.n	8007c16 <__sflush_r+0x62>
 8007c08:	6829      	ldr	r1, [r5, #0]
 8007c0a:	291d      	cmp	r1, #29
 8007c0c:	d82b      	bhi.n	8007c66 <__sflush_r+0xb2>
 8007c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8007cb8 <__sflush_r+0x104>)
 8007c10:	410a      	asrs	r2, r1
 8007c12:	07d6      	lsls	r6, r2, #31
 8007c14:	d427      	bmi.n	8007c66 <__sflush_r+0xb2>
 8007c16:	2200      	movs	r2, #0
 8007c18:	6062      	str	r2, [r4, #4]
 8007c1a:	04d9      	lsls	r1, r3, #19
 8007c1c:	6922      	ldr	r2, [r4, #16]
 8007c1e:	6022      	str	r2, [r4, #0]
 8007c20:	d504      	bpl.n	8007c2c <__sflush_r+0x78>
 8007c22:	1c42      	adds	r2, r0, #1
 8007c24:	d101      	bne.n	8007c2a <__sflush_r+0x76>
 8007c26:	682b      	ldr	r3, [r5, #0]
 8007c28:	b903      	cbnz	r3, 8007c2c <__sflush_r+0x78>
 8007c2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c2e:	602f      	str	r7, [r5, #0]
 8007c30:	b1b9      	cbz	r1, 8007c62 <__sflush_r+0xae>
 8007c32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c36:	4299      	cmp	r1, r3
 8007c38:	d002      	beq.n	8007c40 <__sflush_r+0x8c>
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f7ff faa6 	bl	800718c <_free_r>
 8007c40:	2300      	movs	r3, #0
 8007c42:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c44:	e00d      	b.n	8007c62 <__sflush_r+0xae>
 8007c46:	2301      	movs	r3, #1
 8007c48:	4628      	mov	r0, r5
 8007c4a:	47b0      	blx	r6
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	1c50      	adds	r0, r2, #1
 8007c50:	d1c9      	bne.n	8007be6 <__sflush_r+0x32>
 8007c52:	682b      	ldr	r3, [r5, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0c6      	beq.n	8007be6 <__sflush_r+0x32>
 8007c58:	2b1d      	cmp	r3, #29
 8007c5a:	d001      	beq.n	8007c60 <__sflush_r+0xac>
 8007c5c:	2b16      	cmp	r3, #22
 8007c5e:	d11e      	bne.n	8007c9e <__sflush_r+0xea>
 8007c60:	602f      	str	r7, [r5, #0]
 8007c62:	2000      	movs	r0, #0
 8007c64:	e022      	b.n	8007cac <__sflush_r+0xf8>
 8007c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c6a:	b21b      	sxth	r3, r3
 8007c6c:	e01b      	b.n	8007ca6 <__sflush_r+0xf2>
 8007c6e:	690f      	ldr	r7, [r1, #16]
 8007c70:	2f00      	cmp	r7, #0
 8007c72:	d0f6      	beq.n	8007c62 <__sflush_r+0xae>
 8007c74:	0793      	lsls	r3, r2, #30
 8007c76:	680e      	ldr	r6, [r1, #0]
 8007c78:	bf08      	it	eq
 8007c7a:	694b      	ldreq	r3, [r1, #20]
 8007c7c:	600f      	str	r7, [r1, #0]
 8007c7e:	bf18      	it	ne
 8007c80:	2300      	movne	r3, #0
 8007c82:	eba6 0807 	sub.w	r8, r6, r7
 8007c86:	608b      	str	r3, [r1, #8]
 8007c88:	f1b8 0f00 	cmp.w	r8, #0
 8007c8c:	dde9      	ble.n	8007c62 <__sflush_r+0xae>
 8007c8e:	6a21      	ldr	r1, [r4, #32]
 8007c90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c92:	4643      	mov	r3, r8
 8007c94:	463a      	mov	r2, r7
 8007c96:	4628      	mov	r0, r5
 8007c98:	47b0      	blx	r6
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	dc08      	bgt.n	8007cb0 <__sflush_r+0xfc>
 8007c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb0:	4407      	add	r7, r0
 8007cb2:	eba8 0800 	sub.w	r8, r8, r0
 8007cb6:	e7e7      	b.n	8007c88 <__sflush_r+0xd4>
 8007cb8:	dfbffffe 	.word	0xdfbffffe

08007cbc <_fflush_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	690b      	ldr	r3, [r1, #16]
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	b913      	cbnz	r3, 8007ccc <_fflush_r+0x10>
 8007cc6:	2500      	movs	r5, #0
 8007cc8:	4628      	mov	r0, r5
 8007cca:	bd38      	pop	{r3, r4, r5, pc}
 8007ccc:	b118      	cbz	r0, 8007cd6 <_fflush_r+0x1a>
 8007cce:	6a03      	ldr	r3, [r0, #32]
 8007cd0:	b90b      	cbnz	r3, 8007cd6 <_fflush_r+0x1a>
 8007cd2:	f7ff f8f5 	bl	8006ec0 <__sinit>
 8007cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0f3      	beq.n	8007cc6 <_fflush_r+0xa>
 8007cde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ce0:	07d0      	lsls	r0, r2, #31
 8007ce2:	d404      	bmi.n	8007cee <_fflush_r+0x32>
 8007ce4:	0599      	lsls	r1, r3, #22
 8007ce6:	d402      	bmi.n	8007cee <_fflush_r+0x32>
 8007ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cea:	f7ff fa3e 	bl	800716a <__retarget_lock_acquire_recursive>
 8007cee:	4628      	mov	r0, r5
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	f7ff ff5f 	bl	8007bb4 <__sflush_r>
 8007cf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cf8:	07da      	lsls	r2, r3, #31
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	d4e4      	bmi.n	8007cc8 <_fflush_r+0xc>
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	059b      	lsls	r3, r3, #22
 8007d02:	d4e1      	bmi.n	8007cc8 <_fflush_r+0xc>
 8007d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d06:	f7ff fa31 	bl	800716c <__retarget_lock_release_recursive>
 8007d0a:	e7dd      	b.n	8007cc8 <_fflush_r+0xc>

08007d0c <__malloc_lock>:
 8007d0c:	4801      	ldr	r0, [pc, #4]	@ (8007d14 <__malloc_lock+0x8>)
 8007d0e:	f7ff ba2c 	b.w	800716a <__retarget_lock_acquire_recursive>
 8007d12:	bf00      	nop
 8007d14:	20001568 	.word	0x20001568

08007d18 <__malloc_unlock>:
 8007d18:	4801      	ldr	r0, [pc, #4]	@ (8007d20 <__malloc_unlock+0x8>)
 8007d1a:	f7ff ba27 	b.w	800716c <__retarget_lock_release_recursive>
 8007d1e:	bf00      	nop
 8007d20:	20001568 	.word	0x20001568

08007d24 <__sread>:
 8007d24:	b510      	push	{r4, lr}
 8007d26:	460c      	mov	r4, r1
 8007d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d2c:	f000 f9c0 	bl	80080b0 <_read_r>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	bfab      	itete	ge
 8007d34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d36:	89a3      	ldrhlt	r3, [r4, #12]
 8007d38:	181b      	addge	r3, r3, r0
 8007d3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d3e:	bfac      	ite	ge
 8007d40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d42:	81a3      	strhlt	r3, [r4, #12]
 8007d44:	bd10      	pop	{r4, pc}

08007d46 <__swrite>:
 8007d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4a:	461f      	mov	r7, r3
 8007d4c:	898b      	ldrh	r3, [r1, #12]
 8007d4e:	05db      	lsls	r3, r3, #23
 8007d50:	4605      	mov	r5, r0
 8007d52:	460c      	mov	r4, r1
 8007d54:	4616      	mov	r6, r2
 8007d56:	d505      	bpl.n	8007d64 <__swrite+0x1e>
 8007d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f000 f994 	bl	800808c <_lseek_r>
 8007d64:	89a3      	ldrh	r3, [r4, #12]
 8007d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d6e:	81a3      	strh	r3, [r4, #12]
 8007d70:	4632      	mov	r2, r6
 8007d72:	463b      	mov	r3, r7
 8007d74:	4628      	mov	r0, r5
 8007d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d7a:	f000 b9bb 	b.w	80080f4 <_write_r>

08007d7e <__sseek>:
 8007d7e:	b510      	push	{r4, lr}
 8007d80:	460c      	mov	r4, r1
 8007d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d86:	f000 f981 	bl	800808c <_lseek_r>
 8007d8a:	1c43      	adds	r3, r0, #1
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	bf15      	itete	ne
 8007d90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d9a:	81a3      	strheq	r3, [r4, #12]
 8007d9c:	bf18      	it	ne
 8007d9e:	81a3      	strhne	r3, [r4, #12]
 8007da0:	bd10      	pop	{r4, pc}

08007da2 <__sclose>:
 8007da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da6:	f000 b93f 	b.w	8008028 <_close_r>

08007daa <_realloc_r>:
 8007daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dae:	4680      	mov	r8, r0
 8007db0:	4615      	mov	r5, r2
 8007db2:	460c      	mov	r4, r1
 8007db4:	b921      	cbnz	r1, 8007dc0 <_realloc_r+0x16>
 8007db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dba:	4611      	mov	r1, r2
 8007dbc:	f7ff bcec 	b.w	8007798 <_malloc_r>
 8007dc0:	b92a      	cbnz	r2, 8007dce <_realloc_r+0x24>
 8007dc2:	f7ff f9e3 	bl	800718c <_free_r>
 8007dc6:	2400      	movs	r4, #0
 8007dc8:	4620      	mov	r0, r4
 8007dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dce:	f000 f9a3 	bl	8008118 <_malloc_usable_size_r>
 8007dd2:	4285      	cmp	r5, r0
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	d802      	bhi.n	8007dde <_realloc_r+0x34>
 8007dd8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007ddc:	d8f4      	bhi.n	8007dc8 <_realloc_r+0x1e>
 8007dde:	4629      	mov	r1, r5
 8007de0:	4640      	mov	r0, r8
 8007de2:	f7ff fcd9 	bl	8007798 <_malloc_r>
 8007de6:	4607      	mov	r7, r0
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d0ec      	beq.n	8007dc6 <_realloc_r+0x1c>
 8007dec:	42b5      	cmp	r5, r6
 8007dee:	462a      	mov	r2, r5
 8007df0:	4621      	mov	r1, r4
 8007df2:	bf28      	it	cs
 8007df4:	4632      	movcs	r2, r6
 8007df6:	f7ff f9ba 	bl	800716e <memcpy>
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	f7ff f9c5 	bl	800718c <_free_r>
 8007e02:	463c      	mov	r4, r7
 8007e04:	e7e0      	b.n	8007dc8 <_realloc_r+0x1e>

08007e06 <__swbuf_r>:
 8007e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e08:	460e      	mov	r6, r1
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	b118      	cbz	r0, 8007e18 <__swbuf_r+0x12>
 8007e10:	6a03      	ldr	r3, [r0, #32]
 8007e12:	b90b      	cbnz	r3, 8007e18 <__swbuf_r+0x12>
 8007e14:	f7ff f854 	bl	8006ec0 <__sinit>
 8007e18:	69a3      	ldr	r3, [r4, #24]
 8007e1a:	60a3      	str	r3, [r4, #8]
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	071a      	lsls	r2, r3, #28
 8007e20:	d501      	bpl.n	8007e26 <__swbuf_r+0x20>
 8007e22:	6923      	ldr	r3, [r4, #16]
 8007e24:	b943      	cbnz	r3, 8007e38 <__swbuf_r+0x32>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f000 f82b 	bl	8007e84 <__swsetup_r>
 8007e2e:	b118      	cbz	r0, 8007e38 <__swbuf_r+0x32>
 8007e30:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007e34:	4638      	mov	r0, r7
 8007e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	6922      	ldr	r2, [r4, #16]
 8007e3c:	1a98      	subs	r0, r3, r2
 8007e3e:	6963      	ldr	r3, [r4, #20]
 8007e40:	b2f6      	uxtb	r6, r6
 8007e42:	4283      	cmp	r3, r0
 8007e44:	4637      	mov	r7, r6
 8007e46:	dc05      	bgt.n	8007e54 <__swbuf_r+0x4e>
 8007e48:	4621      	mov	r1, r4
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f7ff ff36 	bl	8007cbc <_fflush_r>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d1ed      	bne.n	8007e30 <__swbuf_r+0x2a>
 8007e54:	68a3      	ldr	r3, [r4, #8]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	60a3      	str	r3, [r4, #8]
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	6022      	str	r2, [r4, #0]
 8007e60:	701e      	strb	r6, [r3, #0]
 8007e62:	6962      	ldr	r2, [r4, #20]
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d004      	beq.n	8007e74 <__swbuf_r+0x6e>
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	07db      	lsls	r3, r3, #31
 8007e6e:	d5e1      	bpl.n	8007e34 <__swbuf_r+0x2e>
 8007e70:	2e0a      	cmp	r6, #10
 8007e72:	d1df      	bne.n	8007e34 <__swbuf_r+0x2e>
 8007e74:	4621      	mov	r1, r4
 8007e76:	4628      	mov	r0, r5
 8007e78:	f7ff ff20 	bl	8007cbc <_fflush_r>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d0d9      	beq.n	8007e34 <__swbuf_r+0x2e>
 8007e80:	e7d6      	b.n	8007e30 <__swbuf_r+0x2a>
	...

08007e84 <__swsetup_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	4b29      	ldr	r3, [pc, #164]	@ (8007f2c <__swsetup_r+0xa8>)
 8007e88:	4605      	mov	r5, r0
 8007e8a:	6818      	ldr	r0, [r3, #0]
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	b118      	cbz	r0, 8007e98 <__swsetup_r+0x14>
 8007e90:	6a03      	ldr	r3, [r0, #32]
 8007e92:	b90b      	cbnz	r3, 8007e98 <__swsetup_r+0x14>
 8007e94:	f7ff f814 	bl	8006ec0 <__sinit>
 8007e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9c:	0719      	lsls	r1, r3, #28
 8007e9e:	d422      	bmi.n	8007ee6 <__swsetup_r+0x62>
 8007ea0:	06da      	lsls	r2, r3, #27
 8007ea2:	d407      	bmi.n	8007eb4 <__swsetup_r+0x30>
 8007ea4:	2209      	movs	r2, #9
 8007ea6:	602a      	str	r2, [r5, #0]
 8007ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eac:	81a3      	strh	r3, [r4, #12]
 8007eae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007eb2:	e033      	b.n	8007f1c <__swsetup_r+0x98>
 8007eb4:	0758      	lsls	r0, r3, #29
 8007eb6:	d512      	bpl.n	8007ede <__swsetup_r+0x5a>
 8007eb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007eba:	b141      	cbz	r1, 8007ece <__swsetup_r+0x4a>
 8007ebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ec0:	4299      	cmp	r1, r3
 8007ec2:	d002      	beq.n	8007eca <__swsetup_r+0x46>
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f7ff f961 	bl	800718c <_free_r>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	6063      	str	r3, [r4, #4]
 8007eda:	6923      	ldr	r3, [r4, #16]
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	f043 0308 	orr.w	r3, r3, #8
 8007ee4:	81a3      	strh	r3, [r4, #12]
 8007ee6:	6923      	ldr	r3, [r4, #16]
 8007ee8:	b94b      	cbnz	r3, 8007efe <__swsetup_r+0x7a>
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ef4:	d003      	beq.n	8007efe <__swsetup_r+0x7a>
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f000 f83f 	bl	8007f7c <__smakebuf_r>
 8007efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f02:	f013 0201 	ands.w	r2, r3, #1
 8007f06:	d00a      	beq.n	8007f1e <__swsetup_r+0x9a>
 8007f08:	2200      	movs	r2, #0
 8007f0a:	60a2      	str	r2, [r4, #8]
 8007f0c:	6962      	ldr	r2, [r4, #20]
 8007f0e:	4252      	negs	r2, r2
 8007f10:	61a2      	str	r2, [r4, #24]
 8007f12:	6922      	ldr	r2, [r4, #16]
 8007f14:	b942      	cbnz	r2, 8007f28 <__swsetup_r+0xa4>
 8007f16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f1a:	d1c5      	bne.n	8007ea8 <__swsetup_r+0x24>
 8007f1c:	bd38      	pop	{r3, r4, r5, pc}
 8007f1e:	0799      	lsls	r1, r3, #30
 8007f20:	bf58      	it	pl
 8007f22:	6962      	ldrpl	r2, [r4, #20]
 8007f24:	60a2      	str	r2, [r4, #8]
 8007f26:	e7f4      	b.n	8007f12 <__swsetup_r+0x8e>
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e7f7      	b.n	8007f1c <__swsetup_r+0x98>
 8007f2c:	20000024 	.word	0x20000024

08007f30 <__swhatbuf_r>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	460c      	mov	r4, r1
 8007f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f38:	2900      	cmp	r1, #0
 8007f3a:	b096      	sub	sp, #88	@ 0x58
 8007f3c:	4615      	mov	r5, r2
 8007f3e:	461e      	mov	r6, r3
 8007f40:	da0d      	bge.n	8007f5e <__swhatbuf_r+0x2e>
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f48:	f04f 0100 	mov.w	r1, #0
 8007f4c:	bf14      	ite	ne
 8007f4e:	2340      	movne	r3, #64	@ 0x40
 8007f50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f54:	2000      	movs	r0, #0
 8007f56:	6031      	str	r1, [r6, #0]
 8007f58:	602b      	str	r3, [r5, #0]
 8007f5a:	b016      	add	sp, #88	@ 0x58
 8007f5c:	bd70      	pop	{r4, r5, r6, pc}
 8007f5e:	466a      	mov	r2, sp
 8007f60:	f000 f872 	bl	8008048 <_fstat_r>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	dbec      	blt.n	8007f42 <__swhatbuf_r+0x12>
 8007f68:	9901      	ldr	r1, [sp, #4]
 8007f6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f72:	4259      	negs	r1, r3
 8007f74:	4159      	adcs	r1, r3
 8007f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f7a:	e7eb      	b.n	8007f54 <__swhatbuf_r+0x24>

08007f7c <__smakebuf_r>:
 8007f7c:	898b      	ldrh	r3, [r1, #12]
 8007f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f80:	079d      	lsls	r5, r3, #30
 8007f82:	4606      	mov	r6, r0
 8007f84:	460c      	mov	r4, r1
 8007f86:	d507      	bpl.n	8007f98 <__smakebuf_r+0x1c>
 8007f88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	6123      	str	r3, [r4, #16]
 8007f90:	2301      	movs	r3, #1
 8007f92:	6163      	str	r3, [r4, #20]
 8007f94:	b003      	add	sp, #12
 8007f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f98:	ab01      	add	r3, sp, #4
 8007f9a:	466a      	mov	r2, sp
 8007f9c:	f7ff ffc8 	bl	8007f30 <__swhatbuf_r>
 8007fa0:	9f00      	ldr	r7, [sp, #0]
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	f7ff fbf6 	bl	8007798 <_malloc_r>
 8007fac:	b948      	cbnz	r0, 8007fc2 <__smakebuf_r+0x46>
 8007fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fb2:	059a      	lsls	r2, r3, #22
 8007fb4:	d4ee      	bmi.n	8007f94 <__smakebuf_r+0x18>
 8007fb6:	f023 0303 	bic.w	r3, r3, #3
 8007fba:	f043 0302 	orr.w	r3, r3, #2
 8007fbe:	81a3      	strh	r3, [r4, #12]
 8007fc0:	e7e2      	b.n	8007f88 <__smakebuf_r+0xc>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	6020      	str	r0, [r4, #0]
 8007fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	9b01      	ldr	r3, [sp, #4]
 8007fce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007fd2:	b15b      	cbz	r3, 8007fec <__smakebuf_r+0x70>
 8007fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f000 f847 	bl	800806c <_isatty_r>
 8007fde:	b128      	cbz	r0, 8007fec <__smakebuf_r+0x70>
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f023 0303 	bic.w	r3, r3, #3
 8007fe6:	f043 0301 	orr.w	r3, r3, #1
 8007fea:	81a3      	strh	r3, [r4, #12]
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	431d      	orrs	r5, r3
 8007ff0:	81a5      	strh	r5, [r4, #12]
 8007ff2:	e7cf      	b.n	8007f94 <__smakebuf_r+0x18>

08007ff4 <memmove>:
 8007ff4:	4288      	cmp	r0, r1
 8007ff6:	b510      	push	{r4, lr}
 8007ff8:	eb01 0402 	add.w	r4, r1, r2
 8007ffc:	d902      	bls.n	8008004 <memmove+0x10>
 8007ffe:	4284      	cmp	r4, r0
 8008000:	4623      	mov	r3, r4
 8008002:	d807      	bhi.n	8008014 <memmove+0x20>
 8008004:	1e43      	subs	r3, r0, #1
 8008006:	42a1      	cmp	r1, r4
 8008008:	d008      	beq.n	800801c <memmove+0x28>
 800800a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800800e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008012:	e7f8      	b.n	8008006 <memmove+0x12>
 8008014:	4402      	add	r2, r0
 8008016:	4601      	mov	r1, r0
 8008018:	428a      	cmp	r2, r1
 800801a:	d100      	bne.n	800801e <memmove+0x2a>
 800801c:	bd10      	pop	{r4, pc}
 800801e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008026:	e7f7      	b.n	8008018 <memmove+0x24>

08008028 <_close_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4d06      	ldr	r5, [pc, #24]	@ (8008044 <_close_r+0x1c>)
 800802c:	2300      	movs	r3, #0
 800802e:	4604      	mov	r4, r0
 8008030:	4608      	mov	r0, r1
 8008032:	602b      	str	r3, [r5, #0]
 8008034:	f7f8 fd6f 	bl	8000b16 <_close>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d102      	bne.n	8008042 <_close_r+0x1a>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	b103      	cbz	r3, 8008042 <_close_r+0x1a>
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	20001564 	.word	0x20001564

08008048 <_fstat_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4d07      	ldr	r5, [pc, #28]	@ (8008068 <_fstat_r+0x20>)
 800804c:	2300      	movs	r3, #0
 800804e:	4604      	mov	r4, r0
 8008050:	4608      	mov	r0, r1
 8008052:	4611      	mov	r1, r2
 8008054:	602b      	str	r3, [r5, #0]
 8008056:	f7f8 fd6a 	bl	8000b2e <_fstat>
 800805a:	1c43      	adds	r3, r0, #1
 800805c:	d102      	bne.n	8008064 <_fstat_r+0x1c>
 800805e:	682b      	ldr	r3, [r5, #0]
 8008060:	b103      	cbz	r3, 8008064 <_fstat_r+0x1c>
 8008062:	6023      	str	r3, [r4, #0]
 8008064:	bd38      	pop	{r3, r4, r5, pc}
 8008066:	bf00      	nop
 8008068:	20001564 	.word	0x20001564

0800806c <_isatty_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d06      	ldr	r5, [pc, #24]	@ (8008088 <_isatty_r+0x1c>)
 8008070:	2300      	movs	r3, #0
 8008072:	4604      	mov	r4, r0
 8008074:	4608      	mov	r0, r1
 8008076:	602b      	str	r3, [r5, #0]
 8008078:	f7f8 fd69 	bl	8000b4e <_isatty>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d102      	bne.n	8008086 <_isatty_r+0x1a>
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	b103      	cbz	r3, 8008086 <_isatty_r+0x1a>
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	bd38      	pop	{r3, r4, r5, pc}
 8008088:	20001564 	.word	0x20001564

0800808c <_lseek_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4d07      	ldr	r5, [pc, #28]	@ (80080ac <_lseek_r+0x20>)
 8008090:	4604      	mov	r4, r0
 8008092:	4608      	mov	r0, r1
 8008094:	4611      	mov	r1, r2
 8008096:	2200      	movs	r2, #0
 8008098:	602a      	str	r2, [r5, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	f7f8 fd62 	bl	8000b64 <_lseek>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_lseek_r+0x1e>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_lseek_r+0x1e>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	20001564 	.word	0x20001564

080080b0 <_read_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4d07      	ldr	r5, [pc, #28]	@ (80080d0 <_read_r+0x20>)
 80080b4:	4604      	mov	r4, r0
 80080b6:	4608      	mov	r0, r1
 80080b8:	4611      	mov	r1, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	602a      	str	r2, [r5, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	f7f8 fcf0 	bl	8000aa4 <_read>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_read_r+0x1e>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_read_r+0x1e>
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	20001564 	.word	0x20001564

080080d4 <_sbrk_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d06      	ldr	r5, [pc, #24]	@ (80080f0 <_sbrk_r+0x1c>)
 80080d8:	2300      	movs	r3, #0
 80080da:	4604      	mov	r4, r0
 80080dc:	4608      	mov	r0, r1
 80080de:	602b      	str	r3, [r5, #0]
 80080e0:	f7f8 fd4e 	bl	8000b80 <_sbrk>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d102      	bne.n	80080ee <_sbrk_r+0x1a>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b103      	cbz	r3, 80080ee <_sbrk_r+0x1a>
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	20001564 	.word	0x20001564

080080f4 <_write_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4d07      	ldr	r5, [pc, #28]	@ (8008114 <_write_r+0x20>)
 80080f8:	4604      	mov	r4, r0
 80080fa:	4608      	mov	r0, r1
 80080fc:	4611      	mov	r1, r2
 80080fe:	2200      	movs	r2, #0
 8008100:	602a      	str	r2, [r5, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	f7f8 fceb 	bl	8000ade <_write>
 8008108:	1c43      	adds	r3, r0, #1
 800810a:	d102      	bne.n	8008112 <_write_r+0x1e>
 800810c:	682b      	ldr	r3, [r5, #0]
 800810e:	b103      	cbz	r3, 8008112 <_write_r+0x1e>
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	bd38      	pop	{r3, r4, r5, pc}
 8008114:	20001564 	.word	0x20001564

08008118 <_malloc_usable_size_r>:
 8008118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800811c:	1f18      	subs	r0, r3, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	bfbc      	itt	lt
 8008122:	580b      	ldrlt	r3, [r1, r0]
 8008124:	18c0      	addlt	r0, r0, r3
 8008126:	4770      	bx	lr

08008128 <_init>:
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	bf00      	nop
 800812c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812e:	bc08      	pop	{r3}
 8008130:	469e      	mov	lr, r3
 8008132:	4770      	bx	lr

08008134 <_fini>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	bf00      	nop
 8008138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813a:	bc08      	pop	{r3}
 800813c:	469e      	mov	lr, r3
 800813e:	4770      	bx	lr
