
Lidar_RTOS_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006650  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006830  08006830  00007830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068dc  080068dc  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080068dc  080068dc  000078dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068e4  080068e4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068e4  080068e4  000078e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068e8  080068e8  000078e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080068ec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000068  08006954  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08006954  00008478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c71  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b74  00000000  00000000  0001bd09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0001e880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000daa  00000000  00000000  0001fa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa51  00000000  00000000  000207ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015383  00000000  00000000  0004021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7e75  00000000  00000000  0005559e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005108  00000000  00000000  0011d458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00122560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006818 	.word	0x08006818

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006818 	.word	0x08006818

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <MX_DMA_Init+0x70>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ba:	4a19      	ldr	r2, [pc, #100]	@ (8000620 <MX_DMA_Init+0x70>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005c2:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <MX_DMA_Init+0x70>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b14      	ldr	r3, [pc, #80]	@ (8000620 <MX_DMA_Init+0x70>)
 80005d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005d2:	4a13      	ldr	r2, [pc, #76]	@ (8000620 <MX_DMA_Init+0x70>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005da:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <MX_DMA_Init+0x70>)
 80005dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200b      	movs	r0, #11
 80005ec:	f000 fea7 	bl	800133e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005f0:	200b      	movs	r0, #11
 80005f2:	f000 febe 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	200c      	movs	r0, #12
 80005fc:	f000 fe9f 	bl	800133e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000600:	200c      	movs	r0, #12
 8000602:	f000 feb6 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	200d      	movs	r0, #13
 800060c:	f000 fe97 	bl	800133e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000610:	200d      	movs	r0, #13
 8000612:	f000 feae 	bl	8001372 <HAL_NVIC_EnableIRQ>

}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	4b35      	ldr	r3, [pc, #212]	@ (8000710 <MX_GPIO_Init+0xec>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a34      	ldr	r2, [pc, #208]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b32      	ldr	r3, [pc, #200]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	4a2e      	ldr	r2, [pc, #184]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000658:	f043 0320 	orr.w	r3, r3, #32
 800065c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065e:	4b2c      	ldr	r3, [pc, #176]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	f003 0320 	and.w	r3, r3, #32
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <MX_GPIO_Init+0xec>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	4a28      	ldr	r2, [pc, #160]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000676:	4b26      	ldr	r3, [pc, #152]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a22      	ldr	r2, [pc, #136]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2120      	movs	r1, #32
 800069e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a2:	f001 fb35 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2130      	movs	r1, #48	@ 0x30
 80006aa:	481a      	ldr	r0, [pc, #104]	@ (8000714 <MX_GPIO_Init+0xf0>)
 80006ac:	f001 fb30 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	4814      	ldr	r0, [pc, #80]	@ (8000718 <MX_GPIO_Init+0xf4>)
 80006c8:	f001 f9a0 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006cc:	2320      	movs	r3, #32
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e6:	f001 f991 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin;
 80006ea:	2330      	movs	r3, #48	@ 0x30
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_GPIO_Init+0xf0>)
 8000702:	f001 f983 	bl	8001a0c <HAL_GPIO_Init>

}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	@ 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000
 8000714:	48000400 	.word	0x48000400
 8000718:	48000800 	.word	0x48000800

0800071c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char*ptr , int len){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
	(void)file;
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ptr, len);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	b29b      	uxth	r3, r3
 800072c:	461a      	mov	r2, r3
 800072e:	68b9      	ldr	r1, [r7, #8]
 8000730:	4807      	ldr	r0, [pc, #28]	@ (8000750 <_write+0x34>)
 8000732:	f003 fc27 	bl	8003f84 <HAL_UART_Transmit_DMA>
	while(irq_TX_completed!=1);
 8000736:	bf00      	nop
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <_write+0x38>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d1fb      	bne.n	8000738 <_write+0x1c>
	irq_TX_completed=0;
 8000740:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <_write+0x38>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
	return len;
 8000746:	687b      	ldr	r3, [r7, #4]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000174 	.word	0x20000174
 8000754:	2000008c 	.word	0x2000008c

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 fca2 	bl	80010a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f843 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f7ff ff5d 	bl	8000624 <MX_GPIO_Init>
  MX_DMA_Init();
 800076a:	f7ff ff21 	bl	80005b0 <MX_DMA_Init>
  MX_TIM2_Init();
 800076e:	f000 f9df 	bl	8000b30 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000772:	f000 faab 	bl	8000ccc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000776:	f000 faf5 	bl	8000d64 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 800077a:	4816      	ldr	r0, [pc, #88]	@ (80007d4 <main+0x7c>)
 800077c:	f002 fb0a 	bl	8002d94 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000780:	2104      	movs	r1, #4
 8000782:	4814      	ldr	r0, [pc, #80]	@ (80007d4 <main+0x7c>)
 8000784:	f002 fbca 	bl	8002f1c <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(LIDAR_M_EN_GPIO_Port,LIDAR_M_EN_Pin, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2110      	movs	r1, #16
 800078c:	4812      	ldr	r0, [pc, #72]	@ (80007d8 <main+0x80>)
 800078e:	f001 fabf 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIDAR_DEV_EN_GPIO_Port,LIDAR_DEV_EN_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2120      	movs	r1, #32
 8000796:	4810      	ldr	r0, [pc, #64]	@ (80007d8 <main+0x80>)
 8000798:	f001 faba 	bl	8001d10 <HAL_GPIO_WritePin>
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);

	uint8_t command[2] = {0xA5,0x90};
 800079c:	f249 03a5 	movw	r3, #37029	@ 0x90a5
 80007a0:	80bb      	strh	r3, [r7, #4]

	printf("====== START LIDAR =====\r\n");
 80007a2:	480e      	ldr	r0, [pc, #56]	@ (80007dc <main+0x84>)
 80007a4:	f005 f9d6 	bl	8005b54 <puts>
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)command, sizeof(command));
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2202      	movs	r2, #2
 80007ac:	4619      	mov	r1, r3
 80007ae:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <main+0x88>)
 80007b0:	f003 fbe8 	bl	8003f84 <HAL_UART_Transmit_DMA>
	while(irq_TX_completed != 1);
 80007b4:	bf00      	nop
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <main+0x8c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d1fb      	bne.n	80007b6 <main+0x5e>
	irq_TX_completed=0;
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <main+0x8c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)Lidar_byte, 2);
 80007c4:	2202      	movs	r2, #2
 80007c6:	4908      	ldr	r1, [pc, #32]	@ (80007e8 <main+0x90>)
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <main+0x88>)
 80007ca:	f003 fc5b 	bl	8004084 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80007ce:	bf00      	nop
 80007d0:	e7fd      	b.n	80007ce <main+0x76>
 80007d2:	bf00      	nop
 80007d4:	20000094 	.word	0x20000094
 80007d8:	48000400 	.word	0x48000400
 80007dc:	08006830 	.word	0x08006830
 80007e0:	200000e0 	.word	0x200000e0
 80007e4:	2000008c 	.word	0x2000008c
 80007e8:	20000084 	.word	0x20000084

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	@ 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	2238      	movs	r2, #56	@ 0x38
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 f9b2 	bl	8005b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800080e:	2000      	movs	r0, #0
 8000810:	f001 fa96 	bl	8001d40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000814:	2302      	movs	r3, #2
 8000816:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081e:	2340      	movs	r3, #64	@ 0x40
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000822:	2302      	movs	r3, #2
 8000824:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000826:	2302      	movs	r3, #2
 8000828:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800082a:	2304      	movs	r3, #4
 800082c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800082e:	2355      	movs	r3, #85	@ 0x55
 8000830:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 0318 	add.w	r3, r7, #24
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fb30 	bl	8001ea8 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800084e:	f000 f818 	bl	8000882 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	230f      	movs	r3, #15
 8000854:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2303      	movs	r3, #3
 8000858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2104      	movs	r1, #4
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fe2e 	bl	80024cc <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000876:	f000 f804 	bl	8000882 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3750      	adds	r7, #80	@ 0x50
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000886:	b672      	cpsid	i
}
 8000888:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800088a:	bf00      	nop
 800088c:	e7fd      	b.n	800088a <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <HAL_MspInit+0x44>)
 8000898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089a:	4a0e      	ldr	r2, [pc, #56]	@ (80008d4 <HAL_MspInit+0x44>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <HAL_MspInit+0x44>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <HAL_MspInit+0x44>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b2:	4a08      	ldr	r2, [pc, #32]	@ (80008d4 <HAL_MspInit+0x44>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_MspInit+0x44>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008c6:	f001 fadf 	bl	8001e88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <NMI_Handler+0x4>

080008e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <MemManage_Handler+0x4>

080008f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <UsageFault_Handler+0x4>

08000900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092e:	f000 fc0d 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800093c:	4802      	ldr	r0, [pc, #8]	@ (8000948 <DMA1_Channel1_IRQHandler+0x10>)
 800093e:	f000 ff16 	bl	800176e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200002c8 	.word	0x200002c8

0800094c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000950:	4802      	ldr	r0, [pc, #8]	@ (800095c <DMA1_Channel2_IRQHandler+0x10>)
 8000952:	f000 ff0c 	bl	800176e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000208 	.word	0x20000208

08000960 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000964:	4802      	ldr	r0, [pc, #8]	@ (8000970 <DMA1_Channel3_IRQHandler+0x10>)
 8000966:	f000 ff02 	bl	800176e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000268 	.word	0x20000268

08000974 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000978:	4802      	ldr	r0, [pc, #8]	@ (8000984 <USART1_IRQHandler+0x10>)
 800097a:	f003 fbcf 	bl	800411c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000e0 	.word	0x200000e0

08000988 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	if (huart==&huart1){ //Lorsque l'on recoit la réponse en DMA
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a06      	ldr	r2, [pc, #24]	@ (80009ac <HAL_UART_RxCpltCallback+0x24>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d105      	bne.n	80009a4 <HAL_UART_RxCpltCallback+0x1c>
		//Normalement en DMA
		printf(">%hhn\r\n",(uint8_t*)Lidar_byte);
 8000998:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <HAL_UART_RxCpltCallback+0x28>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <HAL_UART_RxCpltCallback+0x2c>)
 80009a0:	f005 f870 	bl	8005a84 <iprintf>
		//HAL_UART_Receive_DMA(&huart1, (uint8_t*)Lidar_byte, 2);
	}
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000e0 	.word	0x200000e0
 80009b0:	20000084 	.word	0x20000084
 80009b4:	0800684c 	.word	0x0800684c

080009b8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	if (huart==&huart1){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_UART_TxCpltCallback+0x34>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d105      	bne.n	80009d4 <HAL_UART_TxCpltCallback+0x1c>
		printf("Command send: DONE\r\n");
 80009c8:	4809      	ldr	r0, [pc, #36]	@ (80009f0 <HAL_UART_TxCpltCallback+0x38>)
 80009ca:	f005 f8c3 	bl	8005b54 <puts>
		irq_TX_completed=1;
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <HAL_UART_TxCpltCallback+0x3c>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
	}
	if (huart==&huart2){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <HAL_UART_TxCpltCallback+0x40>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d102      	bne.n	80009e2 <HAL_UART_TxCpltCallback+0x2a>
		//Lorsque l'on finit l'envoie du message vers le terminal
		irq_TX_completed=1;
 80009dc:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <HAL_UART_TxCpltCallback+0x3c>)
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
	}

}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200000e0 	.word	0x200000e0
 80009f0:	08006854 	.word	0x08006854
 80009f4:	2000008c 	.word	0x2000008c
 80009f8:	20000174 	.word	0x20000174

080009fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e00a      	b.n	8000a24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a0e:	f3af 8000 	nop.w
 8000a12:	4601      	mov	r1, r0
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	60ba      	str	r2, [r7, #8]
 8000a1a:	b2ca      	uxtb	r2, r1
 8000a1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbf0      	blt.n	8000a0e <_read+0x12>
  }

  return len;
 8000a2c:	687b      	ldr	r3, [r7, #4]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <_isatty>:

int _isatty(int file)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa8:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <_sbrk+0x5c>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <_sbrk+0x60>)
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <_sbrk+0x64>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <_sbrk+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d207      	bcs.n	8000ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad0:	f005 f850 	bl	8005b74 <__errno>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ade:	e009      	b.n	8000af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a05      	ldr	r2, [pc, #20]	@ (8000b04 <_sbrk+0x64>)
 8000af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20008000 	.word	0x20008000
 8000b00:	00000400 	.word	0x00000400
 8000b04:	20000090 	.word	0x20000090
 8000b08:	20000478 	.word	0x20000478

08000b0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	@ 0x38
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
 8000b5e:	615a      	str	r2, [r3, #20]
 8000b60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b62:	4b2d      	ldr	r3, [pc, #180]	@ (8000c18 <MX_TIM2_Init+0xe8>)
 8000b64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c18 <MX_TIM2_Init+0xe8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b29      	ldr	r3, [pc, #164]	@ (8000c18 <MX_TIM2_Init+0xe8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 169999;
 8000b76:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <MX_TIM2_Init+0xe8>)
 8000b78:	4a28      	ldr	r2, [pc, #160]	@ (8000c1c <MX_TIM2_Init+0xec>)
 8000b7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7c:	4b26      	ldr	r3, [pc, #152]	@ (8000c18 <MX_TIM2_Init+0xe8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b82:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <MX_TIM2_Init+0xe8>)
 8000b84:	2280      	movs	r2, #128	@ 0x80
 8000b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b88:	4823      	ldr	r0, [pc, #140]	@ (8000c18 <MX_TIM2_Init+0xe8>)
 8000b8a:	f002 f8ab 	bl	8002ce4 <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b94:	f7ff fe75 	bl	8000882 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481c      	ldr	r0, [pc, #112]	@ (8000c18 <MX_TIM2_Init+0xe8>)
 8000ba6:	f002 fbcd 	bl	8003344 <HAL_TIM_ConfigClockSource>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000bb0:	f7ff fe67 	bl	8000882 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bb4:	4818      	ldr	r0, [pc, #96]	@ (8000c18 <MX_TIM2_Init+0xe8>)
 8000bb6:	f002 f94f 	bl	8002e58 <HAL_TIM_PWM_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bc0:	f7ff fe5f 	bl	8000882 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4811      	ldr	r0, [pc, #68]	@ (8000c18 <MX_TIM2_Init+0xe8>)
 8000bd4:	f003 f904 	bl	8003de0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bde:	f7ff fe50 	bl	8000882 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be2:	2360      	movs	r3, #96	@ 0x60
 8000be4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 85000;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <MX_TIM2_Init+0xf0>)
 8000be8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4807      	ldr	r0, [pc, #28]	@ (8000c18 <MX_TIM2_Init+0xe8>)
 8000bfa:	f002 fa8f 	bl	800311c <HAL_TIM_PWM_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c04:	f7ff fe3d 	bl	8000882 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c08:	4803      	ldr	r0, [pc, #12]	@ (8000c18 <MX_TIM2_Init+0xe8>)
 8000c0a:	f000 f829 	bl	8000c60 <HAL_TIM_MspPostInit>

}
 8000c0e:	bf00      	nop
 8000c10:	3738      	adds	r7, #56	@ 0x38
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000094 	.word	0x20000094
 8000c1c:	0002980f 	.word	0x0002980f
 8000c20:	00014c08 	.word	0x00014c08

08000c24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c34:	d10b      	bne.n	8000c4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_TIM_Base_MspInit+0x38>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3a:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <HAL_TIM_Base_MspInit+0x38>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_TIM_Base_MspInit+0x38>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c4e:	bf00      	nop
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000

08000c60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c80:	d11b      	bne.n	8000cba <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <HAL_TIM_MspPostInit+0x64>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c86:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc4 <HAL_TIM_MspPostInit+0x64>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <HAL_TIM_MspPostInit+0x64>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin;
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIDAR_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4804      	ldr	r0, [pc, #16]	@ (8000cc8 <HAL_TIM_MspPostInit+0x68>)
 8000cb6:	f000 fea9 	bl	8001a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3720      	adds	r7, #32
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48000400 	.word	0x48000400

08000ccc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000cd2:	4a23      	ldr	r2, [pc, #140]	@ (8000d60 <MX_USART1_UART_Init+0x94>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 128000;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000cd8:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8000cdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d08:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d14:	4811      	ldr	r0, [pc, #68]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000d16:	f003 f8e5 	bl	8003ee4 <HAL_UART_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d20:	f7ff fdaf 	bl	8000882 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d24:	2100      	movs	r1, #0
 8000d26:	480d      	ldr	r0, [pc, #52]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000d28:	f004 fd1f 	bl	800576a <HAL_UARTEx_SetTxFifoThreshold>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d32:	f7ff fda6 	bl	8000882 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4808      	ldr	r0, [pc, #32]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000d3a:	f004 fd54 	bl	80057e6 <HAL_UARTEx_SetRxFifoThreshold>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d44:	f7ff fd9d 	bl	8000882 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d48:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <MX_USART1_UART_Init+0x90>)
 8000d4a:	f004 fcd5 	bl	80056f8 <HAL_UARTEx_DisableFifoMode>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d54:	f7ff fd95 	bl	8000882 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200000e0 	.word	0x200000e0
 8000d60:	40013800 	.word	0x40013800

08000d64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d68:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000d6a:	4a23      	ldr	r2, [pc, #140]	@ (8000df8 <MX_USART2_UART_Init+0x94>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dac:	4811      	ldr	r0, [pc, #68]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000dae:	f003 f899 	bl	8003ee4 <HAL_UART_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000db8:	f7ff fd63 	bl	8000882 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000dc0:	f004 fcd3 	bl	800576a <HAL_UARTEx_SetTxFifoThreshold>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000dca:	f7ff fd5a 	bl	8000882 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4808      	ldr	r0, [pc, #32]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000dd2:	f004 fd08 	bl	80057e6 <HAL_UARTEx_SetRxFifoThreshold>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ddc:	f7ff fd51 	bl	8000882 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000de0:	4804      	ldr	r0, [pc, #16]	@ (8000df4 <MX_USART2_UART_Init+0x90>)
 8000de2:	f004 fc89 	bl	80056f8 <HAL_UARTEx_DisableFifoMode>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000dec:	f7ff fd49 	bl	8000882 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000174 	.word	0x20000174
 8000df8:	40004400 	.word	0x40004400

08000dfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b09c      	sub	sp, #112	@ 0x70
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	2244      	movs	r2, #68	@ 0x44
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fea1 	bl	8005b64 <memset>
  if(uartHandle->Instance==USART1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a81      	ldr	r2, [pc, #516]	@ (800102c <HAL_UART_MspInit+0x230>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	f040 8094 	bne.w	8000f56 <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fd62 	bl	8002904 <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e46:	f7ff fd1c 	bl	8000882 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e4a:	4b79      	ldr	r3, [pc, #484]	@ (8001030 <HAL_UART_MspInit+0x234>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e4e:	4a78      	ldr	r2, [pc, #480]	@ (8001030 <HAL_UART_MspInit+0x234>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e56:	4b76      	ldr	r3, [pc, #472]	@ (8001030 <HAL_UART_MspInit+0x234>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	4b73      	ldr	r3, [pc, #460]	@ (8001030 <HAL_UART_MspInit+0x234>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e66:	4a72      	ldr	r2, [pc, #456]	@ (8001030 <HAL_UART_MspInit+0x234>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6e:	4b70      	ldr	r3, [pc, #448]	@ (8001030 <HAL_UART_MspInit+0x234>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LIDAR_RXnTX_STM_Pin|LIDAR_TXnTRX_STM_Pin;
 8000e7a:	2330      	movs	r3, #48	@ 0x30
 8000e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e92:	4619      	mov	r1, r3
 8000e94:	4867      	ldr	r0, [pc, #412]	@ (8001034 <HAL_UART_MspInit+0x238>)
 8000e96:	f000 fdb9 	bl	8001a0c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000e9a:	4b67      	ldr	r3, [pc, #412]	@ (8001038 <HAL_UART_MspInit+0x23c>)
 8000e9c:	4a67      	ldr	r2, [pc, #412]	@ (800103c <HAL_UART_MspInit+0x240>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000ea0:	4b65      	ldr	r3, [pc, #404]	@ (8001038 <HAL_UART_MspInit+0x23c>)
 8000ea2:	2218      	movs	r2, #24
 8000ea4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea6:	4b64      	ldr	r3, [pc, #400]	@ (8001038 <HAL_UART_MspInit+0x23c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eac:	4b62      	ldr	r3, [pc, #392]	@ (8001038 <HAL_UART_MspInit+0x23c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb2:	4b61      	ldr	r3, [pc, #388]	@ (8001038 <HAL_UART_MspInit+0x23c>)
 8000eb4:	2280      	movs	r2, #128	@ 0x80
 8000eb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb8:	4b5f      	ldr	r3, [pc, #380]	@ (8001038 <HAL_UART_MspInit+0x23c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ebe:	4b5e      	ldr	r3, [pc, #376]	@ (8001038 <HAL_UART_MspInit+0x23c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ec4:	4b5c      	ldr	r3, [pc, #368]	@ (8001038 <HAL_UART_MspInit+0x23c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000eca:	4b5b      	ldr	r3, [pc, #364]	@ (8001038 <HAL_UART_MspInit+0x23c>)
 8000ecc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000ed0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ed2:	4859      	ldr	r0, [pc, #356]	@ (8001038 <HAL_UART_MspInit+0x23c>)
 8000ed4:	f000 fa68 	bl	80013a8 <HAL_DMA_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000ede:	f7ff fcd0 	bl	8000882 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a54      	ldr	r2, [pc, #336]	@ (8001038 <HAL_UART_MspInit+0x23c>)
 8000ee6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000eea:	4a53      	ldr	r2, [pc, #332]	@ (8001038 <HAL_UART_MspInit+0x23c>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8000ef0:	4b53      	ldr	r3, [pc, #332]	@ (8001040 <HAL_UART_MspInit+0x244>)
 8000ef2:	4a54      	ldr	r2, [pc, #336]	@ (8001044 <HAL_UART_MspInit+0x248>)
 8000ef4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000ef6:	4b52      	ldr	r3, [pc, #328]	@ (8001040 <HAL_UART_MspInit+0x244>)
 8000ef8:	2219      	movs	r2, #25
 8000efa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000efc:	4b50      	ldr	r3, [pc, #320]	@ (8001040 <HAL_UART_MspInit+0x244>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f02:	4b4f      	ldr	r3, [pc, #316]	@ (8001040 <HAL_UART_MspInit+0x244>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f08:	4b4d      	ldr	r3, [pc, #308]	@ (8001040 <HAL_UART_MspInit+0x244>)
 8000f0a:	2280      	movs	r2, #128	@ 0x80
 8000f0c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001040 <HAL_UART_MspInit+0x244>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f14:	4b4a      	ldr	r3, [pc, #296]	@ (8001040 <HAL_UART_MspInit+0x244>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f1a:	4b49      	ldr	r3, [pc, #292]	@ (8001040 <HAL_UART_MspInit+0x244>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f20:	4b47      	ldr	r3, [pc, #284]	@ (8001040 <HAL_UART_MspInit+0x244>)
 8000f22:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000f26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f28:	4845      	ldr	r0, [pc, #276]	@ (8001040 <HAL_UART_MspInit+0x244>)
 8000f2a:	f000 fa3d 	bl	80013a8 <HAL_DMA_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8000f34:	f7ff fca5 	bl	8000882 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a41      	ldr	r2, [pc, #260]	@ (8001040 <HAL_UART_MspInit+0x244>)
 8000f3c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000f3e:	4a40      	ldr	r2, [pc, #256]	@ (8001040 <HAL_UART_MspInit+0x244>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2025      	movs	r0, #37	@ 0x25
 8000f4a:	f000 f9f8 	bl	800133e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f4e:	2025      	movs	r0, #37	@ 0x25
 8000f50:	f000 fa0f 	bl	8001372 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f54:	e065      	b.n	8001022 <HAL_UART_MspInit+0x226>
  else if(uartHandle->Instance==USART2)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001048 <HAL_UART_MspInit+0x24c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d160      	bne.n	8001022 <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f68:	f107 0318 	add.w	r3, r7, #24
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fcc9 	bl	8002904 <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_UART_MspInit+0x180>
      Error_Handler();
 8000f78:	f7ff fc83 	bl	8000882 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001030 <HAL_UART_MspInit+0x234>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f80:	4a2b      	ldr	r2, [pc, #172]	@ (8001030 <HAL_UART_MspInit+0x234>)
 8000f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <HAL_UART_MspInit+0x234>)
 8000f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f94:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <HAL_UART_MspInit+0x234>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f98:	4a25      	ldr	r2, [pc, #148]	@ (8001030 <HAL_UART_MspInit+0x234>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa0:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <HAL_UART_MspInit+0x234>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000fac:	230c      	movs	r3, #12
 8000fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fca:	f000 fd1f 	bl	8001a0c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8000fce:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <HAL_UART_MspInit+0x250>)
 8000fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001050 <HAL_UART_MspInit+0x254>)
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <HAL_UART_MspInit+0x250>)
 8000fd6:	221b      	movs	r2, #27
 8000fd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <HAL_UART_MspInit+0x250>)
 8000fdc:	2210      	movs	r2, #16
 8000fde:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <HAL_UART_MspInit+0x250>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	@ (800104c <HAL_UART_MspInit+0x250>)
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <HAL_UART_MspInit+0x250>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	@ (800104c <HAL_UART_MspInit+0x250>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <HAL_UART_MspInit+0x250>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	@ (800104c <HAL_UART_MspInit+0x250>)
 8001000:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001004:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001006:	4811      	ldr	r0, [pc, #68]	@ (800104c <HAL_UART_MspInit+0x250>)
 8001008:	f000 f9ce 	bl	80013a8 <HAL_DMA_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_UART_MspInit+0x21a>
      Error_Handler();
 8001012:	f7ff fc36 	bl	8000882 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a0c      	ldr	r2, [pc, #48]	@ (800104c <HAL_UART_MspInit+0x250>)
 800101a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800101c:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <HAL_UART_MspInit+0x250>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001022:	bf00      	nop
 8001024:	3770      	adds	r7, #112	@ 0x70
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40013800 	.word	0x40013800
 8001030:	40021000 	.word	0x40021000
 8001034:	48000800 	.word	0x48000800
 8001038:	20000208 	.word	0x20000208
 800103c:	4002001c 	.word	0x4002001c
 8001040:	20000268 	.word	0x20000268
 8001044:	40020030 	.word	0x40020030
 8001048:	40004400 	.word	0x40004400
 800104c:	200002c8 	.word	0x200002c8
 8001050:	40020008 	.word	0x40020008

08001054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001054:	480d      	ldr	r0, [pc, #52]	@ (800108c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001056:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001058:	f7ff fd58 	bl	8000b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <LoopForever+0x6>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	@ (8001094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <LoopForever+0xe>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	@ (80010a0 <LoopForever+0x16>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f004 fd7d 	bl	8005b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001086:	f7ff fb67 	bl	8000758 <main>

0800108a <LoopForever>:

LoopForever:
    b LoopForever
 800108a:	e7fe      	b.n	800108a <LoopForever>
  ldr   r0, =_estack
 800108c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001098:	080068ec 	.word	0x080068ec
  ldr r2, =_sbss
 800109c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010a0:	20000478 	.word	0x20000478

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>

080010a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b0:	2003      	movs	r0, #3
 80010b2:	f000 f939 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b6:	2000      	movs	r0, #0
 80010b8:	f000 f80e 	bl	80010d8 <HAL_InitTick>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	e001      	b.n	80010cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010c8:	f7ff fbe2 	bl	8000890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010cc:	79fb      	ldrb	r3, [r7, #7]

}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010e4:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <HAL_InitTick+0x68>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d022      	beq.n	8001132 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_InitTick+0x6c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_InitTick+0x68>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f944 	bl	800138e <HAL_SYSTICK_Config>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10f      	bne.n	800112c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	d809      	bhi.n	8001126 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001112:	2200      	movs	r2, #0
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800111a:	f000 f910 	bl	800133e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <HAL_InitTick+0x70>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e007      	b.n	8001136 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	e004      	b.n	8001136 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e001      	b.n	8001136 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000008 	.word	0x20000008
 8001144:	20000000 	.word	0x20000000
 8001148:	20000004 	.word	0x20000004

0800114c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_IncTick+0x1c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <HAL_IncTick+0x20>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4413      	add	r3, r2
 800115a:	4a03      	ldr	r2, [pc, #12]	@ (8001168 <HAL_IncTick+0x1c>)
 800115c:	6013      	str	r3, [r2, #0]
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	20000328 	.word	0x20000328
 800116c:	20000008 	.word	0x20000008

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000328 	.word	0x20000328

08001188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ba:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	60d3      	str	r3, [r2, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	db0b      	blt.n	8001216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f003 021f 	and.w	r2, r3, #31
 8001204:	4907      	ldr	r1, [pc, #28]	@ (8001224 <__NVIC_EnableIRQ+0x38>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	2001      	movs	r0, #1
 800120e:	fa00 f202 	lsl.w	r2, r0, r2
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	@ (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	@ (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	@ 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	@ 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f4:	d301      	bcc.n	80012fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00f      	b.n	800131a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <SysTick_Config+0x40>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001302:	210f      	movs	r1, #15
 8001304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001308:	f7ff ff8e 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <SysTick_Config+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <SysTick_Config+0x40>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff29 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff40 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff90 	bl	800127c <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5f 	bl	8001228 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff33 	bl	80011ec <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa4 	bl	80012e4 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e08d      	b.n	80014d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b47      	ldr	r3, [pc, #284]	@ (80014e0 <HAL_DMA_Init+0x138>)
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d80f      	bhi.n	80013e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b45      	ldr	r3, [pc, #276]	@ (80014e4 <HAL_DMA_Init+0x13c>)
 80013ce:	4413      	add	r3, r2
 80013d0:	4a45      	ldr	r2, [pc, #276]	@ (80014e8 <HAL_DMA_Init+0x140>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	091b      	lsrs	r3, r3, #4
 80013d8:	009a      	lsls	r2, r3, #2
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a42      	ldr	r2, [pc, #264]	@ (80014ec <HAL_DMA_Init+0x144>)
 80013e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80013e4:	e00e      	b.n	8001404 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b40      	ldr	r3, [pc, #256]	@ (80014f0 <HAL_DMA_Init+0x148>)
 80013ee:	4413      	add	r3, r2
 80013f0:	4a3d      	ldr	r2, [pc, #244]	@ (80014e8 <HAL_DMA_Init+0x140>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	009a      	lsls	r2, r3, #2
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a3c      	ldr	r2, [pc, #240]	@ (80014f4 <HAL_DMA_Init+0x14c>)
 8001402:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2202      	movs	r2, #2
 8001408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800141a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800141e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fa76 	bl	8001948 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001464:	d102      	bne.n	800146c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001480:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d010      	beq.n	80014ac <HAL_DMA_Init+0x104>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b04      	cmp	r3, #4
 8001490:	d80c      	bhi.n	80014ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fa96 	bl	80019c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	e008      	b.n	80014be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40020407 	.word	0x40020407
 80014e4:	bffdfff8 	.word	0xbffdfff8
 80014e8:	cccccccd 	.word	0xcccccccd
 80014ec:	40020000 	.word	0x40020000
 80014f0:	bffdfbf8 	.word	0xbffdfbf8
 80014f4:	40020400 	.word	0x40020400

080014f8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_DMA_Start_IT+0x20>
 8001514:	2302      	movs	r3, #2
 8001516:	e066      	b.n	80015e6 <HAL_DMA_Start_IT+0xee>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b01      	cmp	r3, #1
 800152a:	d155      	bne.n	80015d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	68b9      	ldr	r1, [r7, #8]
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 f9bb 	bl	80018cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	2b00      	cmp	r3, #0
 800155c:	d008      	beq.n	8001570 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 020e 	orr.w	r2, r2, #14
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	e00f      	b.n	8001590 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0204 	bic.w	r2, r2, #4
 800157e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 020a 	orr.w	r2, r2, #10
 800158e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d007      	beq.n	80015ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0201 	orr.w	r2, r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	e005      	b.n	80015e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015e0:	2302      	movs	r3, #2
 80015e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d005      	beq.n	8001612 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2204      	movs	r2, #4
 800160a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	e037      	b.n	8001682 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 020e 	bic.w	r2, r2, #14
 8001620:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800162c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001630:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	f003 021f 	and.w	r2, r3, #31
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f202 	lsl.w	r2, r1, r2
 8001654:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800165e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00c      	beq.n	8001682 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001672:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001676:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001680:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d00d      	beq.n	80016d4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2204      	movs	r2, #4
 80016bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	e047      	b.n	8001764 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 020e 	bic.w	r2, r2, #14
 80016e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0201 	bic.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001702:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001708:	f003 021f 	and.w	r2, r3, #31
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	2101      	movs	r1, #1
 8001712:	fa01 f202 	lsl.w	r2, r1, r2
 8001716:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001720:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00c      	beq.n	8001744 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001734:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001738:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001742:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	4798      	blx	r3
    }
  }
  return status;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	2204      	movs	r2, #4
 8001790:	409a      	lsls	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d026      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x7a>
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d021      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0320 	and.w	r3, r3, #32
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0204 	bic.w	r2, r2, #4
 80017c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f003 021f 	and.w	r2, r3, #31
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	2104      	movs	r1, #4
 80017d0:	fa01 f202 	lsl.w	r2, r1, r2
 80017d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d071      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017e6:	e06c      	b.n	80018c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	2202      	movs	r2, #2
 80017f2:	409a      	lsls	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d02e      	beq.n	800185a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d029      	beq.n	800185a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0320 	and.w	r3, r3, #32
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10b      	bne.n	800182c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 020a 	bic.w	r2, r2, #10
 8001822:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	2102      	movs	r1, #2
 800183a:	fa01 f202 	lsl.w	r2, r1, r2
 800183e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d038      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001858:	e033      	b.n	80018c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	2208      	movs	r2, #8
 8001864:	409a      	lsls	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4013      	ands	r3, r2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d02a      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d025      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 020e 	bic.w	r2, r2, #14
 8001886:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	2101      	movs	r1, #1
 8001896:	fa01 f202 	lsl.w	r2, r1, r2
 800189a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018c2:	bf00      	nop
 80018c4:	bf00      	nop
}
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d004      	beq.n	80018f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018f4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	f003 021f 	and.w	r2, r3, #31
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	2101      	movs	r1, #1
 8001904:	fa01 f202 	lsl.w	r2, r1, r2
 8001908:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b10      	cmp	r3, #16
 8001918:	d108      	bne.n	800192c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800192a:	e007      	b.n	800193c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	60da      	str	r2, [r3, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001958:	429a      	cmp	r2, r3
 800195a:	d802      	bhi.n	8001962 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800195c:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e001      	b.n	8001966 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001962:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001964:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	3b08      	subs	r3, #8
 8001972:	4a12      	ldr	r2, [pc, #72]	@ (80019bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	009a      	lsls	r2, r3, #2
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4413      	add	r3, r2
 8001988:	461a      	mov	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a0b      	ldr	r2, [pc, #44]	@ (80019c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001992:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 031f 	and.w	r3, r3, #31
 800199a:	2201      	movs	r2, #1
 800199c:	409a      	lsls	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40020407 	.word	0x40020407
 80019b4:	40020800 	.word	0x40020800
 80019b8:	40020820 	.word	0x40020820
 80019bc:	cccccccd 	.word	0xcccccccd
 80019c0:	40020880 	.word	0x40020880

080019c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	461a      	mov	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019e6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	2201      	movs	r2, #1
 80019f2:	409a      	lsls	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	1000823f 	.word	0x1000823f
 8001a08:	40020940 	.word	0x40020940

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a1a:	e15a      	b.n	8001cd2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2101      	movs	r1, #1
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 814c 	beq.w	8001ccc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d005      	beq.n	8001a4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d130      	bne.n	8001aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a82:	2201      	movs	r2, #1
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	f003 0201 	and.w	r2, r3, #1
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d017      	beq.n	8001aea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d123      	bne.n	8001b3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	08da      	lsrs	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3208      	adds	r2, #8
 8001b38:	6939      	ldr	r1, [r7, #16]
 8001b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0203 	and.w	r2, r3, #3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80a6 	beq.w	8001ccc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b80:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf0 <HAL_GPIO_Init+0x2e4>)
 8001b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b84:	4a5a      	ldr	r2, [pc, #360]	@ (8001cf0 <HAL_GPIO_Init+0x2e4>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b8c:	4b58      	ldr	r3, [pc, #352]	@ (8001cf0 <HAL_GPIO_Init+0x2e4>)
 8001b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b98:	4a56      	ldr	r2, [pc, #344]	@ (8001cf4 <HAL_GPIO_Init+0x2e8>)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bc2:	d01f      	beq.n	8001c04 <HAL_GPIO_Init+0x1f8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf8 <HAL_GPIO_Init+0x2ec>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d019      	beq.n	8001c00 <HAL_GPIO_Init+0x1f4>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a4b      	ldr	r2, [pc, #300]	@ (8001cfc <HAL_GPIO_Init+0x2f0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d013      	beq.n	8001bfc <HAL_GPIO_Init+0x1f0>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a4a      	ldr	r2, [pc, #296]	@ (8001d00 <HAL_GPIO_Init+0x2f4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d00d      	beq.n	8001bf8 <HAL_GPIO_Init+0x1ec>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a49      	ldr	r2, [pc, #292]	@ (8001d04 <HAL_GPIO_Init+0x2f8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d007      	beq.n	8001bf4 <HAL_GPIO_Init+0x1e8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a48      	ldr	r2, [pc, #288]	@ (8001d08 <HAL_GPIO_Init+0x2fc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d101      	bne.n	8001bf0 <HAL_GPIO_Init+0x1e4>
 8001bec:	2305      	movs	r3, #5
 8001bee:	e00a      	b.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001bf0:	2306      	movs	r3, #6
 8001bf2:	e008      	b.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	e006      	b.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e004      	b.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e002      	b.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001c04:	2300      	movs	r3, #0
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	f002 0203 	and.w	r2, r2, #3
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	4093      	lsls	r3, r2
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c16:	4937      	ldr	r1, [pc, #220]	@ (8001cf4 <HAL_GPIO_Init+0x2e8>)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c24:	4b39      	ldr	r3, [pc, #228]	@ (8001d0c <HAL_GPIO_Init+0x300>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c48:	4a30      	ldr	r2, [pc, #192]	@ (8001d0c <HAL_GPIO_Init+0x300>)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d0c <HAL_GPIO_Init+0x300>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c72:	4a26      	ldr	r2, [pc, #152]	@ (8001d0c <HAL_GPIO_Init+0x300>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c78:	4b24      	ldr	r3, [pc, #144]	@ (8001d0c <HAL_GPIO_Init+0x300>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d0c <HAL_GPIO_Init+0x300>)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <HAL_GPIO_Init+0x300>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cc6:	4a11      	ldr	r2, [pc, #68]	@ (8001d0c <HAL_GPIO_Init+0x300>)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f47f ae9d 	bne.w	8001a1c <HAL_GPIO_Init+0x10>
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
 8001ce6:	371c      	adds	r7, #28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	48000800 	.word	0x48000800
 8001d00:	48000c00 	.word	0x48000c00
 8001d04:	48001000 	.word	0x48001000
 8001d08:	48001400 	.word	0x48001400
 8001d0c:	40010400 	.word	0x40010400

08001d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	807b      	strh	r3, [r7, #2]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d20:	787b      	ldrb	r3, [r7, #1]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d141      	bne.n	8001dd2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d4e:	4b4b      	ldr	r3, [pc, #300]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d5a:	d131      	bne.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d5c:	4b47      	ldr	r3, [pc, #284]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d62:	4a46      	ldr	r2, [pc, #280]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d6c:	4b43      	ldr	r3, [pc, #268]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d74:	4a41      	ldr	r2, [pc, #260]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d7c:	4b40      	ldr	r3, [pc, #256]	@ (8001e80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2232      	movs	r2, #50	@ 0x32
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	4a3f      	ldr	r2, [pc, #252]	@ (8001e84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d88:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8c:	0c9b      	lsrs	r3, r3, #18
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d92:	e002      	b.n	8001d9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d9a:	4b38      	ldr	r3, [pc, #224]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001da6:	d102      	bne.n	8001dae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f2      	bne.n	8001d94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dae:	4b33      	ldr	r3, [pc, #204]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dba:	d158      	bne.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e057      	b.n	8001e70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001dd0:	e04d      	b.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dd8:	d141      	bne.n	8001e5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dda:	4b28      	ldr	r3, [pc, #160]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001de6:	d131      	bne.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001de8:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dee:	4a23      	ldr	r2, [pc, #140]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df8:	4b20      	ldr	r3, [pc, #128]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e00:	4a1e      	ldr	r2, [pc, #120]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2232      	movs	r2, #50	@ 0x32
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	4a1c      	ldr	r2, [pc, #112]	@ (8001e84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	0c9b      	lsrs	r3, r3, #18
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e1e:	e002      	b.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e26:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e32:	d102      	bne.n	8001e3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f2      	bne.n	8001e20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e46:	d112      	bne.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e011      	b.n	8001e70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e5c:	e007      	b.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e66:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	20000000 	.word	0x20000000
 8001e84:	431bde83 	.word	0x431bde83

08001e88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4a04      	ldr	r2, [pc, #16]	@ (8001ea4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e96:	6093      	str	r3, [r2, #8]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40007000 	.word	0x40007000

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e2fe      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d075      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec6:	4b97      	ldr	r3, [pc, #604]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ed0:	4b94      	ldr	r3, [pc, #592]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b0c      	cmp	r3, #12
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3e>
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d002      	beq.n	8001eec <HAL_RCC_OscConfig+0x44>
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d10b      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	4b8d      	ldr	r3, [pc, #564]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d05b      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x108>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d157      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e2d9      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f0c:	d106      	bne.n	8001f1c <HAL_RCC_OscConfig+0x74>
 8001f0e:	4b85      	ldr	r3, [pc, #532]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a84      	ldr	r2, [pc, #528]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e01d      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x98>
 8001f26:	4b7f      	ldr	r3, [pc, #508]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b7c      	ldr	r3, [pc, #496]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7b      	ldr	r2, [pc, #492]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f40:	4b78      	ldr	r3, [pc, #480]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a77      	ldr	r2, [pc, #476]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b75      	ldr	r3, [pc, #468]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a74      	ldr	r2, [pc, #464]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff f906 	bl	8001170 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff f902 	bl	8001170 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	@ 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e29e      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0xc0>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff f8f2 	bl	8001170 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff f8ee 	bl	8001170 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	@ 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e28a      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fa2:	4b60      	ldr	r3, [pc, #384]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0xe8>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d075      	beq.n	80020aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fbe:	4b59      	ldr	r3, [pc, #356]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc8:	4b56      	ldr	r3, [pc, #344]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b0c      	cmp	r3, #12
 8001fd6:	d102      	bne.n	8001fde <HAL_RCC_OscConfig+0x136>
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d002      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d11f      	bne.n	8002024 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe4:	4b4f      	ldr	r3, [pc, #316]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_OscConfig+0x154>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e25d      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b49      	ldr	r3, [pc, #292]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	4946      	ldr	r1, [pc, #280]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002010:	4b45      	ldr	r3, [pc, #276]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff f85f 	bl	80010d8 <HAL_InitTick>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d043      	beq.n	80020a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e249      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d023      	beq.n	8002074 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202c:	4b3d      	ldr	r3, [pc, #244]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a3c      	ldr	r2, [pc, #240]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8002032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff f89a 	bl	8001170 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff f896 	bl	8001170 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e232      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002052:	4b34      	ldr	r3, [pc, #208]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205e:	4b31      	ldr	r3, [pc, #196]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	061b      	lsls	r3, r3, #24
 800206c:	492d      	ldr	r1, [pc, #180]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
 8002072:	e01a      	b.n	80020aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002074:	4b2b      	ldr	r3, [pc, #172]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2a      	ldr	r2, [pc, #168]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 800207a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800207e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7ff f876 	bl	8001170 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002088:	f7ff f872 	bl	8001170 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e20e      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800209a:	4b22      	ldr	r3, [pc, #136]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x1e0>
 80020a6:	e000      	b.n	80020aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d041      	beq.n	800213a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d01c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020be:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 80020c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c4:	4a17      	ldr	r2, [pc, #92]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ce:	f7ff f84f 	bl	8001170 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff f84b 	bl	8001170 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e1e7      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 80020ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0ef      	beq.n	80020d6 <HAL_RCC_OscConfig+0x22e>
 80020f6:	e020      	b.n	800213a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 80020fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020fe:	4a09      	ldr	r2, [pc, #36]	@ (8002124 <HAL_RCC_OscConfig+0x27c>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7ff f832 	bl	8001170 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800210e:	e00d      	b.n	800212c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff f82e 	bl	8001170 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d906      	bls.n	800212c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1ca      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800212c:	4b8c      	ldr	r3, [pc, #560]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 800212e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1ea      	bne.n	8002110 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80a6 	beq.w	8002294 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002148:	2300      	movs	r3, #0
 800214a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800214c:	4b84      	ldr	r3, [pc, #528]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_OscConfig+0x2b4>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x2b6>
 800215c:	2300      	movs	r3, #0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00d      	beq.n	800217e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	4b7f      	ldr	r3, [pc, #508]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	4a7e      	ldr	r2, [pc, #504]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800216c:	6593      	str	r3, [r2, #88]	@ 0x58
 800216e:	4b7c      	ldr	r3, [pc, #496]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800217a:	2301      	movs	r3, #1
 800217c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217e:	4b79      	ldr	r3, [pc, #484]	@ (8002364 <HAL_RCC_OscConfig+0x4bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d118      	bne.n	80021bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800218a:	4b76      	ldr	r3, [pc, #472]	@ (8002364 <HAL_RCC_OscConfig+0x4bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a75      	ldr	r2, [pc, #468]	@ (8002364 <HAL_RCC_OscConfig+0x4bc>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002196:	f7fe ffeb 	bl	8001170 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219e:	f7fe ffe7 	bl	8001170 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e183      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002364 <HAL_RCC_OscConfig+0x4bc>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d108      	bne.n	80021d6 <HAL_RCC_OscConfig+0x32e>
 80021c4:	4b66      	ldr	r3, [pc, #408]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ca:	4a65      	ldr	r2, [pc, #404]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021d4:	e024      	b.n	8002220 <HAL_RCC_OscConfig+0x378>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b05      	cmp	r3, #5
 80021dc:	d110      	bne.n	8002200 <HAL_RCC_OscConfig+0x358>
 80021de:	4b60      	ldr	r3, [pc, #384]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e4:	4a5e      	ldr	r2, [pc, #376]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021fe:	e00f      	b.n	8002220 <HAL_RCC_OscConfig+0x378>
 8002200:	4b57      	ldr	r3, [pc, #348]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002206:	4a56      	ldr	r2, [pc, #344]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002210:	4b53      	ldr	r3, [pc, #332]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002216:	4a52      	ldr	r2, [pc, #328]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d016      	beq.n	8002256 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002228:	f7fe ffa2 	bl	8001170 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800222e:	e00a      	b.n	8002246 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7fe ff9e 	bl	8001170 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e138      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002246:	4b46      	ldr	r3, [pc, #280]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 8002248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0ed      	beq.n	8002230 <HAL_RCC_OscConfig+0x388>
 8002254:	e015      	b.n	8002282 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7fe ff8b 	bl	8001170 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7fe ff87 	bl	8001170 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e121      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002274:	4b3a      	ldr	r3, [pc, #232]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ed      	bne.n	800225e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002282:	7ffb      	ldrb	r3, [r7, #31]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002288:	4b35      	ldr	r3, [pc, #212]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228c:	4a34      	ldr	r2, [pc, #208]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 800228e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002292:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b00      	cmp	r3, #0
 800229e:	d03c      	beq.n	800231a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 80022aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b8:	f7fe ff5a 	bl	8001170 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022c0:	f7fe ff56 	bl	8001170 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e0f2      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022d2:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 80022d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ef      	beq.n	80022c0 <HAL_RCC_OscConfig+0x418>
 80022e0:	e01b      	b.n	800231a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 80022e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f2:	f7fe ff3d 	bl	8001170 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022fa:	f7fe ff39 	bl	8001170 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e0d5      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800230c:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 800230e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1ef      	bne.n	80022fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80c9 	beq.w	80024b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002324:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b0c      	cmp	r3, #12
 800232e:	f000 8083 	beq.w	8002438 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d15e      	bne.n	80023f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233a:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a08      	ldr	r2, [pc, #32]	@ (8002360 <HAL_RCC_OscConfig+0x4b8>)
 8002340:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe ff13 	bl	8001170 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800234c:	e00c      	b.n	8002368 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234e:	f7fe ff0f 	bl	8001170 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d905      	bls.n	8002368 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0ab      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
 8002360:	40021000 	.word	0x40021000
 8002364:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002368:	4b55      	ldr	r3, [pc, #340]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ec      	bne.n	800234e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002374:	4b52      	ldr	r3, [pc, #328]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	4b52      	ldr	r3, [pc, #328]	@ (80024c4 <HAL_RCC_OscConfig+0x61c>)
 800237a:	4013      	ands	r3, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6a11      	ldr	r1, [r2, #32]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002384:	3a01      	subs	r2, #1
 8002386:	0112      	lsls	r2, r2, #4
 8002388:	4311      	orrs	r1, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800238e:	0212      	lsls	r2, r2, #8
 8002390:	4311      	orrs	r1, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002396:	0852      	lsrs	r2, r2, #1
 8002398:	3a01      	subs	r2, #1
 800239a:	0552      	lsls	r2, r2, #21
 800239c:	4311      	orrs	r1, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023a2:	0852      	lsrs	r2, r2, #1
 80023a4:	3a01      	subs	r2, #1
 80023a6:	0652      	lsls	r2, r2, #25
 80023a8:	4311      	orrs	r1, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023ae:	06d2      	lsls	r2, r2, #27
 80023b0:	430a      	orrs	r2, r1
 80023b2:	4943      	ldr	r1, [pc, #268]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b8:	4b41      	ldr	r3, [pc, #260]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a40      	ldr	r2, [pc, #256]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 80023be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023c4:	4b3e      	ldr	r3, [pc, #248]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a3d      	ldr	r2, [pc, #244]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 80023ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fece 	bl	8001170 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe feca 	bl	8001170 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e066      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ea:	4b35      	ldr	r3, [pc, #212]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x530>
 80023f6:	e05e      	b.n	80024b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f8:	4b31      	ldr	r3, [pc, #196]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a30      	ldr	r2, [pc, #192]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 80023fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe feb4 	bl	8001170 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe feb0 	bl	8001170 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e04c      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241e:	4b28      	ldr	r3, [pc, #160]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800242a:	4b25      	ldr	r3, [pc, #148]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	4924      	ldr	r1, [pc, #144]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 8002430:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <HAL_RCC_OscConfig+0x620>)
 8002432:	4013      	ands	r3, r2
 8002434:	60cb      	str	r3, [r1, #12]
 8002436:	e03e      	b.n	80024b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e039      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002444:	4b1e      	ldr	r3, [pc, #120]	@ (80024c0 <HAL_RCC_OscConfig+0x618>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0203 	and.w	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	429a      	cmp	r2, r3
 8002456:	d12c      	bne.n	80024b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	3b01      	subs	r3, #1
 8002464:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d123      	bne.n	80024b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002474:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d11b      	bne.n	80024b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d113      	bne.n	80024b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	3b01      	subs	r3, #1
 8002498:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	3b01      	subs	r3, #1
 80024ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3720      	adds	r7, #32
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	019f800c 	.word	0x019f800c
 80024c8:	feeefffc 	.word	0xfeeefffc

080024cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e11e      	b.n	8002722 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e4:	4b91      	ldr	r3, [pc, #580]	@ (800272c <HAL_RCC_ClockConfig+0x260>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d910      	bls.n	8002514 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b8e      	ldr	r3, [pc, #568]	@ (800272c <HAL_RCC_ClockConfig+0x260>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 020f 	bic.w	r2, r3, #15
 80024fa:	498c      	ldr	r1, [pc, #560]	@ (800272c <HAL_RCC_ClockConfig+0x260>)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b8a      	ldr	r3, [pc, #552]	@ (800272c <HAL_RCC_ClockConfig+0x260>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e106      	b.n	8002722 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d073      	beq.n	8002608 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d129      	bne.n	800257c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002528:	4b81      	ldr	r3, [pc, #516]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0f4      	b.n	8002722 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002538:	f000 f99e 	bl	8002878 <RCC_GetSysClockFreqFromPLLSource>
 800253c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4a7c      	ldr	r2, [pc, #496]	@ (8002734 <HAL_RCC_ClockConfig+0x268>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d93f      	bls.n	80025c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002546:	4b7a      	ldr	r3, [pc, #488]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800255a:	2b00      	cmp	r3, #0
 800255c:	d033      	beq.n	80025c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002562:	2b00      	cmp	r3, #0
 8002564:	d12f      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002566:	4b72      	ldr	r3, [pc, #456]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800256e:	4a70      	ldr	r2, [pc, #448]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 8002570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002574:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002576:	2380      	movs	r3, #128	@ 0x80
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e024      	b.n	80025c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d107      	bne.n	8002594 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002584:	4b6a      	ldr	r3, [pc, #424]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0c6      	b.n	8002722 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002594:	4b66      	ldr	r3, [pc, #408]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0be      	b.n	8002722 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80025a4:	f000 f8ce 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4a61      	ldr	r2, [pc, #388]	@ (8002734 <HAL_RCC_ClockConfig+0x268>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d909      	bls.n	80025c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025ba:	4a5d      	ldr	r2, [pc, #372]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 80025bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025c2:	2380      	movs	r3, #128	@ 0x80
 80025c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f023 0203 	bic.w	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4957      	ldr	r1, [pc, #348]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d8:	f7fe fdca 	bl	8001170 <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e0:	f7fe fdc6 	bl	8001170 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e095      	b.n	8002722 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 020c 	and.w	r2, r3, #12
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	429a      	cmp	r2, r3
 8002606:	d1eb      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d023      	beq.n	800265c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002620:	4b43      	ldr	r3, [pc, #268]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a42      	ldr	r2, [pc, #264]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 8002626:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800262a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002638:	4b3d      	ldr	r3, [pc, #244]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002640:	4a3b      	ldr	r2, [pc, #236]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 8002642:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002646:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002648:	4b39      	ldr	r3, [pc, #228]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4936      	ldr	r1, [pc, #216]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
 800265a:	e008      	b.n	800266e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b80      	cmp	r3, #128	@ 0x80
 8002660:	d105      	bne.n	800266e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002662:	4b33      	ldr	r3, [pc, #204]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4a32      	ldr	r2, [pc, #200]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 8002668:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800266c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800266e:	4b2f      	ldr	r3, [pc, #188]	@ (800272c <HAL_RCC_ClockConfig+0x260>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d21d      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267c:	4b2b      	ldr	r3, [pc, #172]	@ (800272c <HAL_RCC_ClockConfig+0x260>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 020f 	bic.w	r2, r3, #15
 8002684:	4929      	ldr	r1, [pc, #164]	@ (800272c <HAL_RCC_ClockConfig+0x260>)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800268c:	f7fe fd70 	bl	8001170 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	e00a      	b.n	80026aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	f7fe fd6c 	bl	8001170 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e03b      	b.n	8002722 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b20      	ldr	r3, [pc, #128]	@ (800272c <HAL_RCC_ClockConfig+0x260>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d1ed      	bne.n	8002694 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4917      	ldr	r1, [pc, #92]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e2:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	490f      	ldr	r1, [pc, #60]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026f6:	f000 f825 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 80026fa:	4602      	mov	r2, r0
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <HAL_RCC_ClockConfig+0x264>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	490c      	ldr	r1, [pc, #48]	@ (8002738 <HAL_RCC_ClockConfig+0x26c>)
 8002708:	5ccb      	ldrb	r3, [r1, r3]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	fa22 f303 	lsr.w	r3, r2, r3
 8002712:	4a0a      	ldr	r2, [pc, #40]	@ (800273c <HAL_RCC_ClockConfig+0x270>)
 8002714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002716:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <HAL_RCC_ClockConfig+0x274>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fcdc 	bl	80010d8 <HAL_InitTick>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40022000 	.word	0x40022000
 8002730:	40021000 	.word	0x40021000
 8002734:	04c4b400 	.word	0x04c4b400
 8002738:	08006868 	.word	0x08006868
 800273c:	20000000 	.word	0x20000000
 8002740:	20000004 	.word	0x20000004

08002744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800274a:	4b2c      	ldr	r3, [pc, #176]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b04      	cmp	r3, #4
 8002754:	d102      	bne.n	800275c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002756:	4b2a      	ldr	r3, [pc, #168]	@ (8002800 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	e047      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800275c:	4b27      	ldr	r3, [pc, #156]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	2b08      	cmp	r3, #8
 8002766:	d102      	bne.n	800276e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002768:	4b26      	ldr	r3, [pc, #152]	@ (8002804 <HAL_RCC_GetSysClockFreq+0xc0>)
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e03e      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800276e:	4b23      	ldr	r3, [pc, #140]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d136      	bne.n	80027e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800277a:	4b20      	ldr	r3, [pc, #128]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002784:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	3301      	adds	r3, #1
 8002790:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d10c      	bne.n	80027b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002798:	4a1a      	ldr	r2, [pc, #104]	@ (8002804 <HAL_RCC_GetSysClockFreq+0xc0>)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	4a16      	ldr	r2, [pc, #88]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a2:	68d2      	ldr	r2, [r2, #12]
 80027a4:	0a12      	lsrs	r2, r2, #8
 80027a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	617b      	str	r3, [r7, #20]
      break;
 80027b0:	e00c      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027b2:	4a13      	ldr	r2, [pc, #76]	@ (8002800 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	4a10      	ldr	r2, [pc, #64]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80027bc:	68d2      	ldr	r2, [r2, #12]
 80027be:	0a12      	lsrs	r2, r2, #8
 80027c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]
      break;
 80027ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	0e5b      	lsrs	r3, r3, #25
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	3301      	adds	r3, #1
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	e001      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027ec:	693b      	ldr	r3, [r7, #16]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	00f42400 	.word	0x00f42400
 8002804:	016e3600 	.word	0x016e3600

08002808 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800280c:	4b03      	ldr	r3, [pc, #12]	@ (800281c <HAL_RCC_GetHCLKFreq+0x14>)
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000000 	.word	0x20000000

08002820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002824:	f7ff fff0 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4904      	ldr	r1, [pc, #16]	@ (8002848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	08006878 	.word	0x08006878

0800284c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002850:	f7ff ffda 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	0adb      	lsrs	r3, r3, #11
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4904      	ldr	r1, [pc, #16]	@ (8002874 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	08006878 	.word	0x08006878

08002878 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800287e:	4b1e      	ldr	r3, [pc, #120]	@ (80028f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002888:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	3301      	adds	r3, #1
 8002894:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d10c      	bne.n	80028b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800289c:	4a17      	ldr	r2, [pc, #92]	@ (80028fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	4a14      	ldr	r2, [pc, #80]	@ (80028f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028a6:	68d2      	ldr	r2, [r2, #12]
 80028a8:	0a12      	lsrs	r2, r2, #8
 80028aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	617b      	str	r3, [r7, #20]
    break;
 80028b4:	e00c      	b.n	80028d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028b6:	4a12      	ldr	r2, [pc, #72]	@ (8002900 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80028be:	4a0e      	ldr	r2, [pc, #56]	@ (80028f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028c0:	68d2      	ldr	r2, [r2, #12]
 80028c2:	0a12      	lsrs	r2, r2, #8
 80028c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028c8:	fb02 f303 	mul.w	r3, r2, r3
 80028cc:	617b      	str	r3, [r7, #20]
    break;
 80028ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028d0:	4b09      	ldr	r3, [pc, #36]	@ (80028f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0e5b      	lsrs	r3, r3, #25
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80028ea:	687b      	ldr	r3, [r7, #4]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	371c      	adds	r7, #28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40021000 	.word	0x40021000
 80028fc:	016e3600 	.word	0x016e3600
 8002900:	00f42400 	.word	0x00f42400

08002904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800290c:	2300      	movs	r3, #0
 800290e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002910:	2300      	movs	r3, #0
 8002912:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8098 	beq.w	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002922:	2300      	movs	r3, #0
 8002924:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002926:	4b43      	ldr	r3, [pc, #268]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10d      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002932:	4b40      	ldr	r3, [pc, #256]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	4a3f      	ldr	r2, [pc, #252]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800293c:	6593      	str	r3, [r2, #88]	@ 0x58
 800293e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294a:	2301      	movs	r3, #1
 800294c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800294e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a39      	ldr	r2, [pc, #228]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002958:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800295a:	f7fe fc09 	bl	8001170 <HAL_GetTick>
 800295e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002960:	e009      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002962:	f7fe fc05 	bl	8001170 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d902      	bls.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	74fb      	strb	r3, [r7, #19]
        break;
 8002974:	e005      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002976:	4b30      	ldr	r3, [pc, #192]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0ef      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d159      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002988:	4b2a      	ldr	r3, [pc, #168]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002992:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01e      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d019      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029a4:	4b23      	ldr	r3, [pc, #140]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029b0:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029d0:	4a18      	ldr	r2, [pc, #96]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d016      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe fbc5 	bl	8001170 <HAL_GetTick>
 80029e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e8:	e00b      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe fbc1 	bl	8001170 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d902      	bls.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002a00:	e006      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a02:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0ec      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10b      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a16:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	4903      	ldr	r1, [pc, #12]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a2c:	e008      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a2e:	7cfb      	ldrb	r3, [r7, #19]
 8002a30:	74bb      	strb	r3, [r7, #18]
 8002a32:	e005      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a40:	7c7b      	ldrb	r3, [r7, #17]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d105      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a46:	4ba6      	ldr	r3, [pc, #664]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4a:	4aa5      	ldr	r2, [pc, #660]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a5e:	4ba0      	ldr	r3, [pc, #640]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a64:	f023 0203 	bic.w	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	499c      	ldr	r1, [pc, #624]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a80:	4b97      	ldr	r3, [pc, #604]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a86:	f023 020c 	bic.w	r2, r3, #12
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	4994      	ldr	r1, [pc, #592]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aa2:	4b8f      	ldr	r3, [pc, #572]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	498b      	ldr	r1, [pc, #556]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ac4:	4b86      	ldr	r3, [pc, #536]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	4983      	ldr	r1, [pc, #524]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ae6:	4b7e      	ldr	r3, [pc, #504]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	497a      	ldr	r1, [pc, #488]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b08:	4b75      	ldr	r3, [pc, #468]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	4972      	ldr	r1, [pc, #456]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	4969      	ldr	r1, [pc, #420]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b4c:	4b64      	ldr	r3, [pc, #400]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b52:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4961      	ldr	r1, [pc, #388]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b6e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	4958      	ldr	r1, [pc, #352]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d015      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b90:	4b53      	ldr	r3, [pc, #332]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9e:	4950      	ldr	r1, [pc, #320]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bae:	d105      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d015      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bc8:	4b45      	ldr	r3, [pc, #276]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	4942      	ldr	r1, [pc, #264]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002be6:	d105      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a3c      	ldr	r2, [pc, #240]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bf2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d015      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c00:	4b37      	ldr	r3, [pc, #220]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	4934      	ldr	r1, [pc, #208]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c20:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a2e      	ldr	r2, [pc, #184]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d015      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c38:	4b29      	ldr	r3, [pc, #164]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c46:	4926      	ldr	r1, [pc, #152]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c56:	d105      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c58:	4b21      	ldr	r3, [pc, #132]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d015      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7e:	4918      	ldr	r1, [pc, #96]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c90:	4b13      	ldr	r3, [pc, #76]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a12      	ldr	r2, [pc, #72]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d015      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb6:	490a      	ldr	r1, [pc, #40]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cc6:	d105      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cc8:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a04      	ldr	r2, [pc, #16]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002cd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e049      	b.n	8002d8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fd ff8a 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f000 fc08 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d001      	beq.n	8002dac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e042      	b.n	8002e32 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a21      	ldr	r2, [pc, #132]	@ (8002e40 <HAL_TIM_Base_Start+0xac>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d018      	beq.n	8002df0 <HAL_TIM_Base_Start+0x5c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc6:	d013      	beq.n	8002df0 <HAL_TIM_Base_Start+0x5c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8002e44 <HAL_TIM_Base_Start+0xb0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <HAL_TIM_Base_Start+0x5c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e48 <HAL_TIM_Base_Start+0xb4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_TIM_Base_Start+0x5c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1a      	ldr	r2, [pc, #104]	@ (8002e4c <HAL_TIM_Base_Start+0xb8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_TIM_Base_Start+0x5c>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a19      	ldr	r2, [pc, #100]	@ (8002e50 <HAL_TIM_Base_Start+0xbc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d115      	bne.n	8002e1c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	4b17      	ldr	r3, [pc, #92]	@ (8002e54 <HAL_TIM_Base_Start+0xc0>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d015      	beq.n	8002e2e <HAL_TIM_Base_Start+0x9a>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e08:	d011      	beq.n	8002e2e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0201 	orr.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1a:	e008      	b.n	8002e2e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e000      	b.n	8002e30 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40000800 	.word	0x40000800
 8002e4c:	40013400 	.word	0x40013400
 8002e50:	40014000 	.word	0x40014000
 8002e54:	00010007 	.word	0x00010007

08002e58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e049      	b.n	8002efe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f841 	bl	8002f06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f000 fb4e 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_TIM_PWM_Start+0x24>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e03c      	b.n	8002fba <HAL_TIM_PWM_Start+0x9e>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d109      	bne.n	8002f5a <HAL_TIM_PWM_Start+0x3e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	e02f      	b.n	8002fba <HAL_TIM_PWM_Start+0x9e>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d109      	bne.n	8002f74 <HAL_TIM_PWM_Start+0x58>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e022      	b.n	8002fba <HAL_TIM_PWM_Start+0x9e>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b0c      	cmp	r3, #12
 8002f78:	d109      	bne.n	8002f8e <HAL_TIM_PWM_Start+0x72>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	bf14      	ite	ne
 8002f86:	2301      	movne	r3, #1
 8002f88:	2300      	moveq	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e015      	b.n	8002fba <HAL_TIM_PWM_Start+0x9e>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d109      	bne.n	8002fa8 <HAL_TIM_PWM_Start+0x8c>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e008      	b.n	8002fba <HAL_TIM_PWM_Start+0x9e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	bf14      	ite	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	2300      	moveq	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e097      	b.n	80030f2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d104      	bne.n	8002fd2 <HAL_TIM_PWM_Start+0xb6>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fd0:	e023      	b.n	800301a <HAL_TIM_PWM_Start+0xfe>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d104      	bne.n	8002fe2 <HAL_TIM_PWM_Start+0xc6>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fe0:	e01b      	b.n	800301a <HAL_TIM_PWM_Start+0xfe>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d104      	bne.n	8002ff2 <HAL_TIM_PWM_Start+0xd6>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ff0:	e013      	b.n	800301a <HAL_TIM_PWM_Start+0xfe>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b0c      	cmp	r3, #12
 8002ff6:	d104      	bne.n	8003002 <HAL_TIM_PWM_Start+0xe6>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003000:	e00b      	b.n	800301a <HAL_TIM_PWM_Start+0xfe>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b10      	cmp	r3, #16
 8003006:	d104      	bne.n	8003012 <HAL_TIM_PWM_Start+0xf6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003010:	e003      	b.n	800301a <HAL_TIM_PWM_Start+0xfe>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2201      	movs	r2, #1
 8003020:	6839      	ldr	r1, [r7, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 feb6 	bl	8003d94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a33      	ldr	r2, [pc, #204]	@ (80030fc <HAL_TIM_PWM_Start+0x1e0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d013      	beq.n	800305a <HAL_TIM_PWM_Start+0x13e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a32      	ldr	r2, [pc, #200]	@ (8003100 <HAL_TIM_PWM_Start+0x1e4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00e      	beq.n	800305a <HAL_TIM_PWM_Start+0x13e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a30      	ldr	r2, [pc, #192]	@ (8003104 <HAL_TIM_PWM_Start+0x1e8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d009      	beq.n	800305a <HAL_TIM_PWM_Start+0x13e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2f      	ldr	r2, [pc, #188]	@ (8003108 <HAL_TIM_PWM_Start+0x1ec>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_TIM_PWM_Start+0x13e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2d      	ldr	r2, [pc, #180]	@ (800310c <HAL_TIM_PWM_Start+0x1f0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d101      	bne.n	800305e <HAL_TIM_PWM_Start+0x142>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_TIM_PWM_Start+0x144>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003072:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a20      	ldr	r2, [pc, #128]	@ (80030fc <HAL_TIM_PWM_Start+0x1e0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d018      	beq.n	80030b0 <HAL_TIM_PWM_Start+0x194>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003086:	d013      	beq.n	80030b0 <HAL_TIM_PWM_Start+0x194>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a20      	ldr	r2, [pc, #128]	@ (8003110 <HAL_TIM_PWM_Start+0x1f4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00e      	beq.n	80030b0 <HAL_TIM_PWM_Start+0x194>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1f      	ldr	r2, [pc, #124]	@ (8003114 <HAL_TIM_PWM_Start+0x1f8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d009      	beq.n	80030b0 <HAL_TIM_PWM_Start+0x194>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a17      	ldr	r2, [pc, #92]	@ (8003100 <HAL_TIM_PWM_Start+0x1e4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <HAL_TIM_PWM_Start+0x194>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a16      	ldr	r2, [pc, #88]	@ (8003104 <HAL_TIM_PWM_Start+0x1e8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d115      	bne.n	80030dc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	4b18      	ldr	r3, [pc, #96]	@ (8003118 <HAL_TIM_PWM_Start+0x1fc>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d015      	beq.n	80030ee <HAL_TIM_PWM_Start+0x1d2>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c8:	d011      	beq.n	80030ee <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030da:	e008      	b.n	80030ee <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e000      	b.n	80030f0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40012c00 	.word	0x40012c00
 8003100:	40013400 	.word	0x40013400
 8003104:	40014000 	.word	0x40014000
 8003108:	40014400 	.word	0x40014400
 800310c:	40014800 	.word	0x40014800
 8003110:	40000400 	.word	0x40000400
 8003114:	40000800 	.word	0x40000800
 8003118:	00010007 	.word	0x00010007

0800311c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003136:	2302      	movs	r3, #2
 8003138:	e0ff      	b.n	800333a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b14      	cmp	r3, #20
 8003146:	f200 80f0 	bhi.w	800332a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800314a:	a201      	add	r2, pc, #4	@ (adr r2, 8003150 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	080031a5 	.word	0x080031a5
 8003154:	0800332b 	.word	0x0800332b
 8003158:	0800332b 	.word	0x0800332b
 800315c:	0800332b 	.word	0x0800332b
 8003160:	080031e5 	.word	0x080031e5
 8003164:	0800332b 	.word	0x0800332b
 8003168:	0800332b 	.word	0x0800332b
 800316c:	0800332b 	.word	0x0800332b
 8003170:	08003227 	.word	0x08003227
 8003174:	0800332b 	.word	0x0800332b
 8003178:	0800332b 	.word	0x0800332b
 800317c:	0800332b 	.word	0x0800332b
 8003180:	08003267 	.word	0x08003267
 8003184:	0800332b 	.word	0x0800332b
 8003188:	0800332b 	.word	0x0800332b
 800318c:	0800332b 	.word	0x0800332b
 8003190:	080032a9 	.word	0x080032a9
 8003194:	0800332b 	.word	0x0800332b
 8003198:	0800332b 	.word	0x0800332b
 800319c:	0800332b 	.word	0x0800332b
 80031a0:	080032e9 	.word	0x080032e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fa60 	bl	8003670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0208 	orr.w	r2, r2, #8
 80031be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0204 	bic.w	r2, r2, #4
 80031ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	619a      	str	r2, [r3, #24]
      break;
 80031e2:	e0a5      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fad0 	bl	8003790 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800320e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6999      	ldr	r1, [r3, #24]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	021a      	lsls	r2, r3, #8
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	619a      	str	r2, [r3, #24]
      break;
 8003224:	e084      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fb39 	bl	80038a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0208 	orr.w	r2, r2, #8
 8003240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0204 	bic.w	r2, r2, #4
 8003250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69d9      	ldr	r1, [r3, #28]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	61da      	str	r2, [r3, #28]
      break;
 8003264:	e064      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fba1 	bl	80039b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69d9      	ldr	r1, [r3, #28]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	021a      	lsls	r2, r3, #8
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	61da      	str	r2, [r3, #28]
      break;
 80032a6:	e043      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fc0a 	bl	8003ac8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0208 	orr.w	r2, r2, #8
 80032c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80032e6:	e023      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fc4e 	bl	8003b90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003302:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003312:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	021a      	lsls	r2, r3, #8
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003328:	e002      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
      break;
 800332e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003338:	7dfb      	ldrb	r3, [r7, #23]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop

08003344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_TIM_ConfigClockSource+0x1c>
 800335c:	2302      	movs	r3, #2
 800335e:	e0de      	b.n	800351e <HAL_TIM_ConfigClockSource+0x1da>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800337e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800338a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a63      	ldr	r2, [pc, #396]	@ (8003528 <HAL_TIM_ConfigClockSource+0x1e4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	f000 80a9 	beq.w	80034f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80033a0:	4a61      	ldr	r2, [pc, #388]	@ (8003528 <HAL_TIM_ConfigClockSource+0x1e4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	f200 80ae 	bhi.w	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
 80033a8:	4a60      	ldr	r2, [pc, #384]	@ (800352c <HAL_TIM_ConfigClockSource+0x1e8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	f000 80a1 	beq.w	80034f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80033b0:	4a5e      	ldr	r2, [pc, #376]	@ (800352c <HAL_TIM_ConfigClockSource+0x1e8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	f200 80a6 	bhi.w	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
 80033b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003530 <HAL_TIM_ConfigClockSource+0x1ec>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	f000 8099 	beq.w	80034f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80033c0:	4a5b      	ldr	r2, [pc, #364]	@ (8003530 <HAL_TIM_ConfigClockSource+0x1ec>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	f200 809e 	bhi.w	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
 80033c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003534 <HAL_TIM_ConfigClockSource+0x1f0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	f000 8091 	beq.w	80034f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80033d0:	4a58      	ldr	r2, [pc, #352]	@ (8003534 <HAL_TIM_ConfigClockSource+0x1f0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	f200 8096 	bhi.w	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
 80033d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80033dc:	f000 8089 	beq.w	80034f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80033e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80033e4:	f200 808e 	bhi.w	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
 80033e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ec:	d03e      	beq.n	800346c <HAL_TIM_ConfigClockSource+0x128>
 80033ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033f2:	f200 8087 	bhi.w	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
 80033f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033fa:	f000 8086 	beq.w	800350a <HAL_TIM_ConfigClockSource+0x1c6>
 80033fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003402:	d87f      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
 8003404:	2b70      	cmp	r3, #112	@ 0x70
 8003406:	d01a      	beq.n	800343e <HAL_TIM_ConfigClockSource+0xfa>
 8003408:	2b70      	cmp	r3, #112	@ 0x70
 800340a:	d87b      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
 800340c:	2b60      	cmp	r3, #96	@ 0x60
 800340e:	d050      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x16e>
 8003410:	2b60      	cmp	r3, #96	@ 0x60
 8003412:	d877      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
 8003414:	2b50      	cmp	r3, #80	@ 0x50
 8003416:	d03c      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x14e>
 8003418:	2b50      	cmp	r3, #80	@ 0x50
 800341a:	d873      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
 800341c:	2b40      	cmp	r3, #64	@ 0x40
 800341e:	d058      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x18e>
 8003420:	2b40      	cmp	r3, #64	@ 0x40
 8003422:	d86f      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
 8003424:	2b30      	cmp	r3, #48	@ 0x30
 8003426:	d064      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003428:	2b30      	cmp	r3, #48	@ 0x30
 800342a:	d86b      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
 800342c:	2b20      	cmp	r3, #32
 800342e:	d060      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003430:	2b20      	cmp	r3, #32
 8003432:	d867      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d05c      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003438:	2b10      	cmp	r3, #16
 800343a:	d05a      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800343c:	e062      	b.n	8003504 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800344e:	f000 fc81 	bl	8003d54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003460:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	609a      	str	r2, [r3, #8]
      break;
 800346a:	e04f      	b.n	800350c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800347c:	f000 fc6a 	bl	8003d54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800348e:	609a      	str	r2, [r3, #8]
      break;
 8003490:	e03c      	b.n	800350c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349e:	461a      	mov	r2, r3
 80034a0:	f000 fbdc 	bl	8003c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2150      	movs	r1, #80	@ 0x50
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fc35 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 80034b0:	e02c      	b.n	800350c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034be:	461a      	mov	r2, r3
 80034c0:	f000 fbfb 	bl	8003cba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2160      	movs	r1, #96	@ 0x60
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fc25 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 80034d0:	e01c      	b.n	800350c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034de:	461a      	mov	r2, r3
 80034e0:	f000 fbbc 	bl	8003c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2140      	movs	r1, #64	@ 0x40
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fc15 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 80034f0:	e00c      	b.n	800350c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4619      	mov	r1, r3
 80034fc:	4610      	mov	r0, r2
 80034fe:	f000 fc0c 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 8003502:	e003      	b.n	800350c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
      break;
 8003508:	e000      	b.n	800350c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800350a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	00100070 	.word	0x00100070
 800352c:	00100040 	.word	0x00100040
 8003530:	00100030 	.word	0x00100030
 8003534:	00100020 	.word	0x00100020

08003538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a42      	ldr	r2, [pc, #264]	@ (8003654 <TIM_Base_SetConfig+0x11c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00f      	beq.n	8003570 <TIM_Base_SetConfig+0x38>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003556:	d00b      	beq.n	8003570 <TIM_Base_SetConfig+0x38>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a3f      	ldr	r2, [pc, #252]	@ (8003658 <TIM_Base_SetConfig+0x120>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <TIM_Base_SetConfig+0x38>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a3e      	ldr	r2, [pc, #248]	@ (800365c <TIM_Base_SetConfig+0x124>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d003      	beq.n	8003570 <TIM_Base_SetConfig+0x38>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a3d      	ldr	r2, [pc, #244]	@ (8003660 <TIM_Base_SetConfig+0x128>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d108      	bne.n	8003582 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a33      	ldr	r2, [pc, #204]	@ (8003654 <TIM_Base_SetConfig+0x11c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01b      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003590:	d017      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a30      	ldr	r2, [pc, #192]	@ (8003658 <TIM_Base_SetConfig+0x120>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2f      	ldr	r2, [pc, #188]	@ (800365c <TIM_Base_SetConfig+0x124>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00f      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003660 <TIM_Base_SetConfig+0x128>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00b      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003664 <TIM_Base_SetConfig+0x12c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d007      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003668 <TIM_Base_SetConfig+0x130>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d003      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a2b      	ldr	r2, [pc, #172]	@ (800366c <TIM_Base_SetConfig+0x134>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d108      	bne.n	80035d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a16      	ldr	r2, [pc, #88]	@ (8003654 <TIM_Base_SetConfig+0x11c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00f      	beq.n	8003620 <TIM_Base_SetConfig+0xe8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a17      	ldr	r2, [pc, #92]	@ (8003660 <TIM_Base_SetConfig+0x128>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00b      	beq.n	8003620 <TIM_Base_SetConfig+0xe8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a16      	ldr	r2, [pc, #88]	@ (8003664 <TIM_Base_SetConfig+0x12c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d007      	beq.n	8003620 <TIM_Base_SetConfig+0xe8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a15      	ldr	r2, [pc, #84]	@ (8003668 <TIM_Base_SetConfig+0x130>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d003      	beq.n	8003620 <TIM_Base_SetConfig+0xe8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a14      	ldr	r2, [pc, #80]	@ (800366c <TIM_Base_SetConfig+0x134>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d103      	bne.n	8003628 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f023 0201 	bic.w	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	611a      	str	r2, [r3, #16]
  }
}
 8003646:	bf00      	nop
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40012c00 	.word	0x40012c00
 8003658:	40000400 	.word	0x40000400
 800365c:	40000800 	.word	0x40000800
 8003660:	40013400 	.word	0x40013400
 8003664:	40014000 	.word	0x40014000
 8003668:	40014400 	.word	0x40014400
 800366c:	40014800 	.word	0x40014800

08003670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f023 0201 	bic.w	r2, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800369e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f023 0302 	bic.w	r3, r3, #2
 80036bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a2c      	ldr	r2, [pc, #176]	@ (800377c <TIM_OC1_SetConfig+0x10c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00f      	beq.n	80036f0 <TIM_OC1_SetConfig+0x80>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003780 <TIM_OC1_SetConfig+0x110>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00b      	beq.n	80036f0 <TIM_OC1_SetConfig+0x80>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a2a      	ldr	r2, [pc, #168]	@ (8003784 <TIM_OC1_SetConfig+0x114>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d007      	beq.n	80036f0 <TIM_OC1_SetConfig+0x80>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a29      	ldr	r2, [pc, #164]	@ (8003788 <TIM_OC1_SetConfig+0x118>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d003      	beq.n	80036f0 <TIM_OC1_SetConfig+0x80>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a28      	ldr	r2, [pc, #160]	@ (800378c <TIM_OC1_SetConfig+0x11c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d10c      	bne.n	800370a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f023 0308 	bic.w	r3, r3, #8
 80036f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f023 0304 	bic.w	r3, r3, #4
 8003708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1b      	ldr	r2, [pc, #108]	@ (800377c <TIM_OC1_SetConfig+0x10c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00f      	beq.n	8003732 <TIM_OC1_SetConfig+0xc2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a1a      	ldr	r2, [pc, #104]	@ (8003780 <TIM_OC1_SetConfig+0x110>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00b      	beq.n	8003732 <TIM_OC1_SetConfig+0xc2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a19      	ldr	r2, [pc, #100]	@ (8003784 <TIM_OC1_SetConfig+0x114>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d007      	beq.n	8003732 <TIM_OC1_SetConfig+0xc2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a18      	ldr	r2, [pc, #96]	@ (8003788 <TIM_OC1_SetConfig+0x118>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d003      	beq.n	8003732 <TIM_OC1_SetConfig+0xc2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a17      	ldr	r2, [pc, #92]	@ (800378c <TIM_OC1_SetConfig+0x11c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d111      	bne.n	8003756 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	621a      	str	r2, [r3, #32]
}
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40013400 	.word	0x40013400
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800

08003790 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f023 0210 	bic.w	r2, r3, #16
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f023 0320 	bic.w	r3, r3, #32
 80037de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a28      	ldr	r2, [pc, #160]	@ (8003890 <TIM_OC2_SetConfig+0x100>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <TIM_OC2_SetConfig+0x6c>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a27      	ldr	r2, [pc, #156]	@ (8003894 <TIM_OC2_SetConfig+0x104>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d10d      	bne.n	8003818 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003816:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a1d      	ldr	r2, [pc, #116]	@ (8003890 <TIM_OC2_SetConfig+0x100>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00f      	beq.n	8003840 <TIM_OC2_SetConfig+0xb0>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a1c      	ldr	r2, [pc, #112]	@ (8003894 <TIM_OC2_SetConfig+0x104>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00b      	beq.n	8003840 <TIM_OC2_SetConfig+0xb0>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a1b      	ldr	r2, [pc, #108]	@ (8003898 <TIM_OC2_SetConfig+0x108>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d007      	beq.n	8003840 <TIM_OC2_SetConfig+0xb0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a1a      	ldr	r2, [pc, #104]	@ (800389c <TIM_OC2_SetConfig+0x10c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d003      	beq.n	8003840 <TIM_OC2_SetConfig+0xb0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a19      	ldr	r2, [pc, #100]	@ (80038a0 <TIM_OC2_SetConfig+0x110>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d113      	bne.n	8003868 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003846:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800384e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40013400 	.word	0x40013400
 8003898:	40014000 	.word	0x40014000
 800389c:	40014400 	.word	0x40014400
 80038a0:	40014800 	.word	0x40014800

080038a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0303 	bic.w	r3, r3, #3
 80038de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a27      	ldr	r2, [pc, #156]	@ (80039a0 <TIM_OC3_SetConfig+0xfc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d003      	beq.n	800390e <TIM_OC3_SetConfig+0x6a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a26      	ldr	r2, [pc, #152]	@ (80039a4 <TIM_OC3_SetConfig+0x100>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10d      	bne.n	800392a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a1c      	ldr	r2, [pc, #112]	@ (80039a0 <TIM_OC3_SetConfig+0xfc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00f      	beq.n	8003952 <TIM_OC3_SetConfig+0xae>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a1b      	ldr	r2, [pc, #108]	@ (80039a4 <TIM_OC3_SetConfig+0x100>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00b      	beq.n	8003952 <TIM_OC3_SetConfig+0xae>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1a      	ldr	r2, [pc, #104]	@ (80039a8 <TIM_OC3_SetConfig+0x104>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <TIM_OC3_SetConfig+0xae>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a19      	ldr	r2, [pc, #100]	@ (80039ac <TIM_OC3_SetConfig+0x108>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d003      	beq.n	8003952 <TIM_OC3_SetConfig+0xae>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a18      	ldr	r2, [pc, #96]	@ (80039b0 <TIM_OC3_SetConfig+0x10c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d113      	bne.n	800397a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	621a      	str	r2, [r3, #32]
}
 8003994:	bf00      	nop
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40013400 	.word	0x40013400
 80039a8:	40014000 	.word	0x40014000
 80039ac:	40014400 	.word	0x40014400
 80039b0:	40014800 	.word	0x40014800

080039b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	031b      	lsls	r3, r3, #12
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a28      	ldr	r2, [pc, #160]	@ (8003ab4 <TIM_OC4_SetConfig+0x100>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_OC4_SetConfig+0x6c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a27      	ldr	r2, [pc, #156]	@ (8003ab8 <TIM_OC4_SetConfig+0x104>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d10d      	bne.n	8003a3c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	031b      	lsls	r3, r3, #12
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab4 <TIM_OC4_SetConfig+0x100>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00f      	beq.n	8003a64 <TIM_OC4_SetConfig+0xb0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab8 <TIM_OC4_SetConfig+0x104>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00b      	beq.n	8003a64 <TIM_OC4_SetConfig+0xb0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003abc <TIM_OC4_SetConfig+0x108>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d007      	beq.n	8003a64 <TIM_OC4_SetConfig+0xb0>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a1a      	ldr	r2, [pc, #104]	@ (8003ac0 <TIM_OC4_SetConfig+0x10c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d003      	beq.n	8003a64 <TIM_OC4_SetConfig+0xb0>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a19      	ldr	r2, [pc, #100]	@ (8003ac4 <TIM_OC4_SetConfig+0x110>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d113      	bne.n	8003a8c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	019b      	lsls	r3, r3, #6
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	019b      	lsls	r3, r3, #6
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	621a      	str	r2, [r3, #32]
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40013400 	.word	0x40013400
 8003abc:	40014000 	.word	0x40014000
 8003ac0:	40014400 	.word	0x40014400
 8003ac4:	40014800 	.word	0x40014800

08003ac8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003b0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	041b      	lsls	r3, r3, #16
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	@ (8003b7c <TIM_OC5_SetConfig+0xb4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00f      	beq.n	8003b42 <TIM_OC5_SetConfig+0x7a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a16      	ldr	r2, [pc, #88]	@ (8003b80 <TIM_OC5_SetConfig+0xb8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00b      	beq.n	8003b42 <TIM_OC5_SetConfig+0x7a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a15      	ldr	r2, [pc, #84]	@ (8003b84 <TIM_OC5_SetConfig+0xbc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d007      	beq.n	8003b42 <TIM_OC5_SetConfig+0x7a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a14      	ldr	r2, [pc, #80]	@ (8003b88 <TIM_OC5_SetConfig+0xc0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d003      	beq.n	8003b42 <TIM_OC5_SetConfig+0x7a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a13      	ldr	r2, [pc, #76]	@ (8003b8c <TIM_OC5_SetConfig+0xc4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d109      	bne.n	8003b56 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	621a      	str	r2, [r3, #32]
}
 8003b70:	bf00      	nop
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40013400 	.word	0x40013400
 8003b84:	40014000 	.word	0x40014000
 8003b88:	40014400 	.word	0x40014400
 8003b8c:	40014800 	.word	0x40014800

08003b90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	051b      	lsls	r3, r3, #20
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a18      	ldr	r2, [pc, #96]	@ (8003c48 <TIM_OC6_SetConfig+0xb8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00f      	beq.n	8003c0c <TIM_OC6_SetConfig+0x7c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a17      	ldr	r2, [pc, #92]	@ (8003c4c <TIM_OC6_SetConfig+0xbc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00b      	beq.n	8003c0c <TIM_OC6_SetConfig+0x7c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a16      	ldr	r2, [pc, #88]	@ (8003c50 <TIM_OC6_SetConfig+0xc0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d007      	beq.n	8003c0c <TIM_OC6_SetConfig+0x7c>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a15      	ldr	r2, [pc, #84]	@ (8003c54 <TIM_OC6_SetConfig+0xc4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d003      	beq.n	8003c0c <TIM_OC6_SetConfig+0x7c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a14      	ldr	r2, [pc, #80]	@ (8003c58 <TIM_OC6_SetConfig+0xc8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d109      	bne.n	8003c20 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	029b      	lsls	r3, r3, #10
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	621a      	str	r2, [r3, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40013400 	.word	0x40013400
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800

08003c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f023 0201 	bic.w	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f023 030a 	bic.w	r3, r3, #10
 8003c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	621a      	str	r2, [r3, #32]
}
 8003cae:	bf00      	nop
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b087      	sub	sp, #28
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f023 0210 	bic.w	r2, r3, #16
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	031b      	lsls	r3, r3, #12
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cf6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f043 0307 	orr.w	r3, r3, #7
 8003d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	021a      	lsls	r2, r3, #8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	609a      	str	r2, [r3, #8]
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	2201      	movs	r2, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a1a      	ldr	r2, [r3, #32]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	43db      	mvns	r3, r3
 8003db6:	401a      	ands	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a1a      	ldr	r2, [r3, #32]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	621a      	str	r2, [r3, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e065      	b.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2b      	ldr	r2, [pc, #172]	@ (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d108      	bne.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1b      	ldr	r2, [pc, #108]	@ (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d018      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e6e:	d013      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a18      	ldr	r2, [pc, #96]	@ (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00e      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a17      	ldr	r2, [pc, #92]	@ (8003edc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d009      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a12      	ldr	r2, [pc, #72]	@ (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a13      	ldr	r2, [pc, #76]	@ (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10c      	bne.n	8003eb2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	40012c00 	.word	0x40012c00
 8003ed4:	40013400 	.word	0x40013400
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800
 8003ee0:	40014000 	.word	0x40014000

08003ee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e042      	b.n	8003f7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d106      	bne.n	8003f0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7fc ff77 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2224      	movs	r2, #36	@ 0x24
 8003f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 ff2c 	bl	8004d8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fc5d 	bl	80047f4 <UART_SetConfig>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e01b      	b.n	8003f7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 ffab 	bl	8004ed0 <UART_CheckIdleState>
 8003f7a:	4603      	mov	r3, r0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	@ 0x28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d167      	bne.n	800406c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_UART_Transmit_DMA+0x24>
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e060      	b.n	800406e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2221      	movs	r2, #33	@ 0x21
 8003fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d028      	beq.n	800402c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fde:	4a26      	ldr	r2, [pc, #152]	@ (8004078 <HAL_UART_Transmit_DMA+0xf4>)
 8003fe0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fe6:	4a25      	ldr	r2, [pc, #148]	@ (800407c <HAL_UART_Transmit_DMA+0xf8>)
 8003fe8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fee:	4a24      	ldr	r2, [pc, #144]	@ (8004080 <HAL_UART_Transmit_DMA+0xfc>)
 8003ff0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004002:	4619      	mov	r1, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3328      	adds	r3, #40	@ 0x28
 800400a:	461a      	mov	r2, r3
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	f7fd fa73 	bl	80014f8 <HAL_DMA_Start_IT>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2210      	movs	r2, #16
 800401c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e020      	b.n	800406e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2240      	movs	r2, #64	@ 0x40
 8004032:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3308      	adds	r3, #8
 800403a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	613b      	str	r3, [r7, #16]
   return(result);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3308      	adds	r3, #8
 8004052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004054:	623a      	str	r2, [r7, #32]
 8004056:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	69f9      	ldr	r1, [r7, #28]
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	61bb      	str	r3, [r7, #24]
   return(result);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e5      	bne.n	8004034 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3728      	adds	r7, #40	@ 0x28
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	0800539b 	.word	0x0800539b
 800407c:	08005435 	.word	0x08005435
 8004080:	080055bb 	.word	0x080055bb

08004084 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	@ 0x28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004098:	2b20      	cmp	r3, #32
 800409a:	d137      	bne.n	800410c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_UART_Receive_DMA+0x24>
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e030      	b.n	800410e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a18      	ldr	r2, [pc, #96]	@ (8004118 <HAL_UART_Receive_DMA+0x94>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d01f      	beq.n	80040fc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d018      	beq.n	80040fc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	613b      	str	r3, [r7, #16]
   return(result);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	623b      	str	r3, [r7, #32]
 80040ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	69f9      	ldr	r1, [r7, #28]
 80040ee:	6a3a      	ldr	r2, [r7, #32]
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	461a      	mov	r2, r3
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fffc 	bl	8005100 <UART_Start_Receive_DMA>
 8004108:	4603      	mov	r3, r0
 800410a:	e000      	b.n	800410e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3728      	adds	r7, #40	@ 0x28
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40008000 	.word	0x40008000

0800411c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b0ba      	sub	sp, #232	@ 0xe8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004142:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004146:	f640 030f 	movw	r3, #2063	@ 0x80f
 800414a:	4013      	ands	r3, r2
 800414c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d11b      	bne.n	8004190 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d015      	beq.n	8004190 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d105      	bne.n	800417c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d009      	beq.n	8004190 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8300 	beq.w	8004786 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
      }
      return;
 800418e:	e2fa      	b.n	8004786 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8123 	beq.w	80043e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800419a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800419e:	4b8d      	ldr	r3, [pc, #564]	@ (80043d4 <HAL_UART_IRQHandler+0x2b8>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80041a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80041aa:	4b8b      	ldr	r3, [pc, #556]	@ (80043d8 <HAL_UART_IRQHandler+0x2bc>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8116 	beq.w	80043e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d011      	beq.n	80041e4 <HAL_UART_IRQHandler+0xc8>
 80041c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2201      	movs	r2, #1
 80041d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041da:	f043 0201 	orr.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d011      	beq.n	8004214 <HAL_UART_IRQHandler+0xf8>
 80041f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2202      	movs	r2, #2
 8004202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420a:	f043 0204 	orr.w	r2, r3, #4
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d011      	beq.n	8004244 <HAL_UART_IRQHandler+0x128>
 8004220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2204      	movs	r2, #4
 8004232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423a:	f043 0202 	orr.w	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d017      	beq.n	8004280 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800425c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004260:	4b5c      	ldr	r3, [pc, #368]	@ (80043d4 <HAL_UART_IRQHandler+0x2b8>)
 8004262:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2208      	movs	r2, #8
 800426e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004276:	f043 0208 	orr.w	r2, r3, #8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004288:	2b00      	cmp	r3, #0
 800428a:	d012      	beq.n	80042b2 <HAL_UART_IRQHandler+0x196>
 800428c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004290:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00c      	beq.n	80042b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 8266 	beq.w	800478a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d013      	beq.n	80042f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d105      	bne.n	80042e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d005      	beq.n	8004316 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800430a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800430e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004312:	2b00      	cmp	r3, #0
 8004314:	d054      	beq.n	80043c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 ffd9 	bl	80052ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004326:	2b40      	cmp	r3, #64	@ 0x40
 8004328:	d146      	bne.n	80043b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3308      	adds	r3, #8
 8004330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3308      	adds	r3, #8
 8004352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004356:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800435a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004366:	e841 2300 	strex	r3, r2, [r1]
 800436a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800436e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1d9      	bne.n	800432a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800437c:	2b00      	cmp	r3, #0
 800437e:	d017      	beq.n	80043b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004386:	4a15      	ldr	r2, [pc, #84]	@ (80043dc <HAL_UART_IRQHandler+0x2c0>)
 8004388:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004390:	4618      	mov	r0, r3
 8004392:	f7fd f985 	bl	80016a0 <HAL_DMA_Abort_IT>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d019      	beq.n	80043d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80043aa:	4610      	mov	r0, r2
 80043ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ae:	e00f      	b.n	80043d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fa09 	bl	80047c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b6:	e00b      	b.n	80043d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fa05 	bl	80047c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043be:	e007      	b.n	80043d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fa01 	bl	80047c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80043ce:	e1dc      	b.n	800478a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d0:	bf00      	nop
    return;
 80043d2:	e1da      	b.n	800478a <HAL_UART_IRQHandler+0x66e>
 80043d4:	10000001 	.word	0x10000001
 80043d8:	04000120 	.word	0x04000120
 80043dc:	0800563b 	.word	0x0800563b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	f040 8170 	bne.w	80046ca <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 8169 	beq.w	80046ca <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8162 	beq.w	80046ca <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2210      	movs	r2, #16
 800440c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004418:	2b40      	cmp	r3, #64	@ 0x40
 800441a:	f040 80d8 	bne.w	80045ce <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800442c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80af 	beq.w	8004594 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800443c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004440:	429a      	cmp	r2, r3
 8004442:	f080 80a7 	bcs.w	8004594 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800444c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	f040 8087 	bne.w	8004572 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004478:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800447c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004480:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800448e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004492:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800449a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1da      	bne.n	8004464 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3308      	adds	r3, #8
 80044b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3308      	adds	r3, #8
 80044ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e1      	bne.n	80044ae <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3308      	adds	r3, #8
 80044f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004500:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800450e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004510:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004514:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800451c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e3      	bne.n	80044ea <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800453e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004540:	f023 0310 	bic.w	r3, r3, #16
 8004544:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004552:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004554:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004558:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e4      	bne.n	8004530 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800456c:	4618      	mov	r0, r3
 800456e:	f7fd f83e 	bl	80015ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2202      	movs	r2, #2
 8004576:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004584:	b29b      	uxth	r3, r3
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	b29b      	uxth	r3, r3
 800458a:	4619      	mov	r1, r3
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f925 	bl	80047dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004592:	e0fc      	b.n	800478e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800459a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800459e:	429a      	cmp	r2, r3
 80045a0:	f040 80f5 	bne.w	800478e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	f040 80eb 	bne.w	800478e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80045c4:	4619      	mov	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f908 	bl	80047dc <HAL_UARTEx_RxEventCallback>
      return;
 80045cc:	e0df      	b.n	800478e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80045da:	b29b      	uxth	r3, r3
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80d1 	beq.w	8004792 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80045f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80cc 	beq.w	8004792 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800460e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800461c:	647b      	str	r3, [r7, #68]	@ 0x44
 800461e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800462a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e4      	bne.n	80045fa <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3308      	adds	r3, #8
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	e853 3f00 	ldrex	r3, [r3]
 800463e:	623b      	str	r3, [r7, #32]
   return(result);
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3308      	adds	r3, #8
 8004654:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004658:	633a      	str	r2, [r7, #48]	@ 0x30
 800465a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800465e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e1      	bne.n	8004630 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	60fb      	str	r3, [r7, #12]
   return(result);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f023 0310 	bic.w	r3, r3, #16
 8004694:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	69b9      	ldr	r1, [r7, #24]
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	617b      	str	r3, [r7, #20]
   return(result);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e4      	bne.n	8004680 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f88a 	bl	80047dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046c8:	e063      	b.n	8004792 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00e      	beq.n	80046f4 <HAL_UART_IRQHandler+0x5d8>
 80046d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80046ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 ffe5 	bl	80056bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046f2:	e051      	b.n	8004798 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d014      	beq.n	800472a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800470c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004710:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800471c:	2b00      	cmp	r3, #0
 800471e:	d03a      	beq.n	8004796 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
    }
    return;
 8004728:	e035      	b.n	8004796 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800472e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <HAL_UART_IRQHandler+0x62e>
 8004736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800473a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 ff8f 	bl	8005666 <UART_EndTransmit_IT>
    return;
 8004748:	e026      	b.n	8004798 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800474a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_UART_IRQHandler+0x64e>
 8004756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800475a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 ffbe 	bl	80056e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004768:	e016      	b.n	8004798 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800476a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d010      	beq.n	8004798 <HAL_UART_IRQHandler+0x67c>
 8004776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800477a:	2b00      	cmp	r3, #0
 800477c:	da0c      	bge.n	8004798 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 ffa6 	bl	80056d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004784:	e008      	b.n	8004798 <HAL_UART_IRQHandler+0x67c>
      return;
 8004786:	bf00      	nop
 8004788:	e006      	b.n	8004798 <HAL_UART_IRQHandler+0x67c>
    return;
 800478a:	bf00      	nop
 800478c:	e004      	b.n	8004798 <HAL_UART_IRQHandler+0x67c>
      return;
 800478e:	bf00      	nop
 8004790:	e002      	b.n	8004798 <HAL_UART_IRQHandler+0x67c>
      return;
 8004792:	bf00      	nop
 8004794:	e000      	b.n	8004798 <HAL_UART_IRQHandler+0x67c>
    return;
 8004796:	bf00      	nop
  }
}
 8004798:	37e8      	adds	r7, #232	@ 0xe8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop

080047a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f8:	b08c      	sub	sp, #48	@ 0x30
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	431a      	orrs	r2, r3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	431a      	orrs	r2, r3
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	4313      	orrs	r3, r2
 800481a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4bab      	ldr	r3, [pc, #684]	@ (8004ad0 <UART_SetConfig+0x2dc>)
 8004824:	4013      	ands	r3, r2
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	6812      	ldr	r2, [r2, #0]
 800482a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800482c:	430b      	orrs	r3, r1
 800482e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4aa0      	ldr	r2, [pc, #640]	@ (8004ad4 <UART_SetConfig+0x2e0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800485c:	4313      	orrs	r3, r2
 800485e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800486a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004874:	430b      	orrs	r3, r1
 8004876:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487e:	f023 010f 	bic.w	r1, r3, #15
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a91      	ldr	r2, [pc, #580]	@ (8004ad8 <UART_SetConfig+0x2e4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d125      	bne.n	80048e4 <UART_SetConfig+0xf0>
 8004898:	4b90      	ldr	r3, [pc, #576]	@ (8004adc <UART_SetConfig+0x2e8>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d81a      	bhi.n	80048dc <UART_SetConfig+0xe8>
 80048a6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <UART_SetConfig+0xb8>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048bd 	.word	0x080048bd
 80048b0:	080048cd 	.word	0x080048cd
 80048b4:	080048c5 	.word	0x080048c5
 80048b8:	080048d5 	.word	0x080048d5
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048c2:	e0d6      	b.n	8004a72 <UART_SetConfig+0x27e>
 80048c4:	2302      	movs	r3, #2
 80048c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ca:	e0d2      	b.n	8004a72 <UART_SetConfig+0x27e>
 80048cc:	2304      	movs	r3, #4
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048d2:	e0ce      	b.n	8004a72 <UART_SetConfig+0x27e>
 80048d4:	2308      	movs	r3, #8
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048da:	e0ca      	b.n	8004a72 <UART_SetConfig+0x27e>
 80048dc:	2310      	movs	r3, #16
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048e2:	e0c6      	b.n	8004a72 <UART_SetConfig+0x27e>
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a7d      	ldr	r2, [pc, #500]	@ (8004ae0 <UART_SetConfig+0x2ec>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d138      	bne.n	8004960 <UART_SetConfig+0x16c>
 80048ee:	4b7b      	ldr	r3, [pc, #492]	@ (8004adc <UART_SetConfig+0x2e8>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f4:	f003 030c 	and.w	r3, r3, #12
 80048f8:	2b0c      	cmp	r3, #12
 80048fa:	d82d      	bhi.n	8004958 <UART_SetConfig+0x164>
 80048fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004904 <UART_SetConfig+0x110>)
 80048fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004902:	bf00      	nop
 8004904:	08004939 	.word	0x08004939
 8004908:	08004959 	.word	0x08004959
 800490c:	08004959 	.word	0x08004959
 8004910:	08004959 	.word	0x08004959
 8004914:	08004949 	.word	0x08004949
 8004918:	08004959 	.word	0x08004959
 800491c:	08004959 	.word	0x08004959
 8004920:	08004959 	.word	0x08004959
 8004924:	08004941 	.word	0x08004941
 8004928:	08004959 	.word	0x08004959
 800492c:	08004959 	.word	0x08004959
 8004930:	08004959 	.word	0x08004959
 8004934:	08004951 	.word	0x08004951
 8004938:	2300      	movs	r3, #0
 800493a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800493e:	e098      	b.n	8004a72 <UART_SetConfig+0x27e>
 8004940:	2302      	movs	r3, #2
 8004942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004946:	e094      	b.n	8004a72 <UART_SetConfig+0x27e>
 8004948:	2304      	movs	r3, #4
 800494a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800494e:	e090      	b.n	8004a72 <UART_SetConfig+0x27e>
 8004950:	2308      	movs	r3, #8
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004956:	e08c      	b.n	8004a72 <UART_SetConfig+0x27e>
 8004958:	2310      	movs	r3, #16
 800495a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800495e:	e088      	b.n	8004a72 <UART_SetConfig+0x27e>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a5f      	ldr	r2, [pc, #380]	@ (8004ae4 <UART_SetConfig+0x2f0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d125      	bne.n	80049b6 <UART_SetConfig+0x1c2>
 800496a:	4b5c      	ldr	r3, [pc, #368]	@ (8004adc <UART_SetConfig+0x2e8>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004970:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004974:	2b30      	cmp	r3, #48	@ 0x30
 8004976:	d016      	beq.n	80049a6 <UART_SetConfig+0x1b2>
 8004978:	2b30      	cmp	r3, #48	@ 0x30
 800497a:	d818      	bhi.n	80049ae <UART_SetConfig+0x1ba>
 800497c:	2b20      	cmp	r3, #32
 800497e:	d00a      	beq.n	8004996 <UART_SetConfig+0x1a2>
 8004980:	2b20      	cmp	r3, #32
 8004982:	d814      	bhi.n	80049ae <UART_SetConfig+0x1ba>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <UART_SetConfig+0x19a>
 8004988:	2b10      	cmp	r3, #16
 800498a:	d008      	beq.n	800499e <UART_SetConfig+0x1aa>
 800498c:	e00f      	b.n	80049ae <UART_SetConfig+0x1ba>
 800498e:	2300      	movs	r3, #0
 8004990:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004994:	e06d      	b.n	8004a72 <UART_SetConfig+0x27e>
 8004996:	2302      	movs	r3, #2
 8004998:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800499c:	e069      	b.n	8004a72 <UART_SetConfig+0x27e>
 800499e:	2304      	movs	r3, #4
 80049a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049a4:	e065      	b.n	8004a72 <UART_SetConfig+0x27e>
 80049a6:	2308      	movs	r3, #8
 80049a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ac:	e061      	b.n	8004a72 <UART_SetConfig+0x27e>
 80049ae:	2310      	movs	r3, #16
 80049b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049b4:	e05d      	b.n	8004a72 <UART_SetConfig+0x27e>
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a4b      	ldr	r2, [pc, #300]	@ (8004ae8 <UART_SetConfig+0x2f4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d125      	bne.n	8004a0c <UART_SetConfig+0x218>
 80049c0:	4b46      	ldr	r3, [pc, #280]	@ (8004adc <UART_SetConfig+0x2e8>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80049cc:	d016      	beq.n	80049fc <UART_SetConfig+0x208>
 80049ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80049d0:	d818      	bhi.n	8004a04 <UART_SetConfig+0x210>
 80049d2:	2b80      	cmp	r3, #128	@ 0x80
 80049d4:	d00a      	beq.n	80049ec <UART_SetConfig+0x1f8>
 80049d6:	2b80      	cmp	r3, #128	@ 0x80
 80049d8:	d814      	bhi.n	8004a04 <UART_SetConfig+0x210>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <UART_SetConfig+0x1f0>
 80049de:	2b40      	cmp	r3, #64	@ 0x40
 80049e0:	d008      	beq.n	80049f4 <UART_SetConfig+0x200>
 80049e2:	e00f      	b.n	8004a04 <UART_SetConfig+0x210>
 80049e4:	2300      	movs	r3, #0
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ea:	e042      	b.n	8004a72 <UART_SetConfig+0x27e>
 80049ec:	2302      	movs	r3, #2
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f2:	e03e      	b.n	8004a72 <UART_SetConfig+0x27e>
 80049f4:	2304      	movs	r3, #4
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049fa:	e03a      	b.n	8004a72 <UART_SetConfig+0x27e>
 80049fc:	2308      	movs	r3, #8
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a02:	e036      	b.n	8004a72 <UART_SetConfig+0x27e>
 8004a04:	2310      	movs	r3, #16
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0a:	e032      	b.n	8004a72 <UART_SetConfig+0x27e>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a30      	ldr	r2, [pc, #192]	@ (8004ad4 <UART_SetConfig+0x2e0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d12a      	bne.n	8004a6c <UART_SetConfig+0x278>
 8004a16:	4b31      	ldr	r3, [pc, #196]	@ (8004adc <UART_SetConfig+0x2e8>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a24:	d01a      	beq.n	8004a5c <UART_SetConfig+0x268>
 8004a26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a2a:	d81b      	bhi.n	8004a64 <UART_SetConfig+0x270>
 8004a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a30:	d00c      	beq.n	8004a4c <UART_SetConfig+0x258>
 8004a32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a36:	d815      	bhi.n	8004a64 <UART_SetConfig+0x270>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <UART_SetConfig+0x250>
 8004a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a40:	d008      	beq.n	8004a54 <UART_SetConfig+0x260>
 8004a42:	e00f      	b.n	8004a64 <UART_SetConfig+0x270>
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a4a:	e012      	b.n	8004a72 <UART_SetConfig+0x27e>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a52:	e00e      	b.n	8004a72 <UART_SetConfig+0x27e>
 8004a54:	2304      	movs	r3, #4
 8004a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a5a:	e00a      	b.n	8004a72 <UART_SetConfig+0x27e>
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a62:	e006      	b.n	8004a72 <UART_SetConfig+0x27e>
 8004a64:	2310      	movs	r3, #16
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a6a:	e002      	b.n	8004a72 <UART_SetConfig+0x27e>
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a17      	ldr	r2, [pc, #92]	@ (8004ad4 <UART_SetConfig+0x2e0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	f040 80a8 	bne.w	8004bce <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d834      	bhi.n	8004af0 <UART_SetConfig+0x2fc>
 8004a86:	a201      	add	r2, pc, #4	@ (adr r2, 8004a8c <UART_SetConfig+0x298>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004af1 	.word	0x08004af1
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004af1 	.word	0x08004af1
 8004a9c:	08004abf 	.word	0x08004abf
 8004aa0:	08004af1 	.word	0x08004af1
 8004aa4:	08004af1 	.word	0x08004af1
 8004aa8:	08004af1 	.word	0x08004af1
 8004aac:	08004ac7 	.word	0x08004ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab0:	f7fd feb6 	bl	8002820 <HAL_RCC_GetPCLK1Freq>
 8004ab4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ab6:	e021      	b.n	8004afc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <UART_SetConfig+0x2f8>)
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004abc:	e01e      	b.n	8004afc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004abe:	f7fd fe41 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 8004ac2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ac4:	e01a      	b.n	8004afc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004acc:	e016      	b.n	8004afc <UART_SetConfig+0x308>
 8004ace:	bf00      	nop
 8004ad0:	cfff69f3 	.word	0xcfff69f3
 8004ad4:	40008000 	.word	0x40008000
 8004ad8:	40013800 	.word	0x40013800
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40004400 	.word	0x40004400
 8004ae4:	40004800 	.word	0x40004800
 8004ae8:	40004c00 	.word	0x40004c00
 8004aec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004afa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 812a 	beq.w	8004d58 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	4a9e      	ldr	r2, [pc, #632]	@ (8004d84 <UART_SetConfig+0x590>)
 8004b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d305      	bcc.n	8004b34 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d903      	bls.n	8004b3c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b3a:	e10d      	b.n	8004d58 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	2200      	movs	r2, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	60fa      	str	r2, [r7, #12]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b48:	4a8e      	ldr	r2, [pc, #568]	@ (8004d84 <UART_SetConfig+0x590>)
 8004b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2200      	movs	r2, #0
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b5e:	f7fb fbaf 	bl	80002c0 <__aeabi_uldivmod>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	020b      	lsls	r3, r1, #8
 8004b74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b78:	0202      	lsls	r2, r0, #8
 8004b7a:	6979      	ldr	r1, [r7, #20]
 8004b7c:	6849      	ldr	r1, [r1, #4]
 8004b7e:	0849      	lsrs	r1, r1, #1
 8004b80:	2000      	movs	r0, #0
 8004b82:	460c      	mov	r4, r1
 8004b84:	4605      	mov	r5, r0
 8004b86:	eb12 0804 	adds.w	r8, r2, r4
 8004b8a:	eb43 0905 	adc.w	r9, r3, r5
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	469a      	mov	sl, r3
 8004b96:	4693      	mov	fp, r2
 8004b98:	4652      	mov	r2, sl
 8004b9a:	465b      	mov	r3, fp
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	f7fb fb8e 	bl	80002c0 <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4613      	mov	r3, r2
 8004baa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bb2:	d308      	bcc.n	8004bc6 <UART_SetConfig+0x3d2>
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bba:	d204      	bcs.n	8004bc6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6a3a      	ldr	r2, [r7, #32]
 8004bc2:	60da      	str	r2, [r3, #12]
 8004bc4:	e0c8      	b.n	8004d58 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004bcc:	e0c4      	b.n	8004d58 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd6:	d167      	bne.n	8004ca8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004bd8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d828      	bhi.n	8004c32 <UART_SetConfig+0x43e>
 8004be0:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <UART_SetConfig+0x3f4>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c15 	.word	0x08004c15
 8004bf0:	08004c1d 	.word	0x08004c1d
 8004bf4:	08004c33 	.word	0x08004c33
 8004bf8:	08004c23 	.word	0x08004c23
 8004bfc:	08004c33 	.word	0x08004c33
 8004c00:	08004c33 	.word	0x08004c33
 8004c04:	08004c33 	.word	0x08004c33
 8004c08:	08004c2b 	.word	0x08004c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c0c:	f7fd fe08 	bl	8002820 <HAL_RCC_GetPCLK1Freq>
 8004c10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c12:	e014      	b.n	8004c3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c14:	f7fd fe1a 	bl	800284c <HAL_RCC_GetPCLK2Freq>
 8004c18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c1a:	e010      	b.n	8004c3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8004d88 <UART_SetConfig+0x594>)
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c20:	e00d      	b.n	8004c3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c22:	f7fd fd8f 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 8004c26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c28:	e009      	b.n	8004c3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c30:	e005      	b.n	8004c3e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8089 	beq.w	8004d58 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4a:	4a4e      	ldr	r2, [pc, #312]	@ (8004d84 <UART_SetConfig+0x590>)
 8004c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c50:	461a      	mov	r2, r3
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c58:	005a      	lsls	r2, r3, #1
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	441a      	add	r2, r3
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	2b0f      	cmp	r3, #15
 8004c70:	d916      	bls.n	8004ca0 <UART_SetConfig+0x4ac>
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c78:	d212      	bcs.n	8004ca0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f023 030f 	bic.w	r3, r3, #15
 8004c82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	8bfb      	ldrh	r3, [r7, #30]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	8bfa      	ldrh	r2, [r7, #30]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	e05b      	b.n	8004d58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ca6:	e057      	b.n	8004d58 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d828      	bhi.n	8004d02 <UART_SetConfig+0x50e>
 8004cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb8 <UART_SetConfig+0x4c4>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004ce5 	.word	0x08004ce5
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	08004d03 	.word	0x08004d03
 8004cc8:	08004cf3 	.word	0x08004cf3
 8004ccc:	08004d03 	.word	0x08004d03
 8004cd0:	08004d03 	.word	0x08004d03
 8004cd4:	08004d03 	.word	0x08004d03
 8004cd8:	08004cfb 	.word	0x08004cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cdc:	f7fd fda0 	bl	8002820 <HAL_RCC_GetPCLK1Freq>
 8004ce0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ce2:	e014      	b.n	8004d0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce4:	f7fd fdb2 	bl	800284c <HAL_RCC_GetPCLK2Freq>
 8004ce8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cea:	e010      	b.n	8004d0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cec:	4b26      	ldr	r3, [pc, #152]	@ (8004d88 <UART_SetConfig+0x594>)
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cf0:	e00d      	b.n	8004d0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7fd fd27 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 8004cf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cf8:	e009      	b.n	8004d0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d00:	e005      	b.n	8004d0e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d0c:	bf00      	nop
    }

    if (pclk != 0U)
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d021      	beq.n	8004d58 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d18:	4a1a      	ldr	r2, [pc, #104]	@ (8004d84 <UART_SetConfig+0x590>)
 8004d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	441a      	add	r2, r3
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	2b0f      	cmp	r3, #15
 8004d3c:	d909      	bls.n	8004d52 <UART_SetConfig+0x55e>
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d44:	d205      	bcs.n	8004d52 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60da      	str	r2, [r3, #12]
 8004d50:	e002      	b.n	8004d58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2200      	movs	r2, #0
 8004d72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004d74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3730      	adds	r7, #48	@ 0x30
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d82:	bf00      	nop
 8004d84:	08006880 	.word	0x08006880
 8004d88:	00f42400 	.word	0x00f42400

08004d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01a      	beq.n	8004ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e8a:	d10a      	bne.n	8004ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b098      	sub	sp, #96	@ 0x60
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ee0:	f7fc f946 	bl	8001170 <HAL_GetTick>
 8004ee4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d12f      	bne.n	8004f54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ef4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f88e 	bl	8005024 <UART_WaitOnFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d022      	beq.n	8004f54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e6      	bne.n	8004f0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e063      	b.n	800501c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d149      	bne.n	8004ff6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f857 	bl	8005024 <UART_WaitOnFlagUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d03c      	beq.n	8004ff6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	623b      	str	r3, [r7, #32]
   return(result);
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e6      	bne.n	8004f7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
 8004fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fce:	61fa      	str	r2, [r7, #28]
 8004fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	69b9      	ldr	r1, [r7, #24]
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	617b      	str	r3, [r7, #20]
   return(result);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e5      	bne.n	8004fae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e012      	b.n	800501c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3758      	adds	r7, #88	@ 0x58
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005034:	e04f      	b.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800503c:	d04b      	beq.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503e:	f7fc f897 	bl	8001170 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	429a      	cmp	r2, r3
 800504c:	d302      	bcc.n	8005054 <UART_WaitOnFlagUntilTimeout+0x30>
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e04e      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b00      	cmp	r3, #0
 8005064:	d037      	beq.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b80      	cmp	r3, #128	@ 0x80
 800506a:	d034      	beq.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b40      	cmp	r3, #64	@ 0x40
 8005070:	d031      	beq.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b08      	cmp	r3, #8
 800507e:	d110      	bne.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2208      	movs	r2, #8
 8005086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f920 	bl	80052ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2208      	movs	r2, #8
 8005092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e029      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050b0:	d111      	bne.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f906 	bl	80052ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e00f      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69da      	ldr	r2, [r3, #28]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4013      	ands	r3, r2
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	bf0c      	ite	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	2300      	movne	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d0a0      	beq.n	8005036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b096      	sub	sp, #88	@ 0x58
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	4613      	mov	r3, r2
 800510c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	88fa      	ldrh	r2, [r7, #6]
 8005118:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2222      	movs	r2, #34	@ 0x22
 8005128:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005132:	2b00      	cmp	r3, #0
 8005134:	d02d      	beq.n	8005192 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800513c:	4a40      	ldr	r2, [pc, #256]	@ (8005240 <UART_Start_Receive_DMA+0x140>)
 800513e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005146:	4a3f      	ldr	r2, [pc, #252]	@ (8005244 <UART_Start_Receive_DMA+0x144>)
 8005148:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005150:	4a3d      	ldr	r2, [pc, #244]	@ (8005248 <UART_Start_Receive_DMA+0x148>)
 8005152:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800515a:	2200      	movs	r2, #0
 800515c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3324      	adds	r3, #36	@ 0x24
 800516a:	4619      	mov	r1, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005170:	461a      	mov	r2, r3
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	f7fc f9c0 	bl	80014f8 <HAL_DMA_Start_IT>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2210      	movs	r2, #16
 8005182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e051      	b.n	8005236 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d018      	beq.n	80051cc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051ba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80051c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e6      	bne.n	800519a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3308      	adds	r3, #8
 80051d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3308      	adds	r3, #8
 80051ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80051ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80051ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80051fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e5      	bne.n	80051cc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3308      	adds	r3, #8
 8005206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	613b      	str	r3, [r7, #16]
   return(result);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3308      	adds	r3, #8
 800521e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005220:	623a      	str	r2, [r7, #32]
 8005222:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	69f9      	ldr	r1, [r7, #28]
 8005226:	6a3a      	ldr	r2, [r7, #32]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	61bb      	str	r3, [r7, #24]
   return(result);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e5      	bne.n	8005200 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3758      	adds	r7, #88	@ 0x58
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	08005451 	.word	0x08005451
 8005244:	0800557d 	.word	0x0800557d
 8005248:	080055bb 	.word	0x080055bb

0800524c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800524c:	b480      	push	{r7}
 800524e:	b08f      	sub	sp, #60	@ 0x3c
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	61fb      	str	r3, [r7, #28]
   return(result);
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005268:	637b      	str	r3, [r7, #52]	@ 0x34
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005274:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e6      	bne.n	8005254 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3308      	adds	r3, #8
 800528c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	60bb      	str	r3, [r7, #8]
   return(result);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800529c:	633b      	str	r3, [r7, #48]	@ 0x30
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3308      	adds	r3, #8
 80052a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052a6:	61ba      	str	r2, [r7, #24]
 80052a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6979      	ldr	r1, [r7, #20]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	613b      	str	r3, [r7, #16]
   return(result);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e5      	bne.n	8005286 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80052c2:	bf00      	nop
 80052c4:	373c      	adds	r7, #60	@ 0x3c
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b095      	sub	sp, #84	@ 0x54
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80052f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e6      	bne.n	80052d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3308      	adds	r3, #8
 800530e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	61fb      	str	r3, [r7, #28]
   return(result);
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3308      	adds	r3, #8
 800532a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800532c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800532e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e3      	bne.n	8005308 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d118      	bne.n	800537a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	60bb      	str	r3, [r7, #8]
   return(result);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f023 0310 	bic.w	r3, r3, #16
 800535c:	647b      	str	r3, [r7, #68]	@ 0x44
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	6979      	ldr	r1, [r7, #20]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	613b      	str	r3, [r7, #16]
   return(result);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e6      	bne.n	8005348 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800538e:	bf00      	nop
 8005390:	3754      	adds	r7, #84	@ 0x54
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b090      	sub	sp, #64	@ 0x40
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d137      	bne.n	8005426 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80053b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80053be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3308      	adds	r3, #8
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	623b      	str	r3, [r7, #32]
   return(result);
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053de:	633a      	str	r2, [r7, #48]	@ 0x30
 80053e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e5      	bne.n	80053be <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005406:	637b      	str	r3, [r7, #52]	@ 0x34
 8005408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005410:	61fb      	str	r3, [r7, #28]
 8005412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	69b9      	ldr	r1, [r7, #24]
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	e841 2300 	strex	r3, r2, [r1]
 800541c:	617b      	str	r3, [r7, #20]
   return(result);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e6      	bne.n	80053f2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005424:	e002      	b.n	800542c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005426:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005428:	f7fb fac6 	bl	80009b8 <HAL_UART_TxCpltCallback>
}
 800542c:	bf00      	nop
 800542e:	3740      	adds	r7, #64	@ 0x40
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005440:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff f9ac 	bl	80047a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b09c      	sub	sp, #112	@ 0x70
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b00      	cmp	r3, #0
 800546a:	d171      	bne.n	8005550 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800546c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800546e:	2200      	movs	r2, #0
 8005470:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800548a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005492:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005494:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005498:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e6      	bne.n	8005474 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3308      	adds	r3, #8
 80054ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b8:	f023 0301 	bic.w	r3, r3, #1
 80054bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80054be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3308      	adds	r3, #8
 80054c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80054c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80054c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e5      	bne.n	80054a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3308      	adds	r3, #8
 80054e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	623b      	str	r3, [r7, #32]
   return(result);
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80054f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3308      	adds	r3, #8
 80054f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80054fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e5      	bne.n	80054da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800550e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005510:	2220      	movs	r2, #32
 8005512:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d118      	bne.n	8005550 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	e853 3f00 	ldrex	r3, [r3]
 800552a:	60fb      	str	r3, [r7, #12]
   return(result);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0310 	bic.w	r3, r3, #16
 8005532:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800553c:	61fb      	str	r3, [r7, #28]
 800553e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	69b9      	ldr	r1, [r7, #24]
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	617b      	str	r3, [r7, #20]
   return(result);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e6      	bne.n	800551e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005552:	2200      	movs	r2, #0
 8005554:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d107      	bne.n	800556e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800555e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005564:	4619      	mov	r1, r3
 8005566:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005568:	f7ff f938 	bl	80047dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800556c:	e002      	b.n	8005574 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800556e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005570:	f7fb fa0a 	bl	8000988 <HAL_UART_RxCpltCallback>
}
 8005574:	bf00      	nop
 8005576:	3770      	adds	r7, #112	@ 0x70
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005588:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2201      	movs	r2, #1
 800558e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005594:	2b01      	cmp	r3, #1
 8005596:	d109      	bne.n	80055ac <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800559e:	085b      	lsrs	r3, r3, #1
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	4619      	mov	r1, r3
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff f919 	bl	80047dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055aa:	e002      	b.n	80055b2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f7ff f901 	bl	80047b4 <HAL_UART_RxHalfCpltCallback>
}
 80055b2:	bf00      	nop
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e2:	2b80      	cmp	r3, #128	@ 0x80
 80055e4:	d109      	bne.n	80055fa <UART_DMAError+0x40>
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b21      	cmp	r3, #33	@ 0x21
 80055ea:	d106      	bne.n	80055fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80055f4:	6978      	ldr	r0, [r7, #20]
 80055f6:	f7ff fe29 	bl	800524c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005604:	2b40      	cmp	r3, #64	@ 0x40
 8005606:	d109      	bne.n	800561c <UART_DMAError+0x62>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b22      	cmp	r3, #34	@ 0x22
 800560c:	d106      	bne.n	800561c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2200      	movs	r2, #0
 8005612:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005616:	6978      	ldr	r0, [r7, #20]
 8005618:	f7ff fe59 	bl	80052ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005622:	f043 0210 	orr.w	r2, r3, #16
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800562c:	6978      	ldr	r0, [r7, #20]
 800562e:	f7ff f8cb 	bl	80047c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005632:	bf00      	nop
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f7ff f8b5 	bl	80047c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800565e:	bf00      	nop
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b088      	sub	sp, #32
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	60bb      	str	r3, [r7, #8]
   return(result);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	61bb      	str	r3, [r7, #24]
 800568e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6979      	ldr	r1, [r7, #20]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	613b      	str	r3, [r7, #16]
   return(result);
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e6      	bne.n	800566e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fb f982 	bl	80009b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056b4:	bf00      	nop
 80056b6:	3720      	adds	r7, #32
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_UARTEx_DisableFifoMode+0x16>
 800570a:	2302      	movs	r3, #2
 800570c:	e027      	b.n	800575e <HAL_UARTEx_DisableFifoMode+0x66>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2224      	movs	r2, #36	@ 0x24
 800571a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0201 	bic.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800573c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800577e:	2302      	movs	r3, #2
 8005780:	e02d      	b.n	80057de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2224      	movs	r2, #36	@ 0x24
 800578e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0201 	bic.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f850 	bl	8005864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e02d      	b.n	800585a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2224      	movs	r2, #36	@ 0x24
 800580a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f812 	bl	8005864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005870:	2b00      	cmp	r3, #0
 8005872:	d108      	bne.n	8005886 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005884:	e031      	b.n	80058ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005886:	2308      	movs	r3, #8
 8005888:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800588a:	2308      	movs	r3, #8
 800588c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	0e5b      	lsrs	r3, r3, #25
 8005896:	b2db      	uxtb	r3, r3
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	0f5b      	lsrs	r3, r3, #29
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058ae:	7bbb      	ldrb	r3, [r7, #14]
 80058b0:	7b3a      	ldrb	r2, [r7, #12]
 80058b2:	4911      	ldr	r1, [pc, #68]	@ (80058f8 <UARTEx_SetNbDataToProcess+0x94>)
 80058b4:	5c8a      	ldrb	r2, [r1, r2]
 80058b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058ba:	7b3a      	ldrb	r2, [r7, #12]
 80058bc:	490f      	ldr	r1, [pc, #60]	@ (80058fc <UARTEx_SetNbDataToProcess+0x98>)
 80058be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	7b7a      	ldrb	r2, [r7, #13]
 80058d0:	4909      	ldr	r1, [pc, #36]	@ (80058f8 <UARTEx_SetNbDataToProcess+0x94>)
 80058d2:	5c8a      	ldrb	r2, [r1, r2]
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058d8:	7b7a      	ldrb	r2, [r7, #13]
 80058da:	4908      	ldr	r1, [pc, #32]	@ (80058fc <UARTEx_SetNbDataToProcess+0x98>)
 80058dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058de:	fb93 f3f2 	sdiv	r3, r3, r2
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	08006898 	.word	0x08006898
 80058fc:	080068a0 	.word	0x080068a0

08005900 <std>:
 8005900:	2300      	movs	r3, #0
 8005902:	b510      	push	{r4, lr}
 8005904:	4604      	mov	r4, r0
 8005906:	e9c0 3300 	strd	r3, r3, [r0]
 800590a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800590e:	6083      	str	r3, [r0, #8]
 8005910:	8181      	strh	r1, [r0, #12]
 8005912:	6643      	str	r3, [r0, #100]	@ 0x64
 8005914:	81c2      	strh	r2, [r0, #14]
 8005916:	6183      	str	r3, [r0, #24]
 8005918:	4619      	mov	r1, r3
 800591a:	2208      	movs	r2, #8
 800591c:	305c      	adds	r0, #92	@ 0x5c
 800591e:	f000 f921 	bl	8005b64 <memset>
 8005922:	4b0d      	ldr	r3, [pc, #52]	@ (8005958 <std+0x58>)
 8005924:	6263      	str	r3, [r4, #36]	@ 0x24
 8005926:	4b0d      	ldr	r3, [pc, #52]	@ (800595c <std+0x5c>)
 8005928:	62a3      	str	r3, [r4, #40]	@ 0x28
 800592a:	4b0d      	ldr	r3, [pc, #52]	@ (8005960 <std+0x60>)
 800592c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800592e:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <std+0x64>)
 8005930:	6323      	str	r3, [r4, #48]	@ 0x30
 8005932:	4b0d      	ldr	r3, [pc, #52]	@ (8005968 <std+0x68>)
 8005934:	6224      	str	r4, [r4, #32]
 8005936:	429c      	cmp	r4, r3
 8005938:	d006      	beq.n	8005948 <std+0x48>
 800593a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800593e:	4294      	cmp	r4, r2
 8005940:	d002      	beq.n	8005948 <std+0x48>
 8005942:	33d0      	adds	r3, #208	@ 0xd0
 8005944:	429c      	cmp	r4, r3
 8005946:	d105      	bne.n	8005954 <std+0x54>
 8005948:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800594c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005950:	f000 b93a 	b.w	8005bc8 <__retarget_lock_init_recursive>
 8005954:	bd10      	pop	{r4, pc}
 8005956:	bf00      	nop
 8005958:	08006421 	.word	0x08006421
 800595c:	08006443 	.word	0x08006443
 8005960:	0800647b 	.word	0x0800647b
 8005964:	0800649f 	.word	0x0800649f
 8005968:	2000032c 	.word	0x2000032c

0800596c <stdio_exit_handler>:
 800596c:	4a02      	ldr	r2, [pc, #8]	@ (8005978 <stdio_exit_handler+0xc>)
 800596e:	4903      	ldr	r1, [pc, #12]	@ (800597c <stdio_exit_handler+0x10>)
 8005970:	4803      	ldr	r0, [pc, #12]	@ (8005980 <stdio_exit_handler+0x14>)
 8005972:	f000 b869 	b.w	8005a48 <_fwalk_sglue>
 8005976:	bf00      	nop
 8005978:	2000000c 	.word	0x2000000c
 800597c:	080063b9 	.word	0x080063b9
 8005980:	2000001c 	.word	0x2000001c

08005984 <cleanup_stdio>:
 8005984:	6841      	ldr	r1, [r0, #4]
 8005986:	4b0c      	ldr	r3, [pc, #48]	@ (80059b8 <cleanup_stdio+0x34>)
 8005988:	4299      	cmp	r1, r3
 800598a:	b510      	push	{r4, lr}
 800598c:	4604      	mov	r4, r0
 800598e:	d001      	beq.n	8005994 <cleanup_stdio+0x10>
 8005990:	f000 fd12 	bl	80063b8 <_fflush_r>
 8005994:	68a1      	ldr	r1, [r4, #8]
 8005996:	4b09      	ldr	r3, [pc, #36]	@ (80059bc <cleanup_stdio+0x38>)
 8005998:	4299      	cmp	r1, r3
 800599a:	d002      	beq.n	80059a2 <cleanup_stdio+0x1e>
 800599c:	4620      	mov	r0, r4
 800599e:	f000 fd0b 	bl	80063b8 <_fflush_r>
 80059a2:	68e1      	ldr	r1, [r4, #12]
 80059a4:	4b06      	ldr	r3, [pc, #24]	@ (80059c0 <cleanup_stdio+0x3c>)
 80059a6:	4299      	cmp	r1, r3
 80059a8:	d004      	beq.n	80059b4 <cleanup_stdio+0x30>
 80059aa:	4620      	mov	r0, r4
 80059ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b0:	f000 bd02 	b.w	80063b8 <_fflush_r>
 80059b4:	bd10      	pop	{r4, pc}
 80059b6:	bf00      	nop
 80059b8:	2000032c 	.word	0x2000032c
 80059bc:	20000394 	.word	0x20000394
 80059c0:	200003fc 	.word	0x200003fc

080059c4 <global_stdio_init.part.0>:
 80059c4:	b510      	push	{r4, lr}
 80059c6:	4b0b      	ldr	r3, [pc, #44]	@ (80059f4 <global_stdio_init.part.0+0x30>)
 80059c8:	4c0b      	ldr	r4, [pc, #44]	@ (80059f8 <global_stdio_init.part.0+0x34>)
 80059ca:	4a0c      	ldr	r2, [pc, #48]	@ (80059fc <global_stdio_init.part.0+0x38>)
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	4620      	mov	r0, r4
 80059d0:	2200      	movs	r2, #0
 80059d2:	2104      	movs	r1, #4
 80059d4:	f7ff ff94 	bl	8005900 <std>
 80059d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059dc:	2201      	movs	r2, #1
 80059de:	2109      	movs	r1, #9
 80059e0:	f7ff ff8e 	bl	8005900 <std>
 80059e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059e8:	2202      	movs	r2, #2
 80059ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ee:	2112      	movs	r1, #18
 80059f0:	f7ff bf86 	b.w	8005900 <std>
 80059f4:	20000464 	.word	0x20000464
 80059f8:	2000032c 	.word	0x2000032c
 80059fc:	0800596d 	.word	0x0800596d

08005a00 <__sfp_lock_acquire>:
 8005a00:	4801      	ldr	r0, [pc, #4]	@ (8005a08 <__sfp_lock_acquire+0x8>)
 8005a02:	f000 b8e2 	b.w	8005bca <__retarget_lock_acquire_recursive>
 8005a06:	bf00      	nop
 8005a08:	20000469 	.word	0x20000469

08005a0c <__sfp_lock_release>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	@ (8005a14 <__sfp_lock_release+0x8>)
 8005a0e:	f000 b8dd 	b.w	8005bcc <__retarget_lock_release_recursive>
 8005a12:	bf00      	nop
 8005a14:	20000469 	.word	0x20000469

08005a18 <__sinit>:
 8005a18:	b510      	push	{r4, lr}
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	f7ff fff0 	bl	8005a00 <__sfp_lock_acquire>
 8005a20:	6a23      	ldr	r3, [r4, #32]
 8005a22:	b11b      	cbz	r3, 8005a2c <__sinit+0x14>
 8005a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a28:	f7ff bff0 	b.w	8005a0c <__sfp_lock_release>
 8005a2c:	4b04      	ldr	r3, [pc, #16]	@ (8005a40 <__sinit+0x28>)
 8005a2e:	6223      	str	r3, [r4, #32]
 8005a30:	4b04      	ldr	r3, [pc, #16]	@ (8005a44 <__sinit+0x2c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1f5      	bne.n	8005a24 <__sinit+0xc>
 8005a38:	f7ff ffc4 	bl	80059c4 <global_stdio_init.part.0>
 8005a3c:	e7f2      	b.n	8005a24 <__sinit+0xc>
 8005a3e:	bf00      	nop
 8005a40:	08005985 	.word	0x08005985
 8005a44:	20000464 	.word	0x20000464

08005a48 <_fwalk_sglue>:
 8005a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a4c:	4607      	mov	r7, r0
 8005a4e:	4688      	mov	r8, r1
 8005a50:	4614      	mov	r4, r2
 8005a52:	2600      	movs	r6, #0
 8005a54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a58:	f1b9 0901 	subs.w	r9, r9, #1
 8005a5c:	d505      	bpl.n	8005a6a <_fwalk_sglue+0x22>
 8005a5e:	6824      	ldr	r4, [r4, #0]
 8005a60:	2c00      	cmp	r4, #0
 8005a62:	d1f7      	bne.n	8005a54 <_fwalk_sglue+0xc>
 8005a64:	4630      	mov	r0, r6
 8005a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a6a:	89ab      	ldrh	r3, [r5, #12]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d907      	bls.n	8005a80 <_fwalk_sglue+0x38>
 8005a70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a74:	3301      	adds	r3, #1
 8005a76:	d003      	beq.n	8005a80 <_fwalk_sglue+0x38>
 8005a78:	4629      	mov	r1, r5
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	47c0      	blx	r8
 8005a7e:	4306      	orrs	r6, r0
 8005a80:	3568      	adds	r5, #104	@ 0x68
 8005a82:	e7e9      	b.n	8005a58 <_fwalk_sglue+0x10>

08005a84 <iprintf>:
 8005a84:	b40f      	push	{r0, r1, r2, r3}
 8005a86:	b507      	push	{r0, r1, r2, lr}
 8005a88:	4906      	ldr	r1, [pc, #24]	@ (8005aa4 <iprintf+0x20>)
 8005a8a:	ab04      	add	r3, sp, #16
 8005a8c:	6808      	ldr	r0, [r1, #0]
 8005a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a92:	6881      	ldr	r1, [r0, #8]
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	f000 f8c3 	bl	8005c20 <_vfiprintf_r>
 8005a9a:	b003      	add	sp, #12
 8005a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa0:	b004      	add	sp, #16
 8005aa2:	4770      	bx	lr
 8005aa4:	20000018 	.word	0x20000018

08005aa8 <_puts_r>:
 8005aa8:	6a03      	ldr	r3, [r0, #32]
 8005aaa:	b570      	push	{r4, r5, r6, lr}
 8005aac:	6884      	ldr	r4, [r0, #8]
 8005aae:	4605      	mov	r5, r0
 8005ab0:	460e      	mov	r6, r1
 8005ab2:	b90b      	cbnz	r3, 8005ab8 <_puts_r+0x10>
 8005ab4:	f7ff ffb0 	bl	8005a18 <__sinit>
 8005ab8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005aba:	07db      	lsls	r3, r3, #31
 8005abc:	d405      	bmi.n	8005aca <_puts_r+0x22>
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	0598      	lsls	r0, r3, #22
 8005ac2:	d402      	bmi.n	8005aca <_puts_r+0x22>
 8005ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ac6:	f000 f880 	bl	8005bca <__retarget_lock_acquire_recursive>
 8005aca:	89a3      	ldrh	r3, [r4, #12]
 8005acc:	0719      	lsls	r1, r3, #28
 8005ace:	d502      	bpl.n	8005ad6 <_puts_r+0x2e>
 8005ad0:	6923      	ldr	r3, [r4, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d135      	bne.n	8005b42 <_puts_r+0x9a>
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	4628      	mov	r0, r5
 8005ada:	f000 fd23 	bl	8006524 <__swsetup_r>
 8005ade:	b380      	cbz	r0, 8005b42 <_puts_r+0x9a>
 8005ae0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005ae4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ae6:	07da      	lsls	r2, r3, #31
 8005ae8:	d405      	bmi.n	8005af6 <_puts_r+0x4e>
 8005aea:	89a3      	ldrh	r3, [r4, #12]
 8005aec:	059b      	lsls	r3, r3, #22
 8005aee:	d402      	bmi.n	8005af6 <_puts_r+0x4e>
 8005af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005af2:	f000 f86b 	bl	8005bcc <__retarget_lock_release_recursive>
 8005af6:	4628      	mov	r0, r5
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	da04      	bge.n	8005b08 <_puts_r+0x60>
 8005afe:	69a2      	ldr	r2, [r4, #24]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	dc17      	bgt.n	8005b34 <_puts_r+0x8c>
 8005b04:	290a      	cmp	r1, #10
 8005b06:	d015      	beq.n	8005b34 <_puts_r+0x8c>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	6022      	str	r2, [r4, #0]
 8005b0e:	7019      	strb	r1, [r3, #0]
 8005b10:	68a3      	ldr	r3, [r4, #8]
 8005b12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b16:	3b01      	subs	r3, #1
 8005b18:	60a3      	str	r3, [r4, #8]
 8005b1a:	2900      	cmp	r1, #0
 8005b1c:	d1ed      	bne.n	8005afa <_puts_r+0x52>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	da11      	bge.n	8005b46 <_puts_r+0x9e>
 8005b22:	4622      	mov	r2, r4
 8005b24:	210a      	movs	r1, #10
 8005b26:	4628      	mov	r0, r5
 8005b28:	f000 fcbd 	bl	80064a6 <__swbuf_r>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d0d7      	beq.n	8005ae0 <_puts_r+0x38>
 8005b30:	250a      	movs	r5, #10
 8005b32:	e7d7      	b.n	8005ae4 <_puts_r+0x3c>
 8005b34:	4622      	mov	r2, r4
 8005b36:	4628      	mov	r0, r5
 8005b38:	f000 fcb5 	bl	80064a6 <__swbuf_r>
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d1e7      	bne.n	8005b10 <_puts_r+0x68>
 8005b40:	e7ce      	b.n	8005ae0 <_puts_r+0x38>
 8005b42:	3e01      	subs	r6, #1
 8005b44:	e7e4      	b.n	8005b10 <_puts_r+0x68>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	6022      	str	r2, [r4, #0]
 8005b4c:	220a      	movs	r2, #10
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e7ee      	b.n	8005b30 <_puts_r+0x88>
	...

08005b54 <puts>:
 8005b54:	4b02      	ldr	r3, [pc, #8]	@ (8005b60 <puts+0xc>)
 8005b56:	4601      	mov	r1, r0
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	f7ff bfa5 	b.w	8005aa8 <_puts_r>
 8005b5e:	bf00      	nop
 8005b60:	20000018 	.word	0x20000018

08005b64 <memset>:
 8005b64:	4402      	add	r2, r0
 8005b66:	4603      	mov	r3, r0
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d100      	bne.n	8005b6e <memset+0xa>
 8005b6c:	4770      	bx	lr
 8005b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b72:	e7f9      	b.n	8005b68 <memset+0x4>

08005b74 <__errno>:
 8005b74:	4b01      	ldr	r3, [pc, #4]	@ (8005b7c <__errno+0x8>)
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	20000018 	.word	0x20000018

08005b80 <__libc_init_array>:
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	4d0d      	ldr	r5, [pc, #52]	@ (8005bb8 <__libc_init_array+0x38>)
 8005b84:	4c0d      	ldr	r4, [pc, #52]	@ (8005bbc <__libc_init_array+0x3c>)
 8005b86:	1b64      	subs	r4, r4, r5
 8005b88:	10a4      	asrs	r4, r4, #2
 8005b8a:	2600      	movs	r6, #0
 8005b8c:	42a6      	cmp	r6, r4
 8005b8e:	d109      	bne.n	8005ba4 <__libc_init_array+0x24>
 8005b90:	4d0b      	ldr	r5, [pc, #44]	@ (8005bc0 <__libc_init_array+0x40>)
 8005b92:	4c0c      	ldr	r4, [pc, #48]	@ (8005bc4 <__libc_init_array+0x44>)
 8005b94:	f000 fe40 	bl	8006818 <_init>
 8005b98:	1b64      	subs	r4, r4, r5
 8005b9a:	10a4      	asrs	r4, r4, #2
 8005b9c:	2600      	movs	r6, #0
 8005b9e:	42a6      	cmp	r6, r4
 8005ba0:	d105      	bne.n	8005bae <__libc_init_array+0x2e>
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba8:	4798      	blx	r3
 8005baa:	3601      	adds	r6, #1
 8005bac:	e7ee      	b.n	8005b8c <__libc_init_array+0xc>
 8005bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb2:	4798      	blx	r3
 8005bb4:	3601      	adds	r6, #1
 8005bb6:	e7f2      	b.n	8005b9e <__libc_init_array+0x1e>
 8005bb8:	080068e4 	.word	0x080068e4
 8005bbc:	080068e4 	.word	0x080068e4
 8005bc0:	080068e4 	.word	0x080068e4
 8005bc4:	080068e8 	.word	0x080068e8

08005bc8 <__retarget_lock_init_recursive>:
 8005bc8:	4770      	bx	lr

08005bca <__retarget_lock_acquire_recursive>:
 8005bca:	4770      	bx	lr

08005bcc <__retarget_lock_release_recursive>:
 8005bcc:	4770      	bx	lr

08005bce <__sfputc_r>:
 8005bce:	6893      	ldr	r3, [r2, #8]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	b410      	push	{r4}
 8005bd6:	6093      	str	r3, [r2, #8]
 8005bd8:	da08      	bge.n	8005bec <__sfputc_r+0x1e>
 8005bda:	6994      	ldr	r4, [r2, #24]
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	db01      	blt.n	8005be4 <__sfputc_r+0x16>
 8005be0:	290a      	cmp	r1, #10
 8005be2:	d103      	bne.n	8005bec <__sfputc_r+0x1e>
 8005be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005be8:	f000 bc5d 	b.w	80064a6 <__swbuf_r>
 8005bec:	6813      	ldr	r3, [r2, #0]
 8005bee:	1c58      	adds	r0, r3, #1
 8005bf0:	6010      	str	r0, [r2, #0]
 8005bf2:	7019      	strb	r1, [r3, #0]
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <__sfputs_r>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460f      	mov	r7, r1
 8005c02:	4614      	mov	r4, r2
 8005c04:	18d5      	adds	r5, r2, r3
 8005c06:	42ac      	cmp	r4, r5
 8005c08:	d101      	bne.n	8005c0e <__sfputs_r+0x12>
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	e007      	b.n	8005c1e <__sfputs_r+0x22>
 8005c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c12:	463a      	mov	r2, r7
 8005c14:	4630      	mov	r0, r6
 8005c16:	f7ff ffda 	bl	8005bce <__sfputc_r>
 8005c1a:	1c43      	adds	r3, r0, #1
 8005c1c:	d1f3      	bne.n	8005c06 <__sfputs_r+0xa>
 8005c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c20 <_vfiprintf_r>:
 8005c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c24:	460d      	mov	r5, r1
 8005c26:	b09d      	sub	sp, #116	@ 0x74
 8005c28:	4614      	mov	r4, r2
 8005c2a:	4698      	mov	r8, r3
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	b118      	cbz	r0, 8005c38 <_vfiprintf_r+0x18>
 8005c30:	6a03      	ldr	r3, [r0, #32]
 8005c32:	b90b      	cbnz	r3, 8005c38 <_vfiprintf_r+0x18>
 8005c34:	f7ff fef0 	bl	8005a18 <__sinit>
 8005c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c3a:	07d9      	lsls	r1, r3, #31
 8005c3c:	d405      	bmi.n	8005c4a <_vfiprintf_r+0x2a>
 8005c3e:	89ab      	ldrh	r3, [r5, #12]
 8005c40:	059a      	lsls	r2, r3, #22
 8005c42:	d402      	bmi.n	8005c4a <_vfiprintf_r+0x2a>
 8005c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c46:	f7ff ffc0 	bl	8005bca <__retarget_lock_acquire_recursive>
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	071b      	lsls	r3, r3, #28
 8005c4e:	d501      	bpl.n	8005c54 <_vfiprintf_r+0x34>
 8005c50:	692b      	ldr	r3, [r5, #16]
 8005c52:	b99b      	cbnz	r3, 8005c7c <_vfiprintf_r+0x5c>
 8005c54:	4629      	mov	r1, r5
 8005c56:	4630      	mov	r0, r6
 8005c58:	f000 fc64 	bl	8006524 <__swsetup_r>
 8005c5c:	b170      	cbz	r0, 8005c7c <_vfiprintf_r+0x5c>
 8005c5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c60:	07dc      	lsls	r4, r3, #31
 8005c62:	d504      	bpl.n	8005c6e <_vfiprintf_r+0x4e>
 8005c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c68:	b01d      	add	sp, #116	@ 0x74
 8005c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6e:	89ab      	ldrh	r3, [r5, #12]
 8005c70:	0598      	lsls	r0, r3, #22
 8005c72:	d4f7      	bmi.n	8005c64 <_vfiprintf_r+0x44>
 8005c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c76:	f7ff ffa9 	bl	8005bcc <__retarget_lock_release_recursive>
 8005c7a:	e7f3      	b.n	8005c64 <_vfiprintf_r+0x44>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c80:	2320      	movs	r3, #32
 8005c82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c8a:	2330      	movs	r3, #48	@ 0x30
 8005c8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e3c <_vfiprintf_r+0x21c>
 8005c90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c94:	f04f 0901 	mov.w	r9, #1
 8005c98:	4623      	mov	r3, r4
 8005c9a:	469a      	mov	sl, r3
 8005c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ca0:	b10a      	cbz	r2, 8005ca6 <_vfiprintf_r+0x86>
 8005ca2:	2a25      	cmp	r2, #37	@ 0x25
 8005ca4:	d1f9      	bne.n	8005c9a <_vfiprintf_r+0x7a>
 8005ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8005caa:	d00b      	beq.n	8005cc4 <_vfiprintf_r+0xa4>
 8005cac:	465b      	mov	r3, fp
 8005cae:	4622      	mov	r2, r4
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f7ff ffa2 	bl	8005bfc <__sfputs_r>
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f000 80a7 	beq.w	8005e0c <_vfiprintf_r+0x1ec>
 8005cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cc0:	445a      	add	r2, fp
 8005cc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 809f 	beq.w	8005e0c <_vfiprintf_r+0x1ec>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cd8:	f10a 0a01 	add.w	sl, sl, #1
 8005cdc:	9304      	str	r3, [sp, #16]
 8005cde:	9307      	str	r3, [sp, #28]
 8005ce0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ce6:	4654      	mov	r4, sl
 8005ce8:	2205      	movs	r2, #5
 8005cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cee:	4853      	ldr	r0, [pc, #332]	@ (8005e3c <_vfiprintf_r+0x21c>)
 8005cf0:	f7fa fa96 	bl	8000220 <memchr>
 8005cf4:	9a04      	ldr	r2, [sp, #16]
 8005cf6:	b9d8      	cbnz	r0, 8005d30 <_vfiprintf_r+0x110>
 8005cf8:	06d1      	lsls	r1, r2, #27
 8005cfa:	bf44      	itt	mi
 8005cfc:	2320      	movmi	r3, #32
 8005cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d02:	0713      	lsls	r3, r2, #28
 8005d04:	bf44      	itt	mi
 8005d06:	232b      	movmi	r3, #43	@ 0x2b
 8005d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d12:	d015      	beq.n	8005d40 <_vfiprintf_r+0x120>
 8005d14:	9a07      	ldr	r2, [sp, #28]
 8005d16:	4654      	mov	r4, sl
 8005d18:	2000      	movs	r0, #0
 8005d1a:	f04f 0c0a 	mov.w	ip, #10
 8005d1e:	4621      	mov	r1, r4
 8005d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d24:	3b30      	subs	r3, #48	@ 0x30
 8005d26:	2b09      	cmp	r3, #9
 8005d28:	d94b      	bls.n	8005dc2 <_vfiprintf_r+0x1a2>
 8005d2a:	b1b0      	cbz	r0, 8005d5a <_vfiprintf_r+0x13a>
 8005d2c:	9207      	str	r2, [sp, #28]
 8005d2e:	e014      	b.n	8005d5a <_vfiprintf_r+0x13a>
 8005d30:	eba0 0308 	sub.w	r3, r0, r8
 8005d34:	fa09 f303 	lsl.w	r3, r9, r3
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	9304      	str	r3, [sp, #16]
 8005d3c:	46a2      	mov	sl, r4
 8005d3e:	e7d2      	b.n	8005ce6 <_vfiprintf_r+0xc6>
 8005d40:	9b03      	ldr	r3, [sp, #12]
 8005d42:	1d19      	adds	r1, r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	9103      	str	r1, [sp, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bfbb      	ittet	lt
 8005d4c:	425b      	neglt	r3, r3
 8005d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8005d52:	9307      	strge	r3, [sp, #28]
 8005d54:	9307      	strlt	r3, [sp, #28]
 8005d56:	bfb8      	it	lt
 8005d58:	9204      	strlt	r2, [sp, #16]
 8005d5a:	7823      	ldrb	r3, [r4, #0]
 8005d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d5e:	d10a      	bne.n	8005d76 <_vfiprintf_r+0x156>
 8005d60:	7863      	ldrb	r3, [r4, #1]
 8005d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d64:	d132      	bne.n	8005dcc <_vfiprintf_r+0x1ac>
 8005d66:	9b03      	ldr	r3, [sp, #12]
 8005d68:	1d1a      	adds	r2, r3, #4
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	9203      	str	r2, [sp, #12]
 8005d6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d72:	3402      	adds	r4, #2
 8005d74:	9305      	str	r3, [sp, #20]
 8005d76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e4c <_vfiprintf_r+0x22c>
 8005d7a:	7821      	ldrb	r1, [r4, #0]
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	4650      	mov	r0, sl
 8005d80:	f7fa fa4e 	bl	8000220 <memchr>
 8005d84:	b138      	cbz	r0, 8005d96 <_vfiprintf_r+0x176>
 8005d86:	9b04      	ldr	r3, [sp, #16]
 8005d88:	eba0 000a 	sub.w	r0, r0, sl
 8005d8c:	2240      	movs	r2, #64	@ 0x40
 8005d8e:	4082      	lsls	r2, r0
 8005d90:	4313      	orrs	r3, r2
 8005d92:	3401      	adds	r4, #1
 8005d94:	9304      	str	r3, [sp, #16]
 8005d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d9a:	4829      	ldr	r0, [pc, #164]	@ (8005e40 <_vfiprintf_r+0x220>)
 8005d9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005da0:	2206      	movs	r2, #6
 8005da2:	f7fa fa3d 	bl	8000220 <memchr>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d03f      	beq.n	8005e2a <_vfiprintf_r+0x20a>
 8005daa:	4b26      	ldr	r3, [pc, #152]	@ (8005e44 <_vfiprintf_r+0x224>)
 8005dac:	bb1b      	cbnz	r3, 8005df6 <_vfiprintf_r+0x1d6>
 8005dae:	9b03      	ldr	r3, [sp, #12]
 8005db0:	3307      	adds	r3, #7
 8005db2:	f023 0307 	bic.w	r3, r3, #7
 8005db6:	3308      	adds	r3, #8
 8005db8:	9303      	str	r3, [sp, #12]
 8005dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dbc:	443b      	add	r3, r7
 8005dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dc0:	e76a      	b.n	8005c98 <_vfiprintf_r+0x78>
 8005dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	2001      	movs	r0, #1
 8005dca:	e7a8      	b.n	8005d1e <_vfiprintf_r+0xfe>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	3401      	adds	r4, #1
 8005dd0:	9305      	str	r3, [sp, #20]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	f04f 0c0a 	mov.w	ip, #10
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dde:	3a30      	subs	r2, #48	@ 0x30
 8005de0:	2a09      	cmp	r2, #9
 8005de2:	d903      	bls.n	8005dec <_vfiprintf_r+0x1cc>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0c6      	beq.n	8005d76 <_vfiprintf_r+0x156>
 8005de8:	9105      	str	r1, [sp, #20]
 8005dea:	e7c4      	b.n	8005d76 <_vfiprintf_r+0x156>
 8005dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8005df0:	4604      	mov	r4, r0
 8005df2:	2301      	movs	r3, #1
 8005df4:	e7f0      	b.n	8005dd8 <_vfiprintf_r+0x1b8>
 8005df6:	ab03      	add	r3, sp, #12
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	4b12      	ldr	r3, [pc, #72]	@ (8005e48 <_vfiprintf_r+0x228>)
 8005dfe:	a904      	add	r1, sp, #16
 8005e00:	4630      	mov	r0, r6
 8005e02:	f3af 8000 	nop.w
 8005e06:	4607      	mov	r7, r0
 8005e08:	1c78      	adds	r0, r7, #1
 8005e0a:	d1d6      	bne.n	8005dba <_vfiprintf_r+0x19a>
 8005e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e0e:	07d9      	lsls	r1, r3, #31
 8005e10:	d405      	bmi.n	8005e1e <_vfiprintf_r+0x1fe>
 8005e12:	89ab      	ldrh	r3, [r5, #12]
 8005e14:	059a      	lsls	r2, r3, #22
 8005e16:	d402      	bmi.n	8005e1e <_vfiprintf_r+0x1fe>
 8005e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e1a:	f7ff fed7 	bl	8005bcc <__retarget_lock_release_recursive>
 8005e1e:	89ab      	ldrh	r3, [r5, #12]
 8005e20:	065b      	lsls	r3, r3, #25
 8005e22:	f53f af1f 	bmi.w	8005c64 <_vfiprintf_r+0x44>
 8005e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e28:	e71e      	b.n	8005c68 <_vfiprintf_r+0x48>
 8005e2a:	ab03      	add	r3, sp, #12
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	462a      	mov	r2, r5
 8005e30:	4b05      	ldr	r3, [pc, #20]	@ (8005e48 <_vfiprintf_r+0x228>)
 8005e32:	a904      	add	r1, sp, #16
 8005e34:	4630      	mov	r0, r6
 8005e36:	f000 f91b 	bl	8006070 <_printf_i>
 8005e3a:	e7e4      	b.n	8005e06 <_vfiprintf_r+0x1e6>
 8005e3c:	080068a8 	.word	0x080068a8
 8005e40:	080068b2 	.word	0x080068b2
 8005e44:	00000000 	.word	0x00000000
 8005e48:	08005bfd 	.word	0x08005bfd
 8005e4c:	080068ae 	.word	0x080068ae

08005e50 <sbrk_aligned>:
 8005e50:	b570      	push	{r4, r5, r6, lr}
 8005e52:	4e0f      	ldr	r6, [pc, #60]	@ (8005e90 <sbrk_aligned+0x40>)
 8005e54:	460c      	mov	r4, r1
 8005e56:	6831      	ldr	r1, [r6, #0]
 8005e58:	4605      	mov	r5, r0
 8005e5a:	b911      	cbnz	r1, 8005e62 <sbrk_aligned+0x12>
 8005e5c:	f000 fc70 	bl	8006740 <_sbrk_r>
 8005e60:	6030      	str	r0, [r6, #0]
 8005e62:	4621      	mov	r1, r4
 8005e64:	4628      	mov	r0, r5
 8005e66:	f000 fc6b 	bl	8006740 <_sbrk_r>
 8005e6a:	1c43      	adds	r3, r0, #1
 8005e6c:	d103      	bne.n	8005e76 <sbrk_aligned+0x26>
 8005e6e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005e72:	4620      	mov	r0, r4
 8005e74:	bd70      	pop	{r4, r5, r6, pc}
 8005e76:	1cc4      	adds	r4, r0, #3
 8005e78:	f024 0403 	bic.w	r4, r4, #3
 8005e7c:	42a0      	cmp	r0, r4
 8005e7e:	d0f8      	beq.n	8005e72 <sbrk_aligned+0x22>
 8005e80:	1a21      	subs	r1, r4, r0
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 fc5c 	bl	8006740 <_sbrk_r>
 8005e88:	3001      	adds	r0, #1
 8005e8a:	d1f2      	bne.n	8005e72 <sbrk_aligned+0x22>
 8005e8c:	e7ef      	b.n	8005e6e <sbrk_aligned+0x1e>
 8005e8e:	bf00      	nop
 8005e90:	2000046c 	.word	0x2000046c

08005e94 <_malloc_r>:
 8005e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e98:	1ccd      	adds	r5, r1, #3
 8005e9a:	f025 0503 	bic.w	r5, r5, #3
 8005e9e:	3508      	adds	r5, #8
 8005ea0:	2d0c      	cmp	r5, #12
 8005ea2:	bf38      	it	cc
 8005ea4:	250c      	movcc	r5, #12
 8005ea6:	2d00      	cmp	r5, #0
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	db01      	blt.n	8005eb0 <_malloc_r+0x1c>
 8005eac:	42a9      	cmp	r1, r5
 8005eae:	d904      	bls.n	8005eba <_malloc_r+0x26>
 8005eb0:	230c      	movs	r3, #12
 8005eb2:	6033      	str	r3, [r6, #0]
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f90 <_malloc_r+0xfc>
 8005ebe:	f000 faa3 	bl	8006408 <__malloc_lock>
 8005ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ec6:	461c      	mov	r4, r3
 8005ec8:	bb44      	cbnz	r4, 8005f1c <_malloc_r+0x88>
 8005eca:	4629      	mov	r1, r5
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f7ff ffbf 	bl	8005e50 <sbrk_aligned>
 8005ed2:	1c43      	adds	r3, r0, #1
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	d158      	bne.n	8005f8a <_malloc_r+0xf6>
 8005ed8:	f8d8 4000 	ldr.w	r4, [r8]
 8005edc:	4627      	mov	r7, r4
 8005ede:	2f00      	cmp	r7, #0
 8005ee0:	d143      	bne.n	8005f6a <_malloc_r+0xd6>
 8005ee2:	2c00      	cmp	r4, #0
 8005ee4:	d04b      	beq.n	8005f7e <_malloc_r+0xea>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	4639      	mov	r1, r7
 8005eea:	4630      	mov	r0, r6
 8005eec:	eb04 0903 	add.w	r9, r4, r3
 8005ef0:	f000 fc26 	bl	8006740 <_sbrk_r>
 8005ef4:	4581      	cmp	r9, r0
 8005ef6:	d142      	bne.n	8005f7e <_malloc_r+0xea>
 8005ef8:	6821      	ldr	r1, [r4, #0]
 8005efa:	1a6d      	subs	r5, r5, r1
 8005efc:	4629      	mov	r1, r5
 8005efe:	4630      	mov	r0, r6
 8005f00:	f7ff ffa6 	bl	8005e50 <sbrk_aligned>
 8005f04:	3001      	adds	r0, #1
 8005f06:	d03a      	beq.n	8005f7e <_malloc_r+0xea>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	442b      	add	r3, r5
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	bb62      	cbnz	r2, 8005f70 <_malloc_r+0xdc>
 8005f16:	f8c8 7000 	str.w	r7, [r8]
 8005f1a:	e00f      	b.n	8005f3c <_malloc_r+0xa8>
 8005f1c:	6822      	ldr	r2, [r4, #0]
 8005f1e:	1b52      	subs	r2, r2, r5
 8005f20:	d420      	bmi.n	8005f64 <_malloc_r+0xd0>
 8005f22:	2a0b      	cmp	r2, #11
 8005f24:	d917      	bls.n	8005f56 <_malloc_r+0xc2>
 8005f26:	1961      	adds	r1, r4, r5
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	6025      	str	r5, [r4, #0]
 8005f2c:	bf18      	it	ne
 8005f2e:	6059      	strne	r1, [r3, #4]
 8005f30:	6863      	ldr	r3, [r4, #4]
 8005f32:	bf08      	it	eq
 8005f34:	f8c8 1000 	streq.w	r1, [r8]
 8005f38:	5162      	str	r2, [r4, r5]
 8005f3a:	604b      	str	r3, [r1, #4]
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f000 fa69 	bl	8006414 <__malloc_unlock>
 8005f42:	f104 000b 	add.w	r0, r4, #11
 8005f46:	1d23      	adds	r3, r4, #4
 8005f48:	f020 0007 	bic.w	r0, r0, #7
 8005f4c:	1ac2      	subs	r2, r0, r3
 8005f4e:	bf1c      	itt	ne
 8005f50:	1a1b      	subne	r3, r3, r0
 8005f52:	50a3      	strne	r3, [r4, r2]
 8005f54:	e7af      	b.n	8005eb6 <_malloc_r+0x22>
 8005f56:	6862      	ldr	r2, [r4, #4]
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	bf0c      	ite	eq
 8005f5c:	f8c8 2000 	streq.w	r2, [r8]
 8005f60:	605a      	strne	r2, [r3, #4]
 8005f62:	e7eb      	b.n	8005f3c <_malloc_r+0xa8>
 8005f64:	4623      	mov	r3, r4
 8005f66:	6864      	ldr	r4, [r4, #4]
 8005f68:	e7ae      	b.n	8005ec8 <_malloc_r+0x34>
 8005f6a:	463c      	mov	r4, r7
 8005f6c:	687f      	ldr	r7, [r7, #4]
 8005f6e:	e7b6      	b.n	8005ede <_malloc_r+0x4a>
 8005f70:	461a      	mov	r2, r3
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	42a3      	cmp	r3, r4
 8005f76:	d1fb      	bne.n	8005f70 <_malloc_r+0xdc>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	6053      	str	r3, [r2, #4]
 8005f7c:	e7de      	b.n	8005f3c <_malloc_r+0xa8>
 8005f7e:	230c      	movs	r3, #12
 8005f80:	6033      	str	r3, [r6, #0]
 8005f82:	4630      	mov	r0, r6
 8005f84:	f000 fa46 	bl	8006414 <__malloc_unlock>
 8005f88:	e794      	b.n	8005eb4 <_malloc_r+0x20>
 8005f8a:	6005      	str	r5, [r0, #0]
 8005f8c:	e7d6      	b.n	8005f3c <_malloc_r+0xa8>
 8005f8e:	bf00      	nop
 8005f90:	20000470 	.word	0x20000470

08005f94 <_printf_common>:
 8005f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f98:	4616      	mov	r6, r2
 8005f9a:	4698      	mov	r8, r3
 8005f9c:	688a      	ldr	r2, [r1, #8]
 8005f9e:	690b      	ldr	r3, [r1, #16]
 8005fa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	bfb8      	it	lt
 8005fa8:	4613      	movlt	r3, r2
 8005faa:	6033      	str	r3, [r6, #0]
 8005fac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	b10a      	cbz	r2, 8005fba <_printf_common+0x26>
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	6033      	str	r3, [r6, #0]
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	0699      	lsls	r1, r3, #26
 8005fbe:	bf42      	ittt	mi
 8005fc0:	6833      	ldrmi	r3, [r6, #0]
 8005fc2:	3302      	addmi	r3, #2
 8005fc4:	6033      	strmi	r3, [r6, #0]
 8005fc6:	6825      	ldr	r5, [r4, #0]
 8005fc8:	f015 0506 	ands.w	r5, r5, #6
 8005fcc:	d106      	bne.n	8005fdc <_printf_common+0x48>
 8005fce:	f104 0a19 	add.w	sl, r4, #25
 8005fd2:	68e3      	ldr	r3, [r4, #12]
 8005fd4:	6832      	ldr	r2, [r6, #0]
 8005fd6:	1a9b      	subs	r3, r3, r2
 8005fd8:	42ab      	cmp	r3, r5
 8005fda:	dc26      	bgt.n	800602a <_printf_common+0x96>
 8005fdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fe0:	6822      	ldr	r2, [r4, #0]
 8005fe2:	3b00      	subs	r3, #0
 8005fe4:	bf18      	it	ne
 8005fe6:	2301      	movne	r3, #1
 8005fe8:	0692      	lsls	r2, r2, #26
 8005fea:	d42b      	bmi.n	8006044 <_printf_common+0xb0>
 8005fec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	47c8      	blx	r9
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d01e      	beq.n	8006038 <_printf_common+0xa4>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	6922      	ldr	r2, [r4, #16]
 8005ffe:	f003 0306 	and.w	r3, r3, #6
 8006002:	2b04      	cmp	r3, #4
 8006004:	bf02      	ittt	eq
 8006006:	68e5      	ldreq	r5, [r4, #12]
 8006008:	6833      	ldreq	r3, [r6, #0]
 800600a:	1aed      	subeq	r5, r5, r3
 800600c:	68a3      	ldr	r3, [r4, #8]
 800600e:	bf0c      	ite	eq
 8006010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006014:	2500      	movne	r5, #0
 8006016:	4293      	cmp	r3, r2
 8006018:	bfc4      	itt	gt
 800601a:	1a9b      	subgt	r3, r3, r2
 800601c:	18ed      	addgt	r5, r5, r3
 800601e:	2600      	movs	r6, #0
 8006020:	341a      	adds	r4, #26
 8006022:	42b5      	cmp	r5, r6
 8006024:	d11a      	bne.n	800605c <_printf_common+0xc8>
 8006026:	2000      	movs	r0, #0
 8006028:	e008      	b.n	800603c <_printf_common+0xa8>
 800602a:	2301      	movs	r3, #1
 800602c:	4652      	mov	r2, sl
 800602e:	4641      	mov	r1, r8
 8006030:	4638      	mov	r0, r7
 8006032:	47c8      	blx	r9
 8006034:	3001      	adds	r0, #1
 8006036:	d103      	bne.n	8006040 <_printf_common+0xac>
 8006038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800603c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006040:	3501      	adds	r5, #1
 8006042:	e7c6      	b.n	8005fd2 <_printf_common+0x3e>
 8006044:	18e1      	adds	r1, r4, r3
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	2030      	movs	r0, #48	@ 0x30
 800604a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800604e:	4422      	add	r2, r4
 8006050:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006054:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006058:	3302      	adds	r3, #2
 800605a:	e7c7      	b.n	8005fec <_printf_common+0x58>
 800605c:	2301      	movs	r3, #1
 800605e:	4622      	mov	r2, r4
 8006060:	4641      	mov	r1, r8
 8006062:	4638      	mov	r0, r7
 8006064:	47c8      	blx	r9
 8006066:	3001      	adds	r0, #1
 8006068:	d0e6      	beq.n	8006038 <_printf_common+0xa4>
 800606a:	3601      	adds	r6, #1
 800606c:	e7d9      	b.n	8006022 <_printf_common+0x8e>
	...

08006070 <_printf_i>:
 8006070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006074:	7e0f      	ldrb	r7, [r1, #24]
 8006076:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006078:	2f78      	cmp	r7, #120	@ 0x78
 800607a:	4691      	mov	r9, r2
 800607c:	4680      	mov	r8, r0
 800607e:	460c      	mov	r4, r1
 8006080:	469a      	mov	sl, r3
 8006082:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006086:	d807      	bhi.n	8006098 <_printf_i+0x28>
 8006088:	2f62      	cmp	r7, #98	@ 0x62
 800608a:	d80a      	bhi.n	80060a2 <_printf_i+0x32>
 800608c:	2f00      	cmp	r7, #0
 800608e:	f000 80d2 	beq.w	8006236 <_printf_i+0x1c6>
 8006092:	2f58      	cmp	r7, #88	@ 0x58
 8006094:	f000 80b9 	beq.w	800620a <_printf_i+0x19a>
 8006098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800609c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060a0:	e03a      	b.n	8006118 <_printf_i+0xa8>
 80060a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060a6:	2b15      	cmp	r3, #21
 80060a8:	d8f6      	bhi.n	8006098 <_printf_i+0x28>
 80060aa:	a101      	add	r1, pc, #4	@ (adr r1, 80060b0 <_printf_i+0x40>)
 80060ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060b0:	08006109 	.word	0x08006109
 80060b4:	0800611d 	.word	0x0800611d
 80060b8:	08006099 	.word	0x08006099
 80060bc:	08006099 	.word	0x08006099
 80060c0:	08006099 	.word	0x08006099
 80060c4:	08006099 	.word	0x08006099
 80060c8:	0800611d 	.word	0x0800611d
 80060cc:	08006099 	.word	0x08006099
 80060d0:	08006099 	.word	0x08006099
 80060d4:	08006099 	.word	0x08006099
 80060d8:	08006099 	.word	0x08006099
 80060dc:	0800621d 	.word	0x0800621d
 80060e0:	08006147 	.word	0x08006147
 80060e4:	080061d7 	.word	0x080061d7
 80060e8:	08006099 	.word	0x08006099
 80060ec:	08006099 	.word	0x08006099
 80060f0:	0800623f 	.word	0x0800623f
 80060f4:	08006099 	.word	0x08006099
 80060f8:	08006147 	.word	0x08006147
 80060fc:	08006099 	.word	0x08006099
 8006100:	08006099 	.word	0x08006099
 8006104:	080061df 	.word	0x080061df
 8006108:	6833      	ldr	r3, [r6, #0]
 800610a:	1d1a      	adds	r2, r3, #4
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6032      	str	r2, [r6, #0]
 8006110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006114:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006118:	2301      	movs	r3, #1
 800611a:	e09d      	b.n	8006258 <_printf_i+0x1e8>
 800611c:	6833      	ldr	r3, [r6, #0]
 800611e:	6820      	ldr	r0, [r4, #0]
 8006120:	1d19      	adds	r1, r3, #4
 8006122:	6031      	str	r1, [r6, #0]
 8006124:	0606      	lsls	r6, r0, #24
 8006126:	d501      	bpl.n	800612c <_printf_i+0xbc>
 8006128:	681d      	ldr	r5, [r3, #0]
 800612a:	e003      	b.n	8006134 <_printf_i+0xc4>
 800612c:	0645      	lsls	r5, r0, #25
 800612e:	d5fb      	bpl.n	8006128 <_printf_i+0xb8>
 8006130:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006134:	2d00      	cmp	r5, #0
 8006136:	da03      	bge.n	8006140 <_printf_i+0xd0>
 8006138:	232d      	movs	r3, #45	@ 0x2d
 800613a:	426d      	negs	r5, r5
 800613c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006140:	4859      	ldr	r0, [pc, #356]	@ (80062a8 <_printf_i+0x238>)
 8006142:	230a      	movs	r3, #10
 8006144:	e011      	b.n	800616a <_printf_i+0xfa>
 8006146:	6821      	ldr	r1, [r4, #0]
 8006148:	6833      	ldr	r3, [r6, #0]
 800614a:	0608      	lsls	r0, r1, #24
 800614c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006150:	d402      	bmi.n	8006158 <_printf_i+0xe8>
 8006152:	0649      	lsls	r1, r1, #25
 8006154:	bf48      	it	mi
 8006156:	b2ad      	uxthmi	r5, r5
 8006158:	2f6f      	cmp	r7, #111	@ 0x6f
 800615a:	4853      	ldr	r0, [pc, #332]	@ (80062a8 <_printf_i+0x238>)
 800615c:	6033      	str	r3, [r6, #0]
 800615e:	bf14      	ite	ne
 8006160:	230a      	movne	r3, #10
 8006162:	2308      	moveq	r3, #8
 8006164:	2100      	movs	r1, #0
 8006166:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800616a:	6866      	ldr	r6, [r4, #4]
 800616c:	60a6      	str	r6, [r4, #8]
 800616e:	2e00      	cmp	r6, #0
 8006170:	bfa2      	ittt	ge
 8006172:	6821      	ldrge	r1, [r4, #0]
 8006174:	f021 0104 	bicge.w	r1, r1, #4
 8006178:	6021      	strge	r1, [r4, #0]
 800617a:	b90d      	cbnz	r5, 8006180 <_printf_i+0x110>
 800617c:	2e00      	cmp	r6, #0
 800617e:	d04b      	beq.n	8006218 <_printf_i+0x1a8>
 8006180:	4616      	mov	r6, r2
 8006182:	fbb5 f1f3 	udiv	r1, r5, r3
 8006186:	fb03 5711 	mls	r7, r3, r1, r5
 800618a:	5dc7      	ldrb	r7, [r0, r7]
 800618c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006190:	462f      	mov	r7, r5
 8006192:	42bb      	cmp	r3, r7
 8006194:	460d      	mov	r5, r1
 8006196:	d9f4      	bls.n	8006182 <_printf_i+0x112>
 8006198:	2b08      	cmp	r3, #8
 800619a:	d10b      	bne.n	80061b4 <_printf_i+0x144>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	07df      	lsls	r7, r3, #31
 80061a0:	d508      	bpl.n	80061b4 <_printf_i+0x144>
 80061a2:	6923      	ldr	r3, [r4, #16]
 80061a4:	6861      	ldr	r1, [r4, #4]
 80061a6:	4299      	cmp	r1, r3
 80061a8:	bfde      	ittt	le
 80061aa:	2330      	movle	r3, #48	@ 0x30
 80061ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061b0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80061b4:	1b92      	subs	r2, r2, r6
 80061b6:	6122      	str	r2, [r4, #16]
 80061b8:	f8cd a000 	str.w	sl, [sp]
 80061bc:	464b      	mov	r3, r9
 80061be:	aa03      	add	r2, sp, #12
 80061c0:	4621      	mov	r1, r4
 80061c2:	4640      	mov	r0, r8
 80061c4:	f7ff fee6 	bl	8005f94 <_printf_common>
 80061c8:	3001      	adds	r0, #1
 80061ca:	d14a      	bne.n	8006262 <_printf_i+0x1f2>
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061d0:	b004      	add	sp, #16
 80061d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	f043 0320 	orr.w	r3, r3, #32
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	4833      	ldr	r0, [pc, #204]	@ (80062ac <_printf_i+0x23c>)
 80061e0:	2778      	movs	r7, #120	@ 0x78
 80061e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	6831      	ldr	r1, [r6, #0]
 80061ea:	061f      	lsls	r7, r3, #24
 80061ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80061f0:	d402      	bmi.n	80061f8 <_printf_i+0x188>
 80061f2:	065f      	lsls	r7, r3, #25
 80061f4:	bf48      	it	mi
 80061f6:	b2ad      	uxthmi	r5, r5
 80061f8:	6031      	str	r1, [r6, #0]
 80061fa:	07d9      	lsls	r1, r3, #31
 80061fc:	bf44      	itt	mi
 80061fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006202:	6023      	strmi	r3, [r4, #0]
 8006204:	b11d      	cbz	r5, 800620e <_printf_i+0x19e>
 8006206:	2310      	movs	r3, #16
 8006208:	e7ac      	b.n	8006164 <_printf_i+0xf4>
 800620a:	4827      	ldr	r0, [pc, #156]	@ (80062a8 <_printf_i+0x238>)
 800620c:	e7e9      	b.n	80061e2 <_printf_i+0x172>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	f023 0320 	bic.w	r3, r3, #32
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	e7f6      	b.n	8006206 <_printf_i+0x196>
 8006218:	4616      	mov	r6, r2
 800621a:	e7bd      	b.n	8006198 <_printf_i+0x128>
 800621c:	6833      	ldr	r3, [r6, #0]
 800621e:	6825      	ldr	r5, [r4, #0]
 8006220:	6961      	ldr	r1, [r4, #20]
 8006222:	1d18      	adds	r0, r3, #4
 8006224:	6030      	str	r0, [r6, #0]
 8006226:	062e      	lsls	r6, r5, #24
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	d501      	bpl.n	8006230 <_printf_i+0x1c0>
 800622c:	6019      	str	r1, [r3, #0]
 800622e:	e002      	b.n	8006236 <_printf_i+0x1c6>
 8006230:	0668      	lsls	r0, r5, #25
 8006232:	d5fb      	bpl.n	800622c <_printf_i+0x1bc>
 8006234:	8019      	strh	r1, [r3, #0]
 8006236:	2300      	movs	r3, #0
 8006238:	6123      	str	r3, [r4, #16]
 800623a:	4616      	mov	r6, r2
 800623c:	e7bc      	b.n	80061b8 <_printf_i+0x148>
 800623e:	6833      	ldr	r3, [r6, #0]
 8006240:	1d1a      	adds	r2, r3, #4
 8006242:	6032      	str	r2, [r6, #0]
 8006244:	681e      	ldr	r6, [r3, #0]
 8006246:	6862      	ldr	r2, [r4, #4]
 8006248:	2100      	movs	r1, #0
 800624a:	4630      	mov	r0, r6
 800624c:	f7f9 ffe8 	bl	8000220 <memchr>
 8006250:	b108      	cbz	r0, 8006256 <_printf_i+0x1e6>
 8006252:	1b80      	subs	r0, r0, r6
 8006254:	6060      	str	r0, [r4, #4]
 8006256:	6863      	ldr	r3, [r4, #4]
 8006258:	6123      	str	r3, [r4, #16]
 800625a:	2300      	movs	r3, #0
 800625c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006260:	e7aa      	b.n	80061b8 <_printf_i+0x148>
 8006262:	6923      	ldr	r3, [r4, #16]
 8006264:	4632      	mov	r2, r6
 8006266:	4649      	mov	r1, r9
 8006268:	4640      	mov	r0, r8
 800626a:	47d0      	blx	sl
 800626c:	3001      	adds	r0, #1
 800626e:	d0ad      	beq.n	80061cc <_printf_i+0x15c>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	079b      	lsls	r3, r3, #30
 8006274:	d413      	bmi.n	800629e <_printf_i+0x22e>
 8006276:	68e0      	ldr	r0, [r4, #12]
 8006278:	9b03      	ldr	r3, [sp, #12]
 800627a:	4298      	cmp	r0, r3
 800627c:	bfb8      	it	lt
 800627e:	4618      	movlt	r0, r3
 8006280:	e7a6      	b.n	80061d0 <_printf_i+0x160>
 8006282:	2301      	movs	r3, #1
 8006284:	4632      	mov	r2, r6
 8006286:	4649      	mov	r1, r9
 8006288:	4640      	mov	r0, r8
 800628a:	47d0      	blx	sl
 800628c:	3001      	adds	r0, #1
 800628e:	d09d      	beq.n	80061cc <_printf_i+0x15c>
 8006290:	3501      	adds	r5, #1
 8006292:	68e3      	ldr	r3, [r4, #12]
 8006294:	9903      	ldr	r1, [sp, #12]
 8006296:	1a5b      	subs	r3, r3, r1
 8006298:	42ab      	cmp	r3, r5
 800629a:	dcf2      	bgt.n	8006282 <_printf_i+0x212>
 800629c:	e7eb      	b.n	8006276 <_printf_i+0x206>
 800629e:	2500      	movs	r5, #0
 80062a0:	f104 0619 	add.w	r6, r4, #25
 80062a4:	e7f5      	b.n	8006292 <_printf_i+0x222>
 80062a6:	bf00      	nop
 80062a8:	080068b9 	.word	0x080068b9
 80062ac:	080068ca 	.word	0x080068ca

080062b0 <__sflush_r>:
 80062b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b8:	0716      	lsls	r6, r2, #28
 80062ba:	4605      	mov	r5, r0
 80062bc:	460c      	mov	r4, r1
 80062be:	d454      	bmi.n	800636a <__sflush_r+0xba>
 80062c0:	684b      	ldr	r3, [r1, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	dc02      	bgt.n	80062cc <__sflush_r+0x1c>
 80062c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	dd48      	ble.n	800635e <__sflush_r+0xae>
 80062cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062ce:	2e00      	cmp	r6, #0
 80062d0:	d045      	beq.n	800635e <__sflush_r+0xae>
 80062d2:	2300      	movs	r3, #0
 80062d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062d8:	682f      	ldr	r7, [r5, #0]
 80062da:	6a21      	ldr	r1, [r4, #32]
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	d030      	beq.n	8006342 <__sflush_r+0x92>
 80062e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	0759      	lsls	r1, r3, #29
 80062e6:	d505      	bpl.n	80062f4 <__sflush_r+0x44>
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	1ad2      	subs	r2, r2, r3
 80062ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062ee:	b10b      	cbz	r3, 80062f4 <__sflush_r+0x44>
 80062f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062f2:	1ad2      	subs	r2, r2, r3
 80062f4:	2300      	movs	r3, #0
 80062f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062f8:	6a21      	ldr	r1, [r4, #32]
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b0      	blx	r6
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	d106      	bne.n	8006312 <__sflush_r+0x62>
 8006304:	6829      	ldr	r1, [r5, #0]
 8006306:	291d      	cmp	r1, #29
 8006308:	d82b      	bhi.n	8006362 <__sflush_r+0xb2>
 800630a:	4a2a      	ldr	r2, [pc, #168]	@ (80063b4 <__sflush_r+0x104>)
 800630c:	410a      	asrs	r2, r1
 800630e:	07d6      	lsls	r6, r2, #31
 8006310:	d427      	bmi.n	8006362 <__sflush_r+0xb2>
 8006312:	2200      	movs	r2, #0
 8006314:	6062      	str	r2, [r4, #4]
 8006316:	04d9      	lsls	r1, r3, #19
 8006318:	6922      	ldr	r2, [r4, #16]
 800631a:	6022      	str	r2, [r4, #0]
 800631c:	d504      	bpl.n	8006328 <__sflush_r+0x78>
 800631e:	1c42      	adds	r2, r0, #1
 8006320:	d101      	bne.n	8006326 <__sflush_r+0x76>
 8006322:	682b      	ldr	r3, [r5, #0]
 8006324:	b903      	cbnz	r3, 8006328 <__sflush_r+0x78>
 8006326:	6560      	str	r0, [r4, #84]	@ 0x54
 8006328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800632a:	602f      	str	r7, [r5, #0]
 800632c:	b1b9      	cbz	r1, 800635e <__sflush_r+0xae>
 800632e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006332:	4299      	cmp	r1, r3
 8006334:	d002      	beq.n	800633c <__sflush_r+0x8c>
 8006336:	4628      	mov	r0, r5
 8006338:	f000 fa24 	bl	8006784 <_free_r>
 800633c:	2300      	movs	r3, #0
 800633e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006340:	e00d      	b.n	800635e <__sflush_r+0xae>
 8006342:	2301      	movs	r3, #1
 8006344:	4628      	mov	r0, r5
 8006346:	47b0      	blx	r6
 8006348:	4602      	mov	r2, r0
 800634a:	1c50      	adds	r0, r2, #1
 800634c:	d1c9      	bne.n	80062e2 <__sflush_r+0x32>
 800634e:	682b      	ldr	r3, [r5, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0c6      	beq.n	80062e2 <__sflush_r+0x32>
 8006354:	2b1d      	cmp	r3, #29
 8006356:	d001      	beq.n	800635c <__sflush_r+0xac>
 8006358:	2b16      	cmp	r3, #22
 800635a:	d11e      	bne.n	800639a <__sflush_r+0xea>
 800635c:	602f      	str	r7, [r5, #0]
 800635e:	2000      	movs	r0, #0
 8006360:	e022      	b.n	80063a8 <__sflush_r+0xf8>
 8006362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006366:	b21b      	sxth	r3, r3
 8006368:	e01b      	b.n	80063a2 <__sflush_r+0xf2>
 800636a:	690f      	ldr	r7, [r1, #16]
 800636c:	2f00      	cmp	r7, #0
 800636e:	d0f6      	beq.n	800635e <__sflush_r+0xae>
 8006370:	0793      	lsls	r3, r2, #30
 8006372:	680e      	ldr	r6, [r1, #0]
 8006374:	bf08      	it	eq
 8006376:	694b      	ldreq	r3, [r1, #20]
 8006378:	600f      	str	r7, [r1, #0]
 800637a:	bf18      	it	ne
 800637c:	2300      	movne	r3, #0
 800637e:	eba6 0807 	sub.w	r8, r6, r7
 8006382:	608b      	str	r3, [r1, #8]
 8006384:	f1b8 0f00 	cmp.w	r8, #0
 8006388:	dde9      	ble.n	800635e <__sflush_r+0xae>
 800638a:	6a21      	ldr	r1, [r4, #32]
 800638c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800638e:	4643      	mov	r3, r8
 8006390:	463a      	mov	r2, r7
 8006392:	4628      	mov	r0, r5
 8006394:	47b0      	blx	r6
 8006396:	2800      	cmp	r0, #0
 8006398:	dc08      	bgt.n	80063ac <__sflush_r+0xfc>
 800639a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800639e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063a2:	81a3      	strh	r3, [r4, #12]
 80063a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063ac:	4407      	add	r7, r0
 80063ae:	eba8 0800 	sub.w	r8, r8, r0
 80063b2:	e7e7      	b.n	8006384 <__sflush_r+0xd4>
 80063b4:	dfbffffe 	.word	0xdfbffffe

080063b8 <_fflush_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	690b      	ldr	r3, [r1, #16]
 80063bc:	4605      	mov	r5, r0
 80063be:	460c      	mov	r4, r1
 80063c0:	b913      	cbnz	r3, 80063c8 <_fflush_r+0x10>
 80063c2:	2500      	movs	r5, #0
 80063c4:	4628      	mov	r0, r5
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	b118      	cbz	r0, 80063d2 <_fflush_r+0x1a>
 80063ca:	6a03      	ldr	r3, [r0, #32]
 80063cc:	b90b      	cbnz	r3, 80063d2 <_fflush_r+0x1a>
 80063ce:	f7ff fb23 	bl	8005a18 <__sinit>
 80063d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0f3      	beq.n	80063c2 <_fflush_r+0xa>
 80063da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063dc:	07d0      	lsls	r0, r2, #31
 80063de:	d404      	bmi.n	80063ea <_fflush_r+0x32>
 80063e0:	0599      	lsls	r1, r3, #22
 80063e2:	d402      	bmi.n	80063ea <_fflush_r+0x32>
 80063e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063e6:	f7ff fbf0 	bl	8005bca <__retarget_lock_acquire_recursive>
 80063ea:	4628      	mov	r0, r5
 80063ec:	4621      	mov	r1, r4
 80063ee:	f7ff ff5f 	bl	80062b0 <__sflush_r>
 80063f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063f4:	07da      	lsls	r2, r3, #31
 80063f6:	4605      	mov	r5, r0
 80063f8:	d4e4      	bmi.n	80063c4 <_fflush_r+0xc>
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	059b      	lsls	r3, r3, #22
 80063fe:	d4e1      	bmi.n	80063c4 <_fflush_r+0xc>
 8006400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006402:	f7ff fbe3 	bl	8005bcc <__retarget_lock_release_recursive>
 8006406:	e7dd      	b.n	80063c4 <_fflush_r+0xc>

08006408 <__malloc_lock>:
 8006408:	4801      	ldr	r0, [pc, #4]	@ (8006410 <__malloc_lock+0x8>)
 800640a:	f7ff bbde 	b.w	8005bca <__retarget_lock_acquire_recursive>
 800640e:	bf00      	nop
 8006410:	20000468 	.word	0x20000468

08006414 <__malloc_unlock>:
 8006414:	4801      	ldr	r0, [pc, #4]	@ (800641c <__malloc_unlock+0x8>)
 8006416:	f7ff bbd9 	b.w	8005bcc <__retarget_lock_release_recursive>
 800641a:	bf00      	nop
 800641c:	20000468 	.word	0x20000468

08006420 <__sread>:
 8006420:	b510      	push	{r4, lr}
 8006422:	460c      	mov	r4, r1
 8006424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006428:	f000 f978 	bl	800671c <_read_r>
 800642c:	2800      	cmp	r0, #0
 800642e:	bfab      	itete	ge
 8006430:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006432:	89a3      	ldrhlt	r3, [r4, #12]
 8006434:	181b      	addge	r3, r3, r0
 8006436:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800643a:	bfac      	ite	ge
 800643c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800643e:	81a3      	strhlt	r3, [r4, #12]
 8006440:	bd10      	pop	{r4, pc}

08006442 <__swrite>:
 8006442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006446:	461f      	mov	r7, r3
 8006448:	898b      	ldrh	r3, [r1, #12]
 800644a:	05db      	lsls	r3, r3, #23
 800644c:	4605      	mov	r5, r0
 800644e:	460c      	mov	r4, r1
 8006450:	4616      	mov	r6, r2
 8006452:	d505      	bpl.n	8006460 <__swrite+0x1e>
 8006454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006458:	2302      	movs	r3, #2
 800645a:	2200      	movs	r2, #0
 800645c:	f000 f94c 	bl	80066f8 <_lseek_r>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006466:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	4632      	mov	r2, r6
 800646e:	463b      	mov	r3, r7
 8006470:	4628      	mov	r0, r5
 8006472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006476:	f000 b973 	b.w	8006760 <_write_r>

0800647a <__sseek>:
 800647a:	b510      	push	{r4, lr}
 800647c:	460c      	mov	r4, r1
 800647e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006482:	f000 f939 	bl	80066f8 <_lseek_r>
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	bf15      	itete	ne
 800648c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800648e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006492:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006496:	81a3      	strheq	r3, [r4, #12]
 8006498:	bf18      	it	ne
 800649a:	81a3      	strhne	r3, [r4, #12]
 800649c:	bd10      	pop	{r4, pc}

0800649e <__sclose>:
 800649e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a2:	f000 b8f7 	b.w	8006694 <_close_r>

080064a6 <__swbuf_r>:
 80064a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a8:	460e      	mov	r6, r1
 80064aa:	4614      	mov	r4, r2
 80064ac:	4605      	mov	r5, r0
 80064ae:	b118      	cbz	r0, 80064b8 <__swbuf_r+0x12>
 80064b0:	6a03      	ldr	r3, [r0, #32]
 80064b2:	b90b      	cbnz	r3, 80064b8 <__swbuf_r+0x12>
 80064b4:	f7ff fab0 	bl	8005a18 <__sinit>
 80064b8:	69a3      	ldr	r3, [r4, #24]
 80064ba:	60a3      	str	r3, [r4, #8]
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	071a      	lsls	r2, r3, #28
 80064c0:	d501      	bpl.n	80064c6 <__swbuf_r+0x20>
 80064c2:	6923      	ldr	r3, [r4, #16]
 80064c4:	b943      	cbnz	r3, 80064d8 <__swbuf_r+0x32>
 80064c6:	4621      	mov	r1, r4
 80064c8:	4628      	mov	r0, r5
 80064ca:	f000 f82b 	bl	8006524 <__swsetup_r>
 80064ce:	b118      	cbz	r0, 80064d8 <__swbuf_r+0x32>
 80064d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80064d4:	4638      	mov	r0, r7
 80064d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	6922      	ldr	r2, [r4, #16]
 80064dc:	1a98      	subs	r0, r3, r2
 80064de:	6963      	ldr	r3, [r4, #20]
 80064e0:	b2f6      	uxtb	r6, r6
 80064e2:	4283      	cmp	r3, r0
 80064e4:	4637      	mov	r7, r6
 80064e6:	dc05      	bgt.n	80064f4 <__swbuf_r+0x4e>
 80064e8:	4621      	mov	r1, r4
 80064ea:	4628      	mov	r0, r5
 80064ec:	f7ff ff64 	bl	80063b8 <_fflush_r>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d1ed      	bne.n	80064d0 <__swbuf_r+0x2a>
 80064f4:	68a3      	ldr	r3, [r4, #8]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	60a3      	str	r3, [r4, #8]
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	6022      	str	r2, [r4, #0]
 8006500:	701e      	strb	r6, [r3, #0]
 8006502:	6962      	ldr	r2, [r4, #20]
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	429a      	cmp	r2, r3
 8006508:	d004      	beq.n	8006514 <__swbuf_r+0x6e>
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	07db      	lsls	r3, r3, #31
 800650e:	d5e1      	bpl.n	80064d4 <__swbuf_r+0x2e>
 8006510:	2e0a      	cmp	r6, #10
 8006512:	d1df      	bne.n	80064d4 <__swbuf_r+0x2e>
 8006514:	4621      	mov	r1, r4
 8006516:	4628      	mov	r0, r5
 8006518:	f7ff ff4e 	bl	80063b8 <_fflush_r>
 800651c:	2800      	cmp	r0, #0
 800651e:	d0d9      	beq.n	80064d4 <__swbuf_r+0x2e>
 8006520:	e7d6      	b.n	80064d0 <__swbuf_r+0x2a>
	...

08006524 <__swsetup_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	4b29      	ldr	r3, [pc, #164]	@ (80065cc <__swsetup_r+0xa8>)
 8006528:	4605      	mov	r5, r0
 800652a:	6818      	ldr	r0, [r3, #0]
 800652c:	460c      	mov	r4, r1
 800652e:	b118      	cbz	r0, 8006538 <__swsetup_r+0x14>
 8006530:	6a03      	ldr	r3, [r0, #32]
 8006532:	b90b      	cbnz	r3, 8006538 <__swsetup_r+0x14>
 8006534:	f7ff fa70 	bl	8005a18 <__sinit>
 8006538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800653c:	0719      	lsls	r1, r3, #28
 800653e:	d422      	bmi.n	8006586 <__swsetup_r+0x62>
 8006540:	06da      	lsls	r2, r3, #27
 8006542:	d407      	bmi.n	8006554 <__swsetup_r+0x30>
 8006544:	2209      	movs	r2, #9
 8006546:	602a      	str	r2, [r5, #0]
 8006548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800654c:	81a3      	strh	r3, [r4, #12]
 800654e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006552:	e033      	b.n	80065bc <__swsetup_r+0x98>
 8006554:	0758      	lsls	r0, r3, #29
 8006556:	d512      	bpl.n	800657e <__swsetup_r+0x5a>
 8006558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800655a:	b141      	cbz	r1, 800656e <__swsetup_r+0x4a>
 800655c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006560:	4299      	cmp	r1, r3
 8006562:	d002      	beq.n	800656a <__swsetup_r+0x46>
 8006564:	4628      	mov	r0, r5
 8006566:	f000 f90d 	bl	8006784 <_free_r>
 800656a:	2300      	movs	r3, #0
 800656c:	6363      	str	r3, [r4, #52]	@ 0x34
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006574:	81a3      	strh	r3, [r4, #12]
 8006576:	2300      	movs	r3, #0
 8006578:	6063      	str	r3, [r4, #4]
 800657a:	6923      	ldr	r3, [r4, #16]
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	89a3      	ldrh	r3, [r4, #12]
 8006580:	f043 0308 	orr.w	r3, r3, #8
 8006584:	81a3      	strh	r3, [r4, #12]
 8006586:	6923      	ldr	r3, [r4, #16]
 8006588:	b94b      	cbnz	r3, 800659e <__swsetup_r+0x7a>
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006594:	d003      	beq.n	800659e <__swsetup_r+0x7a>
 8006596:	4621      	mov	r1, r4
 8006598:	4628      	mov	r0, r5
 800659a:	f000 f83f 	bl	800661c <__smakebuf_r>
 800659e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065a2:	f013 0201 	ands.w	r2, r3, #1
 80065a6:	d00a      	beq.n	80065be <__swsetup_r+0x9a>
 80065a8:	2200      	movs	r2, #0
 80065aa:	60a2      	str	r2, [r4, #8]
 80065ac:	6962      	ldr	r2, [r4, #20]
 80065ae:	4252      	negs	r2, r2
 80065b0:	61a2      	str	r2, [r4, #24]
 80065b2:	6922      	ldr	r2, [r4, #16]
 80065b4:	b942      	cbnz	r2, 80065c8 <__swsetup_r+0xa4>
 80065b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80065ba:	d1c5      	bne.n	8006548 <__swsetup_r+0x24>
 80065bc:	bd38      	pop	{r3, r4, r5, pc}
 80065be:	0799      	lsls	r1, r3, #30
 80065c0:	bf58      	it	pl
 80065c2:	6962      	ldrpl	r2, [r4, #20]
 80065c4:	60a2      	str	r2, [r4, #8]
 80065c6:	e7f4      	b.n	80065b2 <__swsetup_r+0x8e>
 80065c8:	2000      	movs	r0, #0
 80065ca:	e7f7      	b.n	80065bc <__swsetup_r+0x98>
 80065cc:	20000018 	.word	0x20000018

080065d0 <__swhatbuf_r>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	460c      	mov	r4, r1
 80065d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d8:	2900      	cmp	r1, #0
 80065da:	b096      	sub	sp, #88	@ 0x58
 80065dc:	4615      	mov	r5, r2
 80065de:	461e      	mov	r6, r3
 80065e0:	da0d      	bge.n	80065fe <__swhatbuf_r+0x2e>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065e8:	f04f 0100 	mov.w	r1, #0
 80065ec:	bf14      	ite	ne
 80065ee:	2340      	movne	r3, #64	@ 0x40
 80065f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80065f4:	2000      	movs	r0, #0
 80065f6:	6031      	str	r1, [r6, #0]
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	b016      	add	sp, #88	@ 0x58
 80065fc:	bd70      	pop	{r4, r5, r6, pc}
 80065fe:	466a      	mov	r2, sp
 8006600:	f000 f858 	bl	80066b4 <_fstat_r>
 8006604:	2800      	cmp	r0, #0
 8006606:	dbec      	blt.n	80065e2 <__swhatbuf_r+0x12>
 8006608:	9901      	ldr	r1, [sp, #4]
 800660a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800660e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006612:	4259      	negs	r1, r3
 8006614:	4159      	adcs	r1, r3
 8006616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800661a:	e7eb      	b.n	80065f4 <__swhatbuf_r+0x24>

0800661c <__smakebuf_r>:
 800661c:	898b      	ldrh	r3, [r1, #12]
 800661e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006620:	079d      	lsls	r5, r3, #30
 8006622:	4606      	mov	r6, r0
 8006624:	460c      	mov	r4, r1
 8006626:	d507      	bpl.n	8006638 <__smakebuf_r+0x1c>
 8006628:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	6123      	str	r3, [r4, #16]
 8006630:	2301      	movs	r3, #1
 8006632:	6163      	str	r3, [r4, #20]
 8006634:	b003      	add	sp, #12
 8006636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006638:	ab01      	add	r3, sp, #4
 800663a:	466a      	mov	r2, sp
 800663c:	f7ff ffc8 	bl	80065d0 <__swhatbuf_r>
 8006640:	9f00      	ldr	r7, [sp, #0]
 8006642:	4605      	mov	r5, r0
 8006644:	4639      	mov	r1, r7
 8006646:	4630      	mov	r0, r6
 8006648:	f7ff fc24 	bl	8005e94 <_malloc_r>
 800664c:	b948      	cbnz	r0, 8006662 <__smakebuf_r+0x46>
 800664e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006652:	059a      	lsls	r2, r3, #22
 8006654:	d4ee      	bmi.n	8006634 <__smakebuf_r+0x18>
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	f043 0302 	orr.w	r3, r3, #2
 800665e:	81a3      	strh	r3, [r4, #12]
 8006660:	e7e2      	b.n	8006628 <__smakebuf_r+0xc>
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	6020      	str	r0, [r4, #0]
 8006666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	9b01      	ldr	r3, [sp, #4]
 800666e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006672:	b15b      	cbz	r3, 800668c <__smakebuf_r+0x70>
 8006674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006678:	4630      	mov	r0, r6
 800667a:	f000 f82d 	bl	80066d8 <_isatty_r>
 800667e:	b128      	cbz	r0, 800668c <__smakebuf_r+0x70>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	f023 0303 	bic.w	r3, r3, #3
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	431d      	orrs	r5, r3
 8006690:	81a5      	strh	r5, [r4, #12]
 8006692:	e7cf      	b.n	8006634 <__smakebuf_r+0x18>

08006694 <_close_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4d06      	ldr	r5, [pc, #24]	@ (80066b0 <_close_r+0x1c>)
 8006698:	2300      	movs	r3, #0
 800669a:	4604      	mov	r4, r0
 800669c:	4608      	mov	r0, r1
 800669e:	602b      	str	r3, [r5, #0]
 80066a0:	f7fa f9c9 	bl	8000a36 <_close>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d102      	bne.n	80066ae <_close_r+0x1a>
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	b103      	cbz	r3, 80066ae <_close_r+0x1a>
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	bd38      	pop	{r3, r4, r5, pc}
 80066b0:	20000474 	.word	0x20000474

080066b4 <_fstat_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4d07      	ldr	r5, [pc, #28]	@ (80066d4 <_fstat_r+0x20>)
 80066b8:	2300      	movs	r3, #0
 80066ba:	4604      	mov	r4, r0
 80066bc:	4608      	mov	r0, r1
 80066be:	4611      	mov	r1, r2
 80066c0:	602b      	str	r3, [r5, #0]
 80066c2:	f7fa f9c4 	bl	8000a4e <_fstat>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	d102      	bne.n	80066d0 <_fstat_r+0x1c>
 80066ca:	682b      	ldr	r3, [r5, #0]
 80066cc:	b103      	cbz	r3, 80066d0 <_fstat_r+0x1c>
 80066ce:	6023      	str	r3, [r4, #0]
 80066d0:	bd38      	pop	{r3, r4, r5, pc}
 80066d2:	bf00      	nop
 80066d4:	20000474 	.word	0x20000474

080066d8 <_isatty_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	4d06      	ldr	r5, [pc, #24]	@ (80066f4 <_isatty_r+0x1c>)
 80066dc:	2300      	movs	r3, #0
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	602b      	str	r3, [r5, #0]
 80066e4:	f7fa f9c3 	bl	8000a6e <_isatty>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_isatty_r+0x1a>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_isatty_r+0x1a>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	20000474 	.word	0x20000474

080066f8 <_lseek_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d07      	ldr	r5, [pc, #28]	@ (8006718 <_lseek_r+0x20>)
 80066fc:	4604      	mov	r4, r0
 80066fe:	4608      	mov	r0, r1
 8006700:	4611      	mov	r1, r2
 8006702:	2200      	movs	r2, #0
 8006704:	602a      	str	r2, [r5, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	f7fa f9bc 	bl	8000a84 <_lseek>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_lseek_r+0x1e>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_lseek_r+0x1e>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	20000474 	.word	0x20000474

0800671c <_read_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4d07      	ldr	r5, [pc, #28]	@ (800673c <_read_r+0x20>)
 8006720:	4604      	mov	r4, r0
 8006722:	4608      	mov	r0, r1
 8006724:	4611      	mov	r1, r2
 8006726:	2200      	movs	r2, #0
 8006728:	602a      	str	r2, [r5, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	f7fa f966 	bl	80009fc <_read>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d102      	bne.n	800673a <_read_r+0x1e>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	b103      	cbz	r3, 800673a <_read_r+0x1e>
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	20000474 	.word	0x20000474

08006740 <_sbrk_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4d06      	ldr	r5, [pc, #24]	@ (800675c <_sbrk_r+0x1c>)
 8006744:	2300      	movs	r3, #0
 8006746:	4604      	mov	r4, r0
 8006748:	4608      	mov	r0, r1
 800674a:	602b      	str	r3, [r5, #0]
 800674c:	f7fa f9a8 	bl	8000aa0 <_sbrk>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_sbrk_r+0x1a>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_sbrk_r+0x1a>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	20000474 	.word	0x20000474

08006760 <_write_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d07      	ldr	r5, [pc, #28]	@ (8006780 <_write_r+0x20>)
 8006764:	4604      	mov	r4, r0
 8006766:	4608      	mov	r0, r1
 8006768:	4611      	mov	r1, r2
 800676a:	2200      	movs	r2, #0
 800676c:	602a      	str	r2, [r5, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	f7f9 ffd4 	bl	800071c <_write>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d102      	bne.n	800677e <_write_r+0x1e>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	b103      	cbz	r3, 800677e <_write_r+0x1e>
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	20000474 	.word	0x20000474

08006784 <_free_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4605      	mov	r5, r0
 8006788:	2900      	cmp	r1, #0
 800678a:	d041      	beq.n	8006810 <_free_r+0x8c>
 800678c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006790:	1f0c      	subs	r4, r1, #4
 8006792:	2b00      	cmp	r3, #0
 8006794:	bfb8      	it	lt
 8006796:	18e4      	addlt	r4, r4, r3
 8006798:	f7ff fe36 	bl	8006408 <__malloc_lock>
 800679c:	4a1d      	ldr	r2, [pc, #116]	@ (8006814 <_free_r+0x90>)
 800679e:	6813      	ldr	r3, [r2, #0]
 80067a0:	b933      	cbnz	r3, 80067b0 <_free_r+0x2c>
 80067a2:	6063      	str	r3, [r4, #4]
 80067a4:	6014      	str	r4, [r2, #0]
 80067a6:	4628      	mov	r0, r5
 80067a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067ac:	f7ff be32 	b.w	8006414 <__malloc_unlock>
 80067b0:	42a3      	cmp	r3, r4
 80067b2:	d908      	bls.n	80067c6 <_free_r+0x42>
 80067b4:	6820      	ldr	r0, [r4, #0]
 80067b6:	1821      	adds	r1, r4, r0
 80067b8:	428b      	cmp	r3, r1
 80067ba:	bf01      	itttt	eq
 80067bc:	6819      	ldreq	r1, [r3, #0]
 80067be:	685b      	ldreq	r3, [r3, #4]
 80067c0:	1809      	addeq	r1, r1, r0
 80067c2:	6021      	streq	r1, [r4, #0]
 80067c4:	e7ed      	b.n	80067a2 <_free_r+0x1e>
 80067c6:	461a      	mov	r2, r3
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	b10b      	cbz	r3, 80067d0 <_free_r+0x4c>
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d9fa      	bls.n	80067c6 <_free_r+0x42>
 80067d0:	6811      	ldr	r1, [r2, #0]
 80067d2:	1850      	adds	r0, r2, r1
 80067d4:	42a0      	cmp	r0, r4
 80067d6:	d10b      	bne.n	80067f0 <_free_r+0x6c>
 80067d8:	6820      	ldr	r0, [r4, #0]
 80067da:	4401      	add	r1, r0
 80067dc:	1850      	adds	r0, r2, r1
 80067de:	4283      	cmp	r3, r0
 80067e0:	6011      	str	r1, [r2, #0]
 80067e2:	d1e0      	bne.n	80067a6 <_free_r+0x22>
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	6053      	str	r3, [r2, #4]
 80067ea:	4408      	add	r0, r1
 80067ec:	6010      	str	r0, [r2, #0]
 80067ee:	e7da      	b.n	80067a6 <_free_r+0x22>
 80067f0:	d902      	bls.n	80067f8 <_free_r+0x74>
 80067f2:	230c      	movs	r3, #12
 80067f4:	602b      	str	r3, [r5, #0]
 80067f6:	e7d6      	b.n	80067a6 <_free_r+0x22>
 80067f8:	6820      	ldr	r0, [r4, #0]
 80067fa:	1821      	adds	r1, r4, r0
 80067fc:	428b      	cmp	r3, r1
 80067fe:	bf04      	itt	eq
 8006800:	6819      	ldreq	r1, [r3, #0]
 8006802:	685b      	ldreq	r3, [r3, #4]
 8006804:	6063      	str	r3, [r4, #4]
 8006806:	bf04      	itt	eq
 8006808:	1809      	addeq	r1, r1, r0
 800680a:	6021      	streq	r1, [r4, #0]
 800680c:	6054      	str	r4, [r2, #4]
 800680e:	e7ca      	b.n	80067a6 <_free_r+0x22>
 8006810:	bd38      	pop	{r3, r4, r5, pc}
 8006812:	bf00      	nop
 8006814:	20000470 	.word	0x20000470

08006818 <_init>:
 8006818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681a:	bf00      	nop
 800681c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681e:	bc08      	pop	{r3}
 8006820:	469e      	mov	lr, r3
 8006822:	4770      	bx	lr

08006824 <_fini>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	bf00      	nop
 8006828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682a:	bc08      	pop	{r3}
 800682c:	469e      	mov	lr, r3
 800682e:	4770      	bx	lr
