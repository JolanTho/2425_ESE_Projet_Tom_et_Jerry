
Tom_n_Jerry_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b2c8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001298  0801b4a8  0801b4a8  0001c4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c740  0801c740  0001e4e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801c740  0801c740  0001d740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c748  0801c748  0001e4e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c748  0801c748  0001d748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c74c  0801c74c  0001d74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004e4  20000000  0801c750  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007324  200004e4  0801cc34  0001e4e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20007808  0801cc34  0001e808  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  0001e4e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b668  00000000  00000000  0001e518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008ea2  00000000  00000000  00059b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002df0  00000000  00000000  00062a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002303  00000000  00000000  00065818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003060a  00000000  00000000  00067b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e61b  00000000  00000000  00098125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b943  00000000  00000000  000d6740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000023e5  00000000  00000000  001e2083  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  00000228  00000000  00000000  001e4468  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000018  00000000  00000000  001e4690  2**2
                  CONTENTS, READONLY
 22 .iar.debug_frame 00000224  00000000  00000000  001e46a8  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e340  00000000  00000000  001e48cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000008c  00000000  00000000  001f2c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200004e4 	.word	0x200004e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801b490 	.word	0x0801b490

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200004e8 	.word	0x200004e8
 800021c:	0801b490 	.word	0x0801b490

08000220 <USBPD_CAD_Init>:
 8000220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000224:	2600      	movs	r6, #0
 8000226:	2803      	cmp	r0, #3
 8000228:	4681      	mov	r9, r0
 800022a:	460c      	mov	r4, r1
 800022c:	4690      	mov	r8, r2
 800022e:	461f      	mov	r7, r3
 8000230:	bf28      	it	cs
 8000232:	2601      	movcs	r6, #1
 8000234:	d219      	bcs.n	800026a <USBPD_CAD_Init+0x4a>
 8000236:	b90c      	cbnz	r4, 800023c <USBPD_CAD_Init+0x1c>
 8000238:	2602      	movs	r6, #2
 800023a:	e016      	b.n	800026a <USBPD_CAD_Init+0x4a>
 800023c:	200c      	movs	r0, #12
 800023e:	f016 ff11 	bl	8017064 <malloc>
 8000242:	0005      	movs	r5, r0
 8000244:	bf08      	it	eq
 8000246:	2603      	moveq	r6, #3
 8000248:	d00f      	beq.n	800026a <USBPD_CAD_Init+0x4a>
 800024a:	210c      	movs	r1, #12
 800024c:	f018 fc4f 	bl	8018aee <__aeabi_memclr>
 8000250:	602f      	str	r7, [r5, #0]
 8000252:	722e      	strb	r6, [r5, #8]
 8000254:	606c      	str	r4, [r5, #4]
 8000256:	464a      	mov	r2, r9
 8000258:	4940      	ldr	r1, [pc, #256]	@ (800035c <.text_6>)
 800025a:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800025e:	463a      	mov	r2, r7
 8000260:	6863      	ldr	r3, [r4, #4]
 8000262:	4641      	mov	r1, r8
 8000264:	4648      	mov	r0, r9
 8000266:	f00f ffc7 	bl	80101f8 <CAD_Init>
 800026a:	4630      	mov	r0, r6
 800026c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000270 <USBPD_CAD_PortEnable>:
 8000270:	2803      	cmp	r0, #3
 8000272:	d203      	bcs.n	800027c <USBPD_CAD_PortEnable+0xc>
 8000274:	4a39      	ldr	r2, [pc, #228]	@ (800035c <.text_6>)
 8000276:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800027a:	7201      	strb	r1, [r0, #8]
 800027c:	4770      	bx	lr

0800027e <USBPD_CAD_Process>:
 800027e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000280:	2100      	movs	r1, #0
 8000282:	f88d 1000 	strb.w	r1, [sp]
 8000286:	9101      	str	r1, [sp, #4]
 8000288:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800028c:	2600      	movs	r6, #0
 800028e:	4c33      	ldr	r4, [pc, #204]	@ (800035c <.text_6>)
 8000290:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000294:	2800      	cmp	r0, #0
 8000296:	d05c      	beq.n	8000352 <USBPD_CAD_Process+0xd4>
 8000298:	7a00      	ldrb	r0, [r0, #8]
 800029a:	2801      	cmp	r0, #1
 800029c:	d159      	bne.n	8000352 <USBPD_CAD_Process+0xd4>
 800029e:	aa01      	add	r2, sp, #4
 80002a0:	4669      	mov	r1, sp
 80002a2:	b2f0      	uxtb	r0, r6
 80002a4:	f010 f8ee 	bl	8010484 <CAD_StateMachine>
 80002a8:	42a8      	cmp	r0, r5
 80002aa:	bf98      	it	ls
 80002ac:	4605      	movls	r5, r0
 80002ae:	f89d 0000 	ldrb.w	r0, [sp]
 80002b2:	2801      	cmp	r0, #1
 80002b4:	d004      	beq.n	80002c0 <USBPD_CAD_Process+0x42>
 80002b6:	2802      	cmp	r0, #2
 80002b8:	bf18      	it	ne
 80002ba:	2804      	cmpne	r0, #4
 80002bc:	d012      	beq.n	80002e4 <USBPD_CAD_Process+0x66>
 80002be:	e031      	b.n	8000324 <USBPD_CAD_Process+0xa6>
 80002c0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002c4:	6801      	ldr	r1, [r0, #0]
 80002c6:	680a      	ldr	r2, [r1, #0]
 80002c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80002cc:	600a      	str	r2, [r1, #0]
 80002ce:	6801      	ldr	r1, [r0, #0]
 80002d0:	680b      	ldr	r3, [r1, #0]
 80002d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002d6:	600b      	str	r3, [r1, #0]
 80002d8:	6800      	ldr	r0, [r0, #0]
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	e022      	b.n	800032a <USBPD_CAD_Process+0xac>
 80002e4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002e8:	6803      	ldr	r3, [r0, #0]
 80002ea:	9901      	ldr	r1, [sp, #4]
 80002ec:	681f      	ldr	r7, [r3, #0]
 80002ee:	f361 1787 	bfi	r7, r1, #6, #2
 80002f2:	601f      	str	r7, [r3, #0]
 80002f4:	6801      	ldr	r1, [r0, #0]
 80002f6:	680a      	ldr	r2, [r1, #0]
 80002f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80002fc:	600a      	str	r2, [r1, #0]
 80002fe:	6800      	ldr	r0, [r0, #0]
 8000300:	6801      	ldr	r1, [r0, #0]
 8000302:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000306:	2800      	cmp	r0, #0
 8000308:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800030c:	6800      	ldr	r0, [r0, #0]
 800030e:	6801      	ldr	r1, [r0, #0]
 8000310:	bf0c      	ite	eq
 8000312:	f021 0108 	biceq.w	r1, r1, #8
 8000316:	f041 0108 	orrne.w	r1, r1, #8
 800031a:	6001      	str	r1, [r0, #0]
 800031c:	b2f0      	uxtb	r0, r6
 800031e:	2168      	movs	r1, #104	@ 0x68
 8000320:	f000 f8af 	bl	8000482 <USBPD_PE_Notification>
 8000324:	f89d 0000 	ldrb.w	r0, [sp]
 8000328:	b198      	cbz	r0, 8000352 <USBPD_CAD_Process+0xd4>
 800032a:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 800032e:	685f      	ldr	r7, [r3, #4]
 8000330:	9a01      	ldr	r2, [sp, #4]
 8000332:	f89d 1000 	ldrb.w	r1, [sp]
 8000336:	f8d7 c000 	ldr.w	ip, [r7]
 800033a:	b2f0      	uxtb	r0, r6
 800033c:	47e0      	blx	ip
 800033e:	f89d 0000 	ldrb.w	r0, [sp]
 8000342:	2801      	cmp	r0, #1
 8000344:	bf18      	it	ne
 8000346:	2803      	cmpne	r0, #3
 8000348:	d103      	bne.n	8000352 <USBPD_CAD_Process+0xd4>
 800034a:	2169      	movs	r1, #105	@ 0x69
 800034c:	b2f0      	uxtb	r0, r6
 800034e:	f000 f898 	bl	8000482 <USBPD_PE_Notification>
 8000352:	1c76      	adds	r6, r6, #1
 8000354:	2e03      	cmp	r6, #3
 8000356:	d39b      	bcc.n	8000290 <USBPD_CAD_Process+0x12>
 8000358:	4628      	mov	r0, r5
 800035a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800035c <.text_6>:
 800035c:	20000500 	.word	0x20000500

08000360 <USBPD_CAD_AssertRd>:
 8000360:	b510      	push	{r4, lr}
 8000362:	4604      	mov	r4, r0
 8000364:	f011 fbce 	bl	8011b04 <USBPDM1_DeAssertRp>
 8000368:	4620      	mov	r0, r4
 800036a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800036e:	f011 bbd5 	b.w	8011b1c <USBPDM1_AssertRd>

08000372 <USBPD_CAD_AssertRp>:
 8000372:	b510      	push	{r4, lr}
 8000374:	4604      	mov	r4, r0
 8000376:	f011 fc57 	bl	8011c28 <USBPDM1_DeAssertRd>
 800037a:	4620      	mov	r0, r4
 800037c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000380:	f011 bb2a 	b.w	80119d8 <USBPDM1_AssertRp>

08000384 <USBPD_CAD_EnterErrorRecovery>:
 8000384:	f010 b81a 	b.w	80103bc <CAD_Enter_ErrorRecovery>

08000388 <USBPD_CAD_GetMemoryConsumption>:
 8000388:	2024      	movs	r0, #36	@ 0x24
 800038a:	4770      	bx	lr

0800038c <USBPD_PE_Init>:
 800038c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000390:	461f      	mov	r7, r3
 8000392:	4606      	mov	r6, r0
 8000394:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000396:	460d      	mov	r5, r1
 8000398:	4690      	mov	r8, r2
 800039a:	b908      	cbnz	r0, 80003a0 <USBPD_PE_Init+0x14>
 800039c:	2718      	movs	r7, #24
 800039e:	e02d      	b.n	80003fc <USBPD_PE_Init+0x70>
 80003a0:	2e03      	cmp	r6, #3
 80003a2:	bf28      	it	cs
 80003a4:	2717      	movcs	r7, #23
 80003a6:	d229      	bcs.n	80003fc <USBPD_PE_Init+0x70>
 80003a8:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 80003ac:	f016 fe5a 	bl	8017064 <malloc>
 80003b0:	0004      	movs	r4, r0
 80003b2:	bf08      	it	eq
 80003b4:	2716      	moveq	r7, #22
 80003b6:	d021      	beq.n	80003fc <USBPD_PE_Init+0x70>
 80003b8:	f44f 712a 	mov.w	r1, #680	@ 0x2a8
 80003bc:	f018 fb97 	bl	8018aee <__aeabi_memclr>
 80003c0:	f8df 0930 	ldr.w	r0, [pc, #2352]	@ 8000cf4 <.text_46>
 80003c4:	4631      	mov	r1, r6
 80003c6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 80003ca:	6025      	str	r5, [r4, #0]
 80003cc:	f8c4 8004 	str.w	r8, [r4, #4]
 80003d0:	7326      	strb	r6, [r4, #12]
 80003d2:	60a7      	str	r7, [r4, #8]
 80003d4:	f504 7329 	add.w	r3, r4, #676	@ 0x2a4
 80003d8:	f104 029c 	add.w	r2, r4, #156	@ 0x9c
 80003dc:	4629      	mov	r1, r5
 80003de:	4630      	mov	r0, r6
 80003e0:	f001 fb9c 	bl	8001b1c <USBPD_PRL_Init>
 80003e4:	0007      	movs	r7, r0
 80003e6:	d109      	bne.n	80003fc <USBPD_PE_Init+0x70>
 80003e8:	f000 fa23 	bl	8000832 <.text_27>
 80003ec:	2200      	movs	r2, #0
 80003ee:	792b      	ldrb	r3, [r5, #4]
 80003f0:	f003 0303 	and.w	r3, r3, #3
 80003f4:	2100      	movs	r1, #0
 80003f6:	4630      	mov	r0, r6
 80003f8:	f001 fbbb 	bl	8001b72 <USBPD_PRL_SetHeader>
 80003fc:	4638      	mov	r0, r7
 80003fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000402 <USBPD_PE_TimerCounter>:
 8000402:	f8df 18f0 	ldr.w	r1, [pc, #2288]	@ 8000cf4 <.text_46>
 8000406:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800040a:	8b41      	ldrh	r1, [r0, #26]
 800040c:	044a      	lsls	r2, r1, #17
 800040e:	d002      	beq.n	8000416 <USBPD_PE_TimerCounter+0x14>
 8000410:	8b41      	ldrh	r1, [r0, #26]
 8000412:	1e4a      	subs	r2, r1, #1
 8000414:	8342      	strh	r2, [r0, #26]
 8000416:	8b81      	ldrh	r1, [r0, #28]
 8000418:	044a      	lsls	r2, r1, #17
 800041a:	d002      	beq.n	8000422 <USBPD_PE_TimerCounter+0x20>
 800041c:	8b81      	ldrh	r1, [r0, #28]
 800041e:	1e4a      	subs	r2, r1, #1
 8000420:	8382      	strh	r2, [r0, #28]
 8000422:	4770      	bx	lr

08000424 <USBPD_PE_TimerCounteUpdate>:
 8000424:	b538      	push	{r3, r4, r5, lr}
 8000426:	460c      	mov	r4, r1
 8000428:	f8df 18c8 	ldr.w	r1, [pc, #2248]	@ 8000cf4 <.text_46>
 800042c:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8000430:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8000434:	da0f      	bge.n	8000456 <USBPD_PE_TimerCounteUpdate+0x32>
 8000436:	8b68      	ldrh	r0, [r5, #26]
 8000438:	0441      	lsls	r1, r0, #17
 800043a:	d004      	beq.n	8000446 <USBPD_PE_TimerCounteUpdate+0x22>
 800043c:	8b68      	ldrh	r0, [r5, #26]
 800043e:	4621      	mov	r1, r4
 8000440:	f000 fc13 	bl	8000c6a <PE_UpdateTimer>
 8000444:	8368      	strh	r0, [r5, #26]
 8000446:	8ba8      	ldrh	r0, [r5, #28]
 8000448:	0441      	lsls	r1, r0, #17
 800044a:	d004      	beq.n	8000456 <USBPD_PE_TimerCounteUpdate+0x32>
 800044c:	8ba8      	ldrh	r0, [r5, #28]
 800044e:	4621      	mov	r1, r4
 8000450:	f000 fc0b 	bl	8000c6a <PE_UpdateTimer>
 8000454:	83a8      	strh	r0, [r5, #28]
 8000456:	bd31      	pop	{r0, r4, r5, pc}

08000458 <USBPD_PE_IsCableConnected>:
 8000458:	f8df 2898 	ldr.w	r2, [pc, #2200]	@ 8000cf4 <.text_46>
 800045c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000460:	6842      	ldr	r2, [r0, #4]
 8000462:	6813      	ldr	r3, [r2, #0]
 8000464:	f361 330c 	bfi	r3, r1, #12, #1
 8000468:	6013      	str	r3, [r2, #0]
 800046a:	2248      	movs	r2, #72	@ 0x48
 800046c:	7342      	strb	r2, [r0, #13]
 800046e:	4770      	bx	lr

08000470 <USBPD_PE_StateMachine_Reset>:
 8000470:	f8df 2880 	ldr.w	r2, [pc, #2176]	@ 8000cf4 <.text_46>
 8000474:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000478:	2148      	movs	r1, #72	@ 0x48
 800047a:	7341      	strb	r1, [r0, #13]
 800047c:	4770      	bx	lr

0800047e <USBPD_PE_StateMachine_Stop>:
 800047e:	f001 be26 	b.w	80020ce <USBPD_PRL_Stop>

08000482 <USBPD_PE_Notification>:
 8000482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000484:	2803      	cmp	r0, #3
 8000486:	4604      	mov	r4, r0
 8000488:	460d      	mov	r5, r1
 800048a:	d214      	bcs.n	80004b6 <__iar_annotation$$tailcall+0x2>
 800048c:	2600      	movs	r6, #0
 800048e:	9600      	str	r6, [sp, #0]
 8000490:	2300      	movs	r3, #0
 8000492:	f8df 7864 	ldr.w	r7, [pc, #2148]	@ 8000cf8 <.text_47>
 8000496:	683e      	ldr	r6, [r7, #0]
 8000498:	462a      	mov	r2, r5
 800049a:	4621      	mov	r1, r4
 800049c:	2009      	movs	r0, #9
 800049e:	47b0      	blx	r6
 80004a0:	f8df 2850 	ldr.w	r2, [pc, #2128]	@ 8000cf4 <.text_46>
 80004a4:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	68d3      	ldr	r3, [r2, #12]
 80004ac:	4629      	mov	r1, r5
 80004ae:	4620      	mov	r0, r4
 80004b0:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}

080004b4 <__iar_annotation$$tailcall>:
 80004b4:	4718      	bx	r3
 80004b6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080004b8 <USBPD_PE_Request_HardReset>:
 80004b8:	b580      	push	{r7, lr}
 80004ba:	f8df 1838 	ldr.w	r1, [pc, #2104]	@ 8000cf4 <.text_46>
 80004be:	4602      	mov	r2, r0
 80004c0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80004c4:	230f      	movs	r3, #15
 80004c6:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
 80004ca:	6889      	ldr	r1, [r1, #8]
 80004cc:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80004ce:	4790      	blx	r2
 80004d0:	2000      	movs	r0, #0
 80004d2:	bd02      	pop	{r1, pc}

080004d4 <USBPD_PE_Request_CableReset>:
 80004d4:	2010      	movs	r0, #16
 80004d6:	4770      	bx	lr

080004d8 <USBPD_PE_Request_CtrlMessage>:
 80004d8:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 80004dc:	4680      	mov	r8, r0
 80004de:	460e      	mov	r6, r1
 80004e0:	f8df 0810 	ldr.w	r0, [pc, #2064]	@ 8000cf4 <.text_46>
 80004e4:	b093      	sub	sp, #76	@ 0x4c
 80004e6:	4641      	mov	r1, r8
 80004e8:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80004ec:	f8df 180c 	ldr.w	r1, [pc, #2060]	@ 8000cfc <.text_48>
 80004f0:	4617      	mov	r7, r2
 80004f2:	4668      	mov	r0, sp
 80004f4:	224c      	movs	r2, #76	@ 0x4c
 80004f6:	f018 fb0b 	bl	8018b10 <__aeabi_memcpy>
 80004fa:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 80004fe:	2400      	movs	r4, #0
 8000500:	7808      	ldrb	r0, [r1, #0]
 8000502:	b920      	cbnz	r0, 800050e <USBPD_PE_Request_CtrlMessage+0x36>
 8000504:	6868      	ldr	r0, [r5, #4]
 8000506:	6802      	ldr	r2, [r0, #0]
 8000508:	f3c2 3000 	ubfx	r0, r2, #12, #1
 800050c:	b908      	cbnz	r0, 8000512 <USBPD_PE_Request_CtrlMessage+0x3a>
 800050e:	2403      	movs	r4, #3
 8000510:	e03f      	b.n	8000592 <USBPD_PE_Request_CtrlMessage+0xba>
 8000512:	686a      	ldr	r2, [r5, #4]
 8000514:	6828      	ldr	r0, [r5, #0]
 8000516:	6813      	ldr	r3, [r2, #0]
 8000518:	6840      	ldr	r0, [r0, #4]
 800051a:	f3c3 2202 	ubfx	r2, r3, #8, #3
 800051e:	686b      	ldr	r3, [r5, #4]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	f003 0303 	and.w	r3, r3, #3
 8000526:	08c0      	lsrs	r0, r0, #3
 8000528:	2a03      	cmp	r2, #3
 800052a:	bf0c      	ite	eq
 800052c:	2208      	moveq	r2, #8
 800052e:	2200      	movne	r2, #0
 8000530:	2b02      	cmp	r3, #2
 8000532:	f000 0001 	and.w	r0, r0, #1
 8000536:	bf0c      	ite	eq
 8000538:	2340      	moveq	r3, #64	@ 0x40
 800053a:	2300      	movne	r3, #0
 800053c:	4310      	orrs	r0, r2
 800053e:	4318      	orrs	r0, r3
 8000540:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8000544:	f040 0012 	orr.w	r0, r0, #18
 8000548:	07c3      	lsls	r3, r0, #31
 800054a:	f81d 3002 	ldrb.w	r3, [sp, r2]
 800054e:	bf48      	it	mi
 8000550:	f040 0020 	orrmi.w	r0, r0, #32
 8000554:	4018      	ands	r0, r3
 8000556:	4298      	cmp	r0, r3
 8000558:	bf18      	it	ne
 800055a:	2402      	movne	r4, #2
 800055c:	d119      	bne.n	8000592 <USBPD_PE_Request_CtrlMessage+0xba>
 800055e:	2e0d      	cmp	r6, #13
 8000560:	704c      	strb	r4, [r1, #1]
 8000562:	f105 0078 	add.w	r0, r5, #120	@ 0x78
 8000566:	d007      	beq.n	8000578 <USBPD_PE_Request_CtrlMessage+0xa0>
 8000568:	2e16      	cmp	r6, #22
 800056a:	d002      	beq.n	8000572 <USBPD_PE_Request_CtrlMessage+0x9a>
 800056c:	2e18      	cmp	r6, #24
 800056e:	d003      	beq.n	8000578 <USBPD_PE_Request_CtrlMessage+0xa0>
 8000570:	e003      	b.n	800057a <USBPD_PE_Request_CtrlMessage+0xa2>
 8000572:	2316      	movs	r3, #22
 8000574:	7003      	strb	r3, [r0, #0]
 8000576:	e000      	b.n	800057a <USBPD_PE_Request_CtrlMessage+0xa2>
 8000578:	704f      	strb	r7, [r1, #1]
 800057a:	eb0d 0302 	add.w	r3, sp, r2
 800057e:	785e      	ldrb	r6, [r3, #1]
 8000580:	7046      	strb	r6, [r0, #1]
 8000582:	eb0d 0002 	add.w	r0, sp, r2
 8000586:	7882      	ldrb	r2, [r0, #2]
 8000588:	700a      	strb	r2, [r1, #0]
 800058a:	4640      	mov	r0, r8
 800058c:	68a9      	ldr	r1, [r5, #8]
 800058e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8000590:	4790      	blx	r2
 8000592:	4620      	mov	r0, r4
 8000594:	b014      	add	sp, #80	@ 0x50
 8000596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800059a <USBPD_PE_Request_DataMessage>:
 800059a:	b510      	push	{r4, lr}
 800059c:	f8df 2754 	ldr.w	r2, [pc, #1876]	@ 8000cf4 <.text_46>
 80005a0:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80005a4:	f103 042a 	add.w	r4, r3, #42	@ 0x2a
 80005a8:	2002      	movs	r0, #2
 80005aa:	7822      	ldrb	r2, [r4, #0]
 80005ac:	b922      	cbnz	r2, 80005b8 <USBPD_PE_Request_DataMessage+0x1e>
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	6813      	ldr	r3, [r2, #0]
 80005b2:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80005b6:	b90a      	cbnz	r2, 80005bc <USBPD_PE_Request_DataMessage+0x22>
 80005b8:	2003      	movs	r0, #3
 80005ba:	bd10      	pop	{r4, pc}
 80005bc:	1f89      	subs	r1, r1, #6
 80005be:	2200      	movs	r2, #0
 80005c0:	2901      	cmp	r1, #1
 80005c2:	7062      	strb	r2, [r4, #1]
 80005c4:	bf88      	it	hi
 80005c6:	2010      	movhi	r0, #16
 80005c8:	bd10      	pop	{r4, pc}

080005ca <USBPD_PE_Send_Request>:
 80005ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005cc:	f8df 3724 	ldr.w	r3, [pc, #1828]	@ 8000cf4 <.text_46>
 80005d0:	4604      	mov	r4, r0
 80005d2:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80005d6:	f105 062a 	add.w	r6, r5, #42	@ 0x2a
 80005da:	2402      	movs	r4, #2
 80005dc:	7833      	ldrb	r3, [r6, #0]
 80005de:	b923      	cbnz	r3, 80005ea <USBPD_PE_Send_Request+0x20>
 80005e0:	686b      	ldr	r3, [r5, #4]
 80005e2:	681f      	ldr	r7, [r3, #0]
 80005e4:	f3c7 3300 	ubfx	r3, r7, #12, #1
 80005e8:	b90b      	cbnz	r3, 80005ee <USBPD_PE_Send_Request+0x24>
 80005ea:	2403      	movs	r4, #3
 80005ec:	e010      	b.n	8000610 <USBPD_PE_Send_Request+0x46>
 80005ee:	f3c7 2302 	ubfx	r3, r7, #8, #3
 80005f2:	2b03      	cmp	r3, #3
 80005f4:	d10c      	bne.n	8000610 <USBPD_PE_Send_Request+0x46>
 80005f6:	2345      	movs	r3, #69	@ 0x45
 80005f8:	7033      	strb	r3, [r6, #0]
 80005fa:	6169      	str	r1, [r5, #20]
 80005fc:	2400      	movs	r4, #0
 80005fe:	6929      	ldr	r1, [r5, #16]
 8000600:	f362 01c4 	bfi	r1, r2, #3, #2
 8000604:	6129      	str	r1, [r5, #16]
 8000606:	2200      	movs	r2, #0
 8000608:	7072      	strb	r2, [r6, #1]
 800060a:	68a9      	ldr	r1, [r5, #8]
 800060c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800060e:	4790      	blx	r2
 8000610:	4620      	mov	r0, r4
 8000612:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08000614 <PE_Send_RESET>:
 8000614:	b538      	push	{r3, r4, r5, lr}
 8000616:	4604      	mov	r4, r0
 8000618:	460d      	mov	r5, r1
 800061a:	2d05      	cmp	r5, #5
 800061c:	7b20      	ldrb	r0, [r4, #12]
 800061e:	bf0c      	ite	eq
 8000620:	211f      	moveq	r1, #31
 8000622:	215e      	movne	r1, #94	@ 0x5e
 8000624:	f7ff ff2d 	bl	8000482 <USBPD_PE_Notification>
 8000628:	7b20      	ldrb	r0, [r4, #12]
 800062a:	4629      	mov	r1, r5
 800062c:	f001 fcf5 	bl	800201a <USBPD_PRL_ResetRequestProcess>
 8000630:	f3ef 8010 	mrs	r0, PRIMASK
 8000634:	b672      	cpsid	i
 8000636:	2100      	movs	r1, #0
 8000638:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 800063c:	f380 8810 	msr	PRIMASK, r0
 8000640:	bd31      	pop	{r0, r4, r5, pc}

08000642 <PE_Get_SpecRevision>:
 8000642:	f8df 16b0 	ldr.w	r1, [pc, #1712]	@ 8000cf4 <.text_46>
 8000646:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800064a:	6841      	ldr	r1, [r0, #4]
 800064c:	7808      	ldrb	r0, [r1, #0]
 800064e:	f000 0003 	and.w	r0, r0, #3
 8000652:	4770      	bx	lr

08000654 <PE_Get_RxEvent>:
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	2114      	movs	r1, #20
 8000658:	f3ef 8410 	mrs	r4, PRIMASK
 800065c:	b672      	cpsid	i
 800065e:	f100 0528 	add.w	r5, r0, #40	@ 0x28
 8000662:	7b2a      	ldrb	r2, [r5, #12]
 8000664:	b33a      	cbz	r2, 80006b6 <PE_Get_RxEvent+0x62>
 8000666:	f100 0370 	add.w	r3, r0, #112	@ 0x70
 800066a:	5c9e      	ldrb	r6, [r3, r2]
 800066c:	0677      	lsls	r7, r6, #25
 800066e:	bf58      	it	pl
 8000670:	2103      	movpl	r1, #3
 8000672:	d520      	bpl.n	80006b6 <PE_Get_RxEvent+0x62>
 8000674:	231e      	movs	r3, #30
 8000676:	435a      	muls	r2, r3
 8000678:	4402      	add	r2, r0
 800067a:	f102 0617 	add.w	r6, r2, #23
 800067e:	60ae      	str	r6, [r5, #8]
 8000680:	7833      	ldrb	r3, [r6, #0]
 8000682:	7872      	ldrb	r2, [r6, #1]
 8000684:	eb03 2602 	add.w	r6, r3, r2, lsl #8
 8000688:	7b2a      	ldrb	r2, [r5, #12]
 800068a:	80ae      	strh	r6, [r5, #4]
 800068c:	3070      	adds	r0, #112	@ 0x70
 800068e:	5c83      	ldrb	r3, [r0, r2]
 8000690:	f003 031f 	and.w	r3, r3, #31
 8000694:	2b01      	cmp	r3, #1
 8000696:	d004      	beq.n	80006a2 <PE_Get_RxEvent+0x4e>
 8000698:	2b02      	cmp	r3, #2
 800069a:	d005      	beq.n	80006a8 <PE_Get_RxEvent+0x54>
 800069c:	2b04      	cmp	r3, #4
 800069e:	d007      	beq.n	80006b0 <PE_Get_RxEvent+0x5c>
 80006a0:	e009      	b.n	80006b6 <PE_Get_RxEvent+0x62>
 80006a2:	2111      	movs	r1, #17
 80006a4:	2000      	movs	r0, #0
 80006a6:	e005      	b.n	80006b4 <PE_Get_RxEvent+0x60>
 80006a8:	2201      	movs	r2, #1
 80006aa:	2112      	movs	r1, #18
 80006ac:	702a      	strb	r2, [r5, #0]
 80006ae:	e002      	b.n	80006b6 <PE_Get_RxEvent+0x62>
 80006b0:	2113      	movs	r1, #19
 80006b2:	2002      	movs	r0, #2
 80006b4:	7028      	strb	r0, [r5, #0]
 80006b6:	f384 8810 	msr	PRIMASK, r4
 80006ba:	4608      	mov	r0, r1
 80006bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006be <PE_Clear_RxEvent>:
 80006be:	b538      	push	{r3, r4, r5, lr}
 80006c0:	4601      	mov	r1, r0
 80006c2:	f3ef 8210 	mrs	r2, PRIMASK
 80006c6:	b672      	cpsid	i
 80006c8:	f891 0034 	ldrb.w	r0, [r1, #52]	@ 0x34
 80006cc:	b1c0      	cbz	r0, 8000700 <PE_Clear_RxEvent+0x42>
 80006ce:	1e40      	subs	r0, r0, #1
 80006d0:	b2c0      	uxtb	r0, r0
 80006d2:	f101 0471 	add.w	r4, r1, #113	@ 0x71
 80006d6:	2300      	movs	r3, #0
 80006d8:	5423      	strb	r3, [r4, r0]
 80006da:	1e40      	subs	r0, r0, #1
 80006dc:	4180      	sbcs	r0, r0
 80006de:	0fc0      	lsrs	r0, r0, #31
 80006e0:	f101 0371 	add.w	r3, r1, #113	@ 0x71
 80006e4:	5c1c      	ldrb	r4, [r3, r0]
 80006e6:	0665      	lsls	r5, r4, #25
 80006e8:	d507      	bpl.n	80006fa <PE_Clear_RxEvent+0x3c>
 80006ea:	1c40      	adds	r0, r0, #1
 80006ec:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 80006f0:	f382 8810 	msr	PRIMASK, r2
 80006f4:	7b08      	ldrb	r0, [r1, #12]
 80006f6:	6889      	ldr	r1, [r1, #8]
 80006f8:	e072      	b.n	80007e0 <.text_24>
 80006fa:	2000      	movs	r0, #0
 80006fc:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 8000700:	f382 8810 	msr	PRIMASK, r2
 8000704:	bd31      	pop	{r0, r4, r5, pc}

08000706 <PE_PRL_Control_RxEvent>:
 8000706:	f8df 15ec 	ldr.w	r1, [pc, #1516]	@ 8000cf4 <.text_46>
 800070a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800070e:	2000      	movs	r0, #0
 8000710:	f3ef 8210 	mrs	r2, PRIMASK
 8000714:	b672      	cpsid	i
 8000716:	f891 1034 	ldrb.w	r1, [r1, #52]	@ 0x34
 800071a:	b101      	cbz	r1, 800071e <PE_PRL_Control_RxEvent+0x18>
 800071c:	2001      	movs	r0, #1
 800071e:	f382 8810 	msr	PRIMASK, r2
 8000722:	4770      	bx	lr

08000724 <PE_Check_AMSConflict>:
 8000724:	b538      	push	{r3, r4, r5, lr}
 8000726:	4604      	mov	r4, r0
 8000728:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 800072c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800072e:	2500      	movs	r5, #0
 8000730:	4001      	ands	r1, r0
 8000732:	290d      	cmp	r1, #13
 8000734:	d102      	bne.n	800073c <PE_Check_AMSConflict+0x18>
 8000736:	2110      	movs	r1, #16
 8000738:	7361      	strb	r1, [r4, #13]
 800073a:	e02a      	b.n	8000792 <PE_Check_AMSConflict+0x6e>
 800073c:	7e20      	ldrb	r0, [r4, #24]
 800073e:	b188      	cbz	r0, 8000764 <PE_Check_AMSConflict+0x40>
 8000740:	1e40      	subs	r0, r0, #1
 8000742:	2801      	cmp	r0, #1
 8000744:	d914      	bls.n	8000770 <PE_Check_AMSConflict+0x4c>
 8000746:	1e80      	subs	r0, r0, #2
 8000748:	d014      	beq.n	8000774 <PE_Check_AMSConflict+0x50>
 800074a:	1e40      	subs	r0, r0, #1
 800074c:	d021      	beq.n	8000792 <PE_Check_AMSConflict+0x6e>
 800074e:	1e40      	subs	r0, r0, #1
 8000750:	2809      	cmp	r0, #9
 8000752:	bf84      	itt	hi
 8000754:	380b      	subhi	r0, #11
 8000756:	2801      	cmphi	r0, #1
 8000758:	d90a      	bls.n	8000770 <PE_Check_AMSConflict+0x4c>
 800075a:	1e80      	subs	r0, r0, #2
 800075c:	d005      	beq.n	800076a <PE_Check_AMSConflict+0x46>
 800075e:	384d      	subs	r0, #77	@ 0x4d
 8000760:	d006      	beq.n	8000770 <PE_Check_AMSConflict+0x4c>
 8000762:	e00a      	b.n	800077a <PE_Check_AMSConflict+0x56>
 8000764:	2203      	movs	r2, #3
 8000766:	7362      	strb	r2, [r4, #13]
 8000768:	e014      	b.n	8000794 <PE_Check_AMSConflict+0x70>
 800076a:	200f      	movs	r0, #15
 800076c:	7360      	strb	r0, [r4, #13]
 800076e:	e011      	b.n	8000794 <PE_Check_AMSConflict+0x70>
 8000770:	2011      	movs	r0, #17
 8000772:	e000      	b.n	8000776 <PE_Check_AMSConflict+0x52>
 8000774:	200f      	movs	r0, #15
 8000776:	7360      	strb	r0, [r4, #13]
 8000778:	e00b      	b.n	8000792 <PE_Check_AMSConflict+0x6e>
 800077a:	7b20      	ldrb	r0, [r4, #12]
 800077c:	215c      	movs	r1, #92	@ 0x5c
 800077e:	f7ff fe80 	bl	8000482 <USBPD_PE_Notification>
 8000782:	2103      	movs	r1, #3
 8000784:	6860      	ldr	r0, [r4, #4]
 8000786:	7361      	strb	r1, [r4, #13]
 8000788:	6801      	ldr	r1, [r0, #0]
 800078a:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800078e:	2803      	cmp	r0, #3
 8000790:	d000      	beq.n	8000794 <PE_Check_AMSConflict+0x70>
 8000792:	2515      	movs	r5, #21
 8000794:	4628      	mov	r0, r5
 8000796:	bd32      	pop	{r1, r4, r5, pc}

08000798 <PE_PRL_ResetReceived>:
 8000798:	b538      	push	{r3, r4, r5, lr}
 800079a:	4604      	mov	r4, r0
 800079c:	f8df 0554 	ldr.w	r0, [pc, #1364]	@ 8000cf4 <.text_46>
 80007a0:	4622      	mov	r2, r4
 80007a2:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 80007a6:	2905      	cmp	r1, #5
 80007a8:	d114      	bne.n	80007d4 <PE_PRL_ResetReceived+0x3c>
 80007aa:	6868      	ldr	r0, [r5, #4]
 80007ac:	6801      	ldr	r1, [r0, #0]
 80007ae:	f021 0110 	bic.w	r1, r1, #16
 80007b2:	6001      	str	r1, [r0, #0]
 80007b4:	2001      	movs	r0, #1
 80007b6:	6929      	ldr	r1, [r5, #16]
 80007b8:	f360 214a 	bfi	r1, r0, #9, #2
 80007bc:	f105 002a 	add.w	r0, r5, #42	@ 0x2a
 80007c0:	6129      	str	r1, [r5, #16]
 80007c2:	2214      	movs	r2, #20
 80007c4:	2300      	movs	r3, #0
 80007c6:	7002      	strb	r2, [r0, #0]
 80007c8:	7283      	strb	r3, [r0, #10]
 80007ca:	211e      	movs	r1, #30
 80007cc:	7b28      	ldrb	r0, [r5, #12]
 80007ce:	f7ff fe58 	bl	8000482 <USBPD_PE_Notification>
 80007d2:	e003      	b.n	80007dc <PE_PRL_ResetReceived+0x44>
 80007d4:	6928      	ldr	r0, [r5, #16]
 80007d6:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 80007da:	6128      	str	r0, [r5, #16]
 80007dc:	4620      	mov	r0, r4
 80007de:	68a9      	ldr	r1, [r5, #8]

080007e0 <.text_24>:
 80007e0:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80007e2:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}

080007e6 <__iar_annotation$$tailcall>:
 80007e6:	4710      	bx	r2

080007e8 <PE_PRL_BistCompleted>:
 80007e8:	4770      	bx	lr

080007ea <PE_Reset_HardReset>:
 80007ea:	b510      	push	{r4, lr}
 80007ec:	4604      	mov	r4, r0
 80007ee:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 80007f2:	b118      	cbz	r0, 80007fc <PE_Reset_HardReset+0x12>
 80007f4:	7b20      	ldrb	r0, [r4, #12]
 80007f6:	215b      	movs	r1, #91	@ 0x5b
 80007f8:	f7ff fe43 	bl	8000482 <USBPD_PE_Notification>
 80007fc:	4620      	mov	r0, r4
 80007fe:	f000 f81e 	bl	800083e <PE_Reset_ZI>
 8000802:	6820      	ldr	r0, [r4, #0]
 8000804:	7903      	ldrb	r3, [r0, #4]
 8000806:	7b20      	ldrb	r0, [r4, #12]
 8000808:	f003 0303 	and.w	r3, r3, #3
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	f001 f9af 	bl	8001b72 <USBPD_PRL_SetHeader>
 8000814:	f000 f80d 	bl	8000832 <.text_27>
 8000818:	0889      	lsrs	r1, r1, #2
 800081a:	6822      	ldr	r2, [r4, #0]
 800081c:	7912      	ldrb	r2, [r2, #4]
 800081e:	f002 0203 	and.w	r2, r2, #3
 8000822:	ea42 0181 	orr.w	r1, r2, r1, lsl #2
 8000826:	6001      	str	r1, [r0, #0]
 8000828:	7b20      	ldrb	r0, [r4, #12]
 800082a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800082e:	f001 bc33 	b.w	8002098 <USBPD_PRL_Reset>

08000832 <.text_27>:
 8000832:	6860      	ldr	r0, [r4, #4]
 8000834:	6801      	ldr	r1, [r0, #0]
 8000836:	f021 0108 	bic.w	r1, r1, #8
 800083a:	6001      	str	r1, [r0, #0]
 800083c:	4770      	bx	lr

0800083e <PE_Reset_ZI>:
 800083e:	b538      	push	{r3, r4, r5, lr}
 8000840:	4604      	mov	r4, r0
 8000842:	2000      	movs	r0, #0
 8000844:	9000      	str	r0, [sp, #0]
 8000846:	2100      	movs	r1, #0
 8000848:	6860      	ldr	r0, [r4, #4]
 800084a:	6802      	ldr	r2, [r0, #0]
 800084c:	f022 0210 	bic.w	r2, r2, #16
 8000850:	6002      	str	r2, [r0, #0]
 8000852:	4620      	mov	r0, r4
 8000854:	f000 fa1b 	bl	8000c8e <PE_SetPowerNegotiation>
 8000858:	216c      	movs	r1, #108	@ 0x6c
 800085a:	f104 0010 	add.w	r0, r4, #16
 800085e:	f018 f946 	bl	8018aee <__aeabi_memclr>
 8000862:	7b20      	ldrb	r0, [r4, #12]
 8000864:	68a4      	ldr	r4, [r4, #8]
 8000866:	69a5      	ldr	r5, [r4, #24]
 8000868:	2304      	movs	r3, #4
 800086a:	466a      	mov	r2, sp
 800086c:	2102      	movs	r1, #2
 800086e:	47a8      	blx	r5
 8000870:	bd31      	pop	{r0, r4, r5, pc}

08000872 <PE_Reset_Counter>:
 8000872:	2102      	movs	r1, #2
 8000874:	307c      	adds	r0, #124	@ 0x7c
 8000876:	f018 b93a 	b.w	8018aee <__aeabi_memclr>

0800087a <PE_ExtRevisionInteroperability>:
 800087a:	b538      	push	{r3, r4, r5, lr}
 800087c:	f8df 3474 	ldr.w	r3, [pc, #1140]	@ 8000cf4 <.text_46>
 8000880:	4602      	mov	r2, r0
 8000882:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000886:	6865      	ldr	r5, [r4, #4]
 8000888:	682c      	ldr	r4, [r5, #0]
 800088a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800088e:	f004 0503 	and.w	r5, r4, #3
 8000892:	42a9      	cmp	r1, r5
 8000894:	bfa8      	it	ge
 8000896:	4629      	movge	r1, r5
 8000898:	f361 0401 	bfi	r4, r1, #0, #2
 800089c:	6851      	ldr	r1, [r2, #4]
 800089e:	600c      	str	r4, [r1, #0]
 80008a0:	6851      	ldr	r1, [r2, #4]
 80008a2:	680b      	ldr	r3, [r1, #0]
 80008a4:	f003 0403 	and.w	r4, r3, #3
 80008a8:	2c01      	cmp	r4, #1
 80008aa:	bf0c      	ite	eq
 80008ac:	2400      	moveq	r4, #0
 80008ae:	2420      	movne	r4, #32
 80008b0:	f023 0320 	bic.w	r3, r3, #32
 80008b4:	4323      	orrs	r3, r4
 80008b6:	600b      	str	r3, [r1, #0]
 80008b8:	6852      	ldr	r2, [r2, #4]
 80008ba:	7811      	ldrb	r1, [r2, #0]
 80008bc:	e8bd 4034 	ldmia.w	sp!, {r2, r4, r5, lr}
 80008c0:	f001 0103 	and.w	r1, r1, #3
 80008c4:	f001 b97f 	b.w	8001bc6 <USBPD_PRL_SetHeaderSpecification>

080008c8 <PE_PRL_FastRoleSwapReception>:
 80008c8:	f8df 1428 	ldr.w	r1, [pc, #1064]	@ 8000cf4 <.text_46>
 80008cc:	4602      	mov	r2, r0
 80008ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80008d2:	7e0a      	ldrb	r2, [r1, #24]
 80008d4:	2a09      	cmp	r2, #9
 80008d6:	d00b      	beq.n	80008f0 <__iar_annotation$$tailcall+0x2>
 80008d8:	684a      	ldr	r2, [r1, #4]
 80008da:	6813      	ldr	r3, [r2, #0]
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	690a      	ldr	r2, [r1, #16]
 80008e4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80008e8:	610a      	str	r2, [r1, #16]
 80008ea:	6889      	ldr	r1, [r1, #8]
 80008ec:	6a8a      	ldr	r2, [r1, #40]	@ 0x28

080008ee <__iar_annotation$$tailcall>:
 80008ee:	4710      	bx	r2
 80008f0:	4770      	bx	lr

080008f2 <PE_PRL_PostReceiveEvent>:
 80008f2:	b570      	push	{r4, r5, r6, lr}
 80008f4:	f8df 23fc 	ldr.w	r2, [pc, #1020]	@ 8000cf4 <.text_46>
 80008f8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80008fc:	2000      	movs	r0, #0
 80008fe:	2400      	movs	r4, #0
 8000900:	191a      	adds	r2, r3, r4
 8000902:	f892 2071 	ldrb.w	r2, [r2, #113]	@ 0x71
 8000906:	b122      	cbz	r2, 8000912 <PE_PRL_PostReceiveEvent+0x20>
 8000908:	1c64      	adds	r4, r4, #1
 800090a:	b2e4      	uxtb	r4, r4
 800090c:	2c01      	cmp	r4, #1
 800090e:	d9f7      	bls.n	8000900 <PE_PRL_PostReceiveEvent+0xe>
 8000910:	bd70      	pop	{r4, r5, r6, pc}
 8000912:	191a      	adds	r2, r3, r4
 8000914:	2020      	movs	r0, #32
 8000916:	191d      	adds	r5, r3, r4
 8000918:	f882 0071 	strb.w	r0, [r2, #113]	@ 0x71
 800091c:	2001      	movs	r0, #1
 800091e:	f895 6071 	ldrb.w	r6, [r5, #113]	@ 0x71
 8000922:	fa00 f101 	lsl.w	r1, r0, r1
 8000926:	1918      	adds	r0, r3, r4
 8000928:	4331      	orrs	r1, r6
 800092a:	f880 1071 	strb.w	r1, [r0, #113]	@ 0x71
 800092e:	2001      	movs	r0, #1
 8000930:	bd70      	pop	{r4, r5, r6, pc}

08000932 <PE_PRL_PostReceiveEventError>:
 8000932:	f8df 13c0 	ldr.w	r1, [pc, #960]	@ 8000cf4 <.text_46>
 8000936:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800093a:	2100      	movs	r1, #0
 800093c:	b2ca      	uxtb	r2, r1
 800093e:	4402      	add	r2, r0
 8000940:	f892 3071 	ldrb.w	r3, [r2, #113]	@ 0x71
 8000944:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000948:	2b20      	cmp	r3, #32
 800094a:	d004      	beq.n	8000956 <PE_PRL_PostReceiveEventError+0x24>
 800094c:	1c49      	adds	r1, r1, #1
 800094e:	b2ca      	uxtb	r2, r1
 8000950:	2a02      	cmp	r2, #2
 8000952:	d3f3      	bcc.n	800093c <PE_PRL_PostReceiveEventError+0xa>
 8000954:	4770      	bx	lr
 8000956:	2000      	movs	r0, #0
 8000958:	f882 0071 	strb.w	r0, [r2, #113]	@ 0x71
 800095c:	4770      	bx	lr

0800095e <PE_PRL_PostReceiveEventCopy>:
 800095e:	b510      	push	{r4, lr}
 8000960:	f8df 2390 	ldr.w	r2, [pc, #912]	@ 8000cf4 <.text_46>
 8000964:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000968:	2200      	movs	r2, #0
 800096a:	b2d3      	uxtb	r3, r2
 800096c:	18c4      	adds	r4, r0, r3
 800096e:	f894 4071 	ldrb.w	r4, [r4, #113]	@ 0x71
 8000972:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8000976:	2c20      	cmp	r4, #32
 8000978:	d004      	beq.n	8000984 <PE_PRL_PostReceiveEventCopy+0x26>
 800097a:	1c52      	adds	r2, r2, #1
 800097c:	b2d3      	uxtb	r3, r2
 800097e:	2b02      	cmp	r3, #2
 8000980:	d3f3      	bcc.n	800096a <PE_PRL_PostReceiveEventCopy+0xc>
 8000982:	bd10      	pop	{r4, pc}
 8000984:	221e      	movs	r2, #30
 8000986:	fb12 f303 	smulbb	r3, r2, r3
 800098a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800098e:	4403      	add	r3, r0
 8000990:	f103 0035 	add.w	r0, r3, #53	@ 0x35
 8000994:	f018 b8bc 	b.w	8018b10 <__aeabi_memcpy>

08000998 <PE_PRL_PostReceiveEventComplete>:
 8000998:	b538      	push	{r3, r4, r5, lr}
 800099a:	f8df 1358 	ldr.w	r1, [pc, #856]	@ 8000cf4 <.text_46>
 800099e:	4602      	mov	r2, r0
 80009a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009a4:	2100      	movs	r1, #0
 80009a6:	1854      	adds	r4, r2, r1
 80009a8:	1c4b      	adds	r3, r1, #1
 80009aa:	f894 5071 	ldrb.w	r5, [r4, #113]	@ 0x71
 80009ae:	f005 0560 	and.w	r5, r5, #96	@ 0x60
 80009b2:	2d20      	cmp	r5, #32
 80009b4:	d003      	beq.n	80009be <PE_PRL_PostReceiveEventComplete+0x26>
 80009b6:	b2d9      	uxtb	r1, r3
 80009b8:	2902      	cmp	r1, #2
 80009ba:	d3f4      	bcc.n	80009a6 <PE_PRL_PostReceiveEventComplete+0xe>
 80009bc:	bd31      	pop	{r0, r4, r5, pc}
 80009be:	f894 4071 	ldrb.w	r4, [r4, #113]	@ 0x71
 80009c2:	1855      	adds	r5, r2, r1
 80009c4:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 80009c8:	f885 4071 	strb.w	r4, [r5, #113]	@ 0x71
 80009cc:	f892 1034 	ldrb.w	r1, [r2, #52]	@ 0x34
 80009d0:	b909      	cbnz	r1, 80009d6 <PE_PRL_PostReceiveEventComplete+0x3e>
 80009d2:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
 80009d6:	6891      	ldr	r1, [r2, #8]
 80009d8:	e702      	b.n	80007e0 <.text_24>

080009da <PE_SubStateMachine_Generic>:
 80009da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009de:	b08c      	sub	sp, #48	@ 0x30
 80009e0:	4604      	mov	r4, r0
 80009e2:	2000      	movs	r0, #0
 80009e4:	9003      	str	r0, [sp, #12]
 80009e6:	2502      	movs	r5, #2
 80009e8:	7b60      	ldrb	r0, [r4, #13]
 80009ea:	2801      	cmp	r0, #1
 80009ec:	460e      	mov	r6, r1
 80009ee:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 80009f2:	f248 081b 	movw	r8, #32795	@ 0x801b
 80009f6:	f000 80eb 	beq.w	8000bd0 <PE_SubStateMachine_Generic+0x1f6>
 80009fa:	2818      	cmp	r0, #24
 80009fc:	d01b      	beq.n	8000a36 <PE_SubStateMachine_Generic+0x5c>
 80009fe:	2819      	cmp	r0, #25
 8000a00:	d022      	beq.n	8000a48 <PE_SubStateMachine_Generic+0x6e>
 8000a02:	281d      	cmp	r0, #29
 8000a04:	d05f      	beq.n	8000ac6 <PE_SubStateMachine_Generic+0xec>
 8000a06:	2827      	cmp	r0, #39	@ 0x27
 8000a08:	d079      	beq.n	8000afe <PE_SubStateMachine_Generic+0x124>
 8000a0a:	2828      	cmp	r0, #40	@ 0x28
 8000a0c:	f000 8084 	beq.w	8000b18 <PE_SubStateMachine_Generic+0x13e>
 8000a10:	2829      	cmp	r0, #41	@ 0x29
 8000a12:	f000 808b 	beq.w	8000b2c <PE_SubStateMachine_Generic+0x152>
 8000a16:	284b      	cmp	r0, #75	@ 0x4b
 8000a18:	f000 8090 	beq.w	8000b3c <PE_SubStateMachine_Generic+0x162>
 8000a1c:	2864      	cmp	r0, #100	@ 0x64
 8000a1e:	f000 80de 	beq.w	8000bde <PE_SubStateMachine_Generic+0x204>
 8000a22:	2867      	cmp	r0, #103	@ 0x67
 8000a24:	f000 809d 	beq.w	8000b62 <PE_SubStateMachine_Generic+0x188>
 8000a28:	2868      	cmp	r0, #104	@ 0x68
 8000a2a:	f000 80a8 	beq.w	8000b7e <PE_SubStateMachine_Generic+0x1a4>
 8000a2e:	2874      	cmp	r0, #116	@ 0x74
 8000a30:	f000 80fb 	beq.w	8000c2a <PE_SubStateMachine_Generic+0x250>
 8000a34:	e100      	b.n	8000c38 <PE_SubStateMachine_Generic+0x25e>
 8000a36:	9500      	str	r5, [sp, #0]
 8000a38:	2319      	movs	r3, #25
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	f000 f902 	bl	8000c44 <.text_37>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d168      	bne.n	8000b16 <PE_SubStateMachine_Generic+0x13c>
 8000a44:	2007      	movs	r0, #7
 8000a46:	e095      	b.n	8000b74 <PE_SubStateMachine_Generic+0x19a>
 8000a48:	7830      	ldrb	r0, [r6, #0]
 8000a4a:	2811      	cmp	r0, #17
 8000a4c:	d137      	bne.n	8000abe <PE_SubStateMachine_Generic+0xe4>
 8000a4e:	88b9      	ldrh	r1, [r7, #4]
 8000a50:	0bc8      	lsrs	r0, r1, #15
 8000a52:	d11e      	bne.n	8000a92 <PE_SubStateMachine_Generic+0xb8>
 8000a54:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000a58:	b1d8      	cbz	r0, 8000a92 <PE_SubStateMachine_Generic+0xb8>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	f000 011f 	and.w	r1, r0, #31
 8000a60:	2904      	cmp	r1, #4
 8000a62:	d116      	bne.n	8000a92 <PE_SubStateMachine_Generic+0xb8>
 8000a64:	68a5      	ldr	r5, [r4, #8]
 8000a66:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8000a6a:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8000a6e:	68b8      	ldr	r0, [r7, #8]
 8000a70:	1c82      	adds	r2, r0, #2
 8000a72:	7b20      	ldrb	r0, [r4, #12]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	2105      	movs	r1, #5
 8000a78:	47e0      	blx	ip
 8000a7a:	7830      	ldrb	r0, [r6, #0]
 8000a7c:	2814      	cmp	r0, #20
 8000a7e:	d001      	beq.n	8000a84 <PE_SubStateMachine_Generic+0xaa>
 8000a80:	f000 f8e8 	bl	8000c54 <.text_39>
 8000a84:	2003      	movs	r0, #3
 8000a86:	7360      	strb	r0, [r4, #13]
 8000a88:	2107      	movs	r1, #7
 8000a8a:	7b20      	ldrb	r0, [r4, #12]
 8000a8c:	f7ff fcf9 	bl	8000482 <USBPD_PE_Notification>
 8000a90:	2500      	movs	r5, #0
 8000a92:	88b8      	ldrh	r0, [r7, #4]
 8000a94:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8000a98:	d111      	bne.n	8000abe <PE_SubStateMachine_Generic+0xe4>
 8000a9a:	f000 001f 	and.w	r0, r0, #31
 8000a9e:	2804      	cmp	r0, #4
 8000aa0:	bf18      	it	ne
 8000aa2:	2810      	cmpne	r0, #16
 8000aa4:	d10b      	bne.n	8000abe <PE_SubStateMachine_Generic+0xe4>
 8000aa6:	7830      	ldrb	r0, [r6, #0]
 8000aa8:	2814      	cmp	r0, #20
 8000aaa:	d001      	beq.n	8000ab0 <PE_SubStateMachine_Generic+0xd6>
 8000aac:	f000 f8d2 	bl	8000c54 <.text_39>
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	7360      	strb	r0, [r4, #13]
 8000ab4:	2108      	movs	r1, #8
 8000ab6:	7b20      	ldrb	r0, [r4, #12]
 8000ab8:	f7ff fce3 	bl	8000482 <USBPD_PE_Notification>
 8000abc:	2500      	movs	r5, #0
 8000abe:	f000 f8c5 	bl	8000c4c <.text_38>
 8000ac2:	d128      	bne.n	8000b16 <PE_SubStateMachine_Generic+0x13c>
 8000ac4:	e0b4      	b.n	8000c30 <PE_SubStateMachine_Generic+0x256>
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	9104      	str	r1, [sp, #16]
 8000aca:	ab04      	add	r3, sp, #16
 8000acc:	68a6      	ldr	r6, [r4, #8]
 8000ace:	7b20      	ldrb	r0, [r4, #12]
 8000ad0:	6977      	ldr	r7, [r6, #20]
 8000ad2:	aa05      	add	r2, sp, #20
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	47b8      	blx	r7
 8000ad8:	9804      	ldr	r0, [sp, #16]
 8000ada:	2104      	movs	r1, #4
 8000adc:	f000 f8fa 	bl	8000cd4 <PE_CheckDataSizeFromGetDataInfo>
 8000ae0:	b108      	cbz	r0, 8000ae6 <PE_SubStateMachine_Generic+0x10c>
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	e0a9      	b.n	8000c3a <PE_SubStateMachine_Generic+0x260>
 8000ae6:	9a04      	ldr	r2, [sp, #16]
 8000ae8:	f000 f8b8 	bl	8000c5c <.text_40>
 8000aec:	ab05      	add	r3, sp, #20
 8000aee:	2204      	movs	r2, #4
 8000af0:	4620      	mov	r0, r4
 8000af2:	f000 f95e 	bl	8000db2 <PE_Send_DataMessage>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d10d      	bne.n	8000b16 <PE_SubStateMachine_Generic+0x13c>
 8000afa:	210a      	movs	r1, #10
 8000afc:	e091      	b.n	8000c22 <PE_SubStateMachine_Generic+0x248>
 8000afe:	2012      	movs	r0, #18
 8000b00:	7620      	strb	r0, [r4, #24]
 8000b02:	2105      	movs	r1, #5
 8000b04:	7b20      	ldrb	r0, [r4, #12]
 8000b06:	f001 faba 	bl	800207e <USBDPD_PRL_BistCarrierEyeMode>
 8000b0a:	2028      	movs	r0, #40	@ 0x28
 8000b0c:	7360      	strb	r0, [r4, #13]
 8000b0e:	f248 012d 	movw	r1, #32813	@ 0x802d
 8000b12:	8361      	strh	r1, [r4, #26]
 8000b14:	252d      	movs	r5, #45	@ 0x2d
 8000b16:	e091      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b18:	f000 f898 	bl	8000c4c <.text_38>
 8000b1c:	d1fb      	bne.n	8000b16 <PE_SubStateMachine_Generic+0x13c>
 8000b1e:	7b20      	ldrb	r0, [r4, #12]
 8000b20:	2105      	movs	r1, #5
 8000b22:	f001 fab2 	bl	800208a <USBDPD_PRL_BistCarrierEyeModeExit>
 8000b26:	2000      	movs	r0, #0
 8000b28:	8360      	strh	r0, [r4, #26]
 8000b2a:	e081      	b.n	8000c30 <PE_SubStateMachine_Generic+0x256>
 8000b2c:	7831      	ldrb	r1, [r6, #0]
 8000b2e:	2914      	cmp	r1, #20
 8000b30:	d003      	beq.n	8000b3a <PE_SubStateMachine_Generic+0x160>
 8000b32:	2014      	movs	r0, #20
 8000b34:	7030      	strb	r0, [r6, #0]
 8000b36:	f000 f88f 	bl	8000c58 <.text_39+0x4>
 8000b3a:	e07f      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b3c:	68a6      	ldr	r6, [r4, #8]
 8000b3e:	7b20      	ldrb	r0, [r4, #12]
 8000b40:	6977      	ldr	r7, [r6, #20]
 8000b42:	ab03      	add	r3, sp, #12
 8000b44:	aa04      	add	r2, sp, #16
 8000b46:	2114      	movs	r1, #20
 8000b48:	47b8      	blx	r7
 8000b4a:	9803      	ldr	r0, [sp, #12]
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d073      	beq.n	8000c38 <PE_SubStateMachine_Generic+0x25e>
 8000b50:	9a03      	ldr	r2, [sp, #12]
 8000b52:	f000 f883 	bl	8000c5c <.text_40>
 8000b56:	ab04      	add	r3, sp, #16
 8000b58:	220c      	movs	r2, #12
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f000 f929 	bl	8000db2 <PE_Send_DataMessage>
 8000b60:	e06c      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b62:	9500      	str	r5, [sp, #0]
 8000b64:	2368      	movs	r3, #104	@ 0x68
 8000b66:	7879      	ldrb	r1, [r7, #1]
 8000b68:	2218      	movs	r2, #24
 8000b6a:	f000 f86c 	bl	8000c46 <.text_37+0x2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d164      	bne.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b72:	200f      	movs	r0, #15
 8000b74:	7620      	strb	r0, [r4, #24]
 8000b76:	f8a4 801a 	strh.w	r8, [r4, #26]
 8000b7a:	251b      	movs	r5, #27
 8000b7c:	e05e      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b7e:	7830      	ldrb	r0, [r6, #0]
 8000b80:	2814      	cmp	r0, #20
 8000b82:	d020      	beq.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000b84:	7839      	ldrb	r1, [r7, #0]
 8000b86:	7878      	ldrb	r0, [r7, #1]
 8000b88:	4281      	cmp	r1, r0
 8000b8a:	d11c      	bne.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000b8c:	88b9      	ldrh	r1, [r7, #4]
 8000b8e:	0bc8      	lsrs	r0, r1, #15
 8000b90:	d119      	bne.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000b92:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000b96:	b1b0      	cbz	r0, 8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000b98:	7938      	ldrb	r0, [r7, #4]
 8000b9a:	f000 001f 	and.w	r0, r0, #31
 8000b9e:	280c      	cmp	r0, #12
 8000ba0:	d111      	bne.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000ba2:	68b8      	ldr	r0, [r7, #8]
 8000ba4:	68a5      	ldr	r5, [r4, #8]
 8000ba6:	69af      	ldr	r7, [r5, #24]
 8000ba8:	1c82      	adds	r2, r0, #2
 8000baa:	7b20      	ldrb	r0, [r4, #12]
 8000bac:	2304      	movs	r3, #4
 8000bae:	2114      	movs	r1, #20
 8000bb0:	47b8      	blx	r7
 8000bb2:	2003      	movs	r0, #3
 8000bb4:	7360      	strb	r0, [r4, #13]
 8000bb6:	2500      	movs	r5, #0
 8000bb8:	7831      	ldrb	r1, [r6, #0]
 8000bba:	2914      	cmp	r1, #20
 8000bbc:	d003      	beq.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000bbe:	2014      	movs	r0, #20
 8000bc0:	7030      	strb	r0, [r6, #0]
 8000bc2:	f000 f849 	bl	8000c58 <.text_39+0x4>
 8000bc6:	f000 f841 	bl	8000c4c <.text_38>
 8000bca:	d137      	bne.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000bcc:	2111      	movs	r1, #17
 8000bce:	e030      	b.n	8000c32 <PE_SubStateMachine_Generic+0x258>
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	9000      	str	r0, [sp, #0]
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	2210      	movs	r2, #16
 8000bd8:	f000 f834 	bl	8000c44 <.text_37>
 8000bdc:	e02e      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000bde:	68a6      	ldr	r6, [r4, #8]
 8000be0:	7b20      	ldrb	r0, [r4, #12]
 8000be2:	6977      	ldr	r7, [r6, #20]
 8000be4:	ab03      	add	r3, sp, #12
 8000be6:	f104 0282 	add.w	r2, r4, #130	@ 0x82
 8000bea:	2113      	movs	r1, #19
 8000bec:	47b8      	blx	r7
 8000bee:	9803      	ldr	r0, [sp, #12]
 8000bf0:	2118      	movs	r1, #24
 8000bf2:	f000 f86f 	bl	8000cd4 <PE_CheckDataSizeFromGetDataInfo>
 8000bf6:	b9f8      	cbnz	r0, 8000c38 <PE_SubStateMachine_Generic+0x25e>
 8000bf8:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	7041      	strb	r1, [r0, #1]
 8000c00:	7001      	strb	r1, [r0, #0]
 8000c02:	2000      	movs	r0, #0
 8000c04:	9a03      	ldr	r2, [sp, #12]
 8000c06:	9002      	str	r0, [sp, #8]
 8000c08:	1d12      	adds	r2, r2, #4
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	b292      	uxth	r2, r2
 8000c0e:	9101      	str	r1, [sp, #4]
 8000c10:	9200      	str	r2, [sp, #0]
 8000c12:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8000c16:	220f      	movs	r2, #15
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f000 f960 	bl	8000ee0 <PE_Send_ExtendedMessage>
 8000c20:	2161      	movs	r1, #97	@ 0x61
 8000c22:	7b20      	ldrb	r0, [r4, #12]
 8000c24:	f7ff fc2d 	bl	8000482 <USBPD_PE_Notification>
 8000c28:	e008      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000c2a:	f000 f80f 	bl	8000c4c <.text_38>
 8000c2e:	d105      	bne.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000c30:	2103      	movs	r1, #3
 8000c32:	7361      	strb	r1, [r4, #13]
 8000c34:	2500      	movs	r5, #0
 8000c36:	e001      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000c38:	2001      	movs	r0, #1
 8000c3a:	7360      	strb	r0, [r4, #13]
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	b00c      	add	sp, #48	@ 0x30
 8000c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c44 <.text_37>:
 8000c44:	2100      	movs	r1, #0
 8000c46:	4620      	mov	r0, r4
 8000c48:	f000 b886 	b.w	8000d58 <PE_Send_CtrlMessage>

08000c4c <.text_38>:
 8000c4c:	8b60      	ldrh	r0, [r4, #26]
 8000c4e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8000c52:	4770      	bx	lr

08000c54 <.text_39>:
 8000c54:	2114      	movs	r1, #20
 8000c56:	7031      	strb	r1, [r6, #0]
 8000c58:	4620      	mov	r0, r4
 8000c5a:	e530      	b.n	80006be <PE_Clear_RxEvent>

08000c5c <.text_40>:
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	0892      	lsrs	r2, r2, #2
 8000c60:	2100      	movs	r1, #0
 8000c62:	9001      	str	r0, [sp, #4]
 8000c64:	9200      	str	r2, [sp, #0]
 8000c66:	9102      	str	r1, [sp, #8]
 8000c68:	4770      	bx	lr

08000c6a <PE_UpdateTimer>:
 8000c6a:	b510      	push	{r4, lr}
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f3c2 040e 	ubfx	r4, r2, #0, #15
 8000c72:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000c76:	42a1      	cmp	r1, r4
 8000c78:	bfb8      	it	lt
 8000c7a:	1a50      	sublt	r0, r2, r1
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	bd10      	pop	{r4, pc}

08000c80 <PE_CallHardResetCallback>:
 8000c80:	6883      	ldr	r3, [r0, #8]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	7b00      	ldrbne	r0, [r0, #12]

08000c8a <__iar_annotation$$tailcall>:
 8000c8a:	4718      	bxne	r3
 8000c8c:	4770      	bx	lr

08000c8e <PE_SetPowerNegotiation>:
 8000c8e:	6842      	ldr	r2, [r0, #4]
 8000c90:	6813      	ldr	r3, [r2, #0]
 8000c92:	f3c3 2202 	ubfx	r2, r3, #8, #3
 8000c96:	4291      	cmp	r1, r2
 8000c98:	d007      	beq.n	8000caa <PE_SetPowerNegotiation+0x1c>
 8000c9a:	6842      	ldr	r2, [r0, #4]
 8000c9c:	f361 230a 	bfi	r3, r1, #8, #3
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	215a      	movs	r1, #90	@ 0x5a
 8000ca4:	7b00      	ldrb	r0, [r0, #12]
 8000ca6:	f7ff bbec 	b.w	8000482 <USBPD_PE_Notification>
 8000caa:	4770      	bx	lr

08000cac <PE_SetPowerNegociation>:
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	6860      	ldr	r0, [r4, #4]
 8000cb4:	6802      	ldr	r2, [r0, #0]
 8000cb6:	f3c2 2002 	ubfx	r0, r2, #8, #3
 8000cba:	4285      	cmp	r5, r0
 8000cbc:	d003      	beq.n	8000cc6 <PE_SetPowerNegociation+0x1a>
 8000cbe:	7b20      	ldrb	r0, [r4, #12]
 8000cc0:	215a      	movs	r1, #90	@ 0x5a
 8000cc2:	f7ff fbde 	bl	8000482 <USBPD_PE_Notification>
 8000cc6:	6860      	ldr	r0, [r4, #4]
 8000cc8:	6801      	ldr	r1, [r0, #0]
 8000cca:	f365 210a 	bfi	r1, r5, #8, #3
 8000cce:	6001      	str	r1, [r0, #0]
 8000cd0:	bd31      	pop	{r0, r4, r5, pc}
	...

08000cd4 <PE_CheckDataSizeFromGetDataInfo>:
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	d208      	bcs.n	8000cee <PE_CheckDataSizeFromGetDataInfo+0x1a>
 8000cdc:	2018      	movs	r0, #24
 8000cde:	4c06      	ldr	r4, [pc, #24]	@ (8000cf8 <.text_47>)
 8000ce0:	a307      	add	r3, pc, #28	@ (adr r3, 8000d00 <.text_49>)
 8000ce2:	6825      	ldr	r5, [r4, #0]
 8000ce4:	9000      	str	r0, [sp, #0]
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2006      	movs	r0, #6
 8000cea:	47a8      	blx	r5
 8000cec:	2202      	movs	r2, #2
 8000cee:	4610      	mov	r0, r2
 8000cf0:	bd32      	pop	{r1, r4, r5, pc}
	...

08000cf4 <.text_46>:
 8000cf4:	2000050c 	.word	0x2000050c

08000cf8 <.text_47>:
 8000cf8:	20000000 	.word	0x20000000

08000cfc <.text_48>:
 8000cfc:	0801c164 	.word	0x0801c164

08000d00 <.text_49>:
 8000d00:	61746144 	.word	0x61746144
 8000d04:	7a695320 	.word	0x7a695320
 8000d08:	73692065 	.word	0x73692065
 8000d0c:	746f6e20 	.word	0x746f6e20
 8000d10:	726f6320 	.word	0x726f6320
 8000d14:	74636572 	.word	0x74636572
 8000d18:	00          	.byte	0x00
 8000d19:	00          	.byte	0x00
	...

08000d1c <USBPD_PE_SetTrace>:
 8000d1c:	0001      	movs	r1, r0
 8000d1e:	4906      	ldr	r1, [pc, #24]	@ (8000d38 <.text_5>)
 8000d20:	bf08      	it	eq
 8000d22:	f20f 0031 	addweq	r0, pc, #49	@ 0x31
 8000d26:	6008      	str	r0, [r1, #0]
 8000d28:	4770      	bx	lr

08000d2a <USBPD_PE_CheckLIB>:
 8000d2a:	4601      	mov	r1, r0
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	4a03      	ldr	r2, [pc, #12]	@ (8000d3c <.text_6>)
 8000d30:	4291      	cmp	r1, r2
 8000d32:	bf08      	it	eq
 8000d34:	2001      	moveq	r0, #1
 8000d36:	4770      	bx	lr

08000d38 <.text_5>:
 8000d38:	20000000 	.word	0x20000000

08000d3c <.text_6>:
 8000d3c:	30410004 	.word	0x30410004

08000d40 <USBPD_PE_GetMemoryConsumption>:
 8000d40:	b510      	push	{r4, lr}
 8000d42:	f000 ff14 	bl	8001b6e <USBPD_PRL_GetMemoryConsumption>
 8000d46:	4604      	mov	r4, r0
 8000d48:	f7ff fb1e 	bl	8000388 <USBPD_CAD_GetMemoryConsumption>
 8000d4c:	1904      	adds	r4, r0, r4
 8000d4e:	f504 60ff 	add.w	r0, r4, #2040	@ 0x7f8
 8000d52:	bd10      	pop	{r4, pc}

08000d54 <PE_Trace_Empty>:
 8000d54:	4770      	bx	lr
	...

08000d58 <PE_Send_CtrlMessage>:
 8000d58:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8000d5c:	9c08      	ldr	r4, [sp, #32]
 8000d5e:	4606      	mov	r6, r0
 8000d60:	4688      	mov	r8, r1
 8000d62:	4617      	mov	r7, r2
 8000d64:	461d      	mov	r5, r3
 8000d66:	f000 f81f 	bl	8000da8 <.text_3>
 8000d6a:	b190      	cbz	r0, 8000d92 <PE_Send_CtrlMessage+0x3a>
 8000d6c:	9401      	str	r4, [sp, #4]
 8000d6e:	2002      	movs	r0, #2
 8000d70:	9000      	str	r0, [sp, #0]
 8000d72:	f106 037e 	add.w	r3, r6, #126	@ 0x7e
 8000d76:	7b30      	ldrb	r0, [r6, #12]
 8000d78:	463a      	mov	r2, r7
 8000d7a:	4641      	mov	r1, r8
 8000d7c:	f000 ff2c 	bl	8001bd8 <USBPD_PRL_SendMessage>
 8000d80:	2803      	cmp	r0, #3
 8000d82:	d0f0      	beq.n	8000d66 <PE_Send_CtrlMessage+0xe>
 8000d84:	2810      	cmp	r0, #16
 8000d86:	d00d      	beq.n	8000da4 <PE_Send_CtrlMessage+0x4c>
 8000d88:	2f0d      	cmp	r7, #13
 8000d8a:	bf0c      	ite	eq
 8000d8c:	2201      	moveq	r2, #1
 8000d8e:	2200      	movne	r2, #0
 8000d90:	e002      	b.n	8000d98 <PE_Send_CtrlMessage+0x40>
 8000d92:	7370      	strb	r0, [r6, #13]
 8000d94:	2010      	movs	r0, #16
 8000d96:	e005      	b.n	8000da4 <PE_Send_CtrlMessage+0x4c>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	9500      	str	r5, [sp, #0]
 8000d9c:	4641      	mov	r1, r8
 8000d9e:	4630      	mov	r0, r6
 8000da0:	f000 fa6c 	bl	800127c <PE_CheckSendMessageStatus>
 8000da4:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08000da8 <.text_3>:
 8000da8:	6870      	ldr	r0, [r6, #4]
 8000daa:	6801      	ldr	r1, [r0, #0]
 8000dac:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8000db0:	4770      	bx	lr

08000db2 <PE_Send_DataMessage>:
 8000db2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000db4:	4604      	mov	r4, r0
 8000db6:	9f08      	ldr	r7, [sp, #32]
 8000db8:	460d      	mov	r5, r1
 8000dba:	4616      	mov	r6, r2
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	e010      	b.n	8000de2 <PE_Send_DataMessage+0x30>
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8000dc6:	f8d3 c000 	ldr.w	ip, [r3]
 8000dca:	440a      	add	r2, r1
 8000dcc:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8000dd0:	1c49      	adds	r1, r1, #1
 8000dd2:	fa2c fc0e 	lsr.w	ip, ip, lr
 8000dd6:	2904      	cmp	r1, #4
 8000dd8:	f882 c080 	strb.w	ip, [r2, #128]	@ 0x80
 8000ddc:	d3f1      	bcc.n	8000dc2 <PE_Send_DataMessage+0x10>
 8000dde:	1d1b      	adds	r3, r3, #4
 8000de0:	1c40      	adds	r0, r0, #1
 8000de2:	42b8      	cmp	r0, r7
 8000de4:	d3ec      	bcc.n	8000dc0 <PE_Send_DataMessage+0xe>
 8000de6:	6860      	ldr	r0, [r4, #4]
 8000de8:	f7ff ffdf 	bl	8000daa <.text_3+0x2>
 8000dec:	b1d8      	cbz	r0, 8000e26 <PE_Send_DataMessage+0x74>
 8000dee:	f89d 0028 	ldrb.w	r0, [sp, #40]	@ 0x28
 8000df2:	9001      	str	r0, [sp, #4]
 8000df4:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8000df8:	00b8      	lsls	r0, r7, #2
 8000dfa:	1c80      	adds	r0, r0, #2
 8000dfc:	b280      	uxth	r0, r0
 8000dfe:	9000      	str	r0, [sp, #0]
 8000e00:	4632      	mov	r2, r6
 8000e02:	7b20      	ldrb	r0, [r4, #12]
 8000e04:	4629      	mov	r1, r5
 8000e06:	f000 fee7 	bl	8001bd8 <USBPD_PRL_SendMessage>
 8000e0a:	2803      	cmp	r0, #3
 8000e0c:	d0eb      	beq.n	8000de6 <PE_Send_DataMessage+0x34>
 8000e0e:	2810      	cmp	r0, #16
 8000e10:	d008      	beq.n	8000e24 <PE_Send_DataMessage+0x72>
 8000e12:	f89d 1024 	ldrb.w	r1, [sp, #36]	@ 0x24
 8000e16:	9100      	str	r1, [sp, #0]
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f000 fa2c 	bl	800127c <PE_CheckSendMessageStatus>
 8000e24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000e26:	2010      	movs	r0, #16
 8000e28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000e2a <PE_Check_ExtendedMessage>:
 8000e2a:	b570      	push	{r4, r5, r6, lr}
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8000e30:	7881      	ldrb	r1, [r0, #2]
 8000e32:	78c0      	ldrb	r0, [r0, #3]
 8000e34:	eb01 2200 	add.w	r2, r1, r0, lsl #8
 8000e38:	f104 0174 	add.w	r1, r4, #116	@ 0x74
 8000e3c:	800a      	strh	r2, [r1, #0]
 8000e3e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8000e42:	f000 001f 	and.w	r0, r0, #31
 8000e46:	7088      	strb	r0, [r1, #2]
 8000e48:	f3c2 20c3 	ubfx	r0, r2, #11, #4
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	bf1e      	ittt	ne
 8000e50:	f3c2 2080 	ubfxne	r0, r2, #10, #1
 8000e54:	2800      	cmpne	r0, #0
 8000e56:	2034      	movne	r0, #52	@ 0x34
 8000e58:	d13d      	bne.n	8000ed6 <PE_Check_ExtendedMessage+0xac>
 8000e5a:	0410      	lsls	r0, r2, #16
 8000e5c:	0fc0      	lsrs	r0, r0, #31
 8000e5e:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8000e62:	d10d      	bne.n	8000e80 <PE_Check_ExtendedMessage+0x56>
 8000e64:	f8a4 32a4 	strh.w	r3, [r4, #676]	@ 0x2a4
 8000e68:	f8b4 22a4 	ldrh.w	r2, [r4, #676]	@ 0x2a4
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	d21c      	bcs.n	8000eaa <PE_Check_ExtendedMessage+0x80>
 8000e70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e72:	4403      	add	r3, r0
 8000e74:	1825      	adds	r5, r4, r0
 8000e76:	791a      	ldrb	r2, [r3, #4]
 8000e78:	f885 209c 	strb.w	r2, [r5, #156]	@ 0x9c
 8000e7c:	1c40      	adds	r0, r0, #1
 8000e7e:	e7f3      	b.n	8000e68 <PE_Check_ExtendedMessage+0x3e>
 8000e80:	f412 4ff8 	tst.w	r2, #31744	@ 0x7c00
 8000e84:	d106      	bne.n	8000e94 <PE_Check_ExtendedMessage+0x6a>
 8000e86:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 8000e88:	f3c0 3002 	ubfx	r0, r0, #12, #3
 8000e8c:	2807      	cmp	r0, #7
 8000e8e:	bf28      	it	cs
 8000e90:	2b1b      	cmpcs	r3, #27
 8000e92:	d30a      	bcc.n	8000eaa <PE_Check_ExtendedMessage+0x80>
 8000e94:	f3c2 2080 	ubfx	r0, r2, #10, #1
 8000e98:	b938      	cbnz	r0, 8000eaa <PE_Check_ExtendedMessage+0x80>
 8000e9a:	f8b4 02a4 	ldrh.w	r0, [r4, #676]	@ 0x2a4
 8000e9e:	4298      	cmp	r0, r3
 8000ea0:	d203      	bcs.n	8000eaa <PE_Check_ExtendedMessage+0x80>
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	8361      	strh	r1, [r4, #26]
 8000ea6:	2037      	movs	r0, #55	@ 0x37
 8000ea8:	e015      	b.n	8000ed6 <PE_Check_ExtendedMessage+0xac>
 8000eaa:	7e20      	ldrb	r0, [r4, #24]
 8000eac:	b1a8      	cbz	r0, 8000eda <PE_Check_ExtendedMessage+0xb0>
 8000eae:	7888      	ldrb	r0, [r1, #2]
 8000eb0:	280f      	cmp	r0, #15
 8000eb2:	d10f      	bne.n	8000ed4 <PE_Check_ExtendedMessage+0xaa>
 8000eb4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8000eb6:	68a5      	ldr	r5, [r4, #8]
 8000eb8:	69ae      	ldr	r6, [r5, #24]
 8000eba:	1d02      	adds	r2, r0, #4
 8000ebc:	7b20      	ldrb	r0, [r4, #12]
 8000ebe:	2318      	movs	r3, #24
 8000ec0:	2113      	movs	r1, #19
 8000ec2:	47b0      	blx	r6
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	7360      	strb	r0, [r4, #13]
 8000ec8:	2162      	movs	r1, #98	@ 0x62
 8000eca:	7b20      	ldrb	r0, [r4, #12]
 8000ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000ed0:	f7ff bad7 	b.w	8000482 <USBPD_PE_Notification>
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	7360      	strb	r0, [r4, #13]
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
 8000eda:	2101      	movs	r1, #1
 8000edc:	7361      	strb	r1, [r4, #13]
 8000ede:	bd70      	pop	{r4, r5, r6, pc}

08000ee0 <PE_Send_ExtendedMessage>:
 8000ee0:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8000ee4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8000ee6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8000ee8:	4606      	mov	r6, r0
 8000eea:	460f      	mov	r7, r1
 8000eec:	4690      	mov	r8, r2
 8000eee:	4699      	mov	r9, r3
 8000ef0:	f7ff ff5a 	bl	8000da8 <.text_3>
 8000ef4:	b1b8      	cbz	r0, 8000f26 <PE_Send_ExtendedMessage+0x46>
 8000ef6:	9501      	str	r5, [sp, #4]
 8000ef8:	9400      	str	r4, [sp, #0]
 8000efa:	464b      	mov	r3, r9
 8000efc:	7b30      	ldrb	r0, [r6, #12]
 8000efe:	f048 0280 	orr.w	r2, r8, #128	@ 0x80
 8000f02:	4639      	mov	r1, r7
 8000f04:	f000 fe68 	bl	8001bd8 <USBPD_PRL_SendMessage>
 8000f08:	2803      	cmp	r0, #3
 8000f0a:	d0f1      	beq.n	8000ef0 <PE_Send_ExtendedMessage+0x10>
 8000f0c:	2810      	cmp	r0, #16
 8000f0e:	d008      	beq.n	8000f22 <PE_Send_ExtendedMessage+0x42>
 8000f10:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 8000f14:	9100      	str	r1, [sp, #0]
 8000f16:	4603      	mov	r3, r0
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4639      	mov	r1, r7
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f000 f9ad 	bl	800127c <PE_CheckSendMessageStatus>
 8000f22:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8000f26:	2011      	movs	r0, #17
 8000f28:	7370      	strb	r0, [r6, #13]
 8000f2a:	2010      	movs	r0, #16
 8000f2c:	e7f9      	b.n	8000f22 <PE_Send_ExtendedMessage+0x42>

08000f2e <PE_SubStateMachine_ExtendedMessages>:
 8000f2e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000f32:	2602      	movs	r6, #2
 8000f34:	4604      	mov	r4, r0
 8000f36:	f104 0182 	add.w	r1, r4, #130	@ 0x82
 8000f3a:	7b63      	ldrb	r3, [r4, #13]
 8000f3c:	2b31      	cmp	r3, #49	@ 0x31
 8000f3e:	f504 72d0 	add.w	r2, r4, #416	@ 0x1a0
 8000f42:	f104 0574 	add.w	r5, r4, #116	@ 0x74
 8000f46:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8000f4a:	f504 7729 	add.w	r7, r4, #676	@ 0x2a4
 8000f4e:	f248 001b 	movw	r0, #32795	@ 0x801b
 8000f52:	d010      	beq.n	8000f76 <PE_SubStateMachine_ExtendedMessages+0x48>
 8000f54:	2b33      	cmp	r3, #51	@ 0x33
 8000f56:	d004      	beq.n	8000f62 <PE_SubStateMachine_ExtendedMessages+0x34>
 8000f58:	2b34      	cmp	r3, #52	@ 0x34
 8000f5a:	d03a      	beq.n	8000fd2 <PE_SubStateMachine_ExtendedMessages+0xa4>
 8000f5c:	2b35      	cmp	r3, #53	@ 0x35
 8000f5e:	d066      	beq.n	800102e <PE_SubStateMachine_ExtendedMessages+0x100>
 8000f60:	2b36      	cmp	r3, #54	@ 0x36
 8000f62:	d07b      	beq.n	800105c <PE_SubStateMachine_ExtendedMessages+0x12e>
 8000f64:	2b37      	cmp	r3, #55	@ 0x37
 8000f66:	d07d      	beq.n	8001064 <PE_SubStateMachine_ExtendedMessages+0x136>
 8000f68:	2b38      	cmp	r3, #56	@ 0x38
 8000f6a:	bf01      	itttt	eq
 8000f6c:	2003      	moveq	r0, #3
 8000f6e:	7360      	strbeq	r0, [r4, #13]
 8000f70:	2600      	moveq	r6, #0
 8000f72:	803e      	strheq	r6, [r7, #0]
 8000f74:	e0a5      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 8000f76:	2300      	movs	r3, #0
 8000f78:	803b      	strh	r3, [r7, #0]
 8000f7a:	736b      	strb	r3, [r5, #13]
 8000f7c:	732b      	strb	r3, [r5, #12]
 8000f7e:	8878      	ldrh	r0, [r7, #2]
 8000f80:	281a      	cmp	r0, #26
 8000f82:	4618      	mov	r0, r3
 8000f84:	d906      	bls.n	8000f94 <PE_SubStateMachine_ExtendedMessages+0x66>
 8000f86:	f000 f8a0 	bl	80010ca <.text_8>
 8000f8a:	281a      	cmp	r0, #26
 8000f8c:	d3fb      	bcc.n	8000f86 <PE_SubStateMachine_ExtendedMessages+0x58>
 8000f8e:	e005      	b.n	8000f9c <PE_SubStateMachine_ExtendedMessages+0x6e>
 8000f90:	f000 f89b 	bl	80010ca <.text_8>
 8000f94:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8000f98:	4560      	cmp	r0, ip
 8000f9a:	d3f9      	bcc.n	8000f90 <PE_SubStateMachine_ExtendedMessages+0x62>
 8000f9c:	6920      	ldr	r0, [r4, #16]
 8000f9e:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	bf1a      	itte	ne
 8000fa6:	2302      	movne	r3, #2
 8000fa8:	2033      	movne	r0, #51	@ 0x33
 8000faa:	2003      	moveq	r0, #3
 8000fac:	9001      	str	r0, [sp, #4]
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8000fb4:	8878      	ldrh	r0, [r7, #2]
 8000fb6:	1d00      	adds	r0, r0, #4
 8000fb8:	b280      	uxth	r0, r0
 8000fba:	9000      	str	r0, [sp, #0]
 8000fbc:	78ea      	ldrb	r2, [r5, #3]
 8000fbe:	f898 1003 	ldrb.w	r1, [r8, #3]
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f7ff ff8c 	bl	8000ee0 <PE_Send_ExtendedMessage>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	d17a      	bne.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 8000fcc:	7968      	ldrb	r0, [r5, #5]
 8000fce:	7620      	strb	r0, [r4, #24]
 8000fd0:	e077      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 8000fd2:	882b      	ldrh	r3, [r5, #0]
 8000fd4:	887e      	ldrh	r6, [r7, #2]
 8000fd6:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 8000fda:	201a      	movs	r0, #26
 8000fdc:	4343      	muls	r3, r0
 8000fde:	42b3      	cmp	r3, r6
 8000fe0:	da04      	bge.n	8000fec <PE_SubStateMachine_ExtendedMessages+0xbe>
 8000fe2:	8828      	ldrh	r0, [r5, #0]
 8000fe4:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 8000fe8:	280a      	cmp	r0, #10
 8000fea:	d301      	bcc.n	8000ff0 <PE_SubStateMachine_ExtendedMessages+0xc2>
 8000fec:	2003      	movs	r0, #3
 8000fee:	e01b      	b.n	8001028 <PE_SubStateMachine_ExtendedMessages+0xfa>
 8000ff0:	1af0      	subs	r0, r6, r3
 8000ff2:	281a      	cmp	r0, #26
 8000ff4:	bf3a      	itte	cc
 8000ff6:	1af6      	subcc	r6, r6, r3
 8000ff8:	b2f6      	uxtbcc	r6, r6
 8000ffa:	261a      	movcs	r6, #26
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	e006      	b.n	800100e <PE_SubStateMachine_ExtendedMessages+0xe0>
 8001000:	eb00 0803 	add.w	r8, r0, r3
 8001004:	f812 8008 	ldrb.w	r8, [r2, r8]
 8001008:	f801 8000 	strb.w	r8, [r1, r0]
 800100c:	1c40      	adds	r0, r0, #1
 800100e:	42b0      	cmp	r0, r6
 8001010:	d3f6      	bcc.n	8001000 <PE_SubStateMachine_ExtendedMessages+0xd2>
 8001012:	8829      	ldrh	r1, [r5, #0]
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	7b20      	ldrb	r0, [r4, #12]
 8001018:	0ac9      	lsrs	r1, r1, #11
 800101a:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 800101e:	f001 010f 	and.w	r1, r1, #15
 8001022:	f001 fa44 	bl	80024ae <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001026:	2035      	movs	r0, #53	@ 0x35
 8001028:	7360      	strb	r0, [r4, #13]
 800102a:	2600      	movs	r6, #0
 800102c:	e049      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 800102e:	6920      	ldr	r0, [r4, #16]
 8001030:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8001034:	2800      	cmp	r0, #0
 8001036:	bf14      	ite	ne
 8001038:	2036      	movne	r0, #54	@ 0x36
 800103a:	2003      	moveq	r0, #3
 800103c:	2100      	movs	r1, #0
 800103e:	9001      	str	r0, [sp, #4]
 8001040:	9102      	str	r1, [sp, #8]
 8001042:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8001046:	8878      	ldrh	r0, [r7, #2]
 8001048:	9000      	str	r0, [sp, #0]
 800104a:	78ea      	ldrb	r2, [r5, #3]
 800104c:	f898 1000 	ldrb.w	r1, [r8]
 8001050:	4620      	mov	r0, r4
 8001052:	f7ff ff45 	bl	8000ee0 <PE_Send_ExtendedMessage>
 8001056:	2000      	movs	r0, #0
 8001058:	8038      	strh	r0, [r7, #0]
 800105a:	e032      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 800105c:	8360      	strh	r0, [r4, #26]
 800105e:	261b      	movs	r6, #27
 8001060:	2039      	movs	r0, #57	@ 0x39
 8001062:	e004      	b.n	800106e <PE_SubStateMachine_ExtendedMessages+0x140>
 8001064:	8b61      	ldrh	r1, [r4, #26]
 8001066:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800106a:	d102      	bne.n	8001072 <PE_SubStateMachine_ExtendedMessages+0x144>
 800106c:	200f      	movs	r0, #15
 800106e:	7360      	strb	r0, [r4, #13]
 8001070:	e027      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 8001072:	8360      	strh	r0, [r4, #26]
 8001074:	f104 017e 	add.w	r1, r4, #126	@ 0x7e
 8001078:	7b20      	ldrb	r0, [r4, #12]
 800107a:	f001 fa3c 	bl	80024f6 <USBPD_PRL_PrepareChunkRequest>
 800107e:	261b      	movs	r6, #27
 8001080:	6860      	ldr	r0, [r4, #4]
 8001082:	f7ff fe92 	bl	8000daa <.text_3+0x2>
 8001086:	b188      	cbz	r0, 80010ac <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001088:	2000      	movs	r0, #0
 800108a:	2106      	movs	r1, #6
 800108c:	9001      	str	r0, [sp, #4]
 800108e:	9100      	str	r1, [sp, #0]
 8001090:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8001094:	78aa      	ldrb	r2, [r5, #2]
 8001096:	f898 1000 	ldrb.w	r1, [r8]
 800109a:	7b20      	ldrb	r0, [r4, #12]
 800109c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010a0:	f000 fd9a 	bl	8001bd8 <USBPD_PRL_SendMessage>
 80010a4:	2803      	cmp	r0, #3
 80010a6:	4603      	mov	r3, r0
 80010a8:	d0ea      	beq.n	8001080 <PE_SubStateMachine_ExtendedMessages+0x152>
 80010aa:	e002      	b.n	80010b2 <PE_SubStateMachine_ExtendedMessages+0x184>
 80010ac:	2011      	movs	r0, #17
 80010ae:	7360      	strb	r0, [r4, #13]
 80010b0:	2310      	movs	r3, #16
 80010b2:	2039      	movs	r0, #57	@ 0x39
 80010b4:	9000      	str	r0, [sp, #0]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f898 1000 	ldrb.w	r1, [r8]
 80010bc:	4620      	mov	r0, r4
 80010be:	f000 f8dd 	bl	800127c <PE_CheckSendMessageStatus>
 80010c2:	4630      	mov	r0, r6
 80010c4:	b004      	add	sp, #16
 80010c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080010ca <.text_8>:
 80010ca:	f812 c000 	ldrb.w	ip, [r2, r0]
 80010ce:	f801 c000 	strb.w	ip, [r1, r0]
 80010d2:	1c40      	adds	r0, r0, #1
 80010d4:	4770      	bx	lr

080010d6 <PE_ManageRXEvent>:
 80010d6:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80010da:	780a      	ldrb	r2, [r1, #0]
 80010dc:	704a      	strb	r2, [r1, #1]
 80010de:	888a      	ldrh	r2, [r1, #4]
 80010e0:	0bd1      	lsrs	r1, r2, #15
 80010e2:	bf18      	it	ne
 80010e4:	f7ff bea1 	bne.w	8000e2a <PE_Check_ExtendedMessage>
 80010e8:	f412 4f70 	tst.w	r2, #61440	@ 0xf000
 80010ec:	bf08      	it	eq
 80010ee:	f000 b801 	beq.w	80010f4 <PE_Check_ControlMessage>
 80010f2:	e05d      	b.n	80011b0 <PE_Check_DataMessage>

080010f4 <PE_Check_ControlMessage>:
 80010f4:	b510      	push	{r4, lr}
 80010f6:	4604      	mov	r4, r0
 80010f8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80010fc:	f000 001f 	and.w	r0, r0, #31
 8001100:	1e40      	subs	r0, r0, #1
 8001102:	2817      	cmp	r0, #23
 8001104:	d84b      	bhi.n	800119e <PE_Check_ControlMessage+0xaa>
 8001106:	e8df f000 	tbb	[pc, r0]
 800110a:	0c52      	.short	0x0c52
 800110c:	481c4848 	.word	0x481c4848
 8001110:	4a4a2c1e 	.word	0x4a4a2c1e
 8001114:	4a14484a 	.word	0x4a14484a
 8001118:	4a4a424a 	.word	0x4a4a424a
 800111c:	384a4a4a 	.word	0x384a4a4a
 8001120:	3e4a      	.short	0x3e4a
 8001122:	2202      	movs	r2, #2
 8001124:	7622      	strb	r2, [r4, #24]
 8001126:	212b      	movs	r1, #43	@ 0x2b
 8001128:	7b20      	ldrb	r0, [r4, #12]
 800112a:	f7ff f9aa 	bl	8000482 <USBPD_PE_Notification>
 800112e:	2198      	movs	r1, #152	@ 0x98
 8001130:	e03c      	b.n	80011ac <PE_Check_ControlMessage+0xb8>
 8001132:	2003      	movs	r0, #3
 8001134:	7620      	strb	r0, [r4, #24]
 8001136:	2132      	movs	r1, #50	@ 0x32
 8001138:	7b20      	ldrb	r0, [r4, #12]
 800113a:	f7ff f9a2 	bl	8000482 <USBPD_PE_Notification>
 800113e:	2010      	movs	r0, #16
 8001140:	e031      	b.n	80011a6 <PE_Check_ControlMessage+0xb2>
 8001142:	2133      	movs	r1, #51	@ 0x33
 8001144:	e024      	b.n	8001190 <PE_Check_ControlMessage+0x9c>
 8001146:	2006      	movs	r0, #6
 8001148:	7620      	strb	r0, [r4, #24]
 800114a:	6820      	ldr	r0, [r4, #0]
 800114c:	6841      	ldr	r1, [r0, #4]
 800114e:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001152:	2800      	cmp	r0, #0
 8001154:	d023      	beq.n	800119e <PE_Check_ControlMessage+0xaa>
 8001156:	7b20      	ldrb	r0, [r4, #12]
 8001158:	210c      	movs	r1, #12
 800115a:	f7ff f992 	bl	8000482 <USBPD_PE_Notification>
 800115e:	204c      	movs	r0, #76	@ 0x4c
 8001160:	e021      	b.n	80011a6 <PE_Check_ControlMessage+0xb2>
 8001162:	6860      	ldr	r0, [r4, #4]
 8001164:	6801      	ldr	r1, [r0, #0]
 8001166:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800116a:	2803      	cmp	r0, #3
 800116c:	d117      	bne.n	800119e <PE_Check_ControlMessage+0xaa>
 800116e:	211d      	movs	r1, #29
 8001170:	7361      	strb	r1, [r4, #13]
 8001172:	2007      	movs	r0, #7
 8001174:	7620      	strb	r0, [r4, #24]
 8001176:	2106      	movs	r1, #6
 8001178:	e00a      	b.n	8001190 <PE_Check_ControlMessage+0x9c>
 800117a:	2164      	movs	r1, #100	@ 0x64
 800117c:	7361      	strb	r1, [r4, #13]
 800117e:	205f      	movs	r0, #95	@ 0x5f
 8001180:	7620      	strb	r0, [r4, #24]
 8001182:	2160      	movs	r1, #96	@ 0x60
 8001184:	e004      	b.n	8001190 <PE_Check_ControlMessage+0x9c>
 8001186:	200f      	movs	r0, #15
 8001188:	7620      	strb	r0, [r4, #24]
 800118a:	214b      	movs	r1, #75	@ 0x4b
 800118c:	e00e      	b.n	80011ac <PE_Check_ControlMessage+0xb8>
 800118e:	2159      	movs	r1, #89	@ 0x59
 8001190:	7b20      	ldrb	r0, [r4, #12]
 8001192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001196:	f7ff b974 	b.w	8000482 <USBPD_PE_Notification>
 800119a:	2011      	movs	r0, #17
 800119c:	e003      	b.n	80011a6 <PE_Check_ControlMessage+0xb2>
 800119e:	f000 f867 	bl	8001270 <.text_12>
 80011a2:	d102      	bne.n	80011aa <PE_Check_ControlMessage+0xb6>
 80011a4:	2001      	movs	r0, #1
 80011a6:	7360      	strb	r0, [r4, #13]
 80011a8:	bd10      	pop	{r4, pc}
 80011aa:	212a      	movs	r1, #42	@ 0x2a
 80011ac:	7361      	strb	r1, [r4, #13]
 80011ae:	bd10      	pop	{r4, pc}

080011b0 <PE_Check_DataMessage>:
 80011b0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80011b2:	4604      	mov	r4, r0
 80011b4:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 80011b6:	f000 011f 	and.w	r1, r0, #31
 80011ba:	2901      	cmp	r1, #1
 80011bc:	d00a      	beq.n	80011d4 <PE_Check_DataMessage+0x24>
 80011be:	2903      	cmp	r1, #3
 80011c0:	d01a      	beq.n	80011f8 <PE_Check_DataMessage+0x48>
 80011c2:	2906      	cmp	r1, #6
 80011c4:	d04e      	beq.n	8001264 <PE_Check_DataMessage+0xb4>
 80011c6:	2907      	cmp	r1, #7
 80011c8:	d04a      	beq.n	8001260 <PE_Check_DataMessage+0xb0>
 80011ca:	290a      	cmp	r1, #10
 80011cc:	d04a      	beq.n	8001264 <PE_Check_DataMessage+0xb4>
 80011ce:	290f      	cmp	r1, #15
 80011d0:	d043      	beq.n	800125a <PE_Check_DataMessage+0xaa>
 80011d2:	e04a      	b.n	800126a <PE_Check_DataMessage+0xba>
 80011d4:	f3c0 1181 	ubfx	r1, r0, #6, #2
 80011d8:	7b20      	ldrb	r0, [r4, #12]
 80011da:	f7ff fb4e 	bl	800087a <PE_ExtRevisionInteroperability>
 80011de:	68a5      	ldr	r5, [r4, #8]
 80011e0:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 80011e2:	69ae      	ldr	r6, [r5, #24]
 80011e4:	f3c0 3302 	ubfx	r3, r0, #12, #3
 80011e8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80011ea:	1c82      	adds	r2, r0, #2
 80011ec:	7b20      	ldrb	r0, [r4, #12]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	2104      	movs	r1, #4
 80011f2:	47b0      	blx	r6
 80011f4:	2044      	movs	r0, #68	@ 0x44
 80011f6:	e039      	b.n	800126c <PE_Check_DataMessage+0xbc>
 80011f8:	2100      	movs	r1, #0
 80011fa:	9101      	str	r1, [sp, #4]
 80011fc:	9100      	str	r1, [sp, #0]
 80011fe:	466b      	mov	r3, sp
 8001200:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001202:	7881      	ldrb	r1, [r0, #2]
 8001204:	78c2      	ldrb	r2, [r0, #3]
 8001206:	68a6      	ldr	r6, [r4, #8]
 8001208:	6977      	ldr	r7, [r6, #20]
 800120a:	eb01 2502 	add.w	r5, r1, r2, lsl #8
 800120e:	7901      	ldrb	r1, [r0, #4]
 8001210:	7940      	ldrb	r0, [r0, #5]
 8001212:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8001216:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 800121a:	7b20      	ldrb	r0, [r4, #12]
 800121c:	aa01      	add	r2, sp, #4
 800121e:	2103      	movs	r1, #3
 8001220:	47b8      	blx	r7
 8001222:	9800      	ldr	r0, [sp, #0]
 8001224:	2104      	movs	r1, #4
 8001226:	f7ff fd55 	bl	8000cd4 <PE_CheckDataSizeFromGetDataInfo>
 800122a:	2800      	cmp	r0, #0
 800122c:	bf01      	itttt	eq
 800122e:	6860      	ldreq	r0, [r4, #4]
 8001230:	6801      	ldreq	r1, [r0, #0]
 8001232:	f3c1 2002 	ubfxeq	r0, r1, #8, #3
 8001236:	2803      	cmpeq	r0, #3
 8001238:	d10d      	bne.n	8001256 <PE_Check_DataMessage+0xa6>
 800123a:	9801      	ldr	r0, [sp, #4]
 800123c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001240:	4288      	cmp	r0, r1
 8001242:	d108      	bne.n	8001256 <PE_Check_DataMessage+0xa6>
 8001244:	0f2d      	lsrs	r5, r5, #28
 8001246:	2d05      	cmp	r5, #5
 8001248:	d003      	beq.n	8001252 <PE_Check_DataMessage+0xa2>
 800124a:	2d08      	cmp	r5, #8
 800124c:	d10f      	bne.n	800126e <PE_Check_DataMessage+0xbe>
 800124e:	2029      	movs	r0, #41	@ 0x29
 8001250:	e00c      	b.n	800126c <PE_Check_DataMessage+0xbc>
 8001252:	2127      	movs	r1, #39	@ 0x27
 8001254:	e007      	b.n	8001266 <PE_Check_DataMessage+0xb6>
 8001256:	2003      	movs	r0, #3
 8001258:	e008      	b.n	800126c <PE_Check_DataMessage+0xbc>
 800125a:	f000 f809 	bl	8001270 <.text_12>
 800125e:	d106      	bne.n	800126e <PE_Check_DataMessage+0xbe>
 8001260:	2001      	movs	r0, #1
 8001262:	e003      	b.n	800126c <PE_Check_DataMessage+0xbc>
 8001264:	2101      	movs	r1, #1
 8001266:	7361      	strb	r1, [r4, #13]
 8001268:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800126a:	2011      	movs	r0, #17
 800126c:	7360      	strb	r0, [r4, #13]
 800126e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001270 <.text_12>:
 8001270:	6860      	ldr	r0, [r4, #4]
 8001272:	7801      	ldrb	r1, [r0, #0]
 8001274:	f001 0103 	and.w	r1, r1, #3
 8001278:	2902      	cmp	r1, #2
 800127a:	4770      	bx	lr

0800127c <PE_CheckSendMessageStatus>:
 800127c:	b510      	push	{r4, lr}
 800127e:	2110      	movs	r1, #16
 8001280:	2b05      	cmp	r3, #5
 8001282:	d007      	beq.n	8001294 <PE_CheckSendMessageStatus+0x18>
 8001284:	2b06      	cmp	r3, #6
 8001286:	d00d      	beq.n	80012a4 <PE_CheckSendMessageStatus+0x28>
 8001288:	2b07      	cmp	r3, #7
 800128a:	d010      	beq.n	80012ae <PE_CheckSendMessageStatus+0x32>
 800128c:	2b09      	cmp	r3, #9
 800128e:	bf08      	it	eq
 8001290:	2109      	moveq	r1, #9
 8001292:	e021      	b.n	80012d8 <PE_CheckSendMessageStatus+0x5c>
 8001294:	9902      	ldr	r1, [sp, #8]
 8001296:	7341      	strb	r1, [r0, #13]
 8001298:	6901      	ldr	r1, [r0, #16]
 800129a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800129e:	6101      	str	r1, [r0, #16]
 80012a0:	2100      	movs	r1, #0
 80012a2:	e019      	b.n	80012d8 <PE_CheckSendMessageStatus+0x5c>
 80012a4:	6902      	ldr	r2, [r0, #16]
 80012a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80012aa:	6102      	str	r2, [r0, #16]
 80012ac:	e014      	b.n	80012d8 <PE_CheckSendMessageStatus+0x5c>
 80012ae:	6843      	ldr	r3, [r0, #4]
 80012b0:	681c      	ldr	r4, [r3, #0]
 80012b2:	f3c4 2302 	ubfx	r3, r4, #8, #3
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d003      	beq.n	80012c2 <PE_CheckSendMessageStatus+0x46>
 80012ba:	2a01      	cmp	r2, #1
 80012bc:	d10a      	bne.n	80012d4 <PE_CheckSendMessageStatus+0x58>
 80012be:	220f      	movs	r2, #15
 80012c0:	e009      	b.n	80012d6 <PE_CheckSendMessageStatus+0x5a>
 80012c2:	2a00      	cmp	r2, #0
 80012c4:	d1fb      	bne.n	80012be <PE_CheckSendMessageStatus+0x42>
 80012c6:	6883      	ldr	r3, [r0, #8]
 80012c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	d0f7      	beq.n	80012be <PE_CheckSendMessageStatus+0x42>
 80012ce:	2392      	movs	r3, #146	@ 0x92
 80012d0:	7343      	strb	r3, [r0, #13]
 80012d2:	e001      	b.n	80012d8 <PE_CheckSendMessageStatus+0x5c>
 80012d4:	2211      	movs	r2, #17
 80012d6:	7342      	strb	r2, [r0, #13]
 80012d8:	4608      	mov	r0, r1
 80012da:	bd10      	pop	{r4, pc}

080012dc <USBPD_PE_StateMachine_SNK>:
 80012dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012e0:	4604      	mov	r4, r0
 80012e2:	f8df 081c 	ldr.w	r0, [pc, #2076]	@ 8001b00 <.text_15>
 80012e6:	b084      	sub	sp, #16
 80012e8:	4621      	mov	r1, r4
 80012ea:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80012ee:	7b68      	ldrb	r0, [r5, #13]
 80012f0:	2848      	cmp	r0, #72	@ 0x48
 80012f2:	d12e      	bne.n	8001352 <USBPD_PE_StateMachine_SNK+0x76>
 80012f4:	4628      	mov	r0, r5
 80012f6:	f7ff faa2 	bl	800083e <PE_Reset_ZI>
 80012fa:	4628      	mov	r0, r5
 80012fc:	f7ff fab9 	bl	8000872 <PE_Reset_Counter>
 8001300:	6828      	ldr	r0, [r5, #0]
 8001302:	7903      	ldrb	r3, [r0, #4]
 8001304:	7b28      	ldrb	r0, [r5, #12]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	f000 fc30 	bl	8001b72 <USBPD_PRL_SetHeader>
 8001312:	6868      	ldr	r0, [r5, #4]
 8001314:	6801      	ldr	r1, [r0, #0]
 8001316:	f021 0108 	bic.w	r1, r1, #8
 800131a:	6001      	str	r1, [r0, #0]
 800131c:	6828      	ldr	r0, [r5, #0]
 800131e:	6841      	ldr	r1, [r0, #4]
 8001320:	6868      	ldr	r0, [r5, #4]
 8001322:	6802      	ldr	r2, [r0, #0]
 8001324:	f361 0201 	bfi	r2, r1, #0, #2
 8001328:	6002      	str	r2, [r0, #0]
 800132a:	7b28      	ldrb	r0, [r5, #12]
 800132c:	f000 feb4 	bl	8002098 <USBPD_PRL_Reset>
 8001330:	7ba9      	ldrb	r1, [r5, #14]
 8001332:	203e      	movs	r0, #62	@ 0x3e
 8001334:	293e      	cmp	r1, #62	@ 0x3e
 8001336:	7368      	strb	r0, [r5, #13]
 8001338:	d00b      	beq.n	8001352 <USBPD_PE_StateMachine_SNK+0x76>
 800133a:	73a8      	strb	r0, [r5, #14]
 800133c:	2100      	movs	r1, #0
 800133e:	9100      	str	r1, [sp, #0]
 8001340:	2300      	movs	r3, #0
 8001342:	f8df 67c0 	ldr.w	r6, [pc, #1984]	@ 8001b04 <.text_16>
 8001346:	7b29      	ldrb	r1, [r5, #12]
 8001348:	f8d6 a000 	ldr.w	sl, [r6]
 800134c:	223e      	movs	r2, #62	@ 0x3e
 800134e:	2004      	movs	r0, #4
 8001350:	47d0      	blx	sl
 8001352:	6928      	ldr	r0, [r5, #16]
 8001354:	f3c0 4080 	ubfx	r0, r0, #18, #1
 8001358:	b130      	cbz	r0, 8001368 <USBPD_PE_StateMachine_SNK+0x8c>
 800135a:	6928      	ldr	r0, [r5, #16]
 800135c:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 8001360:	6128      	str	r0, [r5, #16]
 8001362:	2164      	movs	r1, #100	@ 0x64
 8001364:	f000 fb50 	bl	8001a08 <.text_12>
 8001368:	4628      	mov	r0, r5
 800136a:	f7ff f973 	bl	8000654 <PE_Get_RxEvent>
 800136e:	2803      	cmp	r0, #3
 8001370:	f88d 000c 	strb.w	r0, [sp, #12]
 8001374:	d103      	bne.n	800137e <USBPD_PE_StateMachine_SNK+0xa2>
 8001376:	2001      	movs	r0, #1
 8001378:	b005      	add	sp, #20
 800137a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800137e:	f88d 400d 	strb.w	r4, [sp, #13]
 8001382:	f248 18f4 	movw	r8, #33268	@ 0x81f4
 8001386:	f105 0978 	add.w	r9, r5, #120	@ 0x78
 800138a:	f248 0b1b 	movw	fp, #32795	@ 0x801b
 800138e:	6868      	ldr	r0, [r5, #4]
 8001390:	6801      	ldr	r1, [r0, #0]
 8001392:	2402      	movs	r4, #2
 8001394:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001398:	2800      	cmp	r0, #0
 800139a:	f000 80ca 	beq.w	8001532 <USBPD_PE_StateMachine_SNK+0x256>
 800139e:	f105 0628 	add.w	r6, r5, #40	@ 0x28
 80013a2:	78b0      	ldrb	r0, [r6, #2]
 80013a4:	280f      	cmp	r0, #15
 80013a6:	bf18      	it	ne
 80013a8:	2814      	cmpne	r0, #20
 80013aa:	d111      	bne.n	80013d0 <USBPD_PE_StateMachine_SNK+0xf4>
 80013ac:	f000 fb0e 	bl	80019cc <.text_6+0x2>
 80013b0:	d001      	beq.n	80013b6 <USBPD_PE_StateMachine_SNK+0xda>
 80013b2:	f000 fb2c 	bl	8001a0e <.text_13>
 80013b6:	78b2      	ldrb	r2, [r6, #2]
 80013b8:	736a      	strb	r2, [r5, #13]
 80013ba:	2000      	movs	r0, #0
 80013bc:	70b0      	strb	r0, [r6, #2]
 80013be:	7ba9      	ldrb	r1, [r5, #14]
 80013c0:	4291      	cmp	r1, r2
 80013c2:	d005      	beq.n	80013d0 <USBPD_PE_StateMachine_SNK+0xf4>
 80013c4:	73aa      	strb	r2, [r5, #14]
 80013c6:	9000      	str	r0, [sp, #0]
 80013c8:	f000 fb04 	bl	80019d4 <.text_7>
 80013cc:	2004      	movs	r0, #4
 80013ce:	47e0      	blx	ip
 80013d0:	f000 faf7 	bl	80019c2 <.text_5>
 80013d4:	d119      	bne.n	800140a <USBPD_PE_StateMachine_SNK+0x12e>
 80013d6:	6868      	ldr	r0, [r5, #4]
 80013d8:	6801      	ldr	r1, [r0, #0]
 80013da:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80013de:	88b1      	ldrh	r1, [r6, #4]
 80013e0:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80013e4:	4288      	cmp	r0, r1
 80013e6:	d110      	bne.n	800140a <USBPD_PE_StateMachine_SNK+0x12e>
 80013e8:	f000 fae7 	bl	80019ba <.text_4>
 80013ec:	f000 fb12 	bl	8001a14 <.text_13+0x6>
 80013f0:	7ba9      	ldrb	r1, [r5, #14]
 80013f2:	2092      	movs	r0, #146	@ 0x92
 80013f4:	2992      	cmp	r1, #146	@ 0x92
 80013f6:	7368      	strb	r0, [r5, #13]
 80013f8:	d06c      	beq.n	80014d4 <USBPD_PE_StateMachine_SNK+0x1f8>
 80013fa:	73a8      	strb	r0, [r5, #14]
 80013fc:	2100      	movs	r1, #0
 80013fe:	9100      	str	r1, [sp, #0]
 8001400:	f000 fae8 	bl	80019d4 <.text_7>
 8001404:	2292      	movs	r2, #146	@ 0x92
 8001406:	2004      	movs	r0, #4
 8001408:	47e0      	blx	ip
 800140a:	7b68      	ldrb	r0, [r5, #13]
 800140c:	0001      	movs	r1, r0
 800140e:	f44f 7afa 	mov.w	sl, #500	@ 0x1f4
 8001412:	f24f 071f 	movw	r7, #61471	@ 0xf01f
 8001416:	f000 8090 	beq.w	800153a <USBPD_PE_StateMachine_SNK+0x25e>
 800141a:	2801      	cmp	r0, #1
 800141c:	d057      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 800141e:	2803      	cmp	r0, #3
 8001420:	bf18      	it	ne
 8001422:	2804      	cmpne	r0, #4
 8001424:	d045      	beq.n	80014b2 <USBPD_PE_StateMachine_SNK+0x1d6>
 8001426:	280f      	cmp	r0, #15
 8001428:	f000 817c 	beq.w	8001724 <USBPD_PE_StateMachine_SNK+0x448>
 800142c:	2810      	cmp	r0, #16
 800142e:	f000 81f2 	beq.w	8001816 <USBPD_PE_StateMachine_SNK+0x53a>
 8001432:	2811      	cmp	r0, #17
 8001434:	f000 81f8 	beq.w	8001828 <USBPD_PE_StateMachine_SNK+0x54c>
 8001438:	2814      	cmp	r0, #20
 800143a:	f000 8197 	beq.w	800176c <USBPD_PE_StateMachine_SNK+0x490>
 800143e:	2818      	cmp	r0, #24
 8001440:	bf18      	it	ne
 8001442:	2819      	cmpne	r0, #25
 8001444:	d043      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 8001446:	281a      	cmp	r0, #26
 8001448:	f000 8220 	beq.w	800188c <USBPD_PE_StateMachine_SNK+0x5b0>
 800144c:	281d      	cmp	r0, #29
 800144e:	bf18      	it	ne
 8001450:	2827      	cmpne	r0, #39	@ 0x27
 8001452:	d03c      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 8001454:	2828      	cmp	r0, #40	@ 0x28
 8001456:	bf18      	it	ne
 8001458:	2829      	cmpne	r0, #41	@ 0x29
 800145a:	d038      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 800145c:	282a      	cmp	r0, #42	@ 0x2a
 800145e:	f000 8236 	beq.w	80018ce <USBPD_PE_StateMachine_SNK+0x5f2>
 8001462:	282e      	cmp	r0, #46	@ 0x2e
 8001464:	f000 8248 	beq.w	80018f8 <USBPD_PE_StateMachine_SNK+0x61c>
 8001468:	2831      	cmp	r0, #49	@ 0x31
 800146a:	bf18      	it	ne
 800146c:	2833      	cmpne	r0, #51	@ 0x33
 800146e:	d007      	beq.n	8001480 <USBPD_PE_StateMachine_SNK+0x1a4>
 8001470:	2834      	cmp	r0, #52	@ 0x34
 8001472:	bf18      	it	ne
 8001474:	2835      	cmpne	r0, #53	@ 0x35
 8001476:	d003      	beq.n	8001480 <USBPD_PE_StateMachine_SNK+0x1a4>
 8001478:	2836      	cmp	r0, #54	@ 0x36
 800147a:	bf1c      	itt	ne
 800147c:	2837      	cmpne	r0, #55	@ 0x37
 800147e:	2838      	cmpne	r0, #56	@ 0x38
 8001480:	f000 826a 	beq.w	8001958 <USBPD_PE_StateMachine_SNK+0x67c>
 8001484:	2839      	cmp	r0, #57	@ 0x39
 8001486:	f000 8246 	beq.w	8001916 <USBPD_PE_StateMachine_SNK+0x63a>
 800148a:	283e      	cmp	r0, #62	@ 0x3e
 800148c:	d066      	beq.n	800155c <USBPD_PE_StateMachine_SNK+0x280>
 800148e:	2840      	cmp	r0, #64	@ 0x40
 8001490:	f000 818e 	beq.w	80017b0 <USBPD_PE_StateMachine_SNK+0x4d4>
 8001494:	2843      	cmp	r0, #67	@ 0x43
 8001496:	d07a      	beq.n	800158e <USBPD_PE_StateMachine_SNK+0x2b2>
 8001498:	2844      	cmp	r0, #68	@ 0x44
 800149a:	f000 80ae 	beq.w	80015fa <USBPD_PE_StateMachine_SNK+0x31e>
 800149e:	2845      	cmp	r0, #69	@ 0x45
 80014a0:	f000 80bb 	beq.w	800161a <USBPD_PE_StateMachine_SNK+0x33e>
 80014a4:	2846      	cmp	r0, #70	@ 0x46
 80014a6:	f000 80d3 	beq.w	8001650 <USBPD_PE_StateMachine_SNK+0x374>
 80014aa:	2847      	cmp	r0, #71	@ 0x47
 80014ac:	f000 8122 	beq.w	80016f4 <USBPD_PE_StateMachine_SNK+0x418>
 80014b0:	2849      	cmp	r0, #73	@ 0x49
 80014b2:	f000 8213 	beq.w	80018dc <USBPD_PE_StateMachine_SNK+0x600>
 80014b6:	284b      	cmp	r0, #75	@ 0x4b
 80014b8:	d009      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 80014ba:	2850      	cmp	r0, #80	@ 0x50
 80014bc:	f000 81cc 	beq.w	8001858 <USBPD_PE_StateMachine_SNK+0x57c>
 80014c0:	2864      	cmp	r0, #100	@ 0x64
 80014c2:	bf18      	it	ne
 80014c4:	2867      	cmpne	r0, #103	@ 0x67
 80014c6:	d002      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 80014c8:	2868      	cmp	r0, #104	@ 0x68
 80014ca:	bf18      	it	ne
 80014cc:	2874      	cmpne	r0, #116	@ 0x74
 80014ce:	f000 8247 	beq.w	8001960 <USBPD_PE_StateMachine_SNK+0x684>
 80014d2:	2892      	cmp	r0, #146	@ 0x92
 80014d4:	d039      	beq.n	800154a <USBPD_PE_StateMachine_SNK+0x26e>
 80014d6:	2898      	cmp	r0, #152	@ 0x98
 80014d8:	f000 81e6 	beq.w	80018a8 <USBPD_PE_StateMachine_SNK+0x5cc>
 80014dc:	289b      	cmp	r0, #155	@ 0x9b
 80014de:	f000 814d 	beq.w	800177c <USBPD_PE_StateMachine_SNK+0x4a0>
 80014e2:	7b6a      	ldrb	r2, [r5, #13]
 80014e4:	7ba8      	ldrb	r0, [r5, #14]
 80014e6:	f8df 661c 	ldr.w	r6, [pc, #1564]	@ 8001b04 <.text_16>
 80014ea:	4290      	cmp	r0, r2
 80014ec:	d008      	beq.n	8001500 <USBPD_PE_StateMachine_SNK+0x224>
 80014ee:	73aa      	strb	r2, [r5, #14]
 80014f0:	2100      	movs	r1, #0
 80014f2:	9100      	str	r1, [sp, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	7b29      	ldrb	r1, [r5, #12]
 80014f8:	f8d6 a000 	ldr.w	sl, [r6]
 80014fc:	2004      	movs	r0, #4
 80014fe:	47d0      	blx	sl
 8001500:	f000 fa64 	bl	80019cc <.text_6+0x2>
 8001504:	f000 8231 	beq.w	800196a <USBPD_PE_StateMachine_SNK+0x68e>
 8001508:	4628      	mov	r0, r5
 800150a:	f7ff f90b 	bl	8000724 <PE_Check_AMSConflict>
 800150e:	2815      	cmp	r0, #21
 8001510:	d104      	bne.n	800151c <USBPD_PE_StateMachine_SNK+0x240>
 8001512:	f000 fa5b 	bl	80019cc <.text_6+0x2>
 8001516:	d001      	beq.n	800151c <USBPD_PE_StateMachine_SNK+0x240>
 8001518:	f000 fa79 	bl	8001a0e <.text_13>
 800151c:	7b6a      	ldrb	r2, [r5, #13]
 800151e:	7ba8      	ldrb	r0, [r5, #14]
 8001520:	4290      	cmp	r0, r2
 8001522:	d004      	beq.n	800152e <USBPD_PE_StateMachine_SNK+0x252>
 8001524:	73aa      	strb	r2, [r5, #14]
 8001526:	f000 fa5b 	bl	80019e0 <.text_8>
 800152a:	2004      	movs	r0, #4
 800152c:	47a0      	blx	r4
 800152e:	2400      	movs	r4, #0
 8001530:	e237      	b.n	80019a2 <USBPD_PE_StateMachine_SNK+0x6c6>
 8001532:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001536:	4620      	mov	r0, r4
 8001538:	e71e      	b.n	8001378 <USBPD_PE_StateMachine_SNK+0x9c>
 800153a:	f000 fa57 	bl	80019ec <.text_9>
 800153e:	215f      	movs	r1, #95	@ 0x5f
 8001540:	f000 fa62 	bl	8001a08 <.text_12>
 8001544:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001548:	e7cb      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 800154a:	f000 fa4f 	bl	80019ec <.text_9>
 800154e:	68a8      	ldr	r0, [r5, #8]
 8001550:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8001552:	2900      	cmp	r1, #0
 8001554:	d0f6      	beq.n	8001544 <USBPD_PE_StateMachine_SNK+0x268>
 8001556:	7b28      	ldrb	r0, [r5, #12]
 8001558:	4788      	blx	r1
 800155a:	e7f3      	b.n	8001544 <USBPD_PE_StateMachine_SNK+0x268>
 800155c:	6868      	ldr	r0, [r5, #4]
 800155e:	6801      	ldr	r1, [r0, #0]
 8001560:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001564:	2800      	cmp	r0, #0
 8001566:	d0bc      	beq.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 8001568:	f001 0203 	and.w	r2, r1, #3
 800156c:	6868      	ldr	r0, [r5, #4]
 800156e:	2a01      	cmp	r2, #1
 8001570:	bf0c      	ite	eq
 8001572:	2200      	moveq	r2, #0
 8001574:	2220      	movne	r2, #32
 8001576:	f021 0120 	bic.w	r1, r1, #32
 800157a:	4311      	orrs	r1, r2
 800157c:	6001      	str	r1, [r0, #0]
 800157e:	2001      	movs	r0, #1
 8001580:	7628      	strb	r0, [r5, #24]
 8001582:	f8a5 801a 	strh.w	r8, [r5, #26]
 8001586:	4654      	mov	r4, sl
 8001588:	2143      	movs	r1, #67	@ 0x43
 800158a:	7369      	strb	r1, [r5, #13]
 800158c:	e7a9      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 800158e:	f000 fa18 	bl	80019c2 <.text_5>
 8001592:	d131      	bne.n	80015f8 <USBPD_PE_StateMachine_SNK+0x31c>
 8001594:	88b1      	ldrh	r1, [r6, #4]
 8001596:	0bc8      	lsrs	r0, r1, #15
 8001598:	d12a      	bne.n	80015f0 <USBPD_PE_StateMachine_SNK+0x314>
 800159a:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800159e:	b338      	cbz	r0, 80015f0 <USBPD_PE_StateMachine_SNK+0x314>
 80015a0:	4608      	mov	r0, r1
 80015a2:	f000 011f 	and.w	r1, r0, #31
 80015a6:	2901      	cmp	r1, #1
 80015a8:	d122      	bne.n	80015f0 <USBPD_PE_StateMachine_SNK+0x314>
 80015aa:	2200      	movs	r2, #0
 80015ac:	f889 2004 	strb.w	r2, [r9, #4]
 80015b0:	6929      	ldr	r1, [r5, #16]
 80015b2:	f041 0104 	orr.w	r1, r1, #4
 80015b6:	6129      	str	r1, [r5, #16]
 80015b8:	f3c0 1181 	ubfx	r1, r0, #6, #2
 80015bc:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80015c0:	f7ff f95b 	bl	800087a <PE_ExtRevisionInteroperability>
 80015c4:	88b0      	ldrh	r0, [r6, #4]
 80015c6:	f3c0 3302 	ubfx	r3, r0, #12, #3
 80015ca:	68b0      	ldr	r0, [r6, #8]
 80015cc:	68ae      	ldr	r6, [r5, #8]
 80015ce:	f8d6 a018 	ldr.w	sl, [r6, #24]
 80015d2:	1c82      	adds	r2, r0, #2
 80015d4:	7b28      	ldrb	r0, [r5, #12]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	2104      	movs	r1, #4
 80015da:	47d0      	blx	sl
 80015dc:	2001      	movs	r0, #1
 80015de:	7628      	strb	r0, [r5, #24]
 80015e0:	f000 fa04 	bl	80019ec <.text_9>
 80015e4:	2044      	movs	r0, #68	@ 0x44
 80015e6:	7368      	strb	r0, [r5, #13]
 80015e8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80015ec:	2914      	cmp	r1, #20
 80015ee:	d003      	beq.n	80015f8 <USBPD_PE_StateMachine_SNK+0x31c>
 80015f0:	f000 f9e3 	bl	80019ba <.text_4>
 80015f4:	f000 fa0e 	bl	8001a14 <.text_13+0x6>
 80015f8:	e090      	b.n	800171c <USBPD_PE_StateMachine_SNK+0x440>
 80015fa:	68ab      	ldr	r3, [r5, #8]
 80015fc:	7b28      	ldrb	r0, [r5, #12]
 80015fe:	6a1c      	ldr	r4, [r3, #32]
 8001600:	466a      	mov	r2, sp
 8001602:	f105 0114 	add.w	r1, r5, #20
 8001606:	47a0      	blx	r4
 8001608:	9800      	ldr	r0, [sp, #0]
 800160a:	6929      	ldr	r1, [r5, #16]
 800160c:	f360 01c4 	bfi	r1, r0, #3, #2
 8001610:	6129      	str	r1, [r5, #16]
 8001612:	2045      	movs	r0, #69	@ 0x45
 8001614:	7368      	strb	r0, [r5, #13]
 8001616:	2400      	movs	r4, #0
 8001618:	e763      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 800161a:	6928      	ldr	r0, [r5, #16]
 800161c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8001620:	b100      	cbz	r0, 8001624 <USBPD_PE_StateMachine_SNK+0x348>
 8001622:	2002      	movs	r0, #2
 8001624:	9002      	str	r0, [sp, #8]
 8001626:	2101      	movs	r1, #1
 8001628:	2046      	movs	r0, #70	@ 0x46
 800162a:	9001      	str	r0, [sp, #4]
 800162c:	9100      	str	r1, [sp, #0]
 800162e:	f105 0314 	add.w	r3, r5, #20
 8001632:	2202      	movs	r2, #2
 8001634:	2100      	movs	r1, #0
 8001636:	4628      	mov	r0, r5
 8001638:	f7ff fbbb 	bl	8000db2 <PE_Send_DataMessage>
 800163c:	2800      	cmp	r0, #0
 800163e:	d106      	bne.n	800164e <USBPD_PE_StateMachine_SNK+0x372>
 8001640:	6928      	ldr	r0, [r5, #16]
 8001642:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8001646:	6128      	str	r0, [r5, #16]
 8001648:	f8a5 b01a 	strh.w	fp, [r5, #26]
 800164c:	241b      	movs	r4, #27
 800164e:	e748      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 8001650:	f000 f9b7 	bl	80019c2 <.text_5>
 8001654:	bf04      	itt	eq
 8001656:	88b0      	ldrheq	r0, [r6, #4]
 8001658:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 800165c:	d144      	bne.n	80016e8 <USBPD_PE_StateMachine_SNK+0x40c>
 800165e:	f000 001f 	and.w	r0, r0, #31
 8001662:	2802      	cmp	r0, #2
 8001664:	bf18      	it	ne
 8001666:	2803      	cmpne	r0, #3
 8001668:	d019      	beq.n	800169e <USBPD_PE_StateMachine_SNK+0x3c2>
 800166a:	2804      	cmp	r0, #4
 800166c:	bf18      	it	ne
 800166e:	280c      	cmpne	r0, #12
 8001670:	d126      	bne.n	80016c0 <USBPD_PE_StateMachine_SNK+0x3e4>
 8001672:	6868      	ldr	r0, [r5, #4]
 8001674:	6801      	ldr	r1, [r0, #0]
 8001676:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800167a:	2803      	cmp	r0, #3
 800167c:	d005      	beq.n	800168a <USBPD_PE_StateMachine_SNK+0x3ae>
 800167e:	2043      	movs	r0, #67	@ 0x43
 8001680:	7368      	strb	r0, [r5, #13]
 8001682:	f8a5 801a 	strh.w	r8, [r5, #26]
 8001686:	4654      	mov	r4, sl
 8001688:	e016      	b.n	80016b8 <USBPD_PE_StateMachine_SNK+0x3dc>
 800168a:	7930      	ldrb	r0, [r6, #4]
 800168c:	f000 001f 	and.w	r0, r0, #31
 8001690:	280c      	cmp	r0, #12
 8001692:	bf0c      	ite	eq
 8001694:	2049      	moveq	r0, #73	@ 0x49
 8001696:	2003      	movne	r0, #3
 8001698:	7368      	strb	r0, [r5, #13]
 800169a:	2400      	movs	r4, #0
 800169c:	e00c      	b.n	80016b8 <USBPD_PE_StateMachine_SNK+0x3dc>
 800169e:	f8a5 801a 	strh.w	r8, [r5, #26]
 80016a2:	2104      	movs	r1, #4
 80016a4:	4628      	mov	r0, r5
 80016a6:	f7ff faf2 	bl	8000c8e <PE_SetPowerNegotiation>
 80016aa:	2047      	movs	r0, #71	@ 0x47
 80016ac:	7368      	strb	r0, [r5, #13]
 80016ae:	4654      	mov	r4, sl
 80016b0:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80016b4:	2914      	cmp	r1, #20
 80016b6:	d003      	beq.n	80016c0 <USBPD_PE_StateMachine_SNK+0x3e4>
 80016b8:	f000 f97f 	bl	80019ba <.text_4>
 80016bc:	f000 f9aa 	bl	8001a14 <.text_13+0x6>
 80016c0:	7930      	ldrb	r0, [r6, #4]
 80016c2:	f000 001f 	and.w	r0, r0, #31
 80016c6:	2802      	cmp	r0, #2
 80016c8:	d009      	beq.n	80016de <USBPD_PE_StateMachine_SNK+0x402>
 80016ca:	2803      	cmp	r0, #3
 80016cc:	d009      	beq.n	80016e2 <USBPD_PE_StateMachine_SNK+0x406>
 80016ce:	2804      	cmp	r0, #4
 80016d0:	d003      	beq.n	80016da <USBPD_PE_StateMachine_SNK+0x3fe>
 80016d2:	280c      	cmp	r0, #12
 80016d4:	d108      	bne.n	80016e8 <USBPD_PE_StateMachine_SNK+0x40c>
 80016d6:	2103      	movs	r1, #3
 80016d8:	e004      	b.n	80016e4 <USBPD_PE_StateMachine_SNK+0x408>
 80016da:	2102      	movs	r1, #2
 80016dc:	e002      	b.n	80016e4 <USBPD_PE_StateMachine_SNK+0x408>
 80016de:	2104      	movs	r1, #4
 80016e0:	e000      	b.n	80016e4 <USBPD_PE_StateMachine_SNK+0x408>
 80016e2:	2101      	movs	r1, #1
 80016e4:	f000 f990 	bl	8001a08 <.text_12>
 80016e8:	f000 f963 	bl	80019b2 <.text_3>
 80016ec:	d1af      	bne.n	800164e <USBPD_PE_StateMachine_SNK+0x372>
 80016ee:	210f      	movs	r1, #15
 80016f0:	7369      	strb	r1, [r5, #13]
 80016f2:	e790      	b.n	8001616 <USBPD_PE_StateMachine_SNK+0x33a>
 80016f4:	f000 f965 	bl	80019c2 <.text_5>
 80016f8:	bf02      	ittt	eq
 80016fa:	88b0      	ldrheq	r0, [r6, #4]
 80016fc:	4007      	andeq	r7, r0
 80016fe:	2f06      	cmpeq	r7, #6
 8001700:	d10c      	bne.n	800171c <USBPD_PE_StateMachine_SNK+0x440>
 8001702:	f000 f984 	bl	8001a0e <.text_13>
 8001706:	2103      	movs	r1, #3
 8001708:	4628      	mov	r0, r5
 800170a:	f7ff fac0 	bl	8000c8e <PE_SetPowerNegotiation>
 800170e:	7b28      	ldrb	r0, [r5, #12]
 8001710:	2110      	movs	r1, #16
 8001712:	f7fe feb6 	bl	8000482 <USBPD_PE_Notification>
 8001716:	2003      	movs	r0, #3
 8001718:	7368      	strb	r0, [r5, #13]
 800171a:	2400      	movs	r4, #0
 800171c:	f000 f949 	bl	80019b2 <.text_3>
 8001720:	d195      	bne.n	800164e <USBPD_PE_StateMachine_SNK+0x372>
 8001722:	e7e4      	b.n	80016ee <USBPD_PE_StateMachine_SNK+0x412>
 8001724:	f000 f962 	bl	80019ec <.text_9>
 8001728:	4628      	mov	r0, r5
 800172a:	2101      	movs	r1, #1
 800172c:	f7ff faaf 	bl	8000c8e <PE_SetPowerNegotiation>
 8001730:	f899 0004 	ldrb.w	r0, [r9, #4]
 8001734:	2803      	cmp	r0, #3
 8001736:	d30a      	bcc.n	800174e <USBPD_PE_StateMachine_SNK+0x472>
 8001738:	6928      	ldr	r0, [r5, #16]
 800173a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800173e:	2800      	cmp	r0, #0
 8001740:	bf1e      	ittt	ne
 8001742:	68a9      	ldrne	r1, [r5, #8]
 8001744:	6b48      	ldrne	r0, [r1, #52]	@ 0x34
 8001746:	2800      	cmpne	r0, #0
 8001748:	d15f      	bne.n	800180a <USBPD_PE_StateMachine_SNK+0x52e>
 800174a:	2100      	movs	r1, #0
 800174c:	e71d      	b.n	800158a <USBPD_PE_StateMachine_SNK+0x2ae>
 800174e:	1c40      	adds	r0, r0, #1
 8001750:	f889 0004 	strb.w	r0, [r9, #4]
 8001754:	2105      	movs	r1, #5
 8001756:	4628      	mov	r0, r5
 8001758:	f7fe ff5c 	bl	8000614 <PE_Send_RESET>
 800175c:	f248 30e8 	movw	r0, #33768	@ 0x83e8
 8001760:	8368      	strh	r0, [r5, #26]
 8001762:	2201      	movs	r2, #1
 8001764:	f000 f948 	bl	80019f8 <.text_10>
 8001768:	209b      	movs	r0, #155	@ 0x9b
 800176a:	e753      	b.n	8001614 <USBPD_PE_StateMachine_SNK+0x338>
 800176c:	2200      	movs	r2, #0
 800176e:	f000 f943 	bl	80019f8 <.text_10>
 8001772:	f248 30e8 	movw	r0, #33768	@ 0x83e8
 8001776:	8368      	strh	r0, [r5, #26]
 8001778:	219b      	movs	r1, #155	@ 0x9b
 800177a:	e7b9      	b.n	80016f0 <USBPD_PE_StateMachine_SNK+0x414>
 800177c:	68aa      	ldr	r2, [r5, #8]
 800177e:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001782:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8001784:	2100      	movs	r1, #0
 8001786:	4798      	blx	r3
 8001788:	2801      	cmp	r0, #1
 800178a:	d10d      	bne.n	80017a8 <USBPD_PE_StateMachine_SNK+0x4cc>
 800178c:	f648 00e3 	movw	r0, #35043	@ 0x88e3
 8001790:	8368      	strh	r0, [r5, #26]
 8001792:	2169      	movs	r1, #105	@ 0x69
 8001794:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001798:	f7fe fe73 	bl	8000482 <USBPD_PE_Notification>
 800179c:	2040      	movs	r0, #64	@ 0x40
 800179e:	7368      	strb	r0, [r5, #13]
 80017a0:	2113      	movs	r1, #19
 80017a2:	f000 f931 	bl	8001a08 <.text_12>
 80017a6:	2400      	movs	r4, #0
 80017a8:	f000 f903 	bl	80019b2 <.text_3>
 80017ac:	d132      	bne.n	8001814 <USBPD_PE_StateMachine_SNK+0x538>
 80017ae:	e01b      	b.n	80017e8 <USBPD_PE_StateMachine_SNK+0x50c>
 80017b0:	68aa      	ldr	r2, [r5, #8]
 80017b2:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80017b6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80017b8:	2101      	movs	r1, #1
 80017ba:	4798      	blx	r3
 80017bc:	2801      	cmp	r0, #1
 80017be:	d110      	bne.n	80017e2 <USBPD_PE_StateMachine_SNK+0x506>
 80017c0:	4628      	mov	r0, r5
 80017c2:	f7ff f812 	bl	80007ea <PE_Reset_HardReset>
 80017c6:	2205      	movs	r2, #5
 80017c8:	2100      	movs	r1, #0
 80017ca:	f000 f916 	bl	80019fa <.text_10+0x2>
 80017ce:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80017d2:	2168      	movs	r1, #104	@ 0x68
 80017d4:	f7fe fe55 	bl	8000482 <USBPD_PE_Notification>
 80017d8:	f8a5 801a 	strh.w	r8, [r5, #26]
 80017dc:	2043      	movs	r0, #67	@ 0x43
 80017de:	4654      	mov	r4, sl
 80017e0:	7368      	strb	r0, [r5, #13]
 80017e2:	f000 f8e6 	bl	80019b2 <.text_3>
 80017e6:	d115      	bne.n	8001814 <USBPD_PE_StateMachine_SNK+0x538>
 80017e8:	2206      	movs	r2, #6
 80017ea:	2100      	movs	r1, #0
 80017ec:	f000 f905 	bl	80019fa <.text_10+0x2>
 80017f0:	f899 0004 	ldrb.w	r0, [r9, #4]
 80017f4:	2803      	cmp	r0, #3
 80017f6:	d348      	bcc.n	800188a <USBPD_PE_StateMachine_SNK+0x5ae>
 80017f8:	6928      	ldr	r0, [r5, #16]
 80017fa:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80017fe:	2800      	cmp	r0, #0
 8001800:	bf1e      	ittt	ne
 8001802:	68a9      	ldrne	r1, [r5, #8]
 8001804:	6b48      	ldrne	r0, [r1, #52]	@ 0x34
 8001806:	2800      	cmpne	r0, #0
 8001808:	d001      	beq.n	800180e <USBPD_PE_StateMachine_SNK+0x532>
 800180a:	2192      	movs	r1, #146	@ 0x92
 800180c:	e770      	b.n	80016f0 <USBPD_PE_StateMachine_SNK+0x414>
 800180e:	2000      	movs	r0, #0
 8001810:	7368      	strb	r0, [r5, #13]
 8001812:	4604      	mov	r4, r0
 8001814:	e665      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 8001816:	2000      	movs	r0, #0
 8001818:	9000      	str	r0, [sp, #0]
 800181a:	2303      	movs	r3, #3
 800181c:	2203      	movs	r2, #3
 800181e:	f000 f8ef 	bl	8001a00 <.text_11>
 8001822:	2800      	cmp	r0, #0
 8001824:	d1f6      	bne.n	8001814 <USBPD_PE_StateMachine_SNK+0x538>
 8001826:	e6aa      	b.n	800157e <USBPD_PE_StateMachine_SNK+0x2a2>
 8001828:	6868      	ldr	r0, [r5, #4]
 800182a:	6801      	ldr	r1, [r0, #0]
 800182c:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001830:	2804      	cmp	r0, #4
 8001832:	d02a      	beq.n	800188a <USBPD_PE_StateMachine_SNK+0x5ae>
 8001834:	2000      	movs	r0, #0
 8001836:	9000      	str	r0, [sp, #0]
 8001838:	2350      	movs	r3, #80	@ 0x50
 800183a:	7871      	ldrb	r1, [r6, #1]
 800183c:	220d      	movs	r2, #13
 800183e:	f000 f8e0 	bl	8001a02 <.text_11+0x2>
 8001842:	2800      	cmp	r0, #0
 8001844:	d107      	bne.n	8001856 <USBPD_PE_StateMachine_SNK+0x57a>
 8001846:	2003      	movs	r0, #3
 8001848:	7628      	strb	r0, [r5, #24]
 800184a:	f8a5 b01a 	strh.w	fp, [r5, #26]
 800184e:	241b      	movs	r4, #27
 8001850:	2130      	movs	r1, #48	@ 0x30
 8001852:	f000 f8d9 	bl	8001a08 <.text_12>
 8001856:	e644      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 8001858:	f000 f8b8 	bl	80019cc <.text_6+0x2>
 800185c:	d012      	beq.n	8001884 <USBPD_PE_StateMachine_SNK+0x5a8>
 800185e:	7831      	ldrb	r1, [r6, #0]
 8001860:	7870      	ldrb	r0, [r6, #1]
 8001862:	4281      	cmp	r1, r0
 8001864:	bf02      	ittt	eq
 8001866:	88b1      	ldrheq	r1, [r6, #4]
 8001868:	400f      	andeq	r7, r1
 800186a:	2f03      	cmpeq	r7, #3
 800186c:	d10a      	bne.n	8001884 <USBPD_PE_StateMachine_SNK+0x5a8>
 800186e:	2001      	movs	r0, #1
 8001870:	7628      	strb	r0, [r5, #24]
 8001872:	f8a5 801a 	strh.w	r8, [r5, #26]
 8001876:	2143      	movs	r1, #67	@ 0x43
 8001878:	7369      	strb	r1, [r5, #13]
 800187a:	f000 f89e 	bl	80019ba <.text_4>
 800187e:	4654      	mov	r4, sl
 8001880:	f000 f8c8 	bl	8001a14 <.text_13+0x6>
 8001884:	f000 f895 	bl	80019b2 <.text_3>
 8001888:	d1e5      	bne.n	8001856 <USBPD_PE_StateMachine_SNK+0x57a>
 800188a:	e730      	b.n	80016ee <USBPD_PE_StateMachine_SNK+0x412>
 800188c:	9400      	str	r4, [sp, #0]
 800188e:	2343      	movs	r3, #67	@ 0x43
 8001890:	2207      	movs	r2, #7
 8001892:	f000 f8b5 	bl	8001a00 <.text_11>
 8001896:	2800      	cmp	r0, #0
 8001898:	d118      	bne.n	80018cc <USBPD_PE_StateMachine_SNK+0x5f0>
 800189a:	2006      	movs	r0, #6
 800189c:	7628      	strb	r0, [r5, #24]
 800189e:	f8a5 b01a 	strh.w	fp, [r5, #26]
 80018a2:	241b      	movs	r4, #27
 80018a4:	210b      	movs	r1, #11
 80018a6:	e7d4      	b.n	8001852 <USBPD_PE_StateMachine_SNK+0x576>
 80018a8:	f000 f88b 	bl	80019c2 <.text_5>
 80018ac:	bf02      	ittt	eq
 80018ae:	88b0      	ldrheq	r0, [r6, #4]
 80018b0:	4007      	andeq	r7, r0
 80018b2:	2f06      	cmpeq	r7, #6
 80018b4:	d10a      	bne.n	80018cc <USBPD_PE_StateMachine_SNK+0x5f0>
 80018b6:	7b28      	ldrb	r0, [r5, #12]
 80018b8:	212c      	movs	r1, #44	@ 0x2c
 80018ba:	f7fe fde2 	bl	8000482 <USBPD_PE_Notification>
 80018be:	2003      	movs	r0, #3
 80018c0:	7368      	strb	r0, [r5, #13]
 80018c2:	f000 f882 	bl	80019ca <.text_6>
 80018c6:	d001      	beq.n	80018cc <USBPD_PE_StateMachine_SNK+0x5f0>
 80018c8:	f000 f8a1 	bl	8001a0e <.text_13>
 80018cc:	e609      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 80018ce:	2000      	movs	r0, #0
 80018d0:	9000      	str	r0, [sp, #0]
 80018d2:	2303      	movs	r3, #3
 80018d4:	2204      	movs	r2, #4
 80018d6:	f000 f893 	bl	8001a00 <.text_11>
 80018da:	e602      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 80018dc:	2804      	cmp	r0, #4
 80018de:	d006      	beq.n	80018ee <USBPD_PE_StateMachine_SNK+0x612>
 80018e0:	2000      	movs	r0, #0
 80018e2:	7628      	strb	r0, [r5, #24]
 80018e4:	2104      	movs	r1, #4
 80018e6:	7369      	strb	r1, [r5, #13]
 80018e8:	2120      	movs	r1, #32
 80018ea:	f000 f88d 	bl	8001a08 <.text_12>
 80018ee:	a903      	add	r1, sp, #12
 80018f0:	4628      	mov	r0, r5
 80018f2:	f000 f892 	bl	8001a1a <PE_StateMachine_SNK_ReadyWait>
 80018f6:	e78c      	b.n	8001812 <USBPD_PE_StateMachine_SNK+0x536>
 80018f8:	9400      	str	r4, [sp, #0]
 80018fa:	2339      	movs	r3, #57	@ 0x39
 80018fc:	f899 2000 	ldrb.w	r2, [r9]
 8001900:	f000 f87e 	bl	8001a00 <.text_11>
 8001904:	2800      	cmp	r0, #0
 8001906:	d1e8      	bne.n	80018da <USBPD_PE_StateMachine_SNK+0x5fe>
 8001908:	f899 0001 	ldrb.w	r0, [r9, #1]
 800190c:	7628      	strb	r0, [r5, #24]
 800190e:	2144      	movs	r1, #68	@ 0x44
 8001910:	f000 f87a 	bl	8001a08 <.text_12>
 8001914:	e698      	b.n	8001648 <USBPD_PE_StateMachine_SNK+0x36c>
 8001916:	f000 f859 	bl	80019cc <.text_6+0x2>
 800191a:	d018      	beq.n	800194e <USBPD_PE_StateMachine_SNK+0x672>
 800191c:	88b0      	ldrh	r0, [r6, #4]
 800191e:	0bc0      	lsrs	r0, r0, #15
 8001920:	d009      	beq.n	8001936 <USBPD_PE_StateMachine_SNK+0x65a>
 8001922:	4628      	mov	r0, r5
 8001924:	f7ff fa81 	bl	8000e2a <PE_Check_ExtendedMessage>
 8001928:	f000 f850 	bl	80019cc <.text_6+0x2>
 800192c:	d001      	beq.n	8001932 <USBPD_PE_StateMachine_SNK+0x656>
 800192e:	f000 f86e 	bl	8001a0e <.text_13>
 8001932:	2000      	movs	r0, #0
 8001934:	8368      	strh	r0, [r5, #26]
 8001936:	88b0      	ldrh	r0, [r6, #4]
 8001938:	4007      	ands	r7, r0
 800193a:	2f10      	cmp	r7, #16
 800193c:	d107      	bne.n	800194e <USBPD_PE_StateMachine_SNK+0x672>
 800193e:	2103      	movs	r1, #3
 8001940:	7369      	strb	r1, [r5, #13]
 8001942:	f000 f842 	bl	80019ca <.text_6>
 8001946:	d001      	beq.n	800194c <USBPD_PE_StateMachine_SNK+0x670>
 8001948:	f000 f861 	bl	8001a0e <.text_13>
 800194c:	836c      	strh	r4, [r5, #26]
 800194e:	f000 f830 	bl	80019b2 <.text_3>
 8001952:	d1c2      	bne.n	80018da <USBPD_PE_StateMachine_SNK+0x5fe>
 8001954:	2103      	movs	r1, #3
 8001956:	e6cb      	b.n	80016f0 <USBPD_PE_StateMachine_SNK+0x414>
 8001958:	4628      	mov	r0, r5
 800195a:	f7ff fae8 	bl	8000f2e <PE_SubStateMachine_ExtendedMessages>
 800195e:	e758      	b.n	8001812 <USBPD_PE_StateMachine_SNK+0x536>
 8001960:	a903      	add	r1, sp, #12
 8001962:	4628      	mov	r0, r5
 8001964:	f7ff f839 	bl	80009da <PE_SubStateMachine_Generic>
 8001968:	e753      	b.n	8001812 <USBPD_PE_StateMachine_SNK+0x536>
 800196a:	6928      	ldr	r0, [r5, #16]
 800196c:	f3c0 3040 	ubfx	r0, r0, #13, #1
 8001970:	b1b8      	cbz	r0, 80019a2 <USBPD_PE_StateMachine_SNK+0x6c6>
 8001972:	6928      	ldr	r0, [r5, #16]
 8001974:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8001978:	b138      	cbz	r0, 800198a <USBPD_PE_StateMachine_SNK+0x6ae>
 800197a:	7b28      	ldrb	r0, [r5, #12]
 800197c:	215b      	movs	r1, #91	@ 0x5b
 800197e:	f7fe fd80 	bl	8000482 <USBPD_PE_Notification>
 8001982:	6928      	ldr	r0, [r5, #16]
 8001984:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 8001988:	6128      	str	r0, [r5, #16]
 800198a:	2003      	movs	r0, #3
 800198c:	7ba9      	ldrb	r1, [r5, #14]
 800198e:	7368      	strb	r0, [r5, #13]
 8001990:	2903      	cmp	r1, #3
 8001992:	d005      	beq.n	80019a0 <USBPD_PE_StateMachine_SNK+0x6c4>
 8001994:	73a8      	strb	r0, [r5, #14]
 8001996:	f000 f823 	bl	80019e0 <.text_8>
 800199a:	2203      	movs	r2, #3
 800199c:	2004      	movs	r0, #4
 800199e:	47a0      	blx	r4
 80019a0:	2401      	movs	r4, #1
 80019a2:	6928      	ldr	r0, [r5, #16]
 80019a4:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 80019a8:	2c00      	cmp	r4, #0
 80019aa:	6128      	str	r0, [r5, #16]
 80019ac:	f43f acef 	beq.w	800138e <USBPD_PE_StateMachine_SNK+0xb2>
 80019b0:	e5c1      	b.n	8001536 <USBPD_PE_StateMachine_SNK+0x25a>

080019b2 <.text_3>:
 80019b2:	8b68      	ldrh	r0, [r5, #26]
 80019b4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80019b8:	4770      	bx	lr

080019ba <.text_4>:
 80019ba:	2014      	movs	r0, #20
 80019bc:	f88d 000c 	strb.w	r0, [sp, #12]
 80019c0:	4770      	bx	lr

080019c2 <.text_5>:
 80019c2:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80019c6:	2811      	cmp	r0, #17
 80019c8:	4770      	bx	lr

080019ca <.text_6>:
 80019ca:	2400      	movs	r4, #0
 80019cc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80019d0:	2814      	cmp	r0, #20
 80019d2:	4770      	bx	lr

080019d4 <.text_7>:
 80019d4:	2300      	movs	r3, #0
 80019d6:	4f4b      	ldr	r7, [pc, #300]	@ (8001b04 <.text_16>)
 80019d8:	7b29      	ldrb	r1, [r5, #12]
 80019da:	f8d7 c000 	ldr.w	ip, [r7]
 80019de:	4770      	bx	lr

080019e0 <.text_8>:
 80019e0:	2100      	movs	r1, #0
 80019e2:	9100      	str	r1, [sp, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	7b29      	ldrb	r1, [r5, #12]
 80019e8:	6834      	ldr	r4, [r6, #0]
 80019ea:	4770      	bx	lr

080019ec <.text_9>:
 80019ec:	6868      	ldr	r0, [r5, #4]
 80019ee:	6801      	ldr	r1, [r0, #0]
 80019f0:	f021 0110 	bic.w	r1, r1, #16
 80019f4:	6001      	str	r1, [r0, #0]
 80019f6:	4770      	bx	lr

080019f8 <.text_10>:
 80019f8:	2101      	movs	r1, #1
 80019fa:	4628      	mov	r0, r5
 80019fc:	f7ff b940 	b.w	8000c80 <PE_CallHardResetCallback>

08001a00 <.text_11>:
 8001a00:	2100      	movs	r1, #0
 8001a02:	4628      	mov	r0, r5
 8001a04:	f7ff b9a8 	b.w	8000d58 <PE_Send_CtrlMessage>

08001a08 <.text_12>:
 8001a08:	7b28      	ldrb	r0, [r5, #12]
 8001a0a:	f7fe bd3a 	b.w	8000482 <USBPD_PE_Notification>

08001a0e <.text_13>:
 8001a0e:	2114      	movs	r1, #20
 8001a10:	f88d 100c 	strb.w	r1, [sp, #12]
 8001a14:	4628      	mov	r0, r5
 8001a16:	f7fe be52 	b.w	80006be <PE_Clear_RxEvent>

08001a1a <PE_StateMachine_SNK_ReadyWait>:
 8001a1a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8001a1c:	460e      	mov	r6, r1
 8001a1e:	4604      	mov	r4, r0
 8001a20:	7830      	ldrb	r0, [r6, #0]
 8001a22:	2502      	movs	r5, #2
 8001a24:	2814      	cmp	r0, #20
 8001a26:	d00b      	beq.n	8001a40 <PE_StateMachine_SNK_ReadyWait+0x26>
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7ff fb54 	bl	80010d6 <PE_ManageRXEvent>
 8001a2e:	7830      	ldrb	r0, [r6, #0]
 8001a30:	2814      	cmp	r0, #20
 8001a32:	d062      	beq.n	8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001a34:	2114      	movs	r1, #20
 8001a36:	7031      	strb	r1, [r6, #0]
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f7fe fe40 	bl	80006be <PE_Clear_RxEvent>
 8001a3e:	e05c      	b.n	8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001a40:	6920      	ldr	r0, [r4, #16]
 8001a42:	0cc0      	lsrs	r0, r0, #19
 8001a44:	d029      	beq.n	8001a9a <PE_StateMachine_SNK_ReadyWait+0x80>
 8001a46:	8ba0      	ldrh	r0, [r4, #28]
 8001a48:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001a4c:	d110      	bne.n	8001a70 <PE_StateMachine_SNK_ReadyWait+0x56>
 8001a4e:	210f      	movs	r1, #15
 8001a50:	7361      	strb	r1, [r4, #13]
 8001a52:	2000      	movs	r0, #0
 8001a54:	4d2b      	ldr	r5, [pc, #172]	@ (8001b04 <.text_16>)
 8001a56:	682e      	ldr	r6, [r5, #0]
 8001a58:	9000      	str	r0, [sp, #0]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	7b21      	ldrb	r1, [r4, #12]
 8001a5e:	2270      	movs	r2, #112	@ 0x70
 8001a60:	2009      	movs	r0, #9
 8001a62:	47b0      	blx	r6
 8001a64:	f894 007c 	ldrb.w	r0, [r4, #124]	@ 0x7c
 8001a68:	1c40      	adds	r0, r0, #1
 8001a6a:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
 8001a6e:	e03f      	b.n	8001af0 <PE_StateMachine_SNK_ReadyWait+0xd6>
 8001a70:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8001a72:	6922      	ldr	r2, [r4, #16]
 8001a74:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8001a78:	2033      	movs	r0, #51	@ 0x33
 8001a7a:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 8001a7e:	fb11 f100 	smulbb	r1, r1, r0
 8001a82:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8001a86:	83a1      	strh	r1, [r4, #28]
 8001a88:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8001a8a:	6922      	ldr	r2, [r4, #16]
 8001a8c:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8001a90:	eb01 45d2 	add.w	r5, r1, r2, lsr #19
 8001a94:	4345      	muls	r5, r0
 8001a96:	b2ad      	uxth	r5, r5
 8001a98:	e02f      	b.n	8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001a9a:	7b20      	ldrb	r0, [r4, #12]
 8001a9c:	f7fe fe33 	bl	8000706 <PE_PRL_Control_RxEvent>
 8001aa0:	f104 0629 	add.w	r6, r4, #41	@ 0x29
 8001aa4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001aa8:	bb20      	cbnz	r0, 8001af4 <PE_StateMachine_SNK_ReadyWait+0xda>
 8001aaa:	7870      	ldrb	r0, [r6, #1]
 8001aac:	b328      	cbz	r0, 8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001aae:	6860      	ldr	r0, [r4, #4]
 8001ab0:	6800      	ldr	r0, [r0, #0]
 8001ab2:	f000 0103 	and.w	r1, r0, #3
 8001ab6:	2901      	cmp	r1, #1
 8001ab8:	d008      	beq.n	8001acc <PE_StateMachine_SNK_ReadyWait+0xb2>
 8001aba:	f000 0003 	and.w	r0, r0, #3
 8001abe:	2802      	cmp	r0, #2
 8001ac0:	d118      	bne.n	8001af4 <PE_StateMachine_SNK_ReadyWait+0xda>
 8001ac2:	7b20      	ldrb	r0, [r4, #12]
 8001ac4:	f000 f886 	bl	8001bd4 <USBPD_PRL_IsResistor_SinkTxOK>
 8001ac8:	2801      	cmp	r0, #1
 8001aca:	d113      	bne.n	8001af4 <PE_StateMachine_SNK_ReadyWait+0xda>
 8001acc:	78b0      	ldrb	r0, [r6, #2]
 8001ace:	7030      	strb	r0, [r6, #0]
 8001ad0:	7870      	ldrb	r0, [r6, #1]
 8001ad2:	7360      	strb	r0, [r4, #13]
 8001ad4:	2845      	cmp	r0, #69	@ 0x45
 8001ad6:	d103      	bne.n	8001ae0 <PE_StateMachine_SNK_ReadyWait+0xc6>
 8001ad8:	6920      	ldr	r0, [r4, #16]
 8001ada:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8001ade:	6120      	str	r0, [r4, #16]
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	7070      	strb	r0, [r6, #1]
 8001ae4:	6920      	ldr	r0, [r4, #16]
 8001ae6:	6a21      	ldr	r1, [r4, #32]
 8001ae8:	6261      	str	r1, [r4, #36]	@ 0x24
 8001aea:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 8001aee:	6120      	str	r0, [r4, #16]
 8001af0:	2500      	movs	r5, #0
 8001af2:	e002      	b.n	8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001af4:	7870      	ldrb	r0, [r6, #1]
 8001af6:	b100      	cbz	r0, 8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001af8:	2502      	movs	r5, #2
 8001afa:	4628      	mov	r0, r5
 8001afc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08001b00 <.text_15>:
 8001b00:	2000050c 	.word	0x2000050c

08001b04 <.text_16>:
 8001b04:	20000000 	.word	0x20000000

08001b08 <USBPD_PRL_TimerCounter>:
 8001b08:	f8df 1a40 	ldr.w	r1, [pc, #2624]	@ 800254c <.text_37>
 8001b0c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8001b10:	78c8      	ldrb	r0, [r1, #3]
 8001b12:	b110      	cbz	r0, 8001b1a <USBPD_PRL_TimerCounter+0x12>
 8001b14:	78c8      	ldrb	r0, [r1, #3]
 8001b16:	1e42      	subs	r2, r0, #1
 8001b18:	70ca      	strb	r2, [r1, #3]
 8001b1a:	4770      	bx	lr

08001b1c <USBPD_PRL_Init>:
 8001b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b20:	4680      	mov	r8, r0
 8001b22:	460e      	mov	r6, r1
 8001b24:	4617      	mov	r7, r2
 8001b26:	461d      	mov	r5, r3
 8001b28:	2048      	movs	r0, #72	@ 0x48
 8001b2a:	f015 fa9b 	bl	8017064 <malloc>
 8001b2e:	0004      	movs	r4, r0
 8001b30:	f04f 0916 	mov.w	r9, #22
 8001b34:	d018      	beq.n	8001b68 <USBPD_PRL_Init+0x4c>
 8001b36:	2148      	movs	r1, #72	@ 0x48
 8001b38:	f016 ffd9 	bl	8018aee <__aeabi_memclr>
 8001b3c:	f000 fa9a 	bl	8002074 <.text_17>
 8001b40:	f8df 0a08 	ldr.w	r0, [pc, #2568]	@ 800254c <.text_37>
 8001b44:	4641      	mov	r1, r8
 8001b46:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8001b4a:	6227      	str	r7, [r4, #32]
 8001b4c:	6265      	str	r5, [r4, #36]	@ 0x24
 8001b4e:	2001      	movs	r0, #1
 8001b50:	9000      	str	r0, [sp, #0]
 8001b52:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8001b56:	6870      	ldr	r0, [r6, #4]
 8001b58:	f60f 2110 	addw	r1, pc, #2576	@ 0xa10
 8001b5c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001b60:	4640      	mov	r0, r8
 8001b62:	f00f fa5f 	bl	8011024 <USBPD_PHY_Init>
 8001b66:	4681      	mov	r9, r0
 8001b68:	4648      	mov	r0, r9
 8001b6a:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08001b6e <USBPD_PRL_GetMemoryConsumption>:
 8001b6e:	20d8      	movs	r0, #216	@ 0xd8
 8001b70:	4770      	bx	lr

08001b72 <USBPD_PRL_SetHeader>:
 8001b72:	b530      	push	{r4, r5, lr}
 8001b74:	f8df 49d4 	ldr.w	r4, [pc, #2516]	@ 800254c <.text_37>
 8001b78:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8001b7c:	8a2d      	ldrh	r5, [r5, #16]
 8001b7e:	f361 2508 	bfi	r5, r1, #8, #1
 8001b82:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8001b86:	820d      	strh	r5, [r1, #16]
 8001b88:	f362 1545 	bfi	r5, r2, #5, #1
 8001b8c:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8001b90:	820d      	strh	r5, [r1, #16]
 8001b92:	f363 1587 	bfi	r5, r3, #6, #2
 8001b96:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8001b9a:	8205      	strh	r5, [r0, #16]
 8001b9c:	bd30      	pop	{r4, r5, pc}

08001b9e <USBPD_PRL_SetHeaderPowerRole>:
 8001b9e:	b510      	push	{r4, lr}
 8001ba0:	f000 f80b 	bl	8001bba <.text_9>
 8001ba4:	f361 2408 	bfi	r4, r1, #8, #1
 8001ba8:	821c      	strh	r4, [r3, #16]
 8001baa:	bd10      	pop	{r4, pc}

08001bac <USBPD_PRL_SetHeaderDataRole>:
 8001bac:	b510      	push	{r4, lr}
 8001bae:	f000 f804 	bl	8001bba <.text_9>
 8001bb2:	f361 1445 	bfi	r4, r1, #5, #1
 8001bb6:	821c      	strh	r4, [r3, #16]
 8001bb8:	bd10      	pop	{r4, pc}

08001bba <.text_9>:
 8001bba:	f8df 2990 	ldr.w	r2, [pc, #2448]	@ 800254c <.text_37>
 8001bbe:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8001bc2:	8a1c      	ldrh	r4, [r3, #16]
 8001bc4:	4770      	bx	lr

08001bc6 <USBPD_PRL_SetHeaderSpecification>:
 8001bc6:	b510      	push	{r4, lr}
 8001bc8:	f7ff fff7 	bl	8001bba <.text_9>
 8001bcc:	f361 1487 	bfi	r4, r1, #6, #2
 8001bd0:	821c      	strh	r4, [r3, #16]
 8001bd2:	bd10      	pop	{r4, pc}

08001bd4 <USBPD_PRL_IsResistor_SinkTxOK>:
 8001bd4:	f00f bb01 	b.w	80111da <USBPD_PHY_IsResistor_SinkTxOk>

08001bd8 <USBPD_PRL_SendMessage>:
 8001bd8:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bdc:	f8df a96c 	ldr.w	sl, [pc, #2412]	@ 800254c <.text_37>
 8001be0:	b083      	sub	sp, #12
 8001be2:	4680      	mov	r8, r0
 8001be4:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001be8:	4694      	mov	ip, r2
 8001bea:	f10c 0701 	add.w	r7, ip, #1
 8001bee:	2403      	movs	r4, #3
 8001bf0:	78f8      	ldrb	r0, [r7, #3]
 8001bf2:	b118      	cbz	r0, 8001bfc <USBPD_PRL_SendMessage+0x24>
 8001bf4:	79f8      	ldrb	r0, [r7, #7]
 8001bf6:	b908      	cbnz	r0, 8001bfc <USBPD_PRL_SendMessage+0x24>
 8001bf8:	200f      	movs	r0, #15
 8001bfa:	7110      	strb	r0, [r2, #4]
 8001bfc:	ea4f 0048 	mov.w	r0, r8, lsl #1
 8001c00:	1c40      	adds	r0, r0, #1
 8001c02:	f88d 0005 	strb.w	r0, [sp, #5]
 8001c06:	f88d 1004 	strb.w	r1, [sp, #4]
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	eb0c 0601 	add.w	r6, ip, r1
 8001c10:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8001c12:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
 8001c16:	f897 b003 	ldrb.w	fp, [r7, #3]
 8001c1a:	f1bb 0f10 	cmp.w	fp, #16
 8001c1e:	f10c 050c 	add.w	r5, ip, #12
 8001c22:	46f1      	mov	r9, lr
 8001c24:	f200 81e0 	bhi.w	8001fe8 <USBPD_PRL_SendMessage+0x410>
 8001c28:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8001c2c:	01de0011 	.word	0x01de0011
 8001c30:	01de01de 	.word	0x01de01de
 8001c34:	00490028 	.word	0x00490028
 8001c38:	00ac0038 	.word	0x00ac0038
 8001c3c:	01de01de 	.word	0x01de01de
 8001c40:	017f016a 	.word	0x017f016a
 8001c44:	01a70196 	.word	0x01a70196
 8001c48:	01da01de 	.word	0x01da01de
 8001c4c:	01c2      	.short	0x01c2
 8001c4e:	f3ef 8510 	mrs	r5, PRIMASK
 8001c52:	b672      	cpsid	i
 8001c54:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001c58:	f7fe fd55 	bl	8000706 <PE_PRL_Control_RxEvent>
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	bf04      	itt	eq
 8001c60:	7a38      	ldrbeq	r0, [r7, #8]
 8001c62:	2800      	cmpeq	r0, #0
 8001c64:	bf07      	ittee	eq
 8001c66:	21ff      	moveq	r1, #255	@ 0xff
 8001c68:	71f9      	strbeq	r1, [r7, #7]
 8001c6a:	2000      	movne	r0, #0
 8001c6c:	71f8      	strbne	r0, [r7, #7]
 8001c6e:	f385 8810 	msr	PRIMASK, r5
 8001c72:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001c76:	2106      	movs	r1, #6
 8001c78:	7101      	strb	r1, [r0, #4]
 8001c7a:	e1b8      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001c7c:	2802      	cmp	r0, #2
 8001c7e:	d10b      	bne.n	8001c98 <USBPD_PRL_SendMessage+0xc0>
 8001c80:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001c84:	f00f faa9 	bl	80111da <USBPD_PHY_IsResistor_SinkTxOk>
 8001c88:	2801      	cmp	r0, #1
 8001c8a:	d103      	bne.n	8001c94 <USBPD_PRL_SendMessage+0xbc>
 8001c8c:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001c90:	2005      	movs	r0, #5
 8001c92:	e185      	b.n	8001fa0 <USBPD_PRL_SendMessage+0x3c8>
 8001c94:	2409      	movs	r4, #9
 8001c96:	e1aa      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001c98:	2006      	movs	r0, #6
 8001c9a:	e15b      	b.n	8001f54 <USBPD_PRL_SendMessage+0x37c>
 8001c9c:	f10c 0210 	add.w	r2, ip, #16
 8001ca0:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001ca4:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8001ca8:	2902      	cmp	r1, #2
 8001caa:	bf08      	it	eq
 8001cac:	2802      	cmpeq	r0, #2
 8001cae:	bf19      	ittee	ne
 8001cb0:	2005      	movne	r0, #5
 8001cb2:	f85a 1028 	ldrne.w	r1, [sl, r8, lsl #2]
 8001cb6:	2004      	moveq	r0, #4
 8001cb8:	f85a 1028 	ldreq.w	r1, [sl, r8, lsl #2]
 8001cbc:	e170      	b.n	8001fa0 <USBPD_PRL_SendMessage+0x3c8>
 8001cbe:	f10c 0010 	add.w	r0, ip, #16
 8001cc2:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001cc6:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001cca:	f10c 0310 	add.w	r3, ip, #16
 8001cce:	f362 0004 	bfi	r0, r2, #0, #5
 8001cd2:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8001cd6:	ea4f 1bd2 	mov.w	fp, r2, lsr #7
 8001cda:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8001cde:	ea40 30cb 	orr.w	r0, r0, fp, lsl #15
 8001ce2:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	7038      	strb	r0, [r7, #0]
 8001cea:	f10c 0710 	add.w	r7, ip, #16
 8001cee:	f837 3011 	ldrh.w	r3, [r7, r1, lsl #1]
 8001cf2:	0bd8      	lsrs	r0, r3, #15
 8001cf4:	d026      	beq.n	8001d44 <USBPD_PRL_SendMessage+0x16c>
 8001cf6:	9802      	ldr	r0, [sp, #8]
 8001cf8:	7883      	ldrb	r3, [r0, #2]
 8001cfa:	78c7      	ldrb	r7, [r0, #3]
 8001cfc:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8001d00:	816b      	strh	r3, [r5, #10]
 8001d02:	8968      	ldrh	r0, [r5, #10]
 8001d04:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8001d08:	b970      	cbnz	r0, 8001d28 <USBPD_PRL_SendMessage+0x150>
 8001d0a:	8968      	ldrh	r0, [r5, #10]
 8001d0c:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 8001d10:	bb18      	cbnz	r0, 8001d5a <USBPD_PRL_SendMessage+0x182>
 8001d12:	f1ae 0004 	sub.w	r0, lr, #4
 8001d16:	8228      	strh	r0, [r5, #16]
 8001d18:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001d1c:	896b      	ldrh	r3, [r5, #10]
 8001d1e:	f403 437e 	and.w	r3, r3, #65024	@ 0xfe00
 8001d22:	4318      	orrs	r0, r3
 8001d24:	8168      	strh	r0, [r5, #10]
 8001d26:	e018      	b.n	8001d5a <USBPD_PRL_SendMessage+0x182>
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f10c 0310 	add.w	r3, ip, #16
 8001d2e:	8228      	strh	r0, [r5, #16]
 8001d30:	2001      	movs	r0, #1
 8001d32:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]
 8001d36:	f360 370e 	bfi	r7, r0, #12, #3
 8001d3a:	f10c 0010 	add.w	r0, ip, #16
 8001d3e:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
 8001d42:	e00a      	b.n	8001d5a <USBPD_PRL_SendMessage+0x182>
 8001d44:	f1a9 0002 	sub.w	r0, r9, #2
 8001d48:	0880      	lsrs	r0, r0, #2
 8001d4a:	f360 330e 	bfi	r3, r0, #12, #3
 8001d4e:	f10c 0010 	add.w	r0, ip, #16
 8001d52:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8001d56:	2300      	movs	r3, #0
 8001d58:	822b      	strh	r3, [r5, #16]
 8001d5a:	2a0d      	cmp	r2, #13
 8001d5c:	bf02      	ittt	eq
 8001d5e:	f10c 0010 	addeq.w	r0, ip, #16
 8001d62:	f830 1011 	ldrheq.w	r1, [r0, r1, lsl #1]
 8001d66:	f411 4f70 	tsteq.w	r1, #61440	@ 0xf000
 8001d6a:	d107      	bne.n	8001d7c <USBPD_PRL_SendMessage+0x1a4>
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	72b0      	strb	r0, [r6, #10]
 8001d70:	220f      	movs	r2, #15
 8001d72:	2103      	movs	r1, #3
 8001d74:	f10c 0005 	add.w	r0, ip, #5
 8001d78:	f000 fc05 	bl	8002586 <__aeabi_memset>
 8001d7c:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001d80:	2007      	movs	r0, #7
 8001d82:	e10d      	b.n	8001fa0 <USBPD_PRL_SendMessage+0x3c8>
 8001d84:	f102 0310 	add.w	r3, r2, #16
 8001d88:	4677      	mov	r7, lr
 8001d8a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8001d8e:	0bc0      	lsrs	r0, r0, #15
 8001d90:	f000 8080 	beq.w	8001e94 <USBPD_PRL_SendMessage+0x2bc>
 8001d94:	8ad0      	ldrh	r0, [r2, #22]
 8001d96:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8001d9a:	82d0      	strh	r0, [r2, #22]
 8001d9c:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8001da0:	2800      	cmp	r0, #0
 8001da2:	d16c      	bne.n	8001e7e <USBPD_PRL_SendMessage+0x2a6>
 8001da4:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001da8:	8b95      	ldrh	r5, [r2, #28]
 8001daa:	8ad3      	ldrh	r3, [r2, #22]
 8001dac:	2d1b      	cmp	r5, #27
 8001dae:	d30f      	bcc.n	8001dd0 <USBPD_PRL_SendMessage+0x1f8>
 8001db0:	0bd8      	lsrs	r0, r3, #15
 8001db2:	d00d      	beq.n	8001dd0 <USBPD_PRL_SendMessage+0x1f8>
 8001db4:	f102 0310 	add.w	r3, r2, #16
 8001db8:	271e      	movs	r7, #30
 8001dba:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8001dbe:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 8001dc2:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8001dc6:	8b90      	ldrh	r0, [r2, #28]
 8001dc8:	f1a0 031a 	sub.w	r3, r0, #26
 8001dcc:	8393      	strh	r3, [r2, #28]
 8001dce:	e056      	b.n	8001e7e <USBPD_PRL_SendMessage+0x2a6>
 8001dd0:	f3c3 20c3 	ubfx	r0, r3, #11, #4
 8001dd4:	b918      	cbnz	r0, 8001dde <USBPD_PRL_SendMessage+0x206>
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f365 0008 	bfi	r0, r5, #0, #9
 8001ddc:	82d0      	strh	r0, [r2, #22]
 8001dde:	f648 70ff 	movw	r0, #36863	@ 0x8fff
 8001de2:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001de6:	f102 0310 	add.w	r3, r2, #16
 8001dea:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001dee:	4003      	ands	r3, r0
 8001df0:	f102 0010 	add.w	r0, r2, #16
 8001df4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8001df8:	8ad0      	ldrh	r0, [r2, #22]
 8001dfa:	0bc0      	lsrs	r0, r0, #15
 8001dfc:	d03b      	beq.n	8001e76 <USBPD_PRL_SendMessage+0x29e>
 8001dfe:	8b90      	ldrh	r0, [r2, #28]
 8001e00:	1c80      	adds	r0, r0, #2
 8001e02:	0880      	lsrs	r0, r0, #2
 8001e04:	0307      	lsls	r7, r0, #12
 8001e06:	f407 47e0 	and.w	r7, r7, #28672	@ 0x7000
 8001e0a:	f102 0010 	add.w	r0, r2, #16
 8001e0e:	433b      	orrs	r3, r7
 8001e10:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8001e14:	8b92      	ldrh	r2, [r2, #28]
 8001e16:	1c92      	adds	r2, r2, #2
 8001e18:	f012 0203 	ands.w	r2, r2, #3
 8001e1c:	d021      	beq.n	8001e62 <USBPD_PRL_SendMessage+0x28a>
 8001e1e:	9802      	ldr	r0, [sp, #8]
 8001e20:	2700      	movs	r7, #0
 8001e22:	e005      	b.n	8001e30 <USBPD_PRL_SendMessage+0x258>
 8001e24:	8b9b      	ldrh	r3, [r3, #28]
 8001e26:	1d05      	adds	r5, r0, #4
 8001e28:	4433      	add	r3, r6
 8001e2a:	2600      	movs	r6, #0
 8001e2c:	54ee      	strb	r6, [r5, r3]
 8001e2e:	1c7f      	adds	r7, r7, #1
 8001e30:	b2fe      	uxtb	r6, r7
 8001e32:	f1c2 0e04 	rsb	lr, r2, #4
 8001e36:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
 8001e3a:	4576      	cmp	r6, lr
 8001e3c:	d3f2      	bcc.n	8001e24 <USBPD_PRL_SendMessage+0x24c>
 8001e3e:	9002      	str	r0, [sp, #8]
 8001e40:	f648 72ff 	movw	r2, #36863	@ 0x8fff
 8001e44:	f103 0010 	add.w	r0, r3, #16
 8001e48:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001e4c:	4002      	ands	r2, r0
 8001e4e:	0b00      	lsrs	r0, r0, #12
 8001e50:	1c40      	adds	r0, r0, #1
 8001e52:	0300      	lsls	r0, r0, #12
 8001e54:	f400 40e0 	and.w	r0, r0, #28672	@ 0x7000
 8001e58:	4310      	orrs	r0, r2
 8001e5a:	f103 0210 	add.w	r2, r3, #16
 8001e5e:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8001e62:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001e66:	f100 0210 	add.w	r2, r0, #16
 8001e6a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8001e6e:	f3c3 3702 	ubfx	r7, r3, #12, #3
 8001e72:	00bf      	lsls	r7, r7, #2
 8001e74:	1cbf      	adds	r7, r7, #2
 8001e76:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	8390      	strh	r0, [r2, #28]
 8001e7e:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001e82:	8ac2      	ldrh	r2, [r0, #22]
 8001e84:	9802      	ldr	r0, [sp, #8]
 8001e86:	7082      	strb	r2, [r0, #2]
 8001e88:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001e8c:	8ad0      	ldrh	r0, [r2, #22]
 8001e8e:	9a02      	ldr	r2, [sp, #8]
 8001e90:	0a00      	lsrs	r0, r0, #8
 8001e92:	70d0      	strb	r0, [r2, #3]
 8001e94:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001e98:	f8df 56b4 	ldr.w	r5, [pc, #1716]	@ 8002550 <.text_38>
 8001e9c:	f100 020a 	add.w	r2, r0, #10
 8001ea0:	3010      	adds	r0, #16
 8001ea2:	5c53      	ldrb	r3, [r2, r1]
 8001ea4:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001ea8:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001eac:	f363 204b 	bfi	r0, r3, #9, #3
 8001eb0:	f102 0310 	add.w	r3, r2, #16
 8001eb4:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8001eb8:	9a02      	ldr	r2, [sp, #8]
 8001eba:	7010      	strb	r0, [r2, #0]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001ec2:	f100 0310 	add.w	r3, r0, #16
 8001ec6:	9802      	ldr	r0, [sp, #8]
 8001ec8:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8001ecc:	0a09      	lsrs	r1, r1, #8
 8001ece:	7041      	strb	r1, [r0, #1]
 8001ed0:	210a      	movs	r1, #10
 8001ed2:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001ed6:	8187      	strh	r7, [r0, #12]
 8001ed8:	7101      	strb	r1, [r0, #4]
 8001eda:	7382      	strb	r2, [r0, #14]
 8001edc:	b2b8      	uxth	r0, r7
 8001ede:	9000      	str	r0, [sp, #0]
 8001ee0:	f000 f893 	bl	800200a <.text_15>
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	47d0      	blx	sl
 8001ee8:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001eec:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001ef0:	f010 fbca 	bl	8012688 <USBPD_TIM_Start>
 8001ef4:	f000 f883 	bl	8001ffe <.text_14>
 8001ef8:	b2bb      	uxth	r3, r7
 8001efa:	f00f f936 	bl	801116a <USBPD_PHY_SendMessage>
 8001efe:	e076      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001f00:	f3ef 8710 	mrs	r7, PRIMASK
 8001f04:	b672      	cpsid	i
 8001f06:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001f0a:	7901      	ldrb	r1, [r0, #4]
 8001f0c:	290a      	cmp	r1, #10
 8001f0e:	d109      	bne.n	8001f24 <USBPD_PRL_SendMessage+0x34c>
 8001f10:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001f14:	f010 fc2a 	bl	801276c <USBPD_TIM_IsExpired>
 8001f18:	2801      	cmp	r0, #1
 8001f1a:	d103      	bne.n	8001f24 <USBPD_PRL_SendMessage+0x34c>
 8001f1c:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001f20:	200d      	movs	r0, #13
 8001f22:	7108      	strb	r0, [r1, #4]
 8001f24:	f387 8810 	msr	PRIMASK, r7
 8001f28:	e061      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001f2a:	8928      	ldrh	r0, [r5, #8]
 8001f2c:	7ab1      	ldrb	r1, [r6, #10]
 8001f2e:	0a43      	lsrs	r3, r0, #9
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4299      	cmp	r1, r3
 8001f36:	bf04      	itt	eq
 8001f38:	f000 001f 	andeq.w	r0, r0, #31
 8001f3c:	2801      	cmpeq	r0, #1
 8001f3e:	d108      	bne.n	8001f52 <USBPD_PRL_SendMessage+0x37a>
 8001f40:	1c49      	adds	r1, r1, #1
 8001f42:	f001 0107 	and.w	r1, r1, #7
 8001f46:	72b1      	strb	r1, [r6, #10]
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001f4e:	7108      	strb	r0, [r1, #4]
 8001f50:	e011      	b.n	8001f76 <USBPD_PRL_SendMessage+0x39e>
 8001f52:	200d      	movs	r0, #13
 8001f54:	7110      	strb	r0, [r2, #4]
 8001f56:	e04a      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001f58:	f000 f84b 	bl	8001ff2 <.text_13>
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001f62:	7108      	strb	r0, [r1, #4]
 8001f64:	f248 71ff 	movw	r1, #34815	@ 0x87ff
 8001f68:	896a      	ldrh	r2, [r5, #10]
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	816a      	strh	r2, [r5, #10]
 8001f6e:	f64f 30ff 	movw	r0, #64511	@ 0xfbff
 8001f72:	4002      	ands	r2, r0
 8001f74:	816a      	strh	r2, [r5, #10]
 8001f76:	2405      	movs	r4, #5
 8001f78:	e039      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001f7a:	7838      	ldrb	r0, [r7, #0]
 8001f7c:	1c40      	adds	r0, r0, #1
 8001f7e:	7038      	strb	r0, [r7, #0]
 8001f80:	f10c 0010 	add.w	r0, ip, #16
 8001f84:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8001f88:	783a      	ldrb	r2, [r7, #0]
 8001f8a:	f3c1 1081 	ubfx	r0, r1, #6, #2
 8001f8e:	2801      	cmp	r0, #1
 8001f90:	bf0c      	ite	eq
 8001f92:	2003      	moveq	r0, #3
 8001f94:	2002      	movne	r0, #2
 8001f96:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001f9a:	4290      	cmp	r0, r2
 8001f9c:	d302      	bcc.n	8001fa4 <USBPD_PRL_SendMessage+0x3cc>
 8001f9e:	2010      	movs	r0, #16
 8001fa0:	7108      	strb	r0, [r1, #4]
 8001fa2:	e024      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	710a      	strb	r2, [r1, #4]
 8001fa8:	2407      	movs	r4, #7
 8001faa:	f000 f822 	bl	8001ff2 <.text_13>
 8001fae:	e01e      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001fb0:	200a      	movs	r0, #10
 8001fb2:	7110      	strb	r0, [r2, #4]
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	70a9      	strb	r1, [r5, #2]
 8001fb8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001fbc:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001fc0:	f010 fb62 	bl	8012688 <USBPD_TIM_Start>
 8001fc4:	882b      	ldrh	r3, [r5, #0]
 8001fc6:	f000 f81a 	bl	8001ffe <.text_14>
 8001fca:	f8df 5584 	ldr.w	r5, [pc, #1412]	@ 8002550 <.text_38>
 8001fce:	f00f f8cc 	bl	801116a <USBPD_PHY_SendMessage>
 8001fd2:	f000 f81a 	bl	800200a <.text_15>
 8001fd6:	f8cd 9000 	str.w	r9, [sp]
 8001fda:	2002      	movs	r0, #2
 8001fdc:	47d0      	blx	sl
 8001fde:	e006      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	7110      	strb	r0, [r2, #4]
 8001fe4:	2406      	movs	r4, #6
 8001fe6:	e002      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001fe8:	2000      	movs	r0, #0
 8001fea:	7110      	strb	r0, [r2, #4]
 8001fec:	2410      	movs	r4, #16
 8001fee:	4620      	mov	r0, r4
 8001ff0:	e1f0      	b.n	80023d4 <.text_25>

08001ff2 <.text_13>:
 8001ff2:	7ab0      	ldrb	r0, [r6, #10]
 8001ff4:	1c40      	adds	r0, r0, #1
 8001ff6:	f000 0007 	and.w	r0, r0, #7
 8001ffa:	72b0      	strb	r0, [r6, #10]
 8001ffc:	4770      	bx	lr

08001ffe <.text_14>:
 8001ffe:	9a02      	ldr	r2, [sp, #8]
 8002000:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002004:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002008:	4770      	bx	lr

0800200a <.text_15>:
 800200a:	9b02      	ldr	r3, [sp, #8]
 800200c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002010:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002014:	f8d5 a000 	ldr.w	sl, [r5]
 8002018:	4770      	bx	lr

0800201a <USBPD_PRL_ResetRequestProcess>:
 800201a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800201e:	4605      	mov	r5, r0
 8002020:	f8df 8528 	ldr.w	r8, [pc, #1320]	@ 800254c <.text_37>
 8002024:	462f      	mov	r7, r5
 8002026:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 800202a:	2000      	movs	r0, #0
 800202c:	70a0      	strb	r0, [r4, #2]
 800202e:	72a0      	strb	r0, [r4, #10]
 8002030:	460e      	mov	r6, r1
 8002032:	f000 f81f 	bl	8002074 <.text_17>
 8002036:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 800203a:	f8df 7514 	ldr.w	r7, [pc, #1300]	@ 8002550 <.text_38>
 800203e:	2200      	movs	r2, #0
 8002040:	7102      	strb	r2, [r0, #4]
 8002042:	9200      	str	r2, [sp, #0]
 8002044:	2300      	movs	r3, #0
 8002046:	f8d7 c000 	ldr.w	ip, [r7]
 800204a:	4632      	mov	r2, r6
 800204c:	4629      	mov	r1, r5
 800204e:	2002      	movs	r0, #2
 8002050:	47e0      	blx	ip
 8002052:	4628      	mov	r0, r5
 8002054:	f000 f83e 	bl	80020d4 <PRL_DisableRX>
 8002058:	4631      	mov	r1, r6
 800205a:	4628      	mov	r0, r5
 800205c:	f00f f872 	bl	8011144 <USBPD_PHY_ResetRequest>
 8002060:	2005      	movs	r0, #5
 8002062:	70e0      	strb	r0, [r4, #3]
 8002064:	78a0      	ldrb	r0, [r4, #2]
 8002066:	2801      	cmp	r0, #1
 8002068:	bf1c      	itt	ne
 800206a:	78e0      	ldrbne	r0, [r4, #3]
 800206c:	2800      	cmpne	r0, #0
 800206e:	d1f9      	bne.n	8002064 <USBPD_PRL_ResetRequestProcess+0x4a>
 8002070:	e8bd 81f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, pc}

08002074 <.text_17>:
 8002074:	220f      	movs	r2, #15
 8002076:	2103      	movs	r1, #3
 8002078:	1d60      	adds	r0, r4, #5
 800207a:	f000 ba84 	b.w	8002586 <__aeabi_memset>

0800207e <USBDPD_PRL_BistCarrierEyeMode>:
 800207e:	2905      	cmp	r1, #5
 8002080:	bf08      	it	eq
 8002082:	f00f b888 	beq.w	8011196 <USBPD_PHY_Send_BIST_Pattern>
 8002086:	2010      	movs	r0, #16
 8002088:	4770      	bx	lr

0800208a <USBDPD_PRL_BistCarrierEyeModeExit>:
 800208a:	2905      	cmp	r1, #5
 800208c:	bf04      	itt	eq
 800208e:	2107      	moveq	r1, #7
 8002090:	f00f b88f 	beq.w	80111b2 <USBPD_PHY_ExitTransmit>
 8002094:	2010      	movs	r0, #16
 8002096:	4770      	bx	lr

08002098 <USBPD_PRL_Reset>:
 8002098:	b538      	push	{r3, r4, r5, lr}
 800209a:	4604      	mov	r4, r0
 800209c:	f8df 04ac 	ldr.w	r0, [pc, #1196]	@ 800254c <.text_37>
 80020a0:	4621      	mov	r1, r4
 80020a2:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80020a6:	2200      	movs	r2, #0
 80020a8:	712a      	strb	r2, [r5, #4]
 80020aa:	702a      	strb	r2, [r5, #0]
 80020ac:	70ea      	strb	r2, [r5, #3]
 80020ae:	72aa      	strb	r2, [r5, #10]
 80020b0:	2103      	movs	r1, #3
 80020b2:	220f      	movs	r2, #15
 80020b4:	1d68      	adds	r0, r5, #5
 80020b6:	f000 fa66 	bl	8002586 <__aeabi_memset>
 80020ba:	2200      	movs	r2, #0
 80020bc:	77ea      	strb	r2, [r5, #31]
 80020be:	4620      	mov	r0, r4
 80020c0:	f00f f835 	bl	801112e <USBPD_PHY_Reset>
 80020c4:	4620      	mov	r0, r4
 80020c6:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 80020ca:	f00f b894 	b.w	80111f6 <USBPD_PHY_EnableRX>

080020ce <USBPD_PRL_Stop>:
 80020ce:	f00f b89f 	b.w	8011210 <USBPD_PHY_DisableRX>

080020d2 <USBPD_PRL_DeInit>:
 80020d2:	4770      	bx	lr

080020d4 <PRL_DisableRX>:
 80020d4:	f00f b89c 	b.w	8011210 <USBPD_PHY_DisableRX>

080020d8 <PRL_Received>:
 80020d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020dc:	4680      	mov	r8, r0
 80020de:	f8df b46c 	ldr.w	fp, [pc, #1132]	@ 800254c <.text_37>
 80020e2:	b084      	sub	sp, #16
 80020e4:	4645      	mov	r5, r8
 80020e6:	f85b 6025 	ldr.w	r6, [fp, r5, lsl #2]
 80020ea:	f8df 9464 	ldr.w	r9, [pc, #1124]	@ 8002550 <.text_38>
 80020ee:	468a      	mov	sl, r1
 80020f0:	f00f f811 	bl	8011116 <USBPD_PHY_GetMinGOODCRCTimerValue>
 80020f4:	4601      	mov	r1, r0
 80020f6:	ea4f 0048 	mov.w	r0, r8, lsl #1
 80020fa:	b2c0      	uxtb	r0, r0
 80020fc:	f010 fac4 	bl	8012688 <USBPD_TIM_Start>
 8002100:	f106 0728 	add.w	r7, r6, #40	@ 0x28
 8002104:	7838      	ldrb	r0, [r7, #0]
 8002106:	7879      	ldrb	r1, [r7, #1]
 8002108:	eb00 2401 	add.w	r4, r0, r1, lsl #8
 800210c:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8002110:	4020      	ands	r0, r4
 8002112:	2801      	cmp	r0, #1
 8002114:	d112      	bne.n	800213c <PRL_Received+0x64>
 8002116:	0069      	lsls	r1, r5, #1
 8002118:	1c49      	adds	r1, r1, #1
 800211a:	b2c8      	uxtb	r0, r1
 800211c:	f010 fb26 	bl	801276c <USBPD_TIM_IsExpired>
 8002120:	2801      	cmp	r0, #1
 8002122:	d03f      	beq.n	80021a4 <PRL_Received+0xcc>
 8002124:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8002128:	200b      	movs	r0, #11
 800212a:	7108      	strb	r0, [r1, #4]
 800212c:	82b4      	strh	r4, [r6, #20]
 800212e:	f000 f966 	bl	80023fe <.text_29>
 8002132:	463b      	mov	r3, r7
 8002134:	4652      	mov	r2, sl
 8002136:	4641      	mov	r1, r8
 8002138:	2001      	movs	r0, #1
 800213a:	e148      	b.n	80023ce <PRL_Received+0x2f6>
 800213c:	f20f 4044 	addw	r0, pc, #1092	@ 0x444
 8002140:	8805      	ldrh	r5, [r0, #0]
 8002142:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8002146:	2101      	movs	r1, #1
 8002148:	4020      	ands	r0, r4
 800214a:	7271      	strb	r1, [r6, #9]
 800214c:	eb06 020a 	add.w	r2, r6, sl
 8002150:	280d      	cmp	r0, #13
 8002152:	9202      	str	r2, [sp, #8]
 8002154:	d103      	bne.n	800215e <PRL_Received+0x86>
 8002156:	2100      	movs	r1, #0
 8002158:	7291      	strb	r1, [r2, #10]
 800215a:	f000 f97c 	bl	8002456 <.text_31>
 800215e:	ea5f 000a 	movs.w	r0, sl
 8002162:	d10c      	bne.n	800217e <PRL_Received+0xa6>
 8002164:	8a30      	ldrh	r0, [r6, #16]
 8002166:	f3c0 1140 	ubfx	r1, r0, #5, #1
 800216a:	f3c0 2200 	ubfx	r2, r0, #8, #1
 800216e:	f64f 60df 	movw	r0, #65247	@ 0xfedf
 8002172:	4005      	ands	r5, r0
 8002174:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
 8002178:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 800217c:	e002      	b.n	8002184 <PRL_Received+0xac>
 800217e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8002182:	4015      	ands	r5, r2
 8002184:	f24f 113f 	movw	r1, #61759	@ 0xf13f
 8002188:	400d      	ands	r5, r1
 800218a:	f404 6060 	and.w	r0, r4, #3584	@ 0xe00
 800218e:	4305      	orrs	r5, r0
 8002190:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
 8002194:	74b5      	strb	r5, [r6, #18]
 8002196:	4651      	mov	r1, sl
 8002198:	0a2d      	lsrs	r5, r5, #8
 800219a:	74f5      	strb	r5, [r6, #19]
 800219c:	4640      	mov	r0, r8
 800219e:	f7fe fba8 	bl	80008f2 <PE_PRL_PostReceiveEvent>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	f000 8116 	beq.w	80023d4 <.text_25>
 80021a8:	2001      	movs	r0, #1
 80021aa:	73b0      	strb	r0, [r6, #14]
 80021ac:	ea4f 0048 	mov.w	r0, r8, lsl #1
 80021b0:	b2c0      	uxtb	r0, r0
 80021b2:	f010 fadb 	bl	801276c <USBPD_TIM_IsExpired>
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d0f8      	beq.n	80021ac <PRL_Received+0xd4>
 80021ba:	2302      	movs	r3, #2
 80021bc:	f106 0212 	add.w	r2, r6, #18
 80021c0:	4651      	mov	r1, sl
 80021c2:	4640      	mov	r0, r8
 80021c4:	f00e ffd1 	bl	801116a <USBPD_PHY_SendMessage>
 80021c8:	9003      	str	r0, [sp, #12]
 80021ca:	f886 a008 	strb.w	sl, [r6, #8]
 80021ce:	4639      	mov	r1, r7
 80021d0:	4640      	mov	r0, r8
 80021d2:	f7fe fbc4 	bl	800095e <PE_PRL_PostReceiveEventCopy>
 80021d6:	78b8      	ldrb	r0, [r7, #2]
 80021d8:	78f9      	ldrb	r1, [r7, #3]
 80021da:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 80021de:	f8ad 2004 	strh.w	r2, [sp, #4]
 80021e2:	0420      	lsls	r0, r4, #16
 80021e4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80021e8:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80021ec:	0bc9      	lsrs	r1, r1, #15
 80021ee:	0fc0      	lsrs	r0, r0, #31
 80021f0:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80021f4:	f8ad 1006 	strh.w	r1, [sp, #6]
 80021f8:	d004      	beq.n	8002204 <PRL_Received+0x12c>
 80021fa:	0008      	movs	r0, r1
 80021fc:	d102      	bne.n	8002204 <PRL_Received+0x12c>
 80021fe:	1d29      	adds	r1, r5, #4
 8002200:	9100      	str	r1, [sp, #0]
 8002202:	e019      	b.n	8002238 <PRL_Received+0x160>
 8002204:	7830      	ldrb	r0, [r6, #0]
 8002206:	b9a8      	cbnz	r0, 8002234 <PRL_Received+0x15c>
 8002208:	f3c4 3002 	ubfx	r0, r4, #12, #3
 800220c:	b190      	cbz	r0, 8002234 <PRL_Received+0x15c>
 800220e:	f004 001f 	and.w	r0, r4, #31
 8002212:	2803      	cmp	r0, #3
 8002214:	d10e      	bne.n	8002234 <PRL_Received+0x15c>
 8002216:	78b8      	ldrb	r0, [r7, #2]
 8002218:	78f9      	ldrb	r1, [r7, #3]
 800221a:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 800221e:	7938      	ldrb	r0, [r7, #4]
 8002220:	7979      	ldrb	r1, [r7, #5]
 8002222:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 8002226:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 800222a:	0f12      	lsrs	r2, r2, #28
 800222c:	2a08      	cmp	r2, #8
 800222e:	bf04      	itt	eq
 8002230:	2001      	moveq	r0, #1
 8002232:	7030      	strbeq	r0, [r6, #0]
 8002234:	f000 f8e3 	bl	80023fe <.text_29>
 8002238:	463b      	mov	r3, r7
 800223a:	f8d9 7000 	ldr.w	r7, [r9]
 800223e:	4652      	mov	r2, sl
 8002240:	4641      	mov	r1, r8
 8002242:	2001      	movs	r0, #1
 8002244:	47b8      	blx	r7
 8002246:	9803      	ldr	r0, [sp, #12]
 8002248:	b948      	cbnz	r0, 800225e <PRL_Received+0x186>
 800224a:	2102      	movs	r1, #2
 800224c:	9100      	str	r1, [sp, #0]
 800224e:	f106 0312 	add.w	r3, r6, #18
 8002252:	f8d9 7000 	ldr.w	r7, [r9]
 8002256:	4652      	mov	r2, sl
 8002258:	4641      	mov	r1, r8
 800225a:	2002      	movs	r0, #2
 800225c:	47b8      	blx	r7
 800225e:	9802      	ldr	r0, [sp, #8]
 8002260:	7941      	ldrb	r1, [r0, #5]
 8002262:	f3c4 2042 	ubfx	r0, r4, #9, #3
 8002266:	4281      	cmp	r1, r0
 8002268:	bf04      	itt	eq
 800226a:	9803      	ldreq	r0, [sp, #12]
 800226c:	2800      	cmpeq	r0, #0
 800226e:	f000 809e 	beq.w	80023ae <PRL_Received+0x2d6>
 8002272:	0421      	lsls	r1, r4, #16
 8002274:	9a02      	ldr	r2, [sp, #8]
 8002276:	0e49      	lsrs	r1, r1, #25
 8002278:	f001 0107 	and.w	r1, r1, #7
 800227c:	7151      	strb	r1, [r2, #5]
 800227e:	0420      	lsls	r0, r4, #16
 8002280:	8374      	strh	r4, [r6, #26]
 8002282:	0fc0      	lsrs	r0, r0, #31
 8002284:	bf1c      	itt	ne
 8002286:	f8bd 0006 	ldrhne.w	r0, [sp, #6]
 800228a:	2800      	cmpne	r0, #0
 800228c:	d06b      	beq.n	8002366 <PRL_Received+0x28e>
 800228e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002292:	8330      	strh	r0, [r6, #24]
 8002294:	201a      	movs	r0, #26
 8002296:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800229a:	f411 4ff8 	tst.w	r1, #31744	@ 0x7c00
 800229e:	d139      	bne.n	8002314 <PRL_Received+0x23c>
 80022a0:	f3c4 3102 	ubfx	r1, r4, #12, #3
 80022a4:	2907      	cmp	r1, #7
 80022a6:	d301      	bcc.n	80022ac <PRL_Received+0x1d4>
 80022a8:	2d1a      	cmp	r5, #26
 80022aa:	d81e      	bhi.n	80022ea <PRL_Received+0x212>
 80022ac:	2100      	movs	r1, #0
 80022ae:	f106 072c 	add.w	r7, r6, #44	@ 0x2c
 80022b2:	e009      	b.n	80022c8 <PRL_Received+0x1f0>
 80022b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80022b8:	6a32      	ldr	r2, [r6, #32]
 80022ba:	f817 c001 	ldrb.w	ip, [r7, r1]
 80022be:	f000 f898 	bl	80023f2 <.text_28>
 80022c2:	f802 c003 	strb.w	ip, [r2, r3]
 80022c6:	b289      	uxth	r1, r1
 80022c8:	f000 f88d 	bl	80023e6 <.text_27>
 80022cc:	d3f2      	bcc.n	80022b4 <PRL_Received+0x1dc>
 80022ce:	f3c4 3002 	ubfx	r0, r4, #12, #3
 80022d2:	0080      	lsls	r0, r0, #2
 80022d4:	1e80      	subs	r0, r0, #2
 80022d6:	42a8      	cmp	r0, r5
 80022d8:	d204      	bcs.n	80022e4 <PRL_Received+0x20c>
 80022da:	f3c4 3002 	ubfx	r0, r4, #12, #3
 80022de:	0080      	lsls	r0, r0, #2
 80022e0:	1e80      	subs	r0, r0, #2
 80022e2:	e00e      	b.n	8002302 <PRL_Received+0x22a>
 80022e4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80022e6:	8005      	strh	r5, [r0, #0]
 80022e8:	e00d      	b.n	8002306 <PRL_Received+0x22e>
 80022ea:	2101      	movs	r1, #1
 80022ec:	77f1      	strb	r1, [r6, #31]
 80022ee:	2000      	movs	r0, #0
 80022f0:	f106 012c 	add.w	r1, r6, #44	@ 0x2c
 80022f4:	6a33      	ldr	r3, [r6, #32]
 80022f6:	5c0a      	ldrb	r2, [r1, r0]
 80022f8:	541a      	strb	r2, [r3, r0]
 80022fa:	1c40      	adds	r0, r0, #1
 80022fc:	281a      	cmp	r0, #26
 80022fe:	d3f9      	bcc.n	80022f4 <PRL_Received+0x21c>
 8002300:	201a      	movs	r0, #26
 8002302:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8002304:	8008      	strh	r0, [r1, #0]
 8002306:	4651      	mov	r1, sl
 8002308:	4640      	mov	r0, r8
 800230a:	b005      	add	sp, #20
 800230c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002310:	f7fe baef 	b.w	80008f2 <PE_PRL_PostReceiveEvent>
 8002314:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8002316:	8809      	ldrh	r1, [r1, #0]
 8002318:	f240 1205 	movw	r2, #261	@ 0x105
 800231c:	f101 031a 	add.w	r3, r1, #26
 8002320:	4293      	cmp	r3, r2
 8002322:	bf3f      	itttt	cc
 8002324:	f3c4 3302 	ubfxcc	r3, r4, #12, #3
 8002328:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 800232c:	1e89      	subcc	r1, r1, #2
 800232e:	42a9      	cmpcc	r1, r5
 8002330:	d21a      	bcs.n	8002368 <PRL_Received+0x290>
 8002332:	2101      	movs	r1, #1
 8002334:	77f1      	strb	r1, [r6, #31]
 8002336:	f106 052c 	add.w	r5, r6, #44	@ 0x2c
 800233a:	2100      	movs	r1, #0
 800233c:	e007      	b.n	800234e <PRL_Received+0x276>
 800233e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002342:	6a32      	ldr	r2, [r6, #32]
 8002344:	5c6f      	ldrb	r7, [r5, r1]
 8002346:	f000 f854 	bl	80023f2 <.text_28>
 800234a:	54d7      	strb	r7, [r2, r3]
 800234c:	b289      	uxth	r1, r1
 800234e:	f000 f84a 	bl	80023e6 <.text_27>
 8002352:	d3f4      	bcc.n	800233e <PRL_Received+0x266>
 8002354:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8002356:	880a      	ldrh	r2, [r1, #0]
 8002358:	0424      	lsls	r4, r4, #16
 800235a:	0ea4      	lsrs	r4, r4, #26
 800235c:	f004 041c 	and.w	r4, r4, #28
 8002360:	1ea0      	subs	r0, r4, #2
 8002362:	1882      	adds	r2, r0, r2
 8002364:	800a      	strh	r2, [r1, #0]
 8002366:	e035      	b.n	80023d4 <.text_25>
 8002368:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800236a:	880b      	ldrh	r3, [r1, #0]
 800236c:	f000 f835 	bl	80023da <.text_26>
 8002370:	4291      	cmp	r1, r2
 8002372:	d219      	bcs.n	80023a8 <PRL_Received+0x2d0>
 8002374:	f000 f831 	bl	80023da <.text_26>
 8002378:	42a9      	cmp	r1, r5
 800237a:	d315      	bcc.n	80023a8 <PRL_Received+0x2d0>
 800237c:	2201      	movs	r2, #1
 800237e:	77f2      	strb	r2, [r6, #31]
 8002380:	2100      	movs	r1, #0
 8002382:	f106 072c 	add.w	r7, r6, #44	@ 0x2c
 8002386:	e009      	b.n	800239c <PRL_Received+0x2c4>
 8002388:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800238c:	6a32      	ldr	r2, [r6, #32]
 800238e:	f817 a001 	ldrb.w	sl, [r7, r1]
 8002392:	f000 f82e 	bl	80023f2 <.text_28>
 8002396:	f802 a003 	strb.w	sl, [r2, r3]
 800239a:	b289      	uxth	r1, r1
 800239c:	f000 f823 	bl	80023e6 <.text_27>
 80023a0:	d3f2      	bcc.n	8002388 <PRL_Received+0x2b0>
 80023a2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80023a4:	8005      	strh	r5, [r0, #0]
 80023a6:	e015      	b.n	80023d4 <.text_25>
 80023a8:	2100      	movs	r1, #0
 80023aa:	77f1      	strb	r1, [r6, #31]
 80023ac:	e012      	b.n	80023d4 <.text_25>
 80023ae:	20ff      	movs	r0, #255	@ 0xff
 80023b0:	7230      	strb	r0, [r6, #8]
 80023b2:	2100      	movs	r1, #0
 80023b4:	73b1      	strb	r1, [r6, #14]
 80023b6:	4640      	mov	r0, r8
 80023b8:	f7fe fabb 	bl	8000932 <PE_PRL_PostReceiveEventError>
 80023bc:	2000      	movs	r0, #0
 80023be:	7270      	strb	r0, [r6, #9]
 80023c0:	2117      	movs	r1, #23
 80023c2:	9100      	str	r1, [sp, #0]
 80023c4:	f05f 0200 	movs.w	r2, #0
 80023c8:	a362      	add	r3, pc, #392	@ (adr r3, 8002554 <.text_39>)
 80023ca:	4641      	mov	r1, r8
 80023cc:	2006      	movs	r0, #6
 80023ce:	f8d9 8000 	ldr.w	r8, [r9]
 80023d2:	47c0      	blx	r8

080023d4 <.text_25>:
 80023d4:	b005      	add	sp, #20
 80023d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080023da <.text_26>:
 80023da:	f3c4 3102 	ubfx	r1, r4, #12, #3
 80023de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80023e2:	1e89      	subs	r1, r1, #2
 80023e4:	4770      	bx	lr

080023e6 <.text_27>:
 80023e6:	f3c4 3202 	ubfx	r2, r4, #12, #3
 80023ea:	0092      	lsls	r2, r2, #2
 80023ec:	1e92      	subs	r2, r2, #2
 80023ee:	4291      	cmp	r1, r2
 80023f0:	4770      	bx	lr

080023f2 <.text_28>:
 80023f2:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 80023f6:	fb10 1303 	smlabb	r3, r0, r3, r1
 80023fa:	1c49      	adds	r1, r1, #1
 80023fc:	4770      	bx	lr

080023fe <.text_29>:
 80023fe:	f3c4 3002 	ubfx	r0, r4, #12, #3
 8002402:	0080      	lsls	r0, r0, #2
 8002404:	1c80      	adds	r0, r0, #2
 8002406:	9000      	str	r0, [sp, #0]
 8002408:	4770      	bx	lr

0800240a <PRL_ResetIndicate>:
 800240a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800240e:	460d      	mov	r5, r1
 8002410:	2d05      	cmp	r5, #5
 8002412:	4604      	mov	r4, r0
 8002414:	d110      	bne.n	8002438 <PRL_ResetIndicate+0x2e>
 8002416:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 800254c <.text_37>
 800241a:	4627      	mov	r7, r4
 800241c:	f858 6027 	ldr.w	r6, [r8, r7, lsl #2]
 8002420:	2000      	movs	r0, #0
 8002422:	72b0      	strb	r0, [r6, #10]
 8002424:	f000 f817 	bl	8002456 <.text_31>
 8002428:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 800242c:	2200      	movs	r2, #0
 800242e:	7102      	strb	r2, [r0, #4]
 8002430:	7032      	strb	r2, [r6, #0]
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff fe4e 	bl	80020d4 <PRL_DisableRX>
 8002438:	2000      	movs	r0, #0
 800243a:	4e45      	ldr	r6, [pc, #276]	@ (8002550 <.text_38>)
 800243c:	6837      	ldr	r7, [r6, #0]
 800243e:	9000      	str	r0, [sp, #0]
 8002440:	2300      	movs	r3, #0
 8002442:	462a      	mov	r2, r5
 8002444:	4621      	mov	r1, r4
 8002446:	2001      	movs	r0, #1
 8002448:	47b8      	blx	r7
 800244a:	4629      	mov	r1, r5
 800244c:	4620      	mov	r0, r4
 800244e:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8002452:	f7fe b9a1 	b.w	8000798 <PE_PRL_ResetReceived>

08002456 <.text_31>:
 8002456:	220f      	movs	r2, #15
 8002458:	2103      	movs	r1, #3
 800245a:	1d70      	adds	r0, r6, #5
 800245c:	f000 b893 	b.w	8002586 <__aeabi_memset>

08002460 <PRL_ResetCompleted>:
 8002460:	4a3a      	ldr	r2, [pc, #232]	@ (800254c <.text_37>)
 8002462:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002466:	2101      	movs	r1, #1
 8002468:	7081      	strb	r1, [r0, #2]
 800246a:	4770      	bx	lr

0800246c <PRL_BistCompleted>:
 800246c:	f7fe b9bc 	b.w	80007e8 <PE_PRL_BistCompleted>

08002470 <PRL_TxCompleted>:
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	4a36      	ldr	r2, [pc, #216]	@ (800254c <.text_37>)
 8002474:	4604      	mov	r4, r0
 8002476:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 800247a:	7baa      	ldrb	r2, [r5, #14]
 800247c:	2a01      	cmp	r2, #1
 800247e:	d002      	beq.n	8002486 <PRL_TxCompleted+0x16>
 8002480:	2a02      	cmp	r2, #2
 8002482:	d009      	beq.n	8002498 <PRL_TxCompleted+0x28>
 8002484:	e010      	b.n	80024a8 <PRL_TxCompleted+0x38>
 8002486:	b911      	cbnz	r1, 800248e <PRL_TxCompleted+0x1e>
 8002488:	f7fe fa86 	bl	8000998 <PE_PRL_PostReceiveEventComplete>
 800248c:	e001      	b.n	8002492 <PRL_TxCompleted+0x22>
 800248e:	f7fe fa50 	bl	8000932 <PE_PRL_PostReceiveEventError>
 8002492:	2000      	movs	r0, #0
 8002494:	7268      	strb	r0, [r5, #9]
 8002496:	e007      	b.n	80024a8 <PRL_TxCompleted+0x38>
 8002498:	f00e fe30 	bl	80110fc <USBPD_PHY_GetRetryTimerValue>
 800249c:	0064      	lsls	r4, r4, #1
 800249e:	4601      	mov	r1, r0
 80024a0:	1c64      	adds	r4, r4, #1
 80024a2:	b2e0      	uxtb	r0, r4
 80024a4:	f010 f8f0 	bl	8012688 <USBPD_TIM_Start>
 80024a8:	2000      	movs	r0, #0
 80024aa:	73a8      	strb	r0, [r5, #14]
 80024ac:	bd31      	pop	{r0, r4, r5, pc}

080024ae <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80024ae:	b530      	push	{r4, r5, lr}
 80024b0:	4c26      	ldr	r4, [pc, #152]	@ (800254c <.text_37>)
 80024b2:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 80024b6:	8ae5      	ldrh	r5, [r4, #22]
 80024b8:	f248 30ff 	movw	r0, #33791	@ 0x83ff
 80024bc:	4005      	ands	r5, r0
 80024be:	8a20      	ldrh	r0, [r4, #16]
 80024c0:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
 80024c4:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 80024c8:	f405 457e 	and.w	r5, r5, #65024	@ 0xfe00
 80024cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024d0:	8220      	strh	r0, [r4, #16]
 80024d2:	432a      	orrs	r2, r5
 80024d4:	8b61      	ldrh	r1, [r4, #26]
 80024d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024da:	f361 0004 	bfi	r0, r1, #0, #5
 80024de:	82e2      	strh	r2, [r4, #22]
 80024e0:	8220      	strh	r0, [r4, #16]
 80024e2:	7018      	strb	r0, [r3, #0]
 80024e4:	8a20      	ldrh	r0, [r4, #16]
 80024e6:	0a00      	lsrs	r0, r0, #8
 80024e8:	7058      	strb	r0, [r3, #1]
 80024ea:	8ae0      	ldrh	r0, [r4, #22]
 80024ec:	7098      	strb	r0, [r3, #2]
 80024ee:	8ae1      	ldrh	r1, [r4, #22]
 80024f0:	0a09      	lsrs	r1, r1, #8
 80024f2:	70d9      	strb	r1, [r3, #3]
 80024f4:	bd30      	pop	{r4, r5, pc}

080024f6 <USBPD_PRL_PrepareChunkRequest>:
 80024f6:	b530      	push	{r4, r5, lr}
 80024f8:	4a14      	ldr	r2, [pc, #80]	@ (800254c <.text_37>)
 80024fa:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80024fe:	8adc      	ldrh	r4, [r3, #22]
 8002500:	8b1d      	ldrh	r5, [r3, #24]
 8002502:	f444 4404 	orr.w	r4, r4, #33792	@ 0x8400
 8002506:	0aed      	lsrs	r5, r5, #11
 8002508:	82dc      	strh	r4, [r3, #22]
 800250a:	1c6d      	adds	r5, r5, #1
 800250c:	02ed      	lsls	r5, r5, #11
 800250e:	f404 4406 	and.w	r4, r4, #34304	@ 0x8600
 8002512:	f405 45f0 	and.w	r5, r5, #30720	@ 0x7800
 8002516:	432c      	orrs	r4, r5
 8002518:	82dc      	strh	r4, [r3, #22]
 800251a:	8a1c      	ldrh	r4, [r3, #16]
 800251c:	8b5d      	ldrh	r5, [r3, #26]
 800251e:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 8002522:	821c      	strh	r4, [r3, #16]
 8002524:	f365 0404 	bfi	r4, r5, #0, #5
 8002528:	821c      	strh	r4, [r3, #16]
 800252a:	2400      	movs	r4, #0
 800252c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002530:	7104      	strb	r4, [r0, #4]
 8002532:	8a1a      	ldrh	r2, [r3, #16]
 8002534:	700a      	strb	r2, [r1, #0]
 8002536:	8a18      	ldrh	r0, [r3, #16]
 8002538:	0a00      	lsrs	r0, r0, #8
 800253a:	7048      	strb	r0, [r1, #1]
 800253c:	8ad8      	ldrh	r0, [r3, #22]
 800253e:	7088      	strb	r0, [r1, #2]
 8002540:	8ada      	ldrh	r2, [r3, #22]
 8002542:	710c      	strb	r4, [r1, #4]
 8002544:	0a12      	lsrs	r2, r2, #8
 8002546:	714c      	strb	r4, [r1, #5]
 8002548:	70ca      	strb	r2, [r1, #3]
 800254a:	bd30      	pop	{r4, r5, pc}

0800254c <.text_37>:
 800254c:	20000518 	.word	0x20000518

08002550 <.text_38>:
 8002550:	20000000 	.word	0x20000000

08002554 <.text_39>:
 8002554:	5f4c5250 	.word	0x5f4c5250
 8002558:	4e455645 	.word	0x4e455645
 800255c:	58525f54 	.word	0x58525f54
 8002560:	5349445f 	.word	0x5349445f
 8002564:	44524143 	.word	0x44524143
 8002568:	00004445 	.word	0x00004445

0800256c <USBPD_PRL_Init::PRL_PhyCallbacks>:
 800256c:	080020d9 0800240b 08002461 0800246d     . ...$..a$..m$..
 800257c:	08002471 00000000                       q$......

08002584 <.text_41>:
 8002584:	0001      	.short	0x0001

08002586 <__aeabi_memset>:
 8002586:	b470      	push	{r4, r5, r6}
 8002588:	0784      	lsls	r4, r0, #30
 800258a:	d046      	beq.n	800261a <__aeabi_memset+0x94>
 800258c:	1e4c      	subs	r4, r1, #1
 800258e:	2900      	cmp	r1, #0
 8002590:	d041      	beq.n	8002616 <__aeabi_memset+0x90>
 8002592:	b2d5      	uxtb	r5, r2
 8002594:	4603      	mov	r3, r0
 8002596:	e002      	b.n	800259e <__aeabi_memset+0x18>
 8002598:	1e61      	subs	r1, r4, #1
 800259a:	b3e4      	cbz	r4, 8002616 <__aeabi_memset+0x90>
 800259c:	460c      	mov	r4, r1
 800259e:	f803 5b01 	strb.w	r5, [r3], #1
 80025a2:	0799      	lsls	r1, r3, #30
 80025a4:	d1f8      	bne.n	8002598 <__aeabi_memset+0x12>
 80025a6:	2c03      	cmp	r4, #3
 80025a8:	d92e      	bls.n	8002608 <__aeabi_memset+0x82>
 80025aa:	b2d5      	uxtb	r5, r2
 80025ac:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80025b0:	2c0f      	cmp	r4, #15
 80025b2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80025b6:	d919      	bls.n	80025ec <__aeabi_memset+0x66>
 80025b8:	4626      	mov	r6, r4
 80025ba:	f103 0110 	add.w	r1, r3, #16
 80025be:	3e10      	subs	r6, #16
 80025c0:	2e0f      	cmp	r6, #15
 80025c2:	f841 5c10 	str.w	r5, [r1, #-16]
 80025c6:	f841 5c0c 	str.w	r5, [r1, #-12]
 80025ca:	f841 5c08 	str.w	r5, [r1, #-8]
 80025ce:	f841 5c04 	str.w	r5, [r1, #-4]
 80025d2:	f101 0110 	add.w	r1, r1, #16
 80025d6:	d8f2      	bhi.n	80025be <__aeabi_memset+0x38>
 80025d8:	f1a4 0110 	sub.w	r1, r4, #16
 80025dc:	f021 010f 	bic.w	r1, r1, #15
 80025e0:	f004 040f 	and.w	r4, r4, #15
 80025e4:	3110      	adds	r1, #16
 80025e6:	2c03      	cmp	r4, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	d90d      	bls.n	8002608 <__aeabi_memset+0x82>
 80025ec:	461e      	mov	r6, r3
 80025ee:	4621      	mov	r1, r4
 80025f0:	3904      	subs	r1, #4
 80025f2:	2903      	cmp	r1, #3
 80025f4:	f846 5b04 	str.w	r5, [r6], #4
 80025f8:	d8fa      	bhi.n	80025f0 <__aeabi_memset+0x6a>
 80025fa:	1f21      	subs	r1, r4, #4
 80025fc:	f021 0103 	bic.w	r1, r1, #3
 8002600:	3104      	adds	r1, #4
 8002602:	440b      	add	r3, r1
 8002604:	f004 0403 	and.w	r4, r4, #3
 8002608:	b12c      	cbz	r4, 8002616 <__aeabi_memset+0x90>
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	441c      	add	r4, r3
 800260e:	f803 2b01 	strb.w	r2, [r3], #1
 8002612:	42a3      	cmp	r3, r4
 8002614:	d1fb      	bne.n	800260e <__aeabi_memset+0x88>
 8002616:	bc70      	pop	{r4, r5, r6}
 8002618:	4770      	bx	lr
 800261a:	460c      	mov	r4, r1
 800261c:	4603      	mov	r3, r0
 800261e:	e7c2      	b.n	80025a6 <__aeabi_memset+0x20>

08002620 <memchr>:
 8002620:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8002624:	2a10      	cmp	r2, #16
 8002626:	db2b      	blt.n	8002680 <memchr+0x60>
 8002628:	f010 0f07 	tst.w	r0, #7
 800262c:	d008      	beq.n	8002640 <memchr+0x20>
 800262e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002632:	3a01      	subs	r2, #1
 8002634:	428b      	cmp	r3, r1
 8002636:	d02d      	beq.n	8002694 <memchr+0x74>
 8002638:	f010 0f07 	tst.w	r0, #7
 800263c:	b342      	cbz	r2, 8002690 <memchr+0x70>
 800263e:	d1f6      	bne.n	800262e <memchr+0xe>
 8002640:	b4f0      	push	{r4, r5, r6, r7}
 8002642:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002646:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800264a:	f022 0407 	bic.w	r4, r2, #7
 800264e:	f07f 0700 	mvns.w	r7, #0
 8002652:	2300      	movs	r3, #0
 8002654:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002658:	3c08      	subs	r4, #8
 800265a:	ea85 0501 	eor.w	r5, r5, r1
 800265e:	ea86 0601 	eor.w	r6, r6, r1
 8002662:	fa85 f547 	uadd8	r5, r5, r7
 8002666:	faa3 f587 	sel	r5, r3, r7
 800266a:	fa86 f647 	uadd8	r6, r6, r7
 800266e:	faa5 f687 	sel	r6, r5, r7
 8002672:	b98e      	cbnz	r6, 8002698 <memchr+0x78>
 8002674:	d1ee      	bne.n	8002654 <memchr+0x34>
 8002676:	bcf0      	pop	{r4, r5, r6, r7}
 8002678:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800267c:	f002 0207 	and.w	r2, r2, #7
 8002680:	b132      	cbz	r2, 8002690 <memchr+0x70>
 8002682:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002686:	3a01      	subs	r2, #1
 8002688:	ea83 0301 	eor.w	r3, r3, r1
 800268c:	b113      	cbz	r3, 8002694 <memchr+0x74>
 800268e:	d1f8      	bne.n	8002682 <memchr+0x62>
 8002690:	2000      	movs	r0, #0
 8002692:	4770      	bx	lr
 8002694:	3801      	subs	r0, #1
 8002696:	4770      	bx	lr
 8002698:	2d00      	cmp	r5, #0
 800269a:	bf06      	itte	eq
 800269c:	4635      	moveq	r5, r6
 800269e:	3803      	subeq	r0, #3
 80026a0:	3807      	subne	r0, #7
 80026a2:	f015 0f01 	tst.w	r5, #1
 80026a6:	d107      	bne.n	80026b8 <memchr+0x98>
 80026a8:	3001      	adds	r0, #1
 80026aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80026ae:	bf02      	ittt	eq
 80026b0:	3001      	addeq	r0, #1
 80026b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80026b6:	3001      	addeq	r0, #1
 80026b8:	bcf0      	pop	{r4, r5, r6, r7}
 80026ba:	3801      	subs	r0, #1
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop

080026c0 <strlen>:
 80026c0:	4603      	mov	r3, r0
 80026c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026c6:	2a00      	cmp	r2, #0
 80026c8:	d1fb      	bne.n	80026c2 <strlen+0x2>
 80026ca:	1a18      	subs	r0, r3, r0
 80026cc:	3801      	subs	r0, #1
 80026ce:	4770      	bx	lr

080026d0 <strcmp>:
 80026d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026d8:	2a01      	cmp	r2, #1
 80026da:	bf28      	it	cs
 80026dc:	429a      	cmpcs	r2, r3
 80026de:	d0f7      	beq.n	80026d0 <strcmp>
 80026e0:	1ad0      	subs	r0, r2, r3
 80026e2:	4770      	bx	lr

080026e4 <__aeabi_drsub>:
 80026e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80026e8:	e002      	b.n	80026f0 <__adddf3>
 80026ea:	bf00      	nop

080026ec <__aeabi_dsub>:
 80026ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080026f0 <__adddf3>:
 80026f0:	b530      	push	{r4, r5, lr}
 80026f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80026f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80026fa:	ea94 0f05 	teq	r4, r5
 80026fe:	bf08      	it	eq
 8002700:	ea90 0f02 	teqeq	r0, r2
 8002704:	bf1f      	itttt	ne
 8002706:	ea54 0c00 	orrsne.w	ip, r4, r0
 800270a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800270e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002712:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002716:	f000 80e2 	beq.w	80028de <__adddf3+0x1ee>
 800271a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800271e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002722:	bfb8      	it	lt
 8002724:	426d      	neglt	r5, r5
 8002726:	dd0c      	ble.n	8002742 <__adddf3+0x52>
 8002728:	442c      	add	r4, r5
 800272a:	ea80 0202 	eor.w	r2, r0, r2
 800272e:	ea81 0303 	eor.w	r3, r1, r3
 8002732:	ea82 0000 	eor.w	r0, r2, r0
 8002736:	ea83 0101 	eor.w	r1, r3, r1
 800273a:	ea80 0202 	eor.w	r2, r0, r2
 800273e:	ea81 0303 	eor.w	r3, r1, r3
 8002742:	2d36      	cmp	r5, #54	@ 0x36
 8002744:	bf88      	it	hi
 8002746:	bd30      	pophi	{r4, r5, pc}
 8002748:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800274c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002750:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8002754:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002758:	d002      	beq.n	8002760 <__adddf3+0x70>
 800275a:	4240      	negs	r0, r0
 800275c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002760:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8002764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002768:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800276c:	d002      	beq.n	8002774 <__adddf3+0x84>
 800276e:	4252      	negs	r2, r2
 8002770:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002774:	ea94 0f05 	teq	r4, r5
 8002778:	f000 80a7 	beq.w	80028ca <__adddf3+0x1da>
 800277c:	f1a4 0401 	sub.w	r4, r4, #1
 8002780:	f1d5 0e20 	rsbs	lr, r5, #32
 8002784:	db0d      	blt.n	80027a2 <__adddf3+0xb2>
 8002786:	fa02 fc0e 	lsl.w	ip, r2, lr
 800278a:	fa22 f205 	lsr.w	r2, r2, r5
 800278e:	1880      	adds	r0, r0, r2
 8002790:	f141 0100 	adc.w	r1, r1, #0
 8002794:	fa03 f20e 	lsl.w	r2, r3, lr
 8002798:	1880      	adds	r0, r0, r2
 800279a:	fa43 f305 	asr.w	r3, r3, r5
 800279e:	4159      	adcs	r1, r3
 80027a0:	e00e      	b.n	80027c0 <__adddf3+0xd0>
 80027a2:	f1a5 0520 	sub.w	r5, r5, #32
 80027a6:	f10e 0e20 	add.w	lr, lr, #32
 80027aa:	2a01      	cmp	r2, #1
 80027ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80027b0:	bf28      	it	cs
 80027b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80027b6:	fa43 f305 	asr.w	r3, r3, r5
 80027ba:	18c0      	adds	r0, r0, r3
 80027bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80027c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80027c4:	d507      	bpl.n	80027d6 <__adddf3+0xe6>
 80027c6:	f04f 0e00 	mov.w	lr, #0
 80027ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80027ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80027d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80027d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80027da:	d31b      	bcc.n	8002814 <__adddf3+0x124>
 80027dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80027e0:	d30c      	bcc.n	80027fc <__adddf3+0x10c>
 80027e2:	0849      	lsrs	r1, r1, #1
 80027e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80027e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80027ec:	f104 0401 	add.w	r4, r4, #1
 80027f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80027f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80027f8:	f080 809a 	bcs.w	8002930 <__adddf3+0x240>
 80027fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8002800:	bf08      	it	eq
 8002802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002806:	f150 0000 	adcs.w	r0, r0, #0
 800280a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800280e:	ea41 0105 	orr.w	r1, r1, r5
 8002812:	bd30      	pop	{r4, r5, pc}
 8002814:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002818:	4140      	adcs	r0, r0
 800281a:	eb41 0101 	adc.w	r1, r1, r1
 800281e:	3c01      	subs	r4, #1
 8002820:	bf28      	it	cs
 8002822:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8002826:	d2e9      	bcs.n	80027fc <__adddf3+0x10c>
 8002828:	f091 0f00 	teq	r1, #0
 800282c:	bf04      	itt	eq
 800282e:	4601      	moveq	r1, r0
 8002830:	2000      	moveq	r0, #0
 8002832:	fab1 f381 	clz	r3, r1
 8002836:	bf08      	it	eq
 8002838:	3320      	addeq	r3, #32
 800283a:	f1a3 030b 	sub.w	r3, r3, #11
 800283e:	f1b3 0220 	subs.w	r2, r3, #32
 8002842:	da0c      	bge.n	800285e <__adddf3+0x16e>
 8002844:	320c      	adds	r2, #12
 8002846:	dd08      	ble.n	800285a <__adddf3+0x16a>
 8002848:	f102 0c14 	add.w	ip, r2, #20
 800284c:	f1c2 020c 	rsb	r2, r2, #12
 8002850:	fa01 f00c 	lsl.w	r0, r1, ip
 8002854:	fa21 f102 	lsr.w	r1, r1, r2
 8002858:	e00c      	b.n	8002874 <__adddf3+0x184>
 800285a:	f102 0214 	add.w	r2, r2, #20
 800285e:	bfd8      	it	le
 8002860:	f1c2 0c20 	rsble	ip, r2, #32
 8002864:	fa01 f102 	lsl.w	r1, r1, r2
 8002868:	fa20 fc0c 	lsr.w	ip, r0, ip
 800286c:	bfdc      	itt	le
 800286e:	ea41 010c 	orrle.w	r1, r1, ip
 8002872:	4090      	lslle	r0, r2
 8002874:	1ae4      	subs	r4, r4, r3
 8002876:	bfa2      	ittt	ge
 8002878:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800287c:	4329      	orrge	r1, r5
 800287e:	bd30      	popge	{r4, r5, pc}
 8002880:	ea6f 0404 	mvn.w	r4, r4
 8002884:	3c1f      	subs	r4, #31
 8002886:	da1c      	bge.n	80028c2 <__adddf3+0x1d2>
 8002888:	340c      	adds	r4, #12
 800288a:	dc0e      	bgt.n	80028aa <__adddf3+0x1ba>
 800288c:	f104 0414 	add.w	r4, r4, #20
 8002890:	f1c4 0220 	rsb	r2, r4, #32
 8002894:	fa20 f004 	lsr.w	r0, r0, r4
 8002898:	fa01 f302 	lsl.w	r3, r1, r2
 800289c:	ea40 0003 	orr.w	r0, r0, r3
 80028a0:	fa21 f304 	lsr.w	r3, r1, r4
 80028a4:	ea45 0103 	orr.w	r1, r5, r3
 80028a8:	bd30      	pop	{r4, r5, pc}
 80028aa:	f1c4 040c 	rsb	r4, r4, #12
 80028ae:	f1c4 0220 	rsb	r2, r4, #32
 80028b2:	fa20 f002 	lsr.w	r0, r0, r2
 80028b6:	fa01 f304 	lsl.w	r3, r1, r4
 80028ba:	ea40 0003 	orr.w	r0, r0, r3
 80028be:	4629      	mov	r1, r5
 80028c0:	bd30      	pop	{r4, r5, pc}
 80028c2:	fa21 f004 	lsr.w	r0, r1, r4
 80028c6:	4629      	mov	r1, r5
 80028c8:	bd30      	pop	{r4, r5, pc}
 80028ca:	f094 0f00 	teq	r4, #0
 80028ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80028d2:	bf06      	itte	eq
 80028d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80028d8:	3401      	addeq	r4, #1
 80028da:	3d01      	subne	r5, #1
 80028dc:	e74e      	b.n	800277c <__adddf3+0x8c>
 80028de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80028e2:	bf18      	it	ne
 80028e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80028e8:	d029      	beq.n	800293e <__adddf3+0x24e>
 80028ea:	ea94 0f05 	teq	r4, r5
 80028ee:	bf08      	it	eq
 80028f0:	ea90 0f02 	teqeq	r0, r2
 80028f4:	d005      	beq.n	8002902 <__adddf3+0x212>
 80028f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80028fa:	bf04      	itt	eq
 80028fc:	4619      	moveq	r1, r3
 80028fe:	4610      	moveq	r0, r2
 8002900:	bd30      	pop	{r4, r5, pc}
 8002902:	ea91 0f03 	teq	r1, r3
 8002906:	bf1e      	ittt	ne
 8002908:	2100      	movne	r1, #0
 800290a:	2000      	movne	r0, #0
 800290c:	bd30      	popne	{r4, r5, pc}
 800290e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002912:	d105      	bne.n	8002920 <__adddf3+0x230>
 8002914:	0040      	lsls	r0, r0, #1
 8002916:	4149      	adcs	r1, r1
 8002918:	bf28      	it	cs
 800291a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800291e:	bd30      	pop	{r4, r5, pc}
 8002920:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8002924:	bf3c      	itt	cc
 8002926:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800292a:	bd30      	popcc	{r4, r5, pc}
 800292c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8002930:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8002934:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002938:	f04f 0000 	mov.w	r0, #0
 800293c:	bd30      	pop	{r4, r5, pc}
 800293e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002942:	bf1a      	itte	ne
 8002944:	4619      	movne	r1, r3
 8002946:	4610      	movne	r0, r2
 8002948:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800294c:	bf1c      	itt	ne
 800294e:	460b      	movne	r3, r1
 8002950:	4602      	movne	r2, r0
 8002952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002956:	bf06      	itte	eq
 8002958:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800295c:	ea91 0f03 	teqeq	r1, r3
 8002960:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8002964:	bd30      	pop	{r4, r5, pc}
 8002966:	bf00      	nop

08002968 <__aeabi_ui2d>:
 8002968:	f090 0f00 	teq	r0, #0
 800296c:	bf04      	itt	eq
 800296e:	2100      	moveq	r1, #0
 8002970:	4770      	bxeq	lr
 8002972:	b530      	push	{r4, r5, lr}
 8002974:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002978:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800297c:	f04f 0500 	mov.w	r5, #0
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	e750      	b.n	8002828 <__adddf3+0x138>
 8002986:	bf00      	nop

08002988 <__aeabi_i2d>:
 8002988:	f090 0f00 	teq	r0, #0
 800298c:	bf04      	itt	eq
 800298e:	2100      	moveq	r1, #0
 8002990:	4770      	bxeq	lr
 8002992:	b530      	push	{r4, r5, lr}
 8002994:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002998:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800299c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80029a0:	bf48      	it	mi
 80029a2:	4240      	negmi	r0, r0
 80029a4:	f04f 0100 	mov.w	r1, #0
 80029a8:	e73e      	b.n	8002828 <__adddf3+0x138>
 80029aa:	bf00      	nop

080029ac <__aeabi_f2d>:
 80029ac:	0042      	lsls	r2, r0, #1
 80029ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80029b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80029b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80029ba:	bf1f      	itttt	ne
 80029bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80029c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80029c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80029c8:	4770      	bxne	lr
 80029ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80029ce:	bf08      	it	eq
 80029d0:	4770      	bxeq	lr
 80029d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80029d6:	bf04      	itt	eq
 80029d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80029dc:	4770      	bxeq	lr
 80029de:	b530      	push	{r4, r5, lr}
 80029e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80029e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80029e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80029ec:	e71c      	b.n	8002828 <__adddf3+0x138>
 80029ee:	bf00      	nop

080029f0 <__aeabi_ul2d>:
 80029f0:	ea50 0201 	orrs.w	r2, r0, r1
 80029f4:	bf08      	it	eq
 80029f6:	4770      	bxeq	lr
 80029f8:	b530      	push	{r4, r5, lr}
 80029fa:	f04f 0500 	mov.w	r5, #0
 80029fe:	e00a      	b.n	8002a16 <__aeabi_l2d+0x16>

08002a00 <__aeabi_l2d>:
 8002a00:	ea50 0201 	orrs.w	r2, r0, r1
 8002a04:	bf08      	it	eq
 8002a06:	4770      	bxeq	lr
 8002a08:	b530      	push	{r4, r5, lr}
 8002a0a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8002a0e:	d502      	bpl.n	8002a16 <__aeabi_l2d+0x16>
 8002a10:	4240      	negs	r0, r0
 8002a12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002a16:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002a1a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8002a1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002a22:	f43f aed8 	beq.w	80027d6 <__adddf3+0xe6>
 8002a26:	f04f 0203 	mov.w	r2, #3
 8002a2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002a2e:	bf18      	it	ne
 8002a30:	3203      	addne	r2, #3
 8002a32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002a36:	bf18      	it	ne
 8002a38:	3203      	addne	r2, #3
 8002a3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002a3e:	f1c2 0320 	rsb	r3, r2, #32
 8002a42:	fa00 fc03 	lsl.w	ip, r0, r3
 8002a46:	fa20 f002 	lsr.w	r0, r0, r2
 8002a4a:	fa01 fe03 	lsl.w	lr, r1, r3
 8002a4e:	ea40 000e 	orr.w	r0, r0, lr
 8002a52:	fa21 f102 	lsr.w	r1, r1, r2
 8002a56:	4414      	add	r4, r2
 8002a58:	e6bd      	b.n	80027d6 <__adddf3+0xe6>
 8002a5a:	bf00      	nop

08002a5c <__aeabi_dmul>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8002a62:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8002a66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002a6a:	bf1d      	ittte	ne
 8002a6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002a70:	ea94 0f0c 	teqne	r4, ip
 8002a74:	ea95 0f0c 	teqne	r5, ip
 8002a78:	f000 f8de 	bleq	8002c38 <__aeabi_dmul+0x1dc>
 8002a7c:	442c      	add	r4, r5
 8002a7e:	ea81 0603 	eor.w	r6, r1, r3
 8002a82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002a86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002a8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002a8e:	bf18      	it	ne
 8002a90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002a94:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002a98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a9c:	d038      	beq.n	8002b10 <__aeabi_dmul+0xb4>
 8002a9e:	fba0 ce02 	umull	ip, lr, r0, r2
 8002aa2:	f04f 0500 	mov.w	r5, #0
 8002aa6:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002aaa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8002aae:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002ab2:	f04f 0600 	mov.w	r6, #0
 8002ab6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002aba:	f09c 0f00 	teq	ip, #0
 8002abe:	bf18      	it	ne
 8002ac0:	f04e 0e01 	orrne.w	lr, lr, #1
 8002ac4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8002ac8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8002acc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8002ad0:	d204      	bcs.n	8002adc <__aeabi_dmul+0x80>
 8002ad2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002ad6:	416d      	adcs	r5, r5
 8002ad8:	eb46 0606 	adc.w	r6, r6, r6
 8002adc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002ae0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002ae4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002ae8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002aec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002af0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8002af4:	bf88      	it	hi
 8002af6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8002afa:	d81e      	bhi.n	8002b3a <__aeabi_dmul+0xde>
 8002afc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8002b00:	bf08      	it	eq
 8002b02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002b06:	f150 0000 	adcs.w	r0, r0, #0
 8002b0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8002b14:	ea46 0101 	orr.w	r1, r6, r1
 8002b18:	ea40 0002 	orr.w	r0, r0, r2
 8002b1c:	ea81 0103 	eor.w	r1, r1, r3
 8002b20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002b24:	bfc2      	ittt	gt
 8002b26:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002b2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002b2e:	bd70      	popgt	{r4, r5, r6, pc}
 8002b30:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002b34:	f04f 0e00 	mov.w	lr, #0
 8002b38:	3c01      	subs	r4, #1
 8002b3a:	f300 80ab 	bgt.w	8002c94 <__aeabi_dmul+0x238>
 8002b3e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8002b42:	bfde      	ittt	le
 8002b44:	2000      	movle	r0, #0
 8002b46:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8002b4a:	bd70      	pople	{r4, r5, r6, pc}
 8002b4c:	f1c4 0400 	rsb	r4, r4, #0
 8002b50:	3c20      	subs	r4, #32
 8002b52:	da35      	bge.n	8002bc0 <__aeabi_dmul+0x164>
 8002b54:	340c      	adds	r4, #12
 8002b56:	dc1b      	bgt.n	8002b90 <__aeabi_dmul+0x134>
 8002b58:	f104 0414 	add.w	r4, r4, #20
 8002b5c:	f1c4 0520 	rsb	r5, r4, #32
 8002b60:	fa00 f305 	lsl.w	r3, r0, r5
 8002b64:	fa20 f004 	lsr.w	r0, r0, r4
 8002b68:	fa01 f205 	lsl.w	r2, r1, r5
 8002b6c:	ea40 0002 	orr.w	r0, r0, r2
 8002b70:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8002b74:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002b78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002b7c:	fa21 f604 	lsr.w	r6, r1, r4
 8002b80:	eb42 0106 	adc.w	r1, r2, r6
 8002b84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002b88:	bf08      	it	eq
 8002b8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
 8002b90:	f1c4 040c 	rsb	r4, r4, #12
 8002b94:	f1c4 0520 	rsb	r5, r4, #32
 8002b98:	fa00 f304 	lsl.w	r3, r0, r4
 8002b9c:	fa20 f005 	lsr.w	r0, r0, r5
 8002ba0:	fa01 f204 	lsl.w	r2, r1, r4
 8002ba4:	ea40 0002 	orr.w	r0, r0, r2
 8002ba8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002bb0:	f141 0100 	adc.w	r1, r1, #0
 8002bb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002bb8:	bf08      	it	eq
 8002bba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002bbe:	bd70      	pop	{r4, r5, r6, pc}
 8002bc0:	f1c4 0520 	rsb	r5, r4, #32
 8002bc4:	fa00 f205 	lsl.w	r2, r0, r5
 8002bc8:	ea4e 0e02 	orr.w	lr, lr, r2
 8002bcc:	fa20 f304 	lsr.w	r3, r0, r4
 8002bd0:	fa01 f205 	lsl.w	r2, r1, r5
 8002bd4:	ea43 0302 	orr.w	r3, r3, r2
 8002bd8:	fa21 f004 	lsr.w	r0, r1, r4
 8002bdc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002be0:	fa21 f204 	lsr.w	r2, r1, r4
 8002be4:	ea20 0002 	bic.w	r0, r0, r2
 8002be8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002bec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002bf0:	bf08      	it	eq
 8002bf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
 8002bf8:	f094 0f00 	teq	r4, #0
 8002bfc:	d10f      	bne.n	8002c1e <__aeabi_dmul+0x1c2>
 8002bfe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8002c02:	0040      	lsls	r0, r0, #1
 8002c04:	eb41 0101 	adc.w	r1, r1, r1
 8002c08:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002c0c:	bf08      	it	eq
 8002c0e:	3c01      	subeq	r4, #1
 8002c10:	d0f7      	beq.n	8002c02 <__aeabi_dmul+0x1a6>
 8002c12:	ea41 0106 	orr.w	r1, r1, r6
 8002c16:	f095 0f00 	teq	r5, #0
 8002c1a:	bf18      	it	ne
 8002c1c:	4770      	bxne	lr
 8002c1e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8002c22:	0052      	lsls	r2, r2, #1
 8002c24:	eb43 0303 	adc.w	r3, r3, r3
 8002c28:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002c2c:	bf08      	it	eq
 8002c2e:	3d01      	subeq	r5, #1
 8002c30:	d0f7      	beq.n	8002c22 <__aeabi_dmul+0x1c6>
 8002c32:	ea43 0306 	orr.w	r3, r3, r6
 8002c36:	4770      	bx	lr
 8002c38:	ea94 0f0c 	teq	r4, ip
 8002c3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002c40:	bf18      	it	ne
 8002c42:	ea95 0f0c 	teqne	r5, ip
 8002c46:	d00c      	beq.n	8002c62 <__aeabi_dmul+0x206>
 8002c48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002c4c:	bf18      	it	ne
 8002c4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002c52:	d1d1      	bne.n	8002bf8 <__aeabi_dmul+0x19c>
 8002c54:	ea81 0103 	eor.w	r1, r1, r3
 8002c58:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002c5c:	f04f 0000 	mov.w	r0, #0
 8002c60:	bd70      	pop	{r4, r5, r6, pc}
 8002c62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002c66:	bf06      	itte	eq
 8002c68:	4610      	moveq	r0, r2
 8002c6a:	4619      	moveq	r1, r3
 8002c6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002c70:	d019      	beq.n	8002ca6 <__aeabi_dmul+0x24a>
 8002c72:	ea94 0f0c 	teq	r4, ip
 8002c76:	d102      	bne.n	8002c7e <__aeabi_dmul+0x222>
 8002c78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002c7c:	d113      	bne.n	8002ca6 <__aeabi_dmul+0x24a>
 8002c7e:	ea95 0f0c 	teq	r5, ip
 8002c82:	d105      	bne.n	8002c90 <__aeabi_dmul+0x234>
 8002c84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002c88:	bf1c      	itt	ne
 8002c8a:	4610      	movne	r0, r2
 8002c8c:	4619      	movne	r1, r3
 8002c8e:	d10a      	bne.n	8002ca6 <__aeabi_dmul+0x24a>
 8002c90:	ea81 0103 	eor.w	r1, r1, r3
 8002c94:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002c98:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8002c9c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002ca0:	f04f 0000 	mov.w	r0, #0
 8002ca4:	bd70      	pop	{r4, r5, r6, pc}
 8002ca6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8002caa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8002cae:	bd70      	pop	{r4, r5, r6, pc}

08002cb0 <__aeabi_ddiv>:
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8002cb6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8002cba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002cbe:	bf1d      	ittte	ne
 8002cc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002cc4:	ea94 0f0c 	teqne	r4, ip
 8002cc8:	ea95 0f0c 	teqne	r5, ip
 8002ccc:	f000 f8a7 	bleq	8002e1e <__aeabi_ddiv+0x16e>
 8002cd0:	eba4 0405 	sub.w	r4, r4, r5
 8002cd4:	ea81 0e03 	eor.w	lr, r1, r3
 8002cd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002cdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002ce0:	f000 8088 	beq.w	8002df4 <__aeabi_ddiv+0x144>
 8002ce4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002ce8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8002cec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002cf0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002cf4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002cf8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002cfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002d00:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002d04:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8002d08:	429d      	cmp	r5, r3
 8002d0a:	bf08      	it	eq
 8002d0c:	4296      	cmpeq	r6, r2
 8002d0e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8002d12:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8002d16:	d202      	bcs.n	8002d1e <__aeabi_ddiv+0x6e>
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d1e:	1ab6      	subs	r6, r6, r2
 8002d20:	eb65 0503 	sbc.w	r5, r5, r3
 8002d24:	085b      	lsrs	r3, r3, #1
 8002d26:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d2a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002d2e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8002d32:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d3a:	bf22      	ittt	cs
 8002d3c:	1ab6      	subcs	r6, r6, r2
 8002d3e:	4675      	movcs	r5, lr
 8002d40:	ea40 000c 	orrcs.w	r0, r0, ip
 8002d44:	085b      	lsrs	r3, r3, #1
 8002d46:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d52:	bf22      	ittt	cs
 8002d54:	1ab6      	subcs	r6, r6, r2
 8002d56:	4675      	movcs	r5, lr
 8002d58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d62:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d66:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d6a:	bf22      	ittt	cs
 8002d6c:	1ab6      	subcs	r6, r6, r2
 8002d6e:	4675      	movcs	r5, lr
 8002d70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d7a:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d82:	bf22      	ittt	cs
 8002d84:	1ab6      	subcs	r6, r6, r2
 8002d86:	4675      	movcs	r5, lr
 8002d88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002d8c:	ea55 0e06 	orrs.w	lr, r5, r6
 8002d90:	d018      	beq.n	8002dc4 <__aeabi_ddiv+0x114>
 8002d92:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002d96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8002d9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8002d9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002da2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002da6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8002daa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8002dae:	d1c0      	bne.n	8002d32 <__aeabi_ddiv+0x82>
 8002db0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002db4:	d10b      	bne.n	8002dce <__aeabi_ddiv+0x11e>
 8002db6:	ea41 0100 	orr.w	r1, r1, r0
 8002dba:	f04f 0000 	mov.w	r0, #0
 8002dbe:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8002dc2:	e7b6      	b.n	8002d32 <__aeabi_ddiv+0x82>
 8002dc4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002dc8:	bf04      	itt	eq
 8002dca:	4301      	orreq	r1, r0
 8002dcc:	2000      	moveq	r0, #0
 8002dce:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8002dd2:	bf88      	it	hi
 8002dd4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8002dd8:	f63f aeaf 	bhi.w	8002b3a <__aeabi_dmul+0xde>
 8002ddc:	ebb5 0c03 	subs.w	ip, r5, r3
 8002de0:	bf04      	itt	eq
 8002de2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002de6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002dea:	f150 0000 	adcs.w	r0, r0, #0
 8002dee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002df2:	bd70      	pop	{r4, r5, r6, pc}
 8002df4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8002df8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002dfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002e00:	bfc2      	ittt	gt
 8002e02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002e06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002e0a:	bd70      	popgt	{r4, r5, r6, pc}
 8002e0c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002e10:	f04f 0e00 	mov.w	lr, #0
 8002e14:	3c01      	subs	r4, #1
 8002e16:	e690      	b.n	8002b3a <__aeabi_dmul+0xde>
 8002e18:	ea45 0e06 	orr.w	lr, r5, r6
 8002e1c:	e68d      	b.n	8002b3a <__aeabi_dmul+0xde>
 8002e1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002e22:	ea94 0f0c 	teq	r4, ip
 8002e26:	bf08      	it	eq
 8002e28:	ea95 0f0c 	teqeq	r5, ip
 8002e2c:	f43f af3b 	beq.w	8002ca6 <__aeabi_dmul+0x24a>
 8002e30:	ea94 0f0c 	teq	r4, ip
 8002e34:	d10a      	bne.n	8002e4c <__aeabi_ddiv+0x19c>
 8002e36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002e3a:	f47f af34 	bne.w	8002ca6 <__aeabi_dmul+0x24a>
 8002e3e:	ea95 0f0c 	teq	r5, ip
 8002e42:	f47f af25 	bne.w	8002c90 <__aeabi_dmul+0x234>
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	e72c      	b.n	8002ca6 <__aeabi_dmul+0x24a>
 8002e4c:	ea95 0f0c 	teq	r5, ip
 8002e50:	d106      	bne.n	8002e60 <__aeabi_ddiv+0x1b0>
 8002e52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002e56:	f43f aefd 	beq.w	8002c54 <__aeabi_dmul+0x1f8>
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	e722      	b.n	8002ca6 <__aeabi_dmul+0x24a>
 8002e60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002e64:	bf18      	it	ne
 8002e66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002e6a:	f47f aec5 	bne.w	8002bf8 <__aeabi_dmul+0x19c>
 8002e6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002e72:	f47f af0d 	bne.w	8002c90 <__aeabi_dmul+0x234>
 8002e76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002e7a:	f47f aeeb 	bne.w	8002c54 <__aeabi_dmul+0x1f8>
 8002e7e:	e712      	b.n	8002ca6 <__aeabi_dmul+0x24a>

08002e80 <__gedf2>:
 8002e80:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8002e84:	e006      	b.n	8002e94 <__cmpdf2+0x4>
 8002e86:	bf00      	nop

08002e88 <__ledf2>:
 8002e88:	f04f 0c01 	mov.w	ip, #1
 8002e8c:	e002      	b.n	8002e94 <__cmpdf2+0x4>
 8002e8e:	bf00      	nop

08002e90 <__cmpdf2>:
 8002e90:	f04f 0c01 	mov.w	ip, #1
 8002e94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002ea0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002ea4:	bf18      	it	ne
 8002ea6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8002eaa:	d01b      	beq.n	8002ee4 <__cmpdf2+0x54>
 8002eac:	b001      	add	sp, #4
 8002eae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002eb2:	bf0c      	ite	eq
 8002eb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002eb8:	ea91 0f03 	teqne	r1, r3
 8002ebc:	bf02      	ittt	eq
 8002ebe:	ea90 0f02 	teqeq	r0, r2
 8002ec2:	2000      	moveq	r0, #0
 8002ec4:	4770      	bxeq	lr
 8002ec6:	f110 0f00 	cmn.w	r0, #0
 8002eca:	ea91 0f03 	teq	r1, r3
 8002ece:	bf58      	it	pl
 8002ed0:	4299      	cmppl	r1, r3
 8002ed2:	bf08      	it	eq
 8002ed4:	4290      	cmpeq	r0, r2
 8002ed6:	bf2c      	ite	cs
 8002ed8:	17d8      	asrcs	r0, r3, #31
 8002eda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8002ede:	f040 0001 	orr.w	r0, r0, #1
 8002ee2:	4770      	bx	lr
 8002ee4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002ee8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002eec:	d102      	bne.n	8002ef4 <__cmpdf2+0x64>
 8002eee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002ef2:	d107      	bne.n	8002f04 <__cmpdf2+0x74>
 8002ef4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002ef8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002efc:	d1d6      	bne.n	8002eac <__cmpdf2+0x1c>
 8002efe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002f02:	d0d3      	beq.n	8002eac <__cmpdf2+0x1c>
 8002f04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop

08002f0c <__aeabi_cdrcmple>:
 8002f0c:	4684      	mov	ip, r0
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4662      	mov	r2, ip
 8002f12:	468c      	mov	ip, r1
 8002f14:	4619      	mov	r1, r3
 8002f16:	4663      	mov	r3, ip
 8002f18:	e000      	b.n	8002f1c <__aeabi_cdcmpeq>
 8002f1a:	bf00      	nop

08002f1c <__aeabi_cdcmpeq>:
 8002f1c:	b501      	push	{r0, lr}
 8002f1e:	f7ff ffb7 	bl	8002e90 <__cmpdf2>
 8002f22:	2800      	cmp	r0, #0
 8002f24:	bf48      	it	mi
 8002f26:	f110 0f00 	cmnmi.w	r0, #0
 8002f2a:	bd01      	pop	{r0, pc}

08002f2c <__aeabi_dcmpeq>:
 8002f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f30:	f7ff fff4 	bl	8002f1c <__aeabi_cdcmpeq>
 8002f34:	bf0c      	ite	eq
 8002f36:	2001      	moveq	r0, #1
 8002f38:	2000      	movne	r0, #0
 8002f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f3e:	bf00      	nop

08002f40 <__aeabi_dcmplt>:
 8002f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f44:	f7ff ffea 	bl	8002f1c <__aeabi_cdcmpeq>
 8002f48:	bf34      	ite	cc
 8002f4a:	2001      	movcc	r0, #1
 8002f4c:	2000      	movcs	r0, #0
 8002f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f52:	bf00      	nop

08002f54 <__aeabi_dcmple>:
 8002f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f58:	f7ff ffe0 	bl	8002f1c <__aeabi_cdcmpeq>
 8002f5c:	bf94      	ite	ls
 8002f5e:	2001      	movls	r0, #1
 8002f60:	2000      	movhi	r0, #0
 8002f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f66:	bf00      	nop

08002f68 <__aeabi_dcmpge>:
 8002f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f6c:	f7ff ffce 	bl	8002f0c <__aeabi_cdrcmple>
 8002f70:	bf94      	ite	ls
 8002f72:	2001      	movls	r0, #1
 8002f74:	2000      	movhi	r0, #0
 8002f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f7a:	bf00      	nop

08002f7c <__aeabi_dcmpgt>:
 8002f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f80:	f7ff ffc4 	bl	8002f0c <__aeabi_cdrcmple>
 8002f84:	bf34      	ite	cc
 8002f86:	2001      	movcc	r0, #1
 8002f88:	2000      	movcs	r0, #0
 8002f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f8e:	bf00      	nop

08002f90 <__aeabi_dcmpun>:
 8002f90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002f94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002f98:	d102      	bne.n	8002fa0 <__aeabi_dcmpun+0x10>
 8002f9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002f9e:	d10a      	bne.n	8002fb6 <__aeabi_dcmpun+0x26>
 8002fa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002fa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002fa8:	d102      	bne.n	8002fb0 <__aeabi_dcmpun+0x20>
 8002faa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002fae:	d102      	bne.n	8002fb6 <__aeabi_dcmpun+0x26>
 8002fb0:	f04f 0000 	mov.w	r0, #0
 8002fb4:	4770      	bx	lr
 8002fb6:	f04f 0001 	mov.w	r0, #1
 8002fba:	4770      	bx	lr

08002fbc <__aeabi_d2iz>:
 8002fbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002fc0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8002fc4:	d215      	bcs.n	8002ff2 <__aeabi_d2iz+0x36>
 8002fc6:	d511      	bpl.n	8002fec <__aeabi_d2iz+0x30>
 8002fc8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8002fcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002fd0:	d912      	bls.n	8002ff8 <__aeabi_d2iz+0x3c>
 8002fd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002fd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8002fde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8002fe2:	fa23 f002 	lsr.w	r0, r3, r2
 8002fe6:	bf18      	it	ne
 8002fe8:	4240      	negne	r0, r0
 8002fea:	4770      	bx	lr
 8002fec:	f04f 0000 	mov.w	r0, #0
 8002ff0:	4770      	bx	lr
 8002ff2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8002ff6:	d105      	bne.n	8003004 <__aeabi_d2iz+0x48>
 8002ff8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8002ffc:	bf08      	it	eq
 8002ffe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8003002:	4770      	bx	lr
 8003004:	f04f 0000 	mov.w	r0, #0
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop

0800300c <__aeabi_d2uiz>:
 800300c:	004a      	lsls	r2, r1, #1
 800300e:	d211      	bcs.n	8003034 <__aeabi_d2uiz+0x28>
 8003010:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8003014:	d211      	bcs.n	800303a <__aeabi_d2uiz+0x2e>
 8003016:	d50d      	bpl.n	8003034 <__aeabi_d2uiz+0x28>
 8003018:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800301c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003020:	d40e      	bmi.n	8003040 <__aeabi_d2uiz+0x34>
 8003022:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003026:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800302a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800302e:	fa23 f002 	lsr.w	r0, r3, r2
 8003032:	4770      	bx	lr
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	4770      	bx	lr
 800303a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800303e:	d102      	bne.n	8003046 <__aeabi_d2uiz+0x3a>
 8003040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003044:	4770      	bx	lr
 8003046:	f04f 0000 	mov.w	r0, #0
 800304a:	4770      	bx	lr

0800304c <__aeabi_d2f>:
 800304c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003050:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8003054:	bf24      	itt	cs
 8003056:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800305a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800305e:	d90d      	bls.n	800307c <__aeabi_d2f+0x30>
 8003060:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8003064:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003068:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800306c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003070:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8003074:	bf08      	it	eq
 8003076:	f020 0001 	biceq.w	r0, r0, #1
 800307a:	4770      	bx	lr
 800307c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8003080:	d121      	bne.n	80030c6 <__aeabi_d2f+0x7a>
 8003082:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8003086:	bfbc      	itt	lt
 8003088:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800308c:	4770      	bxlt	lr
 800308e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8003092:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8003096:	f1c2 0218 	rsb	r2, r2, #24
 800309a:	f1c2 0c20 	rsb	ip, r2, #32
 800309e:	fa10 f30c 	lsls.w	r3, r0, ip
 80030a2:	fa20 f002 	lsr.w	r0, r0, r2
 80030a6:	bf18      	it	ne
 80030a8:	f040 0001 	orrne.w	r0, r0, #1
 80030ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80030b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80030b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80030b8:	ea40 000c 	orr.w	r0, r0, ip
 80030bc:	fa23 f302 	lsr.w	r3, r3, r2
 80030c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030c4:	e7cc      	b.n	8003060 <__aeabi_d2f+0x14>
 80030c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80030ca:	d107      	bne.n	80030dc <__aeabi_d2f+0x90>
 80030cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80030d0:	bf1e      	ittt	ne
 80030d2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80030d6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80030da:	4770      	bxne	lr
 80030dc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80030e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80030e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop

080030ec <__aeabi_uldivmod>:
 80030ec:	b953      	cbnz	r3, 8003104 <__aeabi_uldivmod+0x18>
 80030ee:	b94a      	cbnz	r2, 8003104 <__aeabi_uldivmod+0x18>
 80030f0:	2900      	cmp	r1, #0
 80030f2:	bf08      	it	eq
 80030f4:	2800      	cmpeq	r0, #0
 80030f6:	bf1c      	itt	ne
 80030f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80030fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8003100:	f000 b9a0 	b.w	8003444 <__aeabi_idiv0>
 8003104:	f1ad 0c08 	sub.w	ip, sp, #8
 8003108:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800310c:	f000 f83c 	bl	8003188 <__udivmoddi4>
 8003110:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003118:	b004      	add	sp, #16
 800311a:	4770      	bx	lr

0800311c <__aeabi_d2lz>:
 800311c:	b538      	push	{r3, r4, r5, lr}
 800311e:	2200      	movs	r2, #0
 8003120:	2300      	movs	r3, #0
 8003122:	4604      	mov	r4, r0
 8003124:	460d      	mov	r5, r1
 8003126:	f7ff ff0b 	bl	8002f40 <__aeabi_dcmplt>
 800312a:	b928      	cbnz	r0, 8003138 <__aeabi_d2lz+0x1c>
 800312c:	4620      	mov	r0, r4
 800312e:	4629      	mov	r1, r5
 8003130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003134:	f000 b80a 	b.w	800314c <__aeabi_d2ulz>
 8003138:	4620      	mov	r0, r4
 800313a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800313e:	f000 f805 	bl	800314c <__aeabi_d2ulz>
 8003142:	4240      	negs	r0, r0
 8003144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003148:	bd38      	pop	{r3, r4, r5, pc}
 800314a:	bf00      	nop

0800314c <__aeabi_d2ulz>:
 800314c:	b5d0      	push	{r4, r6, r7, lr}
 800314e:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <__aeabi_d2ulz+0x34>)
 8003150:	2200      	movs	r2, #0
 8003152:	4606      	mov	r6, r0
 8003154:	460f      	mov	r7, r1
 8003156:	f7ff fc81 	bl	8002a5c <__aeabi_dmul>
 800315a:	f7ff ff57 	bl	800300c <__aeabi_d2uiz>
 800315e:	4604      	mov	r4, r0
 8003160:	f7ff fc02 	bl	8002968 <__aeabi_ui2d>
 8003164:	4b07      	ldr	r3, [pc, #28]	@ (8003184 <__aeabi_d2ulz+0x38>)
 8003166:	2200      	movs	r2, #0
 8003168:	f7ff fc78 	bl	8002a5c <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4630      	mov	r0, r6
 8003172:	4639      	mov	r1, r7
 8003174:	f7ff faba 	bl	80026ec <__aeabi_dsub>
 8003178:	f7ff ff48 	bl	800300c <__aeabi_d2uiz>
 800317c:	4621      	mov	r1, r4
 800317e:	bdd0      	pop	{r4, r6, r7, pc}
 8003180:	3df00000 	.word	0x3df00000
 8003184:	41f00000 	.word	0x41f00000

08003188 <__udivmoddi4>:
 8003188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800318c:	9d08      	ldr	r5, [sp, #32]
 800318e:	460c      	mov	r4, r1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d14e      	bne.n	8003232 <__udivmoddi4+0xaa>
 8003194:	4694      	mov	ip, r2
 8003196:	458c      	cmp	ip, r1
 8003198:	4686      	mov	lr, r0
 800319a:	fab2 f282 	clz	r2, r2
 800319e:	d962      	bls.n	8003266 <__udivmoddi4+0xde>
 80031a0:	b14a      	cbz	r2, 80031b6 <__udivmoddi4+0x2e>
 80031a2:	f1c2 0320 	rsb	r3, r2, #32
 80031a6:	4091      	lsls	r1, r2
 80031a8:	fa20 f303 	lsr.w	r3, r0, r3
 80031ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80031b0:	4319      	orrs	r1, r3
 80031b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80031b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80031ba:	fa1f f68c 	uxth.w	r6, ip
 80031be:	fbb1 f4f7 	udiv	r4, r1, r7
 80031c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80031c6:	fb07 1114 	mls	r1, r7, r4, r1
 80031ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80031ce:	fb04 f106 	mul.w	r1, r4, r6
 80031d2:	4299      	cmp	r1, r3
 80031d4:	d90a      	bls.n	80031ec <__udivmoddi4+0x64>
 80031d6:	eb1c 0303 	adds.w	r3, ip, r3
 80031da:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80031de:	f080 8112 	bcs.w	8003406 <__udivmoddi4+0x27e>
 80031e2:	4299      	cmp	r1, r3
 80031e4:	f240 810f 	bls.w	8003406 <__udivmoddi4+0x27e>
 80031e8:	3c02      	subs	r4, #2
 80031ea:	4463      	add	r3, ip
 80031ec:	1a59      	subs	r1, r3, r1
 80031ee:	fa1f f38e 	uxth.w	r3, lr
 80031f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80031f6:	fb07 1110 	mls	r1, r7, r0, r1
 80031fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80031fe:	fb00 f606 	mul.w	r6, r0, r6
 8003202:	429e      	cmp	r6, r3
 8003204:	d90a      	bls.n	800321c <__udivmoddi4+0x94>
 8003206:	eb1c 0303 	adds.w	r3, ip, r3
 800320a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800320e:	f080 80fc 	bcs.w	800340a <__udivmoddi4+0x282>
 8003212:	429e      	cmp	r6, r3
 8003214:	f240 80f9 	bls.w	800340a <__udivmoddi4+0x282>
 8003218:	4463      	add	r3, ip
 800321a:	3802      	subs	r0, #2
 800321c:	1b9b      	subs	r3, r3, r6
 800321e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8003222:	2100      	movs	r1, #0
 8003224:	b11d      	cbz	r5, 800322e <__udivmoddi4+0xa6>
 8003226:	40d3      	lsrs	r3, r2
 8003228:	2200      	movs	r2, #0
 800322a:	e9c5 3200 	strd	r3, r2, [r5]
 800322e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003232:	428b      	cmp	r3, r1
 8003234:	d905      	bls.n	8003242 <__udivmoddi4+0xba>
 8003236:	b10d      	cbz	r5, 800323c <__udivmoddi4+0xb4>
 8003238:	e9c5 0100 	strd	r0, r1, [r5]
 800323c:	2100      	movs	r1, #0
 800323e:	4608      	mov	r0, r1
 8003240:	e7f5      	b.n	800322e <__udivmoddi4+0xa6>
 8003242:	fab3 f183 	clz	r1, r3
 8003246:	2900      	cmp	r1, #0
 8003248:	d146      	bne.n	80032d8 <__udivmoddi4+0x150>
 800324a:	42a3      	cmp	r3, r4
 800324c:	d302      	bcc.n	8003254 <__udivmoddi4+0xcc>
 800324e:	4290      	cmp	r0, r2
 8003250:	f0c0 80f0 	bcc.w	8003434 <__udivmoddi4+0x2ac>
 8003254:	1a86      	subs	r6, r0, r2
 8003256:	eb64 0303 	sbc.w	r3, r4, r3
 800325a:	2001      	movs	r0, #1
 800325c:	2d00      	cmp	r5, #0
 800325e:	d0e6      	beq.n	800322e <__udivmoddi4+0xa6>
 8003260:	e9c5 6300 	strd	r6, r3, [r5]
 8003264:	e7e3      	b.n	800322e <__udivmoddi4+0xa6>
 8003266:	2a00      	cmp	r2, #0
 8003268:	f040 8090 	bne.w	800338c <__udivmoddi4+0x204>
 800326c:	eba1 040c 	sub.w	r4, r1, ip
 8003270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8003274:	fa1f f78c 	uxth.w	r7, ip
 8003278:	2101      	movs	r1, #1
 800327a:	fbb4 f6f8 	udiv	r6, r4, r8
 800327e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8003282:	fb08 4416 	mls	r4, r8, r6, r4
 8003286:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800328a:	fb07 f006 	mul.w	r0, r7, r6
 800328e:	4298      	cmp	r0, r3
 8003290:	d908      	bls.n	80032a4 <__udivmoddi4+0x11c>
 8003292:	eb1c 0303 	adds.w	r3, ip, r3
 8003296:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800329a:	d202      	bcs.n	80032a2 <__udivmoddi4+0x11a>
 800329c:	4298      	cmp	r0, r3
 800329e:	f200 80cd 	bhi.w	800343c <__udivmoddi4+0x2b4>
 80032a2:	4626      	mov	r6, r4
 80032a4:	1a1c      	subs	r4, r3, r0
 80032a6:	fa1f f38e 	uxth.w	r3, lr
 80032aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80032ae:	fb08 4410 	mls	r4, r8, r0, r4
 80032b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80032b6:	fb00 f707 	mul.w	r7, r0, r7
 80032ba:	429f      	cmp	r7, r3
 80032bc:	d908      	bls.n	80032d0 <__udivmoddi4+0x148>
 80032be:	eb1c 0303 	adds.w	r3, ip, r3
 80032c2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80032c6:	d202      	bcs.n	80032ce <__udivmoddi4+0x146>
 80032c8:	429f      	cmp	r7, r3
 80032ca:	f200 80b0 	bhi.w	800342e <__udivmoddi4+0x2a6>
 80032ce:	4620      	mov	r0, r4
 80032d0:	1bdb      	subs	r3, r3, r7
 80032d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80032d6:	e7a5      	b.n	8003224 <__udivmoddi4+0x9c>
 80032d8:	f1c1 0620 	rsb	r6, r1, #32
 80032dc:	408b      	lsls	r3, r1
 80032de:	fa22 f706 	lsr.w	r7, r2, r6
 80032e2:	431f      	orrs	r7, r3
 80032e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80032e8:	fa04 f301 	lsl.w	r3, r4, r1
 80032ec:	ea43 030c 	orr.w	r3, r3, ip
 80032f0:	40f4      	lsrs	r4, r6
 80032f2:	fa00 f801 	lsl.w	r8, r0, r1
 80032f6:	0c38      	lsrs	r0, r7, #16
 80032f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80032fc:	fbb4 fef0 	udiv	lr, r4, r0
 8003300:	fa1f fc87 	uxth.w	ip, r7
 8003304:	fb00 441e 	mls	r4, r0, lr, r4
 8003308:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800330c:	fb0e f90c 	mul.w	r9, lr, ip
 8003310:	45a1      	cmp	r9, r4
 8003312:	fa02 f201 	lsl.w	r2, r2, r1
 8003316:	d90a      	bls.n	800332e <__udivmoddi4+0x1a6>
 8003318:	193c      	adds	r4, r7, r4
 800331a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800331e:	f080 8084 	bcs.w	800342a <__udivmoddi4+0x2a2>
 8003322:	45a1      	cmp	r9, r4
 8003324:	f240 8081 	bls.w	800342a <__udivmoddi4+0x2a2>
 8003328:	f1ae 0e02 	sub.w	lr, lr, #2
 800332c:	443c      	add	r4, r7
 800332e:	eba4 0409 	sub.w	r4, r4, r9
 8003332:	fa1f f983 	uxth.w	r9, r3
 8003336:	fbb4 f3f0 	udiv	r3, r4, r0
 800333a:	fb00 4413 	mls	r4, r0, r3, r4
 800333e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8003342:	fb03 fc0c 	mul.w	ip, r3, ip
 8003346:	45a4      	cmp	ip, r4
 8003348:	d907      	bls.n	800335a <__udivmoddi4+0x1d2>
 800334a:	193c      	adds	r4, r7, r4
 800334c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8003350:	d267      	bcs.n	8003422 <__udivmoddi4+0x29a>
 8003352:	45a4      	cmp	ip, r4
 8003354:	d965      	bls.n	8003422 <__udivmoddi4+0x29a>
 8003356:	3b02      	subs	r3, #2
 8003358:	443c      	add	r4, r7
 800335a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800335e:	fba0 9302 	umull	r9, r3, r0, r2
 8003362:	eba4 040c 	sub.w	r4, r4, ip
 8003366:	429c      	cmp	r4, r3
 8003368:	46ce      	mov	lr, r9
 800336a:	469c      	mov	ip, r3
 800336c:	d351      	bcc.n	8003412 <__udivmoddi4+0x28a>
 800336e:	d04e      	beq.n	800340e <__udivmoddi4+0x286>
 8003370:	b155      	cbz	r5, 8003388 <__udivmoddi4+0x200>
 8003372:	ebb8 030e 	subs.w	r3, r8, lr
 8003376:	eb64 040c 	sbc.w	r4, r4, ip
 800337a:	fa04 f606 	lsl.w	r6, r4, r6
 800337e:	40cb      	lsrs	r3, r1
 8003380:	431e      	orrs	r6, r3
 8003382:	40cc      	lsrs	r4, r1
 8003384:	e9c5 6400 	strd	r6, r4, [r5]
 8003388:	2100      	movs	r1, #0
 800338a:	e750      	b.n	800322e <__udivmoddi4+0xa6>
 800338c:	f1c2 0320 	rsb	r3, r2, #32
 8003390:	fa20 f103 	lsr.w	r1, r0, r3
 8003394:	fa0c fc02 	lsl.w	ip, ip, r2
 8003398:	fa24 f303 	lsr.w	r3, r4, r3
 800339c:	4094      	lsls	r4, r2
 800339e:	430c      	orrs	r4, r1
 80033a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80033a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80033a8:	fa1f f78c 	uxth.w	r7, ip
 80033ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80033b0:	fb08 3110 	mls	r1, r8, r0, r3
 80033b4:	0c23      	lsrs	r3, r4, #16
 80033b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80033ba:	fb00 f107 	mul.w	r1, r0, r7
 80033be:	4299      	cmp	r1, r3
 80033c0:	d908      	bls.n	80033d4 <__udivmoddi4+0x24c>
 80033c2:	eb1c 0303 	adds.w	r3, ip, r3
 80033c6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80033ca:	d22c      	bcs.n	8003426 <__udivmoddi4+0x29e>
 80033cc:	4299      	cmp	r1, r3
 80033ce:	d92a      	bls.n	8003426 <__udivmoddi4+0x29e>
 80033d0:	3802      	subs	r0, #2
 80033d2:	4463      	add	r3, ip
 80033d4:	1a5b      	subs	r3, r3, r1
 80033d6:	b2a4      	uxth	r4, r4
 80033d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80033dc:	fb08 3311 	mls	r3, r8, r1, r3
 80033e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80033e4:	fb01 f307 	mul.w	r3, r1, r7
 80033e8:	42a3      	cmp	r3, r4
 80033ea:	d908      	bls.n	80033fe <__udivmoddi4+0x276>
 80033ec:	eb1c 0404 	adds.w	r4, ip, r4
 80033f0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80033f4:	d213      	bcs.n	800341e <__udivmoddi4+0x296>
 80033f6:	42a3      	cmp	r3, r4
 80033f8:	d911      	bls.n	800341e <__udivmoddi4+0x296>
 80033fa:	3902      	subs	r1, #2
 80033fc:	4464      	add	r4, ip
 80033fe:	1ae4      	subs	r4, r4, r3
 8003400:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003404:	e739      	b.n	800327a <__udivmoddi4+0xf2>
 8003406:	4604      	mov	r4, r0
 8003408:	e6f0      	b.n	80031ec <__udivmoddi4+0x64>
 800340a:	4608      	mov	r0, r1
 800340c:	e706      	b.n	800321c <__udivmoddi4+0x94>
 800340e:	45c8      	cmp	r8, r9
 8003410:	d2ae      	bcs.n	8003370 <__udivmoddi4+0x1e8>
 8003412:	ebb9 0e02 	subs.w	lr, r9, r2
 8003416:	eb63 0c07 	sbc.w	ip, r3, r7
 800341a:	3801      	subs	r0, #1
 800341c:	e7a8      	b.n	8003370 <__udivmoddi4+0x1e8>
 800341e:	4631      	mov	r1, r6
 8003420:	e7ed      	b.n	80033fe <__udivmoddi4+0x276>
 8003422:	4603      	mov	r3, r0
 8003424:	e799      	b.n	800335a <__udivmoddi4+0x1d2>
 8003426:	4630      	mov	r0, r6
 8003428:	e7d4      	b.n	80033d4 <__udivmoddi4+0x24c>
 800342a:	46d6      	mov	lr, sl
 800342c:	e77f      	b.n	800332e <__udivmoddi4+0x1a6>
 800342e:	4463      	add	r3, ip
 8003430:	3802      	subs	r0, #2
 8003432:	e74d      	b.n	80032d0 <__udivmoddi4+0x148>
 8003434:	4606      	mov	r6, r0
 8003436:	4623      	mov	r3, r4
 8003438:	4608      	mov	r0, r1
 800343a:	e70f      	b.n	800325c <__udivmoddi4+0xd4>
 800343c:	3e02      	subs	r6, #2
 800343e:	4463      	add	r3, ip
 8003440:	e730      	b.n	80032a4 <__udivmoddi4+0x11c>
 8003442:	bf00      	nop

08003444 <__aeabi_idiv0>:
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop

08003448 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800344e:	463b      	mov	r3, r7
 8003450:	2220      	movs	r2, #32
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f015 faab 	bl	80189b0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800345a:	4b33      	ldr	r3, [pc, #204]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800345c:	4a33      	ldr	r2, [pc, #204]	@ (800352c <MX_ADC2_Init+0xe4>)
 800345e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003460:	4b31      	ldr	r3, [pc, #196]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003462:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003466:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003468:	4b2f      	ldr	r3, [pc, #188]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800346e:	4b2e      	ldr	r3, [pc, #184]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003470:	2200      	movs	r2, #0
 8003472:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003474:	4b2c      	ldr	r3, [pc, #176]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800347a:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800347c:	2201      	movs	r2, #1
 800347e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003480:	4b29      	ldr	r3, [pc, #164]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003482:	2208      	movs	r2, #8
 8003484:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003486:	4b28      	ldr	r3, [pc, #160]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003488:	2200      	movs	r2, #0
 800348a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800348c:	4b26      	ldr	r3, [pc, #152]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800348e:	2200      	movs	r2, #0
 8003490:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8003492:	4b25      	ldr	r3, [pc, #148]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003494:	2202      	movs	r2, #2
 8003496:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003498:	4b23      	ldr	r3, [pc, #140]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80034a0:	4b21      	ldr	r3, [pc, #132]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034a2:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 80034a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80034a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80034b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80034b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80034be:	4b1a      	ldr	r3, [pc, #104]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80034c6:	4818      	ldr	r0, [pc, #96]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034c8:	f002 ffd6 	bl	8006478 <HAL_ADC_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80034d2:	f000 fd31 	bl	8003f38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80034d6:	4b16      	ldr	r3, [pc, #88]	@ (8003530 <MX_ADC2_Init+0xe8>)
 80034d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034da:	2306      	movs	r3, #6
 80034dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80034de:	2303      	movs	r3, #3
 80034e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034e2:	237f      	movs	r3, #127	@ 0x7f
 80034e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80034e6:	2304      	movs	r3, #4
 80034e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034ee:	463b      	mov	r3, r7
 80034f0:	4619      	mov	r1, r3
 80034f2:	480d      	ldr	r0, [pc, #52]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034f4:	f003 fc92 	bl	8006e1c <HAL_ADC_ConfigChannel>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80034fe:	f000 fd1b 	bl	8003f38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003502:	4b0c      	ldr	r3, [pc, #48]	@ (8003534 <MX_ADC2_Init+0xec>)
 8003504:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003506:	230c      	movs	r3, #12
 8003508:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800350a:	463b      	mov	r3, r7
 800350c:	4619      	mov	r1, r3
 800350e:	4806      	ldr	r0, [pc, #24]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003510:	f003 fc84 	bl	8006e1c <HAL_ADC_ConfigChannel>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 800351a:	f000 fd0d 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800351e:	bf00      	nop
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000524 	.word	0x20000524
 800352c:	50000100 	.word	0x50000100
 8003530:	0c900008 	.word	0x0c900008
 8003534:	10c00010 	.word	0x10c00010

08003538 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b09a      	sub	sp, #104	@ 0x68
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003550:	f107 0310 	add.w	r3, r7, #16
 8003554:	2244      	movs	r2, #68	@ 0x44
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f015 fa29 	bl	80189b0 <memset>
  if(adcHandle->Instance==ADC2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a37      	ldr	r2, [pc, #220]	@ (8003640 <HAL_ADC_MspInit+0x108>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d167      	bne.n	8003638 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003568:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800356c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800356e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003572:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003574:	f107 0310 	add.w	r3, r7, #16
 8003578:	4618      	mov	r0, r3
 800357a:	f006 fec9 	bl	800a310 <HAL_RCCEx_PeriphCLKConfig>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003584:	f000 fcd8 	bl	8003f38 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003588:	4b2e      	ldr	r3, [pc, #184]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 800358a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358c:	4a2d      	ldr	r2, [pc, #180]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 800358e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003594:	4b2b      	ldr	r3, [pc, #172]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 8003596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a0:	4b28      	ldr	r3, [pc, #160]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 80035a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a4:	4a27      	ldr	r2, [pc, #156]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035ac:	4b25      	ldr	r3, [pc, #148]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 80035ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = ASSERV_I1_Pin|ASSERV_I2_Pin;
 80035b8:	23c0      	movs	r3, #192	@ 0xc0
 80035ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035bc:	2303      	movs	r3, #3
 80035be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80035c8:	4619      	mov	r1, r3
 80035ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035ce:	f005 f8f7 	bl	80087c0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel3;
 80035d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035d4:	4a1d      	ldr	r2, [pc, #116]	@ (800364c <HAL_ADC_MspInit+0x114>)
 80035d6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035da:	2224      	movs	r2, #36	@ 0x24
 80035dc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035de:	4b1a      	ldr	r3, [pc, #104]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e4:	4b18      	ldr	r3, [pc, #96]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80035ea:	4b17      	ldr	r3, [pc, #92]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035ec:	2280      	movs	r2, #128	@ 0x80
 80035ee:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035f0:	4b15      	ldr	r3, [pc, #84]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035f6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035f8:	4b13      	ldr	r3, [pc, #76]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035fe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003600:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 8003602:	2220      	movs	r2, #32
 8003604:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003606:	4b10      	ldr	r3, [pc, #64]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800360c:	480e      	ldr	r0, [pc, #56]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 800360e:	f004 fda5 	bl	800815c <HAL_DMA_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003618:	f000 fc8e 	bl	8003f38 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0a      	ldr	r2, [pc, #40]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54
 8003622:	4a09      	ldr	r2, [pc, #36]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	2105      	movs	r1, #5
 800362c:	2012      	movs	r0, #18
 800362e:	f004 fb93 	bl	8007d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003632:	2012      	movs	r0, #18
 8003634:	f004 fbaa 	bl	8007d8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003638:	bf00      	nop
 800363a:	3768      	adds	r7, #104	@ 0x68
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	50000100 	.word	0x50000100
 8003644:	40021000 	.word	0x40021000
 8003648:	20000590 	.word	0x20000590
 800364c:	40020030 	.word	0x40020030

08003650 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0

}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0
return 0;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003670:	b5b0      	push	{r4, r5, r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 64);
 8003676:	4b09      	ldr	r3, [pc, #36]	@ (800369c <MX_FREERTOS_Init+0x2c>)
 8003678:	1d3c      	adds	r4, r7, #4
 800367a:	461d      	mov	r5, r3
 800367c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800367e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f00f f8d2 	bl	8012832 <osThreadCreate>
 800368e:	4603      	mov	r3, r0
 8003690:	4a03      	ldr	r2, [pc, #12]	@ (80036a0 <MX_FREERTOS_Init+0x30>)
 8003692:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bdb0      	pop	{r4, r5, r7, pc}
 800369c:	0801b4b4 	.word	0x0801b4b4
 80036a0:	200005f0 	.word	0x200005f0

080036a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	for(;;)
  {
    osDelay(1);
 80036ac:	2001      	movs	r0, #1
 80036ae:	f00f f8f3 	bl	8012898 <osDelay>
 80036b2:	e7fb      	b.n	80036ac <StartDefaultTask+0x8>

080036b4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08c      	sub	sp, #48	@ 0x30
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80036ba:	463b      	mov	r3, r7
 80036bc:	2230      	movs	r2, #48	@ 0x30
 80036be:	2100      	movs	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f015 f975 	bl	80189b0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80036c6:	4b16      	ldr	r3, [pc, #88]	@ (8003720 <MX_DAC1_Init+0x6c>)
 80036c8:	4a16      	ldr	r2, [pc, #88]	@ (8003724 <MX_DAC1_Init+0x70>)
 80036ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80036cc:	4814      	ldr	r0, [pc, #80]	@ (8003720 <MX_DAC1_Init+0x6c>)
 80036ce:	f004 fb6b 	bl	8007da8 <HAL_DAC_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80036d8:	f000 fc2e 	bl	8003f38 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80036dc:	2302      	movs	r3, #2
 80036de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80036f8:	2301      	movs	r3, #1
 80036fa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003700:	463b      	mov	r3, r7
 8003702:	2200      	movs	r2, #0
 8003704:	4619      	mov	r1, r3
 8003706:	4806      	ldr	r0, [pc, #24]	@ (8003720 <MX_DAC1_Init+0x6c>)
 8003708:	f004 fb70 	bl	8007dec <HAL_DAC_ConfigChannel>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8003712:	f000 fc11 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003716:	bf00      	nop
 8003718:	3730      	adds	r7, #48	@ 0x30
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	200005f4 	.word	0x200005f4
 8003724:	50000800 	.word	0x50000800

08003728 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	@ 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a15      	ldr	r2, [pc, #84]	@ (800379c <HAL_DAC_MspInit+0x74>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d124      	bne.n	8003794 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800374a:	4b15      	ldr	r3, [pc, #84]	@ (80037a0 <HAL_DAC_MspInit+0x78>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	4a14      	ldr	r2, [pc, #80]	@ (80037a0 <HAL_DAC_MspInit+0x78>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003756:	4b12      	ldr	r3, [pc, #72]	@ (80037a0 <HAL_DAC_MspInit+0x78>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003762:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <HAL_DAC_MspInit+0x78>)
 8003764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003766:	4a0e      	ldr	r2, [pc, #56]	@ (80037a0 <HAL_DAC_MspInit+0x78>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800376e:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <HAL_DAC_MspInit+0x78>)
 8003770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC__Pin;
 800377a:	2310      	movs	r3, #16
 800377c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800377e:	2303      	movs	r3, #3
 8003780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC__GPIO_Port, &GPIO_InitStruct);
 8003786:	f107 0314 	add.w	r3, r7, #20
 800378a:	4619      	mov	r1, r3
 800378c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003790:	f005 f816 	bl	80087c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8003794:	bf00      	nop
 8003796:	3728      	adds	r7, #40	@ 0x28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	50000800 	.word	0x50000800
 80037a0:	40021000 	.word	0x40021000

080037a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a8:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <__NVIC_GetPriorityGrouping+0x18>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 0307 	and.w	r3, r3, #7
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	db0b      	blt.n	80037ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	f003 021f 	and.w	r2, r3, #31
 80037d8:	4907      	ldr	r1, [pc, #28]	@ (80037f8 <__NVIC_EnableIRQ+0x38>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2001      	movs	r0, #1
 80037e2:	fa00 f202 	lsl.w	r2, r0, r2
 80037e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000e100 	.word	0xe000e100

080037fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0a      	blt.n	8003826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	490c      	ldr	r1, [pc, #48]	@ (8003848 <__NVIC_SetPriority+0x4c>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	440b      	add	r3, r1
 8003820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003824:	e00a      	b.n	800383c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4908      	ldr	r1, [pc, #32]	@ (800384c <__NVIC_SetPriority+0x50>)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3b04      	subs	r3, #4
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	440b      	add	r3, r1
 800383a:	761a      	strb	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000e100 	.word	0xe000e100
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	@ 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f1c3 0307 	rsb	r3, r3, #7
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf28      	it	cs
 800386e:	2304      	movcs	r3, #4
 8003870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3304      	adds	r3, #4
 8003876:	2b06      	cmp	r3, #6
 8003878:	d902      	bls.n	8003880 <NVIC_EncodePriority+0x30>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3b03      	subs	r3, #3
 800387e:	e000      	b.n	8003882 <NVIC_EncodePriority+0x32>
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	401a      	ands	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003898:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	43d9      	mvns	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	4313      	orrs	r3, r2
         );
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	@ 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80038be:	4b26      	ldr	r3, [pc, #152]	@ (8003958 <MX_DMA_Init+0xa0>)
 80038c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c2:	4a25      	ldr	r2, [pc, #148]	@ (8003958 <MX_DMA_Init+0xa0>)
 80038c4:	f043 0304 	orr.w	r3, r3, #4
 80038c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80038ca:	4b23      	ldr	r3, [pc, #140]	@ (8003958 <MX_DMA_Init+0xa0>)
 80038cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038d6:	4b20      	ldr	r3, [pc, #128]	@ (8003958 <MX_DMA_Init+0xa0>)
 80038d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038da:	4a1f      	ldr	r2, [pc, #124]	@ (8003958 <MX_DMA_Init+0xa0>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80038e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003958 <MX_DMA_Init+0xa0>)
 80038e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80038ee:	f7ff ff59 	bl	80037a4 <__NVIC_GetPriorityGrouping>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2200      	movs	r2, #0
 80038f6:	2105      	movs	r1, #5
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ffa9 	bl	8003850 <NVIC_EncodePriority>
 80038fe:	4603      	mov	r3, r0
 8003900:	4619      	mov	r1, r3
 8003902:	200b      	movs	r0, #11
 8003904:	f7ff ff7a 	bl	80037fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003908:	200b      	movs	r0, #11
 800390a:	f7ff ff59 	bl	80037c0 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800390e:	f7ff ff49 	bl	80037a4 <__NVIC_GetPriorityGrouping>
 8003912:	4603      	mov	r3, r0
 8003914:	2200      	movs	r2, #0
 8003916:	2105      	movs	r1, #5
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff99 	bl	8003850 <NVIC_EncodePriority>
 800391e:	4603      	mov	r3, r0
 8003920:	4619      	mov	r1, r3
 8003922:	200c      	movs	r0, #12
 8003924:	f7ff ff6a 	bl	80037fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003928:	200c      	movs	r0, #12
 800392a:	f7ff ff49 	bl	80037c0 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800392e:	2200      	movs	r2, #0
 8003930:	2105      	movs	r1, #5
 8003932:	200d      	movs	r0, #13
 8003934:	f004 fa10 	bl	8007d58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003938:	200d      	movs	r0, #13
 800393a:	f004 fa27 	bl	8007d8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800393e:	2200      	movs	r2, #0
 8003940:	2105      	movs	r1, #5
 8003942:	200e      	movs	r0, #14
 8003944:	f004 fa08 	bl	8007d58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003948:	200e      	movs	r0, #14
 800394a:	f004 fa1f 	bl	8007d8c <HAL_NVIC_EnableIRQ>

}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000

0800395c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08a      	sub	sp, #40	@ 0x28
 8003960:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003962:	f107 0314 	add.w	r3, r7, #20
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	605a      	str	r2, [r3, #4]
 800396c:	609a      	str	r2, [r3, #8]
 800396e:	60da      	str	r2, [r3, #12]
 8003970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003972:	4b3f      	ldr	r3, [pc, #252]	@ (8003a70 <MX_GPIO_Init+0x114>)
 8003974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003976:	4a3e      	ldr	r2, [pc, #248]	@ (8003a70 <MX_GPIO_Init+0x114>)
 8003978:	f043 0304 	orr.w	r3, r3, #4
 800397c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800397e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a70 <MX_GPIO_Init+0x114>)
 8003980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800398a:	4b39      	ldr	r3, [pc, #228]	@ (8003a70 <MX_GPIO_Init+0x114>)
 800398c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398e:	4a38      	ldr	r2, [pc, #224]	@ (8003a70 <MX_GPIO_Init+0x114>)
 8003990:	f043 0320 	orr.w	r3, r3, #32
 8003994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003996:	4b36      	ldr	r3, [pc, #216]	@ (8003a70 <MX_GPIO_Init+0x114>)
 8003998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a2:	4b33      	ldr	r3, [pc, #204]	@ (8003a70 <MX_GPIO_Init+0x114>)
 80039a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a6:	4a32      	ldr	r2, [pc, #200]	@ (8003a70 <MX_GPIO_Init+0x114>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ae:	4b30      	ldr	r3, [pc, #192]	@ (8003a70 <MX_GPIO_Init+0x114>)
 80039b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003a70 <MX_GPIO_Init+0x114>)
 80039bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039be:	4a2c      	ldr	r2, [pc, #176]	@ (8003a70 <MX_GPIO_Init+0x114>)
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a70 <MX_GPIO_Init+0x114>)
 80039c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIDAR_M_CTR_GPIO_Port, LIDAR_M_CTR_Pin, GPIO_PIN_SET);
 80039d2:	2201      	movs	r2, #1
 80039d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039dc:	f005 f872 	bl	8008ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_INITIAL_STATE_Pin|BUTTON_START_ROBOT_Pin;
 80039e0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80039e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80039ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	4619      	mov	r1, r3
 80039f6:	481f      	ldr	r0, [pc, #124]	@ (8003a74 <MX_GPIO_Init+0x118>)
 80039f8:	f004 fee2 	bl	80087c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOUSTACHE_1_Pin;
 80039fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOUSTACHE_1_GPIO_Port, &GPIO_InitStruct);
 8003a0c:	f107 0314 	add.w	r3, r7, #20
 8003a10:	4619      	mov	r1, r3
 8003a12:	4819      	ldr	r0, [pc, #100]	@ (8003a78 <MX_GPIO_Init+0x11c>)
 8003a14:	f004 fed4 	bl	80087c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIDAR_M_CTR_Pin;
 8003a18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a26:	2300      	movs	r3, #0
 8003a28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIDAR_M_CTR_GPIO_Port, &GPIO_InitStruct);
 8003a2a:	f107 0314 	add.w	r3, r7, #20
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a34:	f004 fec4 	bl	80087c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXP_EXTI_Pin;
 8003a38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003a3e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a44:	2301      	movs	r3, #1
 8003a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXP_EXTI_GPIO_Port, &GPIO_InitStruct);
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a52:	f004 feb5 	bl	80087c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003a56:	2200      	movs	r2, #0
 8003a58:	2105      	movs	r1, #5
 8003a5a:	2028      	movs	r0, #40	@ 0x28
 8003a5c:	f004 f97c 	bl	8007d58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a60:	2028      	movs	r0, #40	@ 0x28
 8003a62:	f004 f993 	bl	8007d8c <HAL_NVIC_EnableIRQ>

}
 8003a66:	bf00      	nop
 8003a68:	3728      	adds	r7, #40	@ 0x28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000
 8003a74:	48000800 	.word	0x48000800
 8003a78:	48000400 	.word	0x48000400

08003a7c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a80:	4b1b      	ldr	r3, [pc, #108]	@ (8003af0 <MX_I2C1_Init+0x74>)
 8003a82:	4a1c      	ldr	r2, [pc, #112]	@ (8003af4 <MX_I2C1_Init+0x78>)
 8003a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8003a86:	4b1a      	ldr	r3, [pc, #104]	@ (8003af0 <MX_I2C1_Init+0x74>)
 8003a88:	4a1b      	ldr	r2, [pc, #108]	@ (8003af8 <MX_I2C1_Init+0x7c>)
 8003a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a8c:	4b18      	ldr	r3, [pc, #96]	@ (8003af0 <MX_I2C1_Init+0x74>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a92:	4b17      	ldr	r3, [pc, #92]	@ (8003af0 <MX_I2C1_Init+0x74>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a98:	4b15      	ldr	r3, [pc, #84]	@ (8003af0 <MX_I2C1_Init+0x74>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a9e:	4b14      	ldr	r3, [pc, #80]	@ (8003af0 <MX_I2C1_Init+0x74>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003aa4:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <MX_I2C1_Init+0x74>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003aaa:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <MX_I2C1_Init+0x74>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8003af0 <MX_I2C1_Init+0x74>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ab6:	480e      	ldr	r0, [pc, #56]	@ (8003af0 <MX_I2C1_Init+0x74>)
 8003ab8:	f005 f83f 	bl	8008b3a <HAL_I2C_Init>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003ac2:	f000 fa39 	bl	8003f38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4809      	ldr	r0, [pc, #36]	@ (8003af0 <MX_I2C1_Init+0x74>)
 8003aca:	f005 fd85 	bl	80095d8 <HAL_I2CEx_ConfigAnalogFilter>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003ad4:	f000 fa30 	bl	8003f38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4805      	ldr	r0, [pc, #20]	@ (8003af0 <MX_I2C1_Init+0x74>)
 8003adc:	f005 fdc7 	bl	800966e <HAL_I2CEx_ConfigDigitalFilter>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003ae6:	f000 fa27 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000608 	.word	0x20000608
 8003af4:	40005400 	.word	0x40005400
 8003af8:	00503d58 	.word	0x00503d58

08003afc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b00:	4b1b      	ldr	r3, [pc, #108]	@ (8003b70 <MX_I2C3_Init+0x74>)
 8003b02:	4a1c      	ldr	r2, [pc, #112]	@ (8003b74 <MX_I2C3_Init+0x78>)
 8003b04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8003b06:	4b1a      	ldr	r3, [pc, #104]	@ (8003b70 <MX_I2C3_Init+0x74>)
 8003b08:	4a1b      	ldr	r2, [pc, #108]	@ (8003b78 <MX_I2C3_Init+0x7c>)
 8003b0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003b0c:	4b18      	ldr	r3, [pc, #96]	@ (8003b70 <MX_I2C3_Init+0x74>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b12:	4b17      	ldr	r3, [pc, #92]	@ (8003b70 <MX_I2C3_Init+0x74>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b18:	4b15      	ldr	r3, [pc, #84]	@ (8003b70 <MX_I2C3_Init+0x74>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003b1e:	4b14      	ldr	r3, [pc, #80]	@ (8003b70 <MX_I2C3_Init+0x74>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b24:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <MX_I2C3_Init+0x74>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b2a:	4b11      	ldr	r3, [pc, #68]	@ (8003b70 <MX_I2C3_Init+0x74>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b30:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <MX_I2C3_Init+0x74>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b36:	480e      	ldr	r0, [pc, #56]	@ (8003b70 <MX_I2C3_Init+0x74>)
 8003b38:	f004 ffff 	bl	8008b3a <HAL_I2C_Init>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003b42:	f000 f9f9 	bl	8003f38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b46:	2100      	movs	r1, #0
 8003b48:	4809      	ldr	r0, [pc, #36]	@ (8003b70 <MX_I2C3_Init+0x74>)
 8003b4a:	f005 fd45 	bl	80095d8 <HAL_I2CEx_ConfigAnalogFilter>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003b54:	f000 f9f0 	bl	8003f38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4805      	ldr	r0, [pc, #20]	@ (8003b70 <MX_I2C3_Init+0x74>)
 8003b5c:	f005 fd87 	bl	800966e <HAL_I2CEx_ConfigDigitalFilter>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003b66:	f000 f9e7 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000065c 	.word	0x2000065c
 8003b74:	40007800 	.word	0x40007800
 8003b78:	00503d58 	.word	0x00503d58

08003b7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b09e      	sub	sp, #120	@ 0x78
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b94:	f107 0320 	add.w	r3, r7, #32
 8003b98:	2244      	movs	r2, #68	@ 0x44
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f014 ff07 	bl	80189b0 <memset>
  if(i2cHandle->Instance==I2C1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a5c      	ldr	r2, [pc, #368]	@ (8003d18 <HAL_I2C_MspInit+0x19c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d155      	bne.n	8003c58 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003bac:	2340      	movs	r3, #64	@ 0x40
 8003bae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bb4:	f107 0320 	add.w	r3, r7, #32
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f006 fba9 	bl	800a310 <HAL_RCCEx_PeriphCLKConfig>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003bc4:	f000 f9b8 	bl	8003f38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc8:	4b54      	ldr	r3, [pc, #336]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bcc:	4a53      	ldr	r2, [pc, #332]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd4:	4b51      	ldr	r3, [pc, #324]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be0:	4b4e      	ldr	r3, [pc, #312]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be4:	4a4d      	ldr	r2, [pc, #308]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003be6:	f043 0302 	orr.w	r3, r3, #2
 8003bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bec:	4b4b      	ldr	r3, [pc, #300]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin;
 8003bf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bfc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bfe:	2312      	movs	r3, #18
 8003c00:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c06:	2300      	movs	r3, #0
 8003c08:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c0a:	2304      	movs	r3, #4
 8003c0c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 8003c0e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003c12:	4619      	mov	r1, r3
 8003c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c18:	f004 fdd2 	bl	80087c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C_IMU_SDA_Pin;
 8003c1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c20:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c22:	2312      	movs	r3, #18
 8003c24:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c2e:	2304      	movs	r3, #4
 8003c30:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8003c32:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003c36:	4619      	mov	r1, r3
 8003c38:	4839      	ldr	r0, [pc, #228]	@ (8003d20 <HAL_I2C_MspInit+0x1a4>)
 8003c3a:	f004 fdc1 	bl	80087c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c3e:	4b37      	ldr	r3, [pc, #220]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c42:	4a36      	ldr	r2, [pc, #216]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003c44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c48:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c4a:	4b34      	ldr	r3, [pc, #208]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003c56:	e05a      	b.n	8003d0e <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a31      	ldr	r2, [pc, #196]	@ (8003d24 <HAL_I2C_MspInit+0x1a8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d155      	bne.n	8003d0e <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003c62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c66:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c6c:	f107 0320 	add.w	r3, r7, #32
 8003c70:	4618      	mov	r0, r3
 8003c72:	f006 fb4d 	bl	800a310 <HAL_RCCEx_PeriphCLKConfig>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8003c7c:	f000 f95c 	bl	8003f38 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c80:	4b26      	ldr	r3, [pc, #152]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c84:	4a25      	ldr	r2, [pc, #148]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c8c:	4b23      	ldr	r3, [pc, #140]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c98:	4b20      	ldr	r3, [pc, #128]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_MAIN_SCL_Pin;
 8003cb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cb4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cb6:	2312      	movs	r3, #18
 8003cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_MAIN_SCL_GPIO_Port, &GPIO_InitStruct);
 8003cc6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cd0:	f004 fd76 	bl	80087c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C_MAIN_SDA_Pin;
 8003cd4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003cd8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cda:	2312      	movs	r3, #18
 8003cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_MAIN_SDA_GPIO_Port, &GPIO_InitStruct);
 8003cea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003cee:	4619      	mov	r1, r3
 8003cf0:	480d      	ldr	r0, [pc, #52]	@ (8003d28 <HAL_I2C_MspInit+0x1ac>)
 8003cf2:	f004 fd65 	bl	80087c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003cf6:	4b09      	ldr	r3, [pc, #36]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfa:	4a08      	ldr	r2, [pc, #32]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003cfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_I2C_MspInit+0x1a0>)
 8003d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d06:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
}
 8003d0e:	bf00      	nop
 8003d10:	3778      	adds	r7, #120	@ 0x78
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40005400 	.word	0x40005400
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	48000400 	.word	0x48000400
 8003d24:	40007800 	.word	0x40007800
 8003d28:	48000800 	.word	0x48000800

08003d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d32:	f002 f8ba 	bl	8005eaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d36:	f000 f8ab 	bl	8003e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d3a:	f7ff fe0f 	bl	800395c <MX_GPIO_Init>
  MX_DMA_Init();
 8003d3e:	f7ff fdbb 	bl	80038b8 <MX_DMA_Init>
  MX_ADC2_Init();
 8003d42:	f7ff fb81 	bl	8003448 <MX_ADC2_Init>
  MX_DAC1_Init();
 8003d46:	f7ff fcb5 	bl	80036b4 <MX_DAC1_Init>
  MX_I2C1_Init();
 8003d4a:	f7ff fe97 	bl	8003a7c <MX_I2C1_Init>
  MX_I2C3_Init();
 8003d4e:	f7ff fed5 	bl	8003afc <MX_I2C3_Init>
  MX_TIM2_Init();
 8003d52:	f000 fb39 	bl	80043c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003d56:	f000 fbb9 	bl	80044cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8003d5a:	f000 fc1d 	bl	8004598 <MX_TIM4_Init>
  MX_UCPD1_Init();
 8003d5e:	f000 ffb3 	bl	8004cc8 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8003d62:	f001 f841 	bl	8004de8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003d66:	f001 f88f 	bl	8004e88 <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8003d6a:	f000 fc63 	bl	8004634 <MX_TIM15_Init>
  MX_TIM16_Init();
 8003d6e:	f000 fcb3 	bl	80046d8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	semb_cpltCllbck = xSemaphoreCreateBinary();
 8003d72:	2203      	movs	r2, #3
 8003d74:	2100      	movs	r1, #0
 8003d76:	2001      	movs	r0, #1
 8003d78:	f00e ff86 	bl	8012c88 <xQueueGenericCreate>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4a35      	ldr	r2, [pc, #212]	@ (8003e54 <main+0x128>)
 8003d80:	6013      	str	r3, [r2, #0]
	semb_halfCllbck = xSemaphoreCreateBinary();
 8003d82:	2203      	movs	r2, #3
 8003d84:	2100      	movs	r1, #0
 8003d86:	2001      	movs	r0, #1
 8003d88:	f00e ff7e 	bl	8012c88 <xQueueGenericCreate>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4a32      	ldr	r2, [pc, #200]	@ (8003e58 <main+0x12c>)
 8003d90:	6013      	str	r3, [r2, #0]

	asserv_init();
 8003d92:	f011 ffc5 	bl	8015d20 <asserv_init>
	shell_init();
 8003d96:	f012 f97d 	bl	8016094 <shell_init>
	lidar_init();
 8003d9a:	f00c f865 	bl	800fe68 <lidar_init>
	vPortGetHeapStats(&heapStats);
 8003d9e:	482f      	ldr	r0, [pc, #188]	@ (8003e5c <main+0x130>)
 8003da0:	f011 fbba 	bl	8015518 <vPortGetHeapStats>
	xTaskCreate(changeMode_run,			"Changement MODE", TASK_STACK_DEPTH_CHANGEMODE, NULL, TASK_PRIORITY_CHANGEMODE, &h_task_changemenMode) != pdPASS ? Error_Handler():(void)0;
 8003da4:	4b2e      	ldr	r3, [pc, #184]	@ (8003e60 <main+0x134>)
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	2301      	movs	r3, #1
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	2300      	movs	r3, #0
 8003dae:	2240      	movs	r2, #64	@ 0x40
 8003db0:	492c      	ldr	r1, [pc, #176]	@ (8003e64 <main+0x138>)
 8003db2:	482d      	ldr	r0, [pc, #180]	@ (8003e68 <main+0x13c>)
 8003db4:	f00f fd8e 	bl	80138d4 <xTaskCreate>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d001      	beq.n	8003dc2 <main+0x96>
 8003dbe:	f000 f8bb 	bl	8003f38 <Error_Handler>
	vPortGetHeapStats(&heapStats);
 8003dc2:	4826      	ldr	r0, [pc, #152]	@ (8003e5c <main+0x130>)
 8003dc4:	f011 fba8 	bl	8015518 <vPortGetHeapStats>
	//xTaskCreate(asserv_courant_run, 	"Asserv Courant", TASK_STACK_DEPTH_ASSERV_I, NULL, TASK_PRIORITY_ASSERV_I, &h_task_asserv_I) != pdPASS ? Error_Handler():(void)0;
	//vPortGetHeapStats(&heapStats);
	//xTaskCreate(asserv_position_run, 	"Asserv Position", TASK_STACK_DEPTH_ASSERV_XYZ, NULL, TASK_PRIORITY_ASSERV_XYZ, &h_task_asserv_XYZ) != pdPASS ? Error_Handler():(void)0;
	vPortGetHeapStats(&heapStats);
 8003dc8:	4824      	ldr	r0, [pc, #144]	@ (8003e5c <main+0x130>)
 8003dca:	f011 fba5 	bl	8015518 <vPortGetHeapStats>
	xTaskCreate(shell_run,				"Shell", TASK_STACK_DEPTH_SHELL, NULL, TASK_PRIORITY_SHELL, &h_task_shell) != pdPASS ? Error_Handler():(void)0;
 8003dce:	4b27      	ldr	r3, [pc, #156]	@ (8003e6c <main+0x140>)
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	2305      	movs	r3, #5
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ddc:	4924      	ldr	r1, [pc, #144]	@ (8003e70 <main+0x144>)
 8003dde:	4825      	ldr	r0, [pc, #148]	@ (8003e74 <main+0x148>)
 8003de0:	f00f fd78 	bl	80138d4 <xTaskCreate>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d001      	beq.n	8003dee <main+0xc2>
 8003dea:	f000 f8a5 	bl	8003f38 <Error_Handler>
	vPortGetHeapStats(&heapStats);
 8003dee:	481b      	ldr	r0, [pc, #108]	@ (8003e5c <main+0x130>)
 8003df0:	f011 fb92 	bl	8015518 <vPortGetHeapStats>
	xTaskCreate(lidarTake,				"LIDAR_Take", TASK_STACK_DEPTH_LIDAR, NULL, TASK_PRIORITY_LIDAR, &h_task_LIDAR_Take) != pdPASS ? Error_Handler():(void)0;
 8003df4:	4b20      	ldr	r3, [pc, #128]	@ (8003e78 <main+0x14c>)
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	2304      	movs	r3, #4
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e02:	491e      	ldr	r1, [pc, #120]	@ (8003e7c <main+0x150>)
 8003e04:	481e      	ldr	r0, [pc, #120]	@ (8003e80 <main+0x154>)
 8003e06:	f00f fd65 	bl	80138d4 <xTaskCreate>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d001      	beq.n	8003e14 <main+0xe8>
 8003e10:	f000 f892 	bl	8003f38 <Error_Handler>
	vPortGetHeapStats(&heapStats);
 8003e14:	4811      	ldr	r0, [pc, #68]	@ (8003e5c <main+0x130>)
 8003e16:	f011 fb7f 	bl	8015518 <vPortGetHeapStats>
	xTaskCreate(lidarprocess,			"LIDAR_Process", TASK_STACK_DEPTH_LIDAR, NULL, TASK_PRIORITY_LIDAR, &h_task_LIDAR_Process) != pdPASS ? Error_Handler():(void)0;
 8003e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e84 <main+0x158>)
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	2304      	movs	r3, #4
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	2300      	movs	r3, #0
 8003e24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e28:	4917      	ldr	r1, [pc, #92]	@ (8003e88 <main+0x15c>)
 8003e2a:	4818      	ldr	r0, [pc, #96]	@ (8003e8c <main+0x160>)
 8003e2c:	f00f fd52 	bl	80138d4 <xTaskCreate>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <main+0x10e>
 8003e36:	f000 f87f 	bl	8003f38 <Error_Handler>
	vPortGetHeapStats(&heapStats);
 8003e3a:	4808      	ldr	r0, [pc, #32]	@ (8003e5c <main+0x130>)
 8003e3c:	f011 fb6c 	bl	8015518 <vPortGetHeapStats>

	vTaskStartScheduler();
 8003e40:	f00f ffd0 	bl	8013de4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8003e44:	f011 fbc6 	bl	80155d4 <MX_USBPD_Init>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003e48:	f7ff fc12 	bl	8003670 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003e4c:	f00e fcea 	bl	8012824 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <main+0x124>
 8003e54:	200006e8 	.word	0x200006e8
 8003e58:	200006e4 	.word	0x200006e4
 8003e5c:	200006b0 	.word	0x200006b0
 8003e60:	200006d8 	.word	0x200006d8
 8003e64:	0801b4c8 	.word	0x0801b4c8
 8003e68:	0801600d 	.word	0x0801600d
 8003e6c:	200006cc 	.word	0x200006cc
 8003e70:	0801b4d8 	.word	0x0801b4d8
 8003e74:	08016131 	.word	0x08016131
 8003e78:	200006dc 	.word	0x200006dc
 8003e7c:	0801b4e0 	.word	0x0801b4e0
 8003e80:	0800fec1 	.word	0x0800fec1
 8003e84:	200006e0 	.word	0x200006e0
 8003e88:	0801b4ec 	.word	0x0801b4ec
 8003e8c:	0800ff39 	.word	0x0800ff39

08003e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b094      	sub	sp, #80	@ 0x50
 8003e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e96:	f107 0318 	add.w	r3, r7, #24
 8003e9a:	2238      	movs	r2, #56	@ 0x38
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f014 fd86 	bl	80189b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ea4:	1d3b      	adds	r3, r7, #4
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	605a      	str	r2, [r3, #4]
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	60da      	str	r2, [r3, #12]
 8003eb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eb2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003eb6:	f005 fc27 	bl	8009708 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ebe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ec4:	2340      	movs	r3, #64	@ 0x40
 8003ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ecc:	f107 0318 	add.w	r3, r7, #24
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f005 fcbd 	bl	8009850 <HAL_RCC_OscConfig>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003edc:	f000 f82c 	bl	8003f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ee0:	230f      	movs	r3, #15
 8003ee2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003ef4:	1d3b      	adds	r3, r7, #4
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f005 ffbb 	bl	8009e74 <HAL_RCC_ClockConfig>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003f04:	f000 f818 	bl	8003f38 <Error_Handler>
  }
}
 8003f08:	bf00      	nop
 8003f0a:	3750      	adds	r7, #80	@ 0x50
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	CUSTOM_TIM_PeriodElapsedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f011 ff09 	bl	8015d30 <CUSTOM_TIM_PeriodElapsedCallback>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a04      	ldr	r2, [pc, #16]	@ (8003f34 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d101      	bne.n	8003f2c <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 8003f28:	f001 ffd8 	bl	8005edc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40014800 	.word	0x40014800

08003f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f3c:	b672      	cpsid	i
}
 8003f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003f40:	bf00      	nop
 8003f42:	e7fd      	b.n	8003f40 <Error_Handler+0x8>

08003f44 <__io_putchar>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003f4c:	1d39      	adds	r1, r7, #4
 8003f4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f52:	2201      	movs	r2, #1
 8003f54:	4803      	ldr	r0, [pc, #12]	@ (8003f64 <__io_putchar+0x20>)
 8003f56:	f008 fa4b 	bl	800c3f0 <HAL_UART_Transmit>
	return ch;
 8003f5a:	687b      	ldr	r3, [r7, #4]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20000bb8 	.word	0x20000bb8

08003f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6e:	4b11      	ldr	r3, [pc, #68]	@ (8003fb4 <HAL_MspInit+0x4c>)
 8003f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f72:	4a10      	ldr	r2, [pc, #64]	@ (8003fb4 <HAL_MspInit+0x4c>)
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb4 <HAL_MspInit+0x4c>)
 8003f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	607b      	str	r3, [r7, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f86:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb4 <HAL_MspInit+0x4c>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb4 <HAL_MspInit+0x4c>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f90:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f92:	4b08      	ldr	r3, [pc, #32]	@ (8003fb4 <HAL_MspInit+0x4c>)
 8003f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	210f      	movs	r1, #15
 8003fa2:	f06f 0001 	mvn.w	r0, #1
 8003fa6:	f003 fed7 	bl	8007d58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000

08003fb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08c      	sub	sp, #48	@ 0x30
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8004088 <HAL_InitTick+0xd0>)
 8003fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fcc:	4a2e      	ldr	r2, [pc, #184]	@ (8004088 <HAL_InitTick+0xd0>)
 8003fce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fd2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8004088 <HAL_InitTick+0xd0>)
 8003fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003fe0:	f107 020c 	add.w	r2, r7, #12
 8003fe4:	f107 0310 	add.w	r3, r7, #16
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f006 f918 	bl	800a220 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003ff0:	f006 f900 	bl	800a1f4 <HAL_RCC_GetPCLK2Freq>
 8003ff4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff8:	4a24      	ldr	r2, [pc, #144]	@ (800408c <HAL_InitTick+0xd4>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	0c9b      	lsrs	r3, r3, #18
 8004000:	3b01      	subs	r3, #1
 8004002:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8004004:	4b22      	ldr	r3, [pc, #136]	@ (8004090 <HAL_InitTick+0xd8>)
 8004006:	4a23      	ldr	r2, [pc, #140]	@ (8004094 <HAL_InitTick+0xdc>)
 8004008:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800400a:	4b21      	ldr	r3, [pc, #132]	@ (8004090 <HAL_InitTick+0xd8>)
 800400c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004010:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8004012:	4a1f      	ldr	r2, [pc, #124]	@ (8004090 <HAL_InitTick+0xd8>)
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8004018:	4b1d      	ldr	r3, [pc, #116]	@ (8004090 <HAL_InitTick+0xd8>)
 800401a:	2200      	movs	r2, #0
 800401c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800401e:	4b1c      	ldr	r3, [pc, #112]	@ (8004090 <HAL_InitTick+0xd8>)
 8004020:	2200      	movs	r2, #0
 8004022:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8004024:	481a      	ldr	r0, [pc, #104]	@ (8004090 <HAL_InitTick+0xd8>)
 8004026:	f006 fb63 	bl	800a6f0 <HAL_TIM_Base_Init>
 800402a:	4603      	mov	r3, r0
 800402c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8004030:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004034:	2b00      	cmp	r3, #0
 8004036:	d11b      	bne.n	8004070 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8004038:	4815      	ldr	r0, [pc, #84]	@ (8004090 <HAL_InitTick+0xd8>)
 800403a:	f006 fc47 	bl	800a8cc <HAL_TIM_Base_Start_IT>
 800403e:	4603      	mov	r3, r0
 8004040:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8004044:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004048:	2b00      	cmp	r3, #0
 800404a:	d111      	bne.n	8004070 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800404c:	201a      	movs	r0, #26
 800404e:	f003 fe9d 	bl	8007d8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b0f      	cmp	r3, #15
 8004056:	d808      	bhi.n	800406a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8004058:	2200      	movs	r2, #0
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	201a      	movs	r0, #26
 800405e:	f003 fe7b 	bl	8007d58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004062:	4a0d      	ldr	r2, [pc, #52]	@ (8004098 <HAL_InitTick+0xe0>)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	e002      	b.n	8004070 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  HAL_TIM_RegisterCallback(&htim17, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 8004070:	4a0a      	ldr	r2, [pc, #40]	@ (800409c <HAL_InitTick+0xe4>)
 8004072:	210e      	movs	r1, #14
 8004074:	4806      	ldr	r0, [pc, #24]	@ (8004090 <HAL_InitTick+0xd8>)
 8004076:	f007 fa6f 	bl	800b558 <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 800407a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800407e:	4618      	mov	r0, r3
 8004080:	3730      	adds	r7, #48	@ 0x30
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	431bde83 	.word	0x431bde83
 8004090:	200006ec 	.word	0x200006ec
 8004094:	40014800 	.word	0x40014800
 8004098:	20000138 	.word	0x20000138
 800409c:	080040a1 	.word	0x080040a1

080040a0 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 80040a8:	f001 ff18 	bl	8005edc <HAL_IncTick>
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80040b8:	bf00      	nop
 80040ba:	e7fd      	b.n	80040b8 <NMI_Handler+0x4>

080040bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040c0:	bf00      	nop
 80040c2:	e7fd      	b.n	80040c0 <HardFault_Handler+0x4>

080040c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040c8:	bf00      	nop
 80040ca:	e7fd      	b.n	80040c8 <MemManage_Handler+0x4>

080040cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040d0:	bf00      	nop
 80040d2:	e7fd      	b.n	80040d0 <BusFault_Handler+0x4>

080040d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040d8:	bf00      	nop
 80040da:	e7fd      	b.n	80040d8 <UsageFault_Handler+0x4>

080040dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80040ea:	b480      	push	{r7}
 80040ec:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80040ee:	bf00      	nop
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800410c:	4802      	ldr	r0, [pc, #8]	@ (8004118 <DMA1_Channel3_IRQHandler+0x10>)
 800410e:	f004 fa08 	bl	8008522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000590 	.word	0x20000590

0800411c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004120:	4802      	ldr	r0, [pc, #8]	@ (800412c <DMA1_Channel4_IRQHandler+0x10>)
 8004122:	f004 f9fe 	bl	8008522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000ce0 	.word	0x20000ce0

08004130 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8004134:	4802      	ldr	r0, [pc, #8]	@ (8004140 <ADC1_2_IRQHandler+0x10>)
 8004136:	f002 fc39 	bl	80069ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000524 	.word	0x20000524

08004144 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004148:	4802      	ldr	r0, [pc, #8]	@ (8004154 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800414a:	f006 fe23 	bl	800ad94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000a20 	.word	0x20000a20

08004158 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800415c:	4802      	ldr	r0, [pc, #8]	@ (8004168 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800415e:	f006 fe19 	bl	800ad94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000aec 	.word	0x20000aec

0800416c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004170:	4802      	ldr	r0, [pc, #8]	@ (800417c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8004172:	f006 fe0f 	bl	800ad94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	200006ec 	.word	0x200006ec

08004180 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004184:	4802      	ldr	r0, [pc, #8]	@ (8004190 <USART1_IRQHandler+0x10>)
 8004186:	f008 fc35 	bl	800c9f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000bb8 	.word	0x20000bb8

08004194 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004198:	4802      	ldr	r0, [pc, #8]	@ (80041a4 <USART2_IRQHandler+0x10>)
 800419a:	f008 fc2b 	bl	800c9f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000c4c 	.word	0x20000c4c

080041a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
	xTaskNotifyFromISR(h_task_changemenMode,
 80041b2:	4b14      	ldr	r3, [pc, #80]	@ (8004204 <EXTI15_10_IRQHandler+0x5c>)
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	1d3b      	adds	r3, r7, #4
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	2300      	movs	r3, #0
 80041bc:	2201      	movs	r2, #1
 80041be:	2101      	movs	r1, #1
 80041c0:	f010 fc20 	bl	8014a04 <xTaskGenericNotifyFromISR>
			1,
			eSetBits,
			&pxHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d007      	beq.n	80041da <EXTI15_10_IRQHandler+0x32>
 80041ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004208 <EXTI15_10_IRQHandler+0x60>)
 80041cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXP_EXTI_Pin);
 80041da:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80041de:	f004 fc89 	bl	8008af4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_INITIAL_STATE_Pin);
 80041e2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80041e6:	f004 fc85 	bl	8008af4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_START_ROBOT_Pin);
 80041ea:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80041ee:	f004 fc81 	bl	8008af4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MOUSTACHE_1_Pin);
 80041f2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80041f6:	f004 fc7d 	bl	8008af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	200006d8 	.word	0x200006d8
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */

  /* USER CODE END UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 8004210:	f00c fd17 	bl	8010c42 <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 8004214:	bf00      	nop
 8004216:	bd80      	pop	{r7, pc}

08004218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return 1;
 800421c:	2301      	movs	r3, #1
}
 800421e:	4618      	mov	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <_kill>:

int _kill(int pid, int sig)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004232:	f014 fc2f 	bl	8018a94 <__errno>
 8004236:	4603      	mov	r3, r0
 8004238:	2216      	movs	r2, #22
 800423a:	601a      	str	r2, [r3, #0]
  return -1;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <_exit>:

void _exit (int status)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004250:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ffe7 	bl	8004228 <_kill>
  while (1) {}    /* Make sure we hang here */
 800425a:	bf00      	nop
 800425c:	e7fd      	b.n	800425a <_exit+0x12>

0800425e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b086      	sub	sp, #24
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	e00a      	b.n	8004286 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004270:	f3af 8000 	nop.w
 8004274:	4601      	mov	r1, r0
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	60ba      	str	r2, [r7, #8]
 800427c:	b2ca      	uxtb	r2, r1
 800427e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	3301      	adds	r3, #1
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	429a      	cmp	r2, r3
 800428c:	dbf0      	blt.n	8004270 <_read+0x12>
  }

  return len;
 800428e:	687b      	ldr	r3, [r7, #4]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e009      	b.n	80042be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	60ba      	str	r2, [r7, #8]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fe46 	bl	8003f44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	3301      	adds	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	dbf1      	blt.n	80042aa <_write+0x12>
  }
  return len;
 80042c6:	687b      	ldr	r3, [r7, #4]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <_close>:

int _close(int file)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042f8:	605a      	str	r2, [r3, #4]
  return 0;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <_isatty>:

int _isatty(int file)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004310:	2301      	movs	r3, #1
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004340:	4a14      	ldr	r2, [pc, #80]	@ (8004394 <_sbrk+0x5c>)
 8004342:	4b15      	ldr	r3, [pc, #84]	@ (8004398 <_sbrk+0x60>)
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800434c:	4b13      	ldr	r3, [pc, #76]	@ (800439c <_sbrk+0x64>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004354:	4b11      	ldr	r3, [pc, #68]	@ (800439c <_sbrk+0x64>)
 8004356:	4a12      	ldr	r2, [pc, #72]	@ (80043a0 <_sbrk+0x68>)
 8004358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800435a:	4b10      	ldr	r3, [pc, #64]	@ (800439c <_sbrk+0x64>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	429a      	cmp	r2, r3
 8004366:	d207      	bcs.n	8004378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004368:	f014 fb94 	bl	8018a94 <__errno>
 800436c:	4603      	mov	r3, r0
 800436e:	220c      	movs	r2, #12
 8004370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004376:	e009      	b.n	800438c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004378:	4b08      	ldr	r3, [pc, #32]	@ (800439c <_sbrk+0x64>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800437e:	4b07      	ldr	r3, [pc, #28]	@ (800439c <_sbrk+0x64>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	4a05      	ldr	r2, [pc, #20]	@ (800439c <_sbrk+0x64>)
 8004388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800438a:	68fb      	ldr	r3, [r7, #12]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20008000 	.word	0x20008000
 8004398:	00000400 	.word	0x00000400
 800439c:	200007b8 	.word	0x200007b8
 80043a0:	20007808 	.word	0x20007808

080043a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043a8:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <SystemInit+0x20>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ae:	4a05      	ldr	r2, [pc, #20]	@ (80043c4 <SystemInit+0x20>)
 80043b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b8:	bf00      	nop
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08e      	sub	sp, #56	@ 0x38
 80043cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	605a      	str	r2, [r3, #4]
 80043d8:	609a      	str	r2, [r3, #8]
 80043da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043dc:	f107 031c 	add.w	r3, r7, #28
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043e8:	463b      	mov	r3, r7
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	605a      	str	r2, [r3, #4]
 80043f0:	609a      	str	r2, [r3, #8]
 80043f2:	60da      	str	r2, [r3, #12]
 80043f4:	611a      	str	r2, [r3, #16]
 80043f6:	615a      	str	r2, [r3, #20]
 80043f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80043fa:	4b33      	ldr	r3, [pc, #204]	@ (80044c8 <MX_TIM2_Init+0x100>)
 80043fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004400:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004402:	4b31      	ldr	r3, [pc, #196]	@ (80044c8 <MX_TIM2_Init+0x100>)
 8004404:	2200      	movs	r2, #0
 8004406:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004408:	4b2f      	ldr	r3, [pc, #188]	@ (80044c8 <MX_TIM2_Init+0x100>)
 800440a:	2200      	movs	r2, #0
 800440c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 639;
 800440e:	4b2e      	ldr	r3, [pc, #184]	@ (80044c8 <MX_TIM2_Init+0x100>)
 8004410:	f240 227f 	movw	r2, #639	@ 0x27f
 8004414:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004416:	4b2c      	ldr	r3, [pc, #176]	@ (80044c8 <MX_TIM2_Init+0x100>)
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800441c:	4b2a      	ldr	r3, [pc, #168]	@ (80044c8 <MX_TIM2_Init+0x100>)
 800441e:	2200      	movs	r2, #0
 8004420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004422:	4829      	ldr	r0, [pc, #164]	@ (80044c8 <MX_TIM2_Init+0x100>)
 8004424:	f006 f964 	bl	800a6f0 <HAL_TIM_Base_Init>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800442e:	f7ff fd83 	bl	8003f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004432:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004436:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004438:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800443c:	4619      	mov	r1, r3
 800443e:	4822      	ldr	r0, [pc, #136]	@ (80044c8 <MX_TIM2_Init+0x100>)
 8004440:	f006 ff36 	bl	800b2b0 <HAL_TIM_ConfigClockSource>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800444a:	f7ff fd75 	bl	8003f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800444e:	481e      	ldr	r0, [pc, #120]	@ (80044c8 <MX_TIM2_Init+0x100>)
 8004450:	f006 faa6 	bl	800a9a0 <HAL_TIM_PWM_Init>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800445a:	f7ff fd6d 	bl	8003f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800445e:	2300      	movs	r3, #0
 8004460:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004462:	2300      	movs	r3, #0
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004466:	f107 031c 	add.w	r3, r7, #28
 800446a:	4619      	mov	r1, r3
 800446c:	4816      	ldr	r0, [pc, #88]	@ (80044c8 <MX_TIM2_Init+0x100>)
 800446e:	f007 fe9d 	bl	800c1ac <HAL_TIMEx_MasterConfigSynchronization>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004478:	f7ff fd5e 	bl	8003f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800447c:	2360      	movs	r3, #96	@ 0x60
 800447e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004484:	2300      	movs	r3, #0
 8004486:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800448c:	463b      	mov	r3, r7
 800448e:	2208      	movs	r2, #8
 8004490:	4619      	mov	r1, r3
 8004492:	480d      	ldr	r0, [pc, #52]	@ (80044c8 <MX_TIM2_Init+0x100>)
 8004494:	f006 fdf8 	bl	800b088 <HAL_TIM_PWM_ConfigChannel>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800449e:	f7ff fd4b 	bl	8003f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80044a2:	463b      	mov	r3, r7
 80044a4:	220c      	movs	r2, #12
 80044a6:	4619      	mov	r1, r3
 80044a8:	4807      	ldr	r0, [pc, #28]	@ (80044c8 <MX_TIM2_Init+0x100>)
 80044aa:	f006 fded 	bl	800b088 <HAL_TIM_PWM_ConfigChannel>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80044b4:	f7ff fd40 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80044b8:	4803      	ldr	r0, [pc, #12]	@ (80044c8 <MX_TIM2_Init+0x100>)
 80044ba:	f000 f9bb 	bl	8004834 <HAL_TIM_MspPostInit>

}
 80044be:	bf00      	nop
 80044c0:	3738      	adds	r7, #56	@ 0x38
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	200007bc 	.word	0x200007bc

080044cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	@ 0x28
 80044d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044d2:	f107 031c 	add.w	r3, r7, #28
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044de:	463b      	mov	r3, r7
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	611a      	str	r2, [r3, #16]
 80044ec:	615a      	str	r2, [r3, #20]
 80044ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044f0:	4b27      	ldr	r3, [pc, #156]	@ (8004590 <MX_TIM3_Init+0xc4>)
 80044f2:	4a28      	ldr	r2, [pc, #160]	@ (8004594 <MX_TIM3_Init+0xc8>)
 80044f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80044f6:	4b26      	ldr	r3, [pc, #152]	@ (8004590 <MX_TIM3_Init+0xc4>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044fc:	4b24      	ldr	r3, [pc, #144]	@ (8004590 <MX_TIM3_Init+0xc4>)
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 639;
 8004502:	4b23      	ldr	r3, [pc, #140]	@ (8004590 <MX_TIM3_Init+0xc4>)
 8004504:	f240 227f 	movw	r2, #639	@ 0x27f
 8004508:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800450a:	4b21      	ldr	r3, [pc, #132]	@ (8004590 <MX_TIM3_Init+0xc4>)
 800450c:	2200      	movs	r2, #0
 800450e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004510:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <MX_TIM3_Init+0xc4>)
 8004512:	2200      	movs	r2, #0
 8004514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004516:	481e      	ldr	r0, [pc, #120]	@ (8004590 <MX_TIM3_Init+0xc4>)
 8004518:	f006 fa42 	bl	800a9a0 <HAL_TIM_PWM_Init>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8004522:	f7ff fd09 	bl	8003f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800452e:	f107 031c 	add.w	r3, r7, #28
 8004532:	4619      	mov	r1, r3
 8004534:	4816      	ldr	r0, [pc, #88]	@ (8004590 <MX_TIM3_Init+0xc4>)
 8004536:	f007 fe39 	bl	800c1ac <HAL_TIMEx_MasterConfigSynchronization>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004540:	f7ff fcfa 	bl	8003f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004544:	2360      	movs	r3, #96	@ 0x60
 8004546:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004554:	463b      	mov	r3, r7
 8004556:	2208      	movs	r2, #8
 8004558:	4619      	mov	r1, r3
 800455a:	480d      	ldr	r0, [pc, #52]	@ (8004590 <MX_TIM3_Init+0xc4>)
 800455c:	f006 fd94 	bl	800b088 <HAL_TIM_PWM_ConfigChannel>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004566:	f7ff fce7 	bl	8003f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800456a:	463b      	mov	r3, r7
 800456c:	220c      	movs	r2, #12
 800456e:	4619      	mov	r1, r3
 8004570:	4807      	ldr	r0, [pc, #28]	@ (8004590 <MX_TIM3_Init+0xc4>)
 8004572:	f006 fd89 	bl	800b088 <HAL_TIM_PWM_ConfigChannel>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800457c:	f7ff fcdc 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004580:	4803      	ldr	r0, [pc, #12]	@ (8004590 <MX_TIM3_Init+0xc4>)
 8004582:	f000 f957 	bl	8004834 <HAL_TIM_MspPostInit>

}
 8004586:	bf00      	nop
 8004588:	3728      	adds	r7, #40	@ 0x28
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000888 	.word	0x20000888
 8004594:	40000400 	.word	0x40000400

08004598 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800459e:	f107 0310 	add.w	r3, r7, #16
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	605a      	str	r2, [r3, #4]
 80045a8:	609a      	str	r2, [r3, #8]
 80045aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045ac:	1d3b      	adds	r3, r7, #4
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	605a      	str	r2, [r3, #4]
 80045b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80045b6:	4b1d      	ldr	r3, [pc, #116]	@ (800462c <MX_TIM4_Init+0x94>)
 80045b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004630 <MX_TIM4_Init+0x98>)
 80045ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80045bc:	4b1b      	ldr	r3, [pc, #108]	@ (800462c <MX_TIM4_Init+0x94>)
 80045be:	2200      	movs	r2, #0
 80045c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c2:	4b1a      	ldr	r3, [pc, #104]	@ (800462c <MX_TIM4_Init+0x94>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80045c8:	4b18      	ldr	r3, [pc, #96]	@ (800462c <MX_TIM4_Init+0x94>)
 80045ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d0:	4b16      	ldr	r3, [pc, #88]	@ (800462c <MX_TIM4_Init+0x94>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045d6:	4b15      	ldr	r3, [pc, #84]	@ (800462c <MX_TIM4_Init+0x94>)
 80045d8:	2200      	movs	r2, #0
 80045da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80045dc:	4813      	ldr	r0, [pc, #76]	@ (800462c <MX_TIM4_Init+0x94>)
 80045de:	f006 f887 	bl	800a6f0 <HAL_TIM_Base_Init>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80045e8:	f7ff fca6 	bl	8003f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80045f2:	f107 0310 	add.w	r3, r7, #16
 80045f6:	4619      	mov	r1, r3
 80045f8:	480c      	ldr	r0, [pc, #48]	@ (800462c <MX_TIM4_Init+0x94>)
 80045fa:	f006 fe59 	bl	800b2b0 <HAL_TIM_ConfigClockSource>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004604:	f7ff fc98 	bl	8003f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004608:	2300      	movs	r3, #0
 800460a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004610:	1d3b      	adds	r3, r7, #4
 8004612:	4619      	mov	r1, r3
 8004614:	4805      	ldr	r0, [pc, #20]	@ (800462c <MX_TIM4_Init+0x94>)
 8004616:	f007 fdc9 	bl	800c1ac <HAL_TIMEx_MasterConfigSynchronization>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004620:	f7ff fc8a 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004624:	bf00      	nop
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000954 	.word	0x20000954
 8004630:	40000800 	.word	0x40000800

08004634 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800463a:	f107 0310 	add.w	r3, r7, #16
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	609a      	str	r2, [r3, #8]
 8004646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004652:	4b1f      	ldr	r3, [pc, #124]	@ (80046d0 <MX_TIM15_Init+0x9c>)
 8004654:	4a1f      	ldr	r2, [pc, #124]	@ (80046d4 <MX_TIM15_Init+0xa0>)
 8004656:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 999;
 8004658:	4b1d      	ldr	r3, [pc, #116]	@ (80046d0 <MX_TIM15_Init+0x9c>)
 800465a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800465e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004660:	4b1b      	ldr	r3, [pc, #108]	@ (80046d0 <MX_TIM15_Init+0x9c>)
 8004662:	2200      	movs	r2, #0
 8004664:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 15999;
 8004666:	4b1a      	ldr	r3, [pc, #104]	@ (80046d0 <MX_TIM15_Init+0x9c>)
 8004668:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800466c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800466e:	4b18      	ldr	r3, [pc, #96]	@ (80046d0 <MX_TIM15_Init+0x9c>)
 8004670:	2200      	movs	r2, #0
 8004672:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004674:	4b16      	ldr	r3, [pc, #88]	@ (80046d0 <MX_TIM15_Init+0x9c>)
 8004676:	2200      	movs	r2, #0
 8004678:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800467a:	4b15      	ldr	r3, [pc, #84]	@ (80046d0 <MX_TIM15_Init+0x9c>)
 800467c:	2280      	movs	r2, #128	@ 0x80
 800467e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004680:	4813      	ldr	r0, [pc, #76]	@ (80046d0 <MX_TIM15_Init+0x9c>)
 8004682:	f006 f835 	bl	800a6f0 <HAL_TIM_Base_Init>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 800468c:	f7ff fc54 	bl	8003f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004694:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004696:	f107 0310 	add.w	r3, r7, #16
 800469a:	4619      	mov	r1, r3
 800469c:	480c      	ldr	r0, [pc, #48]	@ (80046d0 <MX_TIM15_Init+0x9c>)
 800469e:	f006 fe07 	bl	800b2b0 <HAL_TIM_ConfigClockSource>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80046a8:	f7ff fc46 	bl	8003f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80046ac:	2320      	movs	r3, #32
 80046ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80046b4:	1d3b      	adds	r3, r7, #4
 80046b6:	4619      	mov	r1, r3
 80046b8:	4805      	ldr	r0, [pc, #20]	@ (80046d0 <MX_TIM15_Init+0x9c>)
 80046ba:	f007 fd77 	bl	800c1ac <HAL_TIMEx_MasterConfigSynchronization>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80046c4:	f7ff fc38 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80046c8:	bf00      	nop
 80046ca:	3720      	adds	r7, #32
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20000a20 	.word	0x20000a20
 80046d4:	40014000 	.word	0x40014000

080046d8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80046dc:	4b0f      	ldr	r3, [pc, #60]	@ (800471c <MX_TIM16_Init+0x44>)
 80046de:	4a10      	ldr	r2, [pc, #64]	@ (8004720 <MX_TIM16_Init+0x48>)
 80046e0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9;
 80046e2:	4b0e      	ldr	r3, [pc, #56]	@ (800471c <MX_TIM16_Init+0x44>)
 80046e4:	2209      	movs	r2, #9
 80046e6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046e8:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <MX_TIM16_Init+0x44>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 15999;
 80046ee:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <MX_TIM16_Init+0x44>)
 80046f0:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80046f4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046f6:	4b09      	ldr	r3, [pc, #36]	@ (800471c <MX_TIM16_Init+0x44>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80046fc:	4b07      	ldr	r3, [pc, #28]	@ (800471c <MX_TIM16_Init+0x44>)
 80046fe:	2200      	movs	r2, #0
 8004700:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004702:	4b06      	ldr	r3, [pc, #24]	@ (800471c <MX_TIM16_Init+0x44>)
 8004704:	2200      	movs	r2, #0
 8004706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004708:	4804      	ldr	r0, [pc, #16]	@ (800471c <MX_TIM16_Init+0x44>)
 800470a:	f005 fff1 	bl	800a6f0 <HAL_TIM_Base_Init>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004714:	f7ff fc10 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004718:	bf00      	nop
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000aec 	.word	0x20000aec
 8004720:	40014400 	.word	0x40014400

08004724 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004734:	d10c      	bne.n	8004750 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004736:	4b2b      	ldr	r3, [pc, #172]	@ (80047e4 <HAL_TIM_Base_MspInit+0xc0>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473a:	4a2a      	ldr	r2, [pc, #168]	@ (80047e4 <HAL_TIM_Base_MspInit+0xc0>)
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	6593      	str	r3, [r2, #88]	@ 0x58
 8004742:	4b28      	ldr	r3, [pc, #160]	@ (80047e4 <HAL_TIM_Base_MspInit+0xc0>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800474e:	e044      	b.n	80047da <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a24      	ldr	r2, [pc, #144]	@ (80047e8 <HAL_TIM_Base_MspInit+0xc4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d10c      	bne.n	8004774 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800475a:	4b22      	ldr	r3, [pc, #136]	@ (80047e4 <HAL_TIM_Base_MspInit+0xc0>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475e:	4a21      	ldr	r2, [pc, #132]	@ (80047e4 <HAL_TIM_Base_MspInit+0xc0>)
 8004760:	f043 0304 	orr.w	r3, r3, #4
 8004764:	6593      	str	r3, [r2, #88]	@ 0x58
 8004766:	4b1f      	ldr	r3, [pc, #124]	@ (80047e4 <HAL_TIM_Base_MspInit+0xc0>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	693b      	ldr	r3, [r7, #16]
}
 8004772:	e032      	b.n	80047da <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM15)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1c      	ldr	r2, [pc, #112]	@ (80047ec <HAL_TIM_Base_MspInit+0xc8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d114      	bne.n	80047a8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800477e:	4b19      	ldr	r3, [pc, #100]	@ (80047e4 <HAL_TIM_Base_MspInit+0xc0>)
 8004780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004782:	4a18      	ldr	r2, [pc, #96]	@ (80047e4 <HAL_TIM_Base_MspInit+0xc0>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004788:	6613      	str	r3, [r2, #96]	@ 0x60
 800478a:	4b16      	ldr	r3, [pc, #88]	@ (80047e4 <HAL_TIM_Base_MspInit+0xc0>)
 800478c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800478e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8004796:	2200      	movs	r2, #0
 8004798:	2105      	movs	r1, #5
 800479a:	2018      	movs	r0, #24
 800479c:	f003 fadc 	bl	8007d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80047a0:	2018      	movs	r0, #24
 80047a2:	f003 faf3 	bl	8007d8c <HAL_NVIC_EnableIRQ>
}
 80047a6:	e018      	b.n	80047da <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a10      	ldr	r2, [pc, #64]	@ (80047f0 <HAL_TIM_Base_MspInit+0xcc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d113      	bne.n	80047da <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80047b2:	4b0c      	ldr	r3, [pc, #48]	@ (80047e4 <HAL_TIM_Base_MspInit+0xc0>)
 80047b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b6:	4a0b      	ldr	r2, [pc, #44]	@ (80047e4 <HAL_TIM_Base_MspInit+0xc0>)
 80047b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80047be:	4b09      	ldr	r3, [pc, #36]	@ (80047e4 <HAL_TIM_Base_MspInit+0xc0>)
 80047c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80047ca:	2200      	movs	r2, #0
 80047cc:	2105      	movs	r1, #5
 80047ce:	2019      	movs	r0, #25
 80047d0:	f003 fac2 	bl	8007d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80047d4:	2019      	movs	r0, #25
 80047d6:	f003 fad9 	bl	8007d8c <HAL_NVIC_EnableIRQ>
}
 80047da:	bf00      	nop
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40014000 	.word	0x40014000
 80047f0:	40014400 	.word	0x40014400

080047f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a0a      	ldr	r2, [pc, #40]	@ (800482c <HAL_TIM_PWM_MspInit+0x38>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10b      	bne.n	800481e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004806:	4b0a      	ldr	r3, [pc, #40]	@ (8004830 <HAL_TIM_PWM_MspInit+0x3c>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480a:	4a09      	ldr	r2, [pc, #36]	@ (8004830 <HAL_TIM_PWM_MspInit+0x3c>)
 800480c:	f043 0302 	orr.w	r3, r3, #2
 8004810:	6593      	str	r3, [r2, #88]	@ 0x58
 8004812:	4b07      	ldr	r3, [pc, #28]	@ (8004830 <HAL_TIM_PWM_MspInit+0x3c>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40000400 	.word	0x40000400
 8004830:	40021000 	.word	0x40021000

08004834 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	@ 0x28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483c:	f107 0314 	add.w	r3, r7, #20
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004854:	d11d      	bne.n	8004892 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004856:	4b21      	ldr	r3, [pc, #132]	@ (80048dc <HAL_TIM_MspPostInit+0xa8>)
 8004858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485a:	4a20      	ldr	r2, [pc, #128]	@ (80048dc <HAL_TIM_MspPostInit+0xa8>)
 800485c:	f043 0302 	orr.w	r3, r3, #2
 8004860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004862:	4b1e      	ldr	r3, [pc, #120]	@ (80048dc <HAL_TIM_MspPostInit+0xa8>)
 8004864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = DRIVER_REV1_Pin|DRIVER_FWD1_Pin;
 800486e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004874:	2302      	movs	r3, #2
 8004876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800487c:	2300      	movs	r3, #0
 800487e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004880:	2301      	movs	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004884:	f107 0314 	add.w	r3, r7, #20
 8004888:	4619      	mov	r1, r3
 800488a:	4815      	ldr	r0, [pc, #84]	@ (80048e0 <HAL_TIM_MspPostInit+0xac>)
 800488c:	f003 ff98 	bl	80087c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004890:	e020      	b.n	80048d4 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a13      	ldr	r2, [pc, #76]	@ (80048e4 <HAL_TIM_MspPostInit+0xb0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d11b      	bne.n	80048d4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800489c:	4b0f      	ldr	r3, [pc, #60]	@ (80048dc <HAL_TIM_MspPostInit+0xa8>)
 800489e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a0:	4a0e      	ldr	r2, [pc, #56]	@ (80048dc <HAL_TIM_MspPostInit+0xa8>)
 80048a2:	f043 0302 	orr.w	r3, r3, #2
 80048a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048a8:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <HAL_TIM_MspPostInit+0xa8>)
 80048aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRIVER_FWD2_Pin|DRIVER_REV2_Pin;
 80048b4:	2303      	movs	r3, #3
 80048b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b8:	2302      	movs	r3, #2
 80048ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048c0:	2300      	movs	r3, #0
 80048c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80048c4:	2302      	movs	r3, #2
 80048c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	4619      	mov	r1, r3
 80048ce:	4804      	ldr	r0, [pc, #16]	@ (80048e0 <HAL_TIM_MspPostInit+0xac>)
 80048d0:	f003 ff76 	bl	80087c0 <HAL_GPIO_Init>
}
 80048d4:	bf00      	nop
 80048d6:	3728      	adds	r7, #40	@ 0x28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	48000400 	.word	0x48000400
 80048e4:	40000400 	.word	0x40000400

080048e8 <__NVIC_GetPriorityGrouping>:
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048ec:	4b04      	ldr	r3, [pc, #16]	@ (8004900 <__NVIC_GetPriorityGrouping+0x18>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	0a1b      	lsrs	r3, r3, #8
 80048f2:	f003 0307 	and.w	r3, r3, #7
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <__NVIC_EnableIRQ>:
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800490e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004912:	2b00      	cmp	r3, #0
 8004914:	db0b      	blt.n	800492e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	f003 021f 	and.w	r2, r3, #31
 800491c:	4907      	ldr	r1, [pc, #28]	@ (800493c <__NVIC_EnableIRQ+0x38>)
 800491e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	2001      	movs	r0, #1
 8004926:	fa00 f202 	lsl.w	r2, r0, r2
 800492a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	e000e100 	.word	0xe000e100

08004940 <__NVIC_SetPriority>:
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	6039      	str	r1, [r7, #0]
 800494a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800494c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004950:	2b00      	cmp	r3, #0
 8004952:	db0a      	blt.n	800496a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	490c      	ldr	r1, [pc, #48]	@ (800498c <__NVIC_SetPriority+0x4c>)
 800495a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495e:	0112      	lsls	r2, r2, #4
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	440b      	add	r3, r1
 8004964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004968:	e00a      	b.n	8004980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	4908      	ldr	r1, [pc, #32]	@ (8004990 <__NVIC_SetPriority+0x50>)
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	3b04      	subs	r3, #4
 8004978:	0112      	lsls	r2, r2, #4
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	440b      	add	r3, r1
 800497e:	761a      	strb	r2, [r3, #24]
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	e000e100 	.word	0xe000e100
 8004990:	e000ed00 	.word	0xe000ed00

08004994 <NVIC_EncodePriority>:
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	@ 0x24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f1c3 0307 	rsb	r3, r3, #7
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	bf28      	it	cs
 80049b2:	2304      	movcs	r3, #4
 80049b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	3304      	adds	r3, #4
 80049ba:	2b06      	cmp	r3, #6
 80049bc:	d902      	bls.n	80049c4 <NVIC_EncodePriority+0x30>
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	3b03      	subs	r3, #3
 80049c2:	e000      	b.n	80049c6 <NVIC_EncodePriority+0x32>
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43da      	mvns	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	401a      	ands	r2, r3
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	fa01 f303 	lsl.w	r3, r1, r3
 80049e6:	43d9      	mvns	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049ec:	4313      	orrs	r3, r2
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3724      	adds	r7, #36	@ 0x24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
	...

080049fc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a04:	4b08      	ldr	r3, [pc, #32]	@ (8004a28 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004a06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a08:	4907      	ldr	r1, [pc, #28]	@ (8004a28 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4013      	ands	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	40021000 	.word	0x40021000

08004a2c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8004a34:	4b08      	ldr	r3, [pc, #32]	@ (8004a58 <LL_APB1_GRP2_EnableClock+0x2c>)
 8004a36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a38:	4907      	ldr	r1, [pc, #28]	@ (8004a58 <LL_APB1_GRP2_EnableClock+0x2c>)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8004a40:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <LL_APB1_GRP2_EnableClock+0x2c>)
 8004a42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4013      	ands	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
}
 8004a4c:	bf00      	nop
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	40021000 	.word	0x40021000

08004a5c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8004aa8 <LL_DMA_SetDataTransferDirection+0x4c>)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	4413      	add	r3, r2
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	4413      	add	r3, r2
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a80:	f023 0310 	bic.w	r3, r3, #16
 8004a84:	4908      	ldr	r1, [pc, #32]	@ (8004aa8 <LL_DMA_SetDataTransferDirection+0x4c>)
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	440a      	add	r2, r1
 8004a8a:	7812      	ldrb	r2, [r2, #0]
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	440a      	add	r2, r1
 8004a92:	4611      	mov	r1, r2
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	0801c1c8 	.word	0x0801c1c8

08004aac <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8004abc:	4a0d      	ldr	r2, [pc, #52]	@ (8004af4 <LL_DMA_SetMode+0x48>)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	4413      	add	r3, r2
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f023 0220 	bic.w	r2, r3, #32
 8004ad0:	4908      	ldr	r1, [pc, #32]	@ (8004af4 <LL_DMA_SetMode+0x48>)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	440b      	add	r3, r1
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	440b      	add	r3, r1
 8004ade:	4619      	mov	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	600b      	str	r3, [r1, #0]
             Mode);
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	0801c1c8 	.word	0x0801c1c8

08004af8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8004b08:	4a0d      	ldr	r2, [pc, #52]	@ (8004b40 <LL_DMA_SetPeriphIncMode+0x48>)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	4413      	add	r3, r2
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004b1c:	4908      	ldr	r1, [pc, #32]	@ (8004b40 <LL_DMA_SetPeriphIncMode+0x48>)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	440b      	add	r3, r1
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	4619      	mov	r1, r3
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	440b      	add	r3, r1
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	0801c1c8 	.word	0x0801c1c8

08004b44 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8004b54:	4a0d      	ldr	r2, [pc, #52]	@ (8004b8c <LL_DMA_SetMemoryIncMode+0x48>)
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	4413      	add	r3, r2
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4413      	add	r3, r2
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b68:	4908      	ldr	r1, [pc, #32]	@ (8004b8c <LL_DMA_SetMemoryIncMode+0x48>)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	440b      	add	r3, r1
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	4619      	mov	r1, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	440b      	add	r3, r1
 8004b76:	4619      	mov	r1, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	0801c1c8 	.word	0x0801c1c8

08004b90 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8004ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8004bd8 <LL_DMA_SetPeriphSize+0x48>)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	4413      	add	r3, r2
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bb4:	4908      	ldr	r1, [pc, #32]	@ (8004bd8 <LL_DMA_SetPeriphSize+0x48>)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	440b      	add	r3, r1
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	440b      	add	r3, r1
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	0801c1c8 	.word	0x0801c1c8

08004bdc <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8004bec:	4a0d      	ldr	r2, [pc, #52]	@ (8004c24 <LL_DMA_SetMemorySize+0x48>)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c00:	4908      	ldr	r1, [pc, #32]	@ (8004c24 <LL_DMA_SetMemorySize+0x48>)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	440b      	add	r3, r1
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	440b      	add	r3, r1
 8004c0e:	4619      	mov	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	0801c1c8 	.word	0x0801c1c8

08004c28 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8004c38:	4a0d      	ldr	r2, [pc, #52]	@ (8004c70 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	4413      	add	r3, r2
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c4c:	4908      	ldr	r1, [pc, #32]	@ (8004c70 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	440b      	add	r3, r1
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	4619      	mov	r1, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	440b      	add	r3, r1
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]
             Priority);
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	0801c1c8 	.word	0x0801c1c8

08004c74 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	0a9b      	lsrs	r3, r3, #10
 8004c84:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8004c88:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c9c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cb2:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cce:	463b      	mov	r3, r7
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	609a      	str	r2, [r3, #8]
 8004cd8:	60da      	str	r2, [r3, #12]
 8004cda:	611a      	str	r2, [r3, #16]
 8004cdc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8004cde:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004ce2:	f7ff fea3 	bl	8004a2c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004ce6:	2002      	movs	r0, #2
 8004ce8:	f7ff fe88 	bl	80049fc <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8004cec:	2310      	movs	r3, #16
 8004cee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4838      	ldr	r0, [pc, #224]	@ (8004de0 <MX_UCPD1_Init+0x118>)
 8004cfe:	f00a fcb1 	bl	800f664 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8004d02:	2340      	movs	r3, #64	@ 0x40
 8004d04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004d06:	2303      	movs	r3, #3
 8004d08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d0e:	463b      	mov	r3, r7
 8004d10:	4619      	mov	r1, r3
 8004d12:	4833      	ldr	r0, [pc, #204]	@ (8004de0 <MX_UCPD1_Init+0x118>)
 8004d14:	f00a fca6 	bl	800f664 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8004d18:	2272      	movs	r2, #114	@ 0x72
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4831      	ldr	r0, [pc, #196]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004d1e:	f7ff ffa9 	bl	8004c74 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8004d22:	2200      	movs	r2, #0
 8004d24:	2100      	movs	r1, #0
 8004d26:	482f      	ldr	r0, [pc, #188]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004d28:	f7ff fe98 	bl	8004a5c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2100      	movs	r1, #0
 8004d30:	482c      	ldr	r0, [pc, #176]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004d32:	f7ff ff79 	bl	8004c28 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8004d36:	2200      	movs	r2, #0
 8004d38:	2100      	movs	r1, #0
 8004d3a:	482a      	ldr	r0, [pc, #168]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004d3c:	f7ff feb6 	bl	8004aac <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8004d40:	2200      	movs	r2, #0
 8004d42:	2100      	movs	r1, #0
 8004d44:	4827      	ldr	r0, [pc, #156]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004d46:	f7ff fed7 	bl	8004af8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8004d4a:	2280      	movs	r2, #128	@ 0x80
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4825      	ldr	r0, [pc, #148]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004d50:	f7ff fef8 	bl	8004b44 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8004d54:	2200      	movs	r2, #0
 8004d56:	2100      	movs	r1, #0
 8004d58:	4822      	ldr	r0, [pc, #136]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004d5a:	f7ff ff19 	bl	8004b90 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2100      	movs	r1, #0
 8004d62:	4820      	ldr	r0, [pc, #128]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004d64:	f7ff ff3a 	bl	8004bdc <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8004d68:	2273      	movs	r2, #115	@ 0x73
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	481d      	ldr	r0, [pc, #116]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004d6e:	f7ff ff81 	bl	8004c74 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8004d72:	2210      	movs	r2, #16
 8004d74:	2101      	movs	r1, #1
 8004d76:	481b      	ldr	r0, [pc, #108]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004d78:	f7ff fe70 	bl	8004a5c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2101      	movs	r1, #1
 8004d80:	4818      	ldr	r0, [pc, #96]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004d82:	f7ff ff51 	bl	8004c28 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8004d86:	2200      	movs	r2, #0
 8004d88:	2101      	movs	r1, #1
 8004d8a:	4816      	ldr	r0, [pc, #88]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004d8c:	f7ff fe8e 	bl	8004aac <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8004d90:	2200      	movs	r2, #0
 8004d92:	2101      	movs	r1, #1
 8004d94:	4813      	ldr	r0, [pc, #76]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004d96:	f7ff feaf 	bl	8004af8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8004d9a:	2280      	movs	r2, #128	@ 0x80
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	4811      	ldr	r0, [pc, #68]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004da0:	f7ff fed0 	bl	8004b44 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8004da4:	2200      	movs	r2, #0
 8004da6:	2101      	movs	r1, #1
 8004da8:	480e      	ldr	r0, [pc, #56]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004daa:	f7ff fef1 	bl	8004b90 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8004dae:	2200      	movs	r2, #0
 8004db0:	2101      	movs	r1, #1
 8004db2:	480c      	ldr	r0, [pc, #48]	@ (8004de4 <MX_UCPD1_Init+0x11c>)
 8004db4:	f7ff ff12 	bl	8004bdc <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8004db8:	f7ff fd96 	bl	80048e8 <__NVIC_GetPriorityGrouping>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2105      	movs	r1, #5
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fde6 	bl	8004994 <NVIC_EncodePriority>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4619      	mov	r1, r3
 8004dcc:	203f      	movs	r0, #63	@ 0x3f
 8004dce:	f7ff fdb7 	bl	8004940 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 8004dd2:	203f      	movs	r0, #63	@ 0x3f
 8004dd4:	f7ff fd96 	bl	8004904 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8004dd8:	bf00      	nop
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	48000400 	.word	0x48000400
 8004de4:	40020000 	.word	0x40020000

08004de8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004dec:	4b24      	ldr	r3, [pc, #144]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004dee:	4a25      	ldr	r2, [pc, #148]	@ (8004e84 <MX_USART1_UART_Init+0x9c>)
 8004df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004df2:	4b23      	ldr	r3, [pc, #140]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004df4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004dfa:	4b21      	ldr	r3, [pc, #132]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e00:	4b1f      	ldr	r3, [pc, #124]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e06:	4b1e      	ldr	r3, [pc, #120]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004e0e:	220c      	movs	r2, #12
 8004e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e12:	4b1b      	ldr	r3, [pc, #108]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e18:	4b19      	ldr	r3, [pc, #100]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e1e:	4b18      	ldr	r3, [pc, #96]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e24:	4b16      	ldr	r3, [pc, #88]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004e2a:	4b15      	ldr	r3, [pc, #84]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004e30:	4b13      	ldr	r3, [pc, #76]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004e32:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004e36:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e38:	4811      	ldr	r0, [pc, #68]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004e3a:	f007 fa89 	bl	800c350 <HAL_UART_Init>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8004e44:	f7ff f878 	bl	8003f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e48:	2100      	movs	r1, #0
 8004e4a:	480d      	ldr	r0, [pc, #52]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004e4c:	f00a f8dd 	bl	800f00a <HAL_UARTEx_SetTxFifoThreshold>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 8004e56:	f7ff f86f 	bl	8003f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4808      	ldr	r0, [pc, #32]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004e5e:	f00a f912 	bl	800f086 <HAL_UARTEx_SetRxFifoThreshold>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8004e68:	f7ff f866 	bl	8003f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004e6c:	4804      	ldr	r0, [pc, #16]	@ (8004e80 <MX_USART1_UART_Init+0x98>)
 8004e6e:	f00a f893 	bl	800ef98 <HAL_UARTEx_DisableFifoMode>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8004e78:	f7ff f85e 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004e7c:	bf00      	nop
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20000bb8 	.word	0x20000bb8
 8004e84:	40013800 	.word	0x40013800

08004e88 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004e8c:	4b22      	ldr	r3, [pc, #136]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004e8e:	4a23      	ldr	r2, [pc, #140]	@ (8004f1c <MX_USART2_UART_Init+0x94>)
 8004e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 128000;
 8004e92:	4b21      	ldr	r3, [pc, #132]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004e94:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8004e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004eac:	4b1a      	ldr	r3, [pc, #104]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004eae:	220c      	movs	r2, #12
 8004eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eb2:	4b19      	ldr	r3, [pc, #100]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004eb8:	4b17      	ldr	r3, [pc, #92]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ebe:	4b16      	ldr	r3, [pc, #88]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ec4:	4b14      	ldr	r3, [pc, #80]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004eca:	4b13      	ldr	r3, [pc, #76]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ed0:	4811      	ldr	r0, [pc, #68]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004ed2:	f007 fa3d 	bl	800c350 <HAL_UART_Init>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004edc:	f7ff f82c 	bl	8003f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	480d      	ldr	r0, [pc, #52]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004ee4:	f00a f891 	bl	800f00a <HAL_UARTEx_SetTxFifoThreshold>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004eee:	f7ff f823 	bl	8003f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4808      	ldr	r0, [pc, #32]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004ef6:	f00a f8c6 	bl	800f086 <HAL_UARTEx_SetRxFifoThreshold>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004f00:	f7ff f81a 	bl	8003f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004f04:	4804      	ldr	r0, [pc, #16]	@ (8004f18 <MX_USART2_UART_Init+0x90>)
 8004f06:	f00a f847 	bl	800ef98 <HAL_UARTEx_DisableFifoMode>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004f10:	f7ff f812 	bl	8003f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004f14:	bf00      	nop
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20000c4c 	.word	0x20000c4c
 8004f1c:	40004400 	.word	0x40004400

08004f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b09e      	sub	sp, #120	@ 0x78
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	60da      	str	r2, [r3, #12]
 8004f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f38:	f107 0320 	add.w	r3, r7, #32
 8004f3c:	2244      	movs	r2, #68	@ 0x44
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4618      	mov	r0, r3
 8004f42:	f013 fd35 	bl	80189b0 <memset>
  if(uartHandle->Instance==USART1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a68      	ldr	r2, [pc, #416]	@ (80050ec <HAL_UART_MspInit+0x1cc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d15a      	bne.n	8005006 <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004f50:	2301      	movs	r3, #1
 8004f52:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004f54:	2300      	movs	r3, #0
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f58:	f107 0320 	add.w	r3, r7, #32
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f005 f9d7 	bl	800a310 <HAL_RCCEx_PeriphCLKConfig>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004f68:	f7fe ffe6 	bl	8003f38 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f6c:	4b60      	ldr	r3, [pc, #384]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 8004f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f70:	4a5f      	ldr	r2, [pc, #380]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 8004f72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f76:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f78:	4b5d      	ldr	r3, [pc, #372]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 8004f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f84:	4b5a      	ldr	r3, [pc, #360]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 8004f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f88:	4a59      	ldr	r2, [pc, #356]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 8004f8a:	f043 0304 	orr.w	r3, r3, #4
 8004f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f90:	4b57      	ldr	r3, [pc, #348]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 8004f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f9c:	4b54      	ldr	r3, [pc, #336]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 8004f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa0:	4a53      	ldr	r2, [pc, #332]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 8004fa2:	f043 0302 	orr.w	r3, r3, #2
 8004fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fa8:	4b51      	ldr	r3, [pc, #324]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 8004faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fc4:	2307      	movs	r3, #7
 8004fc6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004fc8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4849      	ldr	r0, [pc, #292]	@ (80050f4 <HAL_UART_MspInit+0x1d4>)
 8004fd0:	f003 fbf6 	bl	80087c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004fd4:	2380      	movs	r3, #128	@ 0x80
 8004fd6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fe4:	2307      	movs	r3, #7
 8004fe6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004fe8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004fec:	4619      	mov	r1, r3
 8004fee:	4842      	ldr	r0, [pc, #264]	@ (80050f8 <HAL_UART_MspInit+0x1d8>)
 8004ff0:	f003 fbe6 	bl	80087c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2105      	movs	r1, #5
 8004ff8:	2025      	movs	r0, #37	@ 0x25
 8004ffa:	f002 fead 	bl	8007d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ffe:	2025      	movs	r0, #37	@ 0x25
 8005000:	f002 fec4 	bl	8007d8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005004:	e06d      	b.n	80050e2 <HAL_UART_MspInit+0x1c2>
  else if(uartHandle->Instance==USART2)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a3c      	ldr	r2, [pc, #240]	@ (80050fc <HAL_UART_MspInit+0x1dc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d168      	bne.n	80050e2 <HAL_UART_MspInit+0x1c2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005010:	2302      	movs	r3, #2
 8005012:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005014:	2300      	movs	r3, #0
 8005016:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005018:	f107 0320 	add.w	r3, r7, #32
 800501c:	4618      	mov	r0, r3
 800501e:	f005 f977 	bl	800a310 <HAL_RCCEx_PeriphCLKConfig>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8005028:	f7fe ff86 	bl	8003f38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800502c:	4b30      	ldr	r3, [pc, #192]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005030:	4a2f      	ldr	r2, [pc, #188]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 8005032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005036:	6593      	str	r3, [r2, #88]	@ 0x58
 8005038:	4b2d      	ldr	r3, [pc, #180]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 800503a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005044:	4b2a      	ldr	r3, [pc, #168]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 8005046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005048:	4a29      	ldr	r2, [pc, #164]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005050:	4b27      	ldr	r3, [pc, #156]	@ (80050f0 <HAL_UART_MspInit+0x1d0>)
 8005052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RXnTX_STM_Pin|LIDAR_TXnRX_STM_Pin;
 800505c:	230c      	movs	r3, #12
 800505e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005060:	2302      	movs	r3, #2
 8005062:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005064:	2300      	movs	r3, #0
 8005066:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005068:	2300      	movs	r3, #0
 800506a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800506c:	2307      	movs	r3, #7
 800506e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005070:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005074:	4619      	mov	r1, r3
 8005076:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800507a:	f003 fba1 	bl	80087c0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel4;
 800507e:	4b20      	ldr	r3, [pc, #128]	@ (8005100 <HAL_UART_MspInit+0x1e0>)
 8005080:	4a20      	ldr	r2, [pc, #128]	@ (8005104 <HAL_UART_MspInit+0x1e4>)
 8005082:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005084:	4b1e      	ldr	r3, [pc, #120]	@ (8005100 <HAL_UART_MspInit+0x1e0>)
 8005086:	221a      	movs	r2, #26
 8005088:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800508a:	4b1d      	ldr	r3, [pc, #116]	@ (8005100 <HAL_UART_MspInit+0x1e0>)
 800508c:	2200      	movs	r2, #0
 800508e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005090:	4b1b      	ldr	r3, [pc, #108]	@ (8005100 <HAL_UART_MspInit+0x1e0>)
 8005092:	2200      	movs	r2, #0
 8005094:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005096:	4b1a      	ldr	r3, [pc, #104]	@ (8005100 <HAL_UART_MspInit+0x1e0>)
 8005098:	2280      	movs	r2, #128	@ 0x80
 800509a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800509c:	4b18      	ldr	r3, [pc, #96]	@ (8005100 <HAL_UART_MspInit+0x1e0>)
 800509e:	2200      	movs	r2, #0
 80050a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050a2:	4b17      	ldr	r3, [pc, #92]	@ (8005100 <HAL_UART_MspInit+0x1e0>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80050a8:	4b15      	ldr	r3, [pc, #84]	@ (8005100 <HAL_UART_MspInit+0x1e0>)
 80050aa:	2220      	movs	r2, #32
 80050ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050ae:	4b14      	ldr	r3, [pc, #80]	@ (8005100 <HAL_UART_MspInit+0x1e0>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80050b4:	4812      	ldr	r0, [pc, #72]	@ (8005100 <HAL_UART_MspInit+0x1e0>)
 80050b6:	f003 f851 	bl	800815c <HAL_DMA_Init>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 80050c0:	f7fe ff3a 	bl	8003f38 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005100 <HAL_UART_MspInit+0x1e0>)
 80050c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80050cc:	4a0c      	ldr	r2, [pc, #48]	@ (8005100 <HAL_UART_MspInit+0x1e0>)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80050d2:	2200      	movs	r2, #0
 80050d4:	2105      	movs	r1, #5
 80050d6:	2026      	movs	r0, #38	@ 0x26
 80050d8:	f002 fe3e 	bl	8007d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80050dc:	2026      	movs	r0, #38	@ 0x26
 80050de:	f002 fe55 	bl	8007d8c <HAL_NVIC_EnableIRQ>
}
 80050e2:	bf00      	nop
 80050e4:	3778      	adds	r7, #120	@ 0x78
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40013800 	.word	0x40013800
 80050f0:	40021000 	.word	0x40021000
 80050f4:	48000800 	.word	0x48000800
 80050f8:	48000400 	.word	0x48000400
 80050fc:	40004400 	.word	0x40004400
 8005100:	20000ce0 	.word	0x20000ce0
 8005104:	40020044 	.word	0x40020044

08005108 <ADXL343_init>:
		{"FIFO_CTL",	0x38},
		{"FIFO_SATUS",	0x39}
};


void ADXL343_init(void){
 8005108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800510c:	b08c      	sub	sp, #48	@ 0x30
 800510e:	af00      	add	r7, sp, #0
	debug(INFORMATION,"ADXL343 - INIT");
 8005110:	49a3      	ldr	r1, [pc, #652]	@ (80053a0 <ADXL343_init+0x298>)
 8005112:	48a4      	ldr	r0, [pc, #656]	@ (80053a4 <ADXL343_init+0x29c>)
 8005114:	f011 fcc8 	bl	8016aa8 <debug>
	uint8_t ret=0;
 8005118:	2300      	movs	r3, #0
 800511a:	743b      	strb	r3, [r7, #16]
	ADXL343_ReadRegister(0x00, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 800511c:	f107 0310 	add.w	r3, r7, #16
 8005120:	2201      	movs	r2, #1
 8005122:	4619      	mov	r1, r3
 8005124:	2000      	movs	r0, #0
 8005126:	f000 fb11 	bl	800574c <ADXL343_ReadRegister>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <ADXL343_init+0x30>
 8005130:	499d      	ldr	r1, [pc, #628]	@ (80053a8 <ADXL343_init+0x2a0>)
 8005132:	489e      	ldr	r0, [pc, #632]	@ (80053ac <ADXL343_init+0x2a4>)
 8005134:	f011 fcb8 	bl	8016aa8 <debug>
	printf("READ - deviceID: 0x%02X\r\n",ret);
 8005138:	7c3b      	ldrb	r3, [r7, #16]
 800513a:	4619      	mov	r1, r3
 800513c:	489c      	ldr	r0, [pc, #624]	@ (80053b0 <ADXL343_init+0x2a8>)
 800513e:	f013 fb59 	bl	80187f4 <iprintf>

	uint8_t startReg = 0x1D;
 8005142:	231d      	movs	r3, #29
 8005144:	76fb      	strb	r3, [r7, #27]
	uint8_t endReg = 0x39;
 8005146:	2339      	movs	r3, #57	@ 0x39
 8005148:	76bb      	strb	r3, [r7, #26]
	for (int i = 1; i <= endReg-startReg+1; i++) {
 800514a:	2301      	movs	r3, #1
 800514c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800514e:	e01d      	b.n	800518c <ADXL343_init+0x84>
		uint8_t ret=0;
 8005150:	2300      	movs	r3, #0
 8005152:	73fb      	strb	r3, [r7, #15]
		ADXL343_ReadRegister(IMURegister[i].reg, &ret,1);
 8005154:	4a97      	ldr	r2, [pc, #604]	@ (80053b4 <ADXL343_init+0x2ac>)
 8005156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	4413      	add	r3, r2
 800515c:	791b      	ldrb	r3, [r3, #4]
 800515e:	f107 010f 	add.w	r1, r7, #15
 8005162:	2201      	movs	r2, #1
 8005164:	4618      	mov	r0, r3
 8005166:	f000 faf1 	bl	800574c <ADXL343_ReadRegister>
		printf("READ - 0x%02X (%s): 0x%02X\r\n", IMURegister[i].reg,IMURegister[i].name, ret);
 800516a:	4a92      	ldr	r2, [pc, #584]	@ (80053b4 <ADXL343_init+0x2ac>)
 800516c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4413      	add	r3, r2
 8005172:	791b      	ldrb	r3, [r3, #4]
 8005174:	4619      	mov	r1, r3
 8005176:	4a8f      	ldr	r2, [pc, #572]	@ (80053b4 <ADXL343_init+0x2ac>)
 8005178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	488d      	ldr	r0, [pc, #564]	@ (80053b8 <ADXL343_init+0x2b0>)
 8005182:	f013 fb37 	bl	80187f4 <iprintf>
	for (int i = 1; i <= endReg-startReg+1; i++) {
 8005186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005188:	3301      	adds	r3, #1
 800518a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800518c:	7eba      	ldrb	r2, [r7, #26]
 800518e:	7efb      	ldrb	r3, [r7, #27]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	3301      	adds	r3, #1
 8005194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005196:	429a      	cmp	r2, r3
 8005198:	ddda      	ble.n	8005150 <ADXL343_init+0x48>
	}

	/*	0x1D-TRESHS_TAP		|	62.5 mg/LSB
	 *	0xa0= 10g
	 */
	ADXL343_WriteRegister(0x1D, 0xa0)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 800519a:	21a0      	movs	r1, #160	@ 0xa0
 800519c:	201d      	movs	r0, #29
 800519e:	f000 fab7 	bl	8005710 <ADXL343_WriteRegister>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <ADXL343_init+0xa8>
 80051a8:	4984      	ldr	r1, [pc, #528]	@ (80053bc <ADXL343_init+0x2b4>)
 80051aa:	4880      	ldr	r0, [pc, #512]	@ (80053ac <ADXL343_init+0x2a4>)
 80051ac:	f011 fc7c 	bl	8016aa8 <debug>
	ADXL343_ReadRegister(0x1D, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80051b0:	f107 0310 	add.w	r3, r7, #16
 80051b4:	2201      	movs	r2, #1
 80051b6:	4619      	mov	r1, r3
 80051b8:	201d      	movs	r0, #29
 80051ba:	f000 fac7 	bl	800574c <ADXL343_ReadRegister>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <ADXL343_init+0xc4>
 80051c4:	4978      	ldr	r1, [pc, #480]	@ (80053a8 <ADXL343_init+0x2a0>)
 80051c6:	4879      	ldr	r0, [pc, #484]	@ (80053ac <ADXL343_init+0x2a4>)
 80051c8:	f011 fc6e 	bl	8016aa8 <debug>
	//printf("WRITE/READ - TRESHS_TAP: 0x%02X\r\n",ret);
	/* 	0x21-DUR	|	625 µs/LSB
	 *	0xa0 : 100ms
	 */
	ADXL343_WriteRegister(0x21, 0xFF)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80051cc:	21ff      	movs	r1, #255	@ 0xff
 80051ce:	2021      	movs	r0, #33	@ 0x21
 80051d0:	f000 fa9e 	bl	8005710 <ADXL343_WriteRegister>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <ADXL343_init+0xda>
 80051da:	4978      	ldr	r1, [pc, #480]	@ (80053bc <ADXL343_init+0x2b4>)
 80051dc:	4873      	ldr	r0, [pc, #460]	@ (80053ac <ADXL343_init+0x2a4>)
 80051de:	f011 fc63 	bl	8016aa8 <debug>
	ADXL343_ReadRegister(0x21, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80051e2:	f107 0310 	add.w	r3, r7, #16
 80051e6:	2201      	movs	r2, #1
 80051e8:	4619      	mov	r1, r3
 80051ea:	2021      	movs	r0, #33	@ 0x21
 80051ec:	f000 faae 	bl	800574c <ADXL343_ReadRegister>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <ADXL343_init+0xf6>
 80051f6:	496c      	ldr	r1, [pc, #432]	@ (80053a8 <ADXL343_init+0x2a0>)
 80051f8:	486c      	ldr	r0, [pc, #432]	@ (80053ac <ADXL343_init+0x2a4>)
 80051fa:	f011 fc55 	bl	8016aa8 <debug>
	//printf("WRITE/READ - DUR: 0x%02X\r\n",ret);
	/* 	0x22 - LATENT	|	 1.25 ms/LSB
	 *	0xFF : 378.75ms
	 */
	ADXL343_WriteRegister(0x22, 0xFF)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80051fe:	21ff      	movs	r1, #255	@ 0xff
 8005200:	2022      	movs	r0, #34	@ 0x22
 8005202:	f000 fa85 	bl	8005710 <ADXL343_WriteRegister>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <ADXL343_init+0x10c>
 800520c:	496b      	ldr	r1, [pc, #428]	@ (80053bc <ADXL343_init+0x2b4>)
 800520e:	4867      	ldr	r0, [pc, #412]	@ (80053ac <ADXL343_init+0x2a4>)
 8005210:	f011 fc4a 	bl	8016aa8 <debug>
	ADXL343_ReadRegister(0x22, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005214:	f107 0310 	add.w	r3, r7, #16
 8005218:	2201      	movs	r2, #1
 800521a:	4619      	mov	r1, r3
 800521c:	2022      	movs	r0, #34	@ 0x22
 800521e:	f000 fa95 	bl	800574c <ADXL343_ReadRegister>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <ADXL343_init+0x128>
 8005228:	495f      	ldr	r1, [pc, #380]	@ (80053a8 <ADXL343_init+0x2a0>)
 800522a:	4860      	ldr	r0, [pc, #384]	@ (80053ac <ADXL343_init+0x2a4>)
 800522c:	f011 fc3c 	bl	8016aa8 <debug>
	 *	D3		|SUPRESS
	 * 	D2		|TAP_X
	 * 	D1		|TAP_Y
	 * 	D0		|TAP_Z
	 */
	ADXL343_WriteRegister(0x2A, 0b110)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8005230:	2106      	movs	r1, #6
 8005232:	202a      	movs	r0, #42	@ 0x2a
 8005234:	f000 fa6c 	bl	8005710 <ADXL343_WriteRegister>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <ADXL343_init+0x13e>
 800523e:	495f      	ldr	r1, [pc, #380]	@ (80053bc <ADXL343_init+0x2b4>)
 8005240:	485a      	ldr	r0, [pc, #360]	@ (80053ac <ADXL343_init+0x2a4>)
 8005242:	f011 fc31 	bl	8016aa8 <debug>
	ADXL343_ReadRegister(0x2A, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005246:	f107 0310 	add.w	r3, r7, #16
 800524a:	2201      	movs	r2, #1
 800524c:	4619      	mov	r1, r3
 800524e:	202a      	movs	r0, #42	@ 0x2a
 8005250:	f000 fa7c 	bl	800574c <ADXL343_ReadRegister>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <ADXL343_init+0x15a>
 800525a:	4953      	ldr	r1, [pc, #332]	@ (80053a8 <ADXL343_init+0x2a0>)
 800525c:	4853      	ldr	r0, [pc, #332]	@ (80053ac <ADXL343_init+0x2a4>)
 800525e:	f011 fc23 	bl	8016aa8 <debug>
	//printf("WRITE/READ - TAP_AXES: 0x%02X\r\n",ret);
	/*	0x2E-INT_ENABLE
	 * 	D6 		| SINGLE_TAP
	 */
	ADXL343_WriteRegister(0x2E, 0b1<<6)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8005262:	2140      	movs	r1, #64	@ 0x40
 8005264:	202e      	movs	r0, #46	@ 0x2e
 8005266:	f000 fa53 	bl	8005710 <ADXL343_WriteRegister>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <ADXL343_init+0x170>
 8005270:	4952      	ldr	r1, [pc, #328]	@ (80053bc <ADXL343_init+0x2b4>)
 8005272:	484e      	ldr	r0, [pc, #312]	@ (80053ac <ADXL343_init+0x2a4>)
 8005274:	f011 fc18 	bl	8016aa8 <debug>
	ADXL343_ReadRegister(0x2E, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005278:	f107 0310 	add.w	r3, r7, #16
 800527c:	2201      	movs	r2, #1
 800527e:	4619      	mov	r1, r3
 8005280:	202e      	movs	r0, #46	@ 0x2e
 8005282:	f000 fa63 	bl	800574c <ADXL343_ReadRegister>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <ADXL343_init+0x18c>
 800528c:	4946      	ldr	r1, [pc, #280]	@ (80053a8 <ADXL343_init+0x2a0>)
 800528e:	4847      	ldr	r0, [pc, #284]	@ (80053ac <ADXL343_init+0x2a4>)
 8005290:	f011 fc0a 	bl	8016aa8 <debug>
	//printf("WRITE/READ - INT_ENABLE: 0x%02X\r\n",ret);
	/*	0x2F-INT_MAP
	 * 	D6 		| SINGLE_TAP =1 : vers INT2
	 */
	ADXL343_WriteRegister(0x2F, 0b1<<6)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8005294:	2140      	movs	r1, #64	@ 0x40
 8005296:	202f      	movs	r0, #47	@ 0x2f
 8005298:	f000 fa3a 	bl	8005710 <ADXL343_WriteRegister>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <ADXL343_init+0x1a2>
 80052a2:	4946      	ldr	r1, [pc, #280]	@ (80053bc <ADXL343_init+0x2b4>)
 80052a4:	4841      	ldr	r0, [pc, #260]	@ (80053ac <ADXL343_init+0x2a4>)
 80052a6:	f011 fbff 	bl	8016aa8 <debug>
	ADXL343_ReadRegister(0x2F, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80052aa:	f107 0310 	add.w	r3, r7, #16
 80052ae:	2201      	movs	r2, #1
 80052b0:	4619      	mov	r1, r3
 80052b2:	202f      	movs	r0, #47	@ 0x2f
 80052b4:	f000 fa4a 	bl	800574c <ADXL343_ReadRegister>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <ADXL343_init+0x1be>
 80052be:	493a      	ldr	r1, [pc, #232]	@ (80053a8 <ADXL343_init+0x2a0>)
 80052c0:	483a      	ldr	r0, [pc, #232]	@ (80053ac <ADXL343_init+0x2a4>)
 80052c2:	f011 fbf1 	bl	8016aa8 <debug>
	 * 	D3		| INACT ac/dc
	 * 	D2		| INACT_X enable
	 * 	D1		| INACT_Y enable
	 * 	D0		| INACT_Z enable
	 */
	ADXL343_WriteRegister(0x27, 0b11100000)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80052c6:	21e0      	movs	r1, #224	@ 0xe0
 80052c8:	2027      	movs	r0, #39	@ 0x27
 80052ca:	f000 fa21 	bl	8005710 <ADXL343_WriteRegister>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <ADXL343_init+0x1d4>
 80052d4:	4939      	ldr	r1, [pc, #228]	@ (80053bc <ADXL343_init+0x2b4>)
 80052d6:	4835      	ldr	r0, [pc, #212]	@ (80053ac <ADXL343_init+0x2a4>)
 80052d8:	f011 fbe6 	bl	8016aa8 <debug>
	ADXL343_ReadRegister(0x27, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80052dc:	f107 0310 	add.w	r3, r7, #16
 80052e0:	2201      	movs	r2, #1
 80052e2:	4619      	mov	r1, r3
 80052e4:	2027      	movs	r0, #39	@ 0x27
 80052e6:	f000 fa31 	bl	800574c <ADXL343_ReadRegister>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <ADXL343_init+0x1f0>
 80052f0:	492d      	ldr	r1, [pc, #180]	@ (80053a8 <ADXL343_init+0x2a0>)
 80052f2:	482e      	ldr	r0, [pc, #184]	@ (80053ac <ADXL343_init+0x2a4>)
 80052f4:	f011 fbd8 	bl	8016aa8 <debug>
	//printf("WRITE/READ - ACT_INACT_CTL: 0x%02X\r\n",ret);

	/*	0x2D—POWER_CTL
	 * 	D3		| MEASURE = 1
	 */
	ADXL343_WriteRegister(0x2D, 1<<3)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80052f8:	2108      	movs	r1, #8
 80052fa:	202d      	movs	r0, #45	@ 0x2d
 80052fc:	f000 fa08 	bl	8005710 <ADXL343_WriteRegister>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <ADXL343_init+0x206>
 8005306:	492d      	ldr	r1, [pc, #180]	@ (80053bc <ADXL343_init+0x2b4>)
 8005308:	4828      	ldr	r0, [pc, #160]	@ (80053ac <ADXL343_init+0x2a4>)
 800530a:	f011 fbcd 	bl	8016aa8 <debug>
	ADXL343_ReadRegister(0x2D, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 800530e:	f107 0310 	add.w	r3, r7, #16
 8005312:	2201      	movs	r2, #1
 8005314:	4619      	mov	r1, r3
 8005316:	202d      	movs	r0, #45	@ 0x2d
 8005318:	f000 fa18 	bl	800574c <ADXL343_ReadRegister>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <ADXL343_init+0x222>
 8005322:	4921      	ldr	r1, [pc, #132]	@ (80053a8 <ADXL343_init+0x2a0>)
 8005324:	4821      	ldr	r0, [pc, #132]	@ (80053ac <ADXL343_init+0x2a4>)
 8005326:	f011 fbbf 	bl	8016aa8 <debug>
	 * 	D5 		| INT_INVERT = 0 => Inverse le high and low des INT
	 * 	D3 		| FULL_RES = 1 => Max resolution
	 * 	D2 		| JUSTIFY = 0 => LSB
	 * 	D1-D0 	| RANGE = 00 =>  ±2g
	 */
	ADXL343_WriteRegister(0x31, 0<<7|1<<6|1<<3|0b00)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 800532a:	2148      	movs	r1, #72	@ 0x48
 800532c:	2031      	movs	r0, #49	@ 0x31
 800532e:	f000 f9ef 	bl	8005710 <ADXL343_WriteRegister>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <ADXL343_init+0x238>
 8005338:	4920      	ldr	r1, [pc, #128]	@ (80053bc <ADXL343_init+0x2b4>)
 800533a:	481c      	ldr	r0, [pc, #112]	@ (80053ac <ADXL343_init+0x2a4>)
 800533c:	f011 fbb4 	bl	8016aa8 <debug>
	ADXL343_ReadRegister(0x31, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005340:	f107 0310 	add.w	r3, r7, #16
 8005344:	2201      	movs	r2, #1
 8005346:	4619      	mov	r1, r3
 8005348:	2031      	movs	r0, #49	@ 0x31
 800534a:	f000 f9ff 	bl	800574c <ADXL343_ReadRegister>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <ADXL343_init+0x254>
 8005354:	4914      	ldr	r1, [pc, #80]	@ (80053a8 <ADXL343_init+0x2a0>)
 8005356:	4815      	ldr	r0, [pc, #84]	@ (80053ac <ADXL343_init+0x2a4>)
 8005358:	f011 fba6 	bl	8016aa8 <debug>
	/* 	0x38—FIFO_CTL
	 * 	D7-D6	| FIFO_MODE = 10 => STREAM
	 * 	D5		| TRIGGER BIT = 1 => Redirige ExINT vers INT2
	 * 	D4-D0	| SAMPLE BITS = 0b10000(16) => Nécessite 16 samples avant de trigger le INT
	 */
	ADXL343_WriteRegister(0x38, ((0b10<<6)| 0b10000))!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 800535c:	2190      	movs	r1, #144	@ 0x90
 800535e:	2038      	movs	r0, #56	@ 0x38
 8005360:	f000 f9d6 	bl	8005710 <ADXL343_WriteRegister>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <ADXL343_init+0x26a>
 800536a:	4914      	ldr	r1, [pc, #80]	@ (80053bc <ADXL343_init+0x2b4>)
 800536c:	480f      	ldr	r0, [pc, #60]	@ (80053ac <ADXL343_init+0x2a4>)
 800536e:	f011 fb9b 	bl	8016aa8 <debug>
	ADXL343_ReadRegister(0x38, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005372:	f107 0310 	add.w	r3, r7, #16
 8005376:	2201      	movs	r2, #1
 8005378:	4619      	mov	r1, r3
 800537a:	2038      	movs	r0, #56	@ 0x38
 800537c:	f000 f9e6 	bl	800574c <ADXL343_ReadRegister>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <ADXL343_init+0x286>
 8005386:	4908      	ldr	r1, [pc, #32]	@ (80053a8 <ADXL343_init+0x2a0>)
 8005388:	4808      	ldr	r0, [pc, #32]	@ (80053ac <ADXL343_init+0x2a4>)
 800538a:	f011 fb8d 	bl	8016aa8 <debug>
	//printf("WRITE/READ - FIFO Mode: 0x%02X\r\n",ret);

	/*
	 ************$	ETALONNAGE	$************
	 */
	int32_t sumX = 0, sumY = 0, sumZ = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005392:	2300      	movs	r3, #0
 8005394:	627b      	str	r3, [r7, #36]	@ 0x24
 8005396:	2300      	movs	r3, #0
 8005398:	623b      	str	r3, [r7, #32]
	for (int i=0;i<IMU_SAMPLE_0G;i++){
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	e04a      	b.n	8005436 <ADXL343_init+0x32e>
 80053a0:	0801b630 	.word	0x0801b630
 80053a4:	0801b640 	.word	0x0801b640
 80053a8:	0801b654 	.word	0x0801b654
 80053ac:	0801b668 	.word	0x0801b668
 80053b0:	0801b674 	.word	0x0801b674
 80053b4:	20000008 	.word	0x20000008
 80053b8:	0801b690 	.word	0x0801b690
 80053bc:	0801b6b0 	.word	0x0801b6b0
		XYZ_t accXYZ_0G = ADXL343_getAcc();
 80053c0:	f000 f8f8 	bl	80055b4 <ADXL343_getAcc>
 80053c4:	eef0 6a40 	vmov.f32	s13, s0
 80053c8:	eeb0 7a60 	vmov.f32	s14, s1
 80053cc:	eef0 7a41 	vmov.f32	s15, s2
 80053d0:	edc7 6a00 	vstr	s13, [r7]
 80053d4:	ed87 7a01 	vstr	s14, [r7, #4]
 80053d8:	edc7 7a02 	vstr	s15, [r7, #8]
		sumX += accXYZ_0G.X;
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053e6:	edd7 7a00 	vldr	s15, [r7]
 80053ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053f2:	ee17 3a90 	vmov	r3, s15
 80053f6:	62bb      	str	r3, [r7, #40]	@ 0x28
		sumY += accXYZ_0G.Y;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005402:	edd7 7a01 	vldr	s15, [r7, #4]
 8005406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800540a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800540e:	ee17 3a90 	vmov	r3, s15
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
		sumZ += accXYZ_0G.Z;
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800541e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800542a:	ee17 3a90 	vmov	r3, s15
 800542e:	623b      	str	r3, [r7, #32]
	for (int i=0;i<IMU_SAMPLE_0G;i++){
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	3301      	adds	r3, #1
 8005434:	61fb      	str	r3, [r7, #28]
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	2b09      	cmp	r3, #9
 800543a:	ddc1      	ble.n	80053c0 <ADXL343_init+0x2b8>
	}
	// Average
	int16_t avgX = sumX / IMU_SAMPLE_0G;
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	4a5a      	ldr	r2, [pc, #360]	@ (80055a8 <ADXL343_init+0x4a0>)
 8005440:	fb82 1203 	smull	r1, r2, r2, r3
 8005444:	1092      	asrs	r2, r2, #2
 8005446:	17db      	asrs	r3, r3, #31
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	833b      	strh	r3, [r7, #24]
	int16_t avgY = sumY / IMU_SAMPLE_0G;
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	4a56      	ldr	r2, [pc, #344]	@ (80055a8 <ADXL343_init+0x4a0>)
 8005450:	fb82 1203 	smull	r1, r2, r2, r3
 8005454:	1092      	asrs	r2, r2, #2
 8005456:	17db      	asrs	r3, r3, #31
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	82fb      	strh	r3, [r7, #22]
	int16_t avgZ = (sumZ / IMU_SAMPLE_0G);//-10;
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	4a52      	ldr	r2, [pc, #328]	@ (80055a8 <ADXL343_init+0x4a0>)
 8005460:	fb82 1203 	smull	r1, r2, r2, r3
 8005464:	1092      	asrs	r2, r2, #2
 8005466:	17db      	asrs	r3, r3, #31
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	82bb      	strh	r3, [r7, #20]

	//!\\  Each LSB of output in full-resolution is 3.9 mg or one-quarter of an LSB of the offset register
	uint8_t offsetX = -round((float)avgX / (SENSITIVITY_FULL_RES / SCALE_FACTOR_OFFSET_REG));
 800546c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005470:	ee07 3a90 	vmov	s15, r3
 8005474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005478:	ee17 0a90 	vmov	r0, s15
 800547c:	f7fd fa96 	bl	80029ac <__aeabi_f2d>
 8005480:	a347      	add	r3, pc, #284	@ (adr r3, 80055a0 <ADXL343_init+0x498>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	f7fd fc13 	bl	8002cb0 <__aeabi_ddiv>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	ec43 2b17 	vmov	d7, r2, r3
 8005492:	eeb0 0a47 	vmov.f32	s0, s14
 8005496:	eef0 0a67 	vmov.f32	s1, s15
 800549a:	f015 ffb3 	bl	801b404 <round>
 800549e:	ec53 2b10 	vmov	r2, r3, d0
 80054a2:	4692      	mov	sl, r2
 80054a4:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80054a8:	4650      	mov	r0, sl
 80054aa:	4659      	mov	r1, fp
 80054ac:	f7fd fdae 	bl	800300c <__aeabi_d2uiz>
 80054b0:	4603      	mov	r3, r0
 80054b2:	74fb      	strb	r3, [r7, #19]
	uint8_t offsetY = -round((float)avgY / (SENSITIVITY_FULL_RES / SCALE_FACTOR_OFFSET_REG));
 80054b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80054b8:	ee07 3a90 	vmov	s15, r3
 80054bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c0:	ee17 0a90 	vmov	r0, s15
 80054c4:	f7fd fa72 	bl	80029ac <__aeabi_f2d>
 80054c8:	a335      	add	r3, pc, #212	@ (adr r3, 80055a0 <ADXL343_init+0x498>)
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f7fd fbef 	bl	8002cb0 <__aeabi_ddiv>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	ec43 2b17 	vmov	d7, r2, r3
 80054da:	eeb0 0a47 	vmov.f32	s0, s14
 80054de:	eef0 0a67 	vmov.f32	s1, s15
 80054e2:	f015 ff8f 	bl	801b404 <round>
 80054e6:	ec53 2b10 	vmov	r2, r3, d0
 80054ea:	4690      	mov	r8, r2
 80054ec:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80054f0:	4640      	mov	r0, r8
 80054f2:	4649      	mov	r1, r9
 80054f4:	f7fd fd8a 	bl	800300c <__aeabi_d2uiz>
 80054f8:	4603      	mov	r3, r0
 80054fa:	74bb      	strb	r3, [r7, #18]
	uint8_t offsetZ = -round((float)(avgZ - SENSITIVITY_FULL_RES) / (SENSITIVITY_FULL_RES / SCALE_FACTOR_OFFSET_REG));
 80054fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005500:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800550c:	ee17 0a90 	vmov	r0, s15
 8005510:	f7fd fa4c 	bl	80029ac <__aeabi_f2d>
 8005514:	a322      	add	r3, pc, #136	@ (adr r3, 80055a0 <ADXL343_init+0x498>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f7fd fbc9 	bl	8002cb0 <__aeabi_ddiv>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	ec43 2b17 	vmov	d7, r2, r3
 8005526:	eeb0 0a47 	vmov.f32	s0, s14
 800552a:	eef0 0a67 	vmov.f32	s1, s15
 800552e:	f015 ff69 	bl	801b404 <round>
 8005532:	ec53 2b10 	vmov	r2, r3, d0
 8005536:	4614      	mov	r4, r2
 8005538:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800553c:	4620      	mov	r0, r4
 800553e:	4629      	mov	r1, r5
 8005540:	f7fd fd64 	bl	800300c <__aeabi_d2uiz>
 8005544:	4603      	mov	r3, r0
 8005546:	747b      	strb	r3, [r7, #17]

	ADXL343_WriteRegister(0x1E, offsetX)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005548:	7cfb      	ldrb	r3, [r7, #19]
 800554a:	4619      	mov	r1, r3
 800554c:	201e      	movs	r0, #30
 800554e:	f000 f8df 	bl	8005710 <ADXL343_WriteRegister>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <ADXL343_init+0x458>
 8005558:	4914      	ldr	r1, [pc, #80]	@ (80055ac <ADXL343_init+0x4a4>)
 800555a:	4815      	ldr	r0, [pc, #84]	@ (80055b0 <ADXL343_init+0x4a8>)
 800555c:	f011 faa4 	bl	8016aa8 <debug>
	ADXL343_WriteRegister(0x1F, offsetY)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005560:	7cbb      	ldrb	r3, [r7, #18]
 8005562:	4619      	mov	r1, r3
 8005564:	201f      	movs	r0, #31
 8005566:	f000 f8d3 	bl	8005710 <ADXL343_WriteRegister>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <ADXL343_init+0x470>
 8005570:	490e      	ldr	r1, [pc, #56]	@ (80055ac <ADXL343_init+0x4a4>)
 8005572:	480f      	ldr	r0, [pc, #60]	@ (80055b0 <ADXL343_init+0x4a8>)
 8005574:	f011 fa98 	bl	8016aa8 <debug>
	ADXL343_WriteRegister(0x20, offsetZ)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005578:	7c7b      	ldrb	r3, [r7, #17]
 800557a:	4619      	mov	r1, r3
 800557c:	2020      	movs	r0, #32
 800557e:	f000 f8c7 	bl	8005710 <ADXL343_WriteRegister>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <ADXL343_init+0x488>
 8005588:	4908      	ldr	r1, [pc, #32]	@ (80055ac <ADXL343_init+0x4a4>)
 800558a:	4809      	ldr	r0, [pc, #36]	@ (80055b0 <ADXL343_init+0x4a8>)
 800558c:	f011 fa8c 	bl	8016aa8 <debug>
}
 8005590:	bf00      	nop
 8005592:	3730      	adds	r7, #48	@ 0x30
 8005594:	46bd      	mov	sp, r7
 8005596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800559a:	bf00      	nop
 800559c:	f3af 8000 	nop.w
 80055a0:	90690691 	.word	0x90690691
 80055a4:	40306906 	.word	0x40306906
 80055a8:	66666667 	.word	0x66666667
 80055ac:	0801b654 	.word	0x0801b654
 80055b0:	0801b668 	.word	0x0801b668

080055b4 <ADXL343_getAcc>:
//Resort la valeur en mm/s2
XYZ_t ADXL343_getAcc(void){
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08e      	sub	sp, #56	@ 0x38
 80055b8:	af00      	add	r7, sp, #0
	XYZ_t accXYZ;
	int8_t a_x[2]={0,0};
 80055ba:	2300      	movs	r3, #0
 80055bc:	83bb      	strh	r3, [r7, #28]
	int8_t a_y[2]={0,0};
 80055be:	2300      	movs	r3, #0
 80055c0:	833b      	strh	r3, [r7, #24]
	int8_t a_z[2]={0,0};
 80055c2:	2300      	movs	r3, #0
 80055c4:	82bb      	strh	r3, [r7, #20]

	ADXL343_ReadRegister(0x32, (uint8_t*)a_x, 2)!=HAL_OK ? debug(D_ERROR,"I2C RECEIVE in ReadREGISTER"):(void)0;
 80055c6:	f107 031c 	add.w	r3, r7, #28
 80055ca:	2202      	movs	r2, #2
 80055cc:	4619      	mov	r1, r3
 80055ce:	2032      	movs	r0, #50	@ 0x32
 80055d0:	f000 f8bc 	bl	800574c <ADXL343_ReadRegister>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <ADXL343_getAcc+0x2e>
 80055da:	494b      	ldr	r1, [pc, #300]	@ (8005708 <ADXL343_getAcc+0x154>)
 80055dc:	484b      	ldr	r0, [pc, #300]	@ (800570c <ADXL343_getAcc+0x158>)
 80055de:	f011 fa63 	bl	8016aa8 <debug>
	ADXL343_ReadRegister(0x34, (uint8_t*)a_y, 2)!=HAL_OK ? debug(D_ERROR,"I2C RECEIVE in ReadREGISTER"):(void)0;
 80055e2:	f107 0318 	add.w	r3, r7, #24
 80055e6:	2202      	movs	r2, #2
 80055e8:	4619      	mov	r1, r3
 80055ea:	2034      	movs	r0, #52	@ 0x34
 80055ec:	f000 f8ae 	bl	800574c <ADXL343_ReadRegister>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <ADXL343_getAcc+0x4a>
 80055f6:	4944      	ldr	r1, [pc, #272]	@ (8005708 <ADXL343_getAcc+0x154>)
 80055f8:	4844      	ldr	r0, [pc, #272]	@ (800570c <ADXL343_getAcc+0x158>)
 80055fa:	f011 fa55 	bl	8016aa8 <debug>
	ADXL343_ReadRegister(0x36, (uint8_t*)a_z, 2)!=HAL_OK ? debug(D_ERROR,"I2C RECEIVE in ReadREGISTER"):(void)0;
 80055fe:	f107 0314 	add.w	r3, r7, #20
 8005602:	2202      	movs	r2, #2
 8005604:	4619      	mov	r1, r3
 8005606:	2036      	movs	r0, #54	@ 0x36
 8005608:	f000 f8a0 	bl	800574c <ADXL343_ReadRegister>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <ADXL343_getAcc+0x66>
 8005612:	493d      	ldr	r1, [pc, #244]	@ (8005708 <ADXL343_getAcc+0x154>)
 8005614:	483d      	ldr	r0, [pc, #244]	@ (800570c <ADXL343_getAcc+0x158>)
 8005616:	f011 fa47 	bl	8016aa8 <debug>
	accXYZ.X = (int16_t)(	a_x[1] << 8 | a_x[0]	)*ADXL_SENSIBILITY; //g.e-3 ie mm.s-2
 800561a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800561e:	021b      	lsls	r3, r3, #8
 8005620:	b21b      	sxth	r3, r3
 8005622:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8005626:	4313      	orrs	r3, r2
 8005628:	b21b      	sxth	r3, r3
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005634:	edc7 7a08 	vstr	s15, [r7, #32]
	accXYZ.Y = (int16_t)(	a_y[1] << 8 | a_y[0]	)*ADXL_SENSIBILITY;
 8005638:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	b21b      	sxth	r3, r3
 8005640:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8005644:	4313      	orrs	r3, r2
 8005646:	b21b      	sxth	r3, r3
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005652:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	accXYZ.Z = (int16_t)(	a_z[1] << 8 | a_z[0]	)*ADXL_SENSIBILITY;
 8005656:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	b21b      	sxth	r3, r3
 800565e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	b21b      	sxth	r3, r3
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005670:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	/** FILTRAGE **/
	accXYZ.X = abs(accXYZ.X)>=MM_S2_SEUIL ? accXYZ.X:0;
 8005674:	edd7 7a08 	vldr	s15, [r7, #32]
 8005678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800567c:	ee17 3a90 	vmov	r3, s15
 8005680:	2b00      	cmp	r3, #0
 8005682:	bfb8      	it	lt
 8005684:	425b      	neglt	r3, r3
 8005686:	2b27      	cmp	r3, #39	@ 0x27
 8005688:	dd01      	ble.n	800568e <ADXL343_getAcc+0xda>
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	e001      	b.n	8005692 <ADXL343_getAcc+0xde>
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	623b      	str	r3, [r7, #32]
	accXYZ.Y = abs(accXYZ.Y)>=MM_S2_SEUIL ? accXYZ.Y:0;
 8005694:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800569c:	ee17 3a90 	vmov	r3, s15
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bfb8      	it	lt
 80056a4:	425b      	neglt	r3, r3
 80056a6:	2b27      	cmp	r3, #39	@ 0x27
 80056a8:	dd01      	ble.n	80056ae <ADXL343_getAcc+0xfa>
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	e001      	b.n	80056b2 <ADXL343_getAcc+0xfe>
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	627b      	str	r3, [r7, #36]	@ 0x24
	accXYZ.Z = abs(accXYZ.Z)>=MM_S2_SEUIL ? accXYZ.Z:0;
 80056b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80056b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056bc:	ee17 3a90 	vmov	r3, s15
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bfb8      	it	lt
 80056c4:	425b      	neglt	r3, r3
 80056c6:	2b27      	cmp	r3, #39	@ 0x27
 80056c8:	dd01      	ble.n	80056ce <ADXL343_getAcc+0x11a>
 80056ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056cc:	e001      	b.n	80056d2 <ADXL343_getAcc+0x11e>
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	return accXYZ;
 80056d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80056d8:	f107 0220 	add.w	r2, r7, #32
 80056dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80056de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80056e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e8:	ee06 1a90 	vmov	s13, r1
 80056ec:	ee07 2a10 	vmov	s14, r2
 80056f0:	ee07 3a90 	vmov	s15, r3
	/*
	 * Pour obtenir vitesse et position : CallBack dans fichier .IT
	 */
}
 80056f4:	eeb0 0a66 	vmov.f32	s0, s13
 80056f8:	eef0 0a47 	vmov.f32	s1, s14
 80056fc:	eeb0 1a67 	vmov.f32	s2, s15
 8005700:	3738      	adds	r7, #56	@ 0x38
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	0801b6c8 	.word	0x0801b6c8
 800570c:	0801b668 	.word	0x0801b668

08005710 <ADXL343_WriteRegister>:

HAL_StatusTypeDef ADXL343_WriteRegister(uint8_t reg, uint8_t data){
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af02      	add	r7, sp, #8
 8005716:	4603      	mov	r3, r0
 8005718:	460a      	mov	r2, r1
 800571a:	71fb      	strb	r3, [r7, #7]
 800571c:	4613      	mov	r3, r2
 800571e:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2]={reg,data};
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	733b      	strb	r3, [r7, #12]
 8005724:	79bb      	ldrb	r3, [r7, #6]
 8005726:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&I2C_IMU, (uint16_t)(ADXL_ADRR<<1), buffer, 2 ,HAL_MAX_DELAY);
 8005728:	f107 020c 	add.w	r2, r7, #12
 800572c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	2302      	movs	r3, #2
 8005734:	21a6      	movs	r1, #166	@ 0xa6
 8005736:	4804      	ldr	r0, [pc, #16]	@ (8005748 <ADXL343_WriteRegister+0x38>)
 8005738:	f003 fa9a 	bl	8008c70 <HAL_I2C_Master_Transmit>
 800573c:	4603      	mov	r3, r0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20000608 	.word	0x20000608

0800574c <ADXL343_ReadRegister>:

HAL_StatusTypeDef ADXL343_ReadRegister(uint8_t reg, uint8_t* recptData, uint8_t lenData){
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af02      	add	r7, sp, #8
 8005752:	4603      	mov	r3, r0
 8005754:	6039      	str	r1, [r7, #0]
 8005756:	71fb      	strb	r3, [r7, #7]
 8005758:	4613      	mov	r3, r2
 800575a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&I2C_IMU, (uint16_t)(ADXL_ADRR<<1), &reg, 1 ,HAL_MAX_DELAY)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in ReadREGISTER"):(void)0;
 800575c:	1dfa      	adds	r2, r7, #7
 800575e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2301      	movs	r3, #1
 8005766:	21a6      	movs	r1, #166	@ 0xa6
 8005768:	480c      	ldr	r0, [pc, #48]	@ (800579c <ADXL343_ReadRegister+0x50>)
 800576a:	f003 fa81 	bl	8008c70 <HAL_I2C_Master_Transmit>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <ADXL343_ReadRegister+0x30>
 8005774:	490a      	ldr	r1, [pc, #40]	@ (80057a0 <ADXL343_ReadRegister+0x54>)
 8005776:	480b      	ldr	r0, [pc, #44]	@ (80057a4 <ADXL343_ReadRegister+0x58>)
 8005778:	f011 f996 	bl	8016aa8 <debug>
	return HAL_I2C_Master_Receive(&I2C_IMU, (uint16_t)(ADXL_ADRR<<1), recptData, lenData ,HAL_MAX_DELAY);
 800577c:	79bb      	ldrb	r3, [r7, #6]
 800577e:	b29b      	uxth	r3, r3
 8005780:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005784:	9200      	str	r2, [sp, #0]
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	21a6      	movs	r1, #166	@ 0xa6
 800578a:	4804      	ldr	r0, [pc, #16]	@ (800579c <ADXL343_ReadRegister+0x50>)
 800578c:	f003 fb88 	bl	8008ea0 <HAL_I2C_Master_Receive>
 8005790:	4603      	mov	r3, r0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000608 	.word	0x20000608
 80057a0:	0801b6e4 	.word	0x0801b6e4
 80057a4:	0801b668 	.word	0x0801b668

080057a8 <LP5812_Init>:
#define LP5812_I2C_INDEP_ADDR 0x1C
#define I2C_MAIN hi2c3


// Fonctions de configuration du LP5812
void LP5812_Init(void) {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
	debug(INFORMATION,"LP5812 - INIT");
 80057ac:	4960      	ldr	r1, [pc, #384]	@ (8005930 <LP5812_Init+0x188>)
 80057ae:	4861      	ldr	r0, [pc, #388]	@ (8005934 <LP5812_Init+0x18c>)
 80057b0:	f011 f97a 	bl	8016aa8 <debug>
	// Activer les LEDs en écrivant dans le registre ENABLE
	/*
	 * Set chip_en = 1 to enable the device
	 */
	LP5812_WriteRegister(0x000,0x01)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80057b4:	2101      	movs	r1, #1
 80057b6:	2000      	movs	r0, #0
 80057b8:	f000 f8c2 	bl	8005940 <LP5812_WriteRegister>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <LP5812_Init+0x22>
 80057c2:	495d      	ldr	r1, [pc, #372]	@ (8005938 <LP5812_Init+0x190>)
 80057c4:	485d      	ldr	r0, [pc, #372]	@ (800593c <LP5812_Init+0x194>)
 80057c6:	f011 f96f 	bl	8016aa8 <debug>
	/*
	 * Set led_mode = 4h to configure the LED drive mode as direct drive mode.
	 */
	LP5812_WriteRegister(0x002,0x40)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80057ca:	2140      	movs	r1, #64	@ 0x40
 80057cc:	2002      	movs	r0, #2
 80057ce:	f000 f8b7 	bl	8005940 <LP5812_WriteRegister>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <LP5812_Init+0x38>
 80057d8:	4957      	ldr	r1, [pc, #348]	@ (8005938 <LP5812_Init+0x190>)
 80057da:	4858      	ldr	r0, [pc, #352]	@ (800593c <LP5812_Init+0x194>)
 80057dc:	f011 f964 	bl	8016aa8 <debug>
	/*
	 * Send update command to complete configuration settings
	 */
	LP5812_WriteRegister(0x010,0x55)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80057e0:	2155      	movs	r1, #85	@ 0x55
 80057e2:	2010      	movs	r0, #16
 80057e4:	f000 f8ac 	bl	8005940 <LP5812_WriteRegister>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <LP5812_Init+0x4e>
 80057ee:	4952      	ldr	r1, [pc, #328]	@ (8005938 <LP5812_Init+0x190>)
 80057f0:	4852      	ldr	r0, [pc, #328]	@ (800593c <LP5812_Init+0x194>)
 80057f2:	f011 f959 	bl	8016aa8 <debug>
	//Lire le registre 300h pou être certain que la configuration est bonne

	/*
	 * Enable all 12 LEDs (Write F0h to register 020h and FFh to register 021h)
	 */
	LP5812_WriteRegister(0x020,0xF0)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80057f6:	21f0      	movs	r1, #240	@ 0xf0
 80057f8:	2020      	movs	r0, #32
 80057fa:	f000 f8a1 	bl	8005940 <LP5812_WriteRegister>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <LP5812_Init+0x64>
 8005804:	494c      	ldr	r1, [pc, #304]	@ (8005938 <LP5812_Init+0x190>)
 8005806:	484d      	ldr	r0, [pc, #308]	@ (800593c <LP5812_Init+0x194>)
 8005808:	f011 f94e 	bl	8016aa8 <debug>
	LP5812_WriteRegister(0x021,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 800580c:	21ff      	movs	r1, #255	@ 0xff
 800580e:	2021      	movs	r0, #33	@ 0x21
 8005810:	f000 f896 	bl	8005940 <LP5812_WriteRegister>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <LP5812_Init+0x7a>
 800581a:	4947      	ldr	r1, [pc, #284]	@ (8005938 <LP5812_Init+0x190>)
 800581c:	4847      	ldr	r0, [pc, #284]	@ (800593c <LP5812_Init+0x194>)
 800581e:	f011 f943 	bl	8016aa8 <debug>
	/*
	 * 	Set 51mA peak current for red LEDs (Write FFh to registers 035h, 038h, 03Bh, 03Eh) , and 40mA peak
	 *	current for green and blue LEDs (Write CCh to registers 034h, 036h, 037h, 039h, 03Ah, 03Ch, 03Dh,
		03Fh)
	 */
	LP5812_WriteRegister(0x035,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005822:	21ff      	movs	r1, #255	@ 0xff
 8005824:	2035      	movs	r0, #53	@ 0x35
 8005826:	f000 f88b 	bl	8005940 <LP5812_WriteRegister>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <LP5812_Init+0x90>
 8005830:	4941      	ldr	r1, [pc, #260]	@ (8005938 <LP5812_Init+0x190>)
 8005832:	4842      	ldr	r0, [pc, #264]	@ (800593c <LP5812_Init+0x194>)
 8005834:	f011 f938 	bl	8016aa8 <debug>
	LP5812_WriteRegister(0x038,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005838:	21ff      	movs	r1, #255	@ 0xff
 800583a:	2038      	movs	r0, #56	@ 0x38
 800583c:	f000 f880 	bl	8005940 <LP5812_WriteRegister>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <LP5812_Init+0xa6>
 8005846:	493c      	ldr	r1, [pc, #240]	@ (8005938 <LP5812_Init+0x190>)
 8005848:	483c      	ldr	r0, [pc, #240]	@ (800593c <LP5812_Init+0x194>)
 800584a:	f011 f92d 	bl	8016aa8 <debug>
	LP5812_WriteRegister(0x03B,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 800584e:	21ff      	movs	r1, #255	@ 0xff
 8005850:	203b      	movs	r0, #59	@ 0x3b
 8005852:	f000 f875 	bl	8005940 <LP5812_WriteRegister>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <LP5812_Init+0xbc>
 800585c:	4936      	ldr	r1, [pc, #216]	@ (8005938 <LP5812_Init+0x190>)
 800585e:	4837      	ldr	r0, [pc, #220]	@ (800593c <LP5812_Init+0x194>)
 8005860:	f011 f922 	bl	8016aa8 <debug>
	LP5812_WriteRegister(0x03E,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005864:	21ff      	movs	r1, #255	@ 0xff
 8005866:	203e      	movs	r0, #62	@ 0x3e
 8005868:	f000 f86a 	bl	8005940 <LP5812_WriteRegister>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <LP5812_Init+0xd2>
 8005872:	4931      	ldr	r1, [pc, #196]	@ (8005938 <LP5812_Init+0x190>)
 8005874:	4831      	ldr	r0, [pc, #196]	@ (800593c <LP5812_Init+0x194>)
 8005876:	f011 f917 	bl	8016aa8 <debug>
	/*	RED - BLUE And GREEN	*/
	LP5812_WriteRegister(0x034,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 800587a:	21cc      	movs	r1, #204	@ 0xcc
 800587c:	2034      	movs	r0, #52	@ 0x34
 800587e:	f000 f85f 	bl	8005940 <LP5812_WriteRegister>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <LP5812_Init+0xe8>
 8005888:	492b      	ldr	r1, [pc, #172]	@ (8005938 <LP5812_Init+0x190>)
 800588a:	482c      	ldr	r0, [pc, #176]	@ (800593c <LP5812_Init+0x194>)
 800588c:	f011 f90c 	bl	8016aa8 <debug>
	LP5812_WriteRegister(0x036,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005890:	21cc      	movs	r1, #204	@ 0xcc
 8005892:	2036      	movs	r0, #54	@ 0x36
 8005894:	f000 f854 	bl	8005940 <LP5812_WriteRegister>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <LP5812_Init+0xfe>
 800589e:	4926      	ldr	r1, [pc, #152]	@ (8005938 <LP5812_Init+0x190>)
 80058a0:	4826      	ldr	r0, [pc, #152]	@ (800593c <LP5812_Init+0x194>)
 80058a2:	f011 f901 	bl	8016aa8 <debug>
	LP5812_WriteRegister(0x037,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80058a6:	21cc      	movs	r1, #204	@ 0xcc
 80058a8:	2037      	movs	r0, #55	@ 0x37
 80058aa:	f000 f849 	bl	8005940 <LP5812_WriteRegister>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <LP5812_Init+0x114>
 80058b4:	4920      	ldr	r1, [pc, #128]	@ (8005938 <LP5812_Init+0x190>)
 80058b6:	4821      	ldr	r0, [pc, #132]	@ (800593c <LP5812_Init+0x194>)
 80058b8:	f011 f8f6 	bl	8016aa8 <debug>
	LP5812_WriteRegister(0x039,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80058bc:	21cc      	movs	r1, #204	@ 0xcc
 80058be:	2039      	movs	r0, #57	@ 0x39
 80058c0:	f000 f83e 	bl	8005940 <LP5812_WriteRegister>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <LP5812_Init+0x12a>
 80058ca:	491b      	ldr	r1, [pc, #108]	@ (8005938 <LP5812_Init+0x190>)
 80058cc:	481b      	ldr	r0, [pc, #108]	@ (800593c <LP5812_Init+0x194>)
 80058ce:	f011 f8eb 	bl	8016aa8 <debug>
	LP5812_WriteRegister(0x03A,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80058d2:	21cc      	movs	r1, #204	@ 0xcc
 80058d4:	203a      	movs	r0, #58	@ 0x3a
 80058d6:	f000 f833 	bl	8005940 <LP5812_WriteRegister>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <LP5812_Init+0x140>
 80058e0:	4915      	ldr	r1, [pc, #84]	@ (8005938 <LP5812_Init+0x190>)
 80058e2:	4816      	ldr	r0, [pc, #88]	@ (800593c <LP5812_Init+0x194>)
 80058e4:	f011 f8e0 	bl	8016aa8 <debug>
	LP5812_WriteRegister(0x03C,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80058e8:	21cc      	movs	r1, #204	@ 0xcc
 80058ea:	203c      	movs	r0, #60	@ 0x3c
 80058ec:	f000 f828 	bl	8005940 <LP5812_WriteRegister>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <LP5812_Init+0x156>
 80058f6:	4910      	ldr	r1, [pc, #64]	@ (8005938 <LP5812_Init+0x190>)
 80058f8:	4810      	ldr	r0, [pc, #64]	@ (800593c <LP5812_Init+0x194>)
 80058fa:	f011 f8d5 	bl	8016aa8 <debug>
	LP5812_WriteRegister(0x03D,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80058fe:	21cc      	movs	r1, #204	@ 0xcc
 8005900:	203d      	movs	r0, #61	@ 0x3d
 8005902:	f000 f81d 	bl	8005940 <LP5812_WriteRegister>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <LP5812_Init+0x16c>
 800590c:	490a      	ldr	r1, [pc, #40]	@ (8005938 <LP5812_Init+0x190>)
 800590e:	480b      	ldr	r0, [pc, #44]	@ (800593c <LP5812_Init+0x194>)
 8005910:	f011 f8ca 	bl	8016aa8 <debug>
	LP5812_WriteRegister(0x03F,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005914:	21cc      	movs	r1, #204	@ 0xcc
 8005916:	203f      	movs	r0, #63	@ 0x3f
 8005918:	f000 f812 	bl	8005940 <LP5812_WriteRegister>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <LP5812_Init+0x182>
 8005922:	4905      	ldr	r1, [pc, #20]	@ (8005938 <LP5812_Init+0x190>)
 8005924:	4805      	ldr	r0, [pc, #20]	@ (800593c <LP5812_Init+0x194>)
 8005926:	f011 f8bf 	bl	8016aa8 <debug>
*/
	/*//!\\Attention : L'adresse du composant est sur 2 bytes :
	 *				1er bytes est composé de R/W +  2dernier bytes du registres ciblé + Broadcast/Speci
	 *				2eme byte composé du reste du registre cible
	 */
}
 800592a:	bf00      	nop
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	0801b704 	.word	0x0801b704
 8005934:	0801b714 	.word	0x0801b714
 8005938:	0801b728 	.word	0x0801b728
 800593c:	0801b734 	.word	0x0801b734

08005940 <LP5812_WriteRegister>:


// Fonction pour écrire dans un registre 16 bits du LP5812
HAL_StatusTypeDef LP5812_WriteRegister(uint16_t reg, uint8_t data) {
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af02      	add	r7, sp, #8
 8005946:	4603      	mov	r3, r0
 8005948:	460a      	mov	r2, r1
 800594a:	80fb      	strh	r3, [r7, #6]
 800594c:	4613      	mov	r3, r2
 800594e:	717b      	strb	r3, [r7, #5]
	uint8_t addr_byte1, addr_byte2;
	uint8_t buffer[3];

	// Configuration des Address Byte 1 et Address Byte 2
	addr_byte1 = (LP5812_I2C_BASE_ADDR << 3) | ((reg >> 8) & 0x03);  // 5 bits d'adresse et 2 bits supérieurs du registre
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	b29b      	uxth	r3, r3
 8005956:	b25b      	sxtb	r3, r3
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	b25b      	sxtb	r3, r3
 800595e:	f063 0327 	orn	r3, r3, #39	@ 0x27
 8005962:	b25b      	sxtb	r3, r3
 8005964:	73fb      	strb	r3, [r7, #15]
	addr_byte2 = (uint8_t)(reg & 0xFF);                               // 8 bits inférieurs du registre
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	73bb      	strb	r3, [r7, #14]

	// Préparer les données à envoyer : Address Byte 2 et Data
	buffer[0] = addr_byte2;
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	723b      	strb	r3, [r7, #8]
	buffer[1] = data;
 800596e:	797b      	ldrb	r3, [r7, #5]
 8005970:	727b      	strb	r3, [r7, #9]

	// Envoyer Address Byte 1, puis buffer
	return HAL_I2C_Master_Transmit(&hi2c3, addr_byte1, buffer, 2, HAL_MAX_DELAY);
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	b299      	uxth	r1, r3
 8005976:	f107 0208 	add.w	r2, r7, #8
 800597a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	2302      	movs	r3, #2
 8005982:	4804      	ldr	r0, [pc, #16]	@ (8005994 <LP5812_WriteRegister+0x54>)
 8005984:	f003 f974 	bl	8008c70 <HAL_I2C_Master_Transmit>
 8005988:	4603      	mov	r3, r0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	2000065c 	.word	0x2000065c

08005998 <TCA9555_init>:
		{"POLARITY INVERSION PORT 0",	0x04},
		{"POLARITY INVERSION PORT 1",	0x05},
		{"CONFIGURATION PORT 0",	0x06},
		{"CONFIGURATION PORT 1",	0x07},
};
void TCA9555_init(void){
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
	debug(INFORMATION,"TCA9555 - INIT");
 800599e:	492a      	ldr	r1, [pc, #168]	@ (8005a48 <TCA9555_init+0xb0>)
 80059a0:	482a      	ldr	r0, [pc, #168]	@ (8005a4c <TCA9555_init+0xb4>)
 80059a2:	f011 f881 	bl	8016aa8 <debug>

	TCA9555_WriteRegister(0x06, 0b11111111)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in WriteREGISTER"):(void)0;
 80059a6:	21ff      	movs	r1, #255	@ 0xff
 80059a8:	2006      	movs	r0, #6
 80059aa:	f000 f859 	bl	8005a60 <TCA9555_WriteRegister>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <TCA9555_init+0x24>
 80059b4:	4926      	ldr	r1, [pc, #152]	@ (8005a50 <TCA9555_init+0xb8>)
 80059b6:	4827      	ldr	r0, [pc, #156]	@ (8005a54 <TCA9555_init+0xbc>)
 80059b8:	f011 f876 	bl	8016aa8 <debug>
	TCA9555_WriteRegister(0x07, 0b11001111)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in WriteREGISTER"):(void)0;
 80059bc:	21cf      	movs	r1, #207	@ 0xcf
 80059be:	2007      	movs	r0, #7
 80059c0:	f000 f84e 	bl	8005a60 <TCA9555_WriteRegister>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <TCA9555_init+0x3a>
 80059ca:	4921      	ldr	r1, [pc, #132]	@ (8005a50 <TCA9555_init+0xb8>)
 80059cc:	4821      	ldr	r0, [pc, #132]	@ (8005a54 <TCA9555_init+0xbc>)
 80059ce:	f011 f86b 	bl	8016aa8 <debug>
	TCA9555_WriteRegister(0x05, 0b11001111)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in WriteREGISTER"):(void)0;
 80059d2:	21cf      	movs	r1, #207	@ 0xcf
 80059d4:	2005      	movs	r0, #5
 80059d6:	f000 f843 	bl	8005a60 <TCA9555_WriteRegister>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <TCA9555_init+0x50>
 80059e0:	491b      	ldr	r1, [pc, #108]	@ (8005a50 <TCA9555_init+0xb8>)
 80059e2:	481c      	ldr	r0, [pc, #112]	@ (8005a54 <TCA9555_init+0xbc>)
 80059e4:	f011 f860 	bl	8016aa8 <debug>

	uint8_t startReg = 0x00;
 80059e8:	2300      	movs	r3, #0
 80059ea:	70fb      	strb	r3, [r7, #3]
	uint8_t endReg = 0x07;
 80059ec:	2307      	movs	r3, #7
 80059ee:	70bb      	strb	r3, [r7, #2]
	for (int i = 0; i <= endReg-startReg; i++) {
 80059f0:	2300      	movs	r3, #0
 80059f2:	607b      	str	r3, [r7, #4]
 80059f4:	e01c      	b.n	8005a30 <TCA9555_init+0x98>
		uint8_t ret=0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	707b      	strb	r3, [r7, #1]
		TCA9555_ReadRegister(GPIOExpRegister[i].reg, &ret,1);
 80059fa:	4a17      	ldr	r2, [pc, #92]	@ (8005a58 <TCA9555_init+0xc0>)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4413      	add	r3, r2
 8005a02:	791b      	ldrb	r3, [r3, #4]
 8005a04:	1c79      	adds	r1, r7, #1
 8005a06:	2201      	movs	r2, #1
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 f847 	bl	8005a9c <TCA9555_ReadRegister>
		printf("READ - 0x%02X (%s): 0x%02X\r\n", GPIOExpRegister[i].reg,GPIOExpRegister[i].name, ret);
 8005a0e:	4a12      	ldr	r2, [pc, #72]	@ (8005a58 <TCA9555_init+0xc0>)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	4413      	add	r3, r2
 8005a16:	791b      	ldrb	r3, [r3, #4]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8005a58 <TCA9555_init+0xc0>)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005a22:	787b      	ldrb	r3, [r7, #1]
 8005a24:	480d      	ldr	r0, [pc, #52]	@ (8005a5c <TCA9555_init+0xc4>)
 8005a26:	f012 fee5 	bl	80187f4 <iprintf>
	for (int i = 0; i <= endReg-startReg; i++) {
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	78ba      	ldrb	r2, [r7, #2]
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	dddc      	ble.n	80059f6 <TCA9555_init+0x5e>
	}
}
 8005a3c:	bf00      	nop
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	0801b808 	.word	0x0801b808
 8005a4c:	0801b818 	.word	0x0801b818
 8005a50:	0801b82c 	.word	0x0801b82c
 8005a54:	0801b84c 	.word	0x0801b84c
 8005a58:	200000f8 	.word	0x200000f8
 8005a5c:	0801b858 	.word	0x0801b858

08005a60 <TCA9555_WriteRegister>:

HAL_StatusTypeDef TCA9555_WriteRegister(uint8_t reg, uint8_t data){
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	4603      	mov	r3, r0
 8005a68:	460a      	mov	r2, r1
 8005a6a:	71fb      	strb	r3, [r7, #7]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2]={reg,data};
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	733b      	strb	r3, [r7, #12]
 8005a74:	79bb      	ldrb	r3, [r7, #6]
 8005a76:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&I2C_MAIN, (uint16_t)(TCA9555_ADRR<<1), buffer, 2 ,HAL_MAX_DELAY);
 8005a78:	f107 020c 	add.w	r2, r7, #12
 8005a7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	2302      	movs	r3, #2
 8005a84:	2140      	movs	r1, #64	@ 0x40
 8005a86:	4804      	ldr	r0, [pc, #16]	@ (8005a98 <TCA9555_WriteRegister+0x38>)
 8005a88:	f003 f8f2 	bl	8008c70 <HAL_I2C_Master_Transmit>
 8005a8c:	4603      	mov	r3, r0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	2000065c 	.word	0x2000065c

08005a9c <TCA9555_ReadRegister>:
HAL_StatusTypeDef TCA9555_ReadRegister(uint8_t reg, uint8_t* recptData, uint8_t lenData){
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	6039      	str	r1, [r7, #0]
 8005aa6:	71fb      	strb	r3, [r7, #7]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&I2C_MAIN, (uint16_t)(TCA9555_ADRR<<1), &reg, 1 ,HAL_MAX_DELAY) !=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in ReadREGISTER"):(void)0;
 8005aac:	1dfa      	adds	r2, r7, #7
 8005aae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	2140      	movs	r1, #64	@ 0x40
 8005ab8:	480c      	ldr	r0, [pc, #48]	@ (8005aec <TCA9555_ReadRegister+0x50>)
 8005aba:	f003 f8d9 	bl	8008c70 <HAL_I2C_Master_Transmit>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <TCA9555_ReadRegister+0x30>
 8005ac4:	490a      	ldr	r1, [pc, #40]	@ (8005af0 <TCA9555_ReadRegister+0x54>)
 8005ac6:	480b      	ldr	r0, [pc, #44]	@ (8005af4 <TCA9555_ReadRegister+0x58>)
 8005ac8:	f010 ffee 	bl	8016aa8 <debug>
	return HAL_I2C_Master_Receive(&I2C_MAIN, (uint16_t)(TCA9555_ADRR<<1), recptData, lenData ,HAL_MAX_DELAY);
 8005acc:	79bb      	ldrb	r3, [r7, #6]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ad4:	9200      	str	r2, [sp, #0]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	2140      	movs	r1, #64	@ 0x40
 8005ada:	4804      	ldr	r0, [pc, #16]	@ (8005aec <TCA9555_ReadRegister+0x50>)
 8005adc:	f003 f9e0 	bl	8008ea0 <HAL_I2C_Master_Receive>
 8005ae0:	4603      	mov	r3, r0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	2000065c 	.word	0x2000065c
 8005af0:	0801b878 	.word	0x0801b878
 8005af4:	0801b84c 	.word	0x0801b84c

08005af8 <ZXB5210_init>:
MDriver_Config_t MDriver2_FWD_Config;
MDriver_Config_t MDriver2_REV_Config;

int isSpeedInit = 0;

void ZXB5210_init(void){
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b096      	sub	sp, #88	@ 0x58
 8005afc:	af00      	add	r7, sp, #0
	debug(INFORMATION,"ZXB5210 - INIT");
 8005afe:	4946      	ldr	r1, [pc, #280]	@ (8005c18 <ZXB5210_init+0x120>)
 8005b00:	4846      	ldr	r0, [pc, #280]	@ (8005c1c <ZXB5210_init+0x124>)
 8005b02:	f010 ffd1 	bl	8016aa8 <debug>
	MDriver1_FWD_Config = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_3,.CCR_Channel = &htim2.Instance->CCR3,.pulseGoal = 0, .offset=0}; //28 Surement inutlie si l'asservissement en vitesse fonctionne un jour
 8005b06:	4b46      	ldr	r3, [pc, #280]	@ (8005c20 <ZXB5210_init+0x128>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	333c      	adds	r3, #60	@ 0x3c
 8005b0c:	4a45      	ldr	r2, [pc, #276]	@ (8005c24 <ZXB5210_init+0x12c>)
 8005b0e:	2108      	movs	r1, #8
 8005b10:	6011      	str	r1, [r2, #0]
 8005b12:	4a44      	ldr	r2, [pc, #272]	@ (8005c24 <ZXB5210_init+0x12c>)
 8005b14:	6053      	str	r3, [r2, #4]
 8005b16:	4b43      	ldr	r3, [pc, #268]	@ (8005c24 <ZXB5210_init+0x12c>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	609a      	str	r2, [r3, #8]
 8005b1c:	4b41      	ldr	r3, [pc, #260]	@ (8005c24 <ZXB5210_init+0x12c>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	60da      	str	r2, [r3, #12]
	MDriver1_REV_Config = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_4,.CCR_Channel = &htim2.Instance->CCR4,.pulseGoal = 0, .offset=0}; //36
 8005b22:	4b3f      	ldr	r3, [pc, #252]	@ (8005c20 <ZXB5210_init+0x128>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3340      	adds	r3, #64	@ 0x40
 8005b28:	4a3f      	ldr	r2, [pc, #252]	@ (8005c28 <ZXB5210_init+0x130>)
 8005b2a:	210c      	movs	r1, #12
 8005b2c:	6011      	str	r1, [r2, #0]
 8005b2e:	4a3e      	ldr	r2, [pc, #248]	@ (8005c28 <ZXB5210_init+0x130>)
 8005b30:	6053      	str	r3, [r2, #4]
 8005b32:	4b3d      	ldr	r3, [pc, #244]	@ (8005c28 <ZXB5210_init+0x130>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	609a      	str	r2, [r3, #8]
 8005b38:	4b3b      	ldr	r3, [pc, #236]	@ (8005c28 <ZXB5210_init+0x130>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	60da      	str	r2, [r3, #12]
	MDriver2_FWD_Config = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_4,.CCR_Channel = &htim3.Instance->CCR4,.pulseGoal = 0, .offset=0};
 8005b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c2c <ZXB5210_init+0x134>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3340      	adds	r3, #64	@ 0x40
 8005b44:	4a3a      	ldr	r2, [pc, #232]	@ (8005c30 <ZXB5210_init+0x138>)
 8005b46:	210c      	movs	r1, #12
 8005b48:	6011      	str	r1, [r2, #0]
 8005b4a:	4a39      	ldr	r2, [pc, #228]	@ (8005c30 <ZXB5210_init+0x138>)
 8005b4c:	6053      	str	r3, [r2, #4]
 8005b4e:	4b38      	ldr	r3, [pc, #224]	@ (8005c30 <ZXB5210_init+0x138>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	4b36      	ldr	r3, [pc, #216]	@ (8005c30 <ZXB5210_init+0x138>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	60da      	str	r2, [r3, #12]
	MDriver2_REV_Config = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_3,.CCR_Channel = &htim3.Instance->CCR3,.pulseGoal = 0, .offset=0};
 8005b5a:	4b34      	ldr	r3, [pc, #208]	@ (8005c2c <ZXB5210_init+0x134>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	333c      	adds	r3, #60	@ 0x3c
 8005b60:	4a34      	ldr	r2, [pc, #208]	@ (8005c34 <ZXB5210_init+0x13c>)
 8005b62:	2108      	movs	r1, #8
 8005b64:	6011      	str	r1, [r2, #0]
 8005b66:	4a33      	ldr	r2, [pc, #204]	@ (8005c34 <ZXB5210_init+0x13c>)
 8005b68:	6053      	str	r3, [r2, #4]
 8005b6a:	4b32      	ldr	r3, [pc, #200]	@ (8005c34 <ZXB5210_init+0x13c>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	609a      	str	r2, [r3, #8]
 8005b70:	4b30      	ldr	r3, [pc, #192]	@ (8005c34 <ZXB5210_init+0x13c>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	60da      	str	r2, [r3, #12]


	MDriver1 = (MDriver_t){
 8005b76:	4b30      	ldr	r3, [pc, #192]	@ (8005c38 <ZXB5210_init+0x140>)
 8005b78:	4a30      	ldr	r2, [pc, #192]	@ (8005c3c <ZXB5210_init+0x144>)
 8005b7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.htim = &htim2,
				.FWD = &MDriver1_FWD_Config,
				.REV = &MDriver1_REV_Config,
	};
	MDriver2 = (MDriver_t){
 8005b80:	4b2f      	ldr	r3, [pc, #188]	@ (8005c40 <ZXB5210_init+0x148>)
 8005b82:	4a30      	ldr	r2, [pc, #192]	@ (8005c44 <ZXB5210_init+0x14c>)
 8005b84:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.htim = &htim3,
				.FWD = &MDriver2_FWD_Config,
				.REV = &MDriver2_REV_Config,
	};
	HAL_TIM_PWM_Start(MDriver1.htim,MDriver1.FWD->Tim_Channel) == HAL_OK ? debug(START,"DRIVER1 - PWM CHANNEL FWD"):(void)0;
 8005b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8005c38 <ZXB5210_init+0x140>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8005c38 <ZXB5210_init+0x140>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4619      	mov	r1, r3
 8005b96:	4610      	mov	r0, r2
 8005b98:	f004 ff66 	bl	800aa68 <HAL_TIM_PWM_Start>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d103      	bne.n	8005baa <ZXB5210_init+0xb2>
 8005ba2:	4929      	ldr	r1, [pc, #164]	@ (8005c48 <ZXB5210_init+0x150>)
 8005ba4:	4829      	ldr	r0, [pc, #164]	@ (8005c4c <ZXB5210_init+0x154>)
 8005ba6:	f010 ff7f 	bl	8016aa8 <debug>
	HAL_TIM_PWM_Start(MDriver1.htim,MDriver1.REV->Tim_Channel) == HAL_OK ? debug(START,"DRIVER1 - PWM CHANNEL REV"):(void)0;
 8005baa:	4b23      	ldr	r3, [pc, #140]	@ (8005c38 <ZXB5210_init+0x140>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	4b22      	ldr	r3, [pc, #136]	@ (8005c38 <ZXB5210_init+0x140>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f004 ff56 	bl	800aa68 <HAL_TIM_PWM_Start>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d103      	bne.n	8005bca <ZXB5210_init+0xd2>
 8005bc2:	4923      	ldr	r1, [pc, #140]	@ (8005c50 <ZXB5210_init+0x158>)
 8005bc4:	4821      	ldr	r0, [pc, #132]	@ (8005c4c <ZXB5210_init+0x154>)
 8005bc6:	f010 ff6f 	bl	8016aa8 <debug>

	HAL_TIM_PWM_Start(MDriver2.htim,MDriver2.FWD->Tim_Channel) == HAL_OK ? debug(START,"DRIVER2 - PWM CHANNEL FWD"):(void)0;
 8005bca:	4b1d      	ldr	r3, [pc, #116]	@ (8005c40 <ZXB5210_init+0x148>)
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b1c      	ldr	r3, [pc, #112]	@ (8005c40 <ZXB5210_init+0x148>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	f004 ff46 	bl	800aa68 <HAL_TIM_PWM_Start>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <ZXB5210_init+0xf2>
 8005be2:	491c      	ldr	r1, [pc, #112]	@ (8005c54 <ZXB5210_init+0x15c>)
 8005be4:	4819      	ldr	r0, [pc, #100]	@ (8005c4c <ZXB5210_init+0x154>)
 8005be6:	f010 ff5f 	bl	8016aa8 <debug>
	HAL_TIM_PWM_Start(MDriver2.htim,MDriver2.REV->Tim_Channel) == HAL_OK ? debug(START,"DRIVER2 - PWM CHANNEL REV"):(void)0;
 8005bea:	4b15      	ldr	r3, [pc, #84]	@ (8005c40 <ZXB5210_init+0x148>)
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4b14      	ldr	r3, [pc, #80]	@ (8005c40 <ZXB5210_init+0x148>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	f004 ff36 	bl	800aa68 <HAL_TIM_PWM_Start>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d103      	bne.n	8005c0a <ZXB5210_init+0x112>
 8005c02:	4915      	ldr	r1, [pc, #84]	@ (8005c58 <ZXB5210_init+0x160>)
 8005c04:	4811      	ldr	r0, [pc, #68]	@ (8005c4c <ZXB5210_init+0x154>)
 8005c06:	f010 ff4f 	bl	8016aa8 <debug>

	isSpeedInit = 1;
 8005c0a:	4b14      	ldr	r3, [pc, #80]	@ (8005c5c <ZXB5210_init+0x164>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
}
 8005c10:	bf00      	nop
 8005c12:	3758      	adds	r7, #88	@ 0x58
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	0801b898 	.word	0x0801b898
 8005c1c:	0801b8a8 	.word	0x0801b8a8
 8005c20:	200007bc 	.word	0x200007bc
 8005c24:	20000d58 	.word	0x20000d58
 8005c28:	20000d68 	.word	0x20000d68
 8005c2c:	20000888 	.word	0x20000888
 8005c30:	20000d78 	.word	0x20000d78
 8005c34:	20000d88 	.word	0x20000d88
 8005c38:	20000d40 	.word	0x20000d40
 8005c3c:	0801b938 	.word	0x0801b938
 8005c40:	20000d4c 	.word	0x20000d4c
 8005c44:	0801b944 	.word	0x0801b944
 8005c48:	0801b8bc 	.word	0x0801b8bc
 8005c4c:	0801b8d8 	.word	0x0801b8d8
 8005c50:	0801b8e4 	.word	0x0801b8e4
 8005c54:	0801b900 	.word	0x0801b900
 8005c58:	0801b91c 	.word	0x0801b91c
 8005c5c:	20000d98 	.word	0x20000d98

08005c60 <ZXB5210_deinit>:
// Tout les channels ne sont pas cabler pareil

void ZXB5210_deinit(void){
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(MDriver1.htim,MDriver1.FWD->Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER1 - PWM CHANNEL FWD"):(void)0;
 8005c64:	4b20      	ldr	r3, [pc, #128]	@ (8005ce8 <ZXB5210_deinit+0x88>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	4b1f      	ldr	r3, [pc, #124]	@ (8005ce8 <ZXB5210_deinit+0x88>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4610      	mov	r0, r2
 8005c72:	f004 fff9 	bl	800ac68 <HAL_TIM_PWM_Stop>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d103      	bne.n	8005c84 <ZXB5210_deinit+0x24>
 8005c7c:	491b      	ldr	r1, [pc, #108]	@ (8005cec <ZXB5210_deinit+0x8c>)
 8005c7e:	481c      	ldr	r0, [pc, #112]	@ (8005cf0 <ZXB5210_deinit+0x90>)
 8005c80:	f010 ff12 	bl	8016aa8 <debug>
	HAL_TIM_PWM_Stop(MDriver1.htim,MDriver1.REV->Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER1 - PWM CHANNEL REV"):(void)0;
 8005c84:	4b18      	ldr	r3, [pc, #96]	@ (8005ce8 <ZXB5210_deinit+0x88>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	4b17      	ldr	r3, [pc, #92]	@ (8005ce8 <ZXB5210_deinit+0x88>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f004 ffe9 	bl	800ac68 <HAL_TIM_PWM_Stop>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d103      	bne.n	8005ca4 <ZXB5210_deinit+0x44>
 8005c9c:	4915      	ldr	r1, [pc, #84]	@ (8005cf4 <ZXB5210_deinit+0x94>)
 8005c9e:	4814      	ldr	r0, [pc, #80]	@ (8005cf0 <ZXB5210_deinit+0x90>)
 8005ca0:	f010 ff02 	bl	8016aa8 <debug>

	HAL_TIM_PWM_Stop(MDriver2.htim,MDriver2.FWD->Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER2 - PWM CHANNEL FWD"):(void)0;
 8005ca4:	4b14      	ldr	r3, [pc, #80]	@ (8005cf8 <ZXB5210_deinit+0x98>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	4b13      	ldr	r3, [pc, #76]	@ (8005cf8 <ZXB5210_deinit+0x98>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f004 ffd9 	bl	800ac68 <HAL_TIM_PWM_Stop>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d103      	bne.n	8005cc4 <ZXB5210_deinit+0x64>
 8005cbc:	490f      	ldr	r1, [pc, #60]	@ (8005cfc <ZXB5210_deinit+0x9c>)
 8005cbe:	480c      	ldr	r0, [pc, #48]	@ (8005cf0 <ZXB5210_deinit+0x90>)
 8005cc0:	f010 fef2 	bl	8016aa8 <debug>
	HAL_TIM_PWM_Stop(MDriver2.htim,MDriver2.REV->Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER2 - PWM CHANNEL REV"):(void)0;
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf8 <ZXB5210_deinit+0x98>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf8 <ZXB5210_deinit+0x98>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f004 ffc9 	bl	800ac68 <HAL_TIM_PWM_Stop>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d103      	bne.n	8005ce4 <ZXB5210_deinit+0x84>
 8005cdc:	4908      	ldr	r1, [pc, #32]	@ (8005d00 <ZXB5210_deinit+0xa0>)
 8005cde:	4804      	ldr	r0, [pc, #16]	@ (8005cf0 <ZXB5210_deinit+0x90>)
 8005ce0:	f010 fee2 	bl	8016aa8 <debug>
}
 8005ce4:	bf00      	nop
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20000d40 	.word	0x20000d40
 8005cec:	0801b8bc 	.word	0x0801b8bc
 8005cf0:	0801b950 	.word	0x0801b950
 8005cf4:	0801b8e4 	.word	0x0801b8e4
 8005cf8:	20000d4c 	.word	0x20000d4c
 8005cfc:	0801b900 	.word	0x0801b900
 8005d00:	0801b91c 	.word	0x0801b91c

08005d04 <ZXB5210_speed_FWD>:
	uint32_t pulse = (htim->Instance->ARR * alpha)/100;
	__HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL_4,pulse);
}
#endif

void ZXB5210_speed_FWD(MDriver_t* MDriver ,uint8_t alpha){
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70fb      	strb	r3, [r7, #3]
	ZXB5210_calc_speed(MDriver->FWD,(MDriver->htim->Instance->ARR * alpha)/100);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6858      	ldr	r0, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1c:	78fa      	ldrb	r2, [r7, #3]
 8005d1e:	fb02 f303 	mul.w	r3, r2, r3
 8005d22:	4a07      	ldr	r2, [pc, #28]	@ (8005d40 <ZXB5210_speed_FWD+0x3c>)
 8005d24:	fba2 2303 	umull	r2, r3, r2, r3
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	f000 f87c 	bl	8005e28 <ZXB5210_calc_speed>
	MDriver->REV->pulseGoal = 0;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2200      	movs	r2, #0
 8005d36:	609a      	str	r2, [r3, #8]
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	51eb851f 	.word	0x51eb851f

08005d44 <ZXB5210_speed_REV>:
void ZXB5210_speed_REV(MDriver_t *MDriver ,uint8_t alpha){
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
	ZXB5210_calc_speed(MDriver->REV,(MDriver->htim->Instance->ARR * alpha)/100);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6898      	ldr	r0, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5c:	78fa      	ldrb	r2, [r7, #3]
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	4a07      	ldr	r2, [pc, #28]	@ (8005d80 <ZXB5210_speed_REV+0x3c>)
 8005d64:	fba2 2303 	umull	r2, r3, r2, r3
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	f000 f85c 	bl	8005e28 <ZXB5210_calc_speed>
	MDriver->FWD->pulseGoal = 0;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	609a      	str	r2, [r3, #8]
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	51eb851f 	.word	0x51eb851f

08005d84 <IT_ZXB5210_speed_UPDATE>:
void IT_ZXB5210_speed_UPDATE(MDriver_t* MDriver, MDriver_Config_t* SENS){
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	uint32_t pulse = *(SENS->CCR_Channel);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
	pulse < SENS->pulseGoal ? // Si le pulse est trop petit
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
			pulse ++ :
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d203      	bcs.n	8005da8 <IT_ZXB5210_speed_UPDATE+0x24>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	e002      	b.n	8005dae <IT_ZXB5210_speed_UPDATE+0x2a>
			pulse --;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d105      	bne.n	8005dc2 <IT_ZXB5210_speed_UPDATE+0x3e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8005dc0:	e02c      	b.n	8005e1c <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d105      	bne.n	8005dd6 <IT_ZXB5210_speed_UPDATE+0x52>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005dd4:	e022      	b.n	8005e1c <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	d105      	bne.n	8005dea <IT_ZXB5210_speed_UPDATE+0x66>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8005de8:	e018      	b.n	8005e1c <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b0c      	cmp	r3, #12
 8005df0:	d105      	bne.n	8005dfe <IT_ZXB5210_speed_UPDATE+0x7a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8005dfc:	e00e      	b.n	8005e1c <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b10      	cmp	r3, #16
 8005e04:	d105      	bne.n	8005e12 <IT_ZXB5210_speed_UPDATE+0x8e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8005e10:	e004      	b.n	8005e1c <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <ZXB5210_calc_speed>:

void ZXB5210_calc_speed(MDriver_Config_t* MDriver_Config,uint32_t initial_Pulse){
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
	uint32_t pulseActu = initial_Pulse - MDriver_Config->offset;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	461a      	mov	r2, r3
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
	MDriver_Config->pulseGoal =  pulseActu >= 100 ? pulseActu : 100;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b64      	cmp	r3, #100	@ 0x64
 8005e42:	bf38      	it	cc
 8005e44:	2364      	movcc	r3, #100	@ 0x64
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	609a      	str	r2, [r3, #8]
}
 8005e4c:	bf00      	nop
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005e58:	480d      	ldr	r0, [pc, #52]	@ (8005e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005e5a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005e5c:	f7fe faa2 	bl	80043a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e60:	480c      	ldr	r0, [pc, #48]	@ (8005e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e62:	490d      	ldr	r1, [pc, #52]	@ (8005e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e64:	4a0d      	ldr	r2, [pc, #52]	@ (8005e9c <LoopForever+0xe>)
  movs r3, #0
 8005e66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005e68:	e002      	b.n	8005e70 <LoopCopyDataInit>

08005e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e6e:	3304      	adds	r3, #4

08005e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e74:	d3f9      	bcc.n	8005e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e76:	4a0a      	ldr	r2, [pc, #40]	@ (8005ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e78:	4c0a      	ldr	r4, [pc, #40]	@ (8005ea4 <LoopForever+0x16>)
  movs r3, #0
 8005e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e7c:	e001      	b.n	8005e82 <LoopFillZerobss>

08005e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e80:	3204      	adds	r2, #4

08005e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e84:	d3fb      	bcc.n	8005e7e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8005e86:	f012 fe0b 	bl	8018aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005e8a:	f7fd ff4f 	bl	8003d2c <main>

08005e8e <LoopForever>:

LoopForever:
    b LoopForever
 8005e8e:	e7fe      	b.n	8005e8e <LoopForever>
  ldr   r0, =_estack
 8005e90:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e98:	200004e4 	.word	0x200004e4
  ldr r2, =_sidata
 8005e9c:	0801c750 	.word	0x0801c750
  ldr r2, =_sbss
 8005ea0:	200004e4 	.word	0x200004e4
  ldr r4, =_ebss
 8005ea4:	20007808 	.word	0x20007808

08005ea8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ea8:	e7fe      	b.n	8005ea8 <COMP1_2_3_IRQHandler>

08005eaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005eb4:	2003      	movs	r0, #3
 8005eb6:	f001 ff44 	bl	8007d42 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005eba:	200f      	movs	r0, #15
 8005ebc:	f7fe f87c 	bl	8003fb8 <HAL_InitTick>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	71fb      	strb	r3, [r7, #7]
 8005eca:	e001      	b.n	8005ed0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ecc:	f7fe f84c 	bl	8003f68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ed0:	79fb      	ldrb	r3, [r7, #7]

}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ee0:	4b05      	ldr	r3, [pc, #20]	@ (8005ef8 <HAL_IncTick+0x1c>)
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <HAL_IncTick+0x20>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4413      	add	r3, r2
 8005eea:	4a03      	ldr	r2, [pc, #12]	@ (8005ef8 <HAL_IncTick+0x1c>)
 8005eec:	6013      	str	r3, [r2, #0]
}
 8005eee:	bf00      	nop
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	20000d9c 	.word	0x20000d9c
 8005efc:	2000013c 	.word	0x2000013c

08005f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  return uwTick;
 8005f04:	4b03      	ldr	r3, [pc, #12]	@ (8005f14 <HAL_GetTick+0x14>)
 8005f06:	681b      	ldr	r3, [r3, #0]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20000d9c 	.word	0x20000d9c

08005f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f20:	f7ff ffee 	bl	8005f00 <HAL_GetTick>
 8005f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f30:	d004      	beq.n	8005f3c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f32:	4b09      	ldr	r3, [pc, #36]	@ (8005f58 <HAL_Delay+0x40>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f3c:	bf00      	nop
 8005f3e:	f7ff ffdf 	bl	8005f00 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d8f7      	bhi.n	8005f3e <HAL_Delay+0x26>
  {
  }
}
 8005f4e:	bf00      	nop
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	2000013c 	.word	0x2000013c

08005f5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	609a      	str	r2, [r3, #8]
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3360      	adds	r3, #96	@ 0x60
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	4b08      	ldr	r3, [pc, #32]	@ (8006008 <LL_ADC_SetOffset+0x44>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	03fff000 	.word	0x03fff000

0800600c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3360      	adds	r3, #96	@ 0x60
 800601a:	461a      	mov	r2, r3
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3360      	adds	r3, #96	@ 0x60
 8006048:	461a      	mov	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	431a      	orrs	r2, r3
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800606e:	b480      	push	{r7}
 8006070:	b087      	sub	sp, #28
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3360      	adds	r3, #96	@ 0x60
 800607e:	461a      	mov	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	431a      	orrs	r2, r3
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3360      	adds	r3, #96	@ 0x60
 80060b4:	461a      	mov	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	431a      	orrs	r2, r3
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80060ce:	bf00      	nop
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	615a      	str	r2, [r3, #20]
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006126:	b480      	push	{r7}
 8006128:	b087      	sub	sp, #28
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3330      	adds	r3, #48	@ 0x30
 8006136:	461a      	mov	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	0a1b      	lsrs	r3, r3, #8
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	f003 030c 	and.w	r3, r3, #12
 8006142:	4413      	add	r3, r2
 8006144:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f003 031f 	and.w	r3, r3, #31
 8006150:	211f      	movs	r1, #31
 8006152:	fa01 f303 	lsl.w	r3, r1, r3
 8006156:	43db      	mvns	r3, r3
 8006158:	401a      	ands	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	0e9b      	lsrs	r3, r3, #26
 800615e:	f003 011f 	and.w	r1, r3, #31
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	fa01 f303 	lsl.w	r3, r1, r3
 800616c:	431a      	orrs	r2, r3
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800618a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3314      	adds	r3, #20
 80061b4:	461a      	mov	r2, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	0e5b      	lsrs	r3, r3, #25
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	4413      	add	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	0d1b      	lsrs	r3, r3, #20
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	2107      	movs	r1, #7
 80061d2:	fa01 f303 	lsl.w	r3, r1, r3
 80061d6:	43db      	mvns	r3, r3
 80061d8:	401a      	ands	r2, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	0d1b      	lsrs	r3, r3, #20
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	fa01 f303 	lsl.w	r3, r1, r3
 80061e8:	431a      	orrs	r2, r3
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
	...

080061fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006214:	43db      	mvns	r3, r3
 8006216:	401a      	ands	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f003 0318 	and.w	r3, r3, #24
 800621e:	4908      	ldr	r1, [pc, #32]	@ (8006240 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006220:	40d9      	lsrs	r1, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	400b      	ands	r3, r1
 8006226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800622a:	431a      	orrs	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006232:	bf00      	nop
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	0007ffff 	.word	0x0007ffff

08006244 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 031f 	and.w	r3, r3, #31
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8006270:	4618      	mov	r0, r3
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800628c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6093      	str	r3, [r2, #8]
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062b4:	d101      	bne.n	80062ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80062d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80062dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006304:	d101      	bne.n	800630a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006328:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800632c:	f043 0201 	orr.w	r2, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006350:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006354:	f043 0202 	orr.w	r2, r3, #2
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b01      	cmp	r3, #1
 800637a:	d101      	bne.n	8006380 <LL_ADC_IsEnabled+0x18>
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <LL_ADC_IsEnabled+0x1a>
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d101      	bne.n	80063a6 <LL_ADC_IsDisableOngoing+0x18>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <LL_ADC_IsDisableOngoing+0x1a>
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80063c8:	f043 0204 	orr.w	r2, r3, #4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80063f0:	f043 0210 	orr.w	r2, r3, #16
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b04      	cmp	r3, #4
 8006416:	d101      	bne.n	800641c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800643a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800643e:	f043 0220 	orr.w	r2, r3, #32
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b08      	cmp	r3, #8
 8006464:	d101      	bne.n	800646a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006466:	2301      	movs	r3, #1
 8006468:	e000      	b.n	800646c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b089      	sub	sp, #36	@ 0x24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006484:	2300      	movs	r3, #0
 8006486:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e167      	b.n	8006762 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d109      	bne.n	80064b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7fd f849 	bl	8003538 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff fef1 	bl	80062a0 <LL_ADC_IsDeepPowerDownEnabled>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d004      	beq.n	80064ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff fed7 	bl	800627c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff ff0c 	bl	80062f0 <LL_ADC_IsInternalRegulatorEnabled>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d115      	bne.n	800650a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7ff fef0 	bl	80062c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064e8:	4ba0      	ldr	r3, [pc, #640]	@ (800676c <HAL_ADC_Init+0x2f4>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	099b      	lsrs	r3, r3, #6
 80064ee:	4aa0      	ldr	r2, [pc, #640]	@ (8006770 <HAL_ADC_Init+0x2f8>)
 80064f0:	fba2 2303 	umull	r2, r3, r2, r3
 80064f4:	099b      	lsrs	r3, r3, #6
 80064f6:	3301      	adds	r3, #1
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80064fc:	e002      	b.n	8006504 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3b01      	subs	r3, #1
 8006502:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f9      	bne.n	80064fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff feee 	bl	80062f0 <LL_ADC_IsInternalRegulatorEnabled>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10d      	bne.n	8006536 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800651e:	f043 0210 	orr.w	r2, r3, #16
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800652a:	f043 0201 	orr.w	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff ff62 	bl	8006404 <LL_ADC_REG_IsConversionOngoing>
 8006540:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006546:	f003 0310 	and.w	r3, r3, #16
 800654a:	2b00      	cmp	r3, #0
 800654c:	f040 8100 	bne.w	8006750 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	f040 80fc 	bne.w	8006750 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800655c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006560:	f043 0202 	orr.w	r2, r3, #2
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fefb 	bl	8006368 <LL_ADC_IsEnabled>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d111      	bne.n	800659c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006578:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800657c:	f7ff fef4 	bl	8006368 <LL_ADC_IsEnabled>
 8006580:	4604      	mov	r4, r0
 8006582:	487c      	ldr	r0, [pc, #496]	@ (8006774 <HAL_ADC_Init+0x2fc>)
 8006584:	f7ff fef0 	bl	8006368 <LL_ADC_IsEnabled>
 8006588:	4603      	mov	r3, r0
 800658a:	4323      	orrs	r3, r4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d105      	bne.n	800659c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4619      	mov	r1, r3
 8006596:	4878      	ldr	r0, [pc, #480]	@ (8006778 <HAL_ADC_Init+0x300>)
 8006598:	f7ff fce0 	bl	8005f5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	7f5b      	ldrb	r3, [r3, #29]
 80065a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80065ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80065b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065bc:	4313      	orrs	r3, r2
 80065be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d106      	bne.n	80065d8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ce:	3b01      	subs	r3, #1
 80065d0:	045b      	lsls	r3, r3, #17
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d009      	beq.n	80065f4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	4b60      	ldr	r3, [pc, #384]	@ (800677c <HAL_ADC_Init+0x304>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	69b9      	ldr	r1, [r7, #24]
 8006604:	430b      	orrs	r3, r1
 8006606:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff ff15 	bl	8006452 <LL_ADC_INJ_IsConversionOngoing>
 8006628:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d16d      	bne.n	800670c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d16a      	bne.n	800670c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800663a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006642:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006644:	4313      	orrs	r3, r2
 8006646:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006652:	f023 0302 	bic.w	r3, r3, #2
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	6812      	ldr	r2, [r2, #0]
 800665a:	69b9      	ldr	r1, [r7, #24]
 800665c:	430b      	orrs	r3, r1
 800665e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d017      	beq.n	8006698 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006676:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006680:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6911      	ldr	r1, [r2, #16]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6812      	ldr	r2, [r2, #0]
 8006690:	430b      	orrs	r3, r1
 8006692:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006696:	e013      	b.n	80066c0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80066a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6812      	ldr	r2, [r2, #0]
 80066b4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80066b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80066bc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d118      	bne.n	80066fc <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80066d4:	f023 0304 	bic.w	r3, r3, #4
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80066e0:	4311      	orrs	r1, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80066e6:	4311      	orrs	r1, r2
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80066ec:	430a      	orrs	r2, r1
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f042 0201 	orr.w	r2, r2, #1
 80066f8:	611a      	str	r2, [r3, #16]
 80066fa:	e007      	b.n	800670c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691a      	ldr	r2, [r3, #16]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0201 	bic.w	r2, r2, #1
 800670a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d10c      	bne.n	800672e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671a:	f023 010f 	bic.w	r1, r3, #15
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	1e5a      	subs	r2, r3, #1
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	631a      	str	r2, [r3, #48]	@ 0x30
 800672c:	e007      	b.n	800673e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 020f 	bic.w	r2, r2, #15
 800673c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006742:	f023 0303 	bic.w	r3, r3, #3
 8006746:	f043 0201 	orr.w	r2, r3, #1
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800674e:	e007      	b.n	8006760 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006754:	f043 0210 	orr.w	r2, r3, #16
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006760:	7ffb      	ldrb	r3, [r7, #31]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3724      	adds	r7, #36	@ 0x24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd90      	pop	{r4, r7, pc}
 800676a:	bf00      	nop
 800676c:	20000004 	.word	0x20000004
 8006770:	053e2d63 	.word	0x053e2d63
 8006774:	50000100 	.word	0x50000100
 8006778:	50000300 	.word	0x50000300
 800677c:	fff04007 	.word	0xfff04007

08006780 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800678c:	4851      	ldr	r0, [pc, #324]	@ (80068d4 <HAL_ADC_Start_DMA+0x154>)
 800678e:	f7ff fd59 	bl	8006244 <LL_ADC_GetMultimode>
 8006792:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff fe33 	bl	8006404 <LL_ADC_REG_IsConversionOngoing>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f040 808f 	bne.w	80068c4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_ADC_Start_DMA+0x34>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e08a      	b.n	80068ca <HAL_ADC_Start_DMA+0x14a>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b05      	cmp	r3, #5
 80067c6:	d002      	beq.n	80067ce <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2b09      	cmp	r3, #9
 80067cc:	d173      	bne.n	80068b6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 ffd0 	bl	8007774 <ADC_Enable>
 80067d4:	4603      	mov	r3, r0
 80067d6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d166      	bne.n	80068ac <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80067e6:	f023 0301 	bic.w	r3, r3, #1
 80067ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a38      	ldr	r2, [pc, #224]	@ (80068d8 <HAL_ADC_Start_DMA+0x158>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d002      	beq.n	8006802 <HAL_ADC_Start_DMA+0x82>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	e001      	b.n	8006806 <HAL_ADC_Start_DMA+0x86>
 8006802:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	4293      	cmp	r3, r2
 800680c:	d002      	beq.n	8006814 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d105      	bne.n	8006820 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006818:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006824:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d006      	beq.n	800683a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006830:	f023 0206 	bic.w	r2, r3, #6
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	661a      	str	r2, [r3, #96]	@ 0x60
 8006838:	e002      	b.n	8006840 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006844:	4a25      	ldr	r2, [pc, #148]	@ (80068dc <HAL_ADC_Start_DMA+0x15c>)
 8006846:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684c:	4a24      	ldr	r2, [pc, #144]	@ (80068e0 <HAL_ADC_Start_DMA+0x160>)
 800684e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006854:	4a23      	ldr	r2, [pc, #140]	@ (80068e4 <HAL_ADC_Start_DMA+0x164>)
 8006856:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	221c      	movs	r2, #28
 800685e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0210 	orr.w	r2, r2, #16
 8006876:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3340      	adds	r3, #64	@ 0x40
 8006892:	4619      	mov	r1, r3
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f001 fd08 	bl	80082ac <HAL_DMA_Start_IT>
 800689c:	4603      	mov	r3, r0
 800689e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7ff fd85 	bl	80063b4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80068aa:	e00d      	b.n	80068c8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80068b4:	e008      	b.n	80068c8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80068c2:	e001      	b.n	80068c8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80068c4:	2302      	movs	r3, #2
 80068c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80068c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	50000300 	.word	0x50000300
 80068d8:	50000100 	.word	0x50000100
 80068dc:	0800793f 	.word	0x0800793f
 80068e0:	08007a17 	.word	0x08007a17
 80068e4:	08007a33 	.word	0x08007a33

080068e8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <HAL_ADC_Stop_DMA+0x16>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e051      	b.n	80069a2 <HAL_ADC_Stop_DMA+0xba>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006906:	2103      	movs	r1, #3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fe77 	bl	80075fc <ADC_ConversionStop>
 800690e:	4603      	mov	r3, r0
 8006910:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d13f      	bne.n	8006998 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0201 	bic.w	r2, r2, #1
 8006926:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800692c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d10f      	bne.n	8006956 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693a:	4618      	mov	r0, r3
 800693c:	f001 fd31 	bl	80083a2 <HAL_DMA_Abort>
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d005      	beq.n	8006956 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800694e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0210 	bic.w	r2, r2, #16
 8006964:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d105      	bne.n	8006978 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 ff87 	bl	8007880 <ADC_Disable>
 8006972:	4603      	mov	r3, r0
 8006974:	73fb      	strb	r3, [r7, #15]
 8006976:	e002      	b.n	800697e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 ff81 	bl	8007880 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d109      	bne.n	8006998 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006988:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	f043 0201 	orr.w	r2, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08a      	sub	sp, #40	@ 0x28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80069b4:	2300      	movs	r3, #0
 80069b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80069c8:	4883      	ldr	r0, [pc, #524]	@ (8006bd8 <HAL_ADC_IRQHandler+0x22c>)
 80069ca:	f7ff fc3b 	bl	8006244 <LL_ADC_GetMultimode>
 80069ce:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d017      	beq.n	8006a0a <HAL_ADC_IRQHandler+0x5e>
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d012      	beq.n	8006a0a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d105      	bne.n	80069fc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 f8e9 	bl	8007bd4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2202      	movs	r2, #2
 8006a08:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d004      	beq.n	8006a1e <HAL_ADC_IRQHandler+0x72>
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8085 	beq.w	8006b34 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d07f      	beq.n	8006b34 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a38:	f003 0310 	and.w	r3, r3, #16
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d105      	bne.n	8006a4c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff fb55 	bl	8006100 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d064      	beq.n	8006b26 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a5e      	ldr	r2, [pc, #376]	@ (8006bdc <HAL_ADC_IRQHandler+0x230>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d002      	beq.n	8006a6c <HAL_ADC_IRQHandler+0xc0>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	e001      	b.n	8006a70 <HAL_ADC_IRQHandler+0xc4>
 8006a6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	6812      	ldr	r2, [r2, #0]
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d008      	beq.n	8006a8a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d005      	beq.n	8006a8a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2b05      	cmp	r3, #5
 8006a82:	d002      	beq.n	8006a8a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2b09      	cmp	r3, #9
 8006a88:	d104      	bne.n	8006a94 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	623b      	str	r3, [r7, #32]
 8006a92:	e00d      	b.n	8006ab0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a50      	ldr	r2, [pc, #320]	@ (8006bdc <HAL_ADC_IRQHandler+0x230>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d002      	beq.n	8006aa4 <HAL_ADC_IRQHandler+0xf8>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	e001      	b.n	8006aa8 <HAL_ADC_IRQHandler+0xfc>
 8006aa4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006aa8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d135      	bne.n	8006b26 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d12e      	bne.n	8006b26 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7ff fc99 	bl	8006404 <LL_ADC_REG_IsConversionOngoing>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d11a      	bne.n	8006b0e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 020c 	bic.w	r2, r2, #12
 8006ae6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d112      	bne.n	8006b26 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b04:	f043 0201 	orr.w	r2, r3, #1
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006b0c:	e00b      	b.n	8006b26 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b12:	f043 0210 	orr.w	r2, r3, #16
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b1e:	f043 0201 	orr.w	r2, r3, #1
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f00f fa46 	bl	8015fb8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	220c      	movs	r2, #12
 8006b32:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d004      	beq.n	8006b48 <HAL_ADC_IRQHandler+0x19c>
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10b      	bne.n	8006b60 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 809e 	beq.w	8006c90 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 8098 	beq.w	8006c90 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d105      	bne.n	8006b78 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b70:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7ff fafe 	bl	800617e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006b82:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff fab9 	bl	8006100 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b8e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a11      	ldr	r2, [pc, #68]	@ (8006bdc <HAL_ADC_IRQHandler+0x230>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d002      	beq.n	8006ba0 <HAL_ADC_IRQHandler+0x1f4>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	e001      	b.n	8006ba4 <HAL_ADC_IRQHandler+0x1f8>
 8006ba0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6812      	ldr	r2, [r2, #0]
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d008      	beq.n	8006bbe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d005      	beq.n	8006bbe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b06      	cmp	r3, #6
 8006bb6:	d002      	beq.n	8006bbe <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2b07      	cmp	r3, #7
 8006bbc:	d104      	bne.n	8006bc8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	623b      	str	r3, [r7, #32]
 8006bc6:	e011      	b.n	8006bec <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a03      	ldr	r2, [pc, #12]	@ (8006bdc <HAL_ADC_IRQHandler+0x230>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d006      	beq.n	8006be0 <HAL_ADC_IRQHandler+0x234>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	e005      	b.n	8006be4 <HAL_ADC_IRQHandler+0x238>
 8006bd8:	50000300 	.word	0x50000300
 8006bdc:	50000100 	.word	0x50000100
 8006be0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006be4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d047      	beq.n	8006c82 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d007      	beq.n	8006c0c <HAL_ADC_IRQHandler+0x260>
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d03f      	beq.n	8006c82 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d13a      	bne.n	8006c82 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c16:	2b40      	cmp	r3, #64	@ 0x40
 8006c18:	d133      	bne.n	8006c82 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d12e      	bne.n	8006c82 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fc12 	bl	8006452 <LL_ADC_INJ_IsConversionOngoing>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d11a      	bne.n	8006c6a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c42:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d112      	bne.n	8006c82 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c60:	f043 0201 	orr.w	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c68:	e00b      	b.n	8006c82 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c6e:	f043 0210 	orr.w	r2, r3, #16
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c7a:	f043 0201 	orr.w	r2, r3, #1
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 ff7e 	bl	8007b84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2260      	movs	r2, #96	@ 0x60
 8006c8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d011      	beq.n	8006cbe <HAL_ADC_IRQHandler+0x312>
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00c      	beq.n	8006cbe <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f89f 	bl	8006df4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2280      	movs	r2, #128	@ 0x80
 8006cbc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d012      	beq.n	8006cee <HAL_ADC_IRQHandler+0x342>
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00d      	beq.n	8006cee <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 ff64 	bl	8007bac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d012      	beq.n	8006d1e <HAL_ADC_IRQHandler+0x372>
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00d      	beq.n	8006d1e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d06:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 ff56 	bl	8007bc0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d036      	beq.n	8006d96 <HAL_ADC_IRQHandler+0x3ea>
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	f003 0310 	and.w	r3, r3, #16
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d031      	beq.n	8006d96 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d102      	bne.n	8006d40 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d3e:	e014      	b.n	8006d6a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d008      	beq.n	8006d58 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006d46:	4825      	ldr	r0, [pc, #148]	@ (8006ddc <HAL_ADC_IRQHandler+0x430>)
 8006d48:	f7ff fa8a 	bl	8006260 <LL_ADC_GetMultiDMATransfer>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006d52:	2301      	movs	r3, #1
 8006d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d56:	e008      	b.n	8006d6a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006d66:	2301      	movs	r3, #1
 8006d68:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d10e      	bne.n	8006d8e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d74:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d80:	f043 0202 	orr.w	r2, r3, #2
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f83d 	bl	8006e08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2210      	movs	r2, #16
 8006d94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d018      	beq.n	8006dd2 <HAL_ADC_IRQHandler+0x426>
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d013      	beq.n	8006dd2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dae:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dba:	f043 0208 	orr.w	r2, r3, #8
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006dca:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fee3 	bl	8007b98 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006dd2:	bf00      	nop
 8006dd4:	3728      	adds	r7, #40	@ 0x28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	50000300 	.word	0x50000300

08006de0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b0b6      	sub	sp, #216	@ 0xd8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d101      	bne.n	8006e3e <HAL_ADC_ConfigChannel+0x22>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e3c8      	b.n	80075d0 <HAL_ADC_ConfigChannel+0x7b4>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fada 	bl	8006404 <LL_ADC_REG_IsConversionOngoing>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f040 83ad 	bne.w	80075b2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	6859      	ldr	r1, [r3, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	f7ff f95e 	bl	8006126 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff fac8 	bl	8006404 <LL_ADC_REG_IsConversionOngoing>
 8006e74:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff fae8 	bl	8006452 <LL_ADC_INJ_IsConversionOngoing>
 8006e82:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f040 81d9 	bne.w	8007242 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f040 81d4 	bne.w	8007242 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ea2:	d10f      	bne.n	8006ec4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6818      	ldr	r0, [r3, #0]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2200      	movs	r2, #0
 8006eae:	4619      	mov	r1, r3
 8006eb0:	f7ff f978 	bl	80061a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7ff f90c 	bl	80060da <LL_ADC_SetSamplingTimeCommonConfig>
 8006ec2:	e00e      	b.n	8006ee2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	6819      	ldr	r1, [r3, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	f7ff f967 	bl	80061a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff f8fc 	bl	80060da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	695a      	ldr	r2, [r3, #20]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	08db      	lsrs	r3, r3, #3
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	d022      	beq.n	8006f4a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6818      	ldr	r0, [r3, #0]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	6919      	ldr	r1, [r3, #16]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f14:	f7ff f856 	bl	8005fc4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	6919      	ldr	r1, [r3, #16]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	461a      	mov	r2, r3
 8006f26:	f7ff f8a2 	bl	800606e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6818      	ldr	r0, [r3, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d102      	bne.n	8006f40 <HAL_ADC_ConfigChannel+0x124>
 8006f3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f3e:	e000      	b.n	8006f42 <HAL_ADC_ConfigChannel+0x126>
 8006f40:	2300      	movs	r3, #0
 8006f42:	461a      	mov	r2, r3
 8006f44:	f7ff f8ae 	bl	80060a4 <LL_ADC_SetOffsetSaturation>
 8006f48:	e17b      	b.n	8007242 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2100      	movs	r1, #0
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff f85b 	bl	800600c <LL_ADC_GetOffsetChannel>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10a      	bne.n	8006f76 <HAL_ADC_ConfigChannel+0x15a>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2100      	movs	r1, #0
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7ff f850 	bl	800600c <LL_ADC_GetOffsetChannel>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	0e9b      	lsrs	r3, r3, #26
 8006f70:	f003 021f 	and.w	r2, r3, #31
 8006f74:	e01e      	b.n	8006fb4 <HAL_ADC_ConfigChannel+0x198>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff f845 	bl	800600c <LL_ADC_GetOffsetChannel>
 8006f82:	4603      	mov	r3, r0
 8006f84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f8c:	fa93 f3a3 	rbit	r3, r3
 8006f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006f94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006f9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8006fa4:	2320      	movs	r3, #32
 8006fa6:	e004      	b.n	8006fb2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006fa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fac:	fab3 f383 	clz	r3, r3
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d105      	bne.n	8006fcc <HAL_ADC_ConfigChannel+0x1b0>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	0e9b      	lsrs	r3, r3, #26
 8006fc6:	f003 031f 	and.w	r3, r3, #31
 8006fca:	e018      	b.n	8006ffe <HAL_ADC_ConfigChannel+0x1e2>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006fd8:	fa93 f3a3 	rbit	r3, r3
 8006fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006fe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006fe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006ff0:	2320      	movs	r3, #32
 8006ff2:	e004      	b.n	8006ffe <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006ff4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ff8:	fab3 f383 	clz	r3, r3
 8006ffc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d106      	bne.n	8007010 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2200      	movs	r2, #0
 8007008:	2100      	movs	r1, #0
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff f814 	bl	8006038 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2101      	movs	r1, #1
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fff8 	bl	800600c <LL_ADC_GetOffsetChannel>
 800701c:	4603      	mov	r3, r0
 800701e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10a      	bne.n	800703c <HAL_ADC_ConfigChannel+0x220>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2101      	movs	r1, #1
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe ffed 	bl	800600c <LL_ADC_GetOffsetChannel>
 8007032:	4603      	mov	r3, r0
 8007034:	0e9b      	lsrs	r3, r3, #26
 8007036:	f003 021f 	and.w	r2, r3, #31
 800703a:	e01e      	b.n	800707a <HAL_ADC_ConfigChannel+0x25e>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2101      	movs	r1, #1
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe ffe2 	bl	800600c <LL_ADC_GetOffsetChannel>
 8007048:	4603      	mov	r3, r0
 800704a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800704e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007052:	fa93 f3a3 	rbit	r3, r3
 8007056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800705a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800705e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007062:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800706a:	2320      	movs	r3, #32
 800706c:	e004      	b.n	8007078 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800706e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007072:	fab3 f383 	clz	r3, r3
 8007076:	b2db      	uxtb	r3, r3
 8007078:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007082:	2b00      	cmp	r3, #0
 8007084:	d105      	bne.n	8007092 <HAL_ADC_ConfigChannel+0x276>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	0e9b      	lsrs	r3, r3, #26
 800708c:	f003 031f 	and.w	r3, r3, #31
 8007090:	e018      	b.n	80070c4 <HAL_ADC_ConfigChannel+0x2a8>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800709a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800709e:	fa93 f3a3 	rbit	r3, r3
 80070a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80070a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80070aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80070ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80070b6:	2320      	movs	r3, #32
 80070b8:	e004      	b.n	80070c4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80070ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070be:	fab3 f383 	clz	r3, r3
 80070c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d106      	bne.n	80070d6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2200      	movs	r2, #0
 80070ce:	2101      	movs	r1, #1
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe ffb1 	bl	8006038 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2102      	movs	r1, #2
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe ff95 	bl	800600c <LL_ADC_GetOffsetChannel>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <HAL_ADC_ConfigChannel+0x2e6>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2102      	movs	r1, #2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fe ff8a 	bl	800600c <LL_ADC_GetOffsetChannel>
 80070f8:	4603      	mov	r3, r0
 80070fa:	0e9b      	lsrs	r3, r3, #26
 80070fc:	f003 021f 	and.w	r2, r3, #31
 8007100:	e01e      	b.n	8007140 <HAL_ADC_ConfigChannel+0x324>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2102      	movs	r1, #2
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe ff7f 	bl	800600c <LL_ADC_GetOffsetChannel>
 800710e:	4603      	mov	r3, r0
 8007110:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007114:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007118:	fa93 f3a3 	rbit	r3, r3
 800711c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007120:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007124:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007128:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8007130:	2320      	movs	r3, #32
 8007132:	e004      	b.n	800713e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8007134:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007138:	fab3 f383 	clz	r3, r3
 800713c:	b2db      	uxtb	r3, r3
 800713e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007148:	2b00      	cmp	r3, #0
 800714a:	d105      	bne.n	8007158 <HAL_ADC_ConfigChannel+0x33c>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	0e9b      	lsrs	r3, r3, #26
 8007152:	f003 031f 	and.w	r3, r3, #31
 8007156:	e016      	b.n	8007186 <HAL_ADC_ConfigChannel+0x36a>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007160:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007164:	fa93 f3a3 	rbit	r3, r3
 8007168:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800716a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800716c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007170:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007178:	2320      	movs	r3, #32
 800717a:	e004      	b.n	8007186 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800717c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007180:	fab3 f383 	clz	r3, r3
 8007184:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007186:	429a      	cmp	r2, r3
 8007188:	d106      	bne.n	8007198 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2200      	movs	r2, #0
 8007190:	2102      	movs	r1, #2
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe ff50 	bl	8006038 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2103      	movs	r1, #3
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe ff34 	bl	800600c <LL_ADC_GetOffsetChannel>
 80071a4:	4603      	mov	r3, r0
 80071a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <HAL_ADC_ConfigChannel+0x3a8>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2103      	movs	r1, #3
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fe ff29 	bl	800600c <LL_ADC_GetOffsetChannel>
 80071ba:	4603      	mov	r3, r0
 80071bc:	0e9b      	lsrs	r3, r3, #26
 80071be:	f003 021f 	and.w	r2, r3, #31
 80071c2:	e017      	b.n	80071f4 <HAL_ADC_ConfigChannel+0x3d8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2103      	movs	r1, #3
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe ff1e 	bl	800600c <LL_ADC_GetOffsetChannel>
 80071d0:	4603      	mov	r3, r0
 80071d2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071d6:	fa93 f3a3 	rbit	r3, r3
 80071da:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80071dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071de:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80071e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80071e6:	2320      	movs	r3, #32
 80071e8:	e003      	b.n	80071f2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80071ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ec:	fab3 f383 	clz	r3, r3
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d105      	bne.n	800720c <HAL_ADC_ConfigChannel+0x3f0>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	0e9b      	lsrs	r3, r3, #26
 8007206:	f003 031f 	and.w	r3, r3, #31
 800720a:	e011      	b.n	8007230 <HAL_ADC_ConfigChannel+0x414>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007212:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007214:	fa93 f3a3 	rbit	r3, r3
 8007218:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800721a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800721c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800721e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8007224:	2320      	movs	r3, #32
 8007226:	e003      	b.n	8007230 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8007228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800722a:	fab3 f383 	clz	r3, r3
 800722e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007230:	429a      	cmp	r2, r3
 8007232:	d106      	bne.n	8007242 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2200      	movs	r2, #0
 800723a:	2103      	movs	r1, #3
 800723c:	4618      	mov	r0, r3
 800723e:	f7fe fefb 	bl	8006038 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff f88e 	bl	8006368 <LL_ADC_IsEnabled>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	f040 8140 	bne.w	80074d4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	6819      	ldr	r1, [r3, #0]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	461a      	mov	r2, r3
 8007262:	f7fe ffcb 	bl	80061fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	4a8f      	ldr	r2, [pc, #572]	@ (80074a8 <HAL_ADC_ConfigChannel+0x68c>)
 800726c:	4293      	cmp	r3, r2
 800726e:	f040 8131 	bne.w	80074d4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10b      	bne.n	800729a <HAL_ADC_ConfigChannel+0x47e>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	0e9b      	lsrs	r3, r3, #26
 8007288:	3301      	adds	r3, #1
 800728a:	f003 031f 	and.w	r3, r3, #31
 800728e:	2b09      	cmp	r3, #9
 8007290:	bf94      	ite	ls
 8007292:	2301      	movls	r3, #1
 8007294:	2300      	movhi	r3, #0
 8007296:	b2db      	uxtb	r3, r3
 8007298:	e019      	b.n	80072ce <HAL_ADC_ConfigChannel+0x4b2>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072a2:	fa93 f3a3 	rbit	r3, r3
 80072a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80072a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072aa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80072ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80072b2:	2320      	movs	r3, #32
 80072b4:	e003      	b.n	80072be <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80072b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072b8:	fab3 f383 	clz	r3, r3
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	3301      	adds	r3, #1
 80072c0:	f003 031f 	and.w	r3, r3, #31
 80072c4:	2b09      	cmp	r3, #9
 80072c6:	bf94      	ite	ls
 80072c8:	2301      	movls	r3, #1
 80072ca:	2300      	movhi	r3, #0
 80072cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d079      	beq.n	80073c6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d107      	bne.n	80072ee <HAL_ADC_ConfigChannel+0x4d2>
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	0e9b      	lsrs	r3, r3, #26
 80072e4:	3301      	adds	r3, #1
 80072e6:	069b      	lsls	r3, r3, #26
 80072e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80072ec:	e015      	b.n	800731a <HAL_ADC_ConfigChannel+0x4fe>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072f6:	fa93 f3a3 	rbit	r3, r3
 80072fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80072fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072fe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8007300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8007306:	2320      	movs	r3, #32
 8007308:	e003      	b.n	8007312 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800730a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800730c:	fab3 f383 	clz	r3, r3
 8007310:	b2db      	uxtb	r3, r3
 8007312:	3301      	adds	r3, #1
 8007314:	069b      	lsls	r3, r3, #26
 8007316:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007322:	2b00      	cmp	r3, #0
 8007324:	d109      	bne.n	800733a <HAL_ADC_ConfigChannel+0x51e>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	0e9b      	lsrs	r3, r3, #26
 800732c:	3301      	adds	r3, #1
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	2101      	movs	r1, #1
 8007334:	fa01 f303 	lsl.w	r3, r1, r3
 8007338:	e017      	b.n	800736a <HAL_ADC_ConfigChannel+0x54e>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007342:	fa93 f3a3 	rbit	r3, r3
 8007346:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800734a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800734c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8007352:	2320      	movs	r3, #32
 8007354:	e003      	b.n	800735e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8007356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007358:	fab3 f383 	clz	r3, r3
 800735c:	b2db      	uxtb	r3, r3
 800735e:	3301      	adds	r3, #1
 8007360:	f003 031f 	and.w	r3, r3, #31
 8007364:	2101      	movs	r1, #1
 8007366:	fa01 f303 	lsl.w	r3, r1, r3
 800736a:	ea42 0103 	orr.w	r1, r2, r3
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10a      	bne.n	8007390 <HAL_ADC_ConfigChannel+0x574>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	0e9b      	lsrs	r3, r3, #26
 8007380:	3301      	adds	r3, #1
 8007382:	f003 021f 	and.w	r2, r3, #31
 8007386:	4613      	mov	r3, r2
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	4413      	add	r3, r2
 800738c:	051b      	lsls	r3, r3, #20
 800738e:	e018      	b.n	80073c2 <HAL_ADC_ConfigChannel+0x5a6>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007398:	fa93 f3a3 	rbit	r3, r3
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800739e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80073a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80073a8:	2320      	movs	r3, #32
 80073aa:	e003      	b.n	80073b4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80073ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ae:	fab3 f383 	clz	r3, r3
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	3301      	adds	r3, #1
 80073b6:	f003 021f 	and.w	r2, r3, #31
 80073ba:	4613      	mov	r3, r2
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	4413      	add	r3, r2
 80073c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073c2:	430b      	orrs	r3, r1
 80073c4:	e081      	b.n	80074ca <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d107      	bne.n	80073e2 <HAL_ADC_ConfigChannel+0x5c6>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	0e9b      	lsrs	r3, r3, #26
 80073d8:	3301      	adds	r3, #1
 80073da:	069b      	lsls	r3, r3, #26
 80073dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80073e0:	e015      	b.n	800740e <HAL_ADC_ConfigChannel+0x5f2>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ea:	fa93 f3a3 	rbit	r3, r3
 80073ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80073f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80073f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80073fa:	2320      	movs	r3, #32
 80073fc:	e003      	b.n	8007406 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	fab3 f383 	clz	r3, r3
 8007404:	b2db      	uxtb	r3, r3
 8007406:	3301      	adds	r3, #1
 8007408:	069b      	lsls	r3, r3, #26
 800740a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007416:	2b00      	cmp	r3, #0
 8007418:	d109      	bne.n	800742e <HAL_ADC_ConfigChannel+0x612>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	0e9b      	lsrs	r3, r3, #26
 8007420:	3301      	adds	r3, #1
 8007422:	f003 031f 	and.w	r3, r3, #31
 8007426:	2101      	movs	r1, #1
 8007428:	fa01 f303 	lsl.w	r3, r1, r3
 800742c:	e017      	b.n	800745e <HAL_ADC_ConfigChannel+0x642>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	fa93 f3a3 	rbit	r3, r3
 800743a:	61fb      	str	r3, [r7, #28]
  return result;
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8007446:	2320      	movs	r3, #32
 8007448:	e003      	b.n	8007452 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	fab3 f383 	clz	r3, r3
 8007450:	b2db      	uxtb	r3, r3
 8007452:	3301      	adds	r3, #1
 8007454:	f003 031f 	and.w	r3, r3, #31
 8007458:	2101      	movs	r1, #1
 800745a:	fa01 f303 	lsl.w	r3, r1, r3
 800745e:	ea42 0103 	orr.w	r1, r2, r3
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10d      	bne.n	800748a <HAL_ADC_ConfigChannel+0x66e>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	0e9b      	lsrs	r3, r3, #26
 8007474:	3301      	adds	r3, #1
 8007476:	f003 021f 	and.w	r2, r3, #31
 800747a:	4613      	mov	r3, r2
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	4413      	add	r3, r2
 8007480:	3b1e      	subs	r3, #30
 8007482:	051b      	lsls	r3, r3, #20
 8007484:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007488:	e01e      	b.n	80074c8 <HAL_ADC_ConfigChannel+0x6ac>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	fa93 f3a3 	rbit	r3, r3
 8007496:	613b      	str	r3, [r7, #16]
  return result;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d104      	bne.n	80074ac <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80074a2:	2320      	movs	r3, #32
 80074a4:	e006      	b.n	80074b4 <HAL_ADC_ConfigChannel+0x698>
 80074a6:	bf00      	nop
 80074a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	fab3 f383 	clz	r3, r3
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	3301      	adds	r3, #1
 80074b6:	f003 021f 	and.w	r2, r3, #31
 80074ba:	4613      	mov	r3, r2
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	4413      	add	r3, r2
 80074c0:	3b1e      	subs	r3, #30
 80074c2:	051b      	lsls	r3, r3, #20
 80074c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074ce:	4619      	mov	r1, r3
 80074d0:	f7fe fe68 	bl	80061a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	4b3f      	ldr	r3, [pc, #252]	@ (80075d8 <HAL_ADC_ConfigChannel+0x7bc>)
 80074da:	4013      	ands	r3, r2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d071      	beq.n	80075c4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80074e0:	483e      	ldr	r0, [pc, #248]	@ (80075dc <HAL_ADC_ConfigChannel+0x7c0>)
 80074e2:	f7fe fd61 	bl	8005fa8 <LL_ADC_GetCommonPathInternalCh>
 80074e6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a3c      	ldr	r2, [pc, #240]	@ (80075e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d004      	beq.n	80074fe <HAL_ADC_ConfigChannel+0x6e2>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a3a      	ldr	r2, [pc, #232]	@ (80075e4 <HAL_ADC_ConfigChannel+0x7c8>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d127      	bne.n	800754e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80074fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007502:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d121      	bne.n	800754e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007512:	d157      	bne.n	80075c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007518:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800751c:	4619      	mov	r1, r3
 800751e:	482f      	ldr	r0, [pc, #188]	@ (80075dc <HAL_ADC_ConfigChannel+0x7c0>)
 8007520:	f7fe fd2f 	bl	8005f82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007524:	4b30      	ldr	r3, [pc, #192]	@ (80075e8 <HAL_ADC_ConfigChannel+0x7cc>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	099b      	lsrs	r3, r3, #6
 800752a:	4a30      	ldr	r2, [pc, #192]	@ (80075ec <HAL_ADC_ConfigChannel+0x7d0>)
 800752c:	fba2 2303 	umull	r2, r3, r2, r3
 8007530:	099b      	lsrs	r3, r3, #6
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	4613      	mov	r3, r2
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800753e:	e002      	b.n	8007546 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3b01      	subs	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1f9      	bne.n	8007540 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800754c:	e03a      	b.n	80075c4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a27      	ldr	r2, [pc, #156]	@ (80075f0 <HAL_ADC_ConfigChannel+0x7d4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d113      	bne.n	8007580 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007558:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800755c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10d      	bne.n	8007580 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a22      	ldr	r2, [pc, #136]	@ (80075f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d02a      	beq.n	80075c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800756e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007572:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007576:	4619      	mov	r1, r3
 8007578:	4818      	ldr	r0, [pc, #96]	@ (80075dc <HAL_ADC_ConfigChannel+0x7c0>)
 800757a:	f7fe fd02 	bl	8005f82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800757e:	e021      	b.n	80075c4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a1c      	ldr	r2, [pc, #112]	@ (80075f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d11c      	bne.n	80075c4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800758a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800758e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d116      	bne.n	80075c4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a16      	ldr	r2, [pc, #88]	@ (80075f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d011      	beq.n	80075c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80075a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075a8:	4619      	mov	r1, r3
 80075aa:	480c      	ldr	r0, [pc, #48]	@ (80075dc <HAL_ADC_ConfigChannel+0x7c0>)
 80075ac:	f7fe fce9 	bl	8005f82 <LL_ADC_SetCommonPathInternalCh>
 80075b0:	e008      	b.n	80075c4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075b6:	f043 0220 	orr.w	r2, r3, #32
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80075cc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	37d8      	adds	r7, #216	@ 0xd8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	80080000 	.word	0x80080000
 80075dc:	50000300 	.word	0x50000300
 80075e0:	c3210000 	.word	0xc3210000
 80075e4:	90c00010 	.word	0x90c00010
 80075e8:	20000004 	.word	0x20000004
 80075ec:	053e2d63 	.word	0x053e2d63
 80075f0:	c7520000 	.word	0xc7520000
 80075f4:	50000100 	.word	0x50000100
 80075f8:	cb840000 	.word	0xcb840000

080075fc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8007606:	2300      	movs	r3, #0
 8007608:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4618      	mov	r0, r3
 8007614:	f7fe fef6 	bl	8006404 <LL_ADC_REG_IsConversionOngoing>
 8007618:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe ff17 	bl	8006452 <LL_ADC_INJ_IsConversionOngoing>
 8007624:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d103      	bne.n	8007634 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 8098 	beq.w	8007764 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d02a      	beq.n	8007698 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7f5b      	ldrb	r3, [r3, #29]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d126      	bne.n	8007698 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	7f1b      	ldrb	r3, [r3, #28]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d122      	bne.n	8007698 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8007652:	2301      	movs	r3, #1
 8007654:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007656:	e014      	b.n	8007682 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	4a45      	ldr	r2, [pc, #276]	@ (8007770 <ADC_ConversionStop+0x174>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d90d      	bls.n	800767c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007664:	f043 0210 	orr.w	r2, r3, #16
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007670:	f043 0201 	orr.w	r2, r3, #1
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e074      	b.n	8007766 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	3301      	adds	r3, #1
 8007680:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800768c:	2b40      	cmp	r3, #64	@ 0x40
 800768e:	d1e3      	bne.n	8007658 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2240      	movs	r2, #64	@ 0x40
 8007696:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	2b02      	cmp	r3, #2
 800769c:	d014      	beq.n	80076c8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe feae 	bl	8006404 <LL_ADC_REG_IsConversionOngoing>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00c      	beq.n	80076c8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe fe6b 	bl	800638e <LL_ADC_IsDisableOngoing>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d104      	bne.n	80076c8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe fe8a 	bl	80063dc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d014      	beq.n	80076f8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fe febd 	bl	8006452 <LL_ADC_INJ_IsConversionOngoing>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00c      	beq.n	80076f8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe fe53 	bl	800638e <LL_ADC_IsDisableOngoing>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d104      	bne.n	80076f8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe fe99 	bl	800642a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d005      	beq.n	800770a <ADC_ConversionStop+0x10e>
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b03      	cmp	r3, #3
 8007702:	d105      	bne.n	8007710 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007704:	230c      	movs	r3, #12
 8007706:	617b      	str	r3, [r7, #20]
        break;
 8007708:	e005      	b.n	8007716 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800770a:	2308      	movs	r3, #8
 800770c:	617b      	str	r3, [r7, #20]
        break;
 800770e:	e002      	b.n	8007716 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007710:	2304      	movs	r3, #4
 8007712:	617b      	str	r3, [r7, #20]
        break;
 8007714:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007716:	f7fe fbf3 	bl	8005f00 <HAL_GetTick>
 800771a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800771c:	e01b      	b.n	8007756 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800771e:	f7fe fbef 	bl	8005f00 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b05      	cmp	r3, #5
 800772a:	d914      	bls.n	8007756 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	4013      	ands	r3, r2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00d      	beq.n	8007756 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800773e:	f043 0210 	orr.w	r2, r3, #16
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800774a:	f043 0201 	orr.w	r2, r3, #1
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e007      	b.n	8007766 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	4013      	ands	r3, r2
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1dc      	bne.n	800771e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	a33fffff 	.word	0xa33fffff

08007774 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800777c:	2300      	movs	r3, #0
 800777e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe fdef 	bl	8006368 <LL_ADC_IsEnabled>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d169      	bne.n	8007864 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	4b36      	ldr	r3, [pc, #216]	@ (8007870 <ADC_Enable+0xfc>)
 8007798:	4013      	ands	r3, r2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00d      	beq.n	80077ba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a2:	f043 0210 	orr.w	r2, r3, #16
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ae:	f043 0201 	orr.w	r2, r3, #1
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e055      	b.n	8007866 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fe fdaa 	bl	8006318 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80077c4:	482b      	ldr	r0, [pc, #172]	@ (8007874 <ADC_Enable+0x100>)
 80077c6:	f7fe fbef 	bl	8005fa8 <LL_ADC_GetCommonPathInternalCh>
 80077ca:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80077cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d013      	beq.n	80077fc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80077d4:	4b28      	ldr	r3, [pc, #160]	@ (8007878 <ADC_Enable+0x104>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	099b      	lsrs	r3, r3, #6
 80077da:	4a28      	ldr	r2, [pc, #160]	@ (800787c <ADC_Enable+0x108>)
 80077dc:	fba2 2303 	umull	r2, r3, r2, r3
 80077e0:	099b      	lsrs	r3, r3, #6
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	4613      	mov	r3, r2
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	4413      	add	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80077ee:	e002      	b.n	80077f6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f9      	bne.n	80077f0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80077fc:	f7fe fb80 	bl	8005f00 <HAL_GetTick>
 8007800:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007802:	e028      	b.n	8007856 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe fdad 	bl	8006368 <LL_ADC_IsEnabled>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d104      	bne.n	800781e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe fd7d 	bl	8006318 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800781e:	f7fe fb6f 	bl	8005f00 <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b02      	cmp	r3, #2
 800782a:	d914      	bls.n	8007856 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b01      	cmp	r3, #1
 8007838:	d00d      	beq.n	8007856 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800783e:	f043 0210 	orr.w	r2, r3, #16
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800784a:	f043 0201 	orr.w	r2, r3, #1
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e007      	b.n	8007866 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b01      	cmp	r3, #1
 8007862:	d1cf      	bne.n	8007804 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	8000003f 	.word	0x8000003f
 8007874:	50000300 	.word	0x50000300
 8007878:	20000004 	.word	0x20000004
 800787c:	053e2d63 	.word	0x053e2d63

08007880 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe fd7e 	bl	800638e <LL_ADC_IsDisableOngoing>
 8007892:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe fd65 	bl	8006368 <LL_ADC_IsEnabled>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d047      	beq.n	8007934 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d144      	bne.n	8007934 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f003 030d 	and.w	r3, r3, #13
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d10c      	bne.n	80078d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe fd3f 	bl	8006340 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2203      	movs	r2, #3
 80078c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80078ca:	f7fe fb19 	bl	8005f00 <HAL_GetTick>
 80078ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80078d0:	e029      	b.n	8007926 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078d6:	f043 0210 	orr.w	r2, r3, #16
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078e2:	f043 0201 	orr.w	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e023      	b.n	8007936 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80078ee:	f7fe fb07 	bl	8005f00 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d914      	bls.n	8007926 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00d      	beq.n	8007926 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800790e:	f043 0210 	orr.w	r2, r3, #16
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800791a:	f043 0201 	orr.w	r2, r3, #1
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e007      	b.n	8007936 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1dc      	bne.n	80078ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007950:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007954:	2b00      	cmp	r3, #0
 8007956:	d14b      	bne.n	80079f0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800795c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0308 	and.w	r3, r3, #8
 800796e:	2b00      	cmp	r3, #0
 8007970:	d021      	beq.n	80079b6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe fbc2 	bl	8006100 <LL_ADC_REG_IsTriggerSourceSWStart>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d032      	beq.n	80079e8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d12b      	bne.n	80079e8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007994:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d11f      	bne.n	80079e8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ac:	f043 0201 	orr.w	r2, r3, #1
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80079b4:	e018      	b.n	80079e8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d111      	bne.n	80079e8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d105      	bne.n	80079e8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079e0:	f043 0201 	orr.w	r2, r3, #1
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f00e fae5 	bl	8015fb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80079ee:	e00e      	b.n	8007a0e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f7ff fa03 	bl	8006e08 <HAL_ADC_ErrorCallback>
}
 8007a02:	e004      	b.n	8007a0e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	4798      	blx	r3
}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f7ff f9db 	bl	8006de0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a2a:	bf00      	nop
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a50:	f043 0204 	orr.w	r2, r3, #4
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7ff f9d5 	bl	8006e08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <LL_ADC_StartCalibration>:
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007a78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	609a      	str	r2, [r3, #8]
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <LL_ADC_IsCalibrationOnGoing>:
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007aac:	d101      	bne.n	8007ab2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_ADCEx_Calibration_Start+0x1c>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e04d      	b.n	8007b78 <HAL_ADCEx_Calibration_Start+0xb8>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff fecb 	bl	8007880 <ADC_Disable>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d136      	bne.n	8007b62 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007af8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007afc:	f023 0302 	bic.w	r3, r3, #2
 8007b00:	f043 0202 	orr.w	r2, r3, #2
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff ffa9 	bl	8007a66 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007b14:	e014      	b.n	8007b40 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	4a18      	ldr	r2, [pc, #96]	@ (8007b80 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d90d      	bls.n	8007b40 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b28:	f023 0312 	bic.w	r3, r3, #18
 8007b2c:	f043 0210 	orr.w	r2, r3, #16
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e01b      	b.n	8007b78 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff ffa7 	bl	8007a98 <LL_ADC_IsCalibrationOnGoing>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e2      	bne.n	8007b16 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b54:	f023 0303 	bic.w	r3, r3, #3
 8007b58:	f043 0201 	orr.w	r2, r3, #1
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007b60:	e005      	b.n	8007b6e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b66:	f043 0210 	orr.w	r2, r3, #16
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	0004de01 	.word	0x0004de01

08007b84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <__NVIC_SetPriorityGrouping>:
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8007c2c <__NVIC_SetPriorityGrouping+0x44>)
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007c04:	4013      	ands	r3, r2
 8007c06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c1a:	4a04      	ldr	r2, [pc, #16]	@ (8007c2c <__NVIC_SetPriorityGrouping+0x44>)
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	60d3      	str	r3, [r2, #12]
}
 8007c20:	bf00      	nop
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	e000ed00 	.word	0xe000ed00

08007c30 <__NVIC_GetPriorityGrouping>:
{
 8007c30:	b480      	push	{r7}
 8007c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c34:	4b04      	ldr	r3, [pc, #16]	@ (8007c48 <__NVIC_GetPriorityGrouping+0x18>)
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	0a1b      	lsrs	r3, r3, #8
 8007c3a:	f003 0307 	and.w	r3, r3, #7
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	e000ed00 	.word	0xe000ed00

08007c4c <__NVIC_EnableIRQ>:
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	db0b      	blt.n	8007c76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	f003 021f 	and.w	r2, r3, #31
 8007c64:	4907      	ldr	r1, [pc, #28]	@ (8007c84 <__NVIC_EnableIRQ+0x38>)
 8007c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c6a:	095b      	lsrs	r3, r3, #5
 8007c6c:	2001      	movs	r0, #1
 8007c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8007c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	e000e100 	.word	0xe000e100

08007c88 <__NVIC_SetPriority>:
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	6039      	str	r1, [r7, #0]
 8007c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	db0a      	blt.n	8007cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	490c      	ldr	r1, [pc, #48]	@ (8007cd4 <__NVIC_SetPriority+0x4c>)
 8007ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ca6:	0112      	lsls	r2, r2, #4
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	440b      	add	r3, r1
 8007cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007cb0:	e00a      	b.n	8007cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	4908      	ldr	r1, [pc, #32]	@ (8007cd8 <__NVIC_SetPriority+0x50>)
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	f003 030f 	and.w	r3, r3, #15
 8007cbe:	3b04      	subs	r3, #4
 8007cc0:	0112      	lsls	r2, r2, #4
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	440b      	add	r3, r1
 8007cc6:	761a      	strb	r2, [r3, #24]
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	e000e100 	.word	0xe000e100
 8007cd8:	e000ed00 	.word	0xe000ed00

08007cdc <NVIC_EncodePriority>:
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b089      	sub	sp, #36	@ 0x24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	f1c3 0307 	rsb	r3, r3, #7
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	bf28      	it	cs
 8007cfa:	2304      	movcs	r3, #4
 8007cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	3304      	adds	r3, #4
 8007d02:	2b06      	cmp	r3, #6
 8007d04:	d902      	bls.n	8007d0c <NVIC_EncodePriority+0x30>
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	3b03      	subs	r3, #3
 8007d0a:	e000      	b.n	8007d0e <NVIC_EncodePriority+0x32>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1a:	43da      	mvns	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	401a      	ands	r2, r3
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d2e:	43d9      	mvns	r1, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d34:	4313      	orrs	r3, r2
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3724      	adds	r7, #36	@ 0x24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff ff4c 	bl	8007be8 <__NVIC_SetPriorityGrouping>
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d66:	f7ff ff63 	bl	8007c30 <__NVIC_GetPriorityGrouping>
 8007d6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	68b9      	ldr	r1, [r7, #8]
 8007d70:	6978      	ldr	r0, [r7, #20]
 8007d72:	f7ff ffb3 	bl	8007cdc <NVIC_EncodePriority>
 8007d76:	4602      	mov	r2, r0
 8007d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7ff ff82 	bl	8007c88 <__NVIC_SetPriority>
}
 8007d84:	bf00      	nop
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff ff56 	bl	8007c4c <__NVIC_EnableIRQ>
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e014      	b.n	8007de4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	791b      	ldrb	r3, [r3, #4]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d105      	bne.n	8007dd0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fb fcac 	bl	8003728 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08a      	sub	sp, #40	@ 0x28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <HAL_DAC_ConfigChannel+0x1c>
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e19e      	b.n	800814a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	795b      	ldrb	r3, [r3, #5]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d101      	bne.n	8007e18 <HAL_DAC_ConfigChannel+0x2c>
 8007e14:	2302      	movs	r3, #2
 8007e16:	e198      	b.n	800814a <HAL_DAC_ConfigChannel+0x35e>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2202      	movs	r2, #2
 8007e22:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d17a      	bne.n	8007f22 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007e2c:	f7fe f868 	bl	8005f00 <HAL_GetTick>
 8007e30:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d13d      	bne.n	8007eb4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e38:	e018      	b.n	8007e6c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007e3a:	f7fe f861 	bl	8005f00 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d911      	bls.n	8007e6c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f043 0208 	orr.w	r2, r3, #8
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2203      	movs	r2, #3
 8007e66:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e16e      	b.n	800814a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1df      	bne.n	8007e3a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e82:	641a      	str	r2, [r3, #64]	@ 0x40
 8007e84:	e020      	b.n	8007ec8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007e86:	f7fe f83b 	bl	8005f00 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d90f      	bls.n	8007eb4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da0a      	bge.n	8007eb4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f043 0208 	orr.w	r2, r3, #8
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2203      	movs	r2, #3
 8007eae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e14a      	b.n	800814a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	dbe3      	blt.n	8007e86 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007ec6:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f003 0310 	and.w	r3, r3, #16
 8007ed4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8007edc:	43db      	mvns	r3, r3
 8007ede:	ea02 0103 	and.w	r1, r2, r3
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f003 0310 	and.w	r3, r3, #16
 8007eec:	409a      	lsls	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f003 0310 	and.w	r3, r3, #16
 8007f02:	21ff      	movs	r1, #255	@ 0xff
 8007f04:	fa01 f303 	lsl.w	r3, r1, r3
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	ea02 0103 	and.w	r1, r2, r3
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f003 0310 	and.w	r3, r3, #16
 8007f18:	409a      	lsls	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d11d      	bne.n	8007f66 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f003 0310 	and.w	r3, r3, #16
 8007f38:	221f      	movs	r2, #31
 8007f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3e:	43db      	mvns	r3, r3
 8007f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f42:	4013      	ands	r3, r2
 8007f44:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f003 0310 	and.w	r3, r3, #16
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	fa02 f303 	lsl.w	r3, r2, r3
 8007f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f64:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	2207      	movs	r2, #7
 8007f76:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7a:	43db      	mvns	r3, r3
 8007f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f7e:	4013      	ands	r3, r2
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d102      	bne.n	8007f90 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	623b      	str	r3, [r7, #32]
 8007f8e:	e00f      	b.n	8007fb0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d102      	bne.n	8007f9e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	623b      	str	r3, [r7, #32]
 8007f9c:	e008      	b.n	8007fb0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d102      	bne.n	8007fac <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	623b      	str	r3, [r7, #32]
 8007faa:	e001      	b.n	8007fb0 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007fac:	2300      	movs	r3, #0
 8007fae:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	6a3a      	ldr	r2, [r7, #32]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f003 0310 	and.w	r3, r3, #16
 8007fc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fca:	fa02 f303 	lsl.w	r3, r2, r3
 8007fce:	43db      	mvns	r3, r3
 8007fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	791b      	ldrb	r3, [r3, #4]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d102      	bne.n	8007fe4 <HAL_DAC_ConfigChannel+0x1f8>
 8007fde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007fe2:	e000      	b.n	8007fe6 <HAL_DAC_ConfigChannel+0x1fa>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f003 0310 	and.w	r3, r3, #16
 8007ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffa:	43db      	mvns	r3, r3
 8007ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ffe:	4013      	ands	r3, r2
 8008000:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	795b      	ldrb	r3, [r3, #5]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d102      	bne.n	8008010 <HAL_DAC_ConfigChannel+0x224>
 800800a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800800e:	e000      	b.n	8008012 <HAL_DAC_ConfigChannel+0x226>
 8008010:	2300      	movs	r3, #0
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	4313      	orrs	r3, r2
 8008016:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800801e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b02      	cmp	r3, #2
 8008026:	d114      	bne.n	8008052 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008028:	f002 f8c2 	bl	800a1b0 <HAL_RCC_GetHCLKFreq>
 800802c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	4a48      	ldr	r2, [pc, #288]	@ (8008154 <HAL_DAC_ConfigChannel+0x368>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d904      	bls.n	8008040 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800803c:	627b      	str	r3, [r7, #36]	@ 0x24
 800803e:	e00f      	b.n	8008060 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	4a45      	ldr	r2, [pc, #276]	@ (8008158 <HAL_DAC_ConfigChannel+0x36c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d90a      	bls.n	800805e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800804e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008050:	e006      	b.n	8008060 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008058:	4313      	orrs	r3, r2
 800805a:	627b      	str	r3, [r7, #36]	@ 0x24
 800805c:	e000      	b.n	8008060 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800805e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f003 0310 	and.w	r3, r3, #16
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	fa02 f303 	lsl.w	r3, r2, r3
 800806c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800806e:	4313      	orrs	r3, r2
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008078:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6819      	ldr	r1, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f003 0310 	and.w	r3, r3, #16
 8008086:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800808a:	fa02 f303 	lsl.w	r3, r2, r3
 800808e:	43da      	mvns	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	400a      	ands	r2, r1
 8008096:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f003 0310 	and.w	r3, r3, #16
 80080a6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80080aa:	fa02 f303 	lsl.w	r3, r2, r3
 80080ae:	43db      	mvns	r3, r3
 80080b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080b2:	4013      	ands	r3, r2
 80080b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f003 0310 	and.w	r3, r3, #16
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	fa02 f303 	lsl.w	r3, r2, r3
 80080c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080ca:	4313      	orrs	r3, r2
 80080cc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080d4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6819      	ldr	r1, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f003 0310 	and.w	r3, r3, #16
 80080e2:	22c0      	movs	r2, #192	@ 0xc0
 80080e4:	fa02 f303 	lsl.w	r3, r2, r3
 80080e8:	43da      	mvns	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	400a      	ands	r2, r1
 80080f0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	089b      	lsrs	r3, r3, #2
 80080f8:	f003 030f 	and.w	r3, r3, #15
 80080fc:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	089b      	lsrs	r3, r3, #2
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4313      	orrs	r3, r2
 800810e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8008120:	fa01 f303 	lsl.w	r3, r1, r3
 8008124:	43db      	mvns	r3, r3
 8008126:	ea02 0103 	and.w	r1, r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	409a      	lsls	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2201      	movs	r2, #1
 8008140:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008148:	7ffb      	ldrb	r3, [r7, #31]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3728      	adds	r7, #40	@ 0x28
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	09896800 	.word	0x09896800
 8008158:	04c4b400 	.word	0x04c4b400

0800815c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e08d      	b.n	800828a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	461a      	mov	r2, r3
 8008174:	4b47      	ldr	r3, [pc, #284]	@ (8008294 <HAL_DMA_Init+0x138>)
 8008176:	429a      	cmp	r2, r3
 8008178:	d80f      	bhi.n	800819a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	4b45      	ldr	r3, [pc, #276]	@ (8008298 <HAL_DMA_Init+0x13c>)
 8008182:	4413      	add	r3, r2
 8008184:	4a45      	ldr	r2, [pc, #276]	@ (800829c <HAL_DMA_Init+0x140>)
 8008186:	fba2 2303 	umull	r2, r3, r2, r3
 800818a:	091b      	lsrs	r3, r3, #4
 800818c:	009a      	lsls	r2, r3, #2
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a42      	ldr	r2, [pc, #264]	@ (80082a0 <HAL_DMA_Init+0x144>)
 8008196:	641a      	str	r2, [r3, #64]	@ 0x40
 8008198:	e00e      	b.n	80081b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	4b40      	ldr	r3, [pc, #256]	@ (80082a4 <HAL_DMA_Init+0x148>)
 80081a2:	4413      	add	r3, r2
 80081a4:	4a3d      	ldr	r2, [pc, #244]	@ (800829c <HAL_DMA_Init+0x140>)
 80081a6:	fba2 2303 	umull	r2, r3, r2, r3
 80081aa:	091b      	lsrs	r3, r3, #4
 80081ac:	009a      	lsls	r2, r3, #2
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a3c      	ldr	r2, [pc, #240]	@ (80082a8 <HAL_DMA_Init+0x14c>)
 80081b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80081ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80081dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa76 	bl	80086fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008218:	d102      	bne.n	8008220 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008228:	b2d2      	uxtb	r2, r2
 800822a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008234:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d010      	beq.n	8008260 <HAL_DMA_Init+0x104>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	2b04      	cmp	r3, #4
 8008244:	d80c      	bhi.n	8008260 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa96 	bl	8008778 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800825c:	605a      	str	r2, [r3, #4]
 800825e:	e008      	b.n	8008272 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	40020407 	.word	0x40020407
 8008298:	bffdfff8 	.word	0xbffdfff8
 800829c:	cccccccd 	.word	0xcccccccd
 80082a0:	40020000 	.word	0x40020000
 80082a4:	bffdfbf8 	.word	0xbffdfbf8
 80082a8:	40020400 	.word	0x40020400

080082ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_DMA_Start_IT+0x20>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e066      	b.n	800839a <HAL_DMA_Start_IT+0xee>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d155      	bne.n	800838c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2202      	movs	r2, #2
 80082e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0201 	bic.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	68b9      	ldr	r1, [r7, #8]
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 f9bb 	bl	8008680 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800830e:	2b00      	cmp	r3, #0
 8008310:	d008      	beq.n	8008324 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f042 020e 	orr.w	r2, r2, #14
 8008320:	601a      	str	r2, [r3, #0]
 8008322:	e00f      	b.n	8008344 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 0204 	bic.w	r2, r2, #4
 8008332:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 020a 	orr.w	r2, r2, #10
 8008342:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800835c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008360:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008366:	2b00      	cmp	r3, #0
 8008368:	d007      	beq.n	800837a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008374:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008378:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f042 0201 	orr.w	r2, r2, #1
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	e005      	b.n	8008398 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008394:	2302      	movs	r3, #2
 8008396:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008398:	7dfb      	ldrb	r3, [r7, #23]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3718      	adds	r7, #24
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b085      	sub	sp, #20
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d005      	beq.n	80083c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2204      	movs	r2, #4
 80083be:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	73fb      	strb	r3, [r7, #15]
 80083c4:	e037      	b.n	8008436 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 020e 	bic.w	r2, r2, #14
 80083d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 0201 	bic.w	r2, r2, #1
 80083f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083fa:	f003 021f 	and.w	r2, r3, #31
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008402:	2101      	movs	r1, #1
 8008404:	fa01 f202 	lsl.w	r2, r1, r2
 8008408:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008412:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00c      	beq.n	8008436 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008426:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800842a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008434:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b02      	cmp	r3, #2
 800846a:	d00d      	beq.n	8008488 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2204      	movs	r2, #4
 8008470:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	73fb      	strb	r3, [r7, #15]
 8008486:	e047      	b.n	8008518 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 020e 	bic.w	r2, r2, #14
 8008496:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f022 0201 	bic.w	r2, r2, #1
 80084a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084bc:	f003 021f 	and.w	r2, r3, #31
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c4:	2101      	movs	r1, #1
 80084c6:	fa01 f202 	lsl.w	r2, r1, r2
 80084ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80084d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00c      	beq.n	80084f8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80084f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850c:	2b00      	cmp	r3, #0
 800850e:	d003      	beq.n	8008518 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	4798      	blx	r3
    }
  }
  return status;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800853e:	f003 031f 	and.w	r3, r3, #31
 8008542:	2204      	movs	r2, #4
 8008544:	409a      	lsls	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4013      	ands	r3, r2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d026      	beq.n	800859c <HAL_DMA_IRQHandler+0x7a>
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b00      	cmp	r3, #0
 8008556:	d021      	beq.n	800859c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0320 	and.w	r3, r3, #32
 8008562:	2b00      	cmp	r3, #0
 8008564:	d107      	bne.n	8008576 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0204 	bic.w	r2, r2, #4
 8008574:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800857a:	f003 021f 	and.w	r2, r3, #31
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008582:	2104      	movs	r1, #4
 8008584:	fa01 f202 	lsl.w	r2, r1, r2
 8008588:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800858e:	2b00      	cmp	r3, #0
 8008590:	d071      	beq.n	8008676 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800859a:	e06c      	b.n	8008676 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a0:	f003 031f 	and.w	r3, r3, #31
 80085a4:	2202      	movs	r2, #2
 80085a6:	409a      	lsls	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d02e      	beq.n	800860e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d029      	beq.n	800860e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0320 	and.w	r3, r3, #32
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10b      	bne.n	80085e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 020a 	bic.w	r2, r2, #10
 80085d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e4:	f003 021f 	and.w	r2, r3, #31
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ec:	2102      	movs	r1, #2
 80085ee:	fa01 f202 	lsl.w	r2, r1, r2
 80085f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d038      	beq.n	8008676 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800860c:	e033      	b.n	8008676 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008612:	f003 031f 	and.w	r3, r3, #31
 8008616:	2208      	movs	r2, #8
 8008618:	409a      	lsls	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	4013      	ands	r3, r2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d02a      	beq.n	8008678 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	f003 0308 	and.w	r3, r3, #8
 8008628:	2b00      	cmp	r3, #0
 800862a:	d025      	beq.n	8008678 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 020e 	bic.w	r2, r2, #14
 800863a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008640:	f003 021f 	and.w	r2, r3, #31
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008648:	2101      	movs	r1, #1
 800864a:	fa01 f202 	lsl.w	r2, r1, r2
 800864e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800866a:	2b00      	cmp	r3, #0
 800866c:	d004      	beq.n	8008678 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008676:	bf00      	nop
 8008678:	bf00      	nop
}
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008696:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800869c:	2b00      	cmp	r3, #0
 800869e:	d004      	beq.n	80086aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80086a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ae:	f003 021f 	and.w	r2, r3, #31
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b6:	2101      	movs	r1, #1
 80086b8:	fa01 f202 	lsl.w	r2, r1, r2
 80086bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	2b10      	cmp	r3, #16
 80086cc:	d108      	bne.n	80086e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80086de:	e007      	b.n	80086f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	60da      	str	r2, [r3, #12]
}
 80086f0:	bf00      	nop
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	461a      	mov	r2, r3
 800870a:	4b16      	ldr	r3, [pc, #88]	@ (8008764 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800870c:	429a      	cmp	r2, r3
 800870e:	d802      	bhi.n	8008716 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008710:	4b15      	ldr	r3, [pc, #84]	@ (8008768 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008712:	617b      	str	r3, [r7, #20]
 8008714:	e001      	b.n	800871a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8008716:	4b15      	ldr	r3, [pc, #84]	@ (800876c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008718:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	b2db      	uxtb	r3, r3
 8008724:	3b08      	subs	r3, #8
 8008726:	4a12      	ldr	r2, [pc, #72]	@ (8008770 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008728:	fba2 2303 	umull	r2, r3, r2, r3
 800872c:	091b      	lsrs	r3, r3, #4
 800872e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008734:	089b      	lsrs	r3, r3, #2
 8008736:	009a      	lsls	r2, r3, #2
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	4413      	add	r3, r2
 800873c:	461a      	mov	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a0b      	ldr	r2, [pc, #44]	@ (8008774 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008746:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f003 031f 	and.w	r3, r3, #31
 800874e:	2201      	movs	r2, #1
 8008750:	409a      	lsls	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008756:	bf00      	nop
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	40020407 	.word	0x40020407
 8008768:	40020800 	.word	0x40020800
 800876c:	40020820 	.word	0x40020820
 8008770:	cccccccd 	.word	0xcccccccd
 8008774:	40020880 	.word	0x40020880

08008778 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	b2db      	uxtb	r3, r3
 8008786:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4b0b      	ldr	r3, [pc, #44]	@ (80087b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	461a      	mov	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a08      	ldr	r2, [pc, #32]	@ (80087bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800879a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	3b01      	subs	r3, #1
 80087a0:	f003 031f 	and.w	r3, r3, #31
 80087a4:	2201      	movs	r2, #1
 80087a6:	409a      	lsls	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80087ac:	bf00      	nop
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	1000823f 	.word	0x1000823f
 80087bc:	40020940 	.word	0x40020940

080087c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80087ce:	e15a      	b.n	8008a86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	2101      	movs	r1, #1
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	fa01 f303 	lsl.w	r3, r1, r3
 80087dc:	4013      	ands	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 814c 	beq.w	8008a80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d005      	beq.n	8008800 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d130      	bne.n	8008862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	2203      	movs	r2, #3
 800880c:	fa02 f303 	lsl.w	r3, r2, r3
 8008810:	43db      	mvns	r3, r3
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	4013      	ands	r3, r2
 8008816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	68da      	ldr	r2, [r3, #12]
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	fa02 f303 	lsl.w	r3, r2, r3
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	4313      	orrs	r3, r2
 8008828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008836:	2201      	movs	r2, #1
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	fa02 f303 	lsl.w	r3, r2, r3
 800883e:	43db      	mvns	r3, r3
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4013      	ands	r3, r2
 8008844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	091b      	lsrs	r3, r3, #4
 800884c:	f003 0201 	and.w	r2, r3, #1
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	fa02 f303 	lsl.w	r3, r2, r3
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f003 0303 	and.w	r3, r3, #3
 800886a:	2b03      	cmp	r3, #3
 800886c:	d017      	beq.n	800889e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	2203      	movs	r2, #3
 800887a:	fa02 f303 	lsl.w	r3, r2, r3
 800887e:	43db      	mvns	r3, r3
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	4013      	ands	r3, r2
 8008884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	689a      	ldr	r2, [r3, #8]
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	005b      	lsls	r3, r3, #1
 800888e:	fa02 f303 	lsl.w	r3, r2, r3
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d123      	bne.n	80088f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	08da      	lsrs	r2, r3, #3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3208      	adds	r2, #8
 80088b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f003 0307 	and.w	r3, r3, #7
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	220f      	movs	r2, #15
 80088c2:	fa02 f303 	lsl.w	r3, r2, r3
 80088c6:	43db      	mvns	r3, r3
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	4013      	ands	r3, r2
 80088cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	691a      	ldr	r2, [r3, #16]
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f003 0307 	and.w	r3, r3, #7
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	fa02 f303 	lsl.w	r3, r2, r3
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	08da      	lsrs	r2, r3, #3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3208      	adds	r2, #8
 80088ec:	6939      	ldr	r1, [r7, #16]
 80088ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	005b      	lsls	r3, r3, #1
 80088fc:	2203      	movs	r2, #3
 80088fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008902:	43db      	mvns	r3, r3
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	4013      	ands	r3, r2
 8008908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f003 0203 	and.w	r2, r3, #3
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	005b      	lsls	r3, r3, #1
 8008916:	fa02 f303 	lsl.w	r3, r2, r3
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	4313      	orrs	r3, r2
 800891e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 80a6 	beq.w	8008a80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008934:	4b5b      	ldr	r3, [pc, #364]	@ (8008aa4 <HAL_GPIO_Init+0x2e4>)
 8008936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008938:	4a5a      	ldr	r2, [pc, #360]	@ (8008aa4 <HAL_GPIO_Init+0x2e4>)
 800893a:	f043 0301 	orr.w	r3, r3, #1
 800893e:	6613      	str	r3, [r2, #96]	@ 0x60
 8008940:	4b58      	ldr	r3, [pc, #352]	@ (8008aa4 <HAL_GPIO_Init+0x2e4>)
 8008942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	60bb      	str	r3, [r7, #8]
 800894a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800894c:	4a56      	ldr	r2, [pc, #344]	@ (8008aa8 <HAL_GPIO_Init+0x2e8>)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	089b      	lsrs	r3, r3, #2
 8008952:	3302      	adds	r3, #2
 8008954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f003 0303 	and.w	r3, r3, #3
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	220f      	movs	r2, #15
 8008964:	fa02 f303 	lsl.w	r3, r2, r3
 8008968:	43db      	mvns	r3, r3
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	4013      	ands	r3, r2
 800896e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008976:	d01f      	beq.n	80089b8 <HAL_GPIO_Init+0x1f8>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a4c      	ldr	r2, [pc, #304]	@ (8008aac <HAL_GPIO_Init+0x2ec>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d019      	beq.n	80089b4 <HAL_GPIO_Init+0x1f4>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a4b      	ldr	r2, [pc, #300]	@ (8008ab0 <HAL_GPIO_Init+0x2f0>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d013      	beq.n	80089b0 <HAL_GPIO_Init+0x1f0>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a4a      	ldr	r2, [pc, #296]	@ (8008ab4 <HAL_GPIO_Init+0x2f4>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d00d      	beq.n	80089ac <HAL_GPIO_Init+0x1ec>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a49      	ldr	r2, [pc, #292]	@ (8008ab8 <HAL_GPIO_Init+0x2f8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d007      	beq.n	80089a8 <HAL_GPIO_Init+0x1e8>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a48      	ldr	r2, [pc, #288]	@ (8008abc <HAL_GPIO_Init+0x2fc>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d101      	bne.n	80089a4 <HAL_GPIO_Init+0x1e4>
 80089a0:	2305      	movs	r3, #5
 80089a2:	e00a      	b.n	80089ba <HAL_GPIO_Init+0x1fa>
 80089a4:	2306      	movs	r3, #6
 80089a6:	e008      	b.n	80089ba <HAL_GPIO_Init+0x1fa>
 80089a8:	2304      	movs	r3, #4
 80089aa:	e006      	b.n	80089ba <HAL_GPIO_Init+0x1fa>
 80089ac:	2303      	movs	r3, #3
 80089ae:	e004      	b.n	80089ba <HAL_GPIO_Init+0x1fa>
 80089b0:	2302      	movs	r3, #2
 80089b2:	e002      	b.n	80089ba <HAL_GPIO_Init+0x1fa>
 80089b4:	2301      	movs	r3, #1
 80089b6:	e000      	b.n	80089ba <HAL_GPIO_Init+0x1fa>
 80089b8:	2300      	movs	r3, #0
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	f002 0203 	and.w	r2, r2, #3
 80089c0:	0092      	lsls	r2, r2, #2
 80089c2:	4093      	lsls	r3, r2
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80089ca:	4937      	ldr	r1, [pc, #220]	@ (8008aa8 <HAL_GPIO_Init+0x2e8>)
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	089b      	lsrs	r3, r3, #2
 80089d0:	3302      	adds	r3, #2
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80089d8:	4b39      	ldr	r3, [pc, #228]	@ (8008ac0 <HAL_GPIO_Init+0x300>)
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	43db      	mvns	r3, r3
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	4013      	ands	r3, r2
 80089e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80089fc:	4a30      	ldr	r2, [pc, #192]	@ (8008ac0 <HAL_GPIO_Init+0x300>)
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008a02:	4b2f      	ldr	r3, [pc, #188]	@ (8008ac0 <HAL_GPIO_Init+0x300>)
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	43db      	mvns	r3, r3
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	4013      	ands	r3, r2
 8008a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008a26:	4a26      	ldr	r2, [pc, #152]	@ (8008ac0 <HAL_GPIO_Init+0x300>)
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008a2c:	4b24      	ldr	r3, [pc, #144]	@ (8008ac0 <HAL_GPIO_Init+0x300>)
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	43db      	mvns	r3, r3
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008a50:	4a1b      	ldr	r2, [pc, #108]	@ (8008ac0 <HAL_GPIO_Init+0x300>)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008a56:	4b1a      	ldr	r3, [pc, #104]	@ (8008ac0 <HAL_GPIO_Init+0x300>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	43db      	mvns	r3, r3
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	4013      	ands	r3, r2
 8008a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008a7a:	4a11      	ldr	r2, [pc, #68]	@ (8008ac0 <HAL_GPIO_Init+0x300>)
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	3301      	adds	r3, #1
 8008a84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f47f ae9d 	bne.w	80087d0 <HAL_GPIO_Init+0x10>
  }
}
 8008a96:	bf00      	nop
 8008a98:	bf00      	nop
 8008a9a:	371c      	adds	r7, #28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	40021000 	.word	0x40021000
 8008aa8:	40010000 	.word	0x40010000
 8008aac:	48000400 	.word	0x48000400
 8008ab0:	48000800 	.word	0x48000800
 8008ab4:	48000c00 	.word	0x48000c00
 8008ab8:	48001000 	.word	0x48001000
 8008abc:	48001400 	.word	0x48001400
 8008ac0:	40010400 	.word	0x40010400

08008ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	807b      	strh	r3, [r7, #2]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ad4:	787b      	ldrb	r3, [r7, #1]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ada:	887a      	ldrh	r2, [r7, #2]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008ae0:	e002      	b.n	8008ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008ae2:	887a      	ldrh	r2, [r7, #2]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008afe:	4b08      	ldr	r3, [pc, #32]	@ (8008b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b00:	695a      	ldr	r2, [r3, #20]
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	4013      	ands	r3, r2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d006      	beq.n	8008b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008b0a:	4a05      	ldr	r2, [pc, #20]	@ (8008b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b0c:	88fb      	ldrh	r3, [r7, #6]
 8008b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008b10:	88fb      	ldrh	r3, [r7, #6]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 f806 	bl	8008b24 <HAL_GPIO_EXTI_Callback>
  }
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	40010400 	.word	0x40010400

08008b24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008b2e:	bf00      	nop
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e08d      	b.n	8008c68 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d106      	bne.n	8008b66 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7fb f80b 	bl	8003b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2224      	movs	r2, #36	@ 0x24
 8008b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 0201 	bic.w	r2, r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008b8a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689a      	ldr	r2, [r3, #8]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b9a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d107      	bne.n	8008bb4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bb0:	609a      	str	r2, [r3, #8]
 8008bb2:	e006      	b.n	8008bc2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008bc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d108      	bne.n	8008bdc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bd8:	605a      	str	r2, [r3, #4]
 8008bda:	e007      	b.n	8008bec <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008bea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	6812      	ldr	r2, [r2, #0]
 8008bf6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bfe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c0e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	691a      	ldr	r2, [r3, #16]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	430a      	orrs	r2, r1
 8008c28:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	69d9      	ldr	r1, [r3, #28]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1a      	ldr	r2, [r3, #32]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f042 0201 	orr.w	r2, r2, #1
 8008c48:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2220      	movs	r2, #32
 8008c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b088      	sub	sp, #32
 8008c74:	af02      	add	r7, sp, #8
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	607a      	str	r2, [r7, #4]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	817b      	strh	r3, [r7, #10]
 8008c80:	4613      	mov	r3, r2
 8008c82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b20      	cmp	r3, #32
 8008c8e:	f040 80fd 	bne.w	8008e8c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <HAL_I2C_Master_Transmit+0x30>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e0f6      	b.n	8008e8e <HAL_I2C_Master_Transmit+0x21e>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ca8:	f7fd f92a 	bl	8005f00 <HAL_GetTick>
 8008cac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	2319      	movs	r3, #25
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 fa0a 	bl	80090d4 <I2C_WaitOnFlagUntilTimeout>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e0e1      	b.n	8008e8e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2221      	movs	r2, #33	@ 0x21
 8008cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2210      	movs	r2, #16
 8008cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	893a      	ldrh	r2, [r7, #8]
 8008cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	2bff      	cmp	r3, #255	@ 0xff
 8008cfa:	d906      	bls.n	8008d0a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	22ff      	movs	r2, #255	@ 0xff
 8008d00:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008d02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	e007      	b.n	8008d1a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008d14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008d18:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d024      	beq.n	8008d6c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d26:	781a      	ldrb	r2, [r3, #0]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	3301      	adds	r3, #1
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	8979      	ldrh	r1, [r7, #10]
 8008d5e:	4b4e      	ldr	r3, [pc, #312]	@ (8008e98 <HAL_I2C_Master_Transmit+0x228>)
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 fc05 	bl	8009574 <I2C_TransferConfig>
 8008d6a:	e066      	b.n	8008e3a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	8979      	ldrh	r1, [r7, #10]
 8008d74:	4b48      	ldr	r3, [pc, #288]	@ (8008e98 <HAL_I2C_Master_Transmit+0x228>)
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 fbfa 	bl	8009574 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008d80:	e05b      	b.n	8008e3a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	6a39      	ldr	r1, [r7, #32]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 f9fd 	bl	8009186 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e07b      	b.n	8008e8e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d9a:	781a      	ldrb	r2, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	3b01      	subs	r3, #1
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d034      	beq.n	8008e3a <HAL_I2C_Master_Transmit+0x1ca>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d130      	bne.n	8008e3a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	2200      	movs	r2, #0
 8008de0:	2180      	movs	r1, #128	@ 0x80
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 f976 	bl	80090d4 <I2C_WaitOnFlagUntilTimeout>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e04d      	b.n	8008e8e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	2bff      	cmp	r3, #255	@ 0xff
 8008dfa:	d90e      	bls.n	8008e1a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	22ff      	movs	r2, #255	@ 0xff
 8008e00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	8979      	ldrh	r1, [r7, #10]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 fbae 	bl	8009574 <I2C_TransferConfig>
 8008e18:	e00f      	b.n	8008e3a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	8979      	ldrh	r1, [r7, #10]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 fb9d 	bl	8009574 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d19e      	bne.n	8008d82 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	6a39      	ldr	r1, [r7, #32]
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 f9e3 	bl	8009214 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e01a      	b.n	8008e8e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6859      	ldr	r1, [r3, #4]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008e9c <HAL_I2C_Master_Transmit+0x22c>)
 8008e6c:	400b      	ands	r3, r1
 8008e6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2220      	movs	r2, #32
 8008e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	e000      	b.n	8008e8e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008e8c:	2302      	movs	r3, #2
  }
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3718      	adds	r7, #24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	80002000 	.word	0x80002000
 8008e9c:	fe00e800 	.word	0xfe00e800

08008ea0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af02      	add	r7, sp, #8
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	607a      	str	r2, [r7, #4]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	460b      	mov	r3, r1
 8008eae:	817b      	strh	r3, [r7, #10]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b20      	cmp	r3, #32
 8008ebe:	f040 80db 	bne.w	8009078 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d101      	bne.n	8008ed0 <HAL_I2C_Master_Receive+0x30>
 8008ecc:	2302      	movs	r3, #2
 8008ece:	e0d4      	b.n	800907a <HAL_I2C_Master_Receive+0x1da>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ed8:	f7fd f812 	bl	8005f00 <HAL_GetTick>
 8008edc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	2319      	movs	r3, #25
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 f8f2 	bl	80090d4 <I2C_WaitOnFlagUntilTimeout>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e0bf      	b.n	800907a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2222      	movs	r2, #34	@ 0x22
 8008efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2210      	movs	r2, #16
 8008f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	893a      	ldrh	r2, [r7, #8]
 8008f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	2bff      	cmp	r3, #255	@ 0xff
 8008f2a:	d90e      	bls.n	8008f4a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	22ff      	movs	r2, #255	@ 0xff
 8008f30:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	8979      	ldrh	r1, [r7, #10]
 8008f3a:	4b52      	ldr	r3, [pc, #328]	@ (8009084 <HAL_I2C_Master_Receive+0x1e4>)
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 fb16 	bl	8009574 <I2C_TransferConfig>
 8008f48:	e06d      	b.n	8009026 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	8979      	ldrh	r1, [r7, #10]
 8008f5c:	4b49      	ldr	r3, [pc, #292]	@ (8009084 <HAL_I2C_Master_Receive+0x1e4>)
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 fb05 	bl	8009574 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008f6a:	e05c      	b.n	8009026 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	6a39      	ldr	r1, [r7, #32]
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 f993 	bl	800929c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e07c      	b.n	800907a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8a:	b2d2      	uxtb	r2, r2
 8008f8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	3b01      	subs	r3, #1
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d034      	beq.n	8009026 <HAL_I2C_Master_Receive+0x186>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d130      	bne.n	8009026 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2180      	movs	r1, #128	@ 0x80
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 f880 	bl	80090d4 <I2C_WaitOnFlagUntilTimeout>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e04d      	b.n	800907a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	2bff      	cmp	r3, #255	@ 0xff
 8008fe6:	d90e      	bls.n	8009006 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	22ff      	movs	r2, #255	@ 0xff
 8008fec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	8979      	ldrh	r1, [r7, #10]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f000 fab8 	bl	8009574 <I2C_TransferConfig>
 8009004:	e00f      	b.n	8009026 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800900a:	b29a      	uxth	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009014:	b2da      	uxtb	r2, r3
 8009016:	8979      	ldrh	r1, [r7, #10]
 8009018:	2300      	movs	r3, #0
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 faa7 	bl	8009574 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800902a:	b29b      	uxth	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	d19d      	bne.n	8008f6c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	6a39      	ldr	r1, [r7, #32]
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 f8ed 	bl	8009214 <I2C_WaitOnSTOPFlagUntilTimeout>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e01a      	b.n	800907a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2220      	movs	r2, #32
 800904a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6859      	ldr	r1, [r3, #4]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	4b0c      	ldr	r3, [pc, #48]	@ (8009088 <HAL_I2C_Master_Receive+0x1e8>)
 8009058:	400b      	ands	r3, r1
 800905a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2220      	movs	r2, #32
 8009060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	e000      	b.n	800907a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009078:	2302      	movs	r3, #2
  }
}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	80002400 	.word	0x80002400
 8009088:	fe00e800 	.word	0xfe00e800

0800908c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d103      	bne.n	80090aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2200      	movs	r2, #0
 80090a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d007      	beq.n	80090c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	699a      	ldr	r2, [r3, #24]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0201 	orr.w	r2, r2, #1
 80090c6:	619a      	str	r2, [r3, #24]
  }
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	4613      	mov	r3, r2
 80090e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090e4:	e03b      	b.n	800915e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 f962 	bl	80093b4 <I2C_IsErrorOccurred>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e041      	b.n	800917e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009100:	d02d      	beq.n	800915e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009102:	f7fc fefd 	bl	8005f00 <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d302      	bcc.n	8009118 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d122      	bne.n	800915e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	699a      	ldr	r2, [r3, #24]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	4013      	ands	r3, r2
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	429a      	cmp	r2, r3
 8009126:	bf0c      	ite	eq
 8009128:	2301      	moveq	r3, #1
 800912a:	2300      	movne	r3, #0
 800912c:	b2db      	uxtb	r3, r3
 800912e:	461a      	mov	r2, r3
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	429a      	cmp	r2, r3
 8009134:	d113      	bne.n	800915e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800913a:	f043 0220 	orr.w	r2, r3, #32
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2220      	movs	r2, #32
 8009146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e00f      	b.n	800917e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	699a      	ldr	r2, [r3, #24]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	4013      	ands	r3, r2
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	429a      	cmp	r2, r3
 800916c:	bf0c      	ite	eq
 800916e:	2301      	moveq	r3, #1
 8009170:	2300      	movne	r3, #0
 8009172:	b2db      	uxtb	r3, r3
 8009174:	461a      	mov	r2, r3
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	429a      	cmp	r2, r3
 800917a:	d0b4      	beq.n	80090e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009192:	e033      	b.n	80091fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	68b9      	ldr	r1, [r7, #8]
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 f90b 	bl	80093b4 <I2C_IsErrorOccurred>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e031      	b.n	800920c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091ae:	d025      	beq.n	80091fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091b0:	f7fc fea6 	bl	8005f00 <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d302      	bcc.n	80091c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d11a      	bne.n	80091fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d013      	beq.n	80091fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091d8:	f043 0220 	orr.w	r2, r3, #32
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e007      	b.n	800920c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	2b02      	cmp	r3, #2
 8009208:	d1c4      	bne.n	8009194 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009220:	e02f      	b.n	8009282 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	68b9      	ldr	r1, [r7, #8]
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 f8c4 	bl	80093b4 <I2C_IsErrorOccurred>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e02d      	b.n	8009292 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009236:	f7fc fe63 	bl	8005f00 <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	429a      	cmp	r2, r3
 8009244:	d302      	bcc.n	800924c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d11a      	bne.n	8009282 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b20      	cmp	r3, #32
 8009258:	d013      	beq.n	8009282 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800925e:	f043 0220 	orr.w	r2, r3, #32
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2220      	movs	r2, #32
 800926a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e007      	b.n	8009292 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	f003 0320 	and.w	r3, r3, #32
 800928c:	2b20      	cmp	r3, #32
 800928e:	d1c8      	bne.n	8009222 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80092ac:	e071      	b.n	8009392 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	68b9      	ldr	r1, [r7, #8]
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f000 f87e 	bl	80093b4 <I2C_IsErrorOccurred>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	d13b      	bne.n	8009348 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d138      	bne.n	8009348 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	f003 0304 	and.w	r3, r3, #4
 80092e0:	2b04      	cmp	r3, #4
 80092e2:	d105      	bne.n	80092f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	f003 0310 	and.w	r3, r3, #16
 80092fa:	2b10      	cmp	r3, #16
 80092fc:	d121      	bne.n	8009342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2210      	movs	r2, #16
 8009304:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2204      	movs	r2, #4
 800930a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2220      	movs	r2, #32
 8009312:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6859      	ldr	r1, [r3, #4]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	4b24      	ldr	r3, [pc, #144]	@ (80093b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009320:	400b      	ands	r3, r1
 8009322:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2220      	movs	r2, #32
 8009328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	75fb      	strb	r3, [r7, #23]
 8009340:	e002      	b.n	8009348 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009348:	f7fc fdda 	bl	8005f00 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	429a      	cmp	r2, r3
 8009356:	d302      	bcc.n	800935e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d119      	bne.n	8009392 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d116      	bne.n	8009392 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	f003 0304 	and.w	r3, r3, #4
 800936e:	2b04      	cmp	r3, #4
 8009370:	d00f      	beq.n	8009392 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009376:	f043 0220 	orr.w	r2, r3, #32
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2220      	movs	r2, #32
 8009382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b04      	cmp	r3, #4
 800939e:	d002      	beq.n	80093a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d083      	beq.n	80092ae <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3718      	adds	r7, #24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	fe00e800 	.word	0xfe00e800

080093b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08a      	sub	sp, #40	@ 0x28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	f003 0310 	and.w	r3, r3, #16
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d068      	beq.n	80094b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2210      	movs	r2, #16
 80093e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80093e8:	e049      	b.n	800947e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093f0:	d045      	beq.n	800947e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80093f2:	f7fc fd85 	bl	8005f00 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d302      	bcc.n	8009408 <I2C_IsErrorOccurred+0x54>
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d13a      	bne.n	800947e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009412:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800941a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800942a:	d121      	bne.n	8009470 <I2C_IsErrorOccurred+0xbc>
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009432:	d01d      	beq.n	8009470 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009434:	7cfb      	ldrb	r3, [r7, #19]
 8009436:	2b20      	cmp	r3, #32
 8009438:	d01a      	beq.n	8009470 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009448:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800944a:	f7fc fd59 	bl	8005f00 <HAL_GetTick>
 800944e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009450:	e00e      	b.n	8009470 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009452:	f7fc fd55 	bl	8005f00 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b19      	cmp	r3, #25
 800945e:	d907      	bls.n	8009470 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	f043 0320 	orr.w	r3, r3, #32
 8009466:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800946e:	e006      	b.n	800947e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	f003 0320 	and.w	r3, r3, #32
 800947a:	2b20      	cmp	r3, #32
 800947c:	d1e9      	bne.n	8009452 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	f003 0320 	and.w	r3, r3, #32
 8009488:	2b20      	cmp	r3, #32
 800948a:	d003      	beq.n	8009494 <I2C_IsErrorOccurred+0xe0>
 800948c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0aa      	beq.n	80093ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009498:	2b00      	cmp	r3, #0
 800949a:	d103      	bne.n	80094a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2220      	movs	r2, #32
 80094a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	f043 0304 	orr.w	r3, r3, #4
 80094aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00b      	beq.n	80094dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	f043 0301 	orr.w	r3, r3, #1
 80094ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80094d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00b      	beq.n	80094fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	f043 0308 	orr.w	r3, r3, #8
 80094ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80094f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00b      	beq.n	8009520 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	f043 0302 	orr.w	r3, r3, #2
 800950e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009524:	2b00      	cmp	r3, #0
 8009526:	d01c      	beq.n	8009562 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f7ff fdaf 	bl	800908c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6859      	ldr	r1, [r3, #4]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	4b0d      	ldr	r3, [pc, #52]	@ (8009570 <I2C_IsErrorOccurred+0x1bc>)
 800953a:	400b      	ands	r3, r1
 800953c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	431a      	orrs	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2220      	movs	r2, #32
 800954e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009562:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009566:	4618      	mov	r0, r3
 8009568:	3728      	adds	r7, #40	@ 0x28
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	fe00e800 	.word	0xfe00e800

08009574 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	607b      	str	r3, [r7, #4]
 800957e:	460b      	mov	r3, r1
 8009580:	817b      	strh	r3, [r7, #10]
 8009582:	4613      	mov	r3, r2
 8009584:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009586:	897b      	ldrh	r3, [r7, #10]
 8009588:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800958c:	7a7b      	ldrb	r3, [r7, #9]
 800958e:	041b      	lsls	r3, r3, #16
 8009590:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009594:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	4313      	orrs	r3, r2
 800959e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	0d5b      	lsrs	r3, r3, #21
 80095ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80095b2:	4b08      	ldr	r3, [pc, #32]	@ (80095d4 <I2C_TransferConfig+0x60>)
 80095b4:	430b      	orrs	r3, r1
 80095b6:	43db      	mvns	r3, r3
 80095b8:	ea02 0103 	and.w	r1, r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	430a      	orrs	r2, r1
 80095c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80095c6:	bf00      	nop
 80095c8:	371c      	adds	r7, #28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	03ff63ff 	.word	0x03ff63ff

080095d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d138      	bne.n	8009660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d101      	bne.n	80095fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80095f8:	2302      	movs	r3, #2
 80095fa:	e032      	b.n	8009662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2224      	movs	r2, #36	@ 0x24
 8009608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0201 	bic.w	r2, r2, #1
 800961a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800962a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6819      	ldr	r1, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	430a      	orrs	r2, r1
 800963a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f042 0201 	orr.w	r2, r2, #1
 800964a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2220      	movs	r2, #32
 8009650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	e000      	b.n	8009662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009660:	2302      	movs	r3, #2
  }
}
 8009662:	4618      	mov	r0, r3
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800966e:	b480      	push	{r7}
 8009670:	b085      	sub	sp, #20
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b20      	cmp	r3, #32
 8009682:	d139      	bne.n	80096f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800968a:	2b01      	cmp	r3, #1
 800968c:	d101      	bne.n	8009692 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800968e:	2302      	movs	r3, #2
 8009690:	e033      	b.n	80096fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2224      	movs	r2, #36	@ 0x24
 800969e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 0201 	bic.w	r2, r2, #1
 80096b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80096c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	021b      	lsls	r3, r3, #8
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f042 0201 	orr.w	r2, r2, #1
 80096e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2220      	movs	r2, #32
 80096e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	e000      	b.n	80096fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80096f8:	2302      	movs	r3, #2
  }
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
	...

08009708 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d141      	bne.n	800979a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009716:	4b4b      	ldr	r3, [pc, #300]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800971e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009722:	d131      	bne.n	8009788 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009724:	4b47      	ldr	r3, [pc, #284]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800972a:	4a46      	ldr	r2, [pc, #280]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800972c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009730:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009734:	4b43      	ldr	r3, [pc, #268]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800973c:	4a41      	ldr	r2, [pc, #260]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800973e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009742:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009744:	4b40      	ldr	r3, [pc, #256]	@ (8009848 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2232      	movs	r2, #50	@ 0x32
 800974a:	fb02 f303 	mul.w	r3, r2, r3
 800974e:	4a3f      	ldr	r2, [pc, #252]	@ (800984c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009750:	fba2 2303 	umull	r2, r3, r2, r3
 8009754:	0c9b      	lsrs	r3, r3, #18
 8009756:	3301      	adds	r3, #1
 8009758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800975a:	e002      	b.n	8009762 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3b01      	subs	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009762:	4b38      	ldr	r3, [pc, #224]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800976a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800976e:	d102      	bne.n	8009776 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1f2      	bne.n	800975c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009776:	4b33      	ldr	r3, [pc, #204]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800977e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009782:	d158      	bne.n	8009836 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009784:	2303      	movs	r3, #3
 8009786:	e057      	b.n	8009838 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009788:	4b2e      	ldr	r3, [pc, #184]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800978a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800978e:	4a2d      	ldr	r2, [pc, #180]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009794:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009798:	e04d      	b.n	8009836 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097a0:	d141      	bne.n	8009826 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80097a2:	4b28      	ldr	r3, [pc, #160]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80097aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097ae:	d131      	bne.n	8009814 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80097b0:	4b24      	ldr	r3, [pc, #144]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097b6:	4a23      	ldr	r2, [pc, #140]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80097c0:	4b20      	ldr	r3, [pc, #128]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80097c8:	4a1e      	ldr	r2, [pc, #120]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80097ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80097d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009848 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2232      	movs	r2, #50	@ 0x32
 80097d6:	fb02 f303 	mul.w	r3, r2, r3
 80097da:	4a1c      	ldr	r2, [pc, #112]	@ (800984c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80097dc:	fba2 2303 	umull	r2, r3, r2, r3
 80097e0:	0c9b      	lsrs	r3, r3, #18
 80097e2:	3301      	adds	r3, #1
 80097e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097e6:	e002      	b.n	80097ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097ee:	4b15      	ldr	r3, [pc, #84]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097fa:	d102      	bne.n	8009802 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1f2      	bne.n	80097e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009802:	4b10      	ldr	r3, [pc, #64]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800980a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800980e:	d112      	bne.n	8009836 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e011      	b.n	8009838 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009814:	4b0b      	ldr	r3, [pc, #44]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800981a:	4a0a      	ldr	r2, [pc, #40]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800981c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009820:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009824:	e007      	b.n	8009836 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009826:	4b07      	ldr	r3, [pc, #28]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800982e:	4a05      	ldr	r2, [pc, #20]	@ (8009844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009830:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009834:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	40007000 	.word	0x40007000
 8009848:	20000004 	.word	0x20000004
 800984c:	431bde83 	.word	0x431bde83

08009850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d101      	bne.n	8009862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e2fe      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b00      	cmp	r3, #0
 800986c:	d075      	beq.n	800995a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800986e:	4b97      	ldr	r3, [pc, #604]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f003 030c 	and.w	r3, r3, #12
 8009876:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009878:	4b94      	ldr	r3, [pc, #592]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	f003 0303 	and.w	r3, r3, #3
 8009880:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	2b0c      	cmp	r3, #12
 8009886:	d102      	bne.n	800988e <HAL_RCC_OscConfig+0x3e>
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	2b03      	cmp	r3, #3
 800988c:	d002      	beq.n	8009894 <HAL_RCC_OscConfig+0x44>
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	2b08      	cmp	r3, #8
 8009892:	d10b      	bne.n	80098ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009894:	4b8d      	ldr	r3, [pc, #564]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d05b      	beq.n	8009958 <HAL_RCC_OscConfig+0x108>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d157      	bne.n	8009958 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	e2d9      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098b4:	d106      	bne.n	80098c4 <HAL_RCC_OscConfig+0x74>
 80098b6:	4b85      	ldr	r3, [pc, #532]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a84      	ldr	r2, [pc, #528]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80098bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	e01d      	b.n	8009900 <HAL_RCC_OscConfig+0xb0>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80098cc:	d10c      	bne.n	80098e8 <HAL_RCC_OscConfig+0x98>
 80098ce:	4b7f      	ldr	r3, [pc, #508]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a7e      	ldr	r2, [pc, #504]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80098d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	4b7c      	ldr	r3, [pc, #496]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a7b      	ldr	r2, [pc, #492]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80098e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	e00b      	b.n	8009900 <HAL_RCC_OscConfig+0xb0>
 80098e8:	4b78      	ldr	r3, [pc, #480]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a77      	ldr	r2, [pc, #476]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80098ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	4b75      	ldr	r3, [pc, #468]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a74      	ldr	r2, [pc, #464]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80098fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80098fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d013      	beq.n	8009930 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009908:	f7fc fafa 	bl	8005f00 <HAL_GetTick>
 800990c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800990e:	e008      	b.n	8009922 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009910:	f7fc faf6 	bl	8005f00 <HAL_GetTick>
 8009914:	4602      	mov	r2, r0
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	2b64      	cmp	r3, #100	@ 0x64
 800991c:	d901      	bls.n	8009922 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	e29e      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009922:	4b6a      	ldr	r3, [pc, #424]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800992a:	2b00      	cmp	r3, #0
 800992c:	d0f0      	beq.n	8009910 <HAL_RCC_OscConfig+0xc0>
 800992e:	e014      	b.n	800995a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009930:	f7fc fae6 	bl	8005f00 <HAL_GetTick>
 8009934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009936:	e008      	b.n	800994a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009938:	f7fc fae2 	bl	8005f00 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	2b64      	cmp	r3, #100	@ 0x64
 8009944:	d901      	bls.n	800994a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e28a      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800994a:	4b60      	ldr	r3, [pc, #384]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1f0      	bne.n	8009938 <HAL_RCC_OscConfig+0xe8>
 8009956:	e000      	b.n	800995a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0302 	and.w	r3, r3, #2
 8009962:	2b00      	cmp	r3, #0
 8009964:	d075      	beq.n	8009a52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009966:	4b59      	ldr	r3, [pc, #356]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f003 030c 	and.w	r3, r3, #12
 800996e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009970:	4b56      	ldr	r3, [pc, #344]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	f003 0303 	and.w	r3, r3, #3
 8009978:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	2b0c      	cmp	r3, #12
 800997e:	d102      	bne.n	8009986 <HAL_RCC_OscConfig+0x136>
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	2b02      	cmp	r3, #2
 8009984:	d002      	beq.n	800998c <HAL_RCC_OscConfig+0x13c>
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	2b04      	cmp	r3, #4
 800998a:	d11f      	bne.n	80099cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800998c:	4b4f      	ldr	r3, [pc, #316]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009994:	2b00      	cmp	r3, #0
 8009996:	d005      	beq.n	80099a4 <HAL_RCC_OscConfig+0x154>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d101      	bne.n	80099a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e25d      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099a4:	4b49      	ldr	r3, [pc, #292]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	061b      	lsls	r3, r3, #24
 80099b2:	4946      	ldr	r1, [pc, #280]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80099b4:	4313      	orrs	r3, r2
 80099b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80099b8:	4b45      	ldr	r3, [pc, #276]	@ (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fa fafb 	bl	8003fb8 <HAL_InitTick>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d043      	beq.n	8009a50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e249      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d023      	beq.n	8009a1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099d4:	4b3d      	ldr	r3, [pc, #244]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a3c      	ldr	r2, [pc, #240]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80099da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e0:	f7fc fa8e 	bl	8005f00 <HAL_GetTick>
 80099e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099e6:	e008      	b.n	80099fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099e8:	f7fc fa8a 	bl	8005f00 <HAL_GetTick>
 80099ec:	4602      	mov	r2, r0
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d901      	bls.n	80099fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80099f6:	2303      	movs	r3, #3
 80099f8:	e232      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099fa:	4b34      	ldr	r3, [pc, #208]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d0f0      	beq.n	80099e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a06:	4b31      	ldr	r3, [pc, #196]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	061b      	lsls	r3, r3, #24
 8009a14:	492d      	ldr	r1, [pc, #180]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	604b      	str	r3, [r1, #4]
 8009a1a:	e01a      	b.n	8009a52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a2a      	ldr	r2, [pc, #168]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009a22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a28:	f7fc fa6a 	bl	8005f00 <HAL_GetTick>
 8009a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009a2e:	e008      	b.n	8009a42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a30:	f7fc fa66 	bl	8005f00 <HAL_GetTick>
 8009a34:	4602      	mov	r2, r0
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d901      	bls.n	8009a42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e20e      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009a42:	4b22      	ldr	r3, [pc, #136]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1f0      	bne.n	8009a30 <HAL_RCC_OscConfig+0x1e0>
 8009a4e:	e000      	b.n	8009a52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f003 0308 	and.w	r3, r3, #8
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d041      	beq.n	8009ae2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	695b      	ldr	r3, [r3, #20]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d01c      	beq.n	8009aa0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a66:	4b19      	ldr	r3, [pc, #100]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a6c:	4a17      	ldr	r2, [pc, #92]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009a6e:	f043 0301 	orr.w	r3, r3, #1
 8009a72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a76:	f7fc fa43 	bl	8005f00 <HAL_GetTick>
 8009a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a7c:	e008      	b.n	8009a90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a7e:	f7fc fa3f 	bl	8005f00 <HAL_GetTick>
 8009a82:	4602      	mov	r2, r0
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d901      	bls.n	8009a90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e1e7      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a90:	4b0e      	ldr	r3, [pc, #56]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d0ef      	beq.n	8009a7e <HAL_RCC_OscConfig+0x22e>
 8009a9e:	e020      	b.n	8009ae2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009aa6:	4a09      	ldr	r2, [pc, #36]	@ (8009acc <HAL_RCC_OscConfig+0x27c>)
 8009aa8:	f023 0301 	bic.w	r3, r3, #1
 8009aac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ab0:	f7fc fa26 	bl	8005f00 <HAL_GetTick>
 8009ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009ab6:	e00d      	b.n	8009ad4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ab8:	f7fc fa22 	bl	8005f00 <HAL_GetTick>
 8009abc:	4602      	mov	r2, r0
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d906      	bls.n	8009ad4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e1ca      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
 8009aca:	bf00      	nop
 8009acc:	40021000 	.word	0x40021000
 8009ad0:	20000138 	.word	0x20000138
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009ad4:	4b8c      	ldr	r3, [pc, #560]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ada:	f003 0302 	and.w	r3, r3, #2
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1ea      	bne.n	8009ab8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 0304 	and.w	r3, r3, #4
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 80a6 	beq.w	8009c3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009af0:	2300      	movs	r3, #0
 8009af2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009af4:	4b84      	ldr	r3, [pc, #528]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <HAL_RCC_OscConfig+0x2b4>
 8009b00:	2301      	movs	r3, #1
 8009b02:	e000      	b.n	8009b06 <HAL_RCC_OscConfig+0x2b6>
 8009b04:	2300      	movs	r3, #0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00d      	beq.n	8009b26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b0e:	4a7e      	ldr	r2, [pc, #504]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b16:	4b7c      	ldr	r3, [pc, #496]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009b22:	2301      	movs	r3, #1
 8009b24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b26:	4b79      	ldr	r3, [pc, #484]	@ (8009d0c <HAL_RCC_OscConfig+0x4bc>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d118      	bne.n	8009b64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b32:	4b76      	ldr	r3, [pc, #472]	@ (8009d0c <HAL_RCC_OscConfig+0x4bc>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a75      	ldr	r2, [pc, #468]	@ (8009d0c <HAL_RCC_OscConfig+0x4bc>)
 8009b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b3e:	f7fc f9df 	bl	8005f00 <HAL_GetTick>
 8009b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b44:	e008      	b.n	8009b58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b46:	f7fc f9db 	bl	8005f00 <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d901      	bls.n	8009b58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e183      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b58:	4b6c      	ldr	r3, [pc, #432]	@ (8009d0c <HAL_RCC_OscConfig+0x4bc>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d0f0      	beq.n	8009b46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d108      	bne.n	8009b7e <HAL_RCC_OscConfig+0x32e>
 8009b6c:	4b66      	ldr	r3, [pc, #408]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b72:	4a65      	ldr	r2, [pc, #404]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009b74:	f043 0301 	orr.w	r3, r3, #1
 8009b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009b7c:	e024      	b.n	8009bc8 <HAL_RCC_OscConfig+0x378>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	2b05      	cmp	r3, #5
 8009b84:	d110      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x358>
 8009b86:	4b60      	ldr	r3, [pc, #384]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b8c:	4a5e      	ldr	r2, [pc, #376]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009b8e:	f043 0304 	orr.w	r3, r3, #4
 8009b92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009b96:	4b5c      	ldr	r3, [pc, #368]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b9c:	4a5a      	ldr	r2, [pc, #360]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009b9e:	f043 0301 	orr.w	r3, r3, #1
 8009ba2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009ba6:	e00f      	b.n	8009bc8 <HAL_RCC_OscConfig+0x378>
 8009ba8:	4b57      	ldr	r3, [pc, #348]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bae:	4a56      	ldr	r2, [pc, #344]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009bb0:	f023 0301 	bic.w	r3, r3, #1
 8009bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009bb8:	4b53      	ldr	r3, [pc, #332]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bbe:	4a52      	ldr	r2, [pc, #328]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009bc0:	f023 0304 	bic.w	r3, r3, #4
 8009bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d016      	beq.n	8009bfe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bd0:	f7fc f996 	bl	8005f00 <HAL_GetTick>
 8009bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bd6:	e00a      	b.n	8009bee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bd8:	f7fc f992 	bl	8005f00 <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d901      	bls.n	8009bee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e138      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bee:	4b46      	ldr	r3, [pc, #280]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bf4:	f003 0302 	and.w	r3, r3, #2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0ed      	beq.n	8009bd8 <HAL_RCC_OscConfig+0x388>
 8009bfc:	e015      	b.n	8009c2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bfe:	f7fc f97f 	bl	8005f00 <HAL_GetTick>
 8009c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009c04:	e00a      	b.n	8009c1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c06:	f7fc f97b 	bl	8005f00 <HAL_GetTick>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d901      	bls.n	8009c1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e121      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c22:	f003 0302 	and.w	r3, r3, #2
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1ed      	bne.n	8009c06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009c2a:	7ffb      	ldrb	r3, [r7, #31]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d105      	bne.n	8009c3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c30:	4b35      	ldr	r3, [pc, #212]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c34:	4a34      	ldr	r2, [pc, #208]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c3a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0320 	and.w	r3, r3, #32
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d03c      	beq.n	8009cc2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d01c      	beq.n	8009c8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c50:	4b2d      	ldr	r3, [pc, #180]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c56:	4a2c      	ldr	r2, [pc, #176]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009c58:	f043 0301 	orr.w	r3, r3, #1
 8009c5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c60:	f7fc f94e 	bl	8005f00 <HAL_GetTick>
 8009c64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009c66:	e008      	b.n	8009c7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c68:	f7fc f94a 	bl	8005f00 <HAL_GetTick>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d901      	bls.n	8009c7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e0f2      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009c7a:	4b23      	ldr	r3, [pc, #140]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0ef      	beq.n	8009c68 <HAL_RCC_OscConfig+0x418>
 8009c88:	e01b      	b.n	8009cc2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009c8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c90:	4a1d      	ldr	r2, [pc, #116]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009c92:	f023 0301 	bic.w	r3, r3, #1
 8009c96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c9a:	f7fc f931 	bl	8005f00 <HAL_GetTick>
 8009c9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009ca0:	e008      	b.n	8009cb4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ca2:	f7fc f92d 	bl	8005f00 <HAL_GetTick>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d901      	bls.n	8009cb4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	e0d5      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009cb4:	4b14      	ldr	r3, [pc, #80]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cba:	f003 0302 	and.w	r3, r3, #2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1ef      	bne.n	8009ca2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	69db      	ldr	r3, [r3, #28]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 80c9 	beq.w	8009e5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f003 030c 	and.w	r3, r3, #12
 8009cd4:	2b0c      	cmp	r3, #12
 8009cd6:	f000 8083 	beq.w	8009de0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d15e      	bne.n	8009da0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ce2:	4b09      	ldr	r3, [pc, #36]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a08      	ldr	r2, [pc, #32]	@ (8009d08 <HAL_RCC_OscConfig+0x4b8>)
 8009ce8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cee:	f7fc f907 	bl	8005f00 <HAL_GetTick>
 8009cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009cf4:	e00c      	b.n	8009d10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cf6:	f7fc f903 	bl	8005f00 <HAL_GetTick>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d905      	bls.n	8009d10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e0ab      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
 8009d08:	40021000 	.word	0x40021000
 8009d0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d10:	4b55      	ldr	r3, [pc, #340]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1ec      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d1c:	4b52      	ldr	r3, [pc, #328]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009d1e:	68da      	ldr	r2, [r3, #12]
 8009d20:	4b52      	ldr	r3, [pc, #328]	@ (8009e6c <HAL_RCC_OscConfig+0x61c>)
 8009d22:	4013      	ands	r3, r2
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	6a11      	ldr	r1, [r2, #32]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009d2c:	3a01      	subs	r2, #1
 8009d2e:	0112      	lsls	r2, r2, #4
 8009d30:	4311      	orrs	r1, r2
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009d36:	0212      	lsls	r2, r2, #8
 8009d38:	4311      	orrs	r1, r2
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009d3e:	0852      	lsrs	r2, r2, #1
 8009d40:	3a01      	subs	r2, #1
 8009d42:	0552      	lsls	r2, r2, #21
 8009d44:	4311      	orrs	r1, r2
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009d4a:	0852      	lsrs	r2, r2, #1
 8009d4c:	3a01      	subs	r2, #1
 8009d4e:	0652      	lsls	r2, r2, #25
 8009d50:	4311      	orrs	r1, r2
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009d56:	06d2      	lsls	r2, r2, #27
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	4943      	ldr	r1, [pc, #268]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d60:	4b41      	ldr	r3, [pc, #260]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a40      	ldr	r2, [pc, #256]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009d6c:	4b3e      	ldr	r3, [pc, #248]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	4a3d      	ldr	r2, [pc, #244]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d78:	f7fc f8c2 	bl	8005f00 <HAL_GetTick>
 8009d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d7e:	e008      	b.n	8009d92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d80:	f7fc f8be 	bl	8005f00 <HAL_GetTick>
 8009d84:	4602      	mov	r2, r0
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d901      	bls.n	8009d92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e066      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d92:	4b35      	ldr	r3, [pc, #212]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0f0      	beq.n	8009d80 <HAL_RCC_OscConfig+0x530>
 8009d9e:	e05e      	b.n	8009e5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009da0:	4b31      	ldr	r3, [pc, #196]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a30      	ldr	r2, [pc, #192]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009da6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dac:	f7fc f8a8 	bl	8005f00 <HAL_GetTick>
 8009db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009db2:	e008      	b.n	8009dc6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009db4:	f7fc f8a4 	bl	8005f00 <HAL_GetTick>
 8009db8:	4602      	mov	r2, r0
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d901      	bls.n	8009dc6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e04c      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009dc6:	4b28      	ldr	r3, [pc, #160]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1f0      	bne.n	8009db4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009dd2:	4b25      	ldr	r3, [pc, #148]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009dd4:	68da      	ldr	r2, [r3, #12]
 8009dd6:	4924      	ldr	r1, [pc, #144]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009dd8:	4b25      	ldr	r3, [pc, #148]	@ (8009e70 <HAL_RCC_OscConfig+0x620>)
 8009dda:	4013      	ands	r3, r2
 8009ddc:	60cb      	str	r3, [r1, #12]
 8009dde:	e03e      	b.n	8009e5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	69db      	ldr	r3, [r3, #28]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d101      	bne.n	8009dec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e039      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009dec:	4b1e      	ldr	r3, [pc, #120]	@ (8009e68 <HAL_RCC_OscConfig+0x618>)
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f003 0203 	and.w	r2, r3, #3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a1b      	ldr	r3, [r3, #32]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d12c      	bne.n	8009e5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d123      	bne.n	8009e5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d11b      	bne.n	8009e5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d113      	bne.n	8009e5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e3c:	085b      	lsrs	r3, r3, #1
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d109      	bne.n	8009e5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e50:	085b      	lsrs	r3, r3, #1
 8009e52:	3b01      	subs	r3, #1
 8009e54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d001      	beq.n	8009e5e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e000      	b.n	8009e60 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3720      	adds	r7, #32
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	40021000 	.word	0x40021000
 8009e6c:	019f800c 	.word	0x019f800c
 8009e70:	feeefffc 	.word	0xfeeefffc

08009e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e11e      	b.n	800a0ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009e8c:	4b91      	ldr	r3, [pc, #580]	@ (800a0d4 <HAL_RCC_ClockConfig+0x260>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 030f 	and.w	r3, r3, #15
 8009e94:	683a      	ldr	r2, [r7, #0]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d910      	bls.n	8009ebc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e9a:	4b8e      	ldr	r3, [pc, #568]	@ (800a0d4 <HAL_RCC_ClockConfig+0x260>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f023 020f 	bic.w	r2, r3, #15
 8009ea2:	498c      	ldr	r1, [pc, #560]	@ (800a0d4 <HAL_RCC_ClockConfig+0x260>)
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009eaa:	4b8a      	ldr	r3, [pc, #552]	@ (800a0d4 <HAL_RCC_ClockConfig+0x260>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 030f 	and.w	r3, r3, #15
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d001      	beq.n	8009ebc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e106      	b.n	800a0ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d073      	beq.n	8009fb0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	2b03      	cmp	r3, #3
 8009ece:	d129      	bne.n	8009f24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ed0:	4b81      	ldr	r3, [pc, #516]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e0f4      	b.n	800a0ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009ee0:	f000 f9d0 	bl	800a284 <RCC_GetSysClockFreqFromPLLSource>
 8009ee4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	4a7c      	ldr	r2, [pc, #496]	@ (800a0dc <HAL_RCC_ClockConfig+0x268>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d93f      	bls.n	8009f6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009eee:	4b7a      	ldr	r3, [pc, #488]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d009      	beq.n	8009f0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d033      	beq.n	8009f6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d12f      	bne.n	8009f6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009f0e:	4b72      	ldr	r3, [pc, #456]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f16:	4a70      	ldr	r2, [pc, #448]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009f1e:	2380      	movs	r3, #128	@ 0x80
 8009f20:	617b      	str	r3, [r7, #20]
 8009f22:	e024      	b.n	8009f6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d107      	bne.n	8009f3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f2c:	4b6a      	ldr	r3, [pc, #424]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d109      	bne.n	8009f4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e0c6      	b.n	800a0ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f3c:	4b66      	ldr	r3, [pc, #408]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d101      	bne.n	8009f4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e0be      	b.n	800a0ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009f4c:	f000 f8ce 	bl	800a0ec <HAL_RCC_GetSysClockFreq>
 8009f50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	4a61      	ldr	r2, [pc, #388]	@ (800a0dc <HAL_RCC_ClockConfig+0x268>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d909      	bls.n	8009f6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009f5a:	4b5f      	ldr	r3, [pc, #380]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f62:	4a5d      	ldr	r2, [pc, #372]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009f6a:	2380      	movs	r3, #128	@ 0x80
 8009f6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f6e:	4b5a      	ldr	r3, [pc, #360]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	f023 0203 	bic.w	r2, r3, #3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	4957      	ldr	r1, [pc, #348]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f80:	f7fb ffbe 	bl	8005f00 <HAL_GetTick>
 8009f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f86:	e00a      	b.n	8009f9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f88:	f7fb ffba 	bl	8005f00 <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d901      	bls.n	8009f9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e095      	b.n	800a0ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f9e:	4b4e      	ldr	r3, [pc, #312]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	f003 020c 	and.w	r2, r3, #12
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d1eb      	bne.n	8009f88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 0302 	and.w	r3, r3, #2
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d023      	beq.n	800a004 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0304 	and.w	r3, r3, #4
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d005      	beq.n	8009fd4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009fc8:	4b43      	ldr	r3, [pc, #268]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	4a42      	ldr	r2, [pc, #264]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009fce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009fd2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0308 	and.w	r3, r3, #8
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d007      	beq.n	8009ff0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009fe0:	4b3d      	ldr	r3, [pc, #244]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009fe8:	4a3b      	ldr	r2, [pc, #236]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009fea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009fee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ff0:	4b39      	ldr	r3, [pc, #228]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	4936      	ldr	r1, [pc, #216]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 8009ffe:	4313      	orrs	r3, r2
 800a000:	608b      	str	r3, [r1, #8]
 800a002:	e008      	b.n	800a016 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	2b80      	cmp	r3, #128	@ 0x80
 800a008:	d105      	bne.n	800a016 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a00a:	4b33      	ldr	r3, [pc, #204]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	4a32      	ldr	r2, [pc, #200]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 800a010:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a014:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a016:	4b2f      	ldr	r3, [pc, #188]	@ (800a0d4 <HAL_RCC_ClockConfig+0x260>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 030f 	and.w	r3, r3, #15
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	429a      	cmp	r2, r3
 800a022:	d21d      	bcs.n	800a060 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a024:	4b2b      	ldr	r3, [pc, #172]	@ (800a0d4 <HAL_RCC_ClockConfig+0x260>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f023 020f 	bic.w	r2, r3, #15
 800a02c:	4929      	ldr	r1, [pc, #164]	@ (800a0d4 <HAL_RCC_ClockConfig+0x260>)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	4313      	orrs	r3, r2
 800a032:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a034:	f7fb ff64 	bl	8005f00 <HAL_GetTick>
 800a038:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a03a:	e00a      	b.n	800a052 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a03c:	f7fb ff60 	bl	8005f00 <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d901      	bls.n	800a052 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e03b      	b.n	800a0ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a052:	4b20      	ldr	r3, [pc, #128]	@ (800a0d4 <HAL_RCC_ClockConfig+0x260>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 030f 	and.w	r3, r3, #15
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d1ed      	bne.n	800a03c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 0304 	and.w	r3, r3, #4
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d008      	beq.n	800a07e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a06c:	4b1a      	ldr	r3, [pc, #104]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	4917      	ldr	r1, [pc, #92]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f003 0308 	and.w	r3, r3, #8
 800a086:	2b00      	cmp	r3, #0
 800a088:	d009      	beq.n	800a09e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a08a:	4b13      	ldr	r3, [pc, #76]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	490f      	ldr	r1, [pc, #60]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 800a09a:	4313      	orrs	r3, r2
 800a09c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a09e:	f000 f825 	bl	800a0ec <HAL_RCC_GetSysClockFreq>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d8 <HAL_RCC_ClockConfig+0x264>)
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	091b      	lsrs	r3, r3, #4
 800a0aa:	f003 030f 	and.w	r3, r3, #15
 800a0ae:	490c      	ldr	r1, [pc, #48]	@ (800a0e0 <HAL_RCC_ClockConfig+0x26c>)
 800a0b0:	5ccb      	ldrb	r3, [r1, r3]
 800a0b2:	f003 031f 	and.w	r3, r3, #31
 800a0b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ba:	4a0a      	ldr	r2, [pc, #40]	@ (800a0e4 <HAL_RCC_ClockConfig+0x270>)
 800a0bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a0be:	4b0a      	ldr	r3, [pc, #40]	@ (800a0e8 <HAL_RCC_ClockConfig+0x274>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7f9 ff78 	bl	8003fb8 <HAL_InitTick>
 800a0c8:	4603      	mov	r3, r0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3718      	adds	r7, #24
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	40022000 	.word	0x40022000
 800a0d8:	40021000 	.word	0x40021000
 800a0dc:	04c4b400 	.word	0x04c4b400
 800a0e0:	0801c1b0 	.word	0x0801c1b0
 800a0e4:	20000004 	.word	0x20000004
 800a0e8:	20000138 	.word	0x20000138

0800a0ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b087      	sub	sp, #28
 800a0f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a0f2:	4b2c      	ldr	r3, [pc, #176]	@ (800a1a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	f003 030c 	and.w	r3, r3, #12
 800a0fa:	2b04      	cmp	r3, #4
 800a0fc:	d102      	bne.n	800a104 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a0fe:	4b2a      	ldr	r3, [pc, #168]	@ (800a1a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a100:	613b      	str	r3, [r7, #16]
 800a102:	e047      	b.n	800a194 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a104:	4b27      	ldr	r3, [pc, #156]	@ (800a1a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f003 030c 	and.w	r3, r3, #12
 800a10c:	2b08      	cmp	r3, #8
 800a10e:	d102      	bne.n	800a116 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a110:	4b26      	ldr	r3, [pc, #152]	@ (800a1ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800a112:	613b      	str	r3, [r7, #16]
 800a114:	e03e      	b.n	800a194 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a116:	4b23      	ldr	r3, [pc, #140]	@ (800a1a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f003 030c 	and.w	r3, r3, #12
 800a11e:	2b0c      	cmp	r3, #12
 800a120:	d136      	bne.n	800a190 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a122:	4b20      	ldr	r3, [pc, #128]	@ (800a1a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	f003 0303 	and.w	r3, r3, #3
 800a12a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a12c:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	091b      	lsrs	r3, r3, #4
 800a132:	f003 030f 	and.w	r3, r3, #15
 800a136:	3301      	adds	r3, #1
 800a138:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	d10c      	bne.n	800a15a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a140:	4a1a      	ldr	r2, [pc, #104]	@ (800a1ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	fbb2 f3f3 	udiv	r3, r2, r3
 800a148:	4a16      	ldr	r2, [pc, #88]	@ (800a1a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a14a:	68d2      	ldr	r2, [r2, #12]
 800a14c:	0a12      	lsrs	r2, r2, #8
 800a14e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a152:	fb02 f303 	mul.w	r3, r2, r3
 800a156:	617b      	str	r3, [r7, #20]
      break;
 800a158:	e00c      	b.n	800a174 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a15a:	4a13      	ldr	r2, [pc, #76]	@ (800a1a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a162:	4a10      	ldr	r2, [pc, #64]	@ (800a1a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a164:	68d2      	ldr	r2, [r2, #12]
 800a166:	0a12      	lsrs	r2, r2, #8
 800a168:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a16c:	fb02 f303 	mul.w	r3, r2, r3
 800a170:	617b      	str	r3, [r7, #20]
      break;
 800a172:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a174:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	0e5b      	lsrs	r3, r3, #25
 800a17a:	f003 0303 	and.w	r3, r3, #3
 800a17e:	3301      	adds	r3, #1
 800a180:	005b      	lsls	r3, r3, #1
 800a182:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	fbb2 f3f3 	udiv	r3, r2, r3
 800a18c:	613b      	str	r3, [r7, #16]
 800a18e:	e001      	b.n	800a194 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a190:	2300      	movs	r3, #0
 800a192:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a194:	693b      	ldr	r3, [r7, #16]
}
 800a196:	4618      	mov	r0, r3
 800a198:	371c      	adds	r7, #28
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	40021000 	.word	0x40021000
 800a1a8:	00f42400 	.word	0x00f42400
 800a1ac:	007a1200 	.word	0x007a1200

0800a1b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1b4:	4b03      	ldr	r3, [pc, #12]	@ (800a1c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	20000004 	.word	0x20000004

0800a1c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a1cc:	f7ff fff0 	bl	800a1b0 <HAL_RCC_GetHCLKFreq>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	4b06      	ldr	r3, [pc, #24]	@ (800a1ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	0a1b      	lsrs	r3, r3, #8
 800a1d8:	f003 0307 	and.w	r3, r3, #7
 800a1dc:	4904      	ldr	r1, [pc, #16]	@ (800a1f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a1de:	5ccb      	ldrb	r3, [r1, r3]
 800a1e0:	f003 031f 	and.w	r3, r3, #31
 800a1e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	40021000 	.word	0x40021000
 800a1f0:	0801c1c0 	.word	0x0801c1c0

0800a1f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a1f8:	f7ff ffda 	bl	800a1b0 <HAL_RCC_GetHCLKFreq>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	4b06      	ldr	r3, [pc, #24]	@ (800a218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	0adb      	lsrs	r3, r3, #11
 800a204:	f003 0307 	and.w	r3, r3, #7
 800a208:	4904      	ldr	r1, [pc, #16]	@ (800a21c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a20a:	5ccb      	ldrb	r3, [r1, r3]
 800a20c:	f003 031f 	and.w	r3, r3, #31
 800a210:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a214:	4618      	mov	r0, r3
 800a216:	bd80      	pop	{r7, pc}
 800a218:	40021000 	.word	0x40021000
 800a21c:	0801c1c0 	.word	0x0801c1c0

0800a220 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	220f      	movs	r2, #15
 800a22e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a230:	4b12      	ldr	r3, [pc, #72]	@ (800a27c <HAL_RCC_GetClockConfig+0x5c>)
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	f003 0203 	and.w	r2, r3, #3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a23c:	4b0f      	ldr	r3, [pc, #60]	@ (800a27c <HAL_RCC_GetClockConfig+0x5c>)
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a248:	4b0c      	ldr	r3, [pc, #48]	@ (800a27c <HAL_RCC_GetClockConfig+0x5c>)
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a254:	4b09      	ldr	r3, [pc, #36]	@ (800a27c <HAL_RCC_GetClockConfig+0x5c>)
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	08db      	lsrs	r3, r3, #3
 800a25a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a262:	4b07      	ldr	r3, [pc, #28]	@ (800a280 <HAL_RCC_GetClockConfig+0x60>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 020f 	and.w	r2, r3, #15
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	601a      	str	r2, [r3, #0]
}
 800a26e:	bf00      	nop
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	40021000 	.word	0x40021000
 800a280:	40022000 	.word	0x40022000

0800a284 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a284:	b480      	push	{r7}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a28a:	4b1e      	ldr	r3, [pc, #120]	@ (800a304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	f003 0303 	and.w	r3, r3, #3
 800a292:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a294:	4b1b      	ldr	r3, [pc, #108]	@ (800a304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	091b      	lsrs	r3, r3, #4
 800a29a:	f003 030f 	and.w	r3, r3, #15
 800a29e:	3301      	adds	r3, #1
 800a2a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	2b03      	cmp	r3, #3
 800a2a6:	d10c      	bne.n	800a2c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a2a8:	4a17      	ldr	r2, [pc, #92]	@ (800a308 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2b0:	4a14      	ldr	r2, [pc, #80]	@ (800a304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a2b2:	68d2      	ldr	r2, [r2, #12]
 800a2b4:	0a12      	lsrs	r2, r2, #8
 800a2b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a2ba:	fb02 f303 	mul.w	r3, r2, r3
 800a2be:	617b      	str	r3, [r7, #20]
    break;
 800a2c0:	e00c      	b.n	800a2dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a2c2:	4a12      	ldr	r2, [pc, #72]	@ (800a30c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ca:	4a0e      	ldr	r2, [pc, #56]	@ (800a304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a2cc:	68d2      	ldr	r2, [r2, #12]
 800a2ce:	0a12      	lsrs	r2, r2, #8
 800a2d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a2d4:	fb02 f303 	mul.w	r3, r2, r3
 800a2d8:	617b      	str	r3, [r7, #20]
    break;
 800a2da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a2dc:	4b09      	ldr	r3, [pc, #36]	@ (800a304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	0e5b      	lsrs	r3, r3, #25
 800a2e2:	f003 0303 	and.w	r3, r3, #3
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a2f6:	687b      	ldr	r3, [r7, #4]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	371c      	adds	r7, #28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	40021000 	.word	0x40021000
 800a308:	007a1200 	.word	0x007a1200
 800a30c:	00f42400 	.word	0x00f42400

0800a310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a318:	2300      	movs	r3, #0
 800a31a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a31c:	2300      	movs	r3, #0
 800a31e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 8098 	beq.w	800a45e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a32e:	2300      	movs	r3, #0
 800a330:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a332:	4b43      	ldr	r3, [pc, #268]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10d      	bne.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a33e:	4b40      	ldr	r3, [pc, #256]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a342:	4a3f      	ldr	r2, [pc, #252]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a348:	6593      	str	r3, [r2, #88]	@ 0x58
 800a34a:	4b3d      	ldr	r3, [pc, #244]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a34c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a34e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a352:	60bb      	str	r3, [r7, #8]
 800a354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a356:	2301      	movs	r3, #1
 800a358:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a35a:	4b3a      	ldr	r3, [pc, #232]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a39      	ldr	r2, [pc, #228]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a364:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a366:	f7fb fdcb 	bl	8005f00 <HAL_GetTick>
 800a36a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a36c:	e009      	b.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a36e:	f7fb fdc7 	bl	8005f00 <HAL_GetTick>
 800a372:	4602      	mov	r2, r0
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d902      	bls.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	74fb      	strb	r3, [r7, #19]
        break;
 800a380:	e005      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a382:	4b30      	ldr	r3, [pc, #192]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0ef      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a38e:	7cfb      	ldrb	r3, [r7, #19]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d159      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a394:	4b2a      	ldr	r3, [pc, #168]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a39a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a39e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d01e      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d019      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a3b0:	4b23      	ldr	r3, [pc, #140]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3bc:	4b20      	ldr	r3, [pc, #128]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3c2:	4a1f      	ldr	r2, [pc, #124]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3cc:	4b1c      	ldr	r3, [pc, #112]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3d2:	4a1b      	ldr	r2, [pc, #108]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a3dc:	4a18      	ldr	r2, [pc, #96]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d016      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ee:	f7fb fd87 	bl	8005f00 <HAL_GetTick>
 800a3f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a3f4:	e00b      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3f6:	f7fb fd83 	bl	8005f00 <HAL_GetTick>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a404:	4293      	cmp	r3, r2
 800a406:	d902      	bls.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	74fb      	strb	r3, [r7, #19]
            break;
 800a40c:	e006      	b.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a40e:	4b0c      	ldr	r3, [pc, #48]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d0ec      	beq.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a41c:	7cfb      	ldrb	r3, [r7, #19]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10b      	bne.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a422:	4b07      	ldr	r3, [pc, #28]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a428:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a430:	4903      	ldr	r1, [pc, #12]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a432:	4313      	orrs	r3, r2
 800a434:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a438:	e008      	b.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a43a:	7cfb      	ldrb	r3, [r7, #19]
 800a43c:	74bb      	strb	r3, [r7, #18]
 800a43e:	e005      	b.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a440:	40021000 	.word	0x40021000
 800a444:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a448:	7cfb      	ldrb	r3, [r7, #19]
 800a44a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a44c:	7c7b      	ldrb	r3, [r7, #17]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d105      	bne.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a452:	4ba6      	ldr	r3, [pc, #664]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a456:	4aa5      	ldr	r2, [pc, #660]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a45c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a46a:	4ba0      	ldr	r3, [pc, #640]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a46c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a470:	f023 0203 	bic.w	r2, r3, #3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	499c      	ldr	r1, [pc, #624]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 0302 	and.w	r3, r3, #2
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00a      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a48c:	4b97      	ldr	r3, [pc, #604]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a48e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a492:	f023 020c 	bic.w	r2, r3, #12
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	4994      	ldr	r1, [pc, #592]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a49c:	4313      	orrs	r3, r2
 800a49e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0304 	and.w	r3, r3, #4
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00a      	beq.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a4ae:	4b8f      	ldr	r3, [pc, #572]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a4b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	498b      	ldr	r1, [pc, #556]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 0308 	and.w	r3, r3, #8
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00a      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a4d0:	4b86      	ldr	r3, [pc, #536]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a4d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	4983      	ldr	r1, [pc, #524]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0320 	and.w	r3, r3, #32
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00a      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a4f2:	4b7e      	ldr	r3, [pc, #504]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	497a      	ldr	r1, [pc, #488]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a502:	4313      	orrs	r3, r2
 800a504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00a      	beq.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a514:	4b75      	ldr	r3, [pc, #468]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a51a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	699b      	ldr	r3, [r3, #24]
 800a522:	4972      	ldr	r1, [pc, #456]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a524:	4313      	orrs	r3, r2
 800a526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00a      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a536:	4b6d      	ldr	r3, [pc, #436]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a53c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	4969      	ldr	r1, [pc, #420]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a546:	4313      	orrs	r3, r2
 800a548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00a      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a558:	4b64      	ldr	r3, [pc, #400]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a55e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	4961      	ldr	r1, [pc, #388]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00a      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a57a:	4b5c      	ldr	r3, [pc, #368]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a57c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a580:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a588:	4958      	ldr	r1, [pc, #352]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a58a:	4313      	orrs	r3, r2
 800a58c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d015      	beq.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a59c:	4b53      	ldr	r3, [pc, #332]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5aa:	4950      	ldr	r1, [pc, #320]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5ba:	d105      	bne.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a5bc:	4b4b      	ldr	r3, [pc, #300]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	4a4a      	ldr	r2, [pc, #296]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5c6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d015      	beq.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a5d4:	4b45      	ldr	r3, [pc, #276]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e2:	4942      	ldr	r1, [pc, #264]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5f2:	d105      	bne.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a5f4:	4b3d      	ldr	r3, [pc, #244]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	4a3c      	ldr	r2, [pc, #240]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5fe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d015      	beq.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a60c:	4b37      	ldr	r3, [pc, #220]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a612:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a61a:	4934      	ldr	r1, [pc, #208]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a61c:	4313      	orrs	r3, r2
 800a61e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a626:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a62a:	d105      	bne.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a62c:	4b2f      	ldr	r3, [pc, #188]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	4a2e      	ldr	r2, [pc, #184]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a636:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a640:	2b00      	cmp	r3, #0
 800a642:	d015      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a644:	4b29      	ldr	r3, [pc, #164]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a64a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a652:	4926      	ldr	r1, [pc, #152]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a654:	4313      	orrs	r3, r2
 800a656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a65e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a662:	d105      	bne.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a664:	4b21      	ldr	r3, [pc, #132]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	4a20      	ldr	r2, [pc, #128]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a66a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a66e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d015      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a67c:	4b1b      	ldr	r3, [pc, #108]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a682:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a68a:	4918      	ldr	r1, [pc, #96]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a68c:	4313      	orrs	r3, r2
 800a68e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a69a:	d105      	bne.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a69c:	4b13      	ldr	r3, [pc, #76]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	4a12      	ldr	r2, [pc, #72]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d015      	beq.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a6b4:	4b0d      	ldr	r3, [pc, #52]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6c2:	490a      	ldr	r1, [pc, #40]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6d2:	d105      	bne.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a6d4:	4b05      	ldr	r3, [pc, #20]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	4a04      	ldr	r2, [pc, #16]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a6e0:	7cbb      	ldrb	r3, [r7, #18]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3718      	adds	r7, #24
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	40021000 	.word	0x40021000

0800a6f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e054      	b.n	800a7ac <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d111      	bne.n	800a732 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f001 fcd2 	bl	800c0c0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d102      	bne.n	800a72a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a23      	ldr	r2, [pc, #140]	@ (800a7b4 <HAL_TIM_Base_Init+0xc4>)
 800a728:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2202      	movs	r2, #2
 800a736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	3304      	adds	r3, #4
 800a742:	4619      	mov	r1, r3
 800a744:	4610      	mov	r0, r2
 800a746:	f001 f867 	bl	800b818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2201      	movs	r2, #1
 800a756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2201      	movs	r2, #1
 800a75e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2201      	movs	r2, #1
 800a76e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2201      	movs	r2, #1
 800a78e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	08004725 	.word	0x08004725

0800a7b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d001      	beq.n	800a7d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e042      	b.n	800a856 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2202      	movs	r2, #2
 800a7d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a21      	ldr	r2, [pc, #132]	@ (800a864 <HAL_TIM_Base_Start+0xac>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d018      	beq.n	800a814 <HAL_TIM_Base_Start+0x5c>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ea:	d013      	beq.n	800a814 <HAL_TIM_Base_Start+0x5c>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a868 <HAL_TIM_Base_Start+0xb0>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d00e      	beq.n	800a814 <HAL_TIM_Base_Start+0x5c>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a1c      	ldr	r2, [pc, #112]	@ (800a86c <HAL_TIM_Base_Start+0xb4>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d009      	beq.n	800a814 <HAL_TIM_Base_Start+0x5c>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a1a      	ldr	r2, [pc, #104]	@ (800a870 <HAL_TIM_Base_Start+0xb8>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d004      	beq.n	800a814 <HAL_TIM_Base_Start+0x5c>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a19      	ldr	r2, [pc, #100]	@ (800a874 <HAL_TIM_Base_Start+0xbc>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d115      	bne.n	800a840 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	689a      	ldr	r2, [r3, #8]
 800a81a:	4b17      	ldr	r3, [pc, #92]	@ (800a878 <HAL_TIM_Base_Start+0xc0>)
 800a81c:	4013      	ands	r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b06      	cmp	r3, #6
 800a824:	d015      	beq.n	800a852 <HAL_TIM_Base_Start+0x9a>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a82c:	d011      	beq.n	800a852 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f042 0201 	orr.w	r2, r2, #1
 800a83c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a83e:	e008      	b.n	800a852 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f042 0201 	orr.w	r2, r2, #1
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	e000      	b.n	800a854 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a852:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	40012c00 	.word	0x40012c00
 800a868:	40000400 	.word	0x40000400
 800a86c:	40000800 	.word	0x40000800
 800a870:	40013400 	.word	0x40013400
 800a874:	40014000 	.word	0x40014000
 800a878:	00010007 	.word	0x00010007

0800a87c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	6a1a      	ldr	r2, [r3, #32]
 800a88a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a88e:	4013      	ands	r3, r2
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10f      	bne.n	800a8b4 <HAL_TIM_Base_Stop+0x38>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6a1a      	ldr	r2, [r3, #32]
 800a89a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a89e:	4013      	ands	r3, r2
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d107      	bne.n	800a8b4 <HAL_TIM_Base_Stop+0x38>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f022 0201 	bic.w	r2, r2, #1
 800a8b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
	...

0800a8cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d001      	beq.n	800a8e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e04a      	b.n	800a97a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68da      	ldr	r2, [r3, #12]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0201 	orr.w	r2, r2, #1
 800a8fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a21      	ldr	r2, [pc, #132]	@ (800a988 <HAL_TIM_Base_Start_IT+0xbc>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d018      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a90e:	d013      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a1d      	ldr	r2, [pc, #116]	@ (800a98c <HAL_TIM_Base_Start_IT+0xc0>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d00e      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a1c      	ldr	r2, [pc, #112]	@ (800a990 <HAL_TIM_Base_Start_IT+0xc4>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d009      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a1a      	ldr	r2, [pc, #104]	@ (800a994 <HAL_TIM_Base_Start_IT+0xc8>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d004      	beq.n	800a938 <HAL_TIM_Base_Start_IT+0x6c>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a19      	ldr	r2, [pc, #100]	@ (800a998 <HAL_TIM_Base_Start_IT+0xcc>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d115      	bne.n	800a964 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689a      	ldr	r2, [r3, #8]
 800a93e:	4b17      	ldr	r3, [pc, #92]	@ (800a99c <HAL_TIM_Base_Start_IT+0xd0>)
 800a940:	4013      	ands	r3, r2
 800a942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b06      	cmp	r3, #6
 800a948:	d015      	beq.n	800a976 <HAL_TIM_Base_Start_IT+0xaa>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a950:	d011      	beq.n	800a976 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f042 0201 	orr.w	r2, r2, #1
 800a960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a962:	e008      	b.n	800a976 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f042 0201 	orr.w	r2, r2, #1
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	e000      	b.n	800a978 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a976:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	40012c00 	.word	0x40012c00
 800a98c:	40000400 	.word	0x40000400
 800a990:	40000800 	.word	0x40000800
 800a994:	40013400 	.word	0x40013400
 800a998:	40014000 	.word	0x40014000
 800a99c:	00010007 	.word	0x00010007

0800a9a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e054      	b.n	800aa5c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d111      	bne.n	800a9e2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f001 fb7a 	bl	800c0c0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d102      	bne.n	800a9da <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a23      	ldr	r2, [pc, #140]	@ (800aa64 <HAL_TIM_PWM_Init+0xc4>)
 800a9d8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	3304      	adds	r3, #4
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	f000 ff0f 	bl	800b818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2201      	movs	r2, #1
 800aa16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	080047f5 	.word	0x080047f5

0800aa68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d109      	bne.n	800aa8c <HAL_TIM_PWM_Start+0x24>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	bf14      	ite	ne
 800aa84:	2301      	movne	r3, #1
 800aa86:	2300      	moveq	r3, #0
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	e03c      	b.n	800ab06 <HAL_TIM_PWM_Start+0x9e>
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2b04      	cmp	r3, #4
 800aa90:	d109      	bne.n	800aaa6 <HAL_TIM_PWM_Start+0x3e>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	bf14      	ite	ne
 800aa9e:	2301      	movne	r3, #1
 800aaa0:	2300      	moveq	r3, #0
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	e02f      	b.n	800ab06 <HAL_TIM_PWM_Start+0x9e>
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b08      	cmp	r3, #8
 800aaaa:	d109      	bne.n	800aac0 <HAL_TIM_PWM_Start+0x58>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	bf14      	ite	ne
 800aab8:	2301      	movne	r3, #1
 800aaba:	2300      	moveq	r3, #0
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	e022      	b.n	800ab06 <HAL_TIM_PWM_Start+0x9e>
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	2b0c      	cmp	r3, #12
 800aac4:	d109      	bne.n	800aada <HAL_TIM_PWM_Start+0x72>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b01      	cmp	r3, #1
 800aad0:	bf14      	ite	ne
 800aad2:	2301      	movne	r3, #1
 800aad4:	2300      	moveq	r3, #0
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	e015      	b.n	800ab06 <HAL_TIM_PWM_Start+0x9e>
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b10      	cmp	r3, #16
 800aade:	d109      	bne.n	800aaf4 <HAL_TIM_PWM_Start+0x8c>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	bf14      	ite	ne
 800aaec:	2301      	movne	r3, #1
 800aaee:	2300      	moveq	r3, #0
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	e008      	b.n	800ab06 <HAL_TIM_PWM_Start+0x9e>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	bf14      	ite	ne
 800ab00:	2301      	movne	r3, #1
 800ab02:	2300      	moveq	r3, #0
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e097      	b.n	800ac3e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d104      	bne.n	800ab1e <HAL_TIM_PWM_Start+0xb6>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2202      	movs	r2, #2
 800ab18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab1c:	e023      	b.n	800ab66 <HAL_TIM_PWM_Start+0xfe>
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2b04      	cmp	r3, #4
 800ab22:	d104      	bne.n	800ab2e <HAL_TIM_PWM_Start+0xc6>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2202      	movs	r2, #2
 800ab28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab2c:	e01b      	b.n	800ab66 <HAL_TIM_PWM_Start+0xfe>
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	2b08      	cmp	r3, #8
 800ab32:	d104      	bne.n	800ab3e <HAL_TIM_PWM_Start+0xd6>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2202      	movs	r2, #2
 800ab38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab3c:	e013      	b.n	800ab66 <HAL_TIM_PWM_Start+0xfe>
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	2b0c      	cmp	r3, #12
 800ab42:	d104      	bne.n	800ab4e <HAL_TIM_PWM_Start+0xe6>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2202      	movs	r2, #2
 800ab48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab4c:	e00b      	b.n	800ab66 <HAL_TIM_PWM_Start+0xfe>
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2b10      	cmp	r3, #16
 800ab52:	d104      	bne.n	800ab5e <HAL_TIM_PWM_Start+0xf6>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2202      	movs	r2, #2
 800ab58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab5c:	e003      	b.n	800ab66 <HAL_TIM_PWM_Start+0xfe>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2202      	movs	r2, #2
 800ab62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f001 fa80 	bl	800c074 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a33      	ldr	r2, [pc, #204]	@ (800ac48 <HAL_TIM_PWM_Start+0x1e0>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d013      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x13e>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a32      	ldr	r2, [pc, #200]	@ (800ac4c <HAL_TIM_PWM_Start+0x1e4>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d00e      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x13e>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a30      	ldr	r2, [pc, #192]	@ (800ac50 <HAL_TIM_PWM_Start+0x1e8>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d009      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x13e>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a2f      	ldr	r2, [pc, #188]	@ (800ac54 <HAL_TIM_PWM_Start+0x1ec>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d004      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x13e>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a2d      	ldr	r2, [pc, #180]	@ (800ac58 <HAL_TIM_PWM_Start+0x1f0>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d101      	bne.n	800abaa <HAL_TIM_PWM_Start+0x142>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e000      	b.n	800abac <HAL_TIM_PWM_Start+0x144>
 800abaa:	2300      	movs	r3, #0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d007      	beq.n	800abc0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800abbe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a20      	ldr	r2, [pc, #128]	@ (800ac48 <HAL_TIM_PWM_Start+0x1e0>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d018      	beq.n	800abfc <HAL_TIM_PWM_Start+0x194>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abd2:	d013      	beq.n	800abfc <HAL_TIM_PWM_Start+0x194>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a20      	ldr	r2, [pc, #128]	@ (800ac5c <HAL_TIM_PWM_Start+0x1f4>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d00e      	beq.n	800abfc <HAL_TIM_PWM_Start+0x194>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a1f      	ldr	r2, [pc, #124]	@ (800ac60 <HAL_TIM_PWM_Start+0x1f8>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d009      	beq.n	800abfc <HAL_TIM_PWM_Start+0x194>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a17      	ldr	r2, [pc, #92]	@ (800ac4c <HAL_TIM_PWM_Start+0x1e4>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d004      	beq.n	800abfc <HAL_TIM_PWM_Start+0x194>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a16      	ldr	r2, [pc, #88]	@ (800ac50 <HAL_TIM_PWM_Start+0x1e8>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d115      	bne.n	800ac28 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	689a      	ldr	r2, [r3, #8]
 800ac02:	4b18      	ldr	r3, [pc, #96]	@ (800ac64 <HAL_TIM_PWM_Start+0x1fc>)
 800ac04:	4013      	ands	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2b06      	cmp	r3, #6
 800ac0c:	d015      	beq.n	800ac3a <HAL_TIM_PWM_Start+0x1d2>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac14:	d011      	beq.n	800ac3a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f042 0201 	orr.w	r2, r2, #1
 800ac24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac26:	e008      	b.n	800ac3a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f042 0201 	orr.w	r2, r2, #1
 800ac36:	601a      	str	r2, [r3, #0]
 800ac38:	e000      	b.n	800ac3c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	40012c00 	.word	0x40012c00
 800ac4c:	40013400 	.word	0x40013400
 800ac50:	40014000 	.word	0x40014000
 800ac54:	40014400 	.word	0x40014400
 800ac58:	40014800 	.word	0x40014800
 800ac5c:	40000400 	.word	0x40000400
 800ac60:	40000800 	.word	0x40000800
 800ac64:	00010007 	.word	0x00010007

0800ac68 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2200      	movs	r2, #0
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f001 f9fa 	bl	800c074 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a3e      	ldr	r2, [pc, #248]	@ (800ad80 <HAL_TIM_PWM_Stop+0x118>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d013      	beq.n	800acb2 <HAL_TIM_PWM_Stop+0x4a>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a3d      	ldr	r2, [pc, #244]	@ (800ad84 <HAL_TIM_PWM_Stop+0x11c>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d00e      	beq.n	800acb2 <HAL_TIM_PWM_Stop+0x4a>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a3b      	ldr	r2, [pc, #236]	@ (800ad88 <HAL_TIM_PWM_Stop+0x120>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d009      	beq.n	800acb2 <HAL_TIM_PWM_Stop+0x4a>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a3a      	ldr	r2, [pc, #232]	@ (800ad8c <HAL_TIM_PWM_Stop+0x124>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d004      	beq.n	800acb2 <HAL_TIM_PWM_Stop+0x4a>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a38      	ldr	r2, [pc, #224]	@ (800ad90 <HAL_TIM_PWM_Stop+0x128>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d101      	bne.n	800acb6 <HAL_TIM_PWM_Stop+0x4e>
 800acb2:	2301      	movs	r3, #1
 800acb4:	e000      	b.n	800acb8 <HAL_TIM_PWM_Stop+0x50>
 800acb6:	2300      	movs	r3, #0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d017      	beq.n	800acec <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	6a1a      	ldr	r2, [r3, #32]
 800acc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800acc6:	4013      	ands	r3, r2
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10f      	bne.n	800acec <HAL_TIM_PWM_Stop+0x84>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	6a1a      	ldr	r2, [r3, #32]
 800acd2:	f244 4344 	movw	r3, #17476	@ 0x4444
 800acd6:	4013      	ands	r3, r2
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d107      	bne.n	800acec <HAL_TIM_PWM_Stop+0x84>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800acea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	6a1a      	ldr	r2, [r3, #32]
 800acf2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800acf6:	4013      	ands	r3, r2
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10f      	bne.n	800ad1c <HAL_TIM_PWM_Stop+0xb4>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6a1a      	ldr	r2, [r3, #32]
 800ad02:	f244 4344 	movw	r3, #17476	@ 0x4444
 800ad06:	4013      	ands	r3, r2
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d107      	bne.n	800ad1c <HAL_TIM_PWM_Stop+0xb4>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f022 0201 	bic.w	r2, r2, #1
 800ad1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d104      	bne.n	800ad2c <HAL_TIM_PWM_Stop+0xc4>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad2a:	e023      	b.n	800ad74 <HAL_TIM_PWM_Stop+0x10c>
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	d104      	bne.n	800ad3c <HAL_TIM_PWM_Stop+0xd4>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad3a:	e01b      	b.n	800ad74 <HAL_TIM_PWM_Stop+0x10c>
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	2b08      	cmp	r3, #8
 800ad40:	d104      	bne.n	800ad4c <HAL_TIM_PWM_Stop+0xe4>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad4a:	e013      	b.n	800ad74 <HAL_TIM_PWM_Stop+0x10c>
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2b0c      	cmp	r3, #12
 800ad50:	d104      	bne.n	800ad5c <HAL_TIM_PWM_Stop+0xf4>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad5a:	e00b      	b.n	800ad74 <HAL_TIM_PWM_Stop+0x10c>
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	2b10      	cmp	r3, #16
 800ad60:	d104      	bne.n	800ad6c <HAL_TIM_PWM_Stop+0x104>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad6a:	e003      	b.n	800ad74 <HAL_TIM_PWM_Stop+0x10c>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	40012c00 	.word	0x40012c00
 800ad84:	40013400 	.word	0x40013400
 800ad88:	40014000 	.word	0x40014000
 800ad8c:	40014400 	.word	0x40014400
 800ad90:	40014800 	.word	0x40014800

0800ad94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	f003 0302 	and.w	r3, r3, #2
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d026      	beq.n	800ae04 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d021      	beq.n	800ae04 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f06f 0202 	mvn.w	r2, #2
 800adc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2201      	movs	r2, #1
 800adce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	f003 0303 	and.w	r3, r3, #3
 800adda:	2b00      	cmp	r3, #0
 800addc:	d005      	beq.n	800adea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	4798      	blx	r3
 800ade8:	e009      	b.n	800adfe <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	f003 0304 	and.w	r3, r3, #4
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d026      	beq.n	800ae5c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f003 0304 	and.w	r3, r3, #4
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d021      	beq.n	800ae5c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f06f 0204 	mvn.w	r2, #4
 800ae20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2202      	movs	r2, #2
 800ae26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d005      	beq.n	800ae42 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	4798      	blx	r3
 800ae40:	e009      	b.n	800ae56 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	f003 0308 	and.w	r3, r3, #8
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d026      	beq.n	800aeb4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f003 0308 	and.w	r3, r3, #8
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d021      	beq.n	800aeb4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f06f 0208 	mvn.w	r2, #8
 800ae78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2204      	movs	r2, #4
 800ae7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	f003 0303 	and.w	r3, r3, #3
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d005      	beq.n	800ae9a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	4798      	blx	r3
 800ae98:	e009      	b.n	800aeae <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f003 0310 	and.w	r3, r3, #16
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d026      	beq.n	800af0c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f003 0310 	and.w	r3, r3, #16
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d021      	beq.n	800af0c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f06f 0210 	mvn.w	r2, #16
 800aed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2208      	movs	r2, #8
 800aed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d005      	beq.n	800aef2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	4798      	blx	r3
 800aef0:	e009      	b.n	800af06 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00e      	beq.n	800af34 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d009      	beq.n	800af34 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f06f 0201 	mvn.w	r2, #1
 800af28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d104      	bne.n	800af48 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00e      	beq.n	800af66 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d009      	beq.n	800af66 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800af5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00e      	beq.n	800af8e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af76:	2b00      	cmp	r3, #0
 800af78:	d009      	beq.n	800af8e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800af82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00e      	beq.n	800afb6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d009      	beq.n	800afb6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800afaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	f003 0320 	and.w	r3, r3, #32
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00e      	beq.n	800afde <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f003 0320 	and.w	r3, r3, #32
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d009      	beq.n	800afde <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f06f 0220 	mvn.w	r2, #32
 800afd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00e      	beq.n	800b006 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d009      	beq.n	800b006 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800affa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00e      	beq.n	800b02e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b016:	2b00      	cmp	r3, #0
 800b018:	d009      	beq.n	800b02e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00e      	beq.n	800b056 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d009      	beq.n	800b056 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b04a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00e      	beq.n	800b07e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b066:	2b00      	cmp	r3, #0
 800b068:	d009      	beq.n	800b07e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b07e:	bf00      	nop
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
	...

0800b088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b094:	2300      	movs	r3, #0
 800b096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d101      	bne.n	800b0a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b0a2:	2302      	movs	r3, #2
 800b0a4:	e0ff      	b.n	800b2a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b14      	cmp	r3, #20
 800b0b2:	f200 80f0 	bhi.w	800b296 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0bc:	0800b111 	.word	0x0800b111
 800b0c0:	0800b297 	.word	0x0800b297
 800b0c4:	0800b297 	.word	0x0800b297
 800b0c8:	0800b297 	.word	0x0800b297
 800b0cc:	0800b151 	.word	0x0800b151
 800b0d0:	0800b297 	.word	0x0800b297
 800b0d4:	0800b297 	.word	0x0800b297
 800b0d8:	0800b297 	.word	0x0800b297
 800b0dc:	0800b193 	.word	0x0800b193
 800b0e0:	0800b297 	.word	0x0800b297
 800b0e4:	0800b297 	.word	0x0800b297
 800b0e8:	0800b297 	.word	0x0800b297
 800b0ec:	0800b1d3 	.word	0x0800b1d3
 800b0f0:	0800b297 	.word	0x0800b297
 800b0f4:	0800b297 	.word	0x0800b297
 800b0f8:	0800b297 	.word	0x0800b297
 800b0fc:	0800b215 	.word	0x0800b215
 800b100:	0800b297 	.word	0x0800b297
 800b104:	0800b297 	.word	0x0800b297
 800b108:	0800b297 	.word	0x0800b297
 800b10c:	0800b255 	.word	0x0800b255
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68b9      	ldr	r1, [r7, #8]
 800b116:	4618      	mov	r0, r3
 800b118:	f000 fc1a 	bl	800b950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	699a      	ldr	r2, [r3, #24]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f042 0208 	orr.w	r2, r2, #8
 800b12a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	699a      	ldr	r2, [r3, #24]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f022 0204 	bic.w	r2, r2, #4
 800b13a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6999      	ldr	r1, [r3, #24]
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	691a      	ldr	r2, [r3, #16]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	430a      	orrs	r2, r1
 800b14c:	619a      	str	r2, [r3, #24]
      break;
 800b14e:	e0a5      	b.n	800b29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68b9      	ldr	r1, [r7, #8]
 800b156:	4618      	mov	r0, r3
 800b158:	f000 fc8a 	bl	800ba70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	699a      	ldr	r2, [r3, #24]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b16a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	699a      	ldr	r2, [r3, #24]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b17a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6999      	ldr	r1, [r3, #24]
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	021a      	lsls	r2, r3, #8
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	430a      	orrs	r2, r1
 800b18e:	619a      	str	r2, [r3, #24]
      break;
 800b190:	e084      	b.n	800b29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68b9      	ldr	r1, [r7, #8]
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 fcf3 	bl	800bb84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	69da      	ldr	r2, [r3, #28]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f042 0208 	orr.w	r2, r2, #8
 800b1ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	69da      	ldr	r2, [r3, #28]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f022 0204 	bic.w	r2, r2, #4
 800b1bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	69d9      	ldr	r1, [r3, #28]
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	691a      	ldr	r2, [r3, #16]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	430a      	orrs	r2, r1
 800b1ce:	61da      	str	r2, [r3, #28]
      break;
 800b1d0:	e064      	b.n	800b29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68b9      	ldr	r1, [r7, #8]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 fd5b 	bl	800bc94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	69da      	ldr	r2, [r3, #28]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	69da      	ldr	r2, [r3, #28]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	69d9      	ldr	r1, [r3, #28]
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	021a      	lsls	r2, r3, #8
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	430a      	orrs	r2, r1
 800b210:	61da      	str	r2, [r3, #28]
      break;
 800b212:	e043      	b.n	800b29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	68b9      	ldr	r1, [r7, #8]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 fdc4 	bl	800bda8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f042 0208 	orr.w	r2, r2, #8
 800b22e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f022 0204 	bic.w	r2, r2, #4
 800b23e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	691a      	ldr	r2, [r3, #16]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	430a      	orrs	r2, r1
 800b250:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b252:	e023      	b.n	800b29c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68b9      	ldr	r1, [r7, #8]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 fe08 	bl	800be70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b26e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b27e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	021a      	lsls	r2, r3, #8
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	430a      	orrs	r2, r1
 800b292:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b294:	e002      	b.n	800b29c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	75fb      	strb	r3, [r7, #23]
      break;
 800b29a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b2a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop

0800b2b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d101      	bne.n	800b2cc <HAL_TIM_ConfigClockSource+0x1c>
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	e0de      	b.n	800b48a <HAL_TIM_ConfigClockSource+0x1da>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b2ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b2ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b2f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a63      	ldr	r2, [pc, #396]	@ (800b494 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b306:	4293      	cmp	r3, r2
 800b308:	f000 80a9 	beq.w	800b45e <HAL_TIM_ConfigClockSource+0x1ae>
 800b30c:	4a61      	ldr	r2, [pc, #388]	@ (800b494 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	f200 80ae 	bhi.w	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
 800b314:	4a60      	ldr	r2, [pc, #384]	@ (800b498 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b316:	4293      	cmp	r3, r2
 800b318:	f000 80a1 	beq.w	800b45e <HAL_TIM_ConfigClockSource+0x1ae>
 800b31c:	4a5e      	ldr	r2, [pc, #376]	@ (800b498 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	f200 80a6 	bhi.w	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
 800b324:	4a5d      	ldr	r2, [pc, #372]	@ (800b49c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b326:	4293      	cmp	r3, r2
 800b328:	f000 8099 	beq.w	800b45e <HAL_TIM_ConfigClockSource+0x1ae>
 800b32c:	4a5b      	ldr	r2, [pc, #364]	@ (800b49c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	f200 809e 	bhi.w	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
 800b334:	4a5a      	ldr	r2, [pc, #360]	@ (800b4a0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800b336:	4293      	cmp	r3, r2
 800b338:	f000 8091 	beq.w	800b45e <HAL_TIM_ConfigClockSource+0x1ae>
 800b33c:	4a58      	ldr	r2, [pc, #352]	@ (800b4a0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	f200 8096 	bhi.w	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
 800b344:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b348:	f000 8089 	beq.w	800b45e <HAL_TIM_ConfigClockSource+0x1ae>
 800b34c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b350:	f200 808e 	bhi.w	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
 800b354:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b358:	d03e      	beq.n	800b3d8 <HAL_TIM_ConfigClockSource+0x128>
 800b35a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b35e:	f200 8087 	bhi.w	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
 800b362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b366:	f000 8086 	beq.w	800b476 <HAL_TIM_ConfigClockSource+0x1c6>
 800b36a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b36e:	d87f      	bhi.n	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
 800b370:	2b70      	cmp	r3, #112	@ 0x70
 800b372:	d01a      	beq.n	800b3aa <HAL_TIM_ConfigClockSource+0xfa>
 800b374:	2b70      	cmp	r3, #112	@ 0x70
 800b376:	d87b      	bhi.n	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
 800b378:	2b60      	cmp	r3, #96	@ 0x60
 800b37a:	d050      	beq.n	800b41e <HAL_TIM_ConfigClockSource+0x16e>
 800b37c:	2b60      	cmp	r3, #96	@ 0x60
 800b37e:	d877      	bhi.n	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
 800b380:	2b50      	cmp	r3, #80	@ 0x50
 800b382:	d03c      	beq.n	800b3fe <HAL_TIM_ConfigClockSource+0x14e>
 800b384:	2b50      	cmp	r3, #80	@ 0x50
 800b386:	d873      	bhi.n	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
 800b388:	2b40      	cmp	r3, #64	@ 0x40
 800b38a:	d058      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x18e>
 800b38c:	2b40      	cmp	r3, #64	@ 0x40
 800b38e:	d86f      	bhi.n	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
 800b390:	2b30      	cmp	r3, #48	@ 0x30
 800b392:	d064      	beq.n	800b45e <HAL_TIM_ConfigClockSource+0x1ae>
 800b394:	2b30      	cmp	r3, #48	@ 0x30
 800b396:	d86b      	bhi.n	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
 800b398:	2b20      	cmp	r3, #32
 800b39a:	d060      	beq.n	800b45e <HAL_TIM_ConfigClockSource+0x1ae>
 800b39c:	2b20      	cmp	r3, #32
 800b39e:	d867      	bhi.n	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d05c      	beq.n	800b45e <HAL_TIM_ConfigClockSource+0x1ae>
 800b3a4:	2b10      	cmp	r3, #16
 800b3a6:	d05a      	beq.n	800b45e <HAL_TIM_ConfigClockSource+0x1ae>
 800b3a8:	e062      	b.n	800b470 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b3ba:	f000 fe3b 	bl	800c034 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b3cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	609a      	str	r2, [r3, #8]
      break;
 800b3d6:	e04f      	b.n	800b478 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b3e8:	f000 fe24 	bl	800c034 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	689a      	ldr	r2, [r3, #8]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b3fa:	609a      	str	r2, [r3, #8]
      break;
 800b3fc:	e03c      	b.n	800b478 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b40a:	461a      	mov	r2, r3
 800b40c:	f000 fd96 	bl	800bf3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2150      	movs	r1, #80	@ 0x50
 800b416:	4618      	mov	r0, r3
 800b418:	f000 fdef 	bl	800bffa <TIM_ITRx_SetConfig>
      break;
 800b41c:	e02c      	b.n	800b478 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b42a:	461a      	mov	r2, r3
 800b42c:	f000 fdb5 	bl	800bf9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2160      	movs	r1, #96	@ 0x60
 800b436:	4618      	mov	r0, r3
 800b438:	f000 fddf 	bl	800bffa <TIM_ITRx_SetConfig>
      break;
 800b43c:	e01c      	b.n	800b478 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b44a:	461a      	mov	r2, r3
 800b44c:	f000 fd76 	bl	800bf3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2140      	movs	r1, #64	@ 0x40
 800b456:	4618      	mov	r0, r3
 800b458:	f000 fdcf 	bl	800bffa <TIM_ITRx_SetConfig>
      break;
 800b45c:	e00c      	b.n	800b478 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4619      	mov	r1, r3
 800b468:	4610      	mov	r0, r2
 800b46a:	f000 fdc6 	bl	800bffa <TIM_ITRx_SetConfig>
      break;
 800b46e:	e003      	b.n	800b478 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	73fb      	strb	r3, [r7, #15]
      break;
 800b474:	e000      	b.n	800b478 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800b476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b488:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	00100070 	.word	0x00100070
 800b498:	00100040 	.word	0x00100040
 800b49c:	00100030 	.word	0x00100030
 800b4a0:	00100020 	.word	0x00100020

0800b4a4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b558:	b480      	push	{r7}
 800b55a:	b087      	sub	sp, #28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	460b      	mov	r3, r1
 800b562:	607a      	str	r2, [r7, #4]
 800b564:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d101      	bne.n	800b574 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	e14a      	b.n	800b80a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	f040 80dd 	bne.w	800b73c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800b582:	7afb      	ldrb	r3, [r7, #11]
 800b584:	2b1f      	cmp	r3, #31
 800b586:	f200 80d6 	bhi.w	800b736 <HAL_TIM_RegisterCallback+0x1de>
 800b58a:	a201      	add	r2, pc, #4	@ (adr r2, 800b590 <HAL_TIM_RegisterCallback+0x38>)
 800b58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b590:	0800b611 	.word	0x0800b611
 800b594:	0800b619 	.word	0x0800b619
 800b598:	0800b621 	.word	0x0800b621
 800b59c:	0800b629 	.word	0x0800b629
 800b5a0:	0800b631 	.word	0x0800b631
 800b5a4:	0800b639 	.word	0x0800b639
 800b5a8:	0800b641 	.word	0x0800b641
 800b5ac:	0800b649 	.word	0x0800b649
 800b5b0:	0800b651 	.word	0x0800b651
 800b5b4:	0800b659 	.word	0x0800b659
 800b5b8:	0800b661 	.word	0x0800b661
 800b5bc:	0800b669 	.word	0x0800b669
 800b5c0:	0800b671 	.word	0x0800b671
 800b5c4:	0800b679 	.word	0x0800b679
 800b5c8:	0800b683 	.word	0x0800b683
 800b5cc:	0800b68d 	.word	0x0800b68d
 800b5d0:	0800b697 	.word	0x0800b697
 800b5d4:	0800b6a1 	.word	0x0800b6a1
 800b5d8:	0800b6ab 	.word	0x0800b6ab
 800b5dc:	0800b6b5 	.word	0x0800b6b5
 800b5e0:	0800b6bf 	.word	0x0800b6bf
 800b5e4:	0800b6c9 	.word	0x0800b6c9
 800b5e8:	0800b6d3 	.word	0x0800b6d3
 800b5ec:	0800b6dd 	.word	0x0800b6dd
 800b5f0:	0800b6e7 	.word	0x0800b6e7
 800b5f4:	0800b6f1 	.word	0x0800b6f1
 800b5f8:	0800b6fb 	.word	0x0800b6fb
 800b5fc:	0800b705 	.word	0x0800b705
 800b600:	0800b70f 	.word	0x0800b70f
 800b604:	0800b719 	.word	0x0800b719
 800b608:	0800b723 	.word	0x0800b723
 800b60c:	0800b72d 	.word	0x0800b72d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b616:	e0f7      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b61e:	e0f3      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b626:	e0ef      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b62e:	e0eb      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b636:	e0e7      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b63e:	e0e3      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b646:	e0df      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b64e:	e0db      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b656:	e0d7      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b65e:	e0d3      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b666:	e0cf      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b66e:	e0cb      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b676:	e0c7      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b680:	e0c2      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b68a:	e0bd      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800b694:	e0b8      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800b69e:	e0b3      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800b6a8:	e0ae      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b6b2:	e0a9      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b6bc:	e0a4      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b6c6:	e09f      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b6d0:	e09a      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b6da:	e095      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b6e4:	e090      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b6ee:	e08b      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b6f8:	e086      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b702:	e081      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b70c:	e07c      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b716:	e077      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800b720:	e072      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b72a:	e06d      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b734:	e068      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	75fb      	strb	r3, [r7, #23]
        break;
 800b73a:	e065      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b00      	cmp	r3, #0
 800b746:	d15d      	bne.n	800b804 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800b748:	7afb      	ldrb	r3, [r7, #11]
 800b74a:	2b0d      	cmp	r3, #13
 800b74c:	d857      	bhi.n	800b7fe <HAL_TIM_RegisterCallback+0x2a6>
 800b74e:	a201      	add	r2, pc, #4	@ (adr r2, 800b754 <HAL_TIM_RegisterCallback+0x1fc>)
 800b750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b754:	0800b78d 	.word	0x0800b78d
 800b758:	0800b795 	.word	0x0800b795
 800b75c:	0800b79d 	.word	0x0800b79d
 800b760:	0800b7a5 	.word	0x0800b7a5
 800b764:	0800b7ad 	.word	0x0800b7ad
 800b768:	0800b7b5 	.word	0x0800b7b5
 800b76c:	0800b7bd 	.word	0x0800b7bd
 800b770:	0800b7c5 	.word	0x0800b7c5
 800b774:	0800b7cd 	.word	0x0800b7cd
 800b778:	0800b7d5 	.word	0x0800b7d5
 800b77c:	0800b7dd 	.word	0x0800b7dd
 800b780:	0800b7e5 	.word	0x0800b7e5
 800b784:	0800b7ed 	.word	0x0800b7ed
 800b788:	0800b7f5 	.word	0x0800b7f5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b792:	e039      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b79a:	e035      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b7a2:	e031      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b7aa:	e02d      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b7b2:	e029      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b7ba:	e025      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b7c2:	e021      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b7ca:	e01d      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b7d2:	e019      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b7da:	e015      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b7e2:	e011      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b7ea:	e00d      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b7f2:	e009      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b7fc:	e004      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	75fb      	strb	r3, [r7, #23]
        break;
 800b802:	e001      	b.n	800b808 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b804:	2301      	movs	r3, #1
 800b806:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b808:	7dfb      	ldrb	r3, [r7, #23]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	371c      	adds	r7, #28
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop

0800b818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a42      	ldr	r2, [pc, #264]	@ (800b934 <TIM_Base_SetConfig+0x11c>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00f      	beq.n	800b850 <TIM_Base_SetConfig+0x38>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b836:	d00b      	beq.n	800b850 <TIM_Base_SetConfig+0x38>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a3f      	ldr	r2, [pc, #252]	@ (800b938 <TIM_Base_SetConfig+0x120>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d007      	beq.n	800b850 <TIM_Base_SetConfig+0x38>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a3e      	ldr	r2, [pc, #248]	@ (800b93c <TIM_Base_SetConfig+0x124>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d003      	beq.n	800b850 <TIM_Base_SetConfig+0x38>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a3d      	ldr	r2, [pc, #244]	@ (800b940 <TIM_Base_SetConfig+0x128>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d108      	bne.n	800b862 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	4313      	orrs	r3, r2
 800b860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a33      	ldr	r2, [pc, #204]	@ (800b934 <TIM_Base_SetConfig+0x11c>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d01b      	beq.n	800b8a2 <TIM_Base_SetConfig+0x8a>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b870:	d017      	beq.n	800b8a2 <TIM_Base_SetConfig+0x8a>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a30      	ldr	r2, [pc, #192]	@ (800b938 <TIM_Base_SetConfig+0x120>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d013      	beq.n	800b8a2 <TIM_Base_SetConfig+0x8a>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4a2f      	ldr	r2, [pc, #188]	@ (800b93c <TIM_Base_SetConfig+0x124>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d00f      	beq.n	800b8a2 <TIM_Base_SetConfig+0x8a>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4a2e      	ldr	r2, [pc, #184]	@ (800b940 <TIM_Base_SetConfig+0x128>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d00b      	beq.n	800b8a2 <TIM_Base_SetConfig+0x8a>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4a2d      	ldr	r2, [pc, #180]	@ (800b944 <TIM_Base_SetConfig+0x12c>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d007      	beq.n	800b8a2 <TIM_Base_SetConfig+0x8a>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4a2c      	ldr	r2, [pc, #176]	@ (800b948 <TIM_Base_SetConfig+0x130>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d003      	beq.n	800b8a2 <TIM_Base_SetConfig+0x8a>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4a2b      	ldr	r2, [pc, #172]	@ (800b94c <TIM_Base_SetConfig+0x134>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d108      	bne.n	800b8b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	695b      	ldr	r3, [r3, #20]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	689a      	ldr	r2, [r3, #8]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a16      	ldr	r2, [pc, #88]	@ (800b934 <TIM_Base_SetConfig+0x11c>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d00f      	beq.n	800b900 <TIM_Base_SetConfig+0xe8>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a17      	ldr	r2, [pc, #92]	@ (800b940 <TIM_Base_SetConfig+0x128>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d00b      	beq.n	800b900 <TIM_Base_SetConfig+0xe8>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a16      	ldr	r2, [pc, #88]	@ (800b944 <TIM_Base_SetConfig+0x12c>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d007      	beq.n	800b900 <TIM_Base_SetConfig+0xe8>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a15      	ldr	r2, [pc, #84]	@ (800b948 <TIM_Base_SetConfig+0x130>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d003      	beq.n	800b900 <TIM_Base_SetConfig+0xe8>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a14      	ldr	r2, [pc, #80]	@ (800b94c <TIM_Base_SetConfig+0x134>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d103      	bne.n	800b908 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	691a      	ldr	r2, [r3, #16]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	f003 0301 	and.w	r3, r3, #1
 800b916:	2b01      	cmp	r3, #1
 800b918:	d105      	bne.n	800b926 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	f023 0201 	bic.w	r2, r3, #1
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	611a      	str	r2, [r3, #16]
  }
}
 800b926:	bf00      	nop
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	40012c00 	.word	0x40012c00
 800b938:	40000400 	.word	0x40000400
 800b93c:	40000800 	.word	0x40000800
 800b940:	40013400 	.word	0x40013400
 800b944:	40014000 	.word	0x40014000
 800b948:	40014400 	.word	0x40014400
 800b94c:	40014800 	.word	0x40014800

0800b950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b950:	b480      	push	{r7}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6a1b      	ldr	r3, [r3, #32]
 800b964:	f023 0201 	bic.w	r2, r3, #1
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b97e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f023 0303 	bic.w	r3, r3, #3
 800b98a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	4313      	orrs	r3, r2
 800b994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f023 0302 	bic.w	r3, r3, #2
 800b99c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a2c      	ldr	r2, [pc, #176]	@ (800ba5c <TIM_OC1_SetConfig+0x10c>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d00f      	beq.n	800b9d0 <TIM_OC1_SetConfig+0x80>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	4a2b      	ldr	r2, [pc, #172]	@ (800ba60 <TIM_OC1_SetConfig+0x110>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d00b      	beq.n	800b9d0 <TIM_OC1_SetConfig+0x80>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a2a      	ldr	r2, [pc, #168]	@ (800ba64 <TIM_OC1_SetConfig+0x114>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d007      	beq.n	800b9d0 <TIM_OC1_SetConfig+0x80>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a29      	ldr	r2, [pc, #164]	@ (800ba68 <TIM_OC1_SetConfig+0x118>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d003      	beq.n	800b9d0 <TIM_OC1_SetConfig+0x80>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a28      	ldr	r2, [pc, #160]	@ (800ba6c <TIM_OC1_SetConfig+0x11c>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d10c      	bne.n	800b9ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	f023 0308 	bic.w	r3, r3, #8
 800b9d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	697a      	ldr	r2, [r7, #20]
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f023 0304 	bic.w	r3, r3, #4
 800b9e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a1b      	ldr	r2, [pc, #108]	@ (800ba5c <TIM_OC1_SetConfig+0x10c>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d00f      	beq.n	800ba12 <TIM_OC1_SetConfig+0xc2>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a1a      	ldr	r2, [pc, #104]	@ (800ba60 <TIM_OC1_SetConfig+0x110>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d00b      	beq.n	800ba12 <TIM_OC1_SetConfig+0xc2>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a19      	ldr	r2, [pc, #100]	@ (800ba64 <TIM_OC1_SetConfig+0x114>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d007      	beq.n	800ba12 <TIM_OC1_SetConfig+0xc2>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a18      	ldr	r2, [pc, #96]	@ (800ba68 <TIM_OC1_SetConfig+0x118>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d003      	beq.n	800ba12 <TIM_OC1_SetConfig+0xc2>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a17      	ldr	r2, [pc, #92]	@ (800ba6c <TIM_OC1_SetConfig+0x11c>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d111      	bne.n	800ba36 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	685a      	ldr	r2, [r3, #4]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	697a      	ldr	r2, [r7, #20]
 800ba4e:	621a      	str	r2, [r3, #32]
}
 800ba50:	bf00      	nop
 800ba52:	371c      	adds	r7, #28
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr
 800ba5c:	40012c00 	.word	0x40012c00
 800ba60:	40013400 	.word	0x40013400
 800ba64:	40014000 	.word	0x40014000
 800ba68:	40014400 	.word	0x40014400
 800ba6c:	40014800 	.word	0x40014800

0800ba70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b087      	sub	sp, #28
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a1b      	ldr	r3, [r3, #32]
 800ba7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6a1b      	ldr	r3, [r3, #32]
 800ba84:	f023 0210 	bic.w	r2, r3, #16
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	699b      	ldr	r3, [r3, #24]
 800ba96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800baa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800baaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	021b      	lsls	r3, r3, #8
 800bab2:	68fa      	ldr	r2, [r7, #12]
 800bab4:	4313      	orrs	r3, r2
 800bab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f023 0320 	bic.w	r3, r3, #32
 800babe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	011b      	lsls	r3, r3, #4
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	4313      	orrs	r3, r2
 800baca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a28      	ldr	r2, [pc, #160]	@ (800bb70 <TIM_OC2_SetConfig+0x100>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d003      	beq.n	800badc <TIM_OC2_SetConfig+0x6c>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a27      	ldr	r2, [pc, #156]	@ (800bb74 <TIM_OC2_SetConfig+0x104>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d10d      	bne.n	800baf8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	011b      	lsls	r3, r3, #4
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	4313      	orrs	r3, r2
 800baee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800baf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a1d      	ldr	r2, [pc, #116]	@ (800bb70 <TIM_OC2_SetConfig+0x100>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d00f      	beq.n	800bb20 <TIM_OC2_SetConfig+0xb0>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a1c      	ldr	r2, [pc, #112]	@ (800bb74 <TIM_OC2_SetConfig+0x104>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d00b      	beq.n	800bb20 <TIM_OC2_SetConfig+0xb0>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a1b      	ldr	r2, [pc, #108]	@ (800bb78 <TIM_OC2_SetConfig+0x108>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d007      	beq.n	800bb20 <TIM_OC2_SetConfig+0xb0>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a1a      	ldr	r2, [pc, #104]	@ (800bb7c <TIM_OC2_SetConfig+0x10c>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d003      	beq.n	800bb20 <TIM_OC2_SetConfig+0xb0>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a19      	ldr	r2, [pc, #100]	@ (800bb80 <TIM_OC2_SetConfig+0x110>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d113      	bne.n	800bb48 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bb2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	699b      	ldr	r3, [r3, #24]
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	693a      	ldr	r2, [r7, #16]
 800bb44:	4313      	orrs	r3, r2
 800bb46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	693a      	ldr	r2, [r7, #16]
 800bb4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	685a      	ldr	r2, [r3, #4]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	621a      	str	r2, [r3, #32]
}
 800bb62:	bf00      	nop
 800bb64:	371c      	adds	r7, #28
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	40012c00 	.word	0x40012c00
 800bb74:	40013400 	.word	0x40013400
 800bb78:	40014000 	.word	0x40014000
 800bb7c:	40014400 	.word	0x40014400
 800bb80:	40014800 	.word	0x40014800

0800bb84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b087      	sub	sp, #28
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a1b      	ldr	r3, [r3, #32]
 800bb92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6a1b      	ldr	r3, [r3, #32]
 800bb98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	69db      	ldr	r3, [r3, #28]
 800bbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f023 0303 	bic.w	r3, r3, #3
 800bbbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bbd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	021b      	lsls	r3, r3, #8
 800bbd8:	697a      	ldr	r2, [r7, #20]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a27      	ldr	r2, [pc, #156]	@ (800bc80 <TIM_OC3_SetConfig+0xfc>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d003      	beq.n	800bbee <TIM_OC3_SetConfig+0x6a>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a26      	ldr	r2, [pc, #152]	@ (800bc84 <TIM_OC3_SetConfig+0x100>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d10d      	bne.n	800bc0a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bbf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	021b      	lsls	r3, r3, #8
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bc08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4a1c      	ldr	r2, [pc, #112]	@ (800bc80 <TIM_OC3_SetConfig+0xfc>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d00f      	beq.n	800bc32 <TIM_OC3_SetConfig+0xae>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	4a1b      	ldr	r2, [pc, #108]	@ (800bc84 <TIM_OC3_SetConfig+0x100>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d00b      	beq.n	800bc32 <TIM_OC3_SetConfig+0xae>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4a1a      	ldr	r2, [pc, #104]	@ (800bc88 <TIM_OC3_SetConfig+0x104>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d007      	beq.n	800bc32 <TIM_OC3_SetConfig+0xae>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4a19      	ldr	r2, [pc, #100]	@ (800bc8c <TIM_OC3_SetConfig+0x108>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d003      	beq.n	800bc32 <TIM_OC3_SetConfig+0xae>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4a18      	ldr	r2, [pc, #96]	@ (800bc90 <TIM_OC3_SetConfig+0x10c>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d113      	bne.n	800bc5a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bc40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	695b      	ldr	r3, [r3, #20]
 800bc46:	011b      	lsls	r3, r3, #4
 800bc48:	693a      	ldr	r2, [r7, #16]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	699b      	ldr	r3, [r3, #24]
 800bc52:	011b      	lsls	r3, r3, #4
 800bc54:	693a      	ldr	r2, [r7, #16]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	697a      	ldr	r2, [r7, #20]
 800bc72:	621a      	str	r2, [r3, #32]
}
 800bc74:	bf00      	nop
 800bc76:	371c      	adds	r7, #28
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	40012c00 	.word	0x40012c00
 800bc84:	40013400 	.word	0x40013400
 800bc88:	40014000 	.word	0x40014000
 800bc8c:	40014400 	.word	0x40014400
 800bc90:	40014800 	.word	0x40014800

0800bc94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b087      	sub	sp, #28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a1b      	ldr	r3, [r3, #32]
 800bca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a1b      	ldr	r3, [r3, #32]
 800bca8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	69db      	ldr	r3, [r3, #28]
 800bcba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bcc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	021b      	lsls	r3, r3, #8
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	031b      	lsls	r3, r3, #12
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	4313      	orrs	r3, r2
 800bcee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a28      	ldr	r2, [pc, #160]	@ (800bd94 <TIM_OC4_SetConfig+0x100>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d003      	beq.n	800bd00 <TIM_OC4_SetConfig+0x6c>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a27      	ldr	r2, [pc, #156]	@ (800bd98 <TIM_OC4_SetConfig+0x104>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d10d      	bne.n	800bd1c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bd06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	031b      	lsls	r3, r3, #12
 800bd0e:	697a      	ldr	r2, [r7, #20]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bd1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a1d      	ldr	r2, [pc, #116]	@ (800bd94 <TIM_OC4_SetConfig+0x100>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d00f      	beq.n	800bd44 <TIM_OC4_SetConfig+0xb0>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a1c      	ldr	r2, [pc, #112]	@ (800bd98 <TIM_OC4_SetConfig+0x104>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d00b      	beq.n	800bd44 <TIM_OC4_SetConfig+0xb0>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a1b      	ldr	r2, [pc, #108]	@ (800bd9c <TIM_OC4_SetConfig+0x108>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d007      	beq.n	800bd44 <TIM_OC4_SetConfig+0xb0>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a1a      	ldr	r2, [pc, #104]	@ (800bda0 <TIM_OC4_SetConfig+0x10c>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d003      	beq.n	800bd44 <TIM_OC4_SetConfig+0xb0>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4a19      	ldr	r2, [pc, #100]	@ (800bda4 <TIM_OC4_SetConfig+0x110>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d113      	bne.n	800bd6c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bd4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bd52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	695b      	ldr	r3, [r3, #20]
 800bd58:	019b      	lsls	r3, r3, #6
 800bd5a:	693a      	ldr	r2, [r7, #16]
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	019b      	lsls	r3, r3, #6
 800bd66:	693a      	ldr	r2, [r7, #16]
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	693a      	ldr	r2, [r7, #16]
 800bd70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	621a      	str	r2, [r3, #32]
}
 800bd86:	bf00      	nop
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	40012c00 	.word	0x40012c00
 800bd98:	40013400 	.word	0x40013400
 800bd9c:	40014000 	.word	0x40014000
 800bda0:	40014400 	.word	0x40014400
 800bda4:	40014800 	.word	0x40014800

0800bda8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b087      	sub	sp, #28
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a1b      	ldr	r3, [r3, #32]
 800bdb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a1b      	ldr	r3, [r3, #32]
 800bdbc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bdd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bdec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	041b      	lsls	r3, r3, #16
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4a17      	ldr	r2, [pc, #92]	@ (800be5c <TIM_OC5_SetConfig+0xb4>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d00f      	beq.n	800be22 <TIM_OC5_SetConfig+0x7a>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4a16      	ldr	r2, [pc, #88]	@ (800be60 <TIM_OC5_SetConfig+0xb8>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d00b      	beq.n	800be22 <TIM_OC5_SetConfig+0x7a>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4a15      	ldr	r2, [pc, #84]	@ (800be64 <TIM_OC5_SetConfig+0xbc>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d007      	beq.n	800be22 <TIM_OC5_SetConfig+0x7a>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4a14      	ldr	r2, [pc, #80]	@ (800be68 <TIM_OC5_SetConfig+0xc0>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d003      	beq.n	800be22 <TIM_OC5_SetConfig+0x7a>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4a13      	ldr	r2, [pc, #76]	@ (800be6c <TIM_OC5_SetConfig+0xc4>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d109      	bne.n	800be36 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	695b      	ldr	r3, [r3, #20]
 800be2e:	021b      	lsls	r3, r3, #8
 800be30:	697a      	ldr	r2, [r7, #20]
 800be32:	4313      	orrs	r3, r2
 800be34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	697a      	ldr	r2, [r7, #20]
 800be3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	685a      	ldr	r2, [r3, #4]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	621a      	str	r2, [r3, #32]
}
 800be50:	bf00      	nop
 800be52:	371c      	adds	r7, #28
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	40012c00 	.word	0x40012c00
 800be60:	40013400 	.word	0x40013400
 800be64:	40014000 	.word	0x40014000
 800be68:	40014400 	.word	0x40014400
 800be6c:	40014800 	.word	0x40014800

0800be70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be70:	b480      	push	{r7}
 800be72:	b087      	sub	sp, #28
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a1b      	ldr	r3, [r3, #32]
 800be84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800be9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	021b      	lsls	r3, r3, #8
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	4313      	orrs	r3, r2
 800beae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800beb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	051b      	lsls	r3, r3, #20
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a18      	ldr	r2, [pc, #96]	@ (800bf28 <TIM_OC6_SetConfig+0xb8>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d00f      	beq.n	800beec <TIM_OC6_SetConfig+0x7c>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4a17      	ldr	r2, [pc, #92]	@ (800bf2c <TIM_OC6_SetConfig+0xbc>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d00b      	beq.n	800beec <TIM_OC6_SetConfig+0x7c>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	4a16      	ldr	r2, [pc, #88]	@ (800bf30 <TIM_OC6_SetConfig+0xc0>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d007      	beq.n	800beec <TIM_OC6_SetConfig+0x7c>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a15      	ldr	r2, [pc, #84]	@ (800bf34 <TIM_OC6_SetConfig+0xc4>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d003      	beq.n	800beec <TIM_OC6_SetConfig+0x7c>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a14      	ldr	r2, [pc, #80]	@ (800bf38 <TIM_OC6_SetConfig+0xc8>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d109      	bne.n	800bf00 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bef2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	695b      	ldr	r3, [r3, #20]
 800bef8:	029b      	lsls	r3, r3, #10
 800befa:	697a      	ldr	r2, [r7, #20]
 800befc:	4313      	orrs	r3, r2
 800befe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	697a      	ldr	r2, [r7, #20]
 800bf04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	685a      	ldr	r2, [r3, #4]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	621a      	str	r2, [r3, #32]
}
 800bf1a:	bf00      	nop
 800bf1c:	371c      	adds	r7, #28
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	40012c00 	.word	0x40012c00
 800bf2c:	40013400 	.word	0x40013400
 800bf30:	40014000 	.word	0x40014000
 800bf34:	40014400 	.word	0x40014400
 800bf38:	40014800 	.word	0x40014800

0800bf3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b087      	sub	sp, #28
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6a1b      	ldr	r3, [r3, #32]
 800bf4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6a1b      	ldr	r3, [r3, #32]
 800bf52:	f023 0201 	bic.w	r2, r3, #1
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	699b      	ldr	r3, [r3, #24]
 800bf5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bf66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	011b      	lsls	r3, r3, #4
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	f023 030a 	bic.w	r3, r3, #10
 800bf78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf7a:	697a      	ldr	r2, [r7, #20]
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	693a      	ldr	r2, [r7, #16]
 800bf86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	621a      	str	r2, [r3, #32]
}
 800bf8e:	bf00      	nop
 800bf90:	371c      	adds	r7, #28
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b087      	sub	sp, #28
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	60f8      	str	r0, [r7, #12]
 800bfa2:	60b9      	str	r1, [r7, #8]
 800bfa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6a1b      	ldr	r3, [r3, #32]
 800bfaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6a1b      	ldr	r3, [r3, #32]
 800bfb0:	f023 0210 	bic.w	r2, r3, #16
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bfc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	031b      	lsls	r3, r3, #12
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bfd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	011b      	lsls	r3, r3, #4
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	693a      	ldr	r2, [r7, #16]
 800bfe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	621a      	str	r2, [r3, #32]
}
 800bfee:	bf00      	nop
 800bff0:	371c      	adds	r7, #28
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr

0800bffa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bffa:	b480      	push	{r7}
 800bffc:	b085      	sub	sp, #20
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	f043 0307 	orr.w	r3, r3, #7
 800c020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	609a      	str	r2, [r3, #8]
}
 800c028:	bf00      	nop
 800c02a:	3714      	adds	r7, #20
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c034:	b480      	push	{r7}
 800c036:	b087      	sub	sp, #28
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
 800c040:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c04e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	021a      	lsls	r2, r3, #8
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	431a      	orrs	r2, r3
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	697a      	ldr	r2, [r7, #20]
 800c05e:	4313      	orrs	r3, r2
 800c060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	697a      	ldr	r2, [r7, #20]
 800c066:	609a      	str	r2, [r3, #8]
}
 800c068:	bf00      	nop
 800c06a:	371c      	adds	r7, #28
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c074:	b480      	push	{r7}
 800c076:	b087      	sub	sp, #28
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	f003 031f 	and.w	r3, r3, #31
 800c086:	2201      	movs	r2, #1
 800c088:	fa02 f303 	lsl.w	r3, r2, r3
 800c08c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6a1a      	ldr	r2, [r3, #32]
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	43db      	mvns	r3, r3
 800c096:	401a      	ands	r2, r3
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6a1a      	ldr	r2, [r3, #32]
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	f003 031f 	and.w	r3, r3, #31
 800c0a6:	6879      	ldr	r1, [r7, #4]
 800c0a8:	fa01 f303 	lsl.w	r3, r1, r3
 800c0ac:	431a      	orrs	r2, r3
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	621a      	str	r2, [r3, #32]
}
 800c0b2:	bf00      	nop
 800c0b4:	371c      	adds	r7, #28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
	...

0800c0c0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a26      	ldr	r2, [pc, #152]	@ (800c164 <TIM_ResetCallback+0xa4>)
 800c0cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4a25      	ldr	r2, [pc, #148]	@ (800c168 <TIM_ResetCallback+0xa8>)
 800c0d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a24      	ldr	r2, [pc, #144]	@ (800c16c <TIM_ResetCallback+0xac>)
 800c0dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a23      	ldr	r2, [pc, #140]	@ (800c170 <TIM_ResetCallback+0xb0>)
 800c0e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a22      	ldr	r2, [pc, #136]	@ (800c174 <TIM_ResetCallback+0xb4>)
 800c0ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a21      	ldr	r2, [pc, #132]	@ (800c178 <TIM_ResetCallback+0xb8>)
 800c0f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a20      	ldr	r2, [pc, #128]	@ (800c17c <TIM_ResetCallback+0xbc>)
 800c0fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a1f      	ldr	r2, [pc, #124]	@ (800c180 <TIM_ResetCallback+0xc0>)
 800c104:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a1e      	ldr	r2, [pc, #120]	@ (800c184 <TIM_ResetCallback+0xc4>)
 800c10c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4a1d      	ldr	r2, [pc, #116]	@ (800c188 <TIM_ResetCallback+0xc8>)
 800c114:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4a1c      	ldr	r2, [pc, #112]	@ (800c18c <TIM_ResetCallback+0xcc>)
 800c11c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a1b      	ldr	r2, [pc, #108]	@ (800c190 <TIM_ResetCallback+0xd0>)
 800c124:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4a1a      	ldr	r2, [pc, #104]	@ (800c194 <TIM_ResetCallback+0xd4>)
 800c12c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a19      	ldr	r2, [pc, #100]	@ (800c198 <TIM_ResetCallback+0xd8>)
 800c134:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a18      	ldr	r2, [pc, #96]	@ (800c19c <TIM_ResetCallback+0xdc>)
 800c13c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	4a17      	ldr	r2, [pc, #92]	@ (800c1a0 <TIM_ResetCallback+0xe0>)
 800c144:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a16      	ldr	r2, [pc, #88]	@ (800c1a4 <TIM_ResetCallback+0xe4>)
 800c14c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a15      	ldr	r2, [pc, #84]	@ (800c1a8 <TIM_ResetCallback+0xe8>)
 800c154:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr
 800c164:	08003f11 	.word	0x08003f11
 800c168:	0800b4a5 	.word	0x0800b4a5
 800c16c:	0800b51d 	.word	0x0800b51d
 800c170:	0800b531 	.word	0x0800b531
 800c174:	0800b4cd 	.word	0x0800b4cd
 800c178:	0800b4e1 	.word	0x0800b4e1
 800c17c:	0800b4b9 	.word	0x0800b4b9
 800c180:	0800b4f5 	.word	0x0800b4f5
 800c184:	0800b509 	.word	0x0800b509
 800c188:	0800b545 	.word	0x0800b545
 800c18c:	0800c2b1 	.word	0x0800c2b1
 800c190:	0800c2c5 	.word	0x0800c2c5
 800c194:	0800c2d9 	.word	0x0800c2d9
 800c198:	0800c2ed 	.word	0x0800c2ed
 800c19c:	0800c301 	.word	0x0800c301
 800c1a0:	0800c315 	.word	0x0800c315
 800c1a4:	0800c329 	.word	0x0800c329
 800c1a8:	0800c33d 	.word	0x0800c33d

0800c1ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d101      	bne.n	800c1c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1c0:	2302      	movs	r3, #2
 800c1c2:	e065      	b.n	800c290 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a2c      	ldr	r2, [pc, #176]	@ (800c29c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d004      	beq.n	800c1f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a2b      	ldr	r2, [pc, #172]	@ (800c2a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d108      	bne.n	800c20a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c1fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	4313      	orrs	r3, r2
 800c208:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c214:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68fa      	ldr	r2, [r7, #12]
 800c226:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a1b      	ldr	r2, [pc, #108]	@ (800c29c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d018      	beq.n	800c264 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c23a:	d013      	beq.n	800c264 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a18      	ldr	r2, [pc, #96]	@ (800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d00e      	beq.n	800c264 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a17      	ldr	r2, [pc, #92]	@ (800c2a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d009      	beq.n	800c264 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a12      	ldr	r2, [pc, #72]	@ (800c2a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d004      	beq.n	800c264 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a13      	ldr	r2, [pc, #76]	@ (800c2ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d10c      	bne.n	800c27e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c26a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	4313      	orrs	r3, r2
 800c274:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68ba      	ldr	r2, [r7, #8]
 800c27c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2201      	movs	r2, #1
 800c282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3714      	adds	r7, #20
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	40012c00 	.word	0x40012c00
 800c2a0:	40013400 	.word	0x40013400
 800c2a4:	40000400 	.word	0x40000400
 800c2a8:	40000800 	.word	0x40000800
 800c2ac:	40014000 	.word	0x40014000

0800c2b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c2cc:	bf00      	nop
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2e0:	bf00      	nop
 800c2e2:	370c      	adds	r7, #12
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c2f4:	bf00      	nop
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c308:	bf00      	nop
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c344:	bf00      	nop
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	e042      	b.n	800c3e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d106      	bne.n	800c37a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f7f8 fdd3 	bl	8004f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2224      	movs	r2, #36	@ 0x24
 800c37e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f022 0201 	bic.w	r2, r2, #1
 800c390:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f001 f962 	bl	800d664 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fe93 	bl	800d0cc <UART_SetConfig>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d101      	bne.n	800c3b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e01b      	b.n	800c3e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	685a      	ldr	r2, [r3, #4]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c3be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	689a      	ldr	r2, [r3, #8]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c3ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f042 0201 	orr.w	r2, r2, #1
 800c3de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f001 f9e1 	bl	800d7a8 <UART_CheckIdleState>
 800c3e6:	4603      	mov	r3, r0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b08a      	sub	sp, #40	@ 0x28
 800c3f4:	af02      	add	r7, sp, #8
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	603b      	str	r3, [r7, #0]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c406:	2b20      	cmp	r3, #32
 800c408:	d17b      	bne.n	800c502 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <HAL_UART_Transmit+0x26>
 800c410:	88fb      	ldrh	r3, [r7, #6]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	e074      	b.n	800c504 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2200      	movs	r2, #0
 800c41e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2221      	movs	r2, #33	@ 0x21
 800c426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c42a:	f7f9 fd69 	bl	8005f00 <HAL_GetTick>
 800c42e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	88fa      	ldrh	r2, [r7, #6]
 800c434:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	88fa      	ldrh	r2, [r7, #6]
 800c43c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c448:	d108      	bne.n	800c45c <HAL_UART_Transmit+0x6c>
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d104      	bne.n	800c45c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c452:	2300      	movs	r3, #0
 800c454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	61bb      	str	r3, [r7, #24]
 800c45a:	e003      	b.n	800c464 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c460:	2300      	movs	r3, #0
 800c462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c464:	e030      	b.n	800c4c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	9300      	str	r3, [sp, #0]
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	2200      	movs	r2, #0
 800c46e:	2180      	movs	r1, #128	@ 0x80
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f001 fa43 	bl	800d8fc <UART_WaitOnFlagUntilTimeout>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d005      	beq.n	800c488 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2220      	movs	r2, #32
 800c480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c484:	2303      	movs	r3, #3
 800c486:	e03d      	b.n	800c504 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10b      	bne.n	800c4a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	881b      	ldrh	r3, [r3, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c49c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	3302      	adds	r3, #2
 800c4a2:	61bb      	str	r3, [r7, #24]
 800c4a4:	e007      	b.n	800c4b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	781a      	ldrb	r2, [r3, #0]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	b29a      	uxth	r2, r3
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1c8      	bne.n	800c466 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	2140      	movs	r1, #64	@ 0x40
 800c4de:	68f8      	ldr	r0, [r7, #12]
 800c4e0:	f001 fa0c 	bl	800d8fc <UART_WaitOnFlagUntilTimeout>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d005      	beq.n	800c4f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2220      	movs	r2, #32
 800c4ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e006      	b.n	800c504 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2220      	movs	r2, #32
 800c4fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c4fe:	2300      	movs	r3, #0
 800c500:	e000      	b.n	800c504 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c502:	2302      	movs	r3, #2
  }
}
 800c504:	4618      	mov	r0, r3
 800c506:	3720      	adds	r7, #32
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b08a      	sub	sp, #40	@ 0x28
 800c510:	af02      	add	r7, sp, #8
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	60b9      	str	r1, [r7, #8]
 800c516:	603b      	str	r3, [r7, #0]
 800c518:	4613      	mov	r3, r2
 800c51a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c522:	2b20      	cmp	r3, #32
 800c524:	f040 80b5 	bne.w	800c692 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d002      	beq.n	800c534 <HAL_UART_Receive+0x28>
 800c52e:	88fb      	ldrh	r3, [r7, #6]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	e0ad      	b.n	800c694 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2222      	movs	r2, #34	@ 0x22
 800c544:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2200      	movs	r2, #0
 800c54c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c54e:	f7f9 fcd7 	bl	8005f00 <HAL_GetTick>
 800c552:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	88fa      	ldrh	r2, [r7, #6]
 800c558:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	88fa      	ldrh	r2, [r7, #6]
 800c560:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c56c:	d10e      	bne.n	800c58c <HAL_UART_Receive+0x80>
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d105      	bne.n	800c582 <HAL_UART_Receive+0x76>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c57c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c580:	e02d      	b.n	800c5de <HAL_UART_Receive+0xd2>
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	22ff      	movs	r2, #255	@ 0xff
 800c586:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c58a:	e028      	b.n	800c5de <HAL_UART_Receive+0xd2>
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10d      	bne.n	800c5b0 <HAL_UART_Receive+0xa4>
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	691b      	ldr	r3, [r3, #16]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d104      	bne.n	800c5a6 <HAL_UART_Receive+0x9a>
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	22ff      	movs	r2, #255	@ 0xff
 800c5a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c5a4:	e01b      	b.n	800c5de <HAL_UART_Receive+0xd2>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	227f      	movs	r2, #127	@ 0x7f
 800c5aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c5ae:	e016      	b.n	800c5de <HAL_UART_Receive+0xd2>
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5b8:	d10d      	bne.n	800c5d6 <HAL_UART_Receive+0xca>
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d104      	bne.n	800c5cc <HAL_UART_Receive+0xc0>
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	227f      	movs	r2, #127	@ 0x7f
 800c5c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c5ca:	e008      	b.n	800c5de <HAL_UART_Receive+0xd2>
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	223f      	movs	r2, #63	@ 0x3f
 800c5d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c5d4:	e003      	b.n	800c5de <HAL_UART_Receive+0xd2>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c5e4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5ee:	d108      	bne.n	800c602 <HAL_UART_Receive+0xf6>
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	691b      	ldr	r3, [r3, #16]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d104      	bne.n	800c602 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	61bb      	str	r3, [r7, #24]
 800c600:	e003      	b.n	800c60a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c606:	2300      	movs	r3, #0
 800c608:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c60a:	e036      	b.n	800c67a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	2200      	movs	r2, #0
 800c614:	2120      	movs	r1, #32
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f001 f970 	bl	800d8fc <UART_WaitOnFlagUntilTimeout>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d005      	beq.n	800c62e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2220      	movs	r2, #32
 800c626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800c62a:	2303      	movs	r3, #3
 800c62c:	e032      	b.n	800c694 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10c      	bne.n	800c64e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c63a:	b29a      	uxth	r2, r3
 800c63c:	8a7b      	ldrh	r3, [r7, #18]
 800c63e:	4013      	ands	r3, r2
 800c640:	b29a      	uxth	r2, r3
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	3302      	adds	r3, #2
 800c64a:	61bb      	str	r3, [r7, #24]
 800c64c:	e00c      	b.n	800c668 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c654:	b2da      	uxtb	r2, r3
 800c656:	8a7b      	ldrh	r3, [r7, #18]
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	4013      	ands	r3, r2
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	3301      	adds	r3, #1
 800c666:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c66e:	b29b      	uxth	r3, r3
 800c670:	3b01      	subs	r3, #1
 800c672:	b29a      	uxth	r2, r3
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c680:	b29b      	uxth	r3, r3
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1c2      	bne.n	800c60c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2220      	movs	r2, #32
 800c68a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800c68e:	2300      	movs	r3, #0
 800c690:	e000      	b.n	800c694 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800c692:	2302      	movs	r3, #2
  }
}
 800c694:	4618      	mov	r0, r3
 800c696:	3720      	adds	r7, #32
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b091      	sub	sp, #68	@ 0x44
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6b0:	2b20      	cmp	r3, #32
 800c6b2:	d178      	bne.n	800c7a6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d002      	beq.n	800c6c0 <HAL_UART_Transmit_IT+0x24>
 800c6ba:	88fb      	ldrh	r3, [r7, #6]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e071      	b.n	800c7a8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	88fa      	ldrh	r2, [r7, #6]
 800c6ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	88fa      	ldrh	r2, [r7, #6]
 800c6d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2221      	movs	r2, #33	@ 0x21
 800c6ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c6f8:	d12a      	bne.n	800c750 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c702:	d107      	bne.n	800c714 <HAL_UART_Transmit_IT+0x78>
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	691b      	ldr	r3, [r3, #16]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d103      	bne.n	800c714 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	4a29      	ldr	r2, [pc, #164]	@ (800c7b4 <HAL_UART_Transmit_IT+0x118>)
 800c710:	679a      	str	r2, [r3, #120]	@ 0x78
 800c712:	e002      	b.n	800c71a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	4a28      	ldr	r2, [pc, #160]	@ (800c7b8 <HAL_UART_Transmit_IT+0x11c>)
 800c718:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	3308      	adds	r3, #8
 800c720:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c724:	e853 3f00 	ldrex	r3, [r3]
 800c728:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c730:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	3308      	adds	r3, #8
 800c738:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c73a:	637a      	str	r2, [r7, #52]	@ 0x34
 800c73c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c740:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c742:	e841 2300 	strex	r3, r2, [r1]
 800c746:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d1e5      	bne.n	800c71a <HAL_UART_Transmit_IT+0x7e>
 800c74e:	e028      	b.n	800c7a2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c758:	d107      	bne.n	800c76a <HAL_UART_Transmit_IT+0xce>
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d103      	bne.n	800c76a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	4a15      	ldr	r2, [pc, #84]	@ (800c7bc <HAL_UART_Transmit_IT+0x120>)
 800c766:	679a      	str	r2, [r3, #120]	@ 0x78
 800c768:	e002      	b.n	800c770 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	4a14      	ldr	r2, [pc, #80]	@ (800c7c0 <HAL_UART_Transmit_IT+0x124>)
 800c76e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	e853 3f00 	ldrex	r3, [r3]
 800c77c:	613b      	str	r3, [r7, #16]
   return(result);
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	461a      	mov	r2, r3
 800c78c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c78e:	623b      	str	r3, [r7, #32]
 800c790:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c792:	69f9      	ldr	r1, [r7, #28]
 800c794:	6a3a      	ldr	r2, [r7, #32]
 800c796:	e841 2300 	strex	r3, r2, [r1]
 800c79a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d1e6      	bne.n	800c770 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	e000      	b.n	800c7a8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800c7a6:	2302      	movs	r3, #2
  }
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3744      	adds	r7, #68	@ 0x44
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr
 800c7b4:	0800e3dd 	.word	0x0800e3dd
 800c7b8:	0800e2fd 	.word	0x0800e2fd
 800c7bc:	0800e23b 	.word	0x0800e23b
 800c7c0:	0800e183 	.word	0x0800e183

0800c7c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b08a      	sub	sp, #40	@ 0x28
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7d8:	2b20      	cmp	r3, #32
 800c7da:	d137      	bne.n	800c84c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d002      	beq.n	800c7e8 <HAL_UART_Receive_IT+0x24>
 800c7e2:	88fb      	ldrh	r3, [r7, #6]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d101      	bne.n	800c7ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e030      	b.n	800c84e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a18      	ldr	r2, [pc, #96]	@ (800c858 <HAL_UART_Receive_IT+0x94>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d01f      	beq.n	800c83c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c806:	2b00      	cmp	r3, #0
 800c808:	d018      	beq.n	800c83c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	e853 3f00 	ldrex	r3, [r3]
 800c816:	613b      	str	r3, [r7, #16]
   return(result);
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c81e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	461a      	mov	r2, r3
 800c826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c828:	623b      	str	r3, [r7, #32]
 800c82a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82c:	69f9      	ldr	r1, [r7, #28]
 800c82e:	6a3a      	ldr	r2, [r7, #32]
 800c830:	e841 2300 	strex	r3, r2, [r1]
 800c834:	61bb      	str	r3, [r7, #24]
   return(result);
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1e6      	bne.n	800c80a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c83c:	88fb      	ldrh	r3, [r7, #6]
 800c83e:	461a      	mov	r2, r3
 800c840:	68b9      	ldr	r1, [r7, #8]
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f001 f8c8 	bl	800d9d8 <UART_Start_Receive_IT>
 800c848:	4603      	mov	r3, r0
 800c84a:	e000      	b.n	800c84e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c84c:	2302      	movs	r3, #2
  }
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3728      	adds	r7, #40	@ 0x28
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	40008000 	.word	0x40008000

0800c85c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08a      	sub	sp, #40	@ 0x28
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	4613      	mov	r3, r2
 800c868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c870:	2b20      	cmp	r3, #32
 800c872:	d167      	bne.n	800c944 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d002      	beq.n	800c880 <HAL_UART_Transmit_DMA+0x24>
 800c87a:	88fb      	ldrh	r3, [r7, #6]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d101      	bne.n	800c884 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c880:	2301      	movs	r3, #1
 800c882:	e060      	b.n	800c946 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	68ba      	ldr	r2, [r7, #8]
 800c888:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	88fa      	ldrh	r2, [r7, #6]
 800c88e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	88fa      	ldrh	r2, [r7, #6]
 800c896:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2200      	movs	r2, #0
 800c89e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2221      	movs	r2, #33	@ 0x21
 800c8a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d028      	beq.n	800c904 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c8b6:	4a26      	ldr	r2, [pc, #152]	@ (800c950 <HAL_UART_Transmit_DMA+0xf4>)
 800c8b8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c8be:	4a25      	ldr	r2, [pc, #148]	@ (800c954 <HAL_UART_Transmit_DMA+0xf8>)
 800c8c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c8c6:	4a24      	ldr	r2, [pc, #144]	@ (800c958 <HAL_UART_Transmit_DMA+0xfc>)
 800c8c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8da:	4619      	mov	r1, r3
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	3328      	adds	r3, #40	@ 0x28
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	88fb      	ldrh	r3, [r7, #6]
 800c8e6:	f7fb fce1 	bl	80082ac <HAL_DMA_Start_IT>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d009      	beq.n	800c904 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2210      	movs	r2, #16
 800c8f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2220      	movs	r2, #32
 800c8fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	e020      	b.n	800c946 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2240      	movs	r2, #64	@ 0x40
 800c90a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3308      	adds	r3, #8
 800c912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	e853 3f00 	ldrex	r3, [r3]
 800c91a:	613b      	str	r3, [r7, #16]
   return(result);
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c922:	627b      	str	r3, [r7, #36]	@ 0x24
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	3308      	adds	r3, #8
 800c92a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c92c:	623a      	str	r2, [r7, #32]
 800c92e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c930:	69f9      	ldr	r1, [r7, #28]
 800c932:	6a3a      	ldr	r2, [r7, #32]
 800c934:	e841 2300 	strex	r3, r2, [r1]
 800c938:	61bb      	str	r3, [r7, #24]
   return(result);
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1e5      	bne.n	800c90c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c940:	2300      	movs	r3, #0
 800c942:	e000      	b.n	800c946 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c944:	2302      	movs	r3, #2
  }
}
 800c946:	4618      	mov	r0, r3
 800c948:	3728      	adds	r7, #40	@ 0x28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	0800deb7 	.word	0x0800deb7
 800c954:	0800df51 	.word	0x0800df51
 800c958:	0800e0d7 	.word	0x0800e0d7

0800c95c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b08a      	sub	sp, #40	@ 0x28
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	4613      	mov	r3, r2
 800c968:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c970:	2b20      	cmp	r3, #32
 800c972:	d137      	bne.n	800c9e4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d002      	beq.n	800c980 <HAL_UART_Receive_DMA+0x24>
 800c97a:	88fb      	ldrh	r3, [r7, #6]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d101      	bne.n	800c984 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c980:	2301      	movs	r3, #1
 800c982:	e030      	b.n	800c9e6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2200      	movs	r2, #0
 800c988:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a18      	ldr	r2, [pc, #96]	@ (800c9f0 <HAL_UART_Receive_DMA+0x94>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d01f      	beq.n	800c9d4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d018      	beq.n	800c9d4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	e853 3f00 	ldrex	r3, [r3]
 800c9ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c9b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	461a      	mov	r2, r3
 800c9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c0:	623b      	str	r3, [r7, #32]
 800c9c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c4:	69f9      	ldr	r1, [r7, #28]
 800c9c6:	6a3a      	ldr	r2, [r7, #32]
 800c9c8:	e841 2300 	strex	r3, r2, [r1]
 800c9cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d1e6      	bne.n	800c9a2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c9d4:	88fb      	ldrh	r3, [r7, #6]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	68b9      	ldr	r1, [r7, #8]
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f001 f91e 	bl	800dc1c <UART_Start_Receive_DMA>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	e000      	b.n	800c9e6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c9e4:	2302      	movs	r3, #2
  }
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3728      	adds	r7, #40	@ 0x28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	40008000 	.word	0x40008000

0800c9f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b0ba      	sub	sp, #232	@ 0xe8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	69db      	ldr	r3, [r3, #28]
 800ca02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ca1e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ca22:	4013      	ands	r3, r2
 800ca24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ca28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d11b      	bne.n	800ca68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca34:	f003 0320 	and.w	r3, r3, #32
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d015      	beq.n	800ca68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca40:	f003 0320 	and.w	r3, r3, #32
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d105      	bne.n	800ca54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d009      	beq.n	800ca68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 8300 	beq.w	800d05e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	4798      	blx	r3
      }
      return;
 800ca66:	e2fa      	b.n	800d05e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ca68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 8123 	beq.w	800ccb8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ca72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ca76:	4b8d      	ldr	r3, [pc, #564]	@ (800ccac <HAL_UART_IRQHandler+0x2b8>)
 800ca78:	4013      	ands	r3, r2
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d106      	bne.n	800ca8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ca7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ca82:	4b8b      	ldr	r3, [pc, #556]	@ (800ccb0 <HAL_UART_IRQHandler+0x2bc>)
 800ca84:	4013      	ands	r3, r2
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f000 8116 	beq.w	800ccb8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d011      	beq.n	800cabc <HAL_UART_IRQHandler+0xc8>
 800ca98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d00b      	beq.n	800cabc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2201      	movs	r2, #1
 800caaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cab2:	f043 0201 	orr.w	r2, r3, #1
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cac0:	f003 0302 	and.w	r3, r3, #2
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d011      	beq.n	800caec <HAL_UART_IRQHandler+0xf8>
 800cac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cacc:	f003 0301 	and.w	r3, r3, #1
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00b      	beq.n	800caec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2202      	movs	r2, #2
 800cada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cae2:	f043 0204 	orr.w	r2, r3, #4
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800caec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caf0:	f003 0304 	and.w	r3, r3, #4
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d011      	beq.n	800cb1c <HAL_UART_IRQHandler+0x128>
 800caf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cafc:	f003 0301 	and.w	r3, r3, #1
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00b      	beq.n	800cb1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2204      	movs	r2, #4
 800cb0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb12:	f043 0202 	orr.w	r2, r3, #2
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cb1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb20:	f003 0308 	and.w	r3, r3, #8
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d017      	beq.n	800cb58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb2c:	f003 0320 	and.w	r3, r3, #32
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d105      	bne.n	800cb40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cb34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cb38:	4b5c      	ldr	r3, [pc, #368]	@ (800ccac <HAL_UART_IRQHandler+0x2b8>)
 800cb3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00b      	beq.n	800cb58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2208      	movs	r2, #8
 800cb46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb4e:	f043 0208 	orr.w	r2, r3, #8
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cb58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d012      	beq.n	800cb8a <HAL_UART_IRQHandler+0x196>
 800cb64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00c      	beq.n	800cb8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cb78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb80:	f043 0220 	orr.w	r2, r3, #32
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f000 8266 	beq.w	800d062 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cb96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb9a:	f003 0320 	and.w	r3, r3, #32
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d013      	beq.n	800cbca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cba6:	f003 0320 	and.w	r3, r3, #32
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d105      	bne.n	800cbba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d007      	beq.n	800cbca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d003      	beq.n	800cbca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbde:	2b40      	cmp	r3, #64	@ 0x40
 800cbe0:	d005      	beq.n	800cbee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cbe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cbe6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d054      	beq.n	800cc98 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f001 f8fb 	bl	800ddea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	689b      	ldr	r3, [r3, #8]
 800cbfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbfe:	2b40      	cmp	r3, #64	@ 0x40
 800cc00:	d146      	bne.n	800cc90 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	3308      	adds	r3, #8
 800cc08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cc10:	e853 3f00 	ldrex	r3, [r3]
 800cc14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cc18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cc1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	3308      	adds	r3, #8
 800cc2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cc2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cc32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cc3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cc3e:	e841 2300 	strex	r3, r2, [r1]
 800cc42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cc46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d1d9      	bne.n	800cc02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d017      	beq.n	800cc88 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc5e:	4a15      	ldr	r2, [pc, #84]	@ (800ccb4 <HAL_UART_IRQHandler+0x2c0>)
 800cc60:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7fb fbf3 	bl	8008454 <HAL_DMA_Abort_IT>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d019      	beq.n	800cca8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cc82:	4610      	mov	r0, r2
 800cc84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc86:	e00f      	b.n	800cca8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fa09 	bl	800d0a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc8e:	e00b      	b.n	800cca8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fa05 	bl	800d0a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc96:	e007      	b.n	800cca8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 fa01 	bl	800d0a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cca6:	e1dc      	b.n	800d062 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cca8:	bf00      	nop
    return;
 800ccaa:	e1da      	b.n	800d062 <HAL_UART_IRQHandler+0x66e>
 800ccac:	10000001 	.word	0x10000001
 800ccb0:	04000120 	.word	0x04000120
 800ccb4:	0800e157 	.word	0x0800e157

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	f040 8170 	bne.w	800cfa2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ccc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccc6:	f003 0310 	and.w	r3, r3, #16
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f000 8169 	beq.w	800cfa2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ccd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccd4:	f003 0310 	and.w	r3, r3, #16
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f000 8162 	beq.w	800cfa2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2210      	movs	r2, #16
 800cce4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccf0:	2b40      	cmp	r3, #64	@ 0x40
 800ccf2:	f040 80d8 	bne.w	800cea6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cd04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 80af 	beq.w	800ce6c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	f080 80a7 	bcs.w	800ce6c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cd24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 0320 	and.w	r3, r3, #32
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f040 8087 	bne.w	800ce4a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cd48:	e853 3f00 	ldrex	r3, [r3]
 800cd4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cd50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cd54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	461a      	mov	r2, r3
 800cd62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cd66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cd6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cd72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cd76:	e841 2300 	strex	r3, r2, [r1]
 800cd7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cd7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1da      	bne.n	800cd3c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3308      	adds	r3, #8
 800cd8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd90:	e853 3f00 	ldrex	r3, [r3]
 800cd94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cd96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd98:	f023 0301 	bic.w	r3, r3, #1
 800cd9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3308      	adds	r3, #8
 800cda6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cdaa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cdae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cdb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cdb6:	e841 2300 	strex	r3, r2, [r1]
 800cdba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cdbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1e1      	bne.n	800cd86 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	3308      	adds	r3, #8
 800cdc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cdcc:	e853 3f00 	ldrex	r3, [r3]
 800cdd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cdd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cdd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3308      	adds	r3, #8
 800cde2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cde6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cde8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cdec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cdee:	e841 2300 	strex	r3, r2, [r1]
 800cdf2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cdf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1e3      	bne.n	800cdc2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2220      	movs	r2, #32
 800cdfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce10:	e853 3f00 	ldrex	r3, [r3]
 800ce14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ce16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce18:	f023 0310 	bic.w	r3, r3, #16
 800ce1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	461a      	mov	r2, r3
 800ce26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ce30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ce32:	e841 2300 	strex	r3, r2, [r1]
 800ce36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ce38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1e4      	bne.n	800ce08 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7fb faac 	bl	80083a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2202      	movs	r2, #2
 800ce4e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	4619      	mov	r1, r3
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 f925 	bl	800d0b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ce6a:	e0fc      	b.n	800d066 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce76:	429a      	cmp	r2, r3
 800ce78:	f040 80f5 	bne.w	800d066 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f003 0320 	and.w	r3, r3, #32
 800ce8a:	2b20      	cmp	r3, #32
 800ce8c:	f040 80eb 	bne.w	800d066 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2202      	movs	r2, #2
 800ce94:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 f908 	bl	800d0b4 <HAL_UARTEx_RxEventCallback>
      return;
 800cea4:	e0df      	b.n	800d066 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	1ad3      	subs	r3, r2, r3
 800ceb6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f000 80d1 	beq.w	800d06a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800cec8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f000 80cc 	beq.w	800d06a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceda:	e853 3f00 	ldrex	r3, [r3]
 800cede:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cee2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cee6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	461a      	mov	r2, r3
 800cef0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cef4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cef6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cefa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cefc:	e841 2300 	strex	r3, r2, [r1]
 800cf00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cf02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1e4      	bne.n	800ced2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	3308      	adds	r3, #8
 800cf0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf12:	e853 3f00 	ldrex	r3, [r3]
 800cf16:	623b      	str	r3, [r7, #32]
   return(result);
 800cf18:	6a3b      	ldr	r3, [r7, #32]
 800cf1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf1e:	f023 0301 	bic.w	r3, r3, #1
 800cf22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	3308      	adds	r3, #8
 800cf2c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cf30:	633a      	str	r2, [r7, #48]	@ 0x30
 800cf32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf38:	e841 2300 	strex	r3, r2, [r1]
 800cf3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1e1      	bne.n	800cf08 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2220      	movs	r2, #32
 800cf48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	e853 3f00 	ldrex	r3, [r3]
 800cf64:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f023 0310 	bic.w	r3, r3, #16
 800cf6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	461a      	mov	r2, r3
 800cf76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cf7a:	61fb      	str	r3, [r7, #28]
 800cf7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7e:	69b9      	ldr	r1, [r7, #24]
 800cf80:	69fa      	ldr	r2, [r7, #28]
 800cf82:	e841 2300 	strex	r3, r2, [r1]
 800cf86:	617b      	str	r3, [r7, #20]
   return(result);
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1e4      	bne.n	800cf58 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2202      	movs	r2, #2
 800cf92:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cf94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cf98:	4619      	mov	r1, r3
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 f88a 	bl	800d0b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cfa0:	e063      	b.n	800d06a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cfa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00e      	beq.n	800cfcc <HAL_UART_IRQHandler+0x5d8>
 800cfae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cfb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d008      	beq.n	800cfcc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cfc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f001 ffc9 	bl	800ef5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cfca:	e051      	b.n	800d070 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cfcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d014      	beq.n	800d002 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cfd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d105      	bne.n	800cff0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cfe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cfe8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d008      	beq.n	800d002 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d03a      	beq.n	800d06e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	4798      	blx	r3
    }
    return;
 800d000:	e035      	b.n	800d06e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d009      	beq.n	800d022 <HAL_UART_IRQHandler+0x62e>
 800d00e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d016:	2b00      	cmp	r3, #0
 800d018:	d003      	beq.n	800d022 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f001 fa53 	bl	800e4c6 <UART_EndTransmit_IT>
    return;
 800d020:	e026      	b.n	800d070 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d009      	beq.n	800d042 <HAL_UART_IRQHandler+0x64e>
 800d02e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d032:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d036:	2b00      	cmp	r3, #0
 800d038:	d003      	beq.n	800d042 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f001 ffa2 	bl	800ef84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d040:	e016      	b.n	800d070 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d046:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d010      	beq.n	800d070 <HAL_UART_IRQHandler+0x67c>
 800d04e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d052:	2b00      	cmp	r3, #0
 800d054:	da0c      	bge.n	800d070 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f001 ff8a 	bl	800ef70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d05c:	e008      	b.n	800d070 <HAL_UART_IRQHandler+0x67c>
      return;
 800d05e:	bf00      	nop
 800d060:	e006      	b.n	800d070 <HAL_UART_IRQHandler+0x67c>
    return;
 800d062:	bf00      	nop
 800d064:	e004      	b.n	800d070 <HAL_UART_IRQHandler+0x67c>
      return;
 800d066:	bf00      	nop
 800d068:	e002      	b.n	800d070 <HAL_UART_IRQHandler+0x67c>
      return;
 800d06a:	bf00      	nop
 800d06c:	e000      	b.n	800d070 <HAL_UART_IRQHandler+0x67c>
    return;
 800d06e:	bf00      	nop
  }
}
 800d070:	37e8      	adds	r7, #232	@ 0xe8
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop

0800d078 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d080:	bf00      	nop
 800d082:	370c      	adds	r7, #12
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr

0800d08c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d094:	bf00      	nop
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b083      	sub	sp, #12
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d0a8:	bf00      	nop
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d0c0:	bf00      	nop
 800d0c2:	370c      	adds	r7, #12
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0d0:	b08c      	sub	sp, #48	@ 0x30
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	689a      	ldr	r2, [r3, #8]
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	431a      	orrs	r2, r3
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	695b      	ldr	r3, [r3, #20]
 800d0ea:	431a      	orrs	r2, r3
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	69db      	ldr	r3, [r3, #28]
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	4bab      	ldr	r3, [pc, #684]	@ (800d3a8 <UART_SetConfig+0x2dc>)
 800d0fc:	4013      	ands	r3, r2
 800d0fe:	697a      	ldr	r2, [r7, #20]
 800d100:	6812      	ldr	r2, [r2, #0]
 800d102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d104:	430b      	orrs	r3, r1
 800d106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	68da      	ldr	r2, [r3, #12]
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	430a      	orrs	r2, r1
 800d11c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	699b      	ldr	r3, [r3, #24]
 800d122:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4aa0      	ldr	r2, [pc, #640]	@ (800d3ac <UART_SetConfig+0x2e0>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d004      	beq.n	800d138 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	6a1b      	ldr	r3, [r3, #32]
 800d132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d134:	4313      	orrs	r3, r2
 800d136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d142:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d146:	697a      	ldr	r2, [r7, #20]
 800d148:	6812      	ldr	r2, [r2, #0]
 800d14a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d14c:	430b      	orrs	r3, r1
 800d14e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d156:	f023 010f 	bic.w	r1, r3, #15
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	430a      	orrs	r2, r1
 800d164:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a91      	ldr	r2, [pc, #580]	@ (800d3b0 <UART_SetConfig+0x2e4>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d125      	bne.n	800d1bc <UART_SetConfig+0xf0>
 800d170:	4b90      	ldr	r3, [pc, #576]	@ (800d3b4 <UART_SetConfig+0x2e8>)
 800d172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d176:	f003 0303 	and.w	r3, r3, #3
 800d17a:	2b03      	cmp	r3, #3
 800d17c:	d81a      	bhi.n	800d1b4 <UART_SetConfig+0xe8>
 800d17e:	a201      	add	r2, pc, #4	@ (adr r2, 800d184 <UART_SetConfig+0xb8>)
 800d180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d184:	0800d195 	.word	0x0800d195
 800d188:	0800d1a5 	.word	0x0800d1a5
 800d18c:	0800d19d 	.word	0x0800d19d
 800d190:	0800d1ad 	.word	0x0800d1ad
 800d194:	2301      	movs	r3, #1
 800d196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d19a:	e0d6      	b.n	800d34a <UART_SetConfig+0x27e>
 800d19c:	2302      	movs	r3, #2
 800d19e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1a2:	e0d2      	b.n	800d34a <UART_SetConfig+0x27e>
 800d1a4:	2304      	movs	r3, #4
 800d1a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1aa:	e0ce      	b.n	800d34a <UART_SetConfig+0x27e>
 800d1ac:	2308      	movs	r3, #8
 800d1ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1b2:	e0ca      	b.n	800d34a <UART_SetConfig+0x27e>
 800d1b4:	2310      	movs	r3, #16
 800d1b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1ba:	e0c6      	b.n	800d34a <UART_SetConfig+0x27e>
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a7d      	ldr	r2, [pc, #500]	@ (800d3b8 <UART_SetConfig+0x2ec>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d138      	bne.n	800d238 <UART_SetConfig+0x16c>
 800d1c6:	4b7b      	ldr	r3, [pc, #492]	@ (800d3b4 <UART_SetConfig+0x2e8>)
 800d1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1cc:	f003 030c 	and.w	r3, r3, #12
 800d1d0:	2b0c      	cmp	r3, #12
 800d1d2:	d82d      	bhi.n	800d230 <UART_SetConfig+0x164>
 800d1d4:	a201      	add	r2, pc, #4	@ (adr r2, 800d1dc <UART_SetConfig+0x110>)
 800d1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1da:	bf00      	nop
 800d1dc:	0800d211 	.word	0x0800d211
 800d1e0:	0800d231 	.word	0x0800d231
 800d1e4:	0800d231 	.word	0x0800d231
 800d1e8:	0800d231 	.word	0x0800d231
 800d1ec:	0800d221 	.word	0x0800d221
 800d1f0:	0800d231 	.word	0x0800d231
 800d1f4:	0800d231 	.word	0x0800d231
 800d1f8:	0800d231 	.word	0x0800d231
 800d1fc:	0800d219 	.word	0x0800d219
 800d200:	0800d231 	.word	0x0800d231
 800d204:	0800d231 	.word	0x0800d231
 800d208:	0800d231 	.word	0x0800d231
 800d20c:	0800d229 	.word	0x0800d229
 800d210:	2300      	movs	r3, #0
 800d212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d216:	e098      	b.n	800d34a <UART_SetConfig+0x27e>
 800d218:	2302      	movs	r3, #2
 800d21a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d21e:	e094      	b.n	800d34a <UART_SetConfig+0x27e>
 800d220:	2304      	movs	r3, #4
 800d222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d226:	e090      	b.n	800d34a <UART_SetConfig+0x27e>
 800d228:	2308      	movs	r3, #8
 800d22a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d22e:	e08c      	b.n	800d34a <UART_SetConfig+0x27e>
 800d230:	2310      	movs	r3, #16
 800d232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d236:	e088      	b.n	800d34a <UART_SetConfig+0x27e>
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a5f      	ldr	r2, [pc, #380]	@ (800d3bc <UART_SetConfig+0x2f0>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d125      	bne.n	800d28e <UART_SetConfig+0x1c2>
 800d242:	4b5c      	ldr	r3, [pc, #368]	@ (800d3b4 <UART_SetConfig+0x2e8>)
 800d244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d248:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d24c:	2b30      	cmp	r3, #48	@ 0x30
 800d24e:	d016      	beq.n	800d27e <UART_SetConfig+0x1b2>
 800d250:	2b30      	cmp	r3, #48	@ 0x30
 800d252:	d818      	bhi.n	800d286 <UART_SetConfig+0x1ba>
 800d254:	2b20      	cmp	r3, #32
 800d256:	d00a      	beq.n	800d26e <UART_SetConfig+0x1a2>
 800d258:	2b20      	cmp	r3, #32
 800d25a:	d814      	bhi.n	800d286 <UART_SetConfig+0x1ba>
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d002      	beq.n	800d266 <UART_SetConfig+0x19a>
 800d260:	2b10      	cmp	r3, #16
 800d262:	d008      	beq.n	800d276 <UART_SetConfig+0x1aa>
 800d264:	e00f      	b.n	800d286 <UART_SetConfig+0x1ba>
 800d266:	2300      	movs	r3, #0
 800d268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d26c:	e06d      	b.n	800d34a <UART_SetConfig+0x27e>
 800d26e:	2302      	movs	r3, #2
 800d270:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d274:	e069      	b.n	800d34a <UART_SetConfig+0x27e>
 800d276:	2304      	movs	r3, #4
 800d278:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d27c:	e065      	b.n	800d34a <UART_SetConfig+0x27e>
 800d27e:	2308      	movs	r3, #8
 800d280:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d284:	e061      	b.n	800d34a <UART_SetConfig+0x27e>
 800d286:	2310      	movs	r3, #16
 800d288:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d28c:	e05d      	b.n	800d34a <UART_SetConfig+0x27e>
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a4b      	ldr	r2, [pc, #300]	@ (800d3c0 <UART_SetConfig+0x2f4>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d125      	bne.n	800d2e4 <UART_SetConfig+0x218>
 800d298:	4b46      	ldr	r3, [pc, #280]	@ (800d3b4 <UART_SetConfig+0x2e8>)
 800d29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d29e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d2a2:	2bc0      	cmp	r3, #192	@ 0xc0
 800d2a4:	d016      	beq.n	800d2d4 <UART_SetConfig+0x208>
 800d2a6:	2bc0      	cmp	r3, #192	@ 0xc0
 800d2a8:	d818      	bhi.n	800d2dc <UART_SetConfig+0x210>
 800d2aa:	2b80      	cmp	r3, #128	@ 0x80
 800d2ac:	d00a      	beq.n	800d2c4 <UART_SetConfig+0x1f8>
 800d2ae:	2b80      	cmp	r3, #128	@ 0x80
 800d2b0:	d814      	bhi.n	800d2dc <UART_SetConfig+0x210>
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d002      	beq.n	800d2bc <UART_SetConfig+0x1f0>
 800d2b6:	2b40      	cmp	r3, #64	@ 0x40
 800d2b8:	d008      	beq.n	800d2cc <UART_SetConfig+0x200>
 800d2ba:	e00f      	b.n	800d2dc <UART_SetConfig+0x210>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2c2:	e042      	b.n	800d34a <UART_SetConfig+0x27e>
 800d2c4:	2302      	movs	r3, #2
 800d2c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2ca:	e03e      	b.n	800d34a <UART_SetConfig+0x27e>
 800d2cc:	2304      	movs	r3, #4
 800d2ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2d2:	e03a      	b.n	800d34a <UART_SetConfig+0x27e>
 800d2d4:	2308      	movs	r3, #8
 800d2d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2da:	e036      	b.n	800d34a <UART_SetConfig+0x27e>
 800d2dc:	2310      	movs	r3, #16
 800d2de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2e2:	e032      	b.n	800d34a <UART_SetConfig+0x27e>
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a30      	ldr	r2, [pc, #192]	@ (800d3ac <UART_SetConfig+0x2e0>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d12a      	bne.n	800d344 <UART_SetConfig+0x278>
 800d2ee:	4b31      	ldr	r3, [pc, #196]	@ (800d3b4 <UART_SetConfig+0x2e8>)
 800d2f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d2f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d2fc:	d01a      	beq.n	800d334 <UART_SetConfig+0x268>
 800d2fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d302:	d81b      	bhi.n	800d33c <UART_SetConfig+0x270>
 800d304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d308:	d00c      	beq.n	800d324 <UART_SetConfig+0x258>
 800d30a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d30e:	d815      	bhi.n	800d33c <UART_SetConfig+0x270>
 800d310:	2b00      	cmp	r3, #0
 800d312:	d003      	beq.n	800d31c <UART_SetConfig+0x250>
 800d314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d318:	d008      	beq.n	800d32c <UART_SetConfig+0x260>
 800d31a:	e00f      	b.n	800d33c <UART_SetConfig+0x270>
 800d31c:	2300      	movs	r3, #0
 800d31e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d322:	e012      	b.n	800d34a <UART_SetConfig+0x27e>
 800d324:	2302      	movs	r3, #2
 800d326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d32a:	e00e      	b.n	800d34a <UART_SetConfig+0x27e>
 800d32c:	2304      	movs	r3, #4
 800d32e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d332:	e00a      	b.n	800d34a <UART_SetConfig+0x27e>
 800d334:	2308      	movs	r3, #8
 800d336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d33a:	e006      	b.n	800d34a <UART_SetConfig+0x27e>
 800d33c:	2310      	movs	r3, #16
 800d33e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d342:	e002      	b.n	800d34a <UART_SetConfig+0x27e>
 800d344:	2310      	movs	r3, #16
 800d346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4a17      	ldr	r2, [pc, #92]	@ (800d3ac <UART_SetConfig+0x2e0>)
 800d350:	4293      	cmp	r3, r2
 800d352:	f040 80a8 	bne.w	800d4a6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d356:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d35a:	2b08      	cmp	r3, #8
 800d35c:	d834      	bhi.n	800d3c8 <UART_SetConfig+0x2fc>
 800d35e:	a201      	add	r2, pc, #4	@ (adr r2, 800d364 <UART_SetConfig+0x298>)
 800d360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d364:	0800d389 	.word	0x0800d389
 800d368:	0800d3c9 	.word	0x0800d3c9
 800d36c:	0800d391 	.word	0x0800d391
 800d370:	0800d3c9 	.word	0x0800d3c9
 800d374:	0800d397 	.word	0x0800d397
 800d378:	0800d3c9 	.word	0x0800d3c9
 800d37c:	0800d3c9 	.word	0x0800d3c9
 800d380:	0800d3c9 	.word	0x0800d3c9
 800d384:	0800d39f 	.word	0x0800d39f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d388:	f7fc ff1e 	bl	800a1c8 <HAL_RCC_GetPCLK1Freq>
 800d38c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d38e:	e021      	b.n	800d3d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d390:	4b0c      	ldr	r3, [pc, #48]	@ (800d3c4 <UART_SetConfig+0x2f8>)
 800d392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d394:	e01e      	b.n	800d3d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d396:	f7fc fea9 	bl	800a0ec <HAL_RCC_GetSysClockFreq>
 800d39a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d39c:	e01a      	b.n	800d3d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d39e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d3a4:	e016      	b.n	800d3d4 <UART_SetConfig+0x308>
 800d3a6:	bf00      	nop
 800d3a8:	cfff69f3 	.word	0xcfff69f3
 800d3ac:	40008000 	.word	0x40008000
 800d3b0:	40013800 	.word	0x40013800
 800d3b4:	40021000 	.word	0x40021000
 800d3b8:	40004400 	.word	0x40004400
 800d3bc:	40004800 	.word	0x40004800
 800d3c0:	40004c00 	.word	0x40004c00
 800d3c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d3d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 812a 	beq.w	800d630 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3e0:	4a9e      	ldr	r2, [pc, #632]	@ (800d65c <UART_SetConfig+0x590>)
 800d3e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3ee:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	685a      	ldr	r2, [r3, #4]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	005b      	lsls	r3, r3, #1
 800d3f8:	4413      	add	r3, r2
 800d3fa:	69ba      	ldr	r2, [r7, #24]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d305      	bcc.n	800d40c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d406:	69ba      	ldr	r2, [r7, #24]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d903      	bls.n	800d414 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800d40c:	2301      	movs	r3, #1
 800d40e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d412:	e10d      	b.n	800d630 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d416:	2200      	movs	r2, #0
 800d418:	60bb      	str	r3, [r7, #8]
 800d41a:	60fa      	str	r2, [r7, #12]
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d420:	4a8e      	ldr	r2, [pc, #568]	@ (800d65c <UART_SetConfig+0x590>)
 800d422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d426:	b29b      	uxth	r3, r3
 800d428:	2200      	movs	r2, #0
 800d42a:	603b      	str	r3, [r7, #0]
 800d42c:	607a      	str	r2, [r7, #4]
 800d42e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d432:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d436:	f7f5 fe59 	bl	80030ec <__aeabi_uldivmod>
 800d43a:	4602      	mov	r2, r0
 800d43c:	460b      	mov	r3, r1
 800d43e:	4610      	mov	r0, r2
 800d440:	4619      	mov	r1, r3
 800d442:	f04f 0200 	mov.w	r2, #0
 800d446:	f04f 0300 	mov.w	r3, #0
 800d44a:	020b      	lsls	r3, r1, #8
 800d44c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d450:	0202      	lsls	r2, r0, #8
 800d452:	6979      	ldr	r1, [r7, #20]
 800d454:	6849      	ldr	r1, [r1, #4]
 800d456:	0849      	lsrs	r1, r1, #1
 800d458:	2000      	movs	r0, #0
 800d45a:	460c      	mov	r4, r1
 800d45c:	4605      	mov	r5, r0
 800d45e:	eb12 0804 	adds.w	r8, r2, r4
 800d462:	eb43 0905 	adc.w	r9, r3, r5
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	469a      	mov	sl, r3
 800d46e:	4693      	mov	fp, r2
 800d470:	4652      	mov	r2, sl
 800d472:	465b      	mov	r3, fp
 800d474:	4640      	mov	r0, r8
 800d476:	4649      	mov	r1, r9
 800d478:	f7f5 fe38 	bl	80030ec <__aeabi_uldivmod>
 800d47c:	4602      	mov	r2, r0
 800d47e:	460b      	mov	r3, r1
 800d480:	4613      	mov	r3, r2
 800d482:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d484:	6a3b      	ldr	r3, [r7, #32]
 800d486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d48a:	d308      	bcc.n	800d49e <UART_SetConfig+0x3d2>
 800d48c:	6a3b      	ldr	r3, [r7, #32]
 800d48e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d492:	d204      	bcs.n	800d49e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	6a3a      	ldr	r2, [r7, #32]
 800d49a:	60da      	str	r2, [r3, #12]
 800d49c:	e0c8      	b.n	800d630 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d4a4:	e0c4      	b.n	800d630 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	69db      	ldr	r3, [r3, #28]
 800d4aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4ae:	d167      	bne.n	800d580 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800d4b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d4b4:	2b08      	cmp	r3, #8
 800d4b6:	d828      	bhi.n	800d50a <UART_SetConfig+0x43e>
 800d4b8:	a201      	add	r2, pc, #4	@ (adr r2, 800d4c0 <UART_SetConfig+0x3f4>)
 800d4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4be:	bf00      	nop
 800d4c0:	0800d4e5 	.word	0x0800d4e5
 800d4c4:	0800d4ed 	.word	0x0800d4ed
 800d4c8:	0800d4f5 	.word	0x0800d4f5
 800d4cc:	0800d50b 	.word	0x0800d50b
 800d4d0:	0800d4fb 	.word	0x0800d4fb
 800d4d4:	0800d50b 	.word	0x0800d50b
 800d4d8:	0800d50b 	.word	0x0800d50b
 800d4dc:	0800d50b 	.word	0x0800d50b
 800d4e0:	0800d503 	.word	0x0800d503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4e4:	f7fc fe70 	bl	800a1c8 <HAL_RCC_GetPCLK1Freq>
 800d4e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d4ea:	e014      	b.n	800d516 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d4ec:	f7fc fe82 	bl	800a1f4 <HAL_RCC_GetPCLK2Freq>
 800d4f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d4f2:	e010      	b.n	800d516 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d4f4:	4b5a      	ldr	r3, [pc, #360]	@ (800d660 <UART_SetConfig+0x594>)
 800d4f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d4f8:	e00d      	b.n	800d516 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4fa:	f7fc fdf7 	bl	800a0ec <HAL_RCC_GetSysClockFreq>
 800d4fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d500:	e009      	b.n	800d516 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d506:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d508:	e005      	b.n	800d516 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800d50a:	2300      	movs	r3, #0
 800d50c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d50e:	2301      	movs	r3, #1
 800d510:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d514:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f000 8089 	beq.w	800d630 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d522:	4a4e      	ldr	r2, [pc, #312]	@ (800d65c <UART_SetConfig+0x590>)
 800d524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d528:	461a      	mov	r2, r3
 800d52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d52c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d530:	005a      	lsls	r2, r3, #1
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	085b      	lsrs	r3, r3, #1
 800d538:	441a      	add	r2, r3
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d542:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d544:	6a3b      	ldr	r3, [r7, #32]
 800d546:	2b0f      	cmp	r3, #15
 800d548:	d916      	bls.n	800d578 <UART_SetConfig+0x4ac>
 800d54a:	6a3b      	ldr	r3, [r7, #32]
 800d54c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d550:	d212      	bcs.n	800d578 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d552:	6a3b      	ldr	r3, [r7, #32]
 800d554:	b29b      	uxth	r3, r3
 800d556:	f023 030f 	bic.w	r3, r3, #15
 800d55a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d55c:	6a3b      	ldr	r3, [r7, #32]
 800d55e:	085b      	lsrs	r3, r3, #1
 800d560:	b29b      	uxth	r3, r3
 800d562:	f003 0307 	and.w	r3, r3, #7
 800d566:	b29a      	uxth	r2, r3
 800d568:	8bfb      	ldrh	r3, [r7, #30]
 800d56a:	4313      	orrs	r3, r2
 800d56c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	8bfa      	ldrh	r2, [r7, #30]
 800d574:	60da      	str	r2, [r3, #12]
 800d576:	e05b      	b.n	800d630 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d578:	2301      	movs	r3, #1
 800d57a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d57e:	e057      	b.n	800d630 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d580:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d584:	2b08      	cmp	r3, #8
 800d586:	d828      	bhi.n	800d5da <UART_SetConfig+0x50e>
 800d588:	a201      	add	r2, pc, #4	@ (adr r2, 800d590 <UART_SetConfig+0x4c4>)
 800d58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d58e:	bf00      	nop
 800d590:	0800d5b5 	.word	0x0800d5b5
 800d594:	0800d5bd 	.word	0x0800d5bd
 800d598:	0800d5c5 	.word	0x0800d5c5
 800d59c:	0800d5db 	.word	0x0800d5db
 800d5a0:	0800d5cb 	.word	0x0800d5cb
 800d5a4:	0800d5db 	.word	0x0800d5db
 800d5a8:	0800d5db 	.word	0x0800d5db
 800d5ac:	0800d5db 	.word	0x0800d5db
 800d5b0:	0800d5d3 	.word	0x0800d5d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5b4:	f7fc fe08 	bl	800a1c8 <HAL_RCC_GetPCLK1Freq>
 800d5b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d5ba:	e014      	b.n	800d5e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5bc:	f7fc fe1a 	bl	800a1f4 <HAL_RCC_GetPCLK2Freq>
 800d5c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d5c2:	e010      	b.n	800d5e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d5c4:	4b26      	ldr	r3, [pc, #152]	@ (800d660 <UART_SetConfig+0x594>)
 800d5c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d5c8:	e00d      	b.n	800d5e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d5ca:	f7fc fd8f 	bl	800a0ec <HAL_RCC_GetSysClockFreq>
 800d5ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d5d0:	e009      	b.n	800d5e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d5d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d5d8:	e005      	b.n	800d5e6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d5e4:	bf00      	nop
    }

    if (pclk != 0U)
 800d5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d021      	beq.n	800d630 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f0:	4a1a      	ldr	r2, [pc, #104]	@ (800d65c <UART_SetConfig+0x590>)
 800d5f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	085b      	lsrs	r3, r3, #1
 800d604:	441a      	add	r2, r3
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d60e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d610:	6a3b      	ldr	r3, [r7, #32]
 800d612:	2b0f      	cmp	r3, #15
 800d614:	d909      	bls.n	800d62a <UART_SetConfig+0x55e>
 800d616:	6a3b      	ldr	r3, [r7, #32]
 800d618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d61c:	d205      	bcs.n	800d62a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d61e:	6a3b      	ldr	r3, [r7, #32]
 800d620:	b29a      	uxth	r2, r3
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	60da      	str	r2, [r3, #12]
 800d628:	e002      	b.n	800d630 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d62a:	2301      	movs	r3, #1
 800d62c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	2201      	movs	r2, #1
 800d634:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	2201      	movs	r2, #1
 800d63c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	2200      	movs	r2, #0
 800d644:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	2200      	movs	r2, #0
 800d64a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d64c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d650:	4618      	mov	r0, r3
 800d652:	3730      	adds	r7, #48	@ 0x30
 800d654:	46bd      	mov	sp, r7
 800d656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d65a:	bf00      	nop
 800d65c:	0801c1d0 	.word	0x0801c1d0
 800d660:	00f42400 	.word	0x00f42400

0800d664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d670:	f003 0308 	and.w	r3, r3, #8
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00a      	beq.n	800d68e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	430a      	orrs	r2, r1
 800d68c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d692:	f003 0301 	and.w	r3, r3, #1
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00a      	beq.n	800d6b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	430a      	orrs	r2, r1
 800d6ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6b4:	f003 0302 	and.w	r3, r3, #2
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00a      	beq.n	800d6d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	430a      	orrs	r2, r1
 800d6d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6d6:	f003 0304 	and.w	r3, r3, #4
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00a      	beq.n	800d6f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	430a      	orrs	r2, r1
 800d6f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6f8:	f003 0310 	and.w	r3, r3, #16
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00a      	beq.n	800d716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	430a      	orrs	r2, r1
 800d714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d71a:	f003 0320 	and.w	r3, r3, #32
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d00a      	beq.n	800d738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	689b      	ldr	r3, [r3, #8]
 800d728:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	430a      	orrs	r2, r1
 800d736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d740:	2b00      	cmp	r3, #0
 800d742:	d01a      	beq.n	800d77a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	430a      	orrs	r2, r1
 800d758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d75e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d762:	d10a      	bne.n	800d77a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	430a      	orrs	r2, r1
 800d778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d77e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00a      	beq.n	800d79c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	430a      	orrs	r2, r1
 800d79a:	605a      	str	r2, [r3, #4]
  }
}
 800d79c:	bf00      	nop
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b098      	sub	sp, #96	@ 0x60
 800d7ac:	af02      	add	r7, sp, #8
 800d7ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d7b8:	f7f8 fba2 	bl	8005f00 <HAL_GetTick>
 800d7bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f003 0308 	and.w	r3, r3, #8
 800d7c8:	2b08      	cmp	r3, #8
 800d7ca:	d12f      	bne.n	800d82c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 f88e 	bl	800d8fc <UART_WaitOnFlagUntilTimeout>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d022      	beq.n	800d82c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ee:	e853 3f00 	ldrex	r3, [r3]
 800d7f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d7f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d7fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	461a      	mov	r2, r3
 800d802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d804:	647b      	str	r3, [r7, #68]	@ 0x44
 800d806:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d808:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d80a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d80c:	e841 2300 	strex	r3, r2, [r1]
 800d810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1e6      	bne.n	800d7e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2220      	movs	r2, #32
 800d81c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d828:	2303      	movs	r3, #3
 800d82a:	e063      	b.n	800d8f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f003 0304 	and.w	r3, r3, #4
 800d836:	2b04      	cmp	r3, #4
 800d838:	d149      	bne.n	800d8ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d83a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d842:	2200      	movs	r2, #0
 800d844:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f857 	bl	800d8fc <UART_WaitOnFlagUntilTimeout>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d03c      	beq.n	800d8ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d85c:	e853 3f00 	ldrex	r3, [r3]
 800d860:	623b      	str	r3, [r7, #32]
   return(result);
 800d862:	6a3b      	ldr	r3, [r7, #32]
 800d864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d868:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	461a      	mov	r2, r3
 800d870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d872:	633b      	str	r3, [r7, #48]	@ 0x30
 800d874:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d87a:	e841 2300 	strex	r3, r2, [r1]
 800d87e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1e6      	bne.n	800d854 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	3308      	adds	r3, #8
 800d88c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	e853 3f00 	ldrex	r3, [r3]
 800d894:	60fb      	str	r3, [r7, #12]
   return(result);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	f023 0301 	bic.w	r3, r3, #1
 800d89c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	3308      	adds	r3, #8
 800d8a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8a6:	61fa      	str	r2, [r7, #28]
 800d8a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8aa:	69b9      	ldr	r1, [r7, #24]
 800d8ac:	69fa      	ldr	r2, [r7, #28]
 800d8ae:	e841 2300 	strex	r3, r2, [r1]
 800d8b2:	617b      	str	r3, [r7, #20]
   return(result);
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d1e5      	bne.n	800d886 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2220      	movs	r2, #32
 800d8be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	e012      	b.n	800d8f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2220      	movs	r2, #32
 800d8d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2220      	movs	r2, #32
 800d8da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d8f2:	2300      	movs	r3, #0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3758      	adds	r7, #88	@ 0x58
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	603b      	str	r3, [r7, #0]
 800d908:	4613      	mov	r3, r2
 800d90a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d90c:	e04f      	b.n	800d9ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d914:	d04b      	beq.n	800d9ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d916:	f7f8 faf3 	bl	8005f00 <HAL_GetTick>
 800d91a:	4602      	mov	r2, r0
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	1ad3      	subs	r3, r2, r3
 800d920:	69ba      	ldr	r2, [r7, #24]
 800d922:	429a      	cmp	r2, r3
 800d924:	d302      	bcc.n	800d92c <UART_WaitOnFlagUntilTimeout+0x30>
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d101      	bne.n	800d930 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d92c:	2303      	movs	r3, #3
 800d92e:	e04e      	b.n	800d9ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f003 0304 	and.w	r3, r3, #4
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d037      	beq.n	800d9ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	2b80      	cmp	r3, #128	@ 0x80
 800d942:	d034      	beq.n	800d9ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	2b40      	cmp	r3, #64	@ 0x40
 800d948:	d031      	beq.n	800d9ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	69db      	ldr	r3, [r3, #28]
 800d950:	f003 0308 	and.w	r3, r3, #8
 800d954:	2b08      	cmp	r3, #8
 800d956:	d110      	bne.n	800d97a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2208      	movs	r2, #8
 800d95e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	f000 fa42 	bl	800ddea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2208      	movs	r2, #8
 800d96a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2200      	movs	r2, #0
 800d972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d976:	2301      	movs	r3, #1
 800d978:	e029      	b.n	800d9ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	69db      	ldr	r3, [r3, #28]
 800d980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d988:	d111      	bne.n	800d9ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d994:	68f8      	ldr	r0, [r7, #12]
 800d996:	f000 fa28 	bl	800ddea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2220      	movs	r2, #32
 800d99e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d9aa:	2303      	movs	r3, #3
 800d9ac:	e00f      	b.n	800d9ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	69da      	ldr	r2, [r3, #28]
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	4013      	ands	r3, r2
 800d9b8:	68ba      	ldr	r2, [r7, #8]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	bf0c      	ite	eq
 800d9be:	2301      	moveq	r3, #1
 800d9c0:	2300      	movne	r3, #0
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	79fb      	ldrb	r3, [r7, #7]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d0a0      	beq.n	800d90e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
	...

0800d9d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b0a3      	sub	sp, #140	@ 0x8c
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	68ba      	ldr	r2, [r7, #8]
 800d9ea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	88fa      	ldrh	r2, [r7, #6]
 800d9f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	88fa      	ldrh	r2, [r7, #6]
 800d9f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2200      	movs	r2, #0
 800da00:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da0a:	d10e      	bne.n	800da2a <UART_Start_Receive_IT+0x52>
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d105      	bne.n	800da20 <UART_Start_Receive_IT+0x48>
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800da1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da1e:	e02d      	b.n	800da7c <UART_Start_Receive_IT+0xa4>
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	22ff      	movs	r2, #255	@ 0xff
 800da24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da28:	e028      	b.n	800da7c <UART_Start_Receive_IT+0xa4>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d10d      	bne.n	800da4e <UART_Start_Receive_IT+0x76>
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	691b      	ldr	r3, [r3, #16]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d104      	bne.n	800da44 <UART_Start_Receive_IT+0x6c>
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	22ff      	movs	r2, #255	@ 0xff
 800da3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da42:	e01b      	b.n	800da7c <UART_Start_Receive_IT+0xa4>
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	227f      	movs	r2, #127	@ 0x7f
 800da48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da4c:	e016      	b.n	800da7c <UART_Start_Receive_IT+0xa4>
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	689b      	ldr	r3, [r3, #8]
 800da52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da56:	d10d      	bne.n	800da74 <UART_Start_Receive_IT+0x9c>
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	691b      	ldr	r3, [r3, #16]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d104      	bne.n	800da6a <UART_Start_Receive_IT+0x92>
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	227f      	movs	r2, #127	@ 0x7f
 800da64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da68:	e008      	b.n	800da7c <UART_Start_Receive_IT+0xa4>
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	223f      	movs	r2, #63	@ 0x3f
 800da6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da72:	e003      	b.n	800da7c <UART_Start_Receive_IT+0xa4>
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2200      	movs	r2, #0
 800da78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2200      	movs	r2, #0
 800da80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2222      	movs	r2, #34	@ 0x22
 800da88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	3308      	adds	r3, #8
 800da92:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da96:	e853 3f00 	ldrex	r3, [r3]
 800da9a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800da9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da9e:	f043 0301 	orr.w	r3, r3, #1
 800daa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	3308      	adds	r3, #8
 800daac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dab0:	673a      	str	r2, [r7, #112]	@ 0x70
 800dab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800dab6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800dab8:	e841 2300 	strex	r3, r2, [r1]
 800dabc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800dabe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d1e3      	bne.n	800da8c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dacc:	d14f      	bne.n	800db6e <UART_Start_Receive_IT+0x196>
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dad4:	88fa      	ldrh	r2, [r7, #6]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d349      	bcc.n	800db6e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dae2:	d107      	bne.n	800daf4 <UART_Start_Receive_IT+0x11c>
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	691b      	ldr	r3, [r3, #16]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d103      	bne.n	800daf4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	4a47      	ldr	r2, [pc, #284]	@ (800dc0c <UART_Start_Receive_IT+0x234>)
 800daf0:	675a      	str	r2, [r3, #116]	@ 0x74
 800daf2:	e002      	b.n	800dafa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	4a46      	ldr	r2, [pc, #280]	@ (800dc10 <UART_Start_Receive_IT+0x238>)
 800daf8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d01a      	beq.n	800db38 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db0a:	e853 3f00 	ldrex	r3, [r3]
 800db0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800db10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	461a      	mov	r2, r3
 800db20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800db24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db26:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db28:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800db2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800db2c:	e841 2300 	strex	r3, r2, [r1]
 800db30:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800db32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1e4      	bne.n	800db02 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	3308      	adds	r3, #8
 800db3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db42:	e853 3f00 	ldrex	r3, [r3]
 800db46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800db4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	3308      	adds	r3, #8
 800db56:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800db58:	64ba      	str	r2, [r7, #72]	@ 0x48
 800db5a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800db5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db60:	e841 2300 	strex	r3, r2, [r1]
 800db64:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800db66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1e5      	bne.n	800db38 <UART_Start_Receive_IT+0x160>
 800db6c:	e046      	b.n	800dbfc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db76:	d107      	bne.n	800db88 <UART_Start_Receive_IT+0x1b0>
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d103      	bne.n	800db88 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	4a24      	ldr	r2, [pc, #144]	@ (800dc14 <UART_Start_Receive_IT+0x23c>)
 800db84:	675a      	str	r2, [r3, #116]	@ 0x74
 800db86:	e002      	b.n	800db8e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	4a23      	ldr	r2, [pc, #140]	@ (800dc18 <UART_Start_Receive_IT+0x240>)
 800db8c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	691b      	ldr	r3, [r3, #16]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d019      	beq.n	800dbca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9e:	e853 3f00 	ldrex	r3, [r3]
 800dba2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800dbaa:	677b      	str	r3, [r7, #116]	@ 0x74
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dbb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbb6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dbba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbbc:	e841 2300 	strex	r3, r2, [r1]
 800dbc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800dbc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1e6      	bne.n	800db96 <UART_Start_Receive_IT+0x1be>
 800dbc8:	e018      	b.n	800dbfc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	e853 3f00 	ldrex	r3, [r3]
 800dbd6:	613b      	str	r3, [r7, #16]
   return(result);
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	f043 0320 	orr.w	r3, r3, #32
 800dbde:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	461a      	mov	r2, r3
 800dbe6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbe8:	623b      	str	r3, [r7, #32]
 800dbea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbec:	69f9      	ldr	r1, [r7, #28]
 800dbee:	6a3a      	ldr	r2, [r7, #32]
 800dbf0:	e841 2300 	strex	r3, r2, [r1]
 800dbf4:	61bb      	str	r3, [r7, #24]
   return(result);
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d1e6      	bne.n	800dbca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	378c      	adds	r7, #140	@ 0x8c
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	0800ebf1 	.word	0x0800ebf1
 800dc10:	0800e88d 	.word	0x0800e88d
 800dc14:	0800e6d5 	.word	0x0800e6d5
 800dc18:	0800e51d 	.word	0x0800e51d

0800dc1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b096      	sub	sp, #88	@ 0x58
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	4613      	mov	r3, r2
 800dc28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	68ba      	ldr	r2, [r7, #8]
 800dc2e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	88fa      	ldrh	r2, [r7, #6]
 800dc34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2222      	movs	r2, #34	@ 0x22
 800dc44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d02d      	beq.n	800dcae <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc58:	4a40      	ldr	r2, [pc, #256]	@ (800dd5c <UART_Start_Receive_DMA+0x140>)
 800dc5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc62:	4a3f      	ldr	r2, [pc, #252]	@ (800dd60 <UART_Start_Receive_DMA+0x144>)
 800dc64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc6c:	4a3d      	ldr	r2, [pc, #244]	@ (800dd64 <UART_Start_Receive_DMA+0x148>)
 800dc6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc76:	2200      	movs	r2, #0
 800dc78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	3324      	adds	r3, #36	@ 0x24
 800dc86:	4619      	mov	r1, r3
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	88fb      	ldrh	r3, [r7, #6]
 800dc90:	f7fa fb0c 	bl	80082ac <HAL_DMA_Start_IT>
 800dc94:	4603      	mov	r3, r0
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d009      	beq.n	800dcae <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2210      	movs	r2, #16
 800dc9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2220      	movs	r2, #32
 800dca6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	e051      	b.n	800dd52 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d018      	beq.n	800dce8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcbe:	e853 3f00 	ldrex	r3, [r3]
 800dcc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dcc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dcca:	657b      	str	r3, [r7, #84]	@ 0x54
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dcd6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dcda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dcdc:	e841 2300 	strex	r3, r2, [r1]
 800dce0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d1e6      	bne.n	800dcb6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	3308      	adds	r3, #8
 800dcee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf2:	e853 3f00 	ldrex	r3, [r3]
 800dcf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcfa:	f043 0301 	orr.w	r3, r3, #1
 800dcfe:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	3308      	adds	r3, #8
 800dd06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dd08:	637a      	str	r2, [r7, #52]	@ 0x34
 800dd0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dd0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd10:	e841 2300 	strex	r3, r2, [r1]
 800dd14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800dd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d1e5      	bne.n	800dce8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	3308      	adds	r3, #8
 800dd22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	e853 3f00 	ldrex	r3, [r3]
 800dd2a:	613b      	str	r3, [r7, #16]
   return(result);
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	3308      	adds	r3, #8
 800dd3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dd3c:	623a      	str	r2, [r7, #32]
 800dd3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd40:	69f9      	ldr	r1, [r7, #28]
 800dd42:	6a3a      	ldr	r2, [r7, #32]
 800dd44:	e841 2300 	strex	r3, r2, [r1]
 800dd48:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1e5      	bne.n	800dd1c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3758      	adds	r7, #88	@ 0x58
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	0800df6d 	.word	0x0800df6d
 800dd60:	0800e099 	.word	0x0800e099
 800dd64:	0800e0d7 	.word	0x0800e0d7

0800dd68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b08f      	sub	sp, #60	@ 0x3c
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd76:	6a3b      	ldr	r3, [r7, #32]
 800dd78:	e853 3f00 	ldrex	r3, [r3]
 800dd7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dd84:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd90:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd96:	e841 2300 	strex	r3, r2, [r1]
 800dd9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1e6      	bne.n	800dd70 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	3308      	adds	r3, #8
 800dda8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	e853 3f00 	ldrex	r3, [r3]
 800ddb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ddb8:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	3308      	adds	r3, #8
 800ddc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddc2:	61ba      	str	r2, [r7, #24]
 800ddc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc6:	6979      	ldr	r1, [r7, #20]
 800ddc8:	69ba      	ldr	r2, [r7, #24]
 800ddca:	e841 2300 	strex	r3, r2, [r1]
 800ddce:	613b      	str	r3, [r7, #16]
   return(result);
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d1e5      	bne.n	800dda2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2220      	movs	r2, #32
 800ddda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ddde:	bf00      	nop
 800dde0:	373c      	adds	r7, #60	@ 0x3c
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr

0800ddea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ddea:	b480      	push	{r7}
 800ddec:	b095      	sub	sp, #84	@ 0x54
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddfa:	e853 3f00 	ldrex	r3, [r3]
 800ddfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800de00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800de06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	461a      	mov	r2, r3
 800de0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de10:	643b      	str	r3, [r7, #64]	@ 0x40
 800de12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800de16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800de18:	e841 2300 	strex	r3, r2, [r1]
 800de1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800de1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1e6      	bne.n	800ddf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	3308      	adds	r3, #8
 800de2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de2c:	6a3b      	ldr	r3, [r7, #32]
 800de2e:	e853 3f00 	ldrex	r3, [r3]
 800de32:	61fb      	str	r3, [r7, #28]
   return(result);
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800de3a:	f023 0301 	bic.w	r3, r3, #1
 800de3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	3308      	adds	r3, #8
 800de46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800de4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de50:	e841 2300 	strex	r3, r2, [r1]
 800de54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800de56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1e3      	bne.n	800de24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de60:	2b01      	cmp	r3, #1
 800de62:	d118      	bne.n	800de96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	e853 3f00 	ldrex	r3, [r3]
 800de70:	60bb      	str	r3, [r7, #8]
   return(result);
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	f023 0310 	bic.w	r3, r3, #16
 800de78:	647b      	str	r3, [r7, #68]	@ 0x44
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	461a      	mov	r2, r3
 800de80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de82:	61bb      	str	r3, [r7, #24]
 800de84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de86:	6979      	ldr	r1, [r7, #20]
 800de88:	69ba      	ldr	r2, [r7, #24]
 800de8a:	e841 2300 	strex	r3, r2, [r1]
 800de8e:	613b      	str	r3, [r7, #16]
   return(result);
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1e6      	bne.n	800de64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2220      	movs	r2, #32
 800de9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2200      	movs	r2, #0
 800dea8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800deaa:	bf00      	nop
 800deac:	3754      	adds	r7, #84	@ 0x54
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800deb6:	b580      	push	{r7, lr}
 800deb8:	b090      	sub	sp, #64	@ 0x40
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dec2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f003 0320 	and.w	r3, r3, #32
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d137      	bne.n	800df42 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ded2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ded4:	2200      	movs	r2, #0
 800ded6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800deda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	3308      	adds	r3, #8
 800dee0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee4:	e853 3f00 	ldrex	r3, [r3]
 800dee8:	623b      	str	r3, [r7, #32]
   return(result);
 800deea:	6a3b      	ldr	r3, [r7, #32]
 800deec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800def0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800def2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	3308      	adds	r3, #8
 800def8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800defa:	633a      	str	r2, [r7, #48]	@ 0x30
 800defc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800defe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800df00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df02:	e841 2300 	strex	r3, r2, [r1]
 800df06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800df08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d1e5      	bne.n	800deda <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	e853 3f00 	ldrex	r3, [r3]
 800df1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df22:	637b      	str	r3, [r7, #52]	@ 0x34
 800df24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	461a      	mov	r2, r3
 800df2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df2c:	61fb      	str	r3, [r7, #28]
 800df2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df30:	69b9      	ldr	r1, [r7, #24]
 800df32:	69fa      	ldr	r2, [r7, #28]
 800df34:	e841 2300 	strex	r3, r2, [r1]
 800df38:	617b      	str	r3, [r7, #20]
   return(result);
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1e6      	bne.n	800df0e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800df40:	e002      	b.n	800df48 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800df42:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800df44:	f7ff f898 	bl	800d078 <HAL_UART_TxCpltCallback>
}
 800df48:	bf00      	nop
 800df4a:	3740      	adds	r7, #64	@ 0x40
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df5c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	f7ff f894 	bl	800d08c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df64:	bf00      	nop
 800df66:	3710      	adds	r7, #16
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b09c      	sub	sp, #112	@ 0x70
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df78:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f003 0320 	and.w	r3, r3, #32
 800df84:	2b00      	cmp	r3, #0
 800df86:	d171      	bne.n	800e06c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800df88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df8a:	2200      	movs	r2, #0
 800df8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df98:	e853 3f00 	ldrex	r3, [r3]
 800df9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800df9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dfa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dfa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	461a      	mov	r2, r3
 800dfac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dfae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dfb0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dfb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dfb6:	e841 2300 	strex	r3, r2, [r1]
 800dfba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dfbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d1e6      	bne.n	800df90 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	3308      	adds	r3, #8
 800dfc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfcc:	e853 3f00 	ldrex	r3, [r3]
 800dfd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dfd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfd4:	f023 0301 	bic.w	r3, r3, #1
 800dfd8:	667b      	str	r3, [r7, #100]	@ 0x64
 800dfda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	3308      	adds	r3, #8
 800dfe0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dfe2:	647a      	str	r2, [r7, #68]	@ 0x44
 800dfe4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfe6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dfe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfea:	e841 2300 	strex	r3, r2, [r1]
 800dfee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1e5      	bne.n	800dfc2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	3308      	adds	r3, #8
 800dffc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e000:	e853 3f00 	ldrex	r3, [r3]
 800e004:	623b      	str	r3, [r7, #32]
   return(result);
 800e006:	6a3b      	ldr	r3, [r7, #32]
 800e008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e00c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e00e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	3308      	adds	r3, #8
 800e014:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e016:	633a      	str	r2, [r7, #48]	@ 0x30
 800e018:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e01a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e01c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e01e:	e841 2300 	strex	r3, r2, [r1]
 800e022:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e026:	2b00      	cmp	r3, #0
 800e028:	d1e5      	bne.n	800dff6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e02a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e02c:	2220      	movs	r2, #32
 800e02e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e036:	2b01      	cmp	r3, #1
 800e038:	d118      	bne.n	800e06c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e03a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	e853 3f00 	ldrex	r3, [r3]
 800e046:	60fb      	str	r3, [r7, #12]
   return(result);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f023 0310 	bic.w	r3, r3, #16
 800e04e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e050:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	461a      	mov	r2, r3
 800e056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e058:	61fb      	str	r3, [r7, #28]
 800e05a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e05c:	69b9      	ldr	r1, [r7, #24]
 800e05e:	69fa      	ldr	r2, [r7, #28]
 800e060:	e841 2300 	strex	r3, r2, [r1]
 800e064:	617b      	str	r3, [r7, #20]
   return(result);
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d1e6      	bne.n	800e03a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e06c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e06e:	2200      	movs	r2, #0
 800e070:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e074:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e076:	2b01      	cmp	r3, #1
 800e078:	d107      	bne.n	800e08a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e07a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e07c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e080:	4619      	mov	r1, r3
 800e082:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e084:	f7ff f816 	bl	800d0b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e088:	e002      	b.n	800e090 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800e08a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e08c:	f007 ff4e 	bl	8015f2c <HAL_UART_RxCpltCallback>
}
 800e090:	bf00      	nop
 800e092:	3770      	adds	r7, #112	@ 0x70
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d109      	bne.n	800e0c8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e0ba:	085b      	lsrs	r3, r3, #1
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	4619      	mov	r1, r3
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	f7fe fff7 	bl	800d0b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e0c6:	e002      	b.n	800e0ce <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f007 ff07 	bl	8015edc <HAL_UART_RxHalfCpltCallback>
}
 800e0ce:	bf00      	nop
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b086      	sub	sp, #24
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e0f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	689b      	ldr	r3, [r3, #8]
 800e0fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0fe:	2b80      	cmp	r3, #128	@ 0x80
 800e100:	d109      	bne.n	800e116 <UART_DMAError+0x40>
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	2b21      	cmp	r3, #33	@ 0x21
 800e106:	d106      	bne.n	800e116 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e110:	6978      	ldr	r0, [r7, #20]
 800e112:	f7ff fe29 	bl	800dd68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e120:	2b40      	cmp	r3, #64	@ 0x40
 800e122:	d109      	bne.n	800e138 <UART_DMAError+0x62>
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2b22      	cmp	r3, #34	@ 0x22
 800e128:	d106      	bne.n	800e138 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e132:	6978      	ldr	r0, [r7, #20]
 800e134:	f7ff fe59 	bl	800ddea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e13e:	f043 0210 	orr.w	r2, r3, #16
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e148:	6978      	ldr	r0, [r7, #20]
 800e14a:	f7fe ffa9 	bl	800d0a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e14e:	bf00      	nop
 800e150:	3718      	adds	r7, #24
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b084      	sub	sp, #16
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e162:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2200      	movs	r2, #0
 800e168:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e174:	68f8      	ldr	r0, [r7, #12]
 800e176:	f7fe ff93 	bl	800d0a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e17a:	bf00      	nop
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e182:	b480      	push	{r7}
 800e184:	b08f      	sub	sp, #60	@ 0x3c
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e190:	2b21      	cmp	r3, #33	@ 0x21
 800e192:	d14c      	bne.n	800e22e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d132      	bne.n	800e206 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a6:	6a3b      	ldr	r3, [r7, #32]
 800e1a8:	e853 3f00 	ldrex	r3, [r3]
 800e1ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e1c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1c6:	e841 2300 	strex	r3, r2, [r1]
 800e1ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d1e6      	bne.n	800e1a0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	e853 3f00 	ldrex	r3, [r3]
 800e1de:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f0:	61bb      	str	r3, [r7, #24]
 800e1f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f4:	6979      	ldr	r1, [r7, #20]
 800e1f6:	69ba      	ldr	r2, [r7, #24]
 800e1f8:	e841 2300 	strex	r3, r2, [r1]
 800e1fc:	613b      	str	r3, [r7, #16]
   return(result);
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d1e6      	bne.n	800e1d2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e204:	e013      	b.n	800e22e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e20a:	781a      	ldrb	r2, [r3, #0]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e216:	1c5a      	adds	r2, r3, #1
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e222:	b29b      	uxth	r3, r3
 800e224:	3b01      	subs	r3, #1
 800e226:	b29a      	uxth	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e22e:	bf00      	nop
 800e230:	373c      	adds	r7, #60	@ 0x3c
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e23a:	b480      	push	{r7}
 800e23c:	b091      	sub	sp, #68	@ 0x44
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e248:	2b21      	cmp	r3, #33	@ 0x21
 800e24a:	d151      	bne.n	800e2f0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e252:	b29b      	uxth	r3, r3
 800e254:	2b00      	cmp	r3, #0
 800e256:	d132      	bne.n	800e2be <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e260:	e853 3f00 	ldrex	r3, [r3]
 800e264:	623b      	str	r3, [r7, #32]
   return(result);
 800e266:	6a3b      	ldr	r3, [r7, #32]
 800e268:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e26c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	461a      	mov	r2, r3
 800e274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e276:	633b      	str	r3, [r7, #48]	@ 0x30
 800e278:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e27a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e27c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e27e:	e841 2300 	strex	r3, r2, [r1]
 800e282:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e286:	2b00      	cmp	r3, #0
 800e288:	d1e6      	bne.n	800e258 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	e853 3f00 	ldrex	r3, [r3]
 800e296:	60fb      	str	r3, [r7, #12]
   return(result);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e29e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2a8:	61fb      	str	r3, [r7, #28]
 800e2aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ac:	69b9      	ldr	r1, [r7, #24]
 800e2ae:	69fa      	ldr	r2, [r7, #28]
 800e2b0:	e841 2300 	strex	r3, r2, [r1]
 800e2b4:	617b      	str	r3, [r7, #20]
   return(result);
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d1e6      	bne.n	800e28a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e2bc:	e018      	b.n	800e2f0 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e2c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2c6:	881b      	ldrh	r3, [r3, #0]
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e2d2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2d8:	1c9a      	adds	r2, r3, #2
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	b29a      	uxth	r2, r3
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e2f0:	bf00      	nop
 800e2f2:	3744      	adds	r7, #68	@ 0x44
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr

0800e2fc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b091      	sub	sp, #68	@ 0x44
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e30a:	2b21      	cmp	r3, #33	@ 0x21
 800e30c:	d160      	bne.n	800e3d0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e314:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e316:	e057      	b.n	800e3c8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e31e:	b29b      	uxth	r3, r3
 800e320:	2b00      	cmp	r3, #0
 800e322:	d133      	bne.n	800e38c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	3308      	adds	r3, #8
 800e32a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32e:	e853 3f00 	ldrex	r3, [r3]
 800e332:	623b      	str	r3, [r7, #32]
   return(result);
 800e334:	6a3b      	ldr	r3, [r7, #32]
 800e336:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e33a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	3308      	adds	r3, #8
 800e342:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e344:	633a      	str	r2, [r7, #48]	@ 0x30
 800e346:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e348:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e34a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e34c:	e841 2300 	strex	r3, r2, [r1]
 800e350:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e354:	2b00      	cmp	r3, #0
 800e356:	d1e5      	bne.n	800e324 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	e853 3f00 	ldrex	r3, [r3]
 800e364:	60fb      	str	r3, [r7, #12]
   return(result);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e36c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	461a      	mov	r2, r3
 800e374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e376:	61fb      	str	r3, [r7, #28]
 800e378:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37a:	69b9      	ldr	r1, [r7, #24]
 800e37c:	69fa      	ldr	r2, [r7, #28]
 800e37e:	e841 2300 	strex	r3, r2, [r1]
 800e382:	617b      	str	r3, [r7, #20]
   return(result);
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d1e6      	bne.n	800e358 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e38a:	e021      	b.n	800e3d0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	69db      	ldr	r3, [r3, #28]
 800e392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e396:	2b00      	cmp	r3, #0
 800e398:	d013      	beq.n	800e3c2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e39e:	781a      	ldrb	r2, [r3, #0]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3aa:	1c5a      	adds	r2, r3, #1
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	b29a      	uxth	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e3c2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e3c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d1a4      	bne.n	800e318 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e3ce:	e7ff      	b.n	800e3d0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800e3d0:	bf00      	nop
 800e3d2:	3744      	adds	r7, #68	@ 0x44
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b091      	sub	sp, #68	@ 0x44
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3ea:	2b21      	cmp	r3, #33	@ 0x21
 800e3ec:	d165      	bne.n	800e4ba <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e3f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e3f6:	e05c      	b.n	800e4b2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	2b00      	cmp	r3, #0
 800e402:	d133      	bne.n	800e46c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	3308      	adds	r3, #8
 800e40a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e40c:	6a3b      	ldr	r3, [r7, #32]
 800e40e:	e853 3f00 	ldrex	r3, [r3]
 800e412:	61fb      	str	r3, [r7, #28]
   return(result);
 800e414:	69fb      	ldr	r3, [r7, #28]
 800e416:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e41a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	3308      	adds	r3, #8
 800e422:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e424:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e426:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e42a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e42c:	e841 2300 	strex	r3, r2, [r1]
 800e430:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e434:	2b00      	cmp	r3, #0
 800e436:	d1e5      	bne.n	800e404 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	e853 3f00 	ldrex	r3, [r3]
 800e444:	60bb      	str	r3, [r7, #8]
   return(result);
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e44c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	461a      	mov	r2, r3
 800e454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e456:	61bb      	str	r3, [r7, #24]
 800e458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45a:	6979      	ldr	r1, [r7, #20]
 800e45c:	69ba      	ldr	r2, [r7, #24]
 800e45e:	e841 2300 	strex	r3, r2, [r1]
 800e462:	613b      	str	r3, [r7, #16]
   return(result);
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1e6      	bne.n	800e438 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e46a:	e026      	b.n	800e4ba <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	69db      	ldr	r3, [r3, #28]
 800e472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e476:	2b00      	cmp	r3, #0
 800e478:	d018      	beq.n	800e4ac <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e47e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e482:	881b      	ldrh	r3, [r3, #0]
 800e484:	461a      	mov	r2, r3
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e48e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e494:	1c9a      	adds	r2, r3, #2
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	3b01      	subs	r3, #1
 800e4a4:	b29a      	uxth	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e4ac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e4ae:	3b01      	subs	r3, #1
 800e4b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e4b2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d19f      	bne.n	800e3f8 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e4b8:	e7ff      	b.n	800e4ba <UART_TxISR_16BIT_FIFOEN+0xde>
 800e4ba:	bf00      	nop
 800e4bc:	3744      	adds	r7, #68	@ 0x44
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr

0800e4c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b088      	sub	sp, #32
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	e853 3f00 	ldrex	r3, [r3]
 800e4da:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e4e2:	61fb      	str	r3, [r7, #28]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	61bb      	str	r3, [r7, #24]
 800e4ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f0:	6979      	ldr	r1, [r7, #20]
 800e4f2:	69ba      	ldr	r2, [r7, #24]
 800e4f4:	e841 2300 	strex	r3, r2, [r1]
 800e4f8:	613b      	str	r3, [r7, #16]
   return(result);
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1e6      	bne.n	800e4ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2220      	movs	r2, #32
 800e504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7fe fdb2 	bl	800d078 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e514:	bf00      	nop
 800e516:	3720      	adds	r7, #32
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b09c      	sub	sp, #112	@ 0x70
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e52a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e534:	2b22      	cmp	r3, #34	@ 0x22
 800e536:	f040 80be 	bne.w	800e6b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e540:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e544:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e548:	b2d9      	uxtb	r1, r3
 800e54a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e54e:	b2da      	uxtb	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e554:	400a      	ands	r2, r1
 800e556:	b2d2      	uxtb	r2, r2
 800e558:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e55e:	1c5a      	adds	r2, r3, #1
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	3b01      	subs	r3, #1
 800e56e:	b29a      	uxth	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	2b00      	cmp	r3, #0
 800e580:	f040 80a1 	bne.w	800e6c6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e58a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e58c:	e853 3f00 	ldrex	r3, [r3]
 800e590:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e598:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	461a      	mov	r2, r3
 800e5a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e5a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e5a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e5a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e5aa:	e841 2300 	strex	r3, r2, [r1]
 800e5ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e5b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1e6      	bne.n	800e584 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	3308      	adds	r3, #8
 800e5bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c0:	e853 3f00 	ldrex	r3, [r3]
 800e5c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5c8:	f023 0301 	bic.w	r3, r3, #1
 800e5cc:	667b      	str	r3, [r7, #100]	@ 0x64
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	3308      	adds	r3, #8
 800e5d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e5d6:	647a      	str	r2, [r7, #68]	@ 0x44
 800e5d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e5dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e5de:	e841 2300 	strex	r3, r2, [r1]
 800e5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1e5      	bne.n	800e5b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2220      	movs	r2, #32
 800e5ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4a33      	ldr	r2, [pc, #204]	@ (800e6d0 <UART_RxISR_8BIT+0x1b4>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d01f      	beq.n	800e648 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e612:	2b00      	cmp	r3, #0
 800e614:	d018      	beq.n	800e648 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e61e:	e853 3f00 	ldrex	r3, [r3]
 800e622:	623b      	str	r3, [r7, #32]
   return(result);
 800e624:	6a3b      	ldr	r3, [r7, #32]
 800e626:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e62a:	663b      	str	r3, [r7, #96]	@ 0x60
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	461a      	mov	r2, r3
 800e632:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e634:	633b      	str	r3, [r7, #48]	@ 0x30
 800e636:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e638:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e63a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e63c:	e841 2300 	strex	r3, r2, [r1]
 800e640:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e644:	2b00      	cmp	r3, #0
 800e646:	d1e6      	bne.n	800e616 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d12e      	bne.n	800e6ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2200      	movs	r2, #0
 800e654:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	e853 3f00 	ldrex	r3, [r3]
 800e662:	60fb      	str	r3, [r7, #12]
   return(result);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f023 0310 	bic.w	r3, r3, #16
 800e66a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	461a      	mov	r2, r3
 800e672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e674:	61fb      	str	r3, [r7, #28]
 800e676:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e678:	69b9      	ldr	r1, [r7, #24]
 800e67a:	69fa      	ldr	r2, [r7, #28]
 800e67c:	e841 2300 	strex	r3, r2, [r1]
 800e680:	617b      	str	r3, [r7, #20]
   return(result);
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d1e6      	bne.n	800e656 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	69db      	ldr	r3, [r3, #28]
 800e68e:	f003 0310 	and.w	r3, r3, #16
 800e692:	2b10      	cmp	r3, #16
 800e694:	d103      	bne.n	800e69e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2210      	movs	r2, #16
 800e69c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7fe fd04 	bl	800d0b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e6ac:	e00b      	b.n	800e6c6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f007 fc3c 	bl	8015f2c <HAL_UART_RxCpltCallback>
}
 800e6b4:	e007      	b.n	800e6c6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	699a      	ldr	r2, [r3, #24]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f042 0208 	orr.w	r2, r2, #8
 800e6c4:	619a      	str	r2, [r3, #24]
}
 800e6c6:	bf00      	nop
 800e6c8:	3770      	adds	r7, #112	@ 0x70
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	40008000 	.word	0x40008000

0800e6d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b09c      	sub	sp, #112	@ 0x70
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e6e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6ec:	2b22      	cmp	r3, #34	@ 0x22
 800e6ee:	f040 80be 	bne.w	800e86e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e700:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e702:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e706:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e70a:	4013      	ands	r3, r2
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e710:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e716:	1c9a      	adds	r2, r3, #2
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e722:	b29b      	uxth	r3, r3
 800e724:	3b01      	subs	r3, #1
 800e726:	b29a      	uxth	r2, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e734:	b29b      	uxth	r3, r3
 800e736:	2b00      	cmp	r3, #0
 800e738:	f040 80a1 	bne.w	800e87e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e744:	e853 3f00 	ldrex	r3, [r3]
 800e748:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e74a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e74c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e750:	667b      	str	r3, [r7, #100]	@ 0x64
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	461a      	mov	r2, r3
 800e758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e75a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e75c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e760:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e762:	e841 2300 	strex	r3, r2, [r1]
 800e766:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d1e6      	bne.n	800e73c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	3308      	adds	r3, #8
 800e774:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e778:	e853 3f00 	ldrex	r3, [r3]
 800e77c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e780:	f023 0301 	bic.w	r3, r3, #1
 800e784:	663b      	str	r3, [r7, #96]	@ 0x60
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	3308      	adds	r3, #8
 800e78c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e78e:	643a      	str	r2, [r7, #64]	@ 0x40
 800e790:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e792:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e794:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e796:	e841 2300 	strex	r3, r2, [r1]
 800e79a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d1e5      	bne.n	800e76e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2220      	movs	r2, #32
 800e7a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4a33      	ldr	r2, [pc, #204]	@ (800e888 <UART_RxISR_16BIT+0x1b4>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d01f      	beq.n	800e800 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d018      	beq.n	800e800 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d4:	6a3b      	ldr	r3, [r7, #32]
 800e7d6:	e853 3f00 	ldrex	r3, [r3]
 800e7da:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e7e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e7ee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7f4:	e841 2300 	strex	r3, r2, [r1]
 800e7f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d1e6      	bne.n	800e7ce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e804:	2b01      	cmp	r3, #1
 800e806:	d12e      	bne.n	800e866 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	e853 3f00 	ldrex	r3, [r3]
 800e81a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	f023 0310 	bic.w	r3, r3, #16
 800e822:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	461a      	mov	r2, r3
 800e82a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e82c:	61bb      	str	r3, [r7, #24]
 800e82e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e830:	6979      	ldr	r1, [r7, #20]
 800e832:	69ba      	ldr	r2, [r7, #24]
 800e834:	e841 2300 	strex	r3, r2, [r1]
 800e838:	613b      	str	r3, [r7, #16]
   return(result);
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d1e6      	bne.n	800e80e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	69db      	ldr	r3, [r3, #28]
 800e846:	f003 0310 	and.w	r3, r3, #16
 800e84a:	2b10      	cmp	r3, #16
 800e84c:	d103      	bne.n	800e856 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	2210      	movs	r2, #16
 800e854:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e85c:	4619      	mov	r1, r3
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f7fe fc28 	bl	800d0b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e864:	e00b      	b.n	800e87e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f007 fb60 	bl	8015f2c <HAL_UART_RxCpltCallback>
}
 800e86c:	e007      	b.n	800e87e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	699a      	ldr	r2, [r3, #24]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f042 0208 	orr.w	r2, r2, #8
 800e87c:	619a      	str	r2, [r3, #24]
}
 800e87e:	bf00      	nop
 800e880:	3770      	adds	r7, #112	@ 0x70
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	40008000 	.word	0x40008000

0800e88c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b0ac      	sub	sp, #176	@ 0xb0
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e89a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	69db      	ldr	r3, [r3, #28]
 800e8a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	689b      	ldr	r3, [r3, #8]
 800e8b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e8c2:	2b22      	cmp	r3, #34	@ 0x22
 800e8c4:	f040 8183 	bne.w	800ebce <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e8ce:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e8d2:	e126      	b.n	800eb22 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8da:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e8de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e8e2:	b2d9      	uxtb	r1, r3
 800e8e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e8e8:	b2da      	uxtb	r2, r3
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8ee:	400a      	ands	r2, r1
 800e8f0:	b2d2      	uxtb	r2, r2
 800e8f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8f8:	1c5a      	adds	r2, r3, #1
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e904:	b29b      	uxth	r3, r3
 800e906:	3b01      	subs	r3, #1
 800e908:	b29a      	uxth	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	69db      	ldr	r3, [r3, #28]
 800e916:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e91a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e91e:	f003 0307 	and.w	r3, r3, #7
 800e922:	2b00      	cmp	r3, #0
 800e924:	d053      	beq.n	800e9ce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e92a:	f003 0301 	and.w	r3, r3, #1
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d011      	beq.n	800e956 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00b      	beq.n	800e956 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	2201      	movs	r2, #1
 800e944:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e94c:	f043 0201 	orr.w	r2, r3, #1
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e95a:	f003 0302 	and.w	r3, r3, #2
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d011      	beq.n	800e986 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e966:	f003 0301 	and.w	r3, r3, #1
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d00b      	beq.n	800e986 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2202      	movs	r2, #2
 800e974:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e97c:	f043 0204 	orr.w	r2, r3, #4
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e98a:	f003 0304 	and.w	r3, r3, #4
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d011      	beq.n	800e9b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e996:	f003 0301 	and.w	r3, r3, #1
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00b      	beq.n	800e9b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2204      	movs	r2, #4
 800e9a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9ac:	f043 0202 	orr.w	r2, r3, #2
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d006      	beq.n	800e9ce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f7fe fb6d 	bl	800d0a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f040 80a3 	bne.w	800eb22 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e9e4:	e853 3f00 	ldrex	r3, [r3]
 800e9e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e9ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e9ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e9f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e9fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ea00:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea02:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ea04:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ea06:	e841 2300 	strex	r3, r2, [r1]
 800ea0a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ea0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d1e4      	bne.n	800e9dc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	3308      	adds	r3, #8
 800ea18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea1c:	e853 3f00 	ldrex	r3, [r3]
 800ea20:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ea22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ea28:	f023 0301 	bic.w	r3, r3, #1
 800ea2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	3308      	adds	r3, #8
 800ea36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ea3a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ea3c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ea40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ea42:	e841 2300 	strex	r3, r2, [r1]
 800ea46:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ea48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1e1      	bne.n	800ea12 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2220      	movs	r2, #32
 800ea52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4a60      	ldr	r2, [pc, #384]	@ (800ebe8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d021      	beq.n	800eab0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d01a      	beq.n	800eab0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea82:	e853 3f00 	ldrex	r3, [r3]
 800ea86:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ea88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ea8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	461a      	mov	r2, r3
 800ea98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ea9c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea9e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eaa2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eaa4:	e841 2300 	strex	r3, r2, [r1]
 800eaa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800eaaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d1e4      	bne.n	800ea7a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d130      	bne.n	800eb1a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eac6:	e853 3f00 	ldrex	r3, [r3]
 800eaca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eace:	f023 0310 	bic.w	r3, r3, #16
 800ead2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	461a      	mov	r2, r3
 800eadc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eae0:	643b      	str	r3, [r7, #64]	@ 0x40
 800eae2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eae6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eae8:	e841 2300 	strex	r3, r2, [r1]
 800eaec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eaee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d1e4      	bne.n	800eabe <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	69db      	ldr	r3, [r3, #28]
 800eafa:	f003 0310 	and.w	r3, r3, #16
 800eafe:	2b10      	cmp	r3, #16
 800eb00:	d103      	bne.n	800eb0a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2210      	movs	r2, #16
 800eb08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eb10:	4619      	mov	r1, r3
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7fe face 	bl	800d0b4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800eb18:	e00e      	b.n	800eb38 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f007 fa06 	bl	8015f2c <HAL_UART_RxCpltCallback>
        break;
 800eb20:	e00a      	b.n	800eb38 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eb22:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d006      	beq.n	800eb38 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800eb2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb2e:	f003 0320 	and.w	r3, r3, #32
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	f47f aece 	bne.w	800e8d4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb3e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800eb42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d049      	beq.n	800ebde <UART_RxISR_8BIT_FIFOEN+0x352>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800eb50:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d242      	bcs.n	800ebde <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	3308      	adds	r3, #8
 800eb5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb60:	6a3b      	ldr	r3, [r7, #32]
 800eb62:	e853 3f00 	ldrex	r3, [r3]
 800eb66:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb68:	69fb      	ldr	r3, [r7, #28]
 800eb6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eb6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	3308      	adds	r3, #8
 800eb78:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800eb7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eb7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb84:	e841 2300 	strex	r3, r2, [r1]
 800eb88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d1e3      	bne.n	800eb58 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	4a16      	ldr	r2, [pc, #88]	@ (800ebec <UART_RxISR_8BIT_FIFOEN+0x360>)
 800eb94:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	e853 3f00 	ldrex	r3, [r3]
 800eba2:	60bb      	str	r3, [r7, #8]
   return(result);
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	f043 0320 	orr.w	r3, r3, #32
 800ebaa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ebb8:	61bb      	str	r3, [r7, #24]
 800ebba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebbc:	6979      	ldr	r1, [r7, #20]
 800ebbe:	69ba      	ldr	r2, [r7, #24]
 800ebc0:	e841 2300 	strex	r3, r2, [r1]
 800ebc4:	613b      	str	r3, [r7, #16]
   return(result);
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d1e4      	bne.n	800eb96 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ebcc:	e007      	b.n	800ebde <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	699a      	ldr	r2, [r3, #24]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f042 0208 	orr.w	r2, r2, #8
 800ebdc:	619a      	str	r2, [r3, #24]
}
 800ebde:	bf00      	nop
 800ebe0:	37b0      	adds	r7, #176	@ 0xb0
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	40008000 	.word	0x40008000
 800ebec:	0800e51d 	.word	0x0800e51d

0800ebf0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b0ae      	sub	sp, #184	@ 0xb8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ebfe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	69db      	ldr	r3, [r3, #28]
 800ec08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	689b      	ldr	r3, [r3, #8]
 800ec1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec26:	2b22      	cmp	r3, #34	@ 0x22
 800ec28:	f040 8187 	bne.w	800ef3a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ec32:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ec36:	e12a      	b.n	800ee8e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec3e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ec4a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ec4e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ec52:	4013      	ands	r3, r2
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ec5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec60:	1c9a      	adds	r2, r3, #2
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	3b01      	subs	r3, #1
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	69db      	ldr	r3, [r3, #28]
 800ec7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ec82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec86:	f003 0307 	and.w	r3, r3, #7
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d053      	beq.n	800ed36 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ec8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec92:	f003 0301 	and.w	r3, r3, #1
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d011      	beq.n	800ecbe <UART_RxISR_16BIT_FIFOEN+0xce>
 800ec9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d00b      	beq.n	800ecbe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecb4:	f043 0201 	orr.w	r2, r3, #1
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ecbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ecc2:	f003 0302 	and.w	r3, r3, #2
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d011      	beq.n	800ecee <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ecca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ecce:	f003 0301 	and.w	r3, r3, #1
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d00b      	beq.n	800ecee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	2202      	movs	r2, #2
 800ecdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ece4:	f043 0204 	orr.w	r2, r3, #4
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ecee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ecf2:	f003 0304 	and.w	r3, r3, #4
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d011      	beq.n	800ed1e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ecfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ecfe:	f003 0301 	and.w	r3, r3, #1
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d00b      	beq.n	800ed1e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	2204      	movs	r2, #4
 800ed0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed14:	f043 0202 	orr.w	r2, r3, #2
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d006      	beq.n	800ed36 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f7fe f9b9 	bl	800d0a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	f040 80a5 	bne.w	800ee8e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ed4c:	e853 3f00 	ldrex	r3, [r3]
 800ed50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ed52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ed54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	461a      	mov	r2, r3
 800ed62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ed66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ed6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ed6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ed72:	e841 2300 	strex	r3, r2, [r1]
 800ed76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ed78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d1e2      	bne.n	800ed44 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	3308      	adds	r3, #8
 800ed84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ed88:	e853 3f00 	ldrex	r3, [r3]
 800ed8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ed8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ed94:	f023 0301 	bic.w	r3, r3, #1
 800ed98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	3308      	adds	r3, #8
 800eda2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800eda6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800eda8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edaa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800edac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800edae:	e841 2300 	strex	r3, r2, [r1]
 800edb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800edb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1e1      	bne.n	800ed7e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2220      	movs	r2, #32
 800edbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4a60      	ldr	r2, [pc, #384]	@ (800ef54 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d021      	beq.n	800ee1c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d01a      	beq.n	800ee1c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800edee:	e853 3f00 	ldrex	r3, [r3]
 800edf2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800edf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800edf6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800edfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	461a      	mov	r2, r3
 800ee04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ee08:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee0a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ee0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ee10:	e841 2300 	strex	r3, r2, [r1]
 800ee14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ee16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d1e4      	bne.n	800ede6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d130      	bne.n	800ee86 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee32:	e853 3f00 	ldrex	r3, [r3]
 800ee36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ee38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee3a:	f023 0310 	bic.w	r3, r3, #16
 800ee3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	461a      	mov	r2, r3
 800ee48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ee4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ee52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ee54:	e841 2300 	strex	r3, r2, [r1]
 800ee58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ee5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d1e4      	bne.n	800ee2a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	69db      	ldr	r3, [r3, #28]
 800ee66:	f003 0310 	and.w	r3, r3, #16
 800ee6a:	2b10      	cmp	r3, #16
 800ee6c:	d103      	bne.n	800ee76 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	2210      	movs	r2, #16
 800ee74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f7fe f918 	bl	800d0b4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ee84:	e00e      	b.n	800eea4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f007 f850 	bl	8015f2c <HAL_UART_RxCpltCallback>
        break;
 800ee8c:	e00a      	b.n	800eea4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ee8e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d006      	beq.n	800eea4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800ee96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ee9a:	f003 0320 	and.w	r3, r3, #32
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	f47f aeca 	bne.w	800ec38 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eeaa:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800eeae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d049      	beq.n	800ef4a <UART_RxISR_16BIT_FIFOEN+0x35a>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800eebc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d242      	bcs.n	800ef4a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	3308      	adds	r3, #8
 800eeca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eece:	e853 3f00 	ldrex	r3, [r3]
 800eed2:	623b      	str	r3, [r7, #32]
   return(result);
 800eed4:	6a3b      	ldr	r3, [r7, #32]
 800eed6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eeda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	3308      	adds	r3, #8
 800eee4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800eee8:	633a      	str	r2, [r7, #48]	@ 0x30
 800eeea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eeee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eef0:	e841 2300 	strex	r3, r2, [r1]
 800eef4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d1e3      	bne.n	800eec4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	4a16      	ldr	r2, [pc, #88]	@ (800ef58 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800ef00:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	e853 3f00 	ldrex	r3, [r3]
 800ef0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f043 0320 	orr.w	r3, r3, #32
 800ef16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	461a      	mov	r2, r3
 800ef20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ef24:	61fb      	str	r3, [r7, #28]
 800ef26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef28:	69b9      	ldr	r1, [r7, #24]
 800ef2a:	69fa      	ldr	r2, [r7, #28]
 800ef2c:	e841 2300 	strex	r3, r2, [r1]
 800ef30:	617b      	str	r3, [r7, #20]
   return(result);
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d1e4      	bne.n	800ef02 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ef38:	e007      	b.n	800ef4a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	699a      	ldr	r2, [r3, #24]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f042 0208 	orr.w	r2, r2, #8
 800ef48:	619a      	str	r2, [r3, #24]
}
 800ef4a:	bf00      	nop
 800ef4c:	37b8      	adds	r7, #184	@ 0xb8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	40008000 	.word	0x40008000
 800ef58:	0800e6d5 	.word	0x0800e6d5

0800ef5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ef64:	bf00      	nop
 800ef66:	370c      	adds	r7, #12
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr

0800ef70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ef78:	bf00      	nop
 800ef7a:	370c      	adds	r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b083      	sub	sp, #12
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ef8c:	bf00      	nop
 800ef8e:	370c      	adds	r7, #12
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b085      	sub	sp, #20
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d101      	bne.n	800efae <HAL_UARTEx_DisableFifoMode+0x16>
 800efaa:	2302      	movs	r3, #2
 800efac:	e027      	b.n	800effe <HAL_UARTEx_DisableFifoMode+0x66>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2201      	movs	r2, #1
 800efb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2224      	movs	r2, #36	@ 0x24
 800efba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f022 0201 	bic.w	r2, r2, #1
 800efd4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800efdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	68fa      	ldr	r2, [r7, #12]
 800efea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2220      	movs	r2, #32
 800eff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2200      	movs	r2, #0
 800eff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800effc:	2300      	movs	r3, #0
}
 800effe:	4618      	mov	r0, r3
 800f000:	3714      	adds	r7, #20
 800f002:	46bd      	mov	sp, r7
 800f004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f008:	4770      	bx	lr

0800f00a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f00a:	b580      	push	{r7, lr}
 800f00c:	b084      	sub	sp, #16
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
 800f012:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d101      	bne.n	800f022 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f01e:	2302      	movs	r3, #2
 800f020:	e02d      	b.n	800f07e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2201      	movs	r2, #1
 800f026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2224      	movs	r2, #36	@ 0x24
 800f02e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f022 0201 	bic.w	r2, r2, #1
 800f048:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	683a      	ldr	r2, [r7, #0]
 800f05a:	430a      	orrs	r2, r1
 800f05c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 f850 	bl	800f104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2220      	movs	r2, #32
 800f070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2200      	movs	r2, #0
 800f078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b084      	sub	sp, #16
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
 800f08e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f096:	2b01      	cmp	r3, #1
 800f098:	d101      	bne.n	800f09e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f09a:	2302      	movs	r3, #2
 800f09c:	e02d      	b.n	800f0fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2224      	movs	r2, #36	@ 0x24
 800f0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f022 0201 	bic.w	r2, r2, #1
 800f0c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	689b      	ldr	r3, [r3, #8]
 800f0cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	683a      	ldr	r2, [r7, #0]
 800f0d6:	430a      	orrs	r2, r1
 800f0d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 f812 	bl	800f104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	68fa      	ldr	r2, [r7, #12]
 800f0e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2220      	movs	r2, #32
 800f0ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f0f8:	2300      	movs	r3, #0
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3710      	adds	r7, #16
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
	...

0800f104 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f104:	b480      	push	{r7}
 800f106:	b085      	sub	sp, #20
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f110:	2b00      	cmp	r3, #0
 800f112:	d108      	bne.n	800f126 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2201      	movs	r2, #1
 800f118:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2201      	movs	r2, #1
 800f120:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f124:	e031      	b.n	800f18a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f126:	2308      	movs	r3, #8
 800f128:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f12a:	2308      	movs	r3, #8
 800f12c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	0e5b      	lsrs	r3, r3, #25
 800f136:	b2db      	uxtb	r3, r3
 800f138:	f003 0307 	and.w	r3, r3, #7
 800f13c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	689b      	ldr	r3, [r3, #8]
 800f144:	0f5b      	lsrs	r3, r3, #29
 800f146:	b2db      	uxtb	r3, r3
 800f148:	f003 0307 	and.w	r3, r3, #7
 800f14c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f14e:	7bbb      	ldrb	r3, [r7, #14]
 800f150:	7b3a      	ldrb	r2, [r7, #12]
 800f152:	4911      	ldr	r1, [pc, #68]	@ (800f198 <UARTEx_SetNbDataToProcess+0x94>)
 800f154:	5c8a      	ldrb	r2, [r1, r2]
 800f156:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f15a:	7b3a      	ldrb	r2, [r7, #12]
 800f15c:	490f      	ldr	r1, [pc, #60]	@ (800f19c <UARTEx_SetNbDataToProcess+0x98>)
 800f15e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f160:	fb93 f3f2 	sdiv	r3, r3, r2
 800f164:	b29a      	uxth	r2, r3
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f16c:	7bfb      	ldrb	r3, [r7, #15]
 800f16e:	7b7a      	ldrb	r2, [r7, #13]
 800f170:	4909      	ldr	r1, [pc, #36]	@ (800f198 <UARTEx_SetNbDataToProcess+0x94>)
 800f172:	5c8a      	ldrb	r2, [r1, r2]
 800f174:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f178:	7b7a      	ldrb	r2, [r7, #13]
 800f17a:	4908      	ldr	r1, [pc, #32]	@ (800f19c <UARTEx_SetNbDataToProcess+0x98>)
 800f17c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f17e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f182:	b29a      	uxth	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f18a:	bf00      	nop
 800f18c:	3714      	adds	r7, #20
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop
 800f198:	0801c1e8 	.word	0x0801c1e8
 800f19c:	0801c1f0 	.word	0x0801c1f0

0800f1a0 <LL_DMA_ConfigTransfer>:
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b087      	sub	sp, #28
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800f1b0:	4a0e      	ldr	r2, [pc, #56]	@ (800f1ec <LL_DMA_ConfigTransfer+0x4c>)
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	4413      	add	r3, r2
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800f1c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f1c8:	4908      	ldr	r1, [pc, #32]	@ (800f1ec <LL_DMA_ConfigTransfer+0x4c>)
 800f1ca:	68ba      	ldr	r2, [r7, #8]
 800f1cc:	440a      	add	r2, r1
 800f1ce:	7812      	ldrb	r2, [r2, #0]
 800f1d0:	4611      	mov	r1, r2
 800f1d2:	697a      	ldr	r2, [r7, #20]
 800f1d4:	440a      	add	r2, r1
 800f1d6:	4611      	mov	r1, r2
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	4313      	orrs	r3, r2
 800f1dc:	600b      	str	r3, [r1, #0]
}
 800f1de:	bf00      	nop
 800f1e0:	371c      	adds	r7, #28
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	0801c1f8 	.word	0x0801c1f8

0800f1f0 <LL_DMA_SetDataLength>:
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b087      	sub	sp, #28
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800f200:	4a0d      	ldr	r2, [pc, #52]	@ (800f238 <LL_DMA_SetDataLength+0x48>)
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	4413      	add	r3, r2
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	461a      	mov	r2, r3
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	4413      	add	r3, r2
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	0c1b      	lsrs	r3, r3, #16
 800f212:	041b      	lsls	r3, r3, #16
 800f214:	4908      	ldr	r1, [pc, #32]	@ (800f238 <LL_DMA_SetDataLength+0x48>)
 800f216:	68ba      	ldr	r2, [r7, #8]
 800f218:	440a      	add	r2, r1
 800f21a:	7812      	ldrb	r2, [r2, #0]
 800f21c:	4611      	mov	r1, r2
 800f21e:	697a      	ldr	r2, [r7, #20]
 800f220:	440a      	add	r2, r1
 800f222:	4611      	mov	r1, r2
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	4313      	orrs	r3, r2
 800f228:	604b      	str	r3, [r1, #4]
}
 800f22a:	bf00      	nop
 800f22c:	371c      	adds	r7, #28
 800f22e:	46bd      	mov	sp, r7
 800f230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f234:	4770      	bx	lr
 800f236:	bf00      	nop
 800f238:	0801c1f8 	.word	0x0801c1f8

0800f23c <LL_DMA_SetMemoryAddress>:
{
 800f23c:	b480      	push	{r7}
 800f23e:	b087      	sub	sp, #28
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800f24c:	4a07      	ldr	r2, [pc, #28]	@ (800f26c <LL_DMA_SetMemoryAddress+0x30>)
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	4413      	add	r3, r2
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	461a      	mov	r2, r3
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	4413      	add	r3, r2
 800f25a:	461a      	mov	r2, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	60d3      	str	r3, [r2, #12]
}
 800f260:	bf00      	nop
 800f262:	371c      	adds	r7, #28
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr
 800f26c:	0801c1f8 	.word	0x0801c1f8

0800f270 <LL_DMA_SetPeriphAddress>:
{
 800f270:	b480      	push	{r7}
 800f272:	b087      	sub	sp, #28
 800f274:	af00      	add	r7, sp, #0
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800f280:	4a07      	ldr	r2, [pc, #28]	@ (800f2a0 <LL_DMA_SetPeriphAddress+0x30>)
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	4413      	add	r3, r2
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	461a      	mov	r2, r3
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	4413      	add	r3, r2
 800f28e:	461a      	mov	r2, r3
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6093      	str	r3, [r2, #8]
}
 800f294:	bf00      	nop
 800f296:	371c      	adds	r7, #28
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr
 800f2a0:	0801c1f8 	.word	0x0801c1f8

0800f2a4 <LL_DMA_SetPeriphRequest>:
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b087      	sub	sp, #28
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	0a9b      	lsrs	r3, r3, #10
 800f2b4:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800f2b8:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 800f2bc:	00db      	lsls	r3, r3, #3
 800f2be:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800f2c0:	68ba      	ldr	r2, [r7, #8]
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2cc:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800f2d6:	68ba      	ldr	r2, [r7, #8]
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	4413      	add	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2e2:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	430a      	orrs	r2, r1
 800f2ea:	601a      	str	r2, [r3, #0]
}
 800f2ec:	bf00      	nop
 800f2ee:	371c      	adds	r7, #28
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	60f8      	str	r0, [r7, #12]
 800f300:	60b9      	str	r1, [r7, #8]
 800f302:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f30c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800f312:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800f318:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800f31e:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800f324:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f32a:	4313      	orrs	r3, r2
 800f32c:	461a      	mov	r2, r3
 800f32e:	68b9      	ldr	r1, [r7, #8]
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f7ff ff35 	bl	800f1a0 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	461a      	mov	r2, r3
 800f33c:	68b9      	ldr	r1, [r7, #8]
 800f33e:	68f8      	ldr	r0, [r7, #12]
 800f340:	f7ff ff7c 	bl	800f23c <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	461a      	mov	r2, r3
 800f34a:	68b9      	ldr	r1, [r7, #8]
 800f34c:	68f8      	ldr	r0, [r7, #12]
 800f34e:	f7ff ff8f 	bl	800f270 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6a1b      	ldr	r3, [r3, #32]
 800f356:	461a      	mov	r2, r3
 800f358:	68b9      	ldr	r1, [r7, #8]
 800f35a:	68f8      	ldr	r0, [r7, #12]
 800f35c:	f7ff ff48 	bl	800f1f0 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f364:	461a      	mov	r2, r3
 800f366:	68b9      	ldr	r1, [r7, #8]
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	f7ff ff9b 	bl	800f2a4 <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 800f36e:	2300      	movs	r3, #0
}
 800f370:	4618      	mov	r0, r3
 800f372:	3710      	adds	r7, #16
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800f378:	b480      	push	{r7}
 800f37a:	b083      	sub	sp, #12
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = (uint32_t)0x00000000U;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = (uint32_t)0x00000000U;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2200      	movs	r2, #0
 800f38a:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2200      	movs	r2, #0
 800f390:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2200      	movs	r2, #0
 800f396:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2200      	movs	r2, #0
 800f39c:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = (uint32_t)0x00000000U;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f3c2:	bf00      	nop
 800f3c4:	370c      	adds	r7, #12
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr

0800f3ce <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800f3ce:	b480      	push	{r7}
 800f3d0:	b08b      	sub	sp, #44	@ 0x2c
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	60f8      	str	r0, [r7, #12]
 800f3d6:	60b9      	str	r1, [r7, #8]
 800f3d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	fa93 f3a3 	rbit	r3, r3
 800f3e8:	613b      	str	r3, [r7, #16]
  return result;
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d101      	bne.n	800f3f8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800f3f4:	2320      	movs	r3, #32
 800f3f6:	e003      	b.n	800f400 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	fab3 f383 	clz	r3, r3
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	005b      	lsls	r3, r3, #1
 800f402:	2103      	movs	r1, #3
 800f404:	fa01 f303 	lsl.w	r3, r1, r3
 800f408:	43db      	mvns	r3, r3
 800f40a:	401a      	ands	r2, r3
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f410:	6a3b      	ldr	r3, [r7, #32]
 800f412:	fa93 f3a3 	rbit	r3, r3
 800f416:	61fb      	str	r3, [r7, #28]
  return result;
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d101      	bne.n	800f426 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800f422:	2320      	movs	r3, #32
 800f424:	e003      	b.n	800f42e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800f426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f428:	fab3 f383 	clz	r3, r3
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	005b      	lsls	r3, r3, #1
 800f430:	6879      	ldr	r1, [r7, #4]
 800f432:	fa01 f303 	lsl.w	r3, r1, r3
 800f436:	431a      	orrs	r2, r3
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	601a      	str	r2, [r3, #0]
}
 800f43c:	bf00      	nop
 800f43e:	372c      	adds	r7, #44	@ 0x2c
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800f448:	b480      	push	{r7}
 800f44a:	b085      	sub	sp, #20
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	60b9      	str	r1, [r7, #8]
 800f452:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	685a      	ldr	r2, [r3, #4]
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	43db      	mvns	r3, r3
 800f45c:	401a      	ands	r2, r3
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	6879      	ldr	r1, [r7, #4]
 800f462:	fb01 f303 	mul.w	r3, r1, r3
 800f466:	431a      	orrs	r2, r3
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	605a      	str	r2, [r3, #4]
}
 800f46c:	bf00      	nop
 800f46e:	3714      	adds	r7, #20
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800f478:	b480      	push	{r7}
 800f47a:	b08b      	sub	sp, #44	@ 0x2c
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	689a      	ldr	r2, [r3, #8]
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	fa93 f3a3 	rbit	r3, r3
 800f492:	613b      	str	r3, [r7, #16]
  return result;
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d101      	bne.n	800f4a2 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800f49e:	2320      	movs	r3, #32
 800f4a0:	e003      	b.n	800f4aa <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800f4a2:	69bb      	ldr	r3, [r7, #24]
 800f4a4:	fab3 f383 	clz	r3, r3
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	005b      	lsls	r3, r3, #1
 800f4ac:	2103      	movs	r1, #3
 800f4ae:	fa01 f303 	lsl.w	r3, r1, r3
 800f4b2:	43db      	mvns	r3, r3
 800f4b4:	401a      	ands	r2, r3
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f4ba:	6a3b      	ldr	r3, [r7, #32]
 800f4bc:	fa93 f3a3 	rbit	r3, r3
 800f4c0:	61fb      	str	r3, [r7, #28]
  return result;
 800f4c2:	69fb      	ldr	r3, [r7, #28]
 800f4c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d101      	bne.n	800f4d0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800f4cc:	2320      	movs	r3, #32
 800f4ce:	e003      	b.n	800f4d8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d2:	fab3 f383 	clz	r3, r3
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	6879      	ldr	r1, [r7, #4]
 800f4dc:	fa01 f303 	lsl.w	r3, r1, r3
 800f4e0:	431a      	orrs	r2, r3
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800f4e6:	bf00      	nop
 800f4e8:	372c      	adds	r7, #44	@ 0x2c
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr

0800f4f2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800f4f2:	b480      	push	{r7}
 800f4f4:	b08b      	sub	sp, #44	@ 0x2c
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	60f8      	str	r0, [r7, #12]
 800f4fa:	60b9      	str	r1, [r7, #8]
 800f4fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	68da      	ldr	r2, [r3, #12]
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	fa93 f3a3 	rbit	r3, r3
 800f50c:	613b      	str	r3, [r7, #16]
  return result;
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f512:	69bb      	ldr	r3, [r7, #24]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d101      	bne.n	800f51c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800f518:	2320      	movs	r3, #32
 800f51a:	e003      	b.n	800f524 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	fab3 f383 	clz	r3, r3
 800f522:	b2db      	uxtb	r3, r3
 800f524:	005b      	lsls	r3, r3, #1
 800f526:	2103      	movs	r1, #3
 800f528:	fa01 f303 	lsl.w	r3, r1, r3
 800f52c:	43db      	mvns	r3, r3
 800f52e:	401a      	ands	r2, r3
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f534:	6a3b      	ldr	r3, [r7, #32]
 800f536:	fa93 f3a3 	rbit	r3, r3
 800f53a:	61fb      	str	r3, [r7, #28]
  return result;
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f542:	2b00      	cmp	r3, #0
 800f544:	d101      	bne.n	800f54a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800f546:	2320      	movs	r3, #32
 800f548:	e003      	b.n	800f552 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800f54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f54c:	fab3 f383 	clz	r3, r3
 800f550:	b2db      	uxtb	r3, r3
 800f552:	005b      	lsls	r3, r3, #1
 800f554:	6879      	ldr	r1, [r7, #4]
 800f556:	fa01 f303 	lsl.w	r3, r1, r3
 800f55a:	431a      	orrs	r2, r3
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	60da      	str	r2, [r3, #12]
}
 800f560:	bf00      	nop
 800f562:	372c      	adds	r7, #44	@ 0x2c
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b08b      	sub	sp, #44	@ 0x2c
 800f570:	af00      	add	r7, sp, #0
 800f572:	60f8      	str	r0, [r7, #12]
 800f574:	60b9      	str	r1, [r7, #8]
 800f576:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	6a1a      	ldr	r2, [r3, #32]
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	fa93 f3a3 	rbit	r3, r3
 800f586:	613b      	str	r3, [r7, #16]
  return result;
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d101      	bne.n	800f596 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800f592:	2320      	movs	r3, #32
 800f594:	e003      	b.n	800f59e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	fab3 f383 	clz	r3, r3
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	009b      	lsls	r3, r3, #2
 800f5a0:	210f      	movs	r1, #15
 800f5a2:	fa01 f303 	lsl.w	r3, r1, r3
 800f5a6:	43db      	mvns	r3, r3
 800f5a8:	401a      	ands	r2, r3
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f5ae:	6a3b      	ldr	r3, [r7, #32]
 800f5b0:	fa93 f3a3 	rbit	r3, r3
 800f5b4:	61fb      	str	r3, [r7, #28]
  return result;
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d101      	bne.n	800f5c4 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800f5c0:	2320      	movs	r3, #32
 800f5c2:	e003      	b.n	800f5cc <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5c6:	fab3 f383 	clz	r3, r3
 800f5ca:	b2db      	uxtb	r3, r3
 800f5cc:	009b      	lsls	r3, r3, #2
 800f5ce:	6879      	ldr	r1, [r7, #4]
 800f5d0:	fa01 f303 	lsl.w	r3, r1, r3
 800f5d4:	431a      	orrs	r2, r3
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800f5da:	bf00      	nop
 800f5dc:	372c      	adds	r7, #44	@ 0x2c
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr

0800f5e6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800f5e6:	b480      	push	{r7}
 800f5e8:	b08b      	sub	sp, #44	@ 0x2c
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	60f8      	str	r0, [r7, #12]
 800f5ee:	60b9      	str	r1, [r7, #8]
 800f5f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	0a1b      	lsrs	r3, r3, #8
 800f5fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	fa93 f3a3 	rbit	r3, r3
 800f602:	613b      	str	r3, [r7, #16]
  return result;
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f608:	69bb      	ldr	r3, [r7, #24]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d101      	bne.n	800f612 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800f60e:	2320      	movs	r3, #32
 800f610:	e003      	b.n	800f61a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	fab3 f383 	clz	r3, r3
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	009b      	lsls	r3, r3, #2
 800f61c:	210f      	movs	r1, #15
 800f61e:	fa01 f303 	lsl.w	r3, r1, r3
 800f622:	43db      	mvns	r3, r3
 800f624:	401a      	ands	r2, r3
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	0a1b      	lsrs	r3, r3, #8
 800f62a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f62c:	6a3b      	ldr	r3, [r7, #32]
 800f62e:	fa93 f3a3 	rbit	r3, r3
 800f632:	61fb      	str	r3, [r7, #28]
  return result;
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d101      	bne.n	800f642 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800f63e:	2320      	movs	r3, #32
 800f640:	e003      	b.n	800f64a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800f642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f644:	fab3 f383 	clz	r3, r3
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	009b      	lsls	r3, r3, #2
 800f64c:	6879      	ldr	r1, [r7, #4]
 800f64e:	fa01 f303 	lsl.w	r3, r1, r3
 800f652:	431a      	orrs	r2, r3
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800f658:	bf00      	nop
 800f65a:	372c      	adds	r7, #44	@ 0x2c
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b088      	sub	sp, #32
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	fa93 f3a3 	rbit	r3, r3
 800f67a:	60fb      	str	r3, [r7, #12]
  return result;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d101      	bne.n	800f68a <LL_GPIO_Init+0x26>
    return 32U;
 800f686:	2320      	movs	r3, #32
 800f688:	e003      	b.n	800f692 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	fab3 f383 	clz	r3, r3
 800f690:	b2db      	uxtb	r3, r3
 800f692:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f694:	e048      	b.n	800f728 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	2101      	movs	r1, #1
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	fa01 f303 	lsl.w	r3, r1, r3
 800f6a2:	4013      	ands	r3, r2
 800f6a4:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800f6a6:	69bb      	ldr	r3, [r7, #24]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d03a      	beq.n	800f722 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d003      	beq.n	800f6bc <LL_GPIO_Init+0x58>
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	685b      	ldr	r3, [r3, #4]
 800f6b8:	2b02      	cmp	r3, #2
 800f6ba:	d10e      	bne.n	800f6da <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	689b      	ldr	r3, [r3, #8]
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	69b9      	ldr	r1, [r7, #24]
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f7ff fed7 	bl	800f478 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	6819      	ldr	r1, [r3, #0]
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	68db      	ldr	r3, [r3, #12]
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f7ff feb7 	bl	800f448 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	691b      	ldr	r3, [r3, #16]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	69b9      	ldr	r1, [r7, #24]
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f7ff ff05 	bl	800f4f2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	2b02      	cmp	r3, #2
 800f6ee:	d111      	bne.n	800f714 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	2bff      	cmp	r3, #255	@ 0xff
 800f6f4:	d807      	bhi.n	800f706 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	695b      	ldr	r3, [r3, #20]
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	69b9      	ldr	r1, [r7, #24]
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f7ff ff34 	bl	800f56c <LL_GPIO_SetAFPin_0_7>
 800f704:	e006      	b.n	800f714 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	695b      	ldr	r3, [r3, #20]
 800f70a:	461a      	mov	r2, r3
 800f70c:	69b9      	ldr	r1, [r7, #24]
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f7ff ff69 	bl	800f5e6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	461a      	mov	r2, r3
 800f71a:	69b9      	ldr	r1, [r7, #24]
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f7ff fe56 	bl	800f3ce <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	3301      	adds	r3, #1
 800f726:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	fa22 f303 	lsr.w	r3, r2, r3
 800f732:	2b00      	cmp	r3, #0
 800f734:	d1af      	bne.n	800f696 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800f736:	2300      	movs	r3, #0
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3720      	adds	r7, #32
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	601a      	str	r2, [r3, #0]
}
 800f754:	bf00      	nop
 800f756:	370c      	adds	r7, #12
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr

0800f760 <LL_APB1_GRP2_EnableClock>:
{
 800f760:	b480      	push	{r7}
 800f762:	b085      	sub	sp, #20
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800f768:	4b08      	ldr	r3, [pc, #32]	@ (800f78c <LL_APB1_GRP2_EnableClock+0x2c>)
 800f76a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f76c:	4907      	ldr	r1, [pc, #28]	@ (800f78c <LL_APB1_GRP2_EnableClock+0x2c>)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4313      	orrs	r3, r2
 800f772:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800f774:	4b05      	ldr	r3, [pc, #20]	@ (800f78c <LL_APB1_GRP2_EnableClock+0x2c>)
 800f776:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	4013      	ands	r3, r2
 800f77c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f77e:	68fb      	ldr	r3, [r7, #12]
}
 800f780:	bf00      	nop
 800f782:	3714      	adds	r7, #20
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr
 800f78c:	40021000 	.word	0x40021000

0800f790 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, const LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	4a11      	ldr	r2, [pc, #68]	@ (800f7e4 <LL_UCPD_Init+0x54>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d103      	bne.n	800f7aa <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800f7a2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800f7a6:	f7ff ffdb 	bl	800f760 <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f7ff ffc8 	bl	800f740 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	4b0c      	ldr	r3, [pc, #48]	@ (800f7e8 <LL_UCPD_Init+0x58>)
 800f7b6:	4013      	ands	r3, r2
 800f7b8:	683a      	ldr	r2, [r7, #0]
 800f7ba:	6811      	ldr	r1, [r2, #0]
 800f7bc:	683a      	ldr	r2, [r7, #0]
 800f7be:	6852      	ldr	r2, [r2, #4]
 800f7c0:	02d2      	lsls	r2, r2, #11
 800f7c2:	4311      	orrs	r1, r2
 800f7c4:	683a      	ldr	r2, [r7, #0]
 800f7c6:	6892      	ldr	r2, [r2, #8]
 800f7c8:	0192      	lsls	r2, r2, #6
 800f7ca:	4311      	orrs	r1, r2
 800f7cc:	683a      	ldr	r2, [r7, #0]
 800f7ce:	68d2      	ldr	r2, [r2, #12]
 800f7d0:	430a      	orrs	r2, r1
 800f7d2:	431a      	orrs	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800f7d8:	2300      	movs	r3, #0
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	4000a000 	.word	0x4000a000
 800f7e8:	fff10000 	.word	0xfff10000

0800f7ec <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b083      	sub	sp, #12
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f7fa:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2207      	movs	r2, #7
 800f800:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2210      	movs	r2, #16
 800f806:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	220d      	movs	r2, #13
 800f80c:	60da      	str	r2, [r3, #12]
}
 800f80e:	bf00      	nop
 800f810:	370c      	adds	r7, #12
 800f812:	46bd      	mov	sp, r7
 800f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f818:	4770      	bx	lr
	...

0800f81c <LIDAR_start_scan_dma>:
    printf("Error code : %04X\r\n", h_LIDAR->health_stat.error_code);

    return 0;
}

int LIDAR_start_scan_dma(h_LIDAR_t *h_LIDAR) {
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
    uint8_t cmd_buff[CMD_BUFF_SIZE] = {CMD_BEGIN, CMD_START}; // Commande pour démarrer le scan
 800f824:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 800f828:	81bb      	strh	r3, [r7, #12]

    // Envoi de la commande
    if (h_LIDAR->serial_drv.it_transmit(cmd_buff, CMD_BUFF_SIZE) != 0) {
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	f107 020c 	add.w	r2, r7, #12
 800f832:	2102      	movs	r1, #2
 800f834:	4610      	mov	r0, r2
 800f836:	4798      	blx	r3
 800f838:	4603      	mov	r3, r0
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d005      	beq.n	800f84a <LIDAR_start_scan_dma+0x2e>
        printf("Erreur lors de l'envoi de la commande de démarrage du scan.\r\n");
 800f83e:	4810      	ldr	r0, [pc, #64]	@ (800f880 <LIDAR_start_scan_dma+0x64>)
 800f840:	f009 f840 	bl	80188c4 <puts>
        return -1;
 800f844:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f848:	e015      	b.n	800f876 <LIDAR_start_scan_dma+0x5a>
    }

    // Configurer la réception DMA en mode circulaire
    if (h_LIDAR->serial_drv.dma_receive(h_LIDAR->processing.receive_buff, DATA_BUFF_SIZE) != 0) {
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	691b      	ldr	r3, [r3, #16]
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	f502 625f 	add.w	r2, r2, #3568	@ 0xdf0
 800f854:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800f858:	4610      	mov	r0, r2
 800f85a:	4798      	blx	r3
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d005      	beq.n	800f86e <LIDAR_start_scan_dma+0x52>
        printf("Erreur lors de la configuration de la réception DMA.\r\n");
 800f862:	4808      	ldr	r0, [pc, #32]	@ (800f884 <LIDAR_start_scan_dma+0x68>)
 800f864:	f009 f82e 	bl	80188c4 <puts>
        return -2;
 800f868:	f06f 0301 	mvn.w	r3, #1
 800f86c:	e003      	b.n	800f876 <LIDAR_start_scan_dma+0x5a>
    }

    printf("Scan DMA demarre avec succes en mode circulaire.\r\n");
 800f86e:	4806      	ldr	r0, [pc, #24]	@ (800f888 <LIDAR_start_scan_dma+0x6c>)
 800f870:	f009 f828 	bl	80188c4 <puts>
    return 0;
 800f874:	2300      	movs	r3, #0
}
 800f876:	4618      	mov	r0, r3
 800f878:	3710      	adds	r7, #16
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	0801bb8c 	.word	0x0801bb8c
 800f884:	0801bbcc 	.word	0x0801bbcc
 800f888:	0801bc04 	.word	0x0801bc04

0800f88c <LIDAR_process_frame>:

void LIDAR_process_frame(h_LIDAR_t *LIDAR, uint8_t *buff) {
 800f88c:	b480      	push	{r7}
 800f88e:	b08d      	sub	sp, #52	@ 0x34
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	6039      	str	r1, [r7, #0]
    // uint8_t *buff = LIDAR->processing.frame_buff; // Buffer circulaire DMA
    int buffer_size = FRAME_BUFF_SIZE;              // Taille totale du buffer
 800f896:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800f89a:	627b      	str	r3, [r7, #36]	@ 0x24
    int start_idx = 0;                             // Indice de départ pour parcourir le buffer
 800f89c:	2300      	movs	r3, #0
 800f89e:	62fb      	str	r3, [r7, #44]	@ 0x2c




    while (start_idx < buffer_size) {
 800f8a0:	e0eb      	b.n	800fa7a <LIDAR_process_frame+0x1ee>

        if (buff[start_idx] == 0xAA && buff[(start_idx + 1) % buffer_size] == 0x55) {
 800f8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8a4:	683a      	ldr	r2, [r7, #0]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	2baa      	cmp	r3, #170	@ 0xaa
 800f8ac:	f040 80e2 	bne.w	800fa74 <LIDAR_process_frame+0x1e8>
 800f8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8b6:	fb93 f2f2 	sdiv	r2, r3, r2
 800f8ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f8bc:	fb01 f202 	mul.w	r2, r1, r2
 800f8c0:	1a9b      	subs	r3, r3, r2
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	4413      	add	r3, r2
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	2b55      	cmp	r3, #85	@ 0x55
 800f8cc:	f040 80d2 	bne.w	800fa74 <LIDAR_process_frame+0x1e8>

        	//printf("Trame trouvée \r\n");

            // L'entête est trouvé, extraire les métadonnées
            int header_idx = start_idx; // Index actuel pour début de trame
 800f8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8d2:	623b      	str	r3, [r7, #32]

            // Start Angle
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 800f8d4:	6a3b      	ldr	r3, [r7, #32]
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8da:	fb93 f2f2 	sdiv	r2, r3, r2
 800f8de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f8e0:	fb01 f202 	mul.w	r2, r1, r2
 800f8e4:	1a9b      	subs	r3, r3, r2
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	4618      	mov	r0, r3
                            (buff[(header_idx + 5) % buffer_size] << 8)) >>
 800f8f0:	6a3b      	ldr	r3, [r7, #32]
 800f8f2:	3305      	adds	r3, #5
 800f8f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8f6:	fb93 f2f2 	sdiv	r2, r3, r2
 800f8fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f8fc:	fb01 f202 	mul.w	r2, r1, r2
 800f900:	1a9b      	subs	r3, r3, r2
 800f902:	461a      	mov	r2, r3
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	4413      	add	r3, r2
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	021b      	lsls	r3, r3, #8
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 800f90c:	4303      	orrs	r3, r0
                            (buff[(header_idx + 5) % buffer_size] << 8)) >>
 800f90e:	11db      	asrs	r3, r3, #7
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 800f910:	83fb      	strh	r3, [r7, #30]
                           7; // Shift de 7 pour diviser de 64 + Shift à 1 pour avoir l'angle en degré

            // End Angle
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 800f912:	6a3b      	ldr	r3, [r7, #32]
 800f914:	3306      	adds	r3, #6
 800f916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f918:	fb93 f2f2 	sdiv	r2, r3, r2
 800f91c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f91e:	fb01 f202 	mul.w	r2, r1, r2
 800f922:	1a9b      	subs	r3, r3, r2
 800f924:	461a      	mov	r2, r3
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	4413      	add	r3, r2
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	4618      	mov	r0, r3
                            (buff[(header_idx + 7) % buffer_size] << 8)) >>
 800f92e:	6a3b      	ldr	r3, [r7, #32]
 800f930:	3307      	adds	r3, #7
 800f932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f934:	fb93 f2f2 	sdiv	r2, r3, r2
 800f938:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f93a:	fb01 f202 	mul.w	r2, r1, r2
 800f93e:	1a9b      	subs	r3, r3, r2
 800f940:	461a      	mov	r2, r3
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	4413      	add	r3, r2
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	021b      	lsls	r3, r3, #8
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 800f94a:	4303      	orrs	r3, r0
                            (buff[(header_idx + 7) % buffer_size] << 8)) >>
 800f94c:	11db      	asrs	r3, r3, #7
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 800f94e:	83bb      	strh	r3, [r7, #28]
                           7; // Shift de 7 pour diviser de 64 + Shift à 1 pour avoir l'angle en degré

            // Nombre de points
            uint8_t LSN = buff[(header_idx + 3) % buffer_size];
 800f950:	6a3b      	ldr	r3, [r7, #32]
 800f952:	3303      	adds	r3, #3
 800f954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f956:	fb93 f2f2 	sdiv	r2, r3, r2
 800f95a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f95c:	fb01 f202 	mul.w	r2, r1, r2
 800f960:	1a9b      	subs	r3, r3, r2
 800f962:	461a      	mov	r2, r3
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	4413      	add	r3, r2
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	76fb      	strb	r3, [r7, #27]

            // Calcul de la taille totale attendue de la trame
            int frame_size = 10 + LSN * 2; // 10 octets d'entête + 2 octets par point
 800f96c:	7efb      	ldrb	r3, [r7, #27]
 800f96e:	3305      	adds	r3, #5
 800f970:	005b      	lsls	r3, r3, #1
 800f972:	617b      	str	r3, [r7, #20]
            if (frame_size > buffer_size) {
 800f974:	697a      	ldr	r2, [r7, #20]
 800f976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f978:	429a      	cmp	r2, r3
 800f97a:	f300 8084 	bgt.w	800fa86 <LIDAR_process_frame+0x1fa>
//                printf("Erreur : Taille de la trame (%d) dépasse la taille du buffer (%d).\r\n", frame_size, buffer_size);
                break;
            }

            // Vérifier si toute la trame est contenue dans le buffer
            if ((start_idx + frame_size) % buffer_size < start_idx) {
 800f97e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	4413      	add	r3, r2
 800f984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f986:	fb93 f2f2 	sdiv	r2, r3, r2
 800f98a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f98c:	fb01 f202 	mul.w	r2, r1, r2
 800f990:	1a9b      	subs	r3, r3, r2
 800f992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f994:	429a      	cmp	r2, r3
 800f996:	dc78      	bgt.n	800fa8a <LIDAR_process_frame+0x1fe>
//                continue;
//            }

            // Traiter les données de la trame

            for (int i = 0; i < LSN; i++) {
 800f998:	2300      	movs	r3, #0
 800f99a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f99c:	e061      	b.n	800fa62 <LIDAR_process_frame+0x1d6>
                // Lecture de la distance brute
                uint16_t Si = buff[(header_idx + 10 + i * 2) % buffer_size] |
 800f99e:	6a3b      	ldr	r3, [r7, #32]
 800f9a0:	f103 020a 	add.w	r2, r3, #10
 800f9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9a6:	005b      	lsls	r3, r3, #1
 800f9a8:	4413      	add	r3, r2
 800f9aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9ac:	fb93 f2f2 	sdiv	r2, r3, r2
 800f9b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f9b2:	fb01 f202 	mul.w	r2, r1, r2
 800f9b6:	1a9b      	subs	r3, r3, r2
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	4413      	add	r3, r2
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	b21a      	sxth	r2, r3
                              (buff[(header_idx + 11 + i * 2) % buffer_size] << 8);
 800f9c2:	6a3b      	ldr	r3, [r7, #32]
 800f9c4:	f103 010b 	add.w	r1, r3, #11
 800f9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ca:	005b      	lsls	r3, r3, #1
 800f9cc:	440b      	add	r3, r1
 800f9ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f9d0:	fb93 f1f1 	sdiv	r1, r3, r1
 800f9d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f9d6:	fb00 f101 	mul.w	r1, r0, r1
 800f9da:	1a5b      	subs	r3, r3, r1
 800f9dc:	4619      	mov	r1, r3
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	440b      	add	r3, r1
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	021b      	lsls	r3, r3, #8
                uint16_t Si = buff[(header_idx + 10 + i * 2) % buffer_size] |
 800f9e6:	b21b      	sxth	r3, r3
 800f9e8:	4313      	orrs	r3, r2
 800f9ea:	b21b      	sxth	r3, r3
 800f9ec:	827b      	strh	r3, [r7, #18]


                int Di = Si / 4; // Distance réelle en mm
 800f9ee:	8a7b      	ldrh	r3, [r7, #18]
 800f9f0:	089b      	lsrs	r3, r3, #2
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	60fb      	str	r3, [r7, #12]

                // Calcul de l'angle
                int Ai = (i+1)*abs(LSA-FSA)/(LSN-1) + FSA;
 800f9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	8bb9      	ldrh	r1, [r7, #28]
 800f9fc:	8bfa      	ldrh	r2, [r7, #30]
 800f9fe:	1a8a      	subs	r2, r1, r2
 800fa00:	2a00      	cmp	r2, #0
 800fa02:	bfb8      	it	lt
 800fa04:	4252      	neglt	r2, r2
 800fa06:	fb03 f202 	mul.w	r2, r3, r2
 800fa0a:	7efb      	ldrb	r3, [r7, #27]
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	fb92 f2f3 	sdiv	r2, r2, r3
 800fa12:	8bfb      	ldrh	r3, [r7, #30]
 800fa14:	4413      	add	r3, r2
 800fa16:	60bb      	str	r3, [r7, #8]

                if (Ai < 0 || Ai >= 360) {
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	db1d      	blt.n	800fa5a <LIDAR_process_frame+0x1ce>
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800fa24:	da19      	bge.n	800fa5a <LIDAR_process_frame+0x1ce>
                    continue;
                }

                // Stockage dans le buffer des points
                if (Di < 150 || Di > 10000) {
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2b95      	cmp	r3, #149	@ 0x95
 800fa2a:	dd04      	ble.n	800fa36 <LIDAR_process_frame+0x1aa>
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800fa32:	4293      	cmp	r3, r2
 800fa34:	dd08      	ble.n	800fa48 <LIDAR_process_frame+0x1bc>
                	LIDAR->processing.point_buff[Ai] = 0; // Distance hors plage
 800fa36:	687a      	ldr	r2, [r7, #4]
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	f203 2312 	addw	r3, r3, #530	@ 0x212
 800fa3e:	009b      	lsls	r3, r3, #2
 800fa40:	4413      	add	r3, r2
 800fa42:	2200      	movs	r2, #0
 800fa44:	609a      	str	r2, [r3, #8]
 800fa46:	e009      	b.n	800fa5c <LIDAR_process_frame+0x1d0>
                } else {
                	LIDAR->processing.point_buff[Ai] = Di; // Distance valide
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	f203 2312 	addw	r3, r3, #530	@ 0x212
 800fa50:	009b      	lsls	r3, r3, #2
 800fa52:	4413      	add	r3, r2
 800fa54:	68fa      	ldr	r2, [r7, #12]
 800fa56:	609a      	str	r2, [r3, #8]
 800fa58:	e000      	b.n	800fa5c <LIDAR_process_frame+0x1d0>
                    continue;
 800fa5a:	bf00      	nop
            for (int i = 0; i < LSN; i++) {
 800fa5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa5e:	3301      	adds	r3, #1
 800fa60:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fa62:	7efb      	ldrb	r3, [r7, #27]
 800fa64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa66:	429a      	cmp	r2, r3
 800fa68:	db99      	blt.n	800f99e <LIDAR_process_frame+0x112>
            }

//            printf("Trame traitee : FSA=%d, LSA=%d, Points=%d\r\n", FSA, LSA, LSN);

            // Avancer dans le buffer jusqu'à la fin de la trame traitée
            start_idx += frame_size;
 800fa6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	4413      	add	r3, r2
 800fa70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (buff[start_idx] == 0xAA && buff[(start_idx + 1) % buffer_size] == 0x55) {
 800fa72:	e002      	b.n	800fa7a <LIDAR_process_frame+0x1ee>
        } else {
            // Avancer d'un octet si aucune entête valide n'est trouvée
            start_idx++;
 800fa74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa76:	3301      	adds	r3, #1
 800fa78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (start_idx < buffer_size) {
 800fa7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	f6ff af0f 	blt.w	800f8a2 <LIDAR_process_frame+0x16>
        }
    }

}
 800fa84:	e002      	b.n	800fa8c <LIDAR_process_frame+0x200>
                break;
 800fa86:	bf00      	nop
 800fa88:	e000      	b.n	800fa8c <LIDAR_process_frame+0x200>
                break;
 800fa8a:	bf00      	nop
}
 800fa8c:	bf00      	nop
 800fa8e:	3734      	adds	r7, #52	@ 0x34
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <calculer_distance_moyenne>:

// Permet de calculer la distance moyenen sur un tableau entre deux indices
int calculer_distance_moyenne(const int *distances, int debut, int fin) {
 800fa98:	b480      	push	{r7}
 800fa9a:	b089      	sub	sp, #36	@ 0x24
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	60f8      	str	r0, [r7, #12]
 800faa0:	60b9      	str	r1, [r7, #8]
 800faa2:	607a      	str	r2, [r7, #4]
    int somme = 0;
 800faa4:	2300      	movs	r3, #0
 800faa6:	61fb      	str	r3, [r7, #28]
    int n = fin - debut + 1;
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	1ad3      	subs	r3, r2, r3
 800faae:	3301      	adds	r3, #1
 800fab0:	617b      	str	r3, [r7, #20]
    for (int i = debut; i <= fin; i++) {
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	61bb      	str	r3, [r7, #24]
 800fab6:	e00a      	b.n	800face <calculer_distance_moyenne+0x36>
        somme += distances[i];
 800fab8:	69bb      	ldr	r3, [r7, #24]
 800faba:	009b      	lsls	r3, r3, #2
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	4413      	add	r3, r2
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	69fa      	ldr	r2, [r7, #28]
 800fac4:	4413      	add	r3, r2
 800fac6:	61fb      	str	r3, [r7, #28]
    for (int i = debut; i <= fin; i++) {
 800fac8:	69bb      	ldr	r3, [r7, #24]
 800faca:	3301      	adds	r3, #1
 800facc:	61bb      	str	r3, [r7, #24]
 800face:	69ba      	ldr	r2, [r7, #24]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	ddf0      	ble.n	800fab8 <calculer_distance_moyenne+0x20>
    }
    return somme / n;
 800fad6:	69fa      	ldr	r2, [r7, #28]
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3724      	adds	r7, #36	@ 0x24
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr
	...

0800faec <find_clusters>:

/**
 * @brief Trouve les clusters dans les données du LIDAR.
 * @param LIDAR Pointeur vers la structure h_LIDAR_t.
 */
void find_clusters(h_LIDAR_t *LIDAR) {
 800faec:	b5b0      	push	{r4, r5, r7, lr}
 800faee:	b086      	sub	sp, #24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
    int *distances = LIDAR->processing.filtred_buff;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800fafa:	3310      	adds	r3, #16
 800fafc:	60bb      	str	r3, [r7, #8]
    int cluster_count = 0;
 800fafe:	2300      	movs	r3, #0
 800fb00:	617b      	str	r3, [r7, #20]
    int debut_cluster = 0;
 800fb02:	2300      	movs	r3, #0
 800fb04:	613b      	str	r3, [r7, #16]

    // Parcours des distances pour identifier les clusters
    for (int i = 1; i < NB_DEGRES; i++) {
 800fb06:	2301      	movs	r3, #1
 800fb08:	60fb      	str	r3, [r7, #12]
 800fb0a:	e05d      	b.n	800fbc8 <find_clusters+0xdc>
        // Si la différence dépasse le seuil, un cluster est terminé
        if (fabs(distances[i] - distances[i - 1]) > CLUSTER_SEUIL) {
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	68ba      	ldr	r2, [r7, #8]
 800fb12:	4413      	add	r3, r2
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fb1c:	3b01      	subs	r3, #1
 800fb1e:	009b      	lsls	r3, r3, #2
 800fb20:	68b9      	ldr	r1, [r7, #8]
 800fb22:	440b      	add	r3, r1
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	1ad3      	subs	r3, r2, r3
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7f2 ff2d 	bl	8002988 <__aeabi_i2d>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	460b      	mov	r3, r1
 800fb32:	4614      	mov	r4, r2
 800fb34:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800fb38:	f04f 0200 	mov.w	r2, #0
 800fb3c:	4b45      	ldr	r3, [pc, #276]	@ (800fc54 <find_clusters+0x168>)
 800fb3e:	4620      	mov	r0, r4
 800fb40:	4629      	mov	r1, r5
 800fb42:	f7f3 fa1b 	bl	8002f7c <__aeabi_dcmpgt>
 800fb46:	4603      	mov	r3, r0
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d03a      	beq.n	800fbc2 <find_clusters+0xd6>
            // Calcul et stockage des informations du cluster
            if (cluster_count < MAX_CLUSTERS) {
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	2b63      	cmp	r3, #99	@ 0x63
 800fb50:	dc35      	bgt.n	800fbbe <find_clusters+0xd2>
                LIDAR->processing.clusters[cluster_count].distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, i - 1);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	3b01      	subs	r3, #1
 800fb56:	461a      	mov	r2, r3
 800fb58:	6939      	ldr	r1, [r7, #16]
 800fb5a:	68b8      	ldr	r0, [r7, #8]
 800fb5c:	f7ff ff9c 	bl	800fa98 <calculer_distance_moyenne>
 800fb60:	6879      	ldr	r1, [r7, #4]
 800fb62:	697a      	ldr	r2, [r7, #20]
 800fb64:	4613      	mov	r3, r2
 800fb66:	005b      	lsls	r3, r3, #1
 800fb68:	4413      	add	r3, r2
 800fb6a:	009b      	lsls	r3, r3, #2
 800fb6c:	440b      	add	r3, r1
 800fb6e:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 800fb72:	3334      	adds	r3, #52	@ 0x34
 800fb74:	6018      	str	r0, [r3, #0]
                LIDAR->processing.clusters[cluster_count].angle_moyen = (debut_cluster + i - 1) / 2;
 800fb76:	693a      	ldr	r2, [r7, #16]
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	4413      	add	r3, r2
 800fb7c:	3b01      	subs	r3, #1
 800fb7e:	0fda      	lsrs	r2, r3, #31
 800fb80:	4413      	add	r3, r2
 800fb82:	105b      	asrs	r3, r3, #1
 800fb84:	4618      	mov	r0, r3
 800fb86:	6879      	ldr	r1, [r7, #4]
 800fb88:	697a      	ldr	r2, [r7, #20]
 800fb8a:	4613      	mov	r3, r2
 800fb8c:	005b      	lsls	r3, r3, #1
 800fb8e:	4413      	add	r3, r2
 800fb90:	009b      	lsls	r3, r3, #2
 800fb92:	440b      	add	r3, r1
 800fb94:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 800fb98:	3330      	adds	r3, #48	@ 0x30
 800fb9a:	6018      	str	r0, [r3, #0]
                LIDAR->processing.clusters[cluster_count].count = i - debut_cluster;
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	1ad1      	subs	r1, r2, r3
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	697a      	ldr	r2, [r7, #20]
 800fba6:	4613      	mov	r3, r2
 800fba8:	005b      	lsls	r3, r3, #1
 800fbaa:	4413      	add	r3, r2
 800fbac:	009b      	lsls	r3, r3, #2
 800fbae:	4403      	add	r3, r0
 800fbb0:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 800fbb4:	3338      	adds	r3, #56	@ 0x38
 800fbb6:	6019      	str	r1, [r3, #0]
                cluster_count++;
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	617b      	str	r3, [r7, #20]
            }
            debut_cluster = i; // Nouveau cluster
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	613b      	str	r3, [r7, #16]
    for (int i = 1; i < NB_DEGRES; i++) {
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	60fb      	str	r3, [r7, #12]
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800fbce:	db9d      	blt.n	800fb0c <find_clusters+0x20>
        }
    }

    // Traitement du dernier cluster
    if (cluster_count < MAX_CLUSTERS) {
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	2b63      	cmp	r3, #99	@ 0x63
 800fbd4:	dc33      	bgt.n	800fc3e <find_clusters+0x152>
        LIDAR->processing.clusters[cluster_count].distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, NB_DEGRES - 1);
 800fbd6:	f240 1267 	movw	r2, #359	@ 0x167
 800fbda:	6939      	ldr	r1, [r7, #16]
 800fbdc:	68b8      	ldr	r0, [r7, #8]
 800fbde:	f7ff ff5b 	bl	800fa98 <calculer_distance_moyenne>
 800fbe2:	6879      	ldr	r1, [r7, #4]
 800fbe4:	697a      	ldr	r2, [r7, #20]
 800fbe6:	4613      	mov	r3, r2
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	4413      	add	r3, r2
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	440b      	add	r3, r1
 800fbf0:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 800fbf4:	3334      	adds	r3, #52	@ 0x34
 800fbf6:	6018      	str	r0, [r3, #0]
        LIDAR->processing.clusters[cluster_count].angle_moyen = (debut_cluster + NB_DEGRES - 1) / 2;
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	f203 1367 	addw	r3, r3, #359	@ 0x167
 800fbfe:	0fda      	lsrs	r2, r3, #31
 800fc00:	4413      	add	r3, r2
 800fc02:	105b      	asrs	r3, r3, #1
 800fc04:	4618      	mov	r0, r3
 800fc06:	6879      	ldr	r1, [r7, #4]
 800fc08:	697a      	ldr	r2, [r7, #20]
 800fc0a:	4613      	mov	r3, r2
 800fc0c:	005b      	lsls	r3, r3, #1
 800fc0e:	4413      	add	r3, r2
 800fc10:	009b      	lsls	r3, r3, #2
 800fc12:	440b      	add	r3, r1
 800fc14:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 800fc18:	3330      	adds	r3, #48	@ 0x30
 800fc1a:	6018      	str	r0, [r3, #0]
        LIDAR->processing.clusters[cluster_count].count = NB_DEGRES - debut_cluster;
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	f5c3 71b4 	rsb	r1, r3, #360	@ 0x168
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	697a      	ldr	r2, [r7, #20]
 800fc26:	4613      	mov	r3, r2
 800fc28:	005b      	lsls	r3, r3, #1
 800fc2a:	4413      	add	r3, r2
 800fc2c:	009b      	lsls	r3, r3, #2
 800fc2e:	4403      	add	r3, r0
 800fc30:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 800fc34:	3338      	adds	r3, #56	@ 0x38
 800fc36:	6019      	str	r1, [r3, #0]
        cluster_count++;
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	617b      	str	r3, [r7, #20]
    }

    // Mise à jour du compteur de clusters
    LIDAR->processing.cluster_cnt = cluster_count;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fc44:	461a      	mov	r2, r3
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	f8c2 37e0 	str.w	r3, [r2, #2016]	@ 0x7e0
}
 800fc4c:	bf00      	nop
 800fc4e:	3718      	adds	r7, #24
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bdb0      	pop	{r4, r5, r7, pc}
 800fc54:	403e0000 	.word	0x403e0000

0800fc58 <medianFilter>:

//Applique un filtre médian aux données du LIDAR.
void medianFilter(h_LIDAR_t *LIDAR) {
 800fc58:	b480      	push	{r7}
 800fc5a:	b093      	sub	sp, #76	@ 0x4c
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
    int *signal = LIDAR->processing.point_buff;     // Signal brut
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 800fc66:	633b      	str	r3, [r7, #48]	@ 0x30
    int *filtred = LIDAR->processing.filtred_buff; // Signal filtré
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800fc6e:	3310      	adds	r3, #16
 800fc70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int signal_length = NB_DEGRES;
 800fc72:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800fc76:	62bb      	str	r3, [r7, #40]	@ 0x28
    int window[5];
    int middle = 2; // La médiane est au centre d'une fenêtre de taille 5
 800fc78:	2302      	movs	r3, #2
 800fc7a:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < signal_length; i++) {
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc80:	e06e      	b.n	800fd60 <medianFilter+0x108>
        // Construire la fenêtre de voisinage
        for (int j = 0; j < 5; j++) {
 800fc82:	2300      	movs	r3, #0
 800fc84:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc86:	e01f      	b.n	800fcc8 <medianFilter+0x70>
            int index = i - middle + j;
 800fc88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc8c:	1ad3      	subs	r3, r2, r3
 800fc8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fc90:	4413      	add	r3, r2
 800fc92:	63fb      	str	r3, [r7, #60]	@ 0x3c
            // Gérer les bords du signal
            if (index < 0) index = 0;
 800fc94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	da01      	bge.n	800fc9e <medianFilter+0x46>
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (index >= signal_length) index = signal_length - 1;
 800fc9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca2:	429a      	cmp	r2, r3
 800fca4:	db02      	blt.n	800fcac <medianFilter+0x54>
 800fca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca8:	3b01      	subs	r3, #1
 800fcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            window[j] = signal[index];
 800fcac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcb2:	4413      	add	r3, r2
 800fcb4:	681a      	ldr	r2, [r3, #0]
 800fcb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	3348      	adds	r3, #72	@ 0x48
 800fcbc:	443b      	add	r3, r7
 800fcbe:	f843 2c3c 	str.w	r2, [r3, #-60]
        for (int j = 0; j < 5; j++) {
 800fcc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	643b      	str	r3, [r7, #64]	@ 0x40
 800fcc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fcca:	2b04      	cmp	r3, #4
 800fccc:	dddc      	ble.n	800fc88 <medianFilter+0x30>
        }

        // Trier la fenêtre pour extraire la médiane
        for (int j = 0; j < 5; j++) {
 800fcce:	2300      	movs	r3, #0
 800fcd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fcd2:	e034      	b.n	800fd3e <medianFilter+0xe6>
            for (int k = j + 1; k < 5; k++) {
 800fcd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	637b      	str	r3, [r7, #52]	@ 0x34
 800fcda:	e02a      	b.n	800fd32 <medianFilter+0xda>
                if (window[j] > window[k]) {
 800fcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcde:	009b      	lsls	r3, r3, #2
 800fce0:	3348      	adds	r3, #72	@ 0x48
 800fce2:	443b      	add	r3, r7
 800fce4:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800fce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	3348      	adds	r3, #72	@ 0x48
 800fcee:	443b      	add	r3, r7
 800fcf0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	dd19      	ble.n	800fd2c <medianFilter+0xd4>
                    int temp = window[j];
 800fcf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcfa:	009b      	lsls	r3, r3, #2
 800fcfc:	3348      	adds	r3, #72	@ 0x48
 800fcfe:	443b      	add	r3, r7
 800fd00:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800fd04:	623b      	str	r3, [r7, #32]
                    window[j] = window[k];
 800fd06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd08:	009b      	lsls	r3, r3, #2
 800fd0a:	3348      	adds	r3, #72	@ 0x48
 800fd0c:	443b      	add	r3, r7
 800fd0e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800fd12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	3348      	adds	r3, #72	@ 0x48
 800fd18:	443b      	add	r3, r7
 800fd1a:	f843 2c3c 	str.w	r2, [r3, #-60]
                    window[k] = temp;
 800fd1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd20:	009b      	lsls	r3, r3, #2
 800fd22:	3348      	adds	r3, #72	@ 0x48
 800fd24:	443b      	add	r3, r7
 800fd26:	6a3a      	ldr	r2, [r7, #32]
 800fd28:	f843 2c3c 	str.w	r2, [r3, #-60]
            for (int k = j + 1; k < 5; k++) {
 800fd2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd2e:	3301      	adds	r3, #1
 800fd30:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd34:	2b04      	cmp	r3, #4
 800fd36:	ddd1      	ble.n	800fcdc <medianFilter+0x84>
        for (int j = 0; j < 5; j++) {
 800fd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd40:	2b04      	cmp	r3, #4
 800fd42:	ddc7      	ble.n	800fcd4 <medianFilter+0x7c>
                }
            }
        }

        // Stocker la médiane dans le tableau filtré
        filtred[i] = window[middle];
 800fd44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd46:	009b      	lsls	r3, r3, #2
 800fd48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd4a:	441a      	add	r2, r3
 800fd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	3348      	adds	r3, #72	@ 0x48
 800fd52:	443b      	add	r3, r7
 800fd54:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800fd58:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < signal_length; i++) {
 800fd5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd64:	429a      	cmp	r2, r3
 800fd66:	db8c      	blt.n	800fc82 <medianFilter+0x2a>
    }
}
 800fd68:	bf00      	nop
 800fd6a:	bf00      	nop
 800fd6c:	374c      	adds	r7, #76	@ 0x4c
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd74:	4770      	bx	lr
	...

0800fd78 <uart_transmit>:



// Définir les fonctions UART pour le mode polling
int uart_transmit(uint8_t *p_data, uint16_t size) {
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	460b      	mov	r3, r1
 800fd82:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart2, p_data, size, HAL_MAX_DELAY);
 800fd84:	887a      	ldrh	r2, [r7, #2]
 800fd86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fd8a:	6879      	ldr	r1, [r7, #4]
 800fd8c:	4803      	ldr	r0, [pc, #12]	@ (800fd9c <uart_transmit+0x24>)
 800fd8e:	f7fc fb2f 	bl	800c3f0 <HAL_UART_Transmit>
 800fd92:	4603      	mov	r3, r0
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3708      	adds	r7, #8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	20000c4c 	.word	0x20000c4c

0800fda0 <uart_poll_receive>:

int uart_poll_receive(uint8_t *p_data, uint16_t size) {
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	460b      	mov	r3, r1
 800fdaa:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart2, p_data, size, 100);
 800fdac:	887a      	ldrh	r2, [r7, #2]
 800fdae:	2364      	movs	r3, #100	@ 0x64
 800fdb0:	6879      	ldr	r1, [r7, #4]
 800fdb2:	4804      	ldr	r0, [pc, #16]	@ (800fdc4 <uart_poll_receive+0x24>)
 800fdb4:	f7fc fbaa 	bl	800c50c <HAL_UART_Receive>
 800fdb8:	4603      	mov	r3, r0
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3708      	adds	r7, #8
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	20000c4c 	.word	0x20000c4c

0800fdc8 <uart_it_receive>:

int uart_it_receive(uint8_t *p_data, uint16_t size){
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart2, p_data, size);
 800fdd4:	887b      	ldrh	r3, [r7, #2]
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	6879      	ldr	r1, [r7, #4]
 800fdda:	4804      	ldr	r0, [pc, #16]	@ (800fdec <uart_it_receive+0x24>)
 800fddc:	f7fc fcf2 	bl	800c7c4 <HAL_UART_Receive_IT>
	return 0;
 800fde0:	2300      	movs	r3, #0
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3708      	adds	r7, #8
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	20000c4c 	.word	0x20000c4c

0800fdf0 <uart_it_transmit>:

int uart_it_transmit(uint8_t *p_data, uint16_t size){
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	460b      	mov	r3, r1
 800fdfa:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(&huart2, p_data, size);
 800fdfc:	887b      	ldrh	r3, [r7, #2]
 800fdfe:	461a      	mov	r2, r3
 800fe00:	6879      	ldr	r1, [r7, #4]
 800fe02:	4804      	ldr	r0, [pc, #16]	@ (800fe14 <uart_it_transmit+0x24>)
 800fe04:	f7fc fc4a 	bl	800c69c <HAL_UART_Transmit_IT>
	return 0;
 800fe08:	2300      	movs	r3, #0
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3708      	adds	r7, #8
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
 800fe12:	bf00      	nop
 800fe14:	20000c4c 	.word	0x20000c4c

0800fe18 <uart_dma_receive>:

int uart_dma_receive(uint8_t *p_data, uint16_t size){
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	460b      	mov	r3, r1
 800fe22:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_DMA(&huart2, p_data, size);
 800fe24:	887b      	ldrh	r3, [r7, #2]
 800fe26:	461a      	mov	r2, r3
 800fe28:	6879      	ldr	r1, [r7, #4]
 800fe2a:	4804      	ldr	r0, [pc, #16]	@ (800fe3c <uart_dma_receive+0x24>)
 800fe2c:	f7fc fd96 	bl	800c95c <HAL_UART_Receive_DMA>
	return 0;
 800fe30:	2300      	movs	r3, #0
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3708      	adds	r7, #8
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	20000c4c 	.word	0x20000c4c

0800fe40 <uart_dma_transmit>:

int uart_dma_transmit(uint8_t *p_data, uint16_t size){
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	460b      	mov	r3, r1
 800fe4a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&huart2, p_data, size);
 800fe4c:	887b      	ldrh	r3, [r7, #2]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	6879      	ldr	r1, [r7, #4]
 800fe52:	4804      	ldr	r0, [pc, #16]	@ (800fe64 <uart_dma_transmit+0x24>)
 800fe54:	f7fc fd02 	bl	800c85c <HAL_UART_Transmit_DMA>
	return 0;
 800fe58:	2300      	movs	r3, #0
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	20000c4c 	.word	0x20000c4c

0800fe68 <lidar_init>:

h_LIDAR_t lidar;
extern SemaphoreHandle_t semb_halfCllbck;
extern SemaphoreHandle_t semb_cpltCllbck;

void lidar_init(void){
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA,LIDAR_M_CTR_Pin , SET);
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800fe72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800fe76:	f7f8 fe25 	bl	8008ac4 <HAL_GPIO_WritePin>

	  lidar.serial_drv.transmit = uart_transmit;
 800fe7a:	4b0a      	ldr	r3, [pc, #40]	@ (800fea4 <lidar_init+0x3c>)
 800fe7c:	4a0a      	ldr	r2, [pc, #40]	@ (800fea8 <lidar_init+0x40>)
 800fe7e:	601a      	str	r2, [r3, #0]
	  lidar.serial_drv.poll_receive = uart_poll_receive;
 800fe80:	4b08      	ldr	r3, [pc, #32]	@ (800fea4 <lidar_init+0x3c>)
 800fe82:	4a0a      	ldr	r2, [pc, #40]	@ (800feac <lidar_init+0x44>)
 800fe84:	605a      	str	r2, [r3, #4]

	  lidar.serial_drv.it_receive=uart_it_receive;
 800fe86:	4b07      	ldr	r3, [pc, #28]	@ (800fea4 <lidar_init+0x3c>)
 800fe88:	4a09      	ldr	r2, [pc, #36]	@ (800feb0 <lidar_init+0x48>)
 800fe8a:	609a      	str	r2, [r3, #8]
	  lidar.serial_drv.it_transmit=uart_it_transmit;
 800fe8c:	4b05      	ldr	r3, [pc, #20]	@ (800fea4 <lidar_init+0x3c>)
 800fe8e:	4a09      	ldr	r2, [pc, #36]	@ (800feb4 <lidar_init+0x4c>)
 800fe90:	60da      	str	r2, [r3, #12]

	  lidar.serial_drv.dma_receive=uart_dma_receive;
 800fe92:	4b04      	ldr	r3, [pc, #16]	@ (800fea4 <lidar_init+0x3c>)
 800fe94:	4a08      	ldr	r2, [pc, #32]	@ (800feb8 <lidar_init+0x50>)
 800fe96:	611a      	str	r2, [r3, #16]
	  lidar.serial_drv.dma_transmit=uart_dma_transmit;
 800fe98:	4b02      	ldr	r3, [pc, #8]	@ (800fea4 <lidar_init+0x3c>)
 800fe9a:	4a08      	ldr	r2, [pc, #32]	@ (800febc <lidar_init+0x54>)
 800fe9c:	615a      	str	r2, [r3, #20]
}
 800fe9e:	bf00      	nop
 800fea0:	bd80      	pop	{r7, pc}
 800fea2:	bf00      	nop
 800fea4:	20000da0 	.word	0x20000da0
 800fea8:	0800fd79 	.word	0x0800fd79
 800feac:	0800fda1 	.word	0x0800fda1
 800feb0:	0800fdc9 	.word	0x0800fdc9
 800feb4:	0800fdf1 	.word	0x0800fdf1
 800feb8:	0800fe19 	.word	0x0800fe19
 800febc:	0800fe41 	.word	0x0800fe41

0800fec0 <lidarTake>:

void lidarTake (void * pvParameters){
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b084      	sub	sp, #16
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
	uint8_t* buff;

	  if (LIDAR_start_scan_dma(&lidar) == 0) {
 800fec8:	4814      	ldr	r0, [pc, #80]	@ (800ff1c <lidarTake+0x5c>)
 800feca:	f7ff fca7 	bl	800f81c <LIDAR_start_scan_dma>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d103      	bne.n	800fedc <lidarTake+0x1c>
	      printf("LIDAR scanning started successfully.\r\n");
 800fed4:	4812      	ldr	r0, [pc, #72]	@ (800ff20 <lidarTake+0x60>)
 800fed6:	f008 fcf5 	bl	80188c4 <puts>
 800feda:	e002      	b.n	800fee2 <lidarTake+0x22>
	  } else {
	      printf("Failed to start LIDAR scanning.\r\n");
 800fedc:	4811      	ldr	r0, [pc, #68]	@ (800ff24 <lidarTake+0x64>)
 800fede:	f008 fcf1 	bl	80188c4 <puts>
	  }

	for(;;){
		// Attente du Semahore de half buffer
		xSemaphoreTake(semb_halfCllbck, portMAX_DELAY);
 800fee2:	4b11      	ldr	r3, [pc, #68]	@ (800ff28 <lidarTake+0x68>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800feea:	4618      	mov	r0, r3
 800feec:	f003 fa38 	bl	8013360 <xQueueSemaphoreTake>

		// Pointeur sur le début des données
		buff = lidar.processing.receive_buff;
 800fef0:	4b0e      	ldr	r3, [pc, #56]	@ (800ff2c <lidarTake+0x6c>)
 800fef2:	60fb      	str	r3, [r7, #12]
		LIDAR_process_frame(&lidar, buff);
 800fef4:	68f9      	ldr	r1, [r7, #12]
 800fef6:	4809      	ldr	r0, [pc, #36]	@ (800ff1c <lidarTake+0x5c>)
 800fef8:	f7ff fcc8 	bl	800f88c <LIDAR_process_frame>


		// Attente du semaphore du complete buffer
		xSemaphoreTake(semb_cpltCllbck, portMAX_DELAY);
 800fefc:	4b0c      	ldr	r3, [pc, #48]	@ (800ff30 <lidarTake+0x70>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ff04:	4618      	mov	r0, r3
 800ff06:	f003 fa2b 	bl	8013360 <xQueueSemaphoreTake>

		// Pointeur sur la moitié des données
		buff = &lidar.processing.receive_buff[FRAME_BUFF_SIZE];
 800ff0a:	4b0a      	ldr	r3, [pc, #40]	@ (800ff34 <lidarTake+0x74>)
 800ff0c:	60fb      	str	r3, [r7, #12]
		LIDAR_process_frame(&lidar, buff);
 800ff0e:	68f9      	ldr	r1, [r7, #12]
 800ff10:	4802      	ldr	r0, [pc, #8]	@ (800ff1c <lidarTake+0x5c>)
 800ff12:	f7ff fcbb 	bl	800f88c <LIDAR_process_frame>
		xSemaphoreTake(semb_halfCllbck, portMAX_DELAY);
 800ff16:	bf00      	nop
 800ff18:	e7e3      	b.n	800fee2 <lidarTake+0x22>
 800ff1a:	bf00      	nop
 800ff1c:	20000da0 	.word	0x20000da0
 800ff20:	0801bc38 	.word	0x0801bc38
 800ff24:	0801bc60 	.word	0x0801bc60
 800ff28:	200006e4 	.word	0x200006e4
 800ff2c:	20001b90 	.word	0x20001b90
 800ff30:	200006e8 	.word	0x200006e8
 800ff34:	20002360 	.word	0x20002360

0800ff38 <lidarprocess>:
		}
}

void lidarprocess (void * pvParameters){
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]

	for(;;){

	    medianFilter(&lidar);
 800ff40:	480a      	ldr	r0, [pc, #40]	@ (800ff6c <lidarprocess+0x34>)
 800ff42:	f7ff fe89 	bl	800fc58 <medianFilter>
	    find_clusters(&lidar);
 800ff46:	4809      	ldr	r0, [pc, #36]	@ (800ff6c <lidarprocess+0x34>)
 800ff48:	f7ff fdd0 	bl	800faec <find_clusters>
	    printf("Clusters Maison trouvees : %d \r\n", lidar.processing.cluster_cnt);
 800ff4c:	4b07      	ldr	r3, [pc, #28]	@ (800ff6c <lidarprocess+0x34>)
 800ff4e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ff52:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 800ff56:	4619      	mov	r1, r3
 800ff58:	4805      	ldr	r0, [pc, #20]	@ (800ff70 <lidarprocess+0x38>)
 800ff5a:	f008 fc4b 	bl	80187f4 <iprintf>
	    vTaskDelay(DUREE);
 800ff5e:	f241 3088 	movw	r0, #5000	@ 0x1388
 800ff62:	f003 fea1 	bl	8013ca8 <vTaskDelay>
	    medianFilter(&lidar);
 800ff66:	bf00      	nop
 800ff68:	e7ea      	b.n	800ff40 <lidarprocess+0x8>
 800ff6a:	bf00      	nop
 800ff6c:	20000da0 	.word	0x20000da0
 800ff70:	0801bc84 	.word	0x0801bc84

0800ff74 <__NVIC_EnableIRQ>:
{
 800ff74:	b480      	push	{r7}
 800ff76:	b083      	sub	sp, #12
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ff7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	db0b      	blt.n	800ff9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ff86:	79fb      	ldrb	r3, [r7, #7]
 800ff88:	f003 021f 	and.w	r2, r3, #31
 800ff8c:	4907      	ldr	r1, [pc, #28]	@ (800ffac <__NVIC_EnableIRQ+0x38>)
 800ff8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff92:	095b      	lsrs	r3, r3, #5
 800ff94:	2001      	movs	r0, #1
 800ff96:	fa00 f202 	lsl.w	r2, r0, r2
 800ff9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ff9e:	bf00      	nop
 800ffa0:	370c      	adds	r7, #12
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa8:	4770      	bx	lr
 800ffaa:	bf00      	nop
 800ffac:	e000e100 	.word	0xe000e100

0800ffb0 <__NVIC_SetPriority>:
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	6039      	str	r1, [r7, #0]
 800ffba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ffbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	db0a      	blt.n	800ffda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	b2da      	uxtb	r2, r3
 800ffc8:	490c      	ldr	r1, [pc, #48]	@ (800fffc <__NVIC_SetPriority+0x4c>)
 800ffca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffce:	0112      	lsls	r2, r2, #4
 800ffd0:	b2d2      	uxtb	r2, r2
 800ffd2:	440b      	add	r3, r1
 800ffd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ffd8:	e00a      	b.n	800fff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	b2da      	uxtb	r2, r3
 800ffde:	4908      	ldr	r1, [pc, #32]	@ (8010000 <__NVIC_SetPriority+0x50>)
 800ffe0:	79fb      	ldrb	r3, [r7, #7]
 800ffe2:	f003 030f 	and.w	r3, r3, #15
 800ffe6:	3b04      	subs	r3, #4
 800ffe8:	0112      	lsls	r2, r2, #4
 800ffea:	b2d2      	uxtb	r2, r2
 800ffec:	440b      	add	r3, r1
 800ffee:	761a      	strb	r2, [r3, #24]
}
 800fff0:	bf00      	nop
 800fff2:	370c      	adds	r7, #12
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr
 800fffc:	e000e100 	.word	0xe000e100
 8010000:	e000ed00 	.word	0xe000ed00

08010004 <LL_AHB2_GRP1_EnableClock>:
{
 8010004:	b480      	push	{r7}
 8010006:	b085      	sub	sp, #20
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801000c:	4b08      	ldr	r3, [pc, #32]	@ (8010030 <LL_AHB2_GRP1_EnableClock+0x2c>)
 801000e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010010:	4907      	ldr	r1, [pc, #28]	@ (8010030 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	4313      	orrs	r3, r2
 8010016:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8010018:	4b05      	ldr	r3, [pc, #20]	@ (8010030 <LL_AHB2_GRP1_EnableClock+0x2c>)
 801001a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	4013      	ands	r3, r2
 8010020:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010022:	68fb      	ldr	r3, [r7, #12]
}
 8010024:	bf00      	nop
 8010026:	3714      	adds	r7, #20
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr
 8010030:	40021000 	.word	0x40021000

08010034 <LL_GPIO_SetPinMode>:
{
 8010034:	b480      	push	{r7}
 8010036:	b08b      	sub	sp, #44	@ 0x2c
 8010038:	af00      	add	r7, sp, #0
 801003a:	60f8      	str	r0, [r7, #12]
 801003c:	60b9      	str	r1, [r7, #8]
 801003e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681a      	ldr	r2, [r3, #0]
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	fa93 f3a3 	rbit	r3, r3
 801004e:	613b      	str	r3, [r7, #16]
  return result;
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d101      	bne.n	801005e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801005a:	2320      	movs	r3, #32
 801005c:	e003      	b.n	8010066 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	fab3 f383 	clz	r3, r3
 8010064:	b2db      	uxtb	r3, r3
 8010066:	005b      	lsls	r3, r3, #1
 8010068:	2103      	movs	r1, #3
 801006a:	fa01 f303 	lsl.w	r3, r1, r3
 801006e:	43db      	mvns	r3, r3
 8010070:	401a      	ands	r2, r3
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010076:	6a3b      	ldr	r3, [r7, #32]
 8010078:	fa93 f3a3 	rbit	r3, r3
 801007c:	61fb      	str	r3, [r7, #28]
  return result;
 801007e:	69fb      	ldr	r3, [r7, #28]
 8010080:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8010082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010084:	2b00      	cmp	r3, #0
 8010086:	d101      	bne.n	801008c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8010088:	2320      	movs	r3, #32
 801008a:	e003      	b.n	8010094 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 801008c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801008e:	fab3 f383 	clz	r3, r3
 8010092:	b2db      	uxtb	r3, r3
 8010094:	005b      	lsls	r3, r3, #1
 8010096:	6879      	ldr	r1, [r7, #4]
 8010098:	fa01 f303 	lsl.w	r3, r1, r3
 801009c:	431a      	orrs	r2, r3
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	601a      	str	r2, [r3, #0]
}
 80100a2:	bf00      	nop
 80100a4:	372c      	adds	r7, #44	@ 0x2c
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr

080100ae <LL_GPIO_SetPinPull>:
{
 80100ae:	b480      	push	{r7}
 80100b0:	b08b      	sub	sp, #44	@ 0x2c
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	60f8      	str	r0, [r7, #12]
 80100b6:	60b9      	str	r1, [r7, #8]
 80100b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	68da      	ldr	r2, [r3, #12]
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	fa93 f3a3 	rbit	r3, r3
 80100c8:	613b      	str	r3, [r7, #16]
  return result;
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80100ce:	69bb      	ldr	r3, [r7, #24]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d101      	bne.n	80100d8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80100d4:	2320      	movs	r3, #32
 80100d6:	e003      	b.n	80100e0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	fab3 f383 	clz	r3, r3
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	005b      	lsls	r3, r3, #1
 80100e2:	2103      	movs	r1, #3
 80100e4:	fa01 f303 	lsl.w	r3, r1, r3
 80100e8:	43db      	mvns	r3, r3
 80100ea:	401a      	ands	r2, r3
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80100f0:	6a3b      	ldr	r3, [r7, #32]
 80100f2:	fa93 f3a3 	rbit	r3, r3
 80100f6:	61fb      	str	r3, [r7, #28]
  return result;
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80100fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d101      	bne.n	8010106 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8010102:	2320      	movs	r3, #32
 8010104:	e003      	b.n	801010e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8010106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010108:	fab3 f383 	clz	r3, r3
 801010c:	b2db      	uxtb	r3, r3
 801010e:	005b      	lsls	r3, r3, #1
 8010110:	6879      	ldr	r1, [r7, #4]
 8010112:	fa01 f303 	lsl.w	r3, r1, r3
 8010116:	431a      	orrs	r2, r3
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	60da      	str	r2, [r3, #12]
}
 801011c:	bf00      	nop
 801011e:	372c      	adds	r7, #44	@ 0x2c
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr

08010128 <LL_UCPD_Enable>:
{
 8010128:	b480      	push	{r7}
 801012a:	b083      	sub	sp, #12
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	601a      	str	r2, [r3, #0]
}
 801013c:	bf00      	nop
 801013e:	370c      	adds	r7, #12
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr

08010148 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 801015a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801015e:	683a      	ldr	r2, [r7, #0]
 8010160:	431a      	orrs	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	601a      	str	r2, [r3, #0]
}
 8010166:	bf00      	nop
 8010168:	370c      	adds	r7, #12
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr

08010172 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 8010172:	b480      	push	{r7}
 8010174:	b083      	sub	sp, #12
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
 801017a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	431a      	orrs	r2, r3
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	60da      	str	r2, [r3, #12]
}
 801018c:	bf00      	nop
 801018e:	370c      	adds	r7, #12
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr

08010198 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8010198:	b480      	push	{r7}
 801019a:	b083      	sub	sp, #12
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	691b      	ldr	r3, [r3, #16]
 80101a4:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	611a      	str	r2, [r3, #16]
}
 80101ac:	bf00      	nop
 80101ae:	370c      	adds	r7, #12
 80101b0:	46bd      	mov	sp, r7
 80101b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b6:	4770      	bx	lr

080101b8 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	691b      	ldr	r3, [r3, #16]
 80101c4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	611a      	str	r2, [r3, #16]
}
 80101cc:	bf00      	nop
 80101ce:	370c      	adds	r7, #12
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr

080101d8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80101d8:	b480      	push	{r7}
 80101da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80101dc:	4b05      	ldr	r3, [pc, #20]	@ (80101f4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80101de:	689b      	ldr	r3, [r3, #8]
 80101e0:	4a04      	ldr	r2, [pc, #16]	@ (80101f4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80101e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80101e6:	6093      	str	r3, [r2, #8]
}
 80101e8:	bf00      	nop
 80101ea:	46bd      	mov	sp, r7
 80101ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f0:	4770      	bx	lr
 80101f2:	bf00      	nop
 80101f4:	40007000 	.word	0x40007000

080101f8 <CAD_Init>:
  * @param  pParams       Pointer on PD parameters based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 80101f8:	b590      	push	{r4, r7, lr}
 80101fa:	b08b      	sub	sp, #44	@ 0x2c
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60b9      	str	r1, [r7, #8]
 8010200:	607a      	str	r2, [r7, #4]
 8010202:	603b      	str	r3, [r7, #0]
 8010204:	4603      	mov	r3, r0
 8010206:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010208:	7bfa      	ldrb	r2, [r7, #15]
 801020a:	4613      	mov	r3, r2
 801020c:	005b      	lsls	r3, r3, #1
 801020e:	4413      	add	r3, r2
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	4a66      	ldr	r2, [pc, #408]	@ (80103ac <CAD_Init+0x1b4>)
 8010214:	4413      	add	r3, r2
 8010216:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 8010218:	7bfa      	ldrb	r2, [r7, #15]
 801021a:	4965      	ldr	r1, [pc, #404]	@ (80103b0 <CAD_Init+0x1b8>)
 801021c:	4613      	mov	r3, r2
 801021e:	011b      	lsls	r3, r3, #4
 8010220:	1a9b      	subs	r3, r3, r2
 8010222:	009b      	lsls	r3, r3, #2
 8010224:	440b      	add	r3, r1
 8010226:	3310      	adds	r3, #16
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 801022c:	7bfa      	ldrb	r2, [r7, #15]
 801022e:	4960      	ldr	r1, [pc, #384]	@ (80103b0 <CAD_Init+0x1b8>)
 8010230:	4613      	mov	r3, r2
 8010232:	011b      	lsls	r3, r3, #4
 8010234:	1a9b      	subs	r3, r3, r2
 8010236:	009b      	lsls	r3, r3, #2
 8010238:	440b      	add	r3, r1
 801023a:	330c      	adds	r3, #12
 801023c:	68ba      	ldr	r2, [r7, #8]
 801023e:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8010240:	7bfa      	ldrb	r2, [r7, #15]
 8010242:	495b      	ldr	r1, [pc, #364]	@ (80103b0 <CAD_Init+0x1b8>)
 8010244:	4613      	mov	r3, r2
 8010246:	011b      	lsls	r3, r3, #4
 8010248:	1a9b      	subs	r3, r3, r2
 801024a:	009b      	lsls	r3, r3, #2
 801024c:	440b      	add	r3, r1
 801024e:	330c      	adds	r3, #12
 8010250:	6819      	ldr	r1, [r3, #0]
 8010252:	7bfa      	ldrb	r2, [r7, #15]
 8010254:	4856      	ldr	r0, [pc, #344]	@ (80103b0 <CAD_Init+0x1b8>)
 8010256:	4613      	mov	r3, r2
 8010258:	011b      	lsls	r3, r3, #4
 801025a:	1a9b      	subs	r3, r3, r2
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	4403      	add	r3, r0
 8010260:	3310      	adds	r3, #16
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	794b      	ldrb	r3, [r1, #5]
 8010266:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801026a:	b2d9      	uxtb	r1, r3
 801026c:	7893      	ldrb	r3, [r2, #2]
 801026e:	f361 0301 	bfi	r3, r1, #0, #2
 8010272:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 8010274:	7bfa      	ldrb	r2, [r7, #15]
 8010276:	494e      	ldr	r1, [pc, #312]	@ (80103b0 <CAD_Init+0x1b8>)
 8010278:	4613      	mov	r3, r2
 801027a:	011b      	lsls	r3, r3, #4
 801027c:	1a9b      	subs	r3, r3, r2
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	440b      	add	r3, r1
 8010282:	3310      	adds	r3, #16
 8010284:	681a      	ldr	r2, [r3, #0]
 8010286:	7893      	ldrb	r3, [r2, #2]
 8010288:	f36f 0383 	bfc	r3, #2, #2
 801028c:	7093      	strb	r3, [r2, #2]

  /* Reset handle */
  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 801028e:	220c      	movs	r2, #12
 8010290:	2100      	movs	r1, #0
 8010292:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010294:	f008 fb8c 	bl	80189b0 <memset>

  /* Register CAD wake up callback */
  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 8010298:	7bfa      	ldrb	r2, [r7, #15]
 801029a:	4945      	ldr	r1, [pc, #276]	@ (80103b0 <CAD_Init+0x1b8>)
 801029c:	4613      	mov	r3, r2
 801029e:	011b      	lsls	r3, r3, #4
 80102a0:	1a9b      	subs	r3, r3, r2
 80102a2:	009b      	lsls	r3, r3, #2
 80102a4:	440b      	add	r3, r1
 80102a6:	332c      	adds	r3, #44	@ 0x2c
 80102a8:	683a      	ldr	r2, [r7, #0]
 80102aa:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 80102ac:	7bfc      	ldrb	r4, [r7, #15]
 80102ae:	7bfb      	ldrb	r3, [r7, #15]
 80102b0:	4618      	mov	r0, r3
 80102b2:	f000 fb6b 	bl	801098c <USBPD_HW_GetUSPDInstance>
 80102b6:	4602      	mov	r2, r0
 80102b8:	493d      	ldr	r1, [pc, #244]	@ (80103b0 <CAD_Init+0x1b8>)
 80102ba:	4623      	mov	r3, r4
 80102bc:	011b      	lsls	r3, r3, #4
 80102be:	1b1b      	subs	r3, r3, r4
 80102c0:	009b      	lsls	r3, r3, #2
 80102c2:	440b      	add	r3, r1
 80102c4:	601a      	str	r2, [r3, #0]

  /* Initialize UCPD */
  LL_UCPD_StructInit(&settings);
 80102c6:	f107 0314 	add.w	r3, r7, #20
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7ff fa8e 	bl	800f7ec <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 80102d0:	7bfa      	ldrb	r2, [r7, #15]
 80102d2:	4937      	ldr	r1, [pc, #220]	@ (80103b0 <CAD_Init+0x1b8>)
 80102d4:	4613      	mov	r3, r2
 80102d6:	011b      	lsls	r3, r3, #4
 80102d8:	1a9b      	subs	r3, r3, r2
 80102da:	009b      	lsls	r3, r3, #2
 80102dc:	440b      	add	r3, r1
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f107 0214 	add.w	r2, r7, #20
 80102e4:	4611      	mov	r1, r2
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7ff fa52 	bl	800f790 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 80102ec:	7bfa      	ldrb	r2, [r7, #15]
 80102ee:	4930      	ldr	r1, [pc, #192]	@ (80103b0 <CAD_Init+0x1b8>)
 80102f0:	4613      	mov	r3, r2
 80102f2:	011b      	lsls	r3, r3, #4
 80102f4:	1a9b      	subs	r3, r3, r2
 80102f6:	009b      	lsls	r3, r3, #2
 80102f8:	440b      	add	r3, r1
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8010300:	4618      	mov	r0, r3
 8010302:	f7ff ff21 	bl	8010148 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8010306:	7bfa      	ldrb	r2, [r7, #15]
 8010308:	4929      	ldr	r1, [pc, #164]	@ (80103b0 <CAD_Init+0x1b8>)
 801030a:	4613      	mov	r3, r2
 801030c:	011b      	lsls	r3, r3, #4
 801030e:	1a9b      	subs	r3, r3, r2
 8010310:	009b      	lsls	r3, r3, #2
 8010312:	440b      	add	r3, r1
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 801031a:	4618      	mov	r0, r3
 801031c:	f7ff ff29 	bl	8010172 <LL_UCPD_SetccEnable>
#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */

  /* Disable dead battery */
  LL_PWR_DisableUCPDDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 8010320:	f7ff ff5a 	bl	80101d8 <LL_PWR_DisableUCPDDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 8010324:	2002      	movs	r0, #2
 8010326:	f7ff fe6d 	bl	8010004 <LL_AHB2_GRP1_EnableClock>

  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 801032a:	2203      	movs	r2, #3
 801032c:	2140      	movs	r1, #64	@ 0x40
 801032e:	4821      	ldr	r0, [pc, #132]	@ (80103b4 <CAD_Init+0x1bc>)
 8010330:	f7ff fe80 	bl	8010034 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 8010334:	2203      	movs	r2, #3
 8010336:	2110      	movs	r1, #16
 8010338:	481e      	ldr	r0, [pc, #120]	@ (80103b4 <CAD_Init+0x1bc>)
 801033a:	f7ff fe7b 	bl	8010034 <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 801033e:	2200      	movs	r2, #0
 8010340:	2140      	movs	r1, #64	@ 0x40
 8010342:	481c      	ldr	r0, [pc, #112]	@ (80103b4 <CAD_Init+0x1bc>)
 8010344:	f7ff feb3 	bl	80100ae <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8010348:	2200      	movs	r2, #0
 801034a:	2110      	movs	r1, #16
 801034c:	4819      	ldr	r0, [pc, #100]	@ (80103b4 <CAD_Init+0x1bc>)
 801034e:	f7ff feae 	bl	80100ae <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 8010352:	7bfb      	ldrb	r3, [r7, #15]
 8010354:	4618      	mov	r0, r3
 8010356:	f005 fc8b 	bl	8015c70 <BSP_USBPD_PWR_Init>
  /* Register VBUS detect callback */
  BSP_USBPD_PWR_RegisterVBUSDetectCallback(PortNum, CAD_HW_IF_VBUSDetectCallback);
#endif /* TCPP0203_SUPPORT */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 801035a:	7bfa      	ldrb	r2, [r7, #15]
 801035c:	4914      	ldr	r1, [pc, #80]	@ (80103b0 <CAD_Init+0x1b8>)
 801035e:	4613      	mov	r3, r2
 8010360:	011b      	lsls	r3, r3, #4
 8010362:	1a9b      	subs	r3, r3, r2
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	440b      	add	r3, r1
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4618      	mov	r0, r3
 801036c:	f7ff fedc 	bl	8010128 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8010370:	7bfb      	ldrb	r3, [r7, #15]
 8010372:	4618      	mov	r0, r3
 8010374:	f001 fbd2 	bl	8011b1c <USBPDM1_AssertRd>
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      /* Set current state machine to SNK state machine */
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 8010378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801037a:	4a0f      	ldr	r2, [pc, #60]	@ (80103b8 <CAD_Init+0x1c0>)
 801037c:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 801037e:	7bfa      	ldrb	r2, [r7, #15]
 8010380:	490b      	ldr	r1, [pc, #44]	@ (80103b0 <CAD_Init+0x1b8>)
 8010382:	4613      	mov	r3, r2
 8010384:	011b      	lsls	r3, r3, #4
 8010386:	1a9b      	subs	r3, r3, r2
 8010388:	009b      	lsls	r3, r3, #2
 801038a:	440b      	add	r3, r1
 801038c:	330c      	adds	r3, #12
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	795b      	ldrb	r3, [r3, #5]
 8010392:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8010396:	b2d9      	uxtb	r1, r3
 8010398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801039a:	7853      	ldrb	r3, [r2, #1]
 801039c:	f361 13c7 	bfi	r3, r1, #7, #1
 80103a0:	7053      	strb	r3, [r2, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 80103a2:	bf00      	nop
 80103a4:	372c      	adds	r7, #44	@ 0x2c
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd90      	pop	{r4, r7, pc}
 80103aa:	bf00      	nop
 80103ac:	20003588 	.word	0x20003588
 80103b0:	200035a0 	.word	0x200035a0
 80103b4:	48000400 	.word	0x48000400
 80103b8:	08010409 	.word	0x08010409

080103bc <CAD_Enter_ErrorRecovery>:
  * @brief  Function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	4603      	mov	r3, r0
 80103c4:	71fb      	strb	r3, [r7, #7]
  /* Remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 80103c6:	79fb      	ldrb	r3, [r7, #7]
 80103c8:	4618      	mov	r0, r3
 80103ca:	f001 fc39 	bl	8011c40 <USBPDM1_EnterErrorRecovery>
  /* Set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 80103ce:	79fa      	ldrb	r2, [r7, #7]
 80103d0:	490b      	ldr	r1, [pc, #44]	@ (8010400 <CAD_Enter_ErrorRecovery+0x44>)
 80103d2:	4613      	mov	r3, r2
 80103d4:	005b      	lsls	r3, r3, #1
 80103d6:	4413      	add	r3, r2
 80103d8:	009b      	lsls	r3, r3, #2
 80103da:	18ca      	adds	r2, r1, r3
 80103dc:	7813      	ldrb	r3, [r2, #0]
 80103de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103e2:	7013      	strb	r3, [r2, #0]
  /* Wake up CAD task */
  Ports[PortNum].USBPD_CAD_WakeUp();
 80103e4:	79fa      	ldrb	r2, [r7, #7]
 80103e6:	4907      	ldr	r1, [pc, #28]	@ (8010404 <CAD_Enter_ErrorRecovery+0x48>)
 80103e8:	4613      	mov	r3, r2
 80103ea:	011b      	lsls	r3, r3, #4
 80103ec:	1a9b      	subs	r3, r3, r2
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	440b      	add	r3, r1
 80103f2:	332c      	adds	r3, #44	@ 0x2c
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	4798      	blx	r3
}
 80103f8:	bf00      	nop
 80103fa:	3708      	adds	r7, #8
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	20003588 	.word	0x20003588
 8010404:	200035a0 	.word	0x200035a0

08010408 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* Function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b086      	sub	sp, #24
 801040c:	af00      	add	r7, sp, #0
 801040e:	4603      	mov	r3, r0
 8010410:	60b9      	str	r1, [r7, #8]
 8010412:	607a      	str	r2, [r7, #4]
 8010414:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010416:	7bfa      	ldrb	r2, [r7, #15]
 8010418:	4613      	mov	r3, r2
 801041a:	005b      	lsls	r3, r3, #1
 801041c:	4413      	add	r3, r2
 801041e:	009b      	lsls	r3, r3, #2
 8010420:	4a17      	ldr	r2, [pc, #92]	@ (8010480 <CAD_StateMachine_SNK+0x78>)
 8010422:	4413      	add	r3, r2
 8010424:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010426:	2302      	movs	r3, #2
 8010428:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /* Check CAD STATE */
  switch (_handle->cstate)
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	785b      	ldrb	r3, [r3, #1]
 801042e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8010432:	b2db      	uxtb	r3, r3
 8010434:	2b03      	cmp	r3, #3
 8010436:	d014      	beq.n	8010462 <CAD_StateMachine_SNK+0x5a>
 8010438:	2b03      	cmp	r3, #3
 801043a:	dc1a      	bgt.n	8010472 <CAD_StateMachine_SNK+0x6a>
 801043c:	2b01      	cmp	r3, #1
 801043e:	d002      	beq.n	8010446 <CAD_StateMachine_SNK+0x3e>
 8010440:	2b02      	cmp	r3, #2
 8010442:	d006      	beq.n	8010452 <CAD_StateMachine_SNK+0x4a>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 8010444:	e015      	b.n	8010472 <CAD_StateMachine_SNK+0x6a>
      _timing = ManageStateDetached_SNK(PortNum);
 8010446:	7bfb      	ldrb	r3, [r7, #15]
 8010448:	4618      	mov	r0, r3
 801044a:	f000 f955 	bl	80106f8 <ManageStateDetached_SNK>
 801044e:	6178      	str	r0, [r7, #20]
      break;
 8010450:	e010      	b.n	8010474 <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 8010452:	7bfb      	ldrb	r3, [r7, #15]
 8010454:	687a      	ldr	r2, [r7, #4]
 8010456:	68b9      	ldr	r1, [r7, #8]
 8010458:	4618      	mov	r0, r3
 801045a:	f000 f997 	bl	801078c <ManageStateAttachedWait_SNK>
 801045e:	6178      	str	r0, [r7, #20]
      break;
 8010460:	e008      	b.n	8010474 <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 8010462:	7bfb      	ldrb	r3, [r7, #15]
 8010464:	687a      	ldr	r2, [r7, #4]
 8010466:	68b9      	ldr	r1, [r7, #8]
 8010468:	4618      	mov	r0, r3
 801046a:	f000 fa11 	bl	8010890 <ManageStateAttached_SNK>
 801046e:	6178      	str	r0, [r7, #20]
      break;
 8010470:	e000      	b.n	8010474 <CAD_StateMachine_SNK+0x6c>
      break;
 8010472:	bf00      	nop
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8010474:	697b      	ldr	r3, [r7, #20]
}
 8010476:	4618      	mov	r0, r3
 8010478:	3718      	adds	r7, #24
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	20003588 	.word	0x20003588

08010484 <CAD_StateMachine>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b086      	sub	sp, #24
 8010488:	af00      	add	r7, sp, #0
 801048a:	4603      	mov	r3, r0
 801048c:	60b9      	str	r1, [r7, #8]
 801048e:	607a      	str	r2, [r7, #4]
 8010490:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010492:	7bfa      	ldrb	r2, [r7, #15]
 8010494:	4613      	mov	r3, r2
 8010496:	005b      	lsls	r3, r3, #1
 8010498:	4413      	add	r3, r2
 801049a:	009b      	lsls	r3, r3, #2
 801049c:	4a52      	ldr	r2, [pc, #328]	@ (80105e8 <CAD_StateMachine+0x164>)
 801049e:	4413      	add	r3, r2
 80104a0:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80104a2:	2302      	movs	r3, #2
 80104a4:	617b      	str	r3, [r7, #20]

  /* Set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	2200      	movs	r2, #0
 80104aa:	701a      	strb	r2, [r3, #0]

  /* If a swap is on going, return default timing */
  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 80104ac:	7bfa      	ldrb	r2, [r7, #15]
 80104ae:	494f      	ldr	r1, [pc, #316]	@ (80105ec <CAD_StateMachine+0x168>)
 80104b0:	4613      	mov	r3, r2
 80104b2:	011b      	lsls	r3, r3, #4
 80104b4:	1a9b      	subs	r3, r3, r2
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	440b      	add	r3, r1
 80104ba:	3310      	adds	r3, #16
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	f003 0310 	and.w	r3, r3, #16
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d001      	beq.n	80104ce <CAD_StateMachine+0x4a>
  {
    return _timing;
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	e087      	b.n	80105de <CAD_StateMachine+0x15a>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	781b      	ldrb	r3, [r3, #0]
 80104d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00a      	beq.n	80104f2 <CAD_StateMachine+0x6e>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 80104dc:	693a      	ldr	r2, [r7, #16]
 80104de:	7813      	ldrb	r3, [r2, #0]
 80104e0:	f36f 13c7 	bfc	r3, #7, #1
 80104e4:	7013      	strb	r3, [r2, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 80104e6:	693a      	ldr	r2, [r7, #16]
 80104e8:	7853      	ldrb	r3, [r2, #1]
 80104ea:	210c      	movs	r1, #12
 80104ec:	f361 0345 	bfi	r3, r1, #1, #5
 80104f0:	7053      	strb	r3, [r2, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	785b      	ldrb	r3, [r3, #1]
 80104f6:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80104fa:	b2db      	uxtb	r3, r3
 80104fc:	2b0d      	cmp	r3, #13
 80104fe:	d051      	beq.n	80105a4 <CAD_StateMachine+0x120>
 8010500:	2b0d      	cmp	r3, #13
 8010502:	dc62      	bgt.n	80105ca <CAD_StateMachine+0x146>
 8010504:	2b00      	cmp	r3, #0
 8010506:	d002      	beq.n	801050e <CAD_StateMachine+0x8a>
 8010508:	2b0c      	cmp	r3, #12
 801050a:	d024      	beq.n	8010556 <CAD_StateMachine+0xd2>
 801050c:	e05d      	b.n	80105ca <CAD_StateMachine+0x146>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      /* Enable TypeCEvents Interrupts */
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 801050e:	7bfa      	ldrb	r2, [r7, #15]
 8010510:	4936      	ldr	r1, [pc, #216]	@ (80105ec <CAD_StateMachine+0x168>)
 8010512:	4613      	mov	r3, r2
 8010514:	011b      	lsls	r3, r3, #4
 8010516:	1a9b      	subs	r3, r3, r2
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	440b      	add	r3, r1
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	4618      	mov	r0, r3
 8010520:	f7ff fe3a 	bl	8010198 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 8010524:	7bfa      	ldrb	r2, [r7, #15]
 8010526:	4931      	ldr	r1, [pc, #196]	@ (80105ec <CAD_StateMachine+0x168>)
 8010528:	4613      	mov	r3, r2
 801052a:	011b      	lsls	r3, r3, #4
 801052c:	1a9b      	subs	r3, r3, r2
 801052e:	009b      	lsls	r3, r3, #2
 8010530:	440b      	add	r3, r1
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	4618      	mov	r0, r3
 8010536:	f7ff fe3f 	bl	80101b8 <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      /* Enable IRQ */
      UCPD_INSTANCE0_ENABLEIRQ;
 801053a:	2104      	movs	r1, #4
 801053c:	203f      	movs	r0, #63	@ 0x3f
 801053e:	f7ff fd37 	bl	800ffb0 <__NVIC_SetPriority>
 8010542:	203f      	movs	r0, #63	@ 0x3f
 8010544:	f7ff fd16 	bl	800ff74 <__NVIC_EnableIRQ>
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8010548:	693a      	ldr	r2, [r7, #16]
 801054a:	7853      	ldrb	r3, [r2, #1]
 801054c:	2101      	movs	r1, #1
 801054e:	f361 0345 	bfi	r3, r1, #1, #5
 8010552:	7053      	strb	r3, [r2, #1]
      break;
 8010554:	e042      	b.n	80105dc <CAD_StateMachine+0x158>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 8010556:	7bfb      	ldrb	r3, [r7, #15]
 8010558:	4618      	mov	r0, r3
 801055a:	f001 fb71 	bl	8011c40 <USBPDM1_EnterErrorRecovery>

      /* Forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 801055e:	7bfa      	ldrb	r2, [r7, #15]
 8010560:	4922      	ldr	r1, [pc, #136]	@ (80105ec <CAD_StateMachine+0x168>)
 8010562:	4613      	mov	r3, r2
 8010564:	011b      	lsls	r3, r3, #4
 8010566:	1a9b      	subs	r3, r3, r2
 8010568:	009b      	lsls	r3, r3, #2
 801056a:	440b      	add	r3, r1
 801056c:	3334      	adds	r3, #52	@ 0x34
 801056e:	2200      	movs	r2, #0
 8010570:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2200      	movs	r2, #0
 8010576:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 8010578:	693a      	ldr	r2, [r7, #16]
 801057a:	7813      	ldrb	r3, [r2, #0]
 801057c:	f36f 0301 	bfc	r3, #0, #2
 8010580:	7013      	strb	r3, [r2, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	2201      	movs	r2, #1
 8010586:	701a      	strb	r2, [r3, #0]

      /* Start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8010588:	f7f5 fcba 	bl	8005f00 <HAL_GetTick>
 801058c:	4602      	mov	r2, r0
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 8010592:	231a      	movs	r3, #26
 8010594:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 8010596:	693a      	ldr	r2, [r7, #16]
 8010598:	7853      	ldrb	r3, [r2, #1]
 801059a:	210d      	movs	r1, #13
 801059c:	f361 0345 	bfi	r3, r1, #1, #5
 80105a0:	7053      	strb	r3, [r2, #1]
      break;
 80105a2:	e01b      	b.n	80105dc <CAD_StateMachine+0x158>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 80105a4:	f7f5 fcac 	bl	8005f00 <HAL_GetTick>
 80105a8:	4602      	mov	r2, r0
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	1ad3      	subs	r3, r2, r3
 80105b0:	2b1a      	cmp	r3, #26
 80105b2:	d912      	bls.n	80105da <CAD_StateMachine+0x156>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 80105b4:	7bfb      	ldrb	r3, [r7, #15]
 80105b6:	4618      	mov	r0, r3
 80105b8:	f001 fab0 	bl	8011b1c <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* Switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 80105bc:	693a      	ldr	r2, [r7, #16]
 80105be:	7853      	ldrb	r3, [r2, #1]
 80105c0:	2101      	movs	r1, #1
 80105c2:	f361 0345 	bfi	r3, r1, #1, #5
 80105c6:	7053      	strb	r3, [r2, #1]
      }
      break;
 80105c8:	e007      	b.n	80105da <CAD_StateMachine+0x156>
    }

    default:
    {
      /* Call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	689b      	ldr	r3, [r3, #8]
 80105ce:	7bf8      	ldrb	r0, [r7, #15]
 80105d0:	687a      	ldr	r2, [r7, #4]
 80105d2:	68b9      	ldr	r1, [r7, #8]
 80105d4:	4798      	blx	r3
 80105d6:	6178      	str	r0, [r7, #20]
      break;
 80105d8:	e000      	b.n	80105dc <CAD_StateMachine+0x158>
      break;
 80105da:	bf00      	nop
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 80105dc:	697b      	ldr	r3, [r7, #20]
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3718      	adds	r7, #24
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}
 80105e6:	bf00      	nop
 80105e8:	20003588 	.word	0x20003588
 80105ec:	200035a0 	.word	0x200035a0

080105f0 <CAD_Check_HW_SNK>:
  * @brief  Check CCx HW condition
  * @param  PortNum Port
  * @retval none
  */
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b087      	sub	sp, #28
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	4603      	mov	r3, r0
 80105f8:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80105fa:	79fa      	ldrb	r2, [r7, #7]
 80105fc:	4613      	mov	r3, r2
 80105fe:	005b      	lsls	r3, r3, #1
 8010600:	4413      	add	r3, r2
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	4a3a      	ldr	r2, [pc, #232]	@ (80106f0 <CAD_Check_HW_SNK+0x100>)
 8010606:	4413      	add	r3, r2
 8010608:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 801060a:	79fa      	ldrb	r2, [r7, #7]
 801060c:	4939      	ldr	r1, [pc, #228]	@ (80106f4 <CAD_Check_HW_SNK+0x104>)
 801060e:	4613      	mov	r3, r2
 8010610:	011b      	lsls	r3, r3, #4
 8010612:	1a9b      	subs	r3, r3, r2
 8010614:	009b      	lsls	r3, r3, #2
 8010616:	440b      	add	r3, r1
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	695b      	ldr	r3, [r3, #20]
 801061c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010620:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 8010622:	79fa      	ldrb	r2, [r7, #7]
 8010624:	4933      	ldr	r1, [pc, #204]	@ (80106f4 <CAD_Check_HW_SNK+0x104>)
 8010626:	4613      	mov	r3, r2
 8010628:	011b      	lsls	r3, r3, #4
 801062a:	1a9b      	subs	r3, r3, r2
 801062c:	009b      	lsls	r3, r3, #2
 801062e:	440b      	add	r3, r1
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	695b      	ldr	r3, [r3, #20]
 8010634:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8010638:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 801063a:	697a      	ldr	r2, [r7, #20]
 801063c:	7813      	ldrb	r3, [r2, #0]
 801063e:	f36f 0301 	bfc	r3, #0, #2
 8010642:	7013      	strb	r3, [r2, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 8010644:	697a      	ldr	r2, [r7, #20]
 8010646:	7813      	ldrb	r3, [r2, #0]
 8010648:	f36f 0384 	bfc	r3, #2, #3
 801064c:	7013      	strb	r3, [r2, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d021      	beq.n	8010698 <CAD_Check_HW_SNK+0xa8>
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d11e      	bne.n	8010698 <CAD_Check_HW_SNK+0xa8>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 801065a:	697a      	ldr	r2, [r7, #20]
 801065c:	7813      	ldrb	r3, [r2, #0]
 801065e:	2101      	movs	r1, #1
 8010660:	f361 0384 	bfi	r3, r1, #2, #3
 8010664:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC1;
 8010666:	697a      	ldr	r2, [r7, #20]
 8010668:	7813      	ldrb	r3, [r2, #0]
 801066a:	2101      	movs	r1, #1
 801066c:	f361 0301 	bfi	r3, r1, #0, #2
 8010670:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	0c18      	lsrs	r0, r3, #16
 8010676:	79fa      	ldrb	r2, [r7, #7]
 8010678:	491e      	ldr	r1, [pc, #120]	@ (80106f4 <CAD_Check_HW_SNK+0x104>)
 801067a:	4613      	mov	r3, r2
 801067c:	011b      	lsls	r3, r3, #4
 801067e:	1a9b      	subs	r3, r3, r2
 8010680:	009b      	lsls	r3, r3, #2
 8010682:	440b      	add	r3, r1
 8010684:	3310      	adds	r3, #16
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	4603      	mov	r3, r0
 801068a:	f003 0303 	and.w	r3, r3, #3
 801068e:	b2d9      	uxtb	r1, r3
 8010690:	7893      	ldrb	r3, [r2, #2]
 8010692:	f361 0383 	bfi	r3, r1, #2, #2
 8010696:	7093      	strb	r3, [r2, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d121      	bne.n	80106e2 <CAD_Check_HW_SNK+0xf2>
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d01e      	beq.n	80106e2 <CAD_Check_HW_SNK+0xf2>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 80106a4:	697a      	ldr	r2, [r7, #20]
 80106a6:	7813      	ldrb	r3, [r2, #0]
 80106a8:	2101      	movs	r1, #1
 80106aa:	f361 0384 	bfi	r3, r1, #2, #3
 80106ae:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC2;
 80106b0:	697a      	ldr	r2, [r7, #20]
 80106b2:	7813      	ldrb	r3, [r2, #0]
 80106b4:	2102      	movs	r1, #2
 80106b6:	f361 0301 	bfi	r3, r1, #0, #2
 80106ba:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	0c98      	lsrs	r0, r3, #18
 80106c0:	79fa      	ldrb	r2, [r7, #7]
 80106c2:	490c      	ldr	r1, [pc, #48]	@ (80106f4 <CAD_Check_HW_SNK+0x104>)
 80106c4:	4613      	mov	r3, r2
 80106c6:	011b      	lsls	r3, r3, #4
 80106c8:	1a9b      	subs	r3, r3, r2
 80106ca:	009b      	lsls	r3, r3, #2
 80106cc:	440b      	add	r3, r1
 80106ce:	3310      	adds	r3, #16
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	4603      	mov	r3, r0
 80106d4:	f003 0303 	and.w	r3, r3, #3
 80106d8:	b2d9      	uxtb	r1, r3
 80106da:	7893      	ldrb	r3, [r2, #2]
 80106dc:	f361 0383 	bfi	r3, r1, #2, #2
 80106e0:	7093      	strb	r3, [r2, #2]
  }
}
 80106e2:	bf00      	nop
 80106e4:	371c      	adds	r7, #28
 80106e6:	46bd      	mov	sp, r7
 80106e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ec:	4770      	bx	lr
 80106ee:	bf00      	nop
 80106f0:	20003588 	.word	0x20003588
 80106f4:	200035a0 	.word	0x200035a0

080106f8 <ManageStateDetached_SNK>:
  * @brief  Manage the detached state for sink role
  * @param  PortNum Port
  * @retval Timeout value
  */
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b084      	sub	sp, #16
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	4603      	mov	r3, r0
 8010700:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010702:	79fa      	ldrb	r2, [r7, #7]
 8010704:	4613      	mov	r3, r2
 8010706:	005b      	lsls	r3, r3, #1
 8010708:	4413      	add	r3, r2
 801070a:	009b      	lsls	r3, r3, #2
 801070c:	4a1e      	ldr	r2, [pc, #120]	@ (8010788 <ManageStateDetached_SNK+0x90>)
 801070e:	4413      	add	r3, r2
 8010710:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010712:	2302      	movs	r3, #2
 8010714:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 8010716:	79fb      	ldrb	r3, [r7, #7]
 8010718:	4618      	mov	r0, r3
 801071a:	f7ff ff69 	bl	80105f0 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	781b      	ldrb	r3, [r3, #0]
 8010722:	f003 031c 	and.w	r3, r3, #28
 8010726:	b2db      	uxtb	r3, r3
 8010728:	2b00      	cmp	r3, #0
 801072a:	d103      	bne.n	8010734 <ManageStateDetached_SNK+0x3c>
    /* Value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 801072c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010730:	60fb      	str	r3, [r7, #12]
 8010732:	e023      	b.n	801077c <ManageStateDetached_SNK+0x84>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 8010734:	f7f5 fbe4 	bl	8005f00 <HAL_GetTick>
 8010738:	4602      	mov	r2, r0
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 801073e:	68ba      	ldr	r2, [r7, #8]
 8010740:	7853      	ldrb	r3, [r2, #1]
 8010742:	2102      	movs	r1, #2
 8010744:	f361 0345 	bfi	r3, r1, #1, #5
 8010748:	7053      	strb	r3, [r2, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 801074a:	2001      	movs	r0, #1
 801074c:	f7f5 fbe4 	bl	8005f18 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 8010750:	79fb      	ldrb	r3, [r7, #7]
 8010752:	4618      	mov	r0, r3
 8010754:	f7ff ff4c 	bl	80105f0 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	f003 031c 	and.w	r3, r3, #28
 8010760:	b2db      	uxtb	r3, r3
 8010762:	2b00      	cmp	r3, #0
 8010764:	d106      	bne.n	8010774 <ManageStateDetached_SNK+0x7c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8010766:	68ba      	ldr	r2, [r7, #8]
 8010768:	7853      	ldrb	r3, [r2, #1]
 801076a:	2101      	movs	r1, #1
 801076c:	f361 0345 	bfi	r3, r1, #1, #5
 8010770:	7053      	strb	r3, [r2, #1]
 8010772:	e003      	b.n	801077c <ManageStateDetached_SNK+0x84>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 8010774:	79fb      	ldrb	r3, [r7, #7]
 8010776:	4618      	mov	r0, r3
 8010778:	f005 fa8d 	bl	8015c96 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 801077c:	68fb      	ldr	r3, [r7, #12]
}
 801077e:	4618      	mov	r0, r3
 8010780:	3710      	adds	r7, #16
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}
 8010786:	bf00      	nop
 8010788:	20003588 	.word	0x20003588

0801078c <ManageStateAttachedWait_SNK>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b088      	sub	sp, #32
 8010790:	af00      	add	r7, sp, #0
 8010792:	4603      	mov	r3, r0
 8010794:	60b9      	str	r1, [r7, #8]
 8010796:	607a      	str	r2, [r7, #4]
 8010798:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801079a:	7bfa      	ldrb	r2, [r7, #15]
 801079c:	4613      	mov	r3, r2
 801079e:	005b      	lsls	r3, r3, #1
 80107a0:	4413      	add	r3, r2
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	4a39      	ldr	r2, [pc, #228]	@ (801088c <ManageStateAttachedWait_SNK+0x100>)
 80107a6:	4413      	add	r3, r2
 80107a8:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80107aa:	2302      	movs	r3, #2
 80107ac:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 80107ae:	f7f5 fba7 	bl	8005f00 <HAL_GetTick>
 80107b2:	4602      	mov	r2, r0
 80107b4:	69bb      	ldr	r3, [r7, #24]
 80107b6:	685b      	ldr	r3, [r3, #4]
 80107b8:	1ad3      	subs	r3, r2, r3
 80107ba:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 80107bc:	7bfb      	ldrb	r3, [r7, #15]
 80107be:	4618      	mov	r0, r3
 80107c0:	f7ff ff16 	bl	80105f0 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 80107c4:	69bb      	ldr	r3, [r7, #24]
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	f003 031c 	and.w	r3, r3, #28
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	2b04      	cmp	r3, #4
 80107d0:	d12c      	bne.n	801082c <ManageStateAttachedWait_SNK+0xa0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUNCE_THRESHOLD)
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	2b78      	cmp	r3, #120	@ 0x78
 80107d6:	d923      	bls.n	8010820 <ManageStateAttachedWait_SNK+0x94>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 80107d8:	7bfb      	ldrb	r3, [r7, #15]
 80107da:	2101      	movs	r1, #1
 80107dc:	4618      	mov	r0, r3
 80107de:	f005 fa0b 	bl	8015bf8 <USBPD_PWR_IF_GetVBUSStatus>
 80107e2:	4603      	mov	r3, r0
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	d11b      	bne.n	8010820 <ManageStateAttachedWait_SNK+0x94>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 80107e8:	69bb      	ldr	r3, [r7, #24]
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80107f0:	b2db      	uxtb	r3, r3
 80107f2:	461a      	mov	r2, r3
 80107f4:	7bfb      	ldrb	r3, [r7, #15]
 80107f6:	4611      	mov	r1, r2
 80107f8:	4618      	mov	r0, r3
 80107fa:	f001 fa95 	bl	8011d28 <HW_SignalAttachement>
        /* Go to attached state */
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 80107fe:	69ba      	ldr	r2, [r7, #24]
 8010800:	7853      	ldrb	r3, [r2, #1]
 8010802:	2103      	movs	r1, #3
 8010804:	f361 0345 	bfi	r3, r1, #1, #5
 8010808:	7053      	strb	r3, [r2, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	2202      	movs	r2, #2
 801080e:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 8010810:	69bb      	ldr	r3, [r7, #24]
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010818:	b2db      	uxtb	r3, r3
 801081a:	461a      	mov	r2, r3
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8010820:	69ba      	ldr	r2, [r7, #24]
 8010822:	7813      	ldrb	r3, [r2, #0]
 8010824:	f36f 1345 	bfc	r3, #5, #1
 8010828:	7013      	strb	r3, [r2, #0]
 801082a:	e02a      	b.n	8010882 <ManageStateAttachedWait_SNK+0xf6>
  }
  else
  {
    /* Start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 801082c:	69bb      	ldr	r3, [r7, #24]
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	f003 0320 	and.w	r3, r3, #32
 8010834:	b2db      	uxtb	r3, r3
 8010836:	2b00      	cmp	r3, #0
 8010838:	d10c      	bne.n	8010854 <ManageStateAttachedWait_SNK+0xc8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 801083a:	f7f5 fb61 	bl	8005f00 <HAL_GetTick>
 801083e:	4602      	mov	r2, r0
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 8010844:	69ba      	ldr	r2, [r7, #24]
 8010846:	7813      	ldrb	r3, [r2, #0]
 8010848:	f043 0320 	orr.w	r3, r3, #32
 801084c:	7013      	strb	r3, [r2, #0]
      _timing = CAD_TPDDEBOUNCE_THRESHOLD;
 801084e:	230c      	movs	r3, #12
 8010850:	61fb      	str	r3, [r7, #28]
 8010852:	e016      	b.n	8010882 <ManageStateAttachedWait_SNK+0xf6>
    }
    else /* CAD_tDebounce already running */
    {
      /* Evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUNCE_THRESHOLD))
 8010854:	f7f5 fb54 	bl	8005f00 <HAL_GetTick>
 8010858:	4602      	mov	r2, r0
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	1ad3      	subs	r3, r2, r3
 8010860:	2b0c      	cmp	r3, #12
 8010862:	d90e      	bls.n	8010882 <ManageStateAttachedWait_SNK+0xf6>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8010864:	69ba      	ldr	r2, [r7, #24]
 8010866:	7813      	ldrb	r3, [r2, #0]
 8010868:	f36f 1345 	bfc	r3, #5, #1
 801086c:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 801086e:	69ba      	ldr	r2, [r7, #24]
 8010870:	7853      	ldrb	r3, [r2, #1]
 8010872:	2101      	movs	r1, #1
 8010874:	f361 0345 	bfi	r3, r1, #1, #5
 8010878:	7053      	strb	r3, [r2, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 801087a:	7bfb      	ldrb	r3, [r7, #15]
 801087c:	4618      	mov	r0, r3
 801087e:	f005 fa1d 	bl	8015cbc <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 8010882:	69fb      	ldr	r3, [r7, #28]
}
 8010884:	4618      	mov	r0, r3
 8010886:	3720      	adds	r7, #32
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	20003588 	.word	0x20003588

08010890 <ManageStateAttached_SNK>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b088      	sub	sp, #32
 8010894:	af00      	add	r7, sp, #0
 8010896:	4603      	mov	r3, r0
 8010898:	60b9      	str	r1, [r7, #8]
 801089a:	607a      	str	r2, [r7, #4]
 801089c:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801089e:	7bfa      	ldrb	r2, [r7, #15]
 80108a0:	4613      	mov	r3, r2
 80108a2:	005b      	lsls	r3, r3, #1
 80108a4:	4413      	add	r3, r2
 80108a6:	009b      	lsls	r3, r3, #2
 80108a8:	4a2a      	ldr	r2, [pc, #168]	@ (8010954 <ManageStateAttached_SNK+0xc4>)
 80108aa:	4413      	add	r3, r2
 80108ac:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80108ae:	2302      	movs	r3, #2
 80108b0:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 80108b2:	2300      	movs	r3, #0
 80108b4:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 80108b6:	7bfa      	ldrb	r2, [r7, #15]
 80108b8:	4927      	ldr	r1, [pc, #156]	@ (8010958 <ManageStateAttached_SNK+0xc8>)
 80108ba:	4613      	mov	r3, r2
 80108bc:	011b      	lsls	r3, r3, #4
 80108be:	1a9b      	subs	r3, r3, r2
 80108c0:	009b      	lsls	r3, r3, #2
 80108c2:	440b      	add	r3, r1
 80108c4:	3334      	adds	r3, #52	@ 0x34
 80108c6:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 80108c8:	2b01      	cmp	r3, #1
 80108ca:	d10b      	bne.n	80108e4 <ManageStateAttached_SNK+0x54>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 80108cc:	7bfa      	ldrb	r2, [r7, #15]
 80108ce:	4922      	ldr	r1, [pc, #136]	@ (8010958 <ManageStateAttached_SNK+0xc8>)
 80108d0:	4613      	mov	r3, r2
 80108d2:	011b      	lsls	r3, r3, #4
 80108d4:	1a9b      	subs	r3, r3, r2
 80108d6:	009b      	lsls	r3, r3, #2
 80108d8:	440b      	add	r3, r1
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	695b      	ldr	r3, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 80108de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80108e2:	e00a      	b.n	80108fa <ManageStateAttached_SNK+0x6a>
 80108e4:	7bfa      	ldrb	r2, [r7, #15]
 80108e6:	491c      	ldr	r1, [pc, #112]	@ (8010958 <ManageStateAttached_SNK+0xc8>)
 80108e8:	4613      	mov	r3, r2
 80108ea:	011b      	lsls	r3, r3, #4
 80108ec:	1a9b      	subs	r3, r3, r2
 80108ee:	009b      	lsls	r3, r3, #2
 80108f0:	440b      	add	r3, r1
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	695b      	ldr	r3, [r3, #20]
 80108f6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 80108fa:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 80108fc:	7bfb      	ldrb	r3, [r7, #15]
 80108fe:	2102      	movs	r1, #2
 8010900:	4618      	mov	r0, r3
 8010902:	f005 f979 	bl	8015bf8 <USBPD_PWR_IF_GetVBUSStatus>
 8010906:	4603      	mov	r3, r0
 8010908:	2b01      	cmp	r3, #1
 801090a:	d11b      	bne.n	8010944 <ManageStateAttached_SNK+0xb4>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 801090c:	697a      	ldr	r2, [r7, #20]
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	429a      	cmp	r2, r3
 8010912:	d117      	bne.n	8010944 <ManageStateAttached_SNK+0xb4>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 8010914:	7bfb      	ldrb	r3, [r7, #15]
 8010916:	4618      	mov	r0, r3
 8010918:	f001 fb52 	bl	8011fc0 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 801091c:	69ba      	ldr	r2, [r7, #24]
 801091e:	7813      	ldrb	r3, [r2, #0]
 8010920:	f36f 0384 	bfc	r3, #2, #3
 8010924:	7013      	strb	r3, [r2, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8010926:	69ba      	ldr	r2, [r7, #24]
 8010928:	7853      	ldrb	r3, [r2, #1]
 801092a:	2101      	movs	r1, #1
 801092c:	f361 0345 	bfi	r3, r1, #1, #5
 8010930:	7053      	strb	r3, [r2, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	2201      	movs	r2, #1
 8010936:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	601a      	str	r2, [r3, #0]
    _timing = 0;
 801093e:	2300      	movs	r3, #0
 8010940:	61fb      	str	r3, [r7, #28]
 8010942:	e001      	b.n	8010948 <ManageStateAttached_SNK+0xb8>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 8010944:	230a      	movs	r3, #10
 8010946:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8010948:	69fb      	ldr	r3, [r7, #28]
}
 801094a:	4618      	mov	r0, r3
 801094c:	3720      	adds	r7, #32
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	20003588 	.word	0x20003588
 8010958:	200035a0 	.word	0x200035a0

0801095c <LL_AHB1_GRP1_EnableClock>:
{
 801095c:	b480      	push	{r7}
 801095e:	b085      	sub	sp, #20
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8010964:	4b08      	ldr	r3, [pc, #32]	@ (8010988 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8010966:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010968:	4907      	ldr	r1, [pc, #28]	@ (8010988 <LL_AHB1_GRP1_EnableClock+0x2c>)
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	4313      	orrs	r3, r2
 801096e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8010970:	4b05      	ldr	r3, [pc, #20]	@ (8010988 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8010972:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	4013      	ands	r3, r2
 8010978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801097a:	68fb      	ldr	r3, [r7, #12]
}
 801097c:	bf00      	nop
 801097e:	3714      	adds	r7, #20
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr
 8010988:	40021000 	.word	0x40021000

0801098c <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 801098c:	b480      	push	{r7}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
 8010992:	4603      	mov	r3, r0
 8010994:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 8010996:	4b03      	ldr	r3, [pc, #12]	@ (80109a4 <USBPD_HW_GetUSPDInstance+0x18>)
}
 8010998:	4618      	mov	r0, r3
 801099a:	370c      	adds	r7, #12
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr
 80109a4:	4000a000 	.word	0x4000a000

080109a8 <USBPD_HW_Init_DMARxInstance>:

#if !defined(USBPDCORE_LIB_NO_PD)
DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b08e      	sub	sp, #56	@ 0x38
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	4603      	mov	r3, r0
 80109b0:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 80109b2:	f107 030c 	add.w	r3, r7, #12
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fe fcde 	bl	800f378 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80109bc:	2300      	movs	r3, #0
 80109be:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80109c0:	2300      	movs	r3, #0
 80109c2:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 80109c4:	2300      	movs	r3, #0
 80109c6:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80109c8:	2380      	movs	r3, #128	@ 0x80
 80109ca:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80109cc:	2300      	movs	r3, #0
 80109ce:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80109d0:	2300      	movs	r3, #0
 80109d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 80109d4:	2300      	movs	r3, #0
 80109d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 80109d8:	2300      	movs	r3, #0
 80109da:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 80109dc:	2300      	movs	r3, #0
 80109de:	60fb      	str	r3, [r7, #12]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 80109e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80109e4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 80109e6:	2001      	movs	r0, #1
 80109e8:	f7ff ffb8 	bl	801095c <LL_AHB1_GRP1_EnableClock>

  /* Initialise the DMA */
  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 80109ec:	2372      	movs	r3, #114	@ 0x72
 80109ee:	633b      	str	r3, [r7, #48]	@ 0x30

  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 80109f0:	f107 030c 	add.w	r3, r7, #12
 80109f4:	461a      	mov	r2, r3
 80109f6:	2100      	movs	r1, #0
 80109f8:	4803      	ldr	r0, [pc, #12]	@ (8010a08 <USBPD_HW_Init_DMARxInstance+0x60>)
 80109fa:	f7fe fc7d 	bl	800f2f8 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 80109fe:	4b03      	ldr	r3, [pc, #12]	@ (8010a0c <USBPD_HW_Init_DMARxInstance+0x64>)
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	3738      	adds	r7, #56	@ 0x38
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	40020000 	.word	0x40020000
 8010a0c:	40020008 	.word	0x40020008

08010a10 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 8010a10:	b480      	push	{r7}
 8010a12:	b083      	sub	sp, #12
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	4603      	mov	r3, r0
 8010a18:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 8010a1a:	bf00      	nop
 8010a1c:	370c      	adds	r7, #12
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr
	...

08010a28 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b08e      	sub	sp, #56	@ 0x38
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	4603      	mov	r3, r0
 8010a30:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8010a32:	f107 030c 	add.w	r3, r7, #12
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fe fc9e 	bl	800f378 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8010a3c:	2310      	movs	r3, #16
 8010a3e:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8010a40:	2300      	movs	r3, #0
 8010a42:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8010a44:	2300      	movs	r3, #0
 8010a46:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8010a48:	2380      	movs	r3, #128	@ 0x80
 8010a4a:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8010a50:	2300      	movs	r3, #0
 8010a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 8010a54:	2300      	movs	r3, #0
 8010a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	60fb      	str	r3, [r7, #12]

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8010a60:	2001      	movs	r0, #1
 8010a62:	f7ff ff7b 	bl	801095c <LL_AHB1_GRP1_EnableClock>

  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 8010a66:	2373      	movs	r3, #115	@ 0x73
 8010a68:	633b      	str	r3, [r7, #48]	@ 0x30
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 8010a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 8010a70:	f107 030c 	add.w	r3, r7, #12
 8010a74:	461a      	mov	r2, r3
 8010a76:	2101      	movs	r1, #1
 8010a78:	4803      	ldr	r0, [pc, #12]	@ (8010a88 <USBPD_HW_Init_DMATxInstance+0x60>)
 8010a7a:	f7fe fc3d 	bl	800f2f8 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 8010a7e:	4b03      	ldr	r3, [pc, #12]	@ (8010a8c <USBPD_HW_Init_DMATxInstance+0x64>)
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3738      	adds	r7, #56	@ 0x38
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	40020000 	.word	0x40020000
 8010a8c:	4002001c 	.word	0x4002001c

08010a90 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b083      	sub	sp, #12
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	4603      	mov	r3, r0
 8010a98:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 8010a9a:	bf00      	nop
 8010a9c:	370c      	adds	r7, #12
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa4:	4770      	bx	lr

08010aa6 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 8010aa6:	b480      	push	{r7}
 8010aa8:	b083      	sub	sp, #12
 8010aaa:	af00      	add	r7, sp, #0
 8010aac:	4603      	mov	r3, r0
 8010aae:	460a      	mov	r2, r1
 8010ab0:	71fb      	strb	r3, [r7, #7]
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	71bb      	strb	r3, [r7, #6]
  else
  {
    /* FRS_TX common */
    UCPDFRS_INSTANCE0_FRSCC2;
  }
}
 8010ab6:	bf00      	nop
 8010ab8:	370c      	adds	r7, #12
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr

08010ac2 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8010ac2:	b480      	push	{r7}
 8010ac4:	b083      	sub	sp, #12
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	699b      	ldr	r3, [r3, #24]
 8010ace:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	619a      	str	r2, [r3, #24]
}
 8010ad6:	bf00      	nop
 8010ad8:	370c      	adds	r7, #12
 8010ada:	46bd      	mov	sp, r7
 8010adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae0:	4770      	bx	lr

08010ae2 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8010ae2:	b480      	push	{r7}
 8010ae4:	b083      	sub	sp, #12
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	699b      	ldr	r3, [r3, #24]
 8010aee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	619a      	str	r2, [r3, #24]
}
 8010af6:	bf00      	nop
 8010af8:	370c      	adds	r7, #12
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr

08010b02 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 8010b02:	b480      	push	{r7}
 8010b04:	b083      	sub	sp, #12
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	699b      	ldr	r3, [r3, #24]
 8010b0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	619a      	str	r2, [r3, #24]
}
 8010b16:	bf00      	nop
 8010b18:	370c      	adds	r7, #12
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr

08010b22 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 8010b22:	b480      	push	{r7}
 8010b24:	b083      	sub	sp, #12
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	699b      	ldr	r3, [r3, #24]
 8010b2e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	619a      	str	r2, [r3, #24]
}
 8010b36:	bf00      	nop
 8010b38:	370c      	adds	r7, #12
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b40:	4770      	bx	lr

08010b42 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 8010b42:	b480      	push	{r7}
 8010b44:	b083      	sub	sp, #12
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	699b      	ldr	r3, [r3, #24]
 8010b4e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	619a      	str	r2, [r3, #24]
}
 8010b56:	bf00      	nop
 8010b58:	370c      	adds	r7, #12
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b60:	4770      	bx	lr

08010b62 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8010b62:	b480      	push	{r7}
 8010b64:	b083      	sub	sp, #12
 8010b66:	af00      	add	r7, sp, #0
 8010b68:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	699b      	ldr	r3, [r3, #24]
 8010b6e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	619a      	str	r2, [r3, #24]
}
 8010b76:	bf00      	nop
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 8010b82:	b480      	push	{r7}
 8010b84:	b083      	sub	sp, #12
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	699b      	ldr	r3, [r3, #24]
 8010b8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	619a      	str	r2, [r3, #24]
}
 8010b96:	bf00      	nop
 8010b98:	370c      	adds	r7, #12
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba0:	4770      	bx	lr

08010ba2 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 8010ba2:	b480      	push	{r7}
 8010ba4:	b083      	sub	sp, #12
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	699b      	ldr	r3, [r3, #24]
 8010bae:	f043 0220 	orr.w	r2, r3, #32
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	619a      	str	r2, [r3, #24]
}
 8010bb6:	bf00      	nop
 8010bb8:	370c      	adds	r7, #12
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr

08010bc2 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8010bc2:	b480      	push	{r7}
 8010bc4:	b083      	sub	sp, #12
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	699b      	ldr	r3, [r3, #24]
 8010bce:	f043 0210 	orr.w	r2, r3, #16
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	619a      	str	r2, [r3, #24]
}
 8010bd6:	bf00      	nop
 8010bd8:	370c      	adds	r7, #12
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be0:	4770      	bx	lr

08010be2 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 8010be2:	b480      	push	{r7}
 8010be4:	b083      	sub	sp, #12
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	699b      	ldr	r3, [r3, #24]
 8010bee:	f043 0208 	orr.w	r2, r3, #8
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	619a      	str	r2, [r3, #24]
}
 8010bf6:	bf00      	nop
 8010bf8:	370c      	adds	r7, #12
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr

08010c02 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 8010c02:	b480      	push	{r7}
 8010c04:	b083      	sub	sp, #12
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	699b      	ldr	r3, [r3, #24]
 8010c0e:	f043 0204 	orr.w	r2, r3, #4
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	619a      	str	r2, [r3, #24]
}
 8010c16:	bf00      	nop
 8010c18:	370c      	adds	r7, #12
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr

08010c22 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8010c22:	b480      	push	{r7}
 8010c24:	b083      	sub	sp, #12
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	699b      	ldr	r3, [r3, #24]
 8010c2e:	f043 0202 	orr.w	r2, r3, #2
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	619a      	str	r2, [r3, #24]
}
 8010c36:	bf00      	nop
 8010c38:	370c      	adds	r7, #12
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr

08010c42 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8010c42:	b580      	push	{r7, lr}
 8010c44:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8010c46:	2000      	movs	r0, #0
 8010c48:	f000 f802 	bl	8010c50 <PORTx_IRQHandler>
}
 8010c4c:	bf00      	nop
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	4603      	mov	r3, r0
 8010c58:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 8010c5a:	79fa      	ldrb	r2, [r7, #7]
 8010c5c:	4998      	ldr	r1, [pc, #608]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010c5e:	4613      	mov	r3, r2
 8010c60:	011b      	lsls	r3, r3, #4
 8010c62:	1a9b      	subs	r3, r3, r2
 8010c64:	009b      	lsls	r3, r3, #2
 8010c66:	440b      	add	r3, r1
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	695b      	ldr	r3, [r3, #20]
 8010c70:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	691a      	ldr	r2, [r3, #16]
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	4013      	ands	r3, r2
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	f000 81ca 	beq.w	8011014 <PORTx_IRQHandler+0x3c4>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	f003 0302 	and.w	r3, r3, #2
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d035      	beq.n	8010cf6 <PORTx_IRQHandler+0xa6>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8010c8a:	68f8      	ldr	r0, [r7, #12]
 8010c8c:	f7ff ffc9 	bl	8010c22 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8010c90:	79fa      	ldrb	r2, [r7, #7]
 8010c92:	498b      	ldr	r1, [pc, #556]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010c94:	4613      	mov	r3, r2
 8010c96:	011b      	lsls	r3, r3, #4
 8010c98:	1a9b      	subs	r3, r3, r2
 8010c9a:	009b      	lsls	r3, r3, #2
 8010c9c:	440b      	add	r3, r1
 8010c9e:	3304      	adds	r3, #4
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	6819      	ldr	r1, [r3, #0]
 8010ca4:	79fa      	ldrb	r2, [r7, #7]
 8010ca6:	4886      	ldr	r0, [pc, #536]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010ca8:	4613      	mov	r3, r2
 8010caa:	011b      	lsls	r3, r3, #4
 8010cac:	1a9b      	subs	r3, r3, r2
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	4403      	add	r3, r0
 8010cb2:	3304      	adds	r3, #4
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	f021 0201 	bic.w	r2, r1, #1
 8010cba:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8010cbc:	bf00      	nop
 8010cbe:	79fa      	ldrb	r2, [r7, #7]
 8010cc0:	497f      	ldr	r1, [pc, #508]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010cc2:	4613      	mov	r3, r2
 8010cc4:	011b      	lsls	r3, r3, #4
 8010cc6:	1a9b      	subs	r3, r3, r2
 8010cc8:	009b      	lsls	r3, r3, #2
 8010cca:	440b      	add	r3, r1
 8010ccc:	3304      	adds	r3, #4
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f003 0301 	and.w	r3, r3, #1
 8010cd6:	2b01      	cmp	r3, #1
 8010cd8:	d0f1      	beq.n	8010cbe <PORTx_IRQHandler+0x6e>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8010cda:	79fa      	ldrb	r2, [r7, #7]
 8010cdc:	4978      	ldr	r1, [pc, #480]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010cde:	4613      	mov	r3, r2
 8010ce0:	011b      	lsls	r3, r3, #4
 8010ce2:	1a9b      	subs	r3, r3, r2
 8010ce4:	009b      	lsls	r3, r3, #2
 8010ce6:	440b      	add	r3, r1
 8010ce8:	3314      	adds	r3, #20
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	79fa      	ldrb	r2, [r7, #7]
 8010cee:	2101      	movs	r1, #1
 8010cf0:	4610      	mov	r0, r2
 8010cf2:	4798      	blx	r3
      return;
 8010cf4:	e18e      	b.n	8011014 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	f003 0304 	and.w	r3, r3, #4
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d035      	beq.n	8010d6c <PORTx_IRQHandler+0x11c>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f7ff ff7e 	bl	8010c02 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8010d06:	79fa      	ldrb	r2, [r7, #7]
 8010d08:	496d      	ldr	r1, [pc, #436]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	011b      	lsls	r3, r3, #4
 8010d0e:	1a9b      	subs	r3, r3, r2
 8010d10:	009b      	lsls	r3, r3, #2
 8010d12:	440b      	add	r3, r1
 8010d14:	3304      	adds	r3, #4
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	6819      	ldr	r1, [r3, #0]
 8010d1a:	79fa      	ldrb	r2, [r7, #7]
 8010d1c:	4868      	ldr	r0, [pc, #416]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010d1e:	4613      	mov	r3, r2
 8010d20:	011b      	lsls	r3, r3, #4
 8010d22:	1a9b      	subs	r3, r3, r2
 8010d24:	009b      	lsls	r3, r3, #2
 8010d26:	4403      	add	r3, r0
 8010d28:	3304      	adds	r3, #4
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	f021 0201 	bic.w	r2, r1, #1
 8010d30:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8010d32:	bf00      	nop
 8010d34:	79fa      	ldrb	r2, [r7, #7]
 8010d36:	4962      	ldr	r1, [pc, #392]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010d38:	4613      	mov	r3, r2
 8010d3a:	011b      	lsls	r3, r3, #4
 8010d3c:	1a9b      	subs	r3, r3, r2
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	440b      	add	r3, r1
 8010d42:	3304      	adds	r3, #4
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	f003 0301 	and.w	r3, r3, #1
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	d0f1      	beq.n	8010d34 <PORTx_IRQHandler+0xe4>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8010d50:	79fa      	ldrb	r2, [r7, #7]
 8010d52:	495b      	ldr	r1, [pc, #364]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010d54:	4613      	mov	r3, r2
 8010d56:	011b      	lsls	r3, r3, #4
 8010d58:	1a9b      	subs	r3, r3, r2
 8010d5a:	009b      	lsls	r3, r3, #2
 8010d5c:	440b      	add	r3, r1
 8010d5e:	3314      	adds	r3, #20
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	79fa      	ldrb	r2, [r7, #7]
 8010d64:	2100      	movs	r1, #0
 8010d66:	4610      	mov	r0, r2
 8010d68:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 8010d6a:	e153      	b.n	8011014 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	f003 0308 	and.w	r3, r3, #8
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d035      	beq.n	8010de2 <PORTx_IRQHandler+0x192>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 8010d76:	68f8      	ldr	r0, [r7, #12]
 8010d78:	f7ff ff33 	bl	8010be2 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8010d7c:	79fa      	ldrb	r2, [r7, #7]
 8010d7e:	4950      	ldr	r1, [pc, #320]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010d80:	4613      	mov	r3, r2
 8010d82:	011b      	lsls	r3, r3, #4
 8010d84:	1a9b      	subs	r3, r3, r2
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	440b      	add	r3, r1
 8010d8a:	3304      	adds	r3, #4
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	6819      	ldr	r1, [r3, #0]
 8010d90:	79fa      	ldrb	r2, [r7, #7]
 8010d92:	484b      	ldr	r0, [pc, #300]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010d94:	4613      	mov	r3, r2
 8010d96:	011b      	lsls	r3, r3, #4
 8010d98:	1a9b      	subs	r3, r3, r2
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	4403      	add	r3, r0
 8010d9e:	3304      	adds	r3, #4
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	f021 0201 	bic.w	r2, r1, #1
 8010da6:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8010da8:	bf00      	nop
 8010daa:	79fa      	ldrb	r2, [r7, #7]
 8010dac:	4944      	ldr	r1, [pc, #272]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010dae:	4613      	mov	r3, r2
 8010db0:	011b      	lsls	r3, r3, #4
 8010db2:	1a9b      	subs	r3, r3, r2
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	440b      	add	r3, r1
 8010db8:	3304      	adds	r3, #4
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	f003 0301 	and.w	r3, r3, #1
 8010dc2:	2b01      	cmp	r3, #1
 8010dc4:	d0f1      	beq.n	8010daa <PORTx_IRQHandler+0x15a>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 8010dc6:	79fa      	ldrb	r2, [r7, #7]
 8010dc8:	493d      	ldr	r1, [pc, #244]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010dca:	4613      	mov	r3, r2
 8010dcc:	011b      	lsls	r3, r3, #4
 8010dce:	1a9b      	subs	r3, r3, r2
 8010dd0:	009b      	lsls	r3, r3, #2
 8010dd2:	440b      	add	r3, r1
 8010dd4:	3314      	adds	r3, #20
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	79fa      	ldrb	r2, [r7, #7]
 8010dda:	2102      	movs	r1, #2
 8010ddc:	4610      	mov	r0, r2
 8010dde:	4798      	blx	r3
      return;
 8010de0:	e118      	b.n	8011014 <PORTx_IRQHandler+0x3c4>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	f003 0310 	and.w	r3, r3, #16
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d003      	beq.n	8010df4 <PORTx_IRQHandler+0x1a4>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8010dec:	68f8      	ldr	r0, [r7, #12]
 8010dee:	f7ff fee8 	bl	8010bc2 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8010df2:	e10f      	b.n	8011014 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	f003 0320 	and.w	r3, r3, #32
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d010      	beq.n	8010e20 <PORTx_IRQHandler+0x1d0>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8010dfe:	68f8      	ldr	r0, [r7, #12]
 8010e00:	f7ff fecf 	bl	8010ba2 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8010e04:	79fa      	ldrb	r2, [r7, #7]
 8010e06:	492e      	ldr	r1, [pc, #184]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010e08:	4613      	mov	r3, r2
 8010e0a:	011b      	lsls	r3, r3, #4
 8010e0c:	1a9b      	subs	r3, r3, r2
 8010e0e:	009b      	lsls	r3, r3, #2
 8010e10:	440b      	add	r3, r1
 8010e12:	3324      	adds	r3, #36	@ 0x24
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	79fa      	ldrb	r2, [r7, #7]
 8010e18:	2105      	movs	r1, #5
 8010e1a:	4610      	mov	r0, r2
 8010e1c:	4798      	blx	r3
      return;
 8010e1e:	e0f9      	b.n	8011014 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d003      	beq.n	8010e32 <PORTx_IRQHandler+0x1e2>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 8010e2a:	68f8      	ldr	r0, [r7, #12]
 8010e2c:	f7ff fea9 	bl	8010b82 <LL_UCPD_ClearFlag_TxUND>
      return;
 8010e30:	e0f0      	b.n	8011014 <PORTx_IRQHandler+0x3c4>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d01e      	beq.n	8010e7a <PORTx_IRQHandler+0x22a>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e40:	2b05      	cmp	r3, #5
 8010e42:	d10c      	bne.n	8010e5e <PORTx_IRQHandler+0x20e>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8010e44:	79fa      	ldrb	r2, [r7, #7]
 8010e46:	491e      	ldr	r1, [pc, #120]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010e48:	4613      	mov	r3, r2
 8010e4a:	011b      	lsls	r3, r3, #4
 8010e4c:	1a9b      	subs	r3, r3, r2
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	440b      	add	r3, r1
 8010e52:	331c      	adds	r3, #28
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	79fa      	ldrb	r2, [r7, #7]
 8010e58:	2106      	movs	r1, #6
 8010e5a:	4610      	mov	r0, r2
 8010e5c:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 8010e5e:	68f8      	ldr	r0, [r7, #12]
 8010e60:	f7ff fe7f 	bl	8010b62 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 8010e64:	79fa      	ldrb	r2, [r7, #7]
 8010e66:	4916      	ldr	r1, [pc, #88]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010e68:	4613      	mov	r3, r2
 8010e6a:	011b      	lsls	r3, r3, #4
 8010e6c:	1a9b      	subs	r3, r3, r2
 8010e6e:	009b      	lsls	r3, r3, #2
 8010e70:	440b      	add	r3, r1
 8010e72:	3338      	adds	r3, #56	@ 0x38
 8010e74:	2201      	movs	r2, #1
 8010e76:	701a      	strb	r2, [r3, #0]
      return;
 8010e78:	e0cc      	b.n	8011014 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d010      	beq.n	8010ea6 <PORTx_IRQHandler+0x256>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8010e84:	79fa      	ldrb	r2, [r7, #7]
 8010e86:	490e      	ldr	r1, [pc, #56]	@ (8010ec0 <PORTx_IRQHandler+0x270>)
 8010e88:	4613      	mov	r3, r2
 8010e8a:	011b      	lsls	r3, r3, #4
 8010e8c:	1a9b      	subs	r3, r3, r2
 8010e8e:	009b      	lsls	r3, r3, #2
 8010e90:	440b      	add	r3, r1
 8010e92:	331c      	adds	r3, #28
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	79fa      	ldrb	r2, [r7, #7]
 8010e98:	2105      	movs	r1, #5
 8010e9a:	4610      	mov	r0, r2
 8010e9c:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8010e9e:	68f8      	ldr	r0, [r7, #12]
 8010ea0:	f7ff fe4f 	bl	8010b42 <LL_UCPD_ClearFlag_RxHRST>
      return;
 8010ea4:	e0b6      	b.n	8011014 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d00b      	beq.n	8010ec8 <PORTx_IRQHandler+0x278>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag = 1;
 8010eb0:	4b04      	ldr	r3, [pc, #16]	@ (8010ec4 <PORTx_IRQHandler+0x274>)
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8010eb6:	68f8      	ldr	r0, [r7, #12]
 8010eb8:	f7ff fe33 	bl	8010b22 <LL_UCPD_ClearFlag_RxOvr>
      return;
 8010ebc:	e0aa      	b.n	8011014 <PORTx_IRQHandler+0x3c4>
 8010ebe:	bf00      	nop
 8010ec0:	200035a0 	.word	0x200035a0
 8010ec4:	20003594 	.word	0x20003594
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	f000 8085 	beq.w	8010fde <PORTx_IRQHandler+0x38e>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 8010ed4:	79fa      	ldrb	r2, [r7, #7]
 8010ed6:	4951      	ldr	r1, [pc, #324]	@ (801101c <PORTx_IRQHandler+0x3cc>)
 8010ed8:	4613      	mov	r3, r2
 8010eda:	011b      	lsls	r3, r3, #4
 8010edc:	1a9b      	subs	r3, r3, r2
 8010ede:	009b      	lsls	r3, r3, #2
 8010ee0:	440b      	add	r3, r1
 8010ee2:	3338      	adds	r3, #56	@ 0x38
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 8010ee8:	68f8      	ldr	r0, [r7, #12]
 8010eea:	f7ff fe0a 	bl	8010b02 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8010eee:	79fa      	ldrb	r2, [r7, #7]
 8010ef0:	494a      	ldr	r1, [pc, #296]	@ (801101c <PORTx_IRQHandler+0x3cc>)
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	011b      	lsls	r3, r3, #4
 8010ef6:	1a9b      	subs	r3, r3, r2
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	440b      	add	r3, r1
 8010efc:	3308      	adds	r3, #8
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	6819      	ldr	r1, [r3, #0]
 8010f02:	79fa      	ldrb	r2, [r7, #7]
 8010f04:	4845      	ldr	r0, [pc, #276]	@ (801101c <PORTx_IRQHandler+0x3cc>)
 8010f06:	4613      	mov	r3, r2
 8010f08:	011b      	lsls	r3, r3, #4
 8010f0a:	1a9b      	subs	r3, r3, r2
 8010f0c:	009b      	lsls	r3, r3, #2
 8010f0e:	4403      	add	r3, r0
 8010f10:	3308      	adds	r3, #8
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f021 0201 	bic.w	r2, r1, #1
 8010f18:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8010f1a:	bf00      	nop
 8010f1c:	79fa      	ldrb	r2, [r7, #7]
 8010f1e:	493f      	ldr	r1, [pc, #252]	@ (801101c <PORTx_IRQHandler+0x3cc>)
 8010f20:	4613      	mov	r3, r2
 8010f22:	011b      	lsls	r3, r3, #4
 8010f24:	1a9b      	subs	r3, r3, r2
 8010f26:	009b      	lsls	r3, r3, #2
 8010f28:	440b      	add	r3, r1
 8010f2a:	3308      	adds	r3, #8
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	f003 0301 	and.w	r3, r3, #1
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d0f1      	beq.n	8010f1c <PORTx_IRQHandler+0x2cc>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8010f38:	79fa      	ldrb	r2, [r7, #7]
 8010f3a:	4938      	ldr	r1, [pc, #224]	@ (801101c <PORTx_IRQHandler+0x3cc>)
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	011b      	lsls	r3, r3, #4
 8010f40:	1a9b      	subs	r3, r3, r2
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	440b      	add	r3, r1
 8010f46:	3330      	adds	r3, #48	@ 0x30
 8010f48:	6818      	ldr	r0, [r3, #0]
 8010f4a:	79fa      	ldrb	r2, [r7, #7]
 8010f4c:	4933      	ldr	r1, [pc, #204]	@ (801101c <PORTx_IRQHandler+0x3cc>)
 8010f4e:	4613      	mov	r3, r2
 8010f50:	011b      	lsls	r3, r3, #4
 8010f52:	1a9b      	subs	r3, r3, r2
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	440b      	add	r3, r1
 8010f58:	3308      	adds	r3, #8
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 8010f60:	79fa      	ldrb	r2, [r7, #7]
 8010f62:	492e      	ldr	r1, [pc, #184]	@ (801101c <PORTx_IRQHandler+0x3cc>)
 8010f64:	4613      	mov	r3, r2
 8010f66:	011b      	lsls	r3, r3, #4
 8010f68:	1a9b      	subs	r3, r3, r2
 8010f6a:	009b      	lsls	r3, r3, #2
 8010f6c:	440b      	add	r3, r1
 8010f6e:	3308      	adds	r3, #8
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8010f76:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8010f78:	79fa      	ldrb	r2, [r7, #7]
 8010f7a:	4928      	ldr	r1, [pc, #160]	@ (801101c <PORTx_IRQHandler+0x3cc>)
 8010f7c:	4613      	mov	r3, r2
 8010f7e:	011b      	lsls	r3, r3, #4
 8010f80:	1a9b      	subs	r3, r3, r2
 8010f82:	009b      	lsls	r3, r3, #2
 8010f84:	440b      	add	r3, r1
 8010f86:	3308      	adds	r3, #8
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	6819      	ldr	r1, [r3, #0]
 8010f8c:	79fa      	ldrb	r2, [r7, #7]
 8010f8e:	4823      	ldr	r0, [pc, #140]	@ (801101c <PORTx_IRQHandler+0x3cc>)
 8010f90:	4613      	mov	r3, r2
 8010f92:	011b      	lsls	r3, r3, #4
 8010f94:	1a9b      	subs	r3, r3, r2
 8010f96:	009b      	lsls	r3, r3, #2
 8010f98:	4403      	add	r3, r0
 8010f9a:	3308      	adds	r3, #8
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f041 0201 	orr.w	r2, r1, #1
 8010fa2:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d113      	bne.n	8010fd6 <PORTx_IRQHandler+0x386>
 8010fae:	4b1c      	ldr	r3, [pc, #112]	@ (8011020 <PORTx_IRQHandler+0x3d0>)
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d10f      	bne.n	8010fd6 <PORTx_IRQHandler+0x386>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 8010fb6:	79fa      	ldrb	r2, [r7, #7]
 8010fb8:	4918      	ldr	r1, [pc, #96]	@ (801101c <PORTx_IRQHandler+0x3cc>)
 8010fba:	4613      	mov	r3, r2
 8010fbc:	011b      	lsls	r3, r3, #4
 8010fbe:	1a9b      	subs	r3, r3, r2
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	440b      	add	r3, r1
 8010fc4:	3320      	adds	r3, #32
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	68fa      	ldr	r2, [r7, #12]
 8010fca:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8010fcc:	f002 0107 	and.w	r1, r2, #7
 8010fd0:	79fa      	ldrb	r2, [r7, #7]
 8010fd2:	4610      	mov	r0, r2
 8010fd4:	4798      	blx	r3
      }
      ovrflag = 0;
 8010fd6:	4b12      	ldr	r3, [pc, #72]	@ (8011020 <PORTx_IRQHandler+0x3d0>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	701a      	strb	r2, [r3, #0]
      return;
 8010fdc:	e01a      	b.n	8011014 <PORTx_IRQHandler+0x3c4>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d104      	bne.n	8010ff2 <PORTx_IRQHandler+0x3a2>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d010      	beq.n	8011014 <PORTx_IRQHandler+0x3c4>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 8010ff2:	68f8      	ldr	r0, [r7, #12]
 8010ff4:	f7ff fd75 	bl	8010ae2 <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 8010ff8:	68f8      	ldr	r0, [r7, #12]
 8010ffa:	f7ff fd62 	bl	8010ac2 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 8010ffe:	79fa      	ldrb	r2, [r7, #7]
 8011000:	4906      	ldr	r1, [pc, #24]	@ (801101c <PORTx_IRQHandler+0x3cc>)
 8011002:	4613      	mov	r3, r2
 8011004:	011b      	lsls	r3, r3, #4
 8011006:	1a9b      	subs	r3, r3, r2
 8011008:	009b      	lsls	r3, r3, #2
 801100a:	440b      	add	r3, r1
 801100c:	332c      	adds	r3, #44	@ 0x2c
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 8011012:	bf00      	nop
        }
      }
    }
#endif /* _FRS */
  }
}
 8011014:	3710      	adds	r7, #16
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}
 801101a:	bf00      	nop
 801101c:	200035a0 	.word	0x200035a0
 8011020:	20003594 	.word	0x20003594

08011024 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 8011024:	b480      	push	{r7}
 8011026:	b085      	sub	sp, #20
 8011028:	af00      	add	r7, sp, #0
 801102a:	60b9      	str	r1, [r7, #8]
 801102c:	607a      	str	r2, [r7, #4]
 801102e:	603b      	str	r3, [r7, #0]
 8011030:	4603      	mov	r3, r0
 8011032:	73fb      	strb	r3, [r7, #15]
  (void)PowerRole;

  /* Set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 8011034:	7bfa      	ldrb	r2, [r7, #15]
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	6919      	ldr	r1, [r3, #16]
 801103a:	482d      	ldr	r0, [pc, #180]	@ (80110f0 <USBPD_PHY_Init+0xcc>)
 801103c:	4613      	mov	r3, r2
 801103e:	011b      	lsls	r3, r3, #4
 8011040:	1a9b      	subs	r3, r3, r2
 8011042:	009b      	lsls	r3, r3, #2
 8011044:	4403      	add	r3, r0
 8011046:	3314      	adds	r3, #20
 8011048:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 801104a:	7bfa      	ldrb	r2, [r7, #15]
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	68d9      	ldr	r1, [r3, #12]
 8011050:	4827      	ldr	r0, [pc, #156]	@ (80110f0 <USBPD_PHY_Init+0xcc>)
 8011052:	4613      	mov	r3, r2
 8011054:	011b      	lsls	r3, r3, #4
 8011056:	1a9b      	subs	r3, r3, r2
 8011058:	009b      	lsls	r3, r3, #2
 801105a:	4403      	add	r3, r0
 801105c:	3318      	adds	r3, #24
 801105e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 8011060:	7bfa      	ldrb	r2, [r7, #15]
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	6859      	ldr	r1, [r3, #4]
 8011066:	4822      	ldr	r0, [pc, #136]	@ (80110f0 <USBPD_PHY_Init+0xcc>)
 8011068:	4613      	mov	r3, r2
 801106a:	011b      	lsls	r3, r3, #4
 801106c:	1a9b      	subs	r3, r3, r2
 801106e:	009b      	lsls	r3, r3, #2
 8011070:	4403      	add	r3, r0
 8011072:	331c      	adds	r3, #28
 8011074:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 8011076:	7bfa      	ldrb	r2, [r7, #15]
 8011078:	491d      	ldr	r1, [pc, #116]	@ (80110f0 <USBPD_PHY_Init+0xcc>)
 801107a:	4613      	mov	r3, r2
 801107c:	011b      	lsls	r3, r3, #4
 801107e:	1a9b      	subs	r3, r3, r2
 8011080:	009b      	lsls	r3, r3, #2
 8011082:	440b      	add	r3, r1
 8011084:	3320      	adds	r3, #32
 8011086:	4a1b      	ldr	r2, [pc, #108]	@ (80110f4 <USBPD_PHY_Init+0xd0>)
 8011088:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 801108a:	7bfa      	ldrb	r2, [r7, #15]
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	6899      	ldr	r1, [r3, #8]
 8011090:	4817      	ldr	r0, [pc, #92]	@ (80110f0 <USBPD_PHY_Init+0xcc>)
 8011092:	4613      	mov	r3, r2
 8011094:	011b      	lsls	r3, r3, #4
 8011096:	1a9b      	subs	r3, r3, r2
 8011098:	009b      	lsls	r3, r3, #2
 801109a:	4403      	add	r3, r0
 801109c:	3324      	adds	r3, #36	@ 0x24
 801109e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 80110a0:	7bfa      	ldrb	r2, [r7, #15]
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	6959      	ldr	r1, [r3, #20]
 80110a6:	4812      	ldr	r0, [pc, #72]	@ (80110f0 <USBPD_PHY_Init+0xcc>)
 80110a8:	4613      	mov	r3, r2
 80110aa:	011b      	lsls	r3, r3, #4
 80110ac:	1a9b      	subs	r3, r3, r2
 80110ae:	009b      	lsls	r3, r3, #2
 80110b0:	4403      	add	r3, r0
 80110b2:	3328      	adds	r3, #40	@ 0x28
 80110b4:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 80110b6:	7bfa      	ldrb	r2, [r7, #15]
 80110b8:	490d      	ldr	r1, [pc, #52]	@ (80110f0 <USBPD_PHY_Init+0xcc>)
 80110ba:	4613      	mov	r3, r2
 80110bc:	011b      	lsls	r3, r3, #4
 80110be:	1a9b      	subs	r3, r3, r2
 80110c0:	009b      	lsls	r3, r3, #2
 80110c2:	440b      	add	r3, r1
 80110c4:	3330      	adds	r3, #48	@ 0x30
 80110c6:	687a      	ldr	r2, [r7, #4]
 80110c8:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 80110ca:	7bfb      	ldrb	r3, [r7, #15]
 80110cc:	4a0a      	ldr	r2, [pc, #40]	@ (80110f8 <USBPD_PHY_Init+0xd4>)
 80110ce:	00db      	lsls	r3, r3, #3
 80110d0:	4413      	add	r3, r2
 80110d2:	69ba      	ldr	r2, [r7, #24]
 80110d4:	605a      	str	r2, [r3, #4]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 80110d6:	7bfb      	ldrb	r3, [r7, #15]
 80110d8:	68ba      	ldr	r2, [r7, #8]
 80110da:	6812      	ldr	r2, [r2, #0]
 80110dc:	4906      	ldr	r1, [pc, #24]	@ (80110f8 <USBPD_PHY_Init+0xd4>)
 80110de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

  return USBPD_OK;
 80110e2:	2300      	movs	r3, #0
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr
 80110f0:	200035a0 	.word	0x200035a0
 80110f4:	0801122d 	.word	0x0801122d
 80110f8:	20003598 	.word	0x20003598

080110fc <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
 8011102:	4603      	mov	r3, r0
 8011104:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return 905u;
 8011106:	f240 3389 	movw	r3, #905	@ 0x389
}
 801110a:	4618      	mov	r0, r3
 801110c:	370c      	adds	r7, #12
 801110e:	46bd      	mov	sp, r7
 8011110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011114:	4770      	bx	lr

08011116 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 8011116:	b480      	push	{r7}
 8011118:	b083      	sub	sp, #12
 801111a:	af00      	add	r7, sp, #0
 801111c:	4603      	mov	r3, r0
 801111e:	71fb      	strb	r3, [r7, #7]
  return 30u;
 8011120:	231e      	movs	r3, #30
}
 8011122:	4618      	mov	r0, r3
 8011124:	370c      	adds	r7, #12
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr

0801112e <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 801112e:	b480      	push	{r7}
 8011130:	b083      	sub	sp, #12
 8011132:	af00      	add	r7, sp, #0
 8011134:	4603      	mov	r3, r0
 8011136:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  /* Reset PHY layer   */
  /* Reset HW_IF layer */
}
 8011138:	bf00      	nop
 801113a:	370c      	adds	r7, #12
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b082      	sub	sp, #8
 8011148:	af00      	add	r7, sp, #0
 801114a:	4603      	mov	r3, r0
 801114c:	460a      	mov	r2, r1
 801114e:	71fb      	strb	r3, [r7, #7]
 8011150:	4613      	mov	r3, r2
 8011152:	71bb      	strb	r3, [r7, #6]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 8011154:	79b9      	ldrb	r1, [r7, #6]
 8011156:	79f8      	ldrb	r0, [r7, #7]
 8011158:	2300      	movs	r3, #0
 801115a:	2200      	movs	r2, #0
 801115c:	f000 f805 	bl	801116a <USBPD_PHY_SendMessage>
 8011160:	4603      	mov	r3, r0
}
 8011162:	4618      	mov	r0, r3
 8011164:	3708      	adds	r7, #8
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}

0801116a <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 801116a:	b580      	push	{r7, lr}
 801116c:	b082      	sub	sp, #8
 801116e:	af00      	add	r7, sp, #0
 8011170:	603a      	str	r2, [r7, #0]
 8011172:	461a      	mov	r2, r3
 8011174:	4603      	mov	r3, r0
 8011176:	71fb      	strb	r3, [r7, #7]
 8011178:	460b      	mov	r3, r1
 801117a:	71bb      	strb	r3, [r7, #6]
 801117c:	4613      	mov	r3, r2
 801117e:	80bb      	strh	r3, [r7, #4]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 8011180:	88bb      	ldrh	r3, [r7, #4]
 8011182:	79b9      	ldrb	r1, [r7, #6]
 8011184:	79f8      	ldrb	r0, [r7, #7]
 8011186:	683a      	ldr	r2, [r7, #0]
 8011188:	f000 fabe 	bl	8011708 <USBPD_HW_IF_SendBuffer>
 801118c:	4603      	mov	r3, r0
}
 801118e:	4618      	mov	r0, r3
 8011190:	3708      	adds	r7, #8
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}

08011196 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 8011196:	b580      	push	{r7, lr}
 8011198:	b082      	sub	sp, #8
 801119a:	af00      	add	r7, sp, #0
 801119c:	4603      	mov	r3, r0
 801119e:	71fb      	strb	r3, [r7, #7]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 80111a0:	79fb      	ldrb	r3, [r7, #7]
 80111a2:	4618      	mov	r0, r3
 80111a4:	f000 fbf6 	bl	8011994 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 80111a8:	2300      	movs	r3, #0
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3708      	adds	r7, #8
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 80111b2:	b580      	push	{r7, lr}
 80111b4:	b082      	sub	sp, #8
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	4603      	mov	r3, r0
 80111ba:	460a      	mov	r2, r1
 80111bc:	71fb      	strb	r3, [r7, #7]
 80111be:	4613      	mov	r3, r2
 80111c0:	71bb      	strb	r3, [r7, #6]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 80111c2:	79bb      	ldrb	r3, [r7, #6]
 80111c4:	2b07      	cmp	r3, #7
 80111c6:	d103      	bne.n	80111d0 <USBPD_PHY_ExitTransmit+0x1e>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 80111c8:	79fb      	ldrb	r3, [r7, #7]
 80111ca:	4618      	mov	r0, r3
 80111cc:	f000 fa64 	bl	8011698 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 80111d0:	2300      	movs	r3, #0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3708      	adds	r7, #8
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}

080111da <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80111da:	b580      	push	{r7, lr}
 80111dc:	b082      	sub	sp, #8
 80111de:	af00      	add	r7, sp, #0
 80111e0:	4603      	mov	r3, r0
 80111e2:	71fb      	strb	r3, [r7, #7]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 80111e4:	79fb      	ldrb	r3, [r7, #7]
 80111e6:	4618      	mov	r0, r3
 80111e8:	f000 ff70 	bl	80120cc <USBPD_HW_IF_IsResistor_SinkTxOk>
 80111ec:	4603      	mov	r3, r0
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3708      	adds	r7, #8
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}

080111f6 <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 80111f6:	b580      	push	{r7, lr}
 80111f8:	b082      	sub	sp, #8
 80111fa:	af00      	add	r7, sp, #0
 80111fc:	4603      	mov	r3, r0
 80111fe:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_EnableRX(PortNum);
 8011200:	79fb      	ldrb	r3, [r7, #7]
 8011202:	4618      	mov	r0, r3
 8011204:	f000 fd64 	bl	8011cd0 <USBPD_HW_IF_EnableRX>
}
 8011208:	bf00      	nop
 801120a:	3708      	adds	r7, #8
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}

08011210 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b082      	sub	sp, #8
 8011214:	af00      	add	r7, sp, #0
 8011216:	4603      	mov	r3, r0
 8011218:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_DisableRX(PortNum);
 801121a:	79fb      	ldrb	r3, [r7, #7]
 801121c:	4618      	mov	r0, r3
 801121e:	f000 fd6d 	bl	8011cfc <USBPD_HW_IF_DisableRX>
}
 8011222:	bf00      	nop
 8011224:	3708      	adds	r7, #8
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
	...

0801122c <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b084      	sub	sp, #16
 8011230:	af00      	add	r7, sp, #0
 8011232:	4603      	mov	r3, r0
 8011234:	6039      	str	r1, [r7, #0]
 8011236:	71fb      	strb	r3, [r7, #7]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 8011238:	4a28      	ldr	r2, [pc, #160]	@ (80112dc <PHY_Rx_Completed+0xb0>)
 801123a:	f107 0308 	add.w	r3, r7, #8
 801123e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011242:	6018      	str	r0, [r3, #0]
 8011244:	3304      	adds	r3, #4
 8011246:	8019      	strh	r1, [r3, #0]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 8011248:	f107 0208 	add.w	r2, r7, #8
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	4413      	add	r3, r2
 8011250:	781b      	ldrb	r3, [r3, #0]
 8011252:	73fb      	strb	r3, [r7, #15]

  /* Check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 8011254:	7bfb      	ldrb	r3, [r7, #15]
 8011256:	2b04      	cmp	r3, #4
 8011258:	dc02      	bgt.n	8011260 <PHY_Rx_Completed+0x34>
 801125a:	2b00      	cmp	r3, #0
 801125c:	da19      	bge.n	8011292 <PHY_Rx_Completed+0x66>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 801125e:	e034      	b.n	80112ca <PHY_Rx_Completed+0x9e>
  switch (_msgtype)
 8011260:	2b06      	cmp	r3, #6
 8011262:	d132      	bne.n	80112ca <PHY_Rx_Completed+0x9e>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 8011264:	79fb      	ldrb	r3, [r7, #7]
 8011266:	4a1e      	ldr	r2, [pc, #120]	@ (80112e0 <PHY_Rx_Completed+0xb4>)
 8011268:	00db      	lsls	r3, r3, #3
 801126a:	4413      	add	r3, r2
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	f003 031e 	and.w	r3, r3, #30
 8011272:	2b1e      	cmp	r3, #30
 8011274:	d12b      	bne.n	80112ce <PHY_Rx_Completed+0xa2>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8011276:	79fa      	ldrb	r2, [r7, #7]
 8011278:	491a      	ldr	r1, [pc, #104]	@ (80112e4 <PHY_Rx_Completed+0xb8>)
 801127a:	4613      	mov	r3, r2
 801127c:	011b      	lsls	r3, r3, #4
 801127e:	1a9b      	subs	r3, r3, r2
 8011280:	009b      	lsls	r3, r3, #2
 8011282:	440b      	add	r3, r1
 8011284:	331c      	adds	r3, #28
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	79fa      	ldrb	r2, [r7, #7]
 801128a:	2106      	movs	r1, #6
 801128c:	4610      	mov	r0, r2
 801128e:	4798      	blx	r3
      break;
 8011290:	e01d      	b.n	80112ce <PHY_Rx_Completed+0xa2>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 8011292:	7bfb      	ldrb	r3, [r7, #15]
 8011294:	2201      	movs	r2, #1
 8011296:	fa02 f303 	lsl.w	r3, r2, r3
 801129a:	b2db      	uxtb	r3, r3
 801129c:	4618      	mov	r0, r3
 801129e:	79fb      	ldrb	r3, [r7, #7]
 80112a0:	4a0f      	ldr	r2, [pc, #60]	@ (80112e0 <PHY_Rx_Completed+0xb4>)
 80112a2:	00db      	lsls	r3, r3, #3
 80112a4:	4413      	add	r3, r2
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	7bfa      	ldrb	r2, [r7, #15]
 80112aa:	2101      	movs	r1, #1
 80112ac:	fa01 f202 	lsl.w	r2, r1, r2
 80112b0:	b2d2      	uxtb	r2, r2
 80112b2:	4013      	ands	r3, r2
 80112b4:	4298      	cmp	r0, r3
 80112b6:	d10c      	bne.n	80112d2 <PHY_Rx_Completed+0xa6>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 80112b8:	79fb      	ldrb	r3, [r7, #7]
 80112ba:	4a09      	ldr	r2, [pc, #36]	@ (80112e0 <PHY_Rx_Completed+0xb4>)
 80112bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80112c0:	7bf9      	ldrb	r1, [r7, #15]
 80112c2:	79fa      	ldrb	r2, [r7, #7]
 80112c4:	4610      	mov	r0, r2
 80112c6:	4798      	blx	r3
      break;
 80112c8:	e003      	b.n	80112d2 <PHY_Rx_Completed+0xa6>
      break;
 80112ca:	bf00      	nop
 80112cc:	e002      	b.n	80112d4 <PHY_Rx_Completed+0xa8>
      break;
 80112ce:	bf00      	nop
 80112d0:	e000      	b.n	80112d4 <PHY_Rx_Completed+0xa8>
      break;
 80112d2:	bf00      	nop
  }
}
 80112d4:	bf00      	nop
 80112d6:	3710      	adds	r7, #16
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}
 80112dc:	0801bca8 	.word	0x0801bca8
 80112e0:	20003598 	.word	0x20003598
 80112e4:	200035a0 	.word	0x200035a0

080112e8 <LL_AHB1_GRP1_EnableClock>:
{
 80112e8:	b480      	push	{r7}
 80112ea:	b085      	sub	sp, #20
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80112f0:	4b08      	ldr	r3, [pc, #32]	@ (8011314 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80112f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80112f4:	4907      	ldr	r1, [pc, #28]	@ (8011314 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	4313      	orrs	r3, r2
 80112fa:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80112fc:	4b05      	ldr	r3, [pc, #20]	@ (8011314 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80112fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	4013      	ands	r3, r2
 8011304:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011306:	68fb      	ldr	r3, [r7, #12]
}
 8011308:	bf00      	nop
 801130a:	3714      	adds	r7, #20
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr
 8011314:	40021000 	.word	0x40021000

08011318 <LL_APB1_GRP1_EnableClock>:
{
 8011318:	b480      	push	{r7}
 801131a:	b085      	sub	sp, #20
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011320:	4b08      	ldr	r3, [pc, #32]	@ (8011344 <LL_APB1_GRP1_EnableClock+0x2c>)
 8011322:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011324:	4907      	ldr	r1, [pc, #28]	@ (8011344 <LL_APB1_GRP1_EnableClock+0x2c>)
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4313      	orrs	r3, r2
 801132a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801132c:	4b05      	ldr	r3, [pc, #20]	@ (8011344 <LL_APB1_GRP1_EnableClock+0x2c>)
 801132e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	4013      	ands	r3, r2
 8011334:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011336:	68fb      	ldr	r3, [r7, #12]
}
 8011338:	bf00      	nop
 801133a:	3714      	adds	r7, #20
 801133c:	46bd      	mov	sp, r7
 801133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011342:	4770      	bx	lr
 8011344:	40021000 	.word	0x40021000

08011348 <LL_UCPD_Enable>:
{
 8011348:	b480      	push	{r7}
 801134a:	b083      	sub	sp, #12
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	601a      	str	r2, [r3, #0]
}
 801135c:	bf00      	nop
 801135e:	370c      	adds	r7, #12
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr

08011368 <LL_UCPD_Disable>:
{
 8011368:	b480      	push	{r7}
 801136a:	b083      	sub	sp, #12
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	601a      	str	r2, [r3, #0]
}
 801137c:	bf00      	nop
 801137e:	370c      	adds	r7, #12
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr

08011388 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8011388:	b480      	push	{r7}
 801138a:	b083      	sub	sp, #12
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	60da      	str	r2, [r3, #12]
}
 801139c:	bf00      	nop
 801139e:	370c      	adds	r7, #12
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr

080113a8 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 80113a8:	b480      	push	{r7}
 80113aa:	b083      	sub	sp, #12
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	60da      	str	r2, [r3, #12]
}
 80113bc:	bf00      	nop
 80113be:	370c      	adds	r7, #12
 80113c0:	46bd      	mov	sp, r7
 80113c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c6:	4770      	bx	lr

080113c8 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 80113c8:	b480      	push	{r7}
 80113ca:	b083      	sub	sp, #12
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	68db      	ldr	r3, [r3, #12]
 80113d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	60da      	str	r2, [r3, #12]
}
 80113dc:	bf00      	nop
 80113de:	370c      	adds	r7, #12
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 80113e8:	b480      	push	{r7}
 80113ea:	b083      	sub	sp, #12
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	60da      	str	r2, [r3, #12]
}
 80113fc:	bf00      	nop
 80113fe:	370c      	adds	r7, #12
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr

08011408 <LL_UCPD_FRSDetectionEnable>:
{
 8011408:	b480      	push	{r7}
 801140a:	b083      	sub	sp, #12
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	60da      	str	r2, [r3, #12]
}
 801141c:	bf00      	nop
 801141e:	370c      	adds	r7, #12
 8011420:	46bd      	mov	sp, r7
 8011422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011426:	4770      	bx	lr

08011428 <LL_UCPD_FRSDetectionDisable>:
{
 8011428:	b480      	push	{r7}
 801142a:	b083      	sub	sp, #12
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	68db      	ldr	r3, [r3, #12]
 8011434:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	60da      	str	r2, [r3, #12]
}
 801143c:	bf00      	nop
 801143e:	370c      	adds	r7, #12
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr

08011448 <LL_UCPD_SetccEnable>:
{
 8011448:	b480      	push	{r7}
 801144a:	b083      	sub	sp, #12
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	431a      	orrs	r2, r3
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	60da      	str	r2, [r3, #12]
}
 8011462:	bf00      	nop
 8011464:	370c      	adds	r7, #12
 8011466:	46bd      	mov	sp, r7
 8011468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146c:	4770      	bx	lr

0801146e <LL_UCPD_SetSNKRole>:
{
 801146e:	b480      	push	{r7}
 8011470:	b083      	sub	sp, #12
 8011472:	af00      	add	r7, sp, #0
 8011474:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	60da      	str	r2, [r3, #12]
}
 8011482:	bf00      	nop
 8011484:	370c      	adds	r7, #12
 8011486:	46bd      	mov	sp, r7
 8011488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148c:	4770      	bx	lr

0801148e <LL_UCPD_SetSRCRole>:
{
 801148e:	b480      	push	{r7}
 8011490:	b083      	sub	sp, #12
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	68db      	ldr	r3, [r3, #12]
 801149a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	60da      	str	r2, [r3, #12]
}
 80114a2:	bf00      	nop
 80114a4:	370c      	adds	r7, #12
 80114a6:	46bd      	mov	sp, r7
 80114a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ac:	4770      	bx	lr

080114ae <LL_UCPD_SetRpResistor>:
{
 80114ae:	b480      	push	{r7}
 80114b0:	b083      	sub	sp, #12
 80114b2:	af00      	add	r7, sp, #0
 80114b4:	6078      	str	r0, [r7, #4]
 80114b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	431a      	orrs	r2, r3
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	60da      	str	r2, [r3, #12]
}
 80114c8:	bf00      	nop
 80114ca:	370c      	adds	r7, #12
 80114cc:	46bd      	mov	sp, r7
 80114ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d2:	4770      	bx	lr

080114d4 <LL_UCPD_SetCCPin>:
{
 80114d4:	b480      	push	{r7}
 80114d6:	b083      	sub	sp, #12
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	68db      	ldr	r3, [r3, #12]
 80114e2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	431a      	orrs	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	60da      	str	r2, [r3, #12]
}
 80114ee:	bf00      	nop
 80114f0:	370c      	adds	r7, #12
 80114f2:	46bd      	mov	sp, r7
 80114f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f8:	4770      	bx	lr

080114fa <LL_UCPD_RxEnable>:
{
 80114fa:	b480      	push	{r7}
 80114fc:	b083      	sub	sp, #12
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	68db      	ldr	r3, [r3, #12]
 8011506:	f043 0220 	orr.w	r2, r3, #32
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	60da      	str	r2, [r3, #12]
}
 801150e:	bf00      	nop
 8011510:	370c      	adds	r7, #12
 8011512:	46bd      	mov	sp, r7
 8011514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011518:	4770      	bx	lr

0801151a <LL_UCPD_RxDisable>:
{
 801151a:	b480      	push	{r7}
 801151c:	b083      	sub	sp, #12
 801151e:	af00      	add	r7, sp, #0
 8011520:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	68db      	ldr	r3, [r3, #12]
 8011526:	f023 0220 	bic.w	r2, r3, #32
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	60da      	str	r2, [r3, #12]
}
 801152e:	bf00      	nop
 8011530:	370c      	adds	r7, #12
 8011532:	46bd      	mov	sp, r7
 8011534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011538:	4770      	bx	lr

0801153a <LL_UCPD_SetRxMode>:
{
 801153a:	b480      	push	{r7}
 801153c:	b083      	sub	sp, #12
 801153e:	af00      	add	r7, sp, #0
 8011540:	6078      	str	r0, [r7, #4]
 8011542:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	68db      	ldr	r3, [r3, #12]
 8011548:	f023 0210 	bic.w	r2, r3, #16
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	431a      	orrs	r2, r3
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	60da      	str	r2, [r3, #12]
}
 8011554:	bf00      	nop
 8011556:	370c      	adds	r7, #12
 8011558:	46bd      	mov	sp, r7
 801155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155e:	4770      	bx	lr

08011560 <LL_UCPD_SendHardReset>:
{
 8011560:	b480      	push	{r7}
 8011562:	b083      	sub	sp, #12
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	f043 0208 	orr.w	r2, r3, #8
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	60da      	str	r2, [r3, #12]
}
 8011574:	bf00      	nop
 8011576:	370c      	adds	r7, #12
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr

08011580 <LL_UCPD_SendMessage>:
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	68db      	ldr	r3, [r3, #12]
 801158c:	f043 0204 	orr.w	r2, r3, #4
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	60da      	str	r2, [r3, #12]
}
 8011594:	bf00      	nop
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <LL_UCPD_SetTxMode>:
{
 80115a0:	b480      	push	{r7}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	68db      	ldr	r3, [r3, #12]
 80115ae:	f023 0203 	bic.w	r2, r3, #3
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	431a      	orrs	r2, r3
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	60da      	str	r2, [r3, #12]
}
 80115ba:	bf00      	nop
 80115bc:	370c      	adds	r7, #12
 80115be:	46bd      	mov	sp, r7
 80115c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c4:	4770      	bx	lr

080115c6 <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 80115c6:	b480      	push	{r7}
 80115c8:	b083      	sub	sp, #12
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	601a      	str	r2, [r3, #0]
}
 80115da:	bf00      	nop
 80115dc:	370c      	adds	r7, #12
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr

080115e6 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 80115e6:	b480      	push	{r7}
 80115e8:	b083      	sub	sp, #12
 80115ea:	af00      	add	r7, sp, #0
 80115ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	601a      	str	r2, [r3, #0]
}
 80115fa:	bf00      	nop
 80115fc:	370c      	adds	r7, #12
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr

08011606 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8011606:	b480      	push	{r7}
 8011608:	b083      	sub	sp, #12
 801160a:	af00      	add	r7, sp, #0
 801160c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	601a      	str	r2, [r3, #0]
}
 801161a:	bf00      	nop
 801161c:	370c      	adds	r7, #12
 801161e:	46bd      	mov	sp, r7
 8011620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011624:	4770      	bx	lr

08011626 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 8011626:	b480      	push	{r7}
 8011628:	b083      	sub	sp, #12
 801162a:	af00      	add	r7, sp, #0
 801162c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	601a      	str	r2, [r3, #0]
}
 801163a:	bf00      	nop
 801163c:	370c      	adds	r7, #12
 801163e:	46bd      	mov	sp, r7
 8011640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011644:	4770      	bx	lr

08011646 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 8011646:	b480      	push	{r7}
 8011648:	b083      	sub	sp, #12
 801164a:	af00      	add	r7, sp, #0
 801164c:	6078      	str	r0, [r7, #4]
 801164e:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	683a      	ldr	r2, [r7, #0]
 8011654:	61da      	str	r2, [r3, #28]
}
 8011656:	bf00      	nop
 8011658:	370c      	adds	r7, #12
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr

08011662 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 8011662:	b480      	push	{r7}
 8011664:	b083      	sub	sp, #12
 8011666:	af00      	add	r7, sp, #0
 8011668:	6078      	str	r0, [r7, #4]
 801166a:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	683a      	ldr	r2, [r7, #0]
 8011670:	621a      	str	r2, [r3, #32]
}
 8011672:	bf00      	nop
 8011674:	370c      	adds	r7, #12
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr

0801167e <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 801167e:	b580      	push	{r7, lr}
 8011680:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8011682:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8011686:	f7ff fe47 	bl	8011318 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 801168a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 801168e:	f7ff fe2b 	bl	80112e8 <LL_AHB1_GRP1_EnableClock>

}
 8011692:	bf00      	nop
 8011694:	bd80      	pop	{r7, pc}
	...

08011698 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b084      	sub	sp, #16
 801169c:	af00      	add	r7, sp, #0
 801169e:	4603      	mov	r3, r0
 80116a0:	71fb      	strb	r3, [r7, #7]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 80116a2:	79fa      	ldrb	r2, [r7, #7]
 80116a4:	4917      	ldr	r1, [pc, #92]	@ (8011704 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80116a6:	4613      	mov	r3, r2
 80116a8:	011b      	lsls	r3, r3, #4
 80116aa:	1a9b      	subs	r3, r3, r2
 80116ac:	009b      	lsls	r3, r3, #2
 80116ae:	440b      	add	r3, r1
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	68db      	ldr	r3, [r3, #12]
 80116b4:	f023 0307 	bic.w	r3, r3, #7
 80116b8:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 80116ba:	79fa      	ldrb	r2, [r7, #7]
 80116bc:	4911      	ldr	r1, [pc, #68]	@ (8011704 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80116be:	4613      	mov	r3, r2
 80116c0:	011b      	lsls	r3, r3, #4
 80116c2:	1a9b      	subs	r3, r3, r2
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	440b      	add	r3, r1
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	4618      	mov	r0, r3
 80116cc:	f7ff fe4c 	bl	8011368 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 80116d0:	79fa      	ldrb	r2, [r7, #7]
 80116d2:	490c      	ldr	r1, [pc, #48]	@ (8011704 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80116d4:	4613      	mov	r3, r2
 80116d6:	011b      	lsls	r3, r3, #4
 80116d8:	1a9b      	subs	r3, r3, r2
 80116da:	009b      	lsls	r3, r3, #2
 80116dc:	440b      	add	r3, r1
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7ff fe31 	bl	8011348 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 80116e6:	79fa      	ldrb	r2, [r7, #7]
 80116e8:	4906      	ldr	r1, [pc, #24]	@ (8011704 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80116ea:	4613      	mov	r3, r2
 80116ec:	011b      	lsls	r3, r3, #4
 80116ee:	1a9b      	subs	r3, r3, r2
 80116f0:	009b      	lsls	r3, r3, #2
 80116f2:	440b      	add	r3, r1
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	68fa      	ldr	r2, [r7, #12]
 80116f8:	60da      	str	r2, [r3, #12]
}
 80116fa:	bf00      	nop
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	200035a0 	.word	0x200035a0

08011708 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b08a      	sub	sp, #40	@ 0x28
 801170c:	af00      	add	r7, sp, #0
 801170e:	60ba      	str	r2, [r7, #8]
 8011710:	607b      	str	r3, [r7, #4]
 8011712:	4603      	mov	r3, r0
 8011714:	73fb      	strb	r3, [r7, #15]
 8011716:	460b      	mov	r3, r1
 8011718:	73bb      	strb	r3, [r7, #14]
  USBPD_StatusTypeDef _status = USBPD_OK;
 801171a:	2300      	movs	r3, #0
 801171c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8011720:	7bbb      	ldrb	r3, [r7, #14]
 8011722:	2b05      	cmp	r3, #5
 8011724:	d10b      	bne.n	801173e <USBPD_HW_IF_SendBuffer+0x36>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 8011726:	7bfa      	ldrb	r2, [r7, #15]
 8011728:	4996      	ldr	r1, [pc, #600]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 801172a:	4613      	mov	r3, r2
 801172c:	011b      	lsls	r3, r3, #4
 801172e:	1a9b      	subs	r3, r3, r2
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	440b      	add	r3, r1
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	4618      	mov	r0, r3
 8011738:	f7ff ff12 	bl	8011560 <LL_UCPD_SendHardReset>
 801173c:	e11b      	b.n	8011976 <USBPD_HW_IF_SendBuffer+0x26e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801173e:	f3ef 8310 	mrs	r3, PRIMASK
 8011742:	61fb      	str	r3, [r7, #28]
  return(result);
 8011744:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 8011746:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8011748:	b672      	cpsid	i
}
 801174a:	bf00      	nop

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 801174c:	7bfa      	ldrb	r2, [r7, #15]
 801174e:	498d      	ldr	r1, [pc, #564]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011750:	4613      	mov	r3, r2
 8011752:	011b      	lsls	r3, r3, #4
 8011754:	1a9b      	subs	r3, r3, r2
 8011756:	009b      	lsls	r3, r3, #2
 8011758:	440b      	add	r3, r1
 801175a:	3338      	adds	r3, #56	@ 0x38
 801175c:	781b      	ldrb	r3, [r3, #0]
 801175e:	b2db      	uxtb	r3, r3
 8011760:	2b01      	cmp	r3, #1
 8011762:	d00d      	beq.n	8011780 <USBPD_HW_IF_SendBuffer+0x78>
 8011764:	7bfa      	ldrb	r2, [r7, #15]
 8011766:	4987      	ldr	r1, [pc, #540]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011768:	4613      	mov	r3, r2
 801176a:	011b      	lsls	r3, r3, #4
 801176c:	1a9b      	subs	r3, r3, r2
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	440b      	add	r3, r1
 8011772:	3304      	adds	r3, #4
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	f003 0301 	and.w	r3, r3, #1
 801177c:	2b01      	cmp	r3, #1
 801177e:	d109      	bne.n	8011794 <USBPD_HW_IF_SendBuffer+0x8c>
 8011780:	6a3b      	ldr	r3, [r7, #32]
 8011782:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011784:	69bb      	ldr	r3, [r7, #24]
 8011786:	f383 8810 	msr	PRIMASK, r3
}
 801178a:	bf00      	nop
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 801178c:	2302      	movs	r3, #2
 801178e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011792:	e0f0      	b.n	8011976 <USBPD_HW_IF_SendBuffer+0x26e>
 8011794:	6a3b      	ldr	r3, [r7, #32]
 8011796:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	f383 8810 	msr	PRIMASK, r3
}
 801179e:	bf00      	nop
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 80117a0:	7bbb      	ldrb	r3, [r7, #14]
 80117a2:	2b07      	cmp	r3, #7
 80117a4:	d877      	bhi.n	8011896 <USBPD_HW_IF_SendBuffer+0x18e>
 80117a6:	a201      	add	r2, pc, #4	@ (adr r2, 80117ac <USBPD_HW_IF_SendBuffer+0xa4>)
 80117a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117ac:	080117cd 	.word	0x080117cd
 80117b0:	080117ff 	.word	0x080117ff
 80117b4:	08011831 	.word	0x08011831
 80117b8:	08011897 	.word	0x08011897
 80117bc:	08011897 	.word	0x08011897
 80117c0:	08011897 	.word	0x08011897
 80117c4:	08011863 	.word	0x08011863
 80117c8:	0801187d 	.word	0x0801187d
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 80117cc:	7bfa      	ldrb	r2, [r7, #15]
 80117ce:	496d      	ldr	r1, [pc, #436]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 80117d0:	4613      	mov	r3, r2
 80117d2:	011b      	lsls	r3, r3, #4
 80117d4:	1a9b      	subs	r3, r3, r2
 80117d6:	009b      	lsls	r3, r3, #2
 80117d8:	440b      	add	r3, r1
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	496a      	ldr	r1, [pc, #424]	@ (8011988 <USBPD_HW_IF_SendBuffer+0x280>)
 80117de:	4618      	mov	r0, r3
 80117e0:	f7ff ff31 	bl	8011646 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80117e4:	7bfa      	ldrb	r2, [r7, #15]
 80117e6:	4967      	ldr	r1, [pc, #412]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 80117e8:	4613      	mov	r3, r2
 80117ea:	011b      	lsls	r3, r3, #4
 80117ec:	1a9b      	subs	r3, r3, r2
 80117ee:	009b      	lsls	r3, r3, #2
 80117f0:	440b      	add	r3, r1
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	2100      	movs	r1, #0
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7ff fed2 	bl	80115a0 <LL_UCPD_SetTxMode>
          break;
 80117fc:	e04f      	b.n	801189e <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 80117fe:	7bfa      	ldrb	r2, [r7, #15]
 8011800:	4960      	ldr	r1, [pc, #384]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011802:	4613      	mov	r3, r2
 8011804:	011b      	lsls	r3, r3, #4
 8011806:	1a9b      	subs	r3, r3, r2
 8011808:	009b      	lsls	r3, r3, #2
 801180a:	440b      	add	r3, r1
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	495f      	ldr	r1, [pc, #380]	@ (801198c <USBPD_HW_IF_SendBuffer+0x284>)
 8011810:	4618      	mov	r0, r3
 8011812:	f7ff ff18 	bl	8011646 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8011816:	7bfa      	ldrb	r2, [r7, #15]
 8011818:	495a      	ldr	r1, [pc, #360]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 801181a:	4613      	mov	r3, r2
 801181c:	011b      	lsls	r3, r3, #4
 801181e:	1a9b      	subs	r3, r3, r2
 8011820:	009b      	lsls	r3, r3, #2
 8011822:	440b      	add	r3, r1
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	2100      	movs	r1, #0
 8011828:	4618      	mov	r0, r3
 801182a:	f7ff feb9 	bl	80115a0 <LL_UCPD_SetTxMode>
          break;
 801182e:	e036      	b.n	801189e <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 8011830:	7bfa      	ldrb	r2, [r7, #15]
 8011832:	4954      	ldr	r1, [pc, #336]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011834:	4613      	mov	r3, r2
 8011836:	011b      	lsls	r3, r3, #4
 8011838:	1a9b      	subs	r3, r3, r2
 801183a:	009b      	lsls	r3, r3, #2
 801183c:	440b      	add	r3, r1
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4953      	ldr	r1, [pc, #332]	@ (8011990 <USBPD_HW_IF_SendBuffer+0x288>)
 8011842:	4618      	mov	r0, r3
 8011844:	f7ff feff 	bl	8011646 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8011848:	7bfa      	ldrb	r2, [r7, #15]
 801184a:	494e      	ldr	r1, [pc, #312]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 801184c:	4613      	mov	r3, r2
 801184e:	011b      	lsls	r3, r3, #4
 8011850:	1a9b      	subs	r3, r3, r2
 8011852:	009b      	lsls	r3, r3, #2
 8011854:	440b      	add	r3, r1
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	2100      	movs	r1, #0
 801185a:	4618      	mov	r0, r3
 801185c:	f7ff fea0 	bl	80115a0 <LL_UCPD_SetTxMode>
          break;
 8011860:	e01d      	b.n	801189e <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 8011862:	7bfa      	ldrb	r2, [r7, #15]
 8011864:	4947      	ldr	r1, [pc, #284]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011866:	4613      	mov	r3, r2
 8011868:	011b      	lsls	r3, r3, #4
 801186a:	1a9b      	subs	r3, r3, r2
 801186c:	009b      	lsls	r3, r3, #2
 801186e:	440b      	add	r3, r1
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	2101      	movs	r1, #1
 8011874:	4618      	mov	r0, r3
 8011876:	f7ff fe93 	bl	80115a0 <LL_UCPD_SetTxMode>
          break;
 801187a:	e010      	b.n	801189e <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 801187c:	7bfa      	ldrb	r2, [r7, #15]
 801187e:	4941      	ldr	r1, [pc, #260]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011880:	4613      	mov	r3, r2
 8011882:	011b      	lsls	r3, r3, #4
 8011884:	1a9b      	subs	r3, r3, r2
 8011886:	009b      	lsls	r3, r3, #2
 8011888:	440b      	add	r3, r1
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	2102      	movs	r1, #2
 801188e:	4618      	mov	r0, r3
 8011890:	f7ff fe86 	bl	80115a0 <LL_UCPD_SetTxMode>
          break;
 8011894:	e003      	b.n	801189e <USBPD_HW_IF_SendBuffer+0x196>
        }
        default :
          _status = USBPD_ERROR;
 8011896:	2302      	movs	r3, #2
 8011898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 801189c:	bf00      	nop
      }

      if (USBPD_OK == _status)
 801189e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d167      	bne.n	8011976 <USBPD_HW_IF_SendBuffer+0x26e>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80118a6:	7bfa      	ldrb	r2, [r7, #15]
 80118a8:	4936      	ldr	r1, [pc, #216]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 80118aa:	4613      	mov	r3, r2
 80118ac:	011b      	lsls	r3, r3, #4
 80118ae:	1a9b      	subs	r3, r3, r2
 80118b0:	009b      	lsls	r3, r3, #2
 80118b2:	440b      	add	r3, r1
 80118b4:	3304      	adds	r3, #4
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	6819      	ldr	r1, [r3, #0]
 80118ba:	7bfa      	ldrb	r2, [r7, #15]
 80118bc:	4831      	ldr	r0, [pc, #196]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 80118be:	4613      	mov	r3, r2
 80118c0:	011b      	lsls	r3, r3, #4
 80118c2:	1a9b      	subs	r3, r3, r2
 80118c4:	009b      	lsls	r3, r3, #2
 80118c6:	4403      	add	r3, r0
 80118c8:	3304      	adds	r3, #4
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	f021 0201 	bic.w	r2, r1, #1
 80118d0:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 80118d2:	bf00      	nop
 80118d4:	7bfa      	ldrb	r2, [r7, #15]
 80118d6:	492b      	ldr	r1, [pc, #172]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 80118d8:	4613      	mov	r3, r2
 80118da:	011b      	lsls	r3, r3, #4
 80118dc:	1a9b      	subs	r3, r3, r2
 80118de:	009b      	lsls	r3, r3, #2
 80118e0:	440b      	add	r3, r1
 80118e2:	3304      	adds	r3, #4
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	f003 0301 	and.w	r3, r3, #1
 80118ec:	2b01      	cmp	r3, #1
 80118ee:	d0f1      	beq.n	80118d4 <USBPD_HW_IF_SendBuffer+0x1cc>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 80118f0:	7bfa      	ldrb	r2, [r7, #15]
 80118f2:	4924      	ldr	r1, [pc, #144]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 80118f4:	4613      	mov	r3, r2
 80118f6:	011b      	lsls	r3, r3, #4
 80118f8:	1a9b      	subs	r3, r3, r2
 80118fa:	009b      	lsls	r3, r3, #2
 80118fc:	440b      	add	r3, r1
 80118fe:	3304      	adds	r3, #4
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	68ba      	ldr	r2, [r7, #8]
 8011904:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 8011906:	7bfa      	ldrb	r2, [r7, #15]
 8011908:	491e      	ldr	r1, [pc, #120]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 801190a:	4613      	mov	r3, r2
 801190c:	011b      	lsls	r3, r3, #4
 801190e:	1a9b      	subs	r3, r3, r2
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	440b      	add	r3, r1
 8011914:	3304      	adds	r3, #4
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	687a      	ldr	r2, [r7, #4]
 801191a:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801191c:	7bfa      	ldrb	r2, [r7, #15]
 801191e:	4919      	ldr	r1, [pc, #100]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011920:	4613      	mov	r3, r2
 8011922:	011b      	lsls	r3, r3, #4
 8011924:	1a9b      	subs	r3, r3, r2
 8011926:	009b      	lsls	r3, r3, #2
 8011928:	440b      	add	r3, r1
 801192a:	3304      	adds	r3, #4
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	6819      	ldr	r1, [r3, #0]
 8011930:	7bfa      	ldrb	r2, [r7, #15]
 8011932:	4814      	ldr	r0, [pc, #80]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011934:	4613      	mov	r3, r2
 8011936:	011b      	lsls	r3, r3, #4
 8011938:	1a9b      	subs	r3, r3, r2
 801193a:	009b      	lsls	r3, r3, #2
 801193c:	4403      	add	r3, r0
 801193e:	3304      	adds	r3, #4
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	f041 0201 	orr.w	r2, r1, #1
 8011946:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8011948:	7bfa      	ldrb	r2, [r7, #15]
 801194a:	490e      	ldr	r1, [pc, #56]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 801194c:	4613      	mov	r3, r2
 801194e:	011b      	lsls	r3, r3, #4
 8011950:	1a9b      	subs	r3, r3, r2
 8011952:	009b      	lsls	r3, r3, #2
 8011954:	440b      	add	r3, r1
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	6879      	ldr	r1, [r7, #4]
 801195a:	4618      	mov	r0, r3
 801195c:	f7ff fe81 	bl	8011662 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8011960:	7bfa      	ldrb	r2, [r7, #15]
 8011962:	4908      	ldr	r1, [pc, #32]	@ (8011984 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011964:	4613      	mov	r3, r2
 8011966:	011b      	lsls	r3, r3, #4
 8011968:	1a9b      	subs	r3, r3, r2
 801196a:	009b      	lsls	r3, r3, #2
 801196c:	440b      	add	r3, r1
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	4618      	mov	r0, r3
 8011972:	f7ff fe05 	bl	8011580 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8011976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801197a:	4618      	mov	r0, r3
 801197c:	3728      	adds	r7, #40	@ 0x28
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
 8011982:	bf00      	nop
 8011984:	200035a0 	.word	0x200035a0
 8011988:	0008e318 	.word	0x0008e318
 801198c:	00031b18 	.word	0x00031b18
 8011990:	000360d8 	.word	0x000360d8

08011994 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	4603      	mov	r3, r0
 801199c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 801199e:	79fa      	ldrb	r2, [r7, #7]
 80119a0:	490c      	ldr	r1, [pc, #48]	@ (80119d4 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 80119a2:	4613      	mov	r3, r2
 80119a4:	011b      	lsls	r3, r3, #4
 80119a6:	1a9b      	subs	r3, r3, r2
 80119a8:	009b      	lsls	r3, r3, #2
 80119aa:	440b      	add	r3, r1
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	2102      	movs	r1, #2
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7ff fdf5 	bl	80115a0 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 80119b6:	79fa      	ldrb	r2, [r7, #7]
 80119b8:	4906      	ldr	r1, [pc, #24]	@ (80119d4 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 80119ba:	4613      	mov	r3, r2
 80119bc:	011b      	lsls	r3, r3, #4
 80119be:	1a9b      	subs	r3, r3, r2
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	440b      	add	r3, r1
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7ff fdda 	bl	8011580 <LL_UCPD_SendMessage>
}
 80119cc:	bf00      	nop
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	200035a0 	.word	0x200035a0

080119d8 <USBPDM1_AssertRp>:
  * @brief  Assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRp(uint8_t PortNum)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	4603      	mov	r3, r0
 80119e0:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 80119e2:	79fa      	ldrb	r2, [r7, #7]
 80119e4:	4946      	ldr	r1, [pc, #280]	@ (8011b00 <USBPDM1_AssertRp+0x128>)
 80119e6:	4613      	mov	r3, r2
 80119e8:	011b      	lsls	r3, r3, #4
 80119ea:	1a9b      	subs	r3, r3, r2
 80119ec:	009b      	lsls	r3, r3, #2
 80119ee:	440b      	add	r3, r1
 80119f0:	3310      	adds	r3, #16
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	789b      	ldrb	r3, [r3, #2]
 80119f6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	2b02      	cmp	r3, #2
 80119fe:	d021      	beq.n	8011a44 <USBPDM1_AssertRp+0x6c>
 8011a00:	2b02      	cmp	r3, #2
 8011a02:	dc2d      	bgt.n	8011a60 <USBPDM1_AssertRp+0x88>
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d002      	beq.n	8011a0e <USBPDM1_AssertRp+0x36>
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d00d      	beq.n	8011a28 <USBPDM1_AssertRp+0x50>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8011a0c:	e028      	b.n	8011a60 <USBPDM1_AssertRp+0x88>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8011a0e:	79fa      	ldrb	r2, [r7, #7]
 8011a10:	493b      	ldr	r1, [pc, #236]	@ (8011b00 <USBPDM1_AssertRp+0x128>)
 8011a12:	4613      	mov	r3, r2
 8011a14:	011b      	lsls	r3, r3, #4
 8011a16:	1a9b      	subs	r3, r3, r2
 8011a18:	009b      	lsls	r3, r3, #2
 8011a1a:	440b      	add	r3, r1
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	2180      	movs	r1, #128	@ 0x80
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7ff fd44 	bl	80114ae <LL_UCPD_SetRpResistor>
      break;
 8011a26:	e01c      	b.n	8011a62 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8011a28:	79fa      	ldrb	r2, [r7, #7]
 8011a2a:	4935      	ldr	r1, [pc, #212]	@ (8011b00 <USBPDM1_AssertRp+0x128>)
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	011b      	lsls	r3, r3, #4
 8011a30:	1a9b      	subs	r3, r3, r2
 8011a32:	009b      	lsls	r3, r3, #2
 8011a34:	440b      	add	r3, r1
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7ff fd36 	bl	80114ae <LL_UCPD_SetRpResistor>
      break;
 8011a42:	e00e      	b.n	8011a62 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8011a44:	79fa      	ldrb	r2, [r7, #7]
 8011a46:	492e      	ldr	r1, [pc, #184]	@ (8011b00 <USBPDM1_AssertRp+0x128>)
 8011a48:	4613      	mov	r3, r2
 8011a4a:	011b      	lsls	r3, r3, #4
 8011a4c:	1a9b      	subs	r3, r3, r2
 8011a4e:	009b      	lsls	r3, r3, #2
 8011a50:	440b      	add	r3, r1
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7ff fd28 	bl	80114ae <LL_UCPD_SetRpResistor>
      break;
 8011a5e:	e000      	b.n	8011a62 <USBPDM1_AssertRp+0x8a>
      break;
 8011a60:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8011a62:	79fa      	ldrb	r2, [r7, #7]
 8011a64:	4926      	ldr	r1, [pc, #152]	@ (8011b00 <USBPDM1_AssertRp+0x128>)
 8011a66:	4613      	mov	r3, r2
 8011a68:	011b      	lsls	r3, r3, #4
 8011a6a:	1a9b      	subs	r3, r3, r2
 8011a6c:	009b      	lsls	r3, r3, #2
 8011a6e:	440b      	add	r3, r1
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	2100      	movs	r1, #0
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7ff fce7 	bl	8011448 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8011a7a:	79fa      	ldrb	r2, [r7, #7]
 8011a7c:	4920      	ldr	r1, [pc, #128]	@ (8011b00 <USBPDM1_AssertRp+0x128>)
 8011a7e:	4613      	mov	r3, r2
 8011a80:	011b      	lsls	r3, r3, #4
 8011a82:	1a9b      	subs	r3, r3, r2
 8011a84:	009b      	lsls	r3, r3, #2
 8011a86:	440b      	add	r3, r1
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7ff fcff 	bl	801148e <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8011a90:	79fa      	ldrb	r2, [r7, #7]
 8011a92:	491b      	ldr	r1, [pc, #108]	@ (8011b00 <USBPDM1_AssertRp+0x128>)
 8011a94:	4613      	mov	r3, r2
 8011a96:	011b      	lsls	r3, r3, #4
 8011a98:	1a9b      	subs	r3, r3, r2
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	440b      	add	r3, r1
 8011a9e:	3334      	adds	r3, #52	@ 0x34
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d10d      	bne.n	8011ac2 <USBPDM1_AssertRp+0xea>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8011aa6:	79fa      	ldrb	r2, [r7, #7]
 8011aa8:	4915      	ldr	r1, [pc, #84]	@ (8011b00 <USBPDM1_AssertRp+0x128>)
 8011aaa:	4613      	mov	r3, r2
 8011aac:	011b      	lsls	r3, r3, #4
 8011aae:	1a9b      	subs	r3, r3, r2
 8011ab0:	009b      	lsls	r3, r3, #2
 8011ab2:	440b      	add	r3, r1
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7ff fcc4 	bl	8011448 <LL_UCPD_SetccEnable>
  }

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 8011ac0:	e01a      	b.n	8011af8 <USBPDM1_AssertRp+0x120>
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8011ac2:	79fa      	ldrb	r2, [r7, #7]
 8011ac4:	490e      	ldr	r1, [pc, #56]	@ (8011b00 <USBPDM1_AssertRp+0x128>)
 8011ac6:	4613      	mov	r3, r2
 8011ac8:	011b      	lsls	r3, r3, #4
 8011aca:	1a9b      	subs	r3, r3, r2
 8011acc:	009b      	lsls	r3, r3, #2
 8011ace:	440b      	add	r3, r1
 8011ad0:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8011ad2:	79fa      	ldrb	r2, [r7, #7]
 8011ad4:	490a      	ldr	r1, [pc, #40]	@ (8011b00 <USBPDM1_AssertRp+0x128>)
 8011ad6:	4613      	mov	r3, r2
 8011ad8:	011b      	lsls	r3, r3, #4
 8011ada:	1a9b      	subs	r3, r3, r2
 8011adc:	009b      	lsls	r3, r3, #2
 8011ade:	440b      	add	r3, r1
 8011ae0:	3334      	adds	r3, #52	@ 0x34
 8011ae2:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	d102      	bne.n	8011aee <USBPDM1_AssertRp+0x116>
 8011ae8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011aec:	e001      	b.n	8011af2 <USBPDM1_AssertRp+0x11a>
 8011aee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011af2:	4619      	mov	r1, r3
 8011af4:	f7ff fca8 	bl	8011448 <LL_UCPD_SetccEnable>
}
 8011af8:	bf00      	nop
 8011afa:	3708      	adds	r7, #8
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	200035a0 	.word	0x200035a0

08011b04 <USBPDM1_DeAssertRp>:
  * @brief  De-assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8011b04:	b480      	push	{r7}
 8011b06:	b083      	sub	sp, #12
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8011b0e:	bf00      	nop
 8011b10:	370c      	adds	r7, #12
 8011b12:	46bd      	mov	sp, r7
 8011b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b18:	4770      	bx	lr
	...

08011b1c <USBPDM1_AssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRd(uint8_t PortNum)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b082      	sub	sp, #8
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	4603      	mov	r3, r0
 8011b24:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8011b26:	79fa      	ldrb	r2, [r7, #7]
 8011b28:	493e      	ldr	r1, [pc, #248]	@ (8011c24 <USBPDM1_AssertRd+0x108>)
 8011b2a:	4613      	mov	r3, r2
 8011b2c:	011b      	lsls	r3, r3, #4
 8011b2e:	1a9b      	subs	r3, r3, r2
 8011b30:	009b      	lsls	r3, r3, #2
 8011b32:	440b      	add	r3, r1
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7ff fc36 	bl	80113a8 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8011b3c:	79fa      	ldrb	r2, [r7, #7]
 8011b3e:	4939      	ldr	r1, [pc, #228]	@ (8011c24 <USBPDM1_AssertRd+0x108>)
 8011b40:	4613      	mov	r3, r2
 8011b42:	011b      	lsls	r3, r3, #4
 8011b44:	1a9b      	subs	r3, r3, r2
 8011b46:	009b      	lsls	r3, r3, #2
 8011b48:	440b      	add	r3, r1
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7ff fc4b 	bl	80113e8 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8011b52:	79fa      	ldrb	r2, [r7, #7]
 8011b54:	4933      	ldr	r1, [pc, #204]	@ (8011c24 <USBPDM1_AssertRd+0x108>)
 8011b56:	4613      	mov	r3, r2
 8011b58:	011b      	lsls	r3, r3, #4
 8011b5a:	1a9b      	subs	r3, r3, r2
 8011b5c:	009b      	lsls	r3, r3, #2
 8011b5e:	440b      	add	r3, r1
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	2100      	movs	r1, #0
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7ff fc6f 	bl	8011448 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 8011b6a:	79fa      	ldrb	r2, [r7, #7]
 8011b6c:	492d      	ldr	r1, [pc, #180]	@ (8011c24 <USBPDM1_AssertRd+0x108>)
 8011b6e:	4613      	mov	r3, r2
 8011b70:	011b      	lsls	r3, r3, #4
 8011b72:	1a9b      	subs	r3, r3, r2
 8011b74:	009b      	lsls	r3, r3, #2
 8011b76:	440b      	add	r3, r1
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7ff fc77 	bl	801146e <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8011b80:	79fa      	ldrb	r2, [r7, #7]
 8011b82:	4928      	ldr	r1, [pc, #160]	@ (8011c24 <USBPDM1_AssertRd+0x108>)
 8011b84:	4613      	mov	r3, r2
 8011b86:	011b      	lsls	r3, r3, #4
 8011b88:	1a9b      	subs	r3, r3, r2
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	440b      	add	r3, r1
 8011b8e:	3334      	adds	r3, #52	@ 0x34
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d10d      	bne.n	8011bb2 <USBPDM1_AssertRd+0x96>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8011b96:	79fa      	ldrb	r2, [r7, #7]
 8011b98:	4922      	ldr	r1, [pc, #136]	@ (8011c24 <USBPDM1_AssertRd+0x108>)
 8011b9a:	4613      	mov	r3, r2
 8011b9c:	011b      	lsls	r3, r3, #4
 8011b9e:	1a9b      	subs	r3, r3, r2
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	440b      	add	r3, r1
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7ff fc4c 	bl	8011448 <LL_UCPD_SetccEnable>
 8011bb0:	e01a      	b.n	8011be8 <USBPDM1_AssertRd+0xcc>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8011bb2:	79fa      	ldrb	r2, [r7, #7]
 8011bb4:	491b      	ldr	r1, [pc, #108]	@ (8011c24 <USBPDM1_AssertRd+0x108>)
 8011bb6:	4613      	mov	r3, r2
 8011bb8:	011b      	lsls	r3, r3, #4
 8011bba:	1a9b      	subs	r3, r3, r2
 8011bbc:	009b      	lsls	r3, r3, #2
 8011bbe:	440b      	add	r3, r1
 8011bc0:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8011bc2:	79fa      	ldrb	r2, [r7, #7]
 8011bc4:	4917      	ldr	r1, [pc, #92]	@ (8011c24 <USBPDM1_AssertRd+0x108>)
 8011bc6:	4613      	mov	r3, r2
 8011bc8:	011b      	lsls	r3, r3, #4
 8011bca:	1a9b      	subs	r3, r3, r2
 8011bcc:	009b      	lsls	r3, r3, #2
 8011bce:	440b      	add	r3, r1
 8011bd0:	3334      	adds	r3, #52	@ 0x34
 8011bd2:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8011bd4:	2b01      	cmp	r3, #1
 8011bd6:	d102      	bne.n	8011bde <USBPDM1_AssertRd+0xc2>
 8011bd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011bdc:	e001      	b.n	8011be2 <USBPDM1_AssertRd+0xc6>
 8011bde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011be2:	4619      	mov	r1, r3
 8011be4:	f7ff fc30 	bl	8011448 <LL_UCPD_SetccEnable>
  }

  HAL_Delay(1);
 8011be8:	2001      	movs	r0, #1
 8011bea:	f7f4 f995 	bl	8005f18 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8011bee:	79fa      	ldrb	r2, [r7, #7]
 8011bf0:	490c      	ldr	r1, [pc, #48]	@ (8011c24 <USBPDM1_AssertRd+0x108>)
 8011bf2:	4613      	mov	r3, r2
 8011bf4:	011b      	lsls	r3, r3, #4
 8011bf6:	1a9b      	subs	r3, r3, r2
 8011bf8:	009b      	lsls	r3, r3, #2
 8011bfa:	440b      	add	r3, r1
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7ff fbc2 	bl	8011388 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8011c04:	79fa      	ldrb	r2, [r7, #7]
 8011c06:	4907      	ldr	r1, [pc, #28]	@ (8011c24 <USBPDM1_AssertRd+0x108>)
 8011c08:	4613      	mov	r3, r2
 8011c0a:	011b      	lsls	r3, r3, #4
 8011c0c:	1a9b      	subs	r3, r3, r2
 8011c0e:	009b      	lsls	r3, r3, #2
 8011c10:	440b      	add	r3, r1
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7ff fbd7 	bl	80113c8 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8011c1a:	bf00      	nop
 8011c1c:	3708      	adds	r7, #8
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
 8011c22:	bf00      	nop
 8011c24:	200035a0 	.word	0x200035a0

08011c28 <USBPDM1_DeAssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval none
  */
void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b083      	sub	sp, #12
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	4603      	mov	r3, r0
 8011c30:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8011c32:	bf00      	nop
 8011c34:	370c      	adds	r7, #12
 8011c36:	46bd      	mov	sp, r7
 8011c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3c:	4770      	bx	lr
	...

08011c40 <USBPDM1_EnterErrorRecovery>:
  * @brief  Enter error recovery
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	4603      	mov	r3, r0
 8011c48:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8011c4a:	79fa      	ldrb	r2, [r7, #7]
 8011c4c:	491f      	ldr	r1, [pc, #124]	@ (8011ccc <USBPDM1_EnterErrorRecovery+0x8c>)
 8011c4e:	4613      	mov	r3, r2
 8011c50:	011b      	lsls	r3, r3, #4
 8011c52:	1a9b      	subs	r3, r3, r2
 8011c54:	009b      	lsls	r3, r3, #2
 8011c56:	440b      	add	r3, r1
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7ff fc17 	bl	801148e <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8011c60:	79fa      	ldrb	r2, [r7, #7]
 8011c62:	491a      	ldr	r1, [pc, #104]	@ (8011ccc <USBPDM1_EnterErrorRecovery+0x8c>)
 8011c64:	4613      	mov	r3, r2
 8011c66:	011b      	lsls	r3, r3, #4
 8011c68:	1a9b      	subs	r3, r3, r2
 8011c6a:	009b      	lsls	r3, r3, #2
 8011c6c:	440b      	add	r3, r1
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2100      	movs	r1, #0
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7ff fc1b 	bl	80114ae <LL_UCPD_SetRpResistor>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8011c78:	79fa      	ldrb	r2, [r7, #7]
 8011c7a:	4914      	ldr	r1, [pc, #80]	@ (8011ccc <USBPDM1_EnterErrorRecovery+0x8c>)
 8011c7c:	4613      	mov	r3, r2
 8011c7e:	011b      	lsls	r3, r3, #4
 8011c80:	1a9b      	subs	r3, r3, r2
 8011c82:	009b      	lsls	r3, r3, #2
 8011c84:	440b      	add	r3, r1
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7ff fc46 	bl	801151a <LL_UCPD_RxDisable>

#if !defined(USBPDCORE_LIB_NO_PD)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8011c8e:	79fa      	ldrb	r2, [r7, #7]
 8011c90:	490e      	ldr	r1, [pc, #56]	@ (8011ccc <USBPDM1_EnterErrorRecovery+0x8c>)
 8011c92:	4613      	mov	r3, r2
 8011c94:	011b      	lsls	r3, r3, #4
 8011c96:	1a9b      	subs	r3, r3, r2
 8011c98:	009b      	lsls	r3, r3, #2
 8011c9a:	440b      	add	r3, r1
 8011c9c:	330c      	adds	r3, #12
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	7a1b      	ldrb	r3, [r3, #8]
 8011ca2:	f003 0302 	and.w	r3, r3, #2
 8011ca6:	b2db      	uxtb	r3, r3
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d00a      	beq.n	8011cc2 <USBPDM1_EnterErrorRecovery+0x82>
  {
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8011cac:	79fa      	ldrb	r2, [r7, #7]
 8011cae:	4907      	ldr	r1, [pc, #28]	@ (8011ccc <USBPDM1_EnterErrorRecovery+0x8c>)
 8011cb0:	4613      	mov	r3, r2
 8011cb2:	011b      	lsls	r3, r3, #4
 8011cb4:	1a9b      	subs	r3, r3, r2
 8011cb6:	009b      	lsls	r3, r3, #2
 8011cb8:	440b      	add	r3, r1
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7ff fbb3 	bl	8011428 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPDCORE_LIB_NO_PD */
}
 8011cc2:	bf00      	nop
 8011cc4:	3708      	adds	r7, #8
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	200035a0 	.word	0x200035a0

08011cd0 <USBPD_HW_IF_EnableRX>:
  * @brief  Enable RX
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8011cda:	79fa      	ldrb	r2, [r7, #7]
 8011cdc:	4906      	ldr	r1, [pc, #24]	@ (8011cf8 <USBPD_HW_IF_EnableRX+0x28>)
 8011cde:	4613      	mov	r3, r2
 8011ce0:	011b      	lsls	r3, r3, #4
 8011ce2:	1a9b      	subs	r3, r3, r2
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	440b      	add	r3, r1
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7ff fc05 	bl	80114fa <LL_UCPD_RxEnable>
}
 8011cf0:	bf00      	nop
 8011cf2:	3708      	adds	r7, #8
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}
 8011cf8:	200035a0 	.word	0x200035a0

08011cfc <USBPD_HW_IF_DisableRX>:
  * @brief  Disable RX
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	4603      	mov	r3, r0
 8011d04:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8011d06:	79fa      	ldrb	r2, [r7, #7]
 8011d08:	4906      	ldr	r1, [pc, #24]	@ (8011d24 <USBPD_HW_IF_DisableRX+0x28>)
 8011d0a:	4613      	mov	r3, r2
 8011d0c:	011b      	lsls	r3, r3, #4
 8011d0e:	1a9b      	subs	r3, r3, r2
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	440b      	add	r3, r1
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7ff fbff 	bl	801151a <LL_UCPD_RxDisable>
}
 8011d1c:	bf00      	nop
 8011d1e:	3708      	adds	r7, #8
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}
 8011d24:	200035a0 	.word	0x200035a0

08011d28 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8011d28:	b590      	push	{r4, r7, lr}
 8011d2a:	b085      	sub	sp, #20
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	4603      	mov	r3, r0
 8011d30:	6039      	str	r1, [r7, #0]
 8011d32:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 8011d34:	f000 fc08 	bl	8012548 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8011d38:	79fc      	ldrb	r4, [r7, #7]
 8011d3a:	79fb      	ldrb	r3, [r7, #7]
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7fe fe73 	bl	8010a28 <USBPD_HW_Init_DMATxInstance>
 8011d42:	4602      	mov	r2, r0
 8011d44:	499d      	ldr	r1, [pc, #628]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011d46:	4623      	mov	r3, r4
 8011d48:	011b      	lsls	r3, r3, #4
 8011d4a:	1b1b      	subs	r3, r3, r4
 8011d4c:	009b      	lsls	r3, r3, #2
 8011d4e:	440b      	add	r3, r1
 8011d50:	3304      	adds	r3, #4
 8011d52:	601a      	str	r2, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 8011d54:	79fc      	ldrb	r4, [r7, #7]
 8011d56:	79fb      	ldrb	r3, [r7, #7]
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7fe fe25 	bl	80109a8 <USBPD_HW_Init_DMARxInstance>
 8011d5e:	4602      	mov	r2, r0
 8011d60:	4996      	ldr	r1, [pc, #600]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011d62:	4623      	mov	r3, r4
 8011d64:	011b      	lsls	r3, r3, #4
 8011d66:	1b1b      	subs	r3, r3, r4
 8011d68:	009b      	lsls	r3, r3, #2
 8011d6a:	440b      	add	r3, r1
 8011d6c:	3308      	adds	r3, #8
 8011d6e:	601a      	str	r2, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8011d70:	79fa      	ldrb	r2, [r7, #7]
 8011d72:	4992      	ldr	r1, [pc, #584]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011d74:	4613      	mov	r3, r2
 8011d76:	011b      	lsls	r3, r3, #4
 8011d78:	1a9b      	subs	r3, r3, r2
 8011d7a:	009b      	lsls	r3, r3, #2
 8011d7c:	440b      	add	r3, r1
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	3330      	adds	r3, #48	@ 0x30
 8011d82:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 8011d84:	79fa      	ldrb	r2, [r7, #7]
 8011d86:	498d      	ldr	r1, [pc, #564]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011d88:	4613      	mov	r3, r2
 8011d8a:	011b      	lsls	r3, r3, #4
 8011d8c:	1a9b      	subs	r3, r3, r2
 8011d8e:	009b      	lsls	r3, r3, #2
 8011d90:	440b      	add	r3, r1
 8011d92:	3308      	adds	r3, #8
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	68fa      	ldr	r2, [r7, #12]
 8011d98:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8011d9a:	79fa      	ldrb	r2, [r7, #7]
 8011d9c:	4987      	ldr	r1, [pc, #540]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011d9e:	4613      	mov	r3, r2
 8011da0:	011b      	lsls	r3, r3, #4
 8011da2:	1a9b      	subs	r3, r3, r2
 8011da4:	009b      	lsls	r3, r3, #2
 8011da6:	440b      	add	r3, r1
 8011da8:	3330      	adds	r3, #48	@ 0x30
 8011daa:	6818      	ldr	r0, [r3, #0]
 8011dac:	79fa      	ldrb	r2, [r7, #7]
 8011dae:	4983      	ldr	r1, [pc, #524]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011db0:	4613      	mov	r3, r2
 8011db2:	011b      	lsls	r3, r3, #4
 8011db4:	1a9b      	subs	r3, r3, r2
 8011db6:	009b      	lsls	r3, r3, #2
 8011db8:	440b      	add	r3, r1
 8011dba:	3308      	adds	r3, #8
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	4602      	mov	r2, r0
 8011dc0:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 8011dc2:	79fa      	ldrb	r2, [r7, #7]
 8011dc4:	497d      	ldr	r1, [pc, #500]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011dc6:	4613      	mov	r3, r2
 8011dc8:	011b      	lsls	r3, r3, #4
 8011dca:	1a9b      	subs	r3, r3, r2
 8011dcc:	009b      	lsls	r3, r3, #2
 8011dce:	440b      	add	r3, r1
 8011dd0:	3308      	adds	r3, #8
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8011dd8:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8011dda:	79fa      	ldrb	r2, [r7, #7]
 8011ddc:	4977      	ldr	r1, [pc, #476]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011dde:	4613      	mov	r3, r2
 8011de0:	011b      	lsls	r3, r3, #4
 8011de2:	1a9b      	subs	r3, r3, r2
 8011de4:	009b      	lsls	r3, r3, #2
 8011de6:	440b      	add	r3, r1
 8011de8:	3308      	adds	r3, #8
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	6819      	ldr	r1, [r3, #0]
 8011dee:	79fa      	ldrb	r2, [r7, #7]
 8011df0:	4872      	ldr	r0, [pc, #456]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011df2:	4613      	mov	r3, r2
 8011df4:	011b      	lsls	r3, r3, #4
 8011df6:	1a9b      	subs	r3, r3, r2
 8011df8:	009b      	lsls	r3, r3, #2
 8011dfa:	4403      	add	r3, r0
 8011dfc:	3308      	adds	r3, #8
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f041 0201 	orr.w	r2, r1, #1
 8011e04:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8011e06:	79fa      	ldrb	r2, [r7, #7]
 8011e08:	496c      	ldr	r1, [pc, #432]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011e0a:	4613      	mov	r3, r2
 8011e0c:	011b      	lsls	r3, r3, #4
 8011e0e:	1a9b      	subs	r3, r3, r2
 8011e10:	009b      	lsls	r3, r3, #2
 8011e12:	440b      	add	r3, r1
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	3324      	adds	r3, #36	@ 0x24
 8011e18:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8011e1a:	79fa      	ldrb	r2, [r7, #7]
 8011e1c:	4967      	ldr	r1, [pc, #412]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011e1e:	4613      	mov	r3, r2
 8011e20:	011b      	lsls	r3, r3, #4
 8011e22:	1a9b      	subs	r3, r3, r2
 8011e24:	009b      	lsls	r3, r3, #2
 8011e26:	440b      	add	r3, r1
 8011e28:	3304      	adds	r3, #4
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	68fa      	ldr	r2, [r7, #12]
 8011e2e:	609a      	str	r2, [r3, #8]
  /* Disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 8011e30:	79fa      	ldrb	r2, [r7, #7]
 8011e32:	4962      	ldr	r1, [pc, #392]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011e34:	4613      	mov	r3, r2
 8011e36:	011b      	lsls	r3, r3, #4
 8011e38:	1a9b      	subs	r3, r3, r2
 8011e3a:	009b      	lsls	r3, r3, #2
 8011e3c:	440b      	add	r3, r1
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	6919      	ldr	r1, [r3, #16]
 8011e42:	79fa      	ldrb	r2, [r7, #7]
 8011e44:	485d      	ldr	r0, [pc, #372]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011e46:	4613      	mov	r3, r2
 8011e48:	011b      	lsls	r3, r3, #4
 8011e4a:	1a9b      	subs	r3, r3, r2
 8011e4c:	009b      	lsls	r3, r3, #2
 8011e4e:	4403      	add	r3, r0
 8011e50:	681a      	ldr	r2, [r3, #0]
 8011e52:	f441 53f3 	orr.w	r3, r1, #7776	@ 0x1e60
 8011e56:	f043 031e 	orr.w	r3, r3, #30
 8011e5a:	6113      	str	r3, [r2, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 8011e5c:	79fa      	ldrb	r2, [r7, #7]
 8011e5e:	4957      	ldr	r1, [pc, #348]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011e60:	4613      	mov	r3, r2
 8011e62:	011b      	lsls	r3, r3, #4
 8011e64:	1a9b      	subs	r3, r3, r2
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	440b      	add	r3, r1
 8011e6a:	3334      	adds	r3, #52	@ 0x34
 8011e6c:	683a      	ldr	r2, [r7, #0]
 8011e6e:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 8011e70:	79fa      	ldrb	r2, [r7, #7]
 8011e72:	4952      	ldr	r1, [pc, #328]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011e74:	4613      	mov	r3, r2
 8011e76:	011b      	lsls	r3, r3, #4
 8011e78:	1a9b      	subs	r3, r3, r2
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	440b      	add	r3, r1
 8011e7e:	6818      	ldr	r0, [r3, #0]
 8011e80:	79fa      	ldrb	r2, [r7, #7]
 8011e82:	494e      	ldr	r1, [pc, #312]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011e84:	4613      	mov	r3, r2
 8011e86:	011b      	lsls	r3, r3, #4
 8011e88:	1a9b      	subs	r3, r3, r2
 8011e8a:	009b      	lsls	r3, r3, #2
 8011e8c:	440b      	add	r3, r1
 8011e8e:	3334      	adds	r3, #52	@ 0x34
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	2b01      	cmp	r3, #1
 8011e94:	d101      	bne.n	8011e9a <HW_SignalAttachement+0x172>
 8011e96:	2300      	movs	r3, #0
 8011e98:	e000      	b.n	8011e9c <HW_SignalAttachement+0x174>
 8011e9a:	2340      	movs	r3, #64	@ 0x40
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	f7ff fb19 	bl	80114d4 <LL_UCPD_SetCCPin>
#if defined(_VCONN_SUPPORT)
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8011ea2:	79fa      	ldrb	r2, [r7, #7]
 8011ea4:	4945      	ldr	r1, [pc, #276]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011ea6:	4613      	mov	r3, r2
 8011ea8:	011b      	lsls	r3, r3, #4
 8011eaa:	1a9b      	subs	r3, r3, r2
 8011eac:	009b      	lsls	r3, r3, #2
 8011eae:	440b      	add	r3, r1
 8011eb0:	330c      	adds	r3, #12
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	7a1b      	ldrb	r3, [r3, #8]
 8011eb6:	f003 0302 	and.w	r3, r3, #2
 8011eba:	b2db      	uxtb	r3, r3
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d031      	beq.n	8011f24 <HW_SignalAttachement+0x1fc>
  {
    /* Set GPIO to allow the FRS TX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 8011ec0:	79fa      	ldrb	r2, [r7, #7]
 8011ec2:	493e      	ldr	r1, [pc, #248]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011ec4:	4613      	mov	r3, r2
 8011ec6:	011b      	lsls	r3, r3, #4
 8011ec8:	1a9b      	subs	r3, r3, r2
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	440b      	add	r3, r1
 8011ece:	3334      	adds	r3, #52	@ 0x34
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	2b01      	cmp	r3, #1
 8011ed4:	d101      	bne.n	8011eda <HW_SignalAttachement+0x1b2>
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	e000      	b.n	8011edc <HW_SignalAttachement+0x1b4>
 8011eda:	2202      	movs	r2, #2
 8011edc:	79fb      	ldrb	r3, [r7, #7]
 8011ede:	4611      	mov	r1, r2
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7fe fde0 	bl	8010aa6 <USBPD_HW_SetFRSSignalling>
    /* Enable FRS RX */
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8011ee6:	79fa      	ldrb	r2, [r7, #7]
 8011ee8:	4934      	ldr	r1, [pc, #208]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011eea:	4613      	mov	r3, r2
 8011eec:	011b      	lsls	r3, r3, #4
 8011eee:	1a9b      	subs	r3, r3, r2
 8011ef0:	009b      	lsls	r3, r3, #2
 8011ef2:	440b      	add	r3, r1
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7ff fa86 	bl	8011408 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 8011efc:	79fa      	ldrb	r2, [r7, #7]
 8011efe:	492f      	ldr	r1, [pc, #188]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011f00:	4613      	mov	r3, r2
 8011f02:	011b      	lsls	r3, r3, #4
 8011f04:	1a9b      	subs	r3, r3, r2
 8011f06:	009b      	lsls	r3, r3, #2
 8011f08:	440b      	add	r3, r1
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	6919      	ldr	r1, [r3, #16]
 8011f0e:	79fa      	ldrb	r2, [r7, #7]
 8011f10:	482a      	ldr	r0, [pc, #168]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011f12:	4613      	mov	r3, r2
 8011f14:	011b      	lsls	r3, r3, #4
 8011f16:	1a9b      	subs	r3, r3, r2
 8011f18:	009b      	lsls	r3, r3, #2
 8011f1a:	4403      	add	r3, r0
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	f441 1280 	orr.w	r2, r1, #1048576	@ 0x100000
 8011f22:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 8011f24:	79fa      	ldrb	r2, [r7, #7]
 8011f26:	4925      	ldr	r1, [pc, #148]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011f28:	4613      	mov	r3, r2
 8011f2a:	011b      	lsls	r3, r3, #4
 8011f2c:	1a9b      	subs	r3, r3, r2
 8011f2e:	009b      	lsls	r3, r3, #2
 8011f30:	440b      	add	r3, r1
 8011f32:	3334      	adds	r3, #52	@ 0x34
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d10d      	bne.n	8011f56 <HW_SignalAttachement+0x22e>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 8011f3a:	79fa      	ldrb	r2, [r7, #7]
 8011f3c:	491f      	ldr	r1, [pc, #124]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011f3e:	4613      	mov	r3, r2
 8011f40:	011b      	lsls	r3, r3, #4
 8011f42:	1a9b      	subs	r3, r3, r2
 8011f44:	009b      	lsls	r3, r3, #2
 8011f46:	440b      	add	r3, r1
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7ff fa7a 	bl	8011448 <LL_UCPD_SetccEnable>
 8011f54:	e00c      	b.n	8011f70 <HW_SignalAttachement+0x248>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 8011f56:	79fa      	ldrb	r2, [r7, #7]
 8011f58:	4918      	ldr	r1, [pc, #96]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011f5a:	4613      	mov	r3, r2
 8011f5c:	011b      	lsls	r3, r3, #4
 8011f5e:	1a9b      	subs	r3, r3, r2
 8011f60:	009b      	lsls	r3, r3, #2
 8011f62:	440b      	add	r3, r1
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7ff fa6c 	bl	8011448 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 8011f70:	79fa      	ldrb	r2, [r7, #7]
 8011f72:	4912      	ldr	r1, [pc, #72]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011f74:	4613      	mov	r3, r2
 8011f76:	011b      	lsls	r3, r3, #4
 8011f78:	1a9b      	subs	r3, r3, r2
 8011f7a:	009b      	lsls	r3, r3, #2
 8011f7c:	440b      	add	r3, r1
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	2100      	movs	r1, #0
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7ff fad9 	bl	801153a <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 8011f88:	79fa      	ldrb	r2, [r7, #7]
 8011f8a:	490c      	ldr	r1, [pc, #48]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011f8c:	4613      	mov	r3, r2
 8011f8e:	011b      	lsls	r3, r3, #4
 8011f90:	1a9b      	subs	r3, r3, r2
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	440b      	add	r3, r1
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f7ff fb14 	bl	80115c6 <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 8011f9e:	79fa      	ldrb	r2, [r7, #7]
 8011fa0:	4906      	ldr	r1, [pc, #24]	@ (8011fbc <HW_SignalAttachement+0x294>)
 8011fa2:	4613      	mov	r3, r2
 8011fa4:	011b      	lsls	r3, r3, #4
 8011fa6:	1a9b      	subs	r3, r3, r2
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	440b      	add	r3, r1
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7ff fb29 	bl	8011606 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 8011fb4:	bf00      	nop
 8011fb6:	3714      	adds	r7, #20
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd90      	pop	{r4, r7, pc}
 8011fbc:	200035a0 	.word	0x200035a0

08011fc0 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b082      	sub	sp, #8
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* Stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 8011fca:	79fa      	ldrb	r2, [r7, #7]
 8011fcc:	493e      	ldr	r1, [pc, #248]	@ (80120c8 <HW_SignalDetachment+0x108>)
 8011fce:	4613      	mov	r3, r2
 8011fd0:	011b      	lsls	r3, r3, #4
 8011fd2:	1a9b      	subs	r3, r3, r2
 8011fd4:	009b      	lsls	r3, r3, #2
 8011fd6:	440b      	add	r3, r1
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f7ff fb03 	bl	80115e6 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 8011fe0:	79fa      	ldrb	r2, [r7, #7]
 8011fe2:	4939      	ldr	r1, [pc, #228]	@ (80120c8 <HW_SignalDetachment+0x108>)
 8011fe4:	4613      	mov	r3, r2
 8011fe6:	011b      	lsls	r3, r3, #4
 8011fe8:	1a9b      	subs	r3, r3, r2
 8011fea:	009b      	lsls	r3, r3, #2
 8011fec:	440b      	add	r3, r1
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7ff fb18 	bl	8011626 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8011ff6:	79fa      	ldrb	r2, [r7, #7]
 8011ff8:	4933      	ldr	r1, [pc, #204]	@ (80120c8 <HW_SignalDetachment+0x108>)
 8011ffa:	4613      	mov	r3, r2
 8011ffc:	011b      	lsls	r3, r3, #4
 8011ffe:	1a9b      	subs	r3, r3, r2
 8012000:	009b      	lsls	r3, r3, #2
 8012002:	440b      	add	r3, r1
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	4618      	mov	r0, r3
 8012008:	f7ff fa87 	bl	801151a <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 801200c:	79fa      	ldrb	r2, [r7, #7]
 801200e:	492e      	ldr	r1, [pc, #184]	@ (80120c8 <HW_SignalDetachment+0x108>)
 8012010:	4613      	mov	r3, r2
 8012012:	011b      	lsls	r3, r3, #4
 8012014:	1a9b      	subs	r3, r3, r2
 8012016:	009b      	lsls	r3, r3, #2
 8012018:	440b      	add	r3, r1
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012020:	611a      	str	r2, [r3, #16]
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_DRP */
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 8012022:	79fb      	ldrb	r3, [r7, #7]
 8012024:	4618      	mov	r0, r3
 8012026:	f7fe fd33 	bl	8010a90 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 801202a:	79fb      	ldrb	r3, [r7, #7]
 801202c:	4618      	mov	r0, r3
 801202e:	f7fe fcef 	bl	8010a10 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8012032:	79fa      	ldrb	r2, [r7, #7]
 8012034:	4924      	ldr	r1, [pc, #144]	@ (80120c8 <HW_SignalDetachment+0x108>)
 8012036:	4613      	mov	r3, r2
 8012038:	011b      	lsls	r3, r3, #4
 801203a:	1a9b      	subs	r3, r3, r2
 801203c:	009b      	lsls	r3, r3, #2
 801203e:	440b      	add	r3, r1
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8012046:	4618      	mov	r0, r3
 8012048:	f7ff f9fe 	bl	8011448 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 801204c:	79fa      	ldrb	r2, [r7, #7]
 801204e:	491e      	ldr	r1, [pc, #120]	@ (80120c8 <HW_SignalDetachment+0x108>)
 8012050:	4613      	mov	r3, r2
 8012052:	011b      	lsls	r3, r3, #4
 8012054:	1a9b      	subs	r3, r3, r2
 8012056:	009b      	lsls	r3, r3, #2
 8012058:	440b      	add	r3, r1
 801205a:	3310      	adds	r3, #16
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	f003 0304 	and.w	r3, r3, #4
 8012064:	b2db      	uxtb	r3, r3
 8012066:	2b00      	cmp	r3, #0
 8012068:	d103      	bne.n	8012072 <HW_SignalDetachment+0xb2>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 801206a:	79fb      	ldrb	r3, [r7, #7]
 801206c:	4618      	mov	r0, r3
 801206e:	f003 fe25 	bl	8015cbc <BSP_USBPD_PWR_VBUSDeInit>
  }

  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8012072:	79fa      	ldrb	r2, [r7, #7]
 8012074:	4914      	ldr	r1, [pc, #80]	@ (80120c8 <HW_SignalDetachment+0x108>)
 8012076:	4613      	mov	r3, r2
 8012078:	011b      	lsls	r3, r3, #4
 801207a:	1a9b      	subs	r3, r3, r2
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	440b      	add	r3, r1
 8012080:	330c      	adds	r3, #12
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	7a1b      	ldrb	r3, [r3, #8]
 8012086:	f003 0302 	and.w	r3, r3, #2
 801208a:	b2db      	uxtb	r3, r3
 801208c:	2b00      	cmp	r3, #0
 801208e:	d00a      	beq.n	80120a6 <HW_SignalDetachment+0xe6>
  {
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8012090:	79fa      	ldrb	r2, [r7, #7]
 8012092:	490d      	ldr	r1, [pc, #52]	@ (80120c8 <HW_SignalDetachment+0x108>)
 8012094:	4613      	mov	r3, r2
 8012096:	011b      	lsls	r3, r3, #4
 8012098:	1a9b      	subs	r3, r3, r2
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	440b      	add	r3, r1
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7ff f9c1 	bl	8011428 <LL_UCPD_FRSDetectionDisable>
  }

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 80120a6:	79fa      	ldrb	r2, [r7, #7]
 80120a8:	4907      	ldr	r1, [pc, #28]	@ (80120c8 <HW_SignalDetachment+0x108>)
 80120aa:	4613      	mov	r3, r2
 80120ac:	011b      	lsls	r3, r3, #4
 80120ae:	1a9b      	subs	r3, r3, r2
 80120b0:	009b      	lsls	r3, r3, #2
 80120b2:	440b      	add	r3, r1
 80120b4:	3334      	adds	r3, #52	@ 0x34
 80120b6:	2200      	movs	r2, #0
 80120b8:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 80120ba:	f000 facd 	bl	8012658 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80120be:	bf00      	nop
 80120c0:	3708      	adds	r7, #8
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop
 80120c8:	200035a0 	.word	0x200035a0

080120cc <USBPD_HW_IF_IsResistor_SinkTxOk>:
  * @brief  Check if resistors are set to SinkTxOk
  * @param  PortNum Port
  * @retval USBPD_TRUE if resistor is set to SinkTxOk, else USBPD_FALSE
  */
uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80120cc:	b480      	push	{r7}
 80120ce:	b083      	sub	sp, #12
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	4603      	mov	r3, r0
 80120d4:	71fb      	strb	r3, [r7, #7]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 80120d6:	79fa      	ldrb	r2, [r7, #7]
 80120d8:	491b      	ldr	r1, [pc, #108]	@ (8012148 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 80120da:	4613      	mov	r3, r2
 80120dc:	011b      	lsls	r3, r3, #4
 80120de:	1a9b      	subs	r3, r3, r2
 80120e0:	009b      	lsls	r3, r3, #2
 80120e2:	440b      	add	r3, r1
 80120e4:	3334      	adds	r3, #52	@ 0x34
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	2b01      	cmp	r3, #1
 80120ea:	d002      	beq.n	80120f2 <USBPD_HW_IF_IsResistor_SinkTxOk+0x26>
 80120ec:	2b02      	cmp	r3, #2
 80120ee:	d010      	beq.n	8012112 <USBPD_HW_IF_IsResistor_SinkTxOk+0x46>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 80120f0:	e022      	b.n	8012138 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 80120f2:	79fa      	ldrb	r2, [r7, #7]
 80120f4:	4914      	ldr	r1, [pc, #80]	@ (8012148 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 80120f6:	4613      	mov	r3, r2
 80120f8:	011b      	lsls	r3, r3, #4
 80120fa:	1a9b      	subs	r3, r3, r2
 80120fc:	009b      	lsls	r3, r3, #2
 80120fe:	440b      	add	r3, r1
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	695b      	ldr	r3, [r3, #20]
 8012104:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8012108:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801210c:	d111      	bne.n	8012132 <USBPD_HW_IF_IsResistor_SinkTxOk+0x66>
        return USBPD_TRUE;
 801210e:	2301      	movs	r3, #1
 8012110:	e013      	b.n	801213a <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 8012112:	79fa      	ldrb	r2, [r7, #7]
 8012114:	490c      	ldr	r1, [pc, #48]	@ (8012148 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8012116:	4613      	mov	r3, r2
 8012118:	011b      	lsls	r3, r3, #4
 801211a:	1a9b      	subs	r3, r3, r2
 801211c:	009b      	lsls	r3, r3, #2
 801211e:	440b      	add	r3, r1
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	695b      	ldr	r3, [r3, #20]
 8012124:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8012128:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 801212c:	d103      	bne.n	8012136 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6a>
        return USBPD_TRUE;
 801212e:	2301      	movs	r3, #1
 8012130:	e003      	b.n	801213a <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      break;
 8012132:	bf00      	nop
 8012134:	e000      	b.n	8012138 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      break;
 8012136:	bf00      	nop
  }

  return USBPD_FALSE;
 8012138:	2300      	movs	r3, #0
}
 801213a:	4618      	mov	r0, r3
 801213c:	370c      	adds	r7, #12
 801213e:	46bd      	mov	sp, r7
 8012140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012144:	4770      	bx	lr
 8012146:	bf00      	nop
 8012148:	200035a0 	.word	0x200035a0

0801214c <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b084      	sub	sp, #16
 8012150:	af00      	add	r7, sp, #0
 8012152:	4603      	mov	r3, r0
 8012154:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8012156:	79fb      	ldrb	r3, [r7, #7]
 8012158:	f107 020c 	add.w	r2, r7, #12
 801215c:	4611      	mov	r1, r2
 801215e:	4618      	mov	r0, r3
 8012160:	f003 fdc0 	bl	8015ce4 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	b29b      	uxth	r3, r3
}
 8012168:	4618      	mov	r0, r3
 801216a:	3710      	adds	r7, #16
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8012170:	b480      	push	{r7}
 8012172:	b085      	sub	sp, #20
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8012178:	4b08      	ldr	r3, [pc, #32]	@ (801219c <LL_APB2_GRP1_EnableClock+0x2c>)
 801217a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 801217c:	4907      	ldr	r1, [pc, #28]	@ (801219c <LL_APB2_GRP1_EnableClock+0x2c>)
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	4313      	orrs	r3, r2
 8012182:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8012184:	4b05      	ldr	r3, [pc, #20]	@ (801219c <LL_APB2_GRP1_EnableClock+0x2c>)
 8012186:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	4013      	ands	r3, r2
 801218c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801218e:	68fb      	ldr	r3, [r7, #12]
}
 8012190:	bf00      	nop
 8012192:	3714      	adds	r7, #20
 8012194:	46bd      	mov	sp, r7
 8012196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219a:	4770      	bx	lr
 801219c:	40021000 	.word	0x40021000

080121a0 <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80121a0:	b480      	push	{r7}
 80121a2:	b083      	sub	sp, #12
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80121a8:	4b06      	ldr	r3, [pc, #24]	@ (80121c4 <LL_APB2_GRP1_DisableClock+0x24>)
 80121aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	43db      	mvns	r3, r3
 80121b0:	4904      	ldr	r1, [pc, #16]	@ (80121c4 <LL_APB2_GRP1_DisableClock+0x24>)
 80121b2:	4013      	ands	r3, r2
 80121b4:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80121b6:	bf00      	nop
 80121b8:	370c      	adds	r7, #12
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop
 80121c4:	40021000 	.word	0x40021000

080121c8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80121c8:	b480      	push	{r7}
 80121ca:	b083      	sub	sp, #12
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	f043 0201 	orr.w	r2, r3, #1
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	601a      	str	r2, [r3, #0]
}
 80121dc:	bf00      	nop
 80121de:	370c      	adds	r7, #12
 80121e0:	46bd      	mov	sp, r7
 80121e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e6:	4770      	bx	lr

080121e8 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 80121e8:	b480      	push	{r7}
 80121ea:	b083      	sub	sp, #12
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	431a      	orrs	r2, r3
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	601a      	str	r2, [r3, #0]
}
 8012202:	bf00      	nop
 8012204:	370c      	adds	r7, #12
 8012206:	46bd      	mov	sp, r7
 8012208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220c:	4770      	bx	lr

0801220e <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 801220e:	b480      	push	{r7}
 8012210:	b083      	sub	sp, #12
 8012212:	af00      	add	r7, sp, #0
 8012214:	6078      	str	r0, [r7, #4]
 8012216:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	683a      	ldr	r2, [r7, #0]
 801221c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801221e:	bf00      	nop
 8012220:	370c      	adds	r7, #12
 8012222:	46bd      	mov	sp, r7
 8012224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012228:	4770      	bx	lr

0801222a <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 801222a:	b480      	push	{r7}
 801222c:	b083      	sub	sp, #12
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8012236:	4618      	mov	r0, r3
 8012238:	370c      	adds	r7, #12
 801223a:	46bd      	mov	sp, r7
 801223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012240:	4770      	bx	lr

08012242 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8012242:	b480      	push	{r7}
 8012244:	b083      	sub	sp, #12
 8012246:	af00      	add	r7, sp, #0
 8012248:	6078      	str	r0, [r7, #4]
 801224a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	683a      	ldr	r2, [r7, #0]
 8012250:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8012252:	bf00      	nop
 8012254:	370c      	adds	r7, #12
 8012256:	46bd      	mov	sp, r7
 8012258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225c:	4770      	bx	lr
	...

08012260 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PULSE_ON_COMPARE   (for channel 3 or channel 4 only)
  *         @arg @ref LL_TIM_OCMODE_DIRECTION_OUTPUT   (for channel 3 or channel 4 only)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8012260:	b480      	push	{r7}
 8012262:	b087      	sub	sp, #28
 8012264:	af00      	add	r7, sp, #0
 8012266:	60f8      	str	r0, [r7, #12]
 8012268:	60b9      	str	r1, [r7, #8]
 801226a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	2b01      	cmp	r3, #1
 8012270:	d02e      	beq.n	80122d0 <LL_TIM_OC_SetMode+0x70>
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	2b04      	cmp	r3, #4
 8012276:	d029      	beq.n	80122cc <LL_TIM_OC_SetMode+0x6c>
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	2b10      	cmp	r3, #16
 801227c:	d024      	beq.n	80122c8 <LL_TIM_OC_SetMode+0x68>
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	2b40      	cmp	r3, #64	@ 0x40
 8012282:	d01f      	beq.n	80122c4 <LL_TIM_OC_SetMode+0x64>
 8012284:	68bb      	ldr	r3, [r7, #8]
 8012286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801228a:	d019      	beq.n	80122c0 <LL_TIM_OC_SetMode+0x60>
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012292:	d013      	beq.n	80122bc <LL_TIM_OC_SetMode+0x5c>
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801229a:	d00d      	beq.n	80122b8 <LL_TIM_OC_SetMode+0x58>
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80122a2:	d007      	beq.n	80122b4 <LL_TIM_OC_SetMode+0x54>
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80122aa:	d101      	bne.n	80122b0 <LL_TIM_OC_SetMode+0x50>
 80122ac:	2308      	movs	r3, #8
 80122ae:	e010      	b.n	80122d2 <LL_TIM_OC_SetMode+0x72>
 80122b0:	2309      	movs	r3, #9
 80122b2:	e00e      	b.n	80122d2 <LL_TIM_OC_SetMode+0x72>
 80122b4:	2307      	movs	r3, #7
 80122b6:	e00c      	b.n	80122d2 <LL_TIM_OC_SetMode+0x72>
 80122b8:	2306      	movs	r3, #6
 80122ba:	e00a      	b.n	80122d2 <LL_TIM_OC_SetMode+0x72>
 80122bc:	2305      	movs	r3, #5
 80122be:	e008      	b.n	80122d2 <LL_TIM_OC_SetMode+0x72>
 80122c0:	2304      	movs	r3, #4
 80122c2:	e006      	b.n	80122d2 <LL_TIM_OC_SetMode+0x72>
 80122c4:	2303      	movs	r3, #3
 80122c6:	e004      	b.n	80122d2 <LL_TIM_OC_SetMode+0x72>
 80122c8:	2302      	movs	r3, #2
 80122ca:	e002      	b.n	80122d2 <LL_TIM_OC_SetMode+0x72>
 80122cc:	2301      	movs	r3, #1
 80122ce:	e000      	b.n	80122d2 <LL_TIM_OC_SetMode+0x72>
 80122d0:	2300      	movs	r3, #0
 80122d2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	3318      	adds	r3, #24
 80122d8:	4619      	mov	r1, r3
 80122da:	7dfb      	ldrb	r3, [r7, #23]
 80122dc:	4a0e      	ldr	r2, [pc, #56]	@ (8012318 <LL_TIM_OC_SetMode+0xb8>)
 80122de:	5cd3      	ldrb	r3, [r2, r3]
 80122e0:	440b      	add	r3, r1
 80122e2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80122e4:	693b      	ldr	r3, [r7, #16]
 80122e6:	681a      	ldr	r2, [r3, #0]
 80122e8:	7dfb      	ldrb	r3, [r7, #23]
 80122ea:	490c      	ldr	r1, [pc, #48]	@ (801231c <LL_TIM_OC_SetMode+0xbc>)
 80122ec:	5ccb      	ldrb	r3, [r1, r3]
 80122ee:	4619      	mov	r1, r3
 80122f0:	4b0b      	ldr	r3, [pc, #44]	@ (8012320 <LL_TIM_OC_SetMode+0xc0>)
 80122f2:	408b      	lsls	r3, r1
 80122f4:	43db      	mvns	r3, r3
 80122f6:	401a      	ands	r2, r3
 80122f8:	7dfb      	ldrb	r3, [r7, #23]
 80122fa:	4908      	ldr	r1, [pc, #32]	@ (801231c <LL_TIM_OC_SetMode+0xbc>)
 80122fc:	5ccb      	ldrb	r3, [r1, r3]
 80122fe:	4619      	mov	r1, r3
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	408b      	lsls	r3, r1
 8012304:	431a      	orrs	r2, r3
 8012306:	693b      	ldr	r3, [r7, #16]
 8012308:	601a      	str	r2, [r3, #0]
}
 801230a:	bf00      	nop
 801230c:	371c      	adds	r7, #28
 801230e:	46bd      	mov	sp, r7
 8012310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012314:	4770      	bx	lr
 8012316:	bf00      	nop
 8012318:	0801c200 	.word	0x0801c200
 801231c:	0801c20c 	.word	0x0801c20c
 8012320:	00010073 	.word	0x00010073

08012324 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8012324:	b480      	push	{r7}
 8012326:	b087      	sub	sp, #28
 8012328:	af00      	add	r7, sp, #0
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	60b9      	str	r1, [r7, #8]
 801232e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	2b01      	cmp	r3, #1
 8012334:	d02e      	beq.n	8012394 <LL_TIM_OC_SetPolarity+0x70>
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	2b04      	cmp	r3, #4
 801233a:	d029      	beq.n	8012390 <LL_TIM_OC_SetPolarity+0x6c>
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	2b10      	cmp	r3, #16
 8012340:	d024      	beq.n	801238c <LL_TIM_OC_SetPolarity+0x68>
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	2b40      	cmp	r3, #64	@ 0x40
 8012346:	d01f      	beq.n	8012388 <LL_TIM_OC_SetPolarity+0x64>
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801234e:	d019      	beq.n	8012384 <LL_TIM_OC_SetPolarity+0x60>
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012356:	d013      	beq.n	8012380 <LL_TIM_OC_SetPolarity+0x5c>
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801235e:	d00d      	beq.n	801237c <LL_TIM_OC_SetPolarity+0x58>
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012366:	d007      	beq.n	8012378 <LL_TIM_OC_SetPolarity+0x54>
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801236e:	d101      	bne.n	8012374 <LL_TIM_OC_SetPolarity+0x50>
 8012370:	2308      	movs	r3, #8
 8012372:	e010      	b.n	8012396 <LL_TIM_OC_SetPolarity+0x72>
 8012374:	2309      	movs	r3, #9
 8012376:	e00e      	b.n	8012396 <LL_TIM_OC_SetPolarity+0x72>
 8012378:	2307      	movs	r3, #7
 801237a:	e00c      	b.n	8012396 <LL_TIM_OC_SetPolarity+0x72>
 801237c:	2306      	movs	r3, #6
 801237e:	e00a      	b.n	8012396 <LL_TIM_OC_SetPolarity+0x72>
 8012380:	2305      	movs	r3, #5
 8012382:	e008      	b.n	8012396 <LL_TIM_OC_SetPolarity+0x72>
 8012384:	2304      	movs	r3, #4
 8012386:	e006      	b.n	8012396 <LL_TIM_OC_SetPolarity+0x72>
 8012388:	2303      	movs	r3, #3
 801238a:	e004      	b.n	8012396 <LL_TIM_OC_SetPolarity+0x72>
 801238c:	2302      	movs	r3, #2
 801238e:	e002      	b.n	8012396 <LL_TIM_OC_SetPolarity+0x72>
 8012390:	2301      	movs	r3, #1
 8012392:	e000      	b.n	8012396 <LL_TIM_OC_SetPolarity+0x72>
 8012394:	2300      	movs	r3, #0
 8012396:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	6a1a      	ldr	r2, [r3, #32]
 801239c:	7dfb      	ldrb	r3, [r7, #23]
 801239e:	490b      	ldr	r1, [pc, #44]	@ (80123cc <LL_TIM_OC_SetPolarity+0xa8>)
 80123a0:	5ccb      	ldrb	r3, [r1, r3]
 80123a2:	4619      	mov	r1, r3
 80123a4:	2302      	movs	r3, #2
 80123a6:	408b      	lsls	r3, r1
 80123a8:	43db      	mvns	r3, r3
 80123aa:	401a      	ands	r2, r3
 80123ac:	7dfb      	ldrb	r3, [r7, #23]
 80123ae:	4907      	ldr	r1, [pc, #28]	@ (80123cc <LL_TIM_OC_SetPolarity+0xa8>)
 80123b0:	5ccb      	ldrb	r3, [r1, r3]
 80123b2:	4619      	mov	r1, r3
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	408b      	lsls	r3, r1
 80123b8:	431a      	orrs	r2, r3
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	621a      	str	r2, [r3, #32]
}
 80123be:	bf00      	nop
 80123c0:	371c      	adds	r7, #28
 80123c2:	46bd      	mov	sp, r7
 80123c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c8:	4770      	bx	lr
 80123ca:	bf00      	nop
 80123cc:	0801c218 	.word	0x0801c218

080123d0 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80123d0:	b480      	push	{r7}
 80123d2:	b083      	sub	sp, #12
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	683a      	ldr	r2, [r7, #0]
 80123de:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80123e0:	bf00      	nop
 80123e2:	370c      	adds	r7, #12
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80123ec:	b480      	push	{r7}
 80123ee:	b083      	sub	sp, #12
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	683a      	ldr	r2, [r7, #0]
 80123fa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80123fc:	bf00      	nop
 80123fe:	370c      	adds	r7, #12
 8012400:	46bd      	mov	sp, r7
 8012402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012406:	4770      	bx	lr

08012408 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8012408:	b480      	push	{r7}
 801240a:	b083      	sub	sp, #12
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	683a      	ldr	r2, [r7, #0]
 8012416:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8012418:	bf00      	nop
 801241a:	370c      	adds	r7, #12
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr

08012424 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8012424:	b480      	push	{r7}
 8012426:	b083      	sub	sp, #12
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	683a      	ldr	r2, [r7, #0]
 8012432:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8012434:	bf00      	nop
 8012436:	370c      	adds	r7, #12
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr

08012440 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8012440:	b480      	push	{r7}
 8012442:	b083      	sub	sp, #12
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f06f 0202 	mvn.w	r2, #2
 801244e:	611a      	str	r2, [r3, #16]
}
 8012450:	bf00      	nop
 8012452:	370c      	adds	r7, #12
 8012454:	46bd      	mov	sp, r7
 8012456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245a:	4770      	bx	lr

0801245c <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 801245c:	b480      	push	{r7}
 801245e:	b083      	sub	sp, #12
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	691b      	ldr	r3, [r3, #16]
 8012468:	f003 0302 	and.w	r3, r3, #2
 801246c:	2b02      	cmp	r3, #2
 801246e:	d101      	bne.n	8012474 <LL_TIM_IsActiveFlag_CC1+0x18>
 8012470:	2301      	movs	r3, #1
 8012472:	e000      	b.n	8012476 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8012474:	2300      	movs	r3, #0
}
 8012476:	4618      	mov	r0, r3
 8012478:	370c      	adds	r7, #12
 801247a:	46bd      	mov	sp, r7
 801247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012480:	4770      	bx	lr

08012482 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8012482:	b480      	push	{r7}
 8012484:	b083      	sub	sp, #12
 8012486:	af00      	add	r7, sp, #0
 8012488:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f06f 0204 	mvn.w	r2, #4
 8012490:	611a      	str	r2, [r3, #16]
}
 8012492:	bf00      	nop
 8012494:	370c      	adds	r7, #12
 8012496:	46bd      	mov	sp, r7
 8012498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249c:	4770      	bx	lr

0801249e <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 801249e:	b480      	push	{r7}
 80124a0:	b083      	sub	sp, #12
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	691b      	ldr	r3, [r3, #16]
 80124aa:	f003 0304 	and.w	r3, r3, #4
 80124ae:	2b04      	cmp	r3, #4
 80124b0:	d101      	bne.n	80124b6 <LL_TIM_IsActiveFlag_CC2+0x18>
 80124b2:	2301      	movs	r3, #1
 80124b4:	e000      	b.n	80124b8 <LL_TIM_IsActiveFlag_CC2+0x1a>
 80124b6:	2300      	movs	r3, #0
}
 80124b8:	4618      	mov	r0, r3
 80124ba:	370c      	adds	r7, #12
 80124bc:	46bd      	mov	sp, r7
 80124be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c2:	4770      	bx	lr

080124c4 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 80124c4:	b480      	push	{r7}
 80124c6:	b083      	sub	sp, #12
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f06f 0208 	mvn.w	r2, #8
 80124d2:	611a      	str	r2, [r3, #16]
}
 80124d4:	bf00      	nop
 80124d6:	370c      	adds	r7, #12
 80124d8:	46bd      	mov	sp, r7
 80124da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124de:	4770      	bx	lr

080124e0 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 80124e0:	b480      	push	{r7}
 80124e2:	b083      	sub	sp, #12
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	691b      	ldr	r3, [r3, #16]
 80124ec:	f003 0308 	and.w	r3, r3, #8
 80124f0:	2b08      	cmp	r3, #8
 80124f2:	d101      	bne.n	80124f8 <LL_TIM_IsActiveFlag_CC3+0x18>
 80124f4:	2301      	movs	r3, #1
 80124f6:	e000      	b.n	80124fa <LL_TIM_IsActiveFlag_CC3+0x1a>
 80124f8:	2300      	movs	r3, #0
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	370c      	adds	r7, #12
 80124fe:	46bd      	mov	sp, r7
 8012500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012504:	4770      	bx	lr

08012506 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 8012506:	b480      	push	{r7}
 8012508:	b083      	sub	sp, #12
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f06f 0210 	mvn.w	r2, #16
 8012514:	611a      	str	r2, [r3, #16]
}
 8012516:	bf00      	nop
 8012518:	370c      	adds	r7, #12
 801251a:	46bd      	mov	sp, r7
 801251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012520:	4770      	bx	lr

08012522 <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 8012522:	b480      	push	{r7}
 8012524:	b083      	sub	sp, #12
 8012526:	af00      	add	r7, sp, #0
 8012528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	691b      	ldr	r3, [r3, #16]
 801252e:	f003 0310 	and.w	r3, r3, #16
 8012532:	2b10      	cmp	r3, #16
 8012534:	d101      	bne.n	801253a <LL_TIM_IsActiveFlag_CC4+0x18>
 8012536:	2301      	movs	r3, #1
 8012538:	e000      	b.n	801253c <LL_TIM_IsActiveFlag_CC4+0x1a>
 801253a:	2300      	movs	r3, #0
}
 801253c:	4618      	mov	r0, r3
 801253e:	370c      	adds	r7, #12
 8012540:	46bd      	mov	sp, r7
 8012542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012546:	4770      	bx	lr

08012548 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8012548:	b598      	push	{r3, r4, r7, lr}
 801254a:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 801254c:	4b3d      	ldr	r3, [pc, #244]	@ (8012644 <USBPD_TIM_Init+0xfc>)
 801254e:	f993 3000 	ldrsb.w	r3, [r3]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d16a      	bne.n	801262c <USBPD_TIM_Init+0xe4>
  {
    TIMX_CLK_ENABLE;
 8012556:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801255a:	f7ff fe09 	bl	8012170 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 801255e:	2100      	movs	r1, #0
 8012560:	4839      	ldr	r0, [pc, #228]	@ (8012648 <USBPD_TIM_Init+0x100>)
 8012562:	f7ff fe41 	bl	80121e8 <LL_TIM_SetCounterMode>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(TIMX_CLK_FREQ, LL_TIM_GetPrescaler(TIMX), 100u));
#else
    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 8012566:	4b39      	ldr	r3, [pc, #228]	@ (801264c <USBPD_TIM_Init+0x104>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	4a39      	ldr	r2, [pc, #228]	@ (8012650 <USBPD_TIM_Init+0x108>)
 801256c:	4293      	cmp	r3, r2
 801256e:	d90b      	bls.n	8012588 <USBPD_TIM_Init+0x40>
 8012570:	4b36      	ldr	r3, [pc, #216]	@ (801264c <USBPD_TIM_Init+0x104>)
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	f503 23f4 	add.w	r3, r3, #499712	@ 0x7a000
 8012578:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801257c:	4a35      	ldr	r2, [pc, #212]	@ (8012654 <USBPD_TIM_Init+0x10c>)
 801257e:	fba2 2303 	umull	r2, r3, r2, r3
 8012582:	0c9b      	lsrs	r3, r3, #18
 8012584:	3b01      	subs	r3, #1
 8012586:	e000      	b.n	801258a <USBPD_TIM_Init+0x42>
 8012588:	2300      	movs	r3, #0
 801258a:	4619      	mov	r1, r3
 801258c:	482e      	ldr	r0, [pc, #184]	@ (8012648 <USBPD_TIM_Init+0x100>)
 801258e:	f7ff fe3e 	bl	801220e <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8012592:	4b2e      	ldr	r3, [pc, #184]	@ (801264c <USBPD_TIM_Init+0x104>)
 8012594:	681c      	ldr	r4, [r3, #0]
 8012596:	482c      	ldr	r0, [pc, #176]	@ (8012648 <USBPD_TIM_Init+0x100>)
 8012598:	f7ff fe47 	bl	801222a <LL_TIM_GetPrescaler>
 801259c:	4603      	mov	r3, r0
 801259e:	3301      	adds	r3, #1
 80125a0:	fbb4 f3f3 	udiv	r3, r4, r3
 80125a4:	2b63      	cmp	r3, #99	@ 0x63
 80125a6:	d90d      	bls.n	80125c4 <USBPD_TIM_Init+0x7c>
 80125a8:	4b28      	ldr	r3, [pc, #160]	@ (801264c <USBPD_TIM_Init+0x104>)
 80125aa:	681c      	ldr	r4, [r3, #0]
 80125ac:	4826      	ldr	r0, [pc, #152]	@ (8012648 <USBPD_TIM_Init+0x100>)
 80125ae:	f7ff fe3c 	bl	801222a <LL_TIM_GetPrescaler>
 80125b2:	4603      	mov	r3, r0
 80125b4:	3301      	adds	r3, #1
 80125b6:	2264      	movs	r2, #100	@ 0x64
 80125b8:	fb02 f303 	mul.w	r3, r2, r3
 80125bc:	fbb4 f3f3 	udiv	r3, r4, r3
 80125c0:	3b01      	subs	r3, #1
 80125c2:	e000      	b.n	80125c6 <USBPD_TIM_Init+0x7e>
 80125c4:	2300      	movs	r3, #0
 80125c6:	4619      	mov	r1, r3
 80125c8:	481f      	ldr	r0, [pc, #124]	@ (8012648 <USBPD_TIM_Init+0x100>)
 80125ca:	f7ff fe3a 	bl	8012242 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 80125ce:	2230      	movs	r2, #48	@ 0x30
 80125d0:	2101      	movs	r1, #1
 80125d2:	481d      	ldr	r0, [pc, #116]	@ (8012648 <USBPD_TIM_Init+0x100>)
 80125d4:	f7ff fe44 	bl	8012260 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 80125d8:	2230      	movs	r2, #48	@ 0x30
 80125da:	2110      	movs	r1, #16
 80125dc:	481a      	ldr	r0, [pc, #104]	@ (8012648 <USBPD_TIM_Init+0x100>)
 80125de:	f7ff fe3f 	bl	8012260 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 80125e2:	2230      	movs	r2, #48	@ 0x30
 80125e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80125e8:	4817      	ldr	r0, [pc, #92]	@ (8012648 <USBPD_TIM_Init+0x100>)
 80125ea:	f7ff fe39 	bl	8012260 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 80125ee:	2230      	movs	r2, #48	@ 0x30
 80125f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80125f4:	4814      	ldr	r0, [pc, #80]	@ (8012648 <USBPD_TIM_Init+0x100>)
 80125f6:	f7ff fe33 	bl	8012260 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 80125fa:	2200      	movs	r2, #0
 80125fc:	2101      	movs	r1, #1
 80125fe:	4812      	ldr	r0, [pc, #72]	@ (8012648 <USBPD_TIM_Init+0x100>)
 8012600:	f7ff fe90 	bl	8012324 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8012604:	2200      	movs	r2, #0
 8012606:	2110      	movs	r1, #16
 8012608:	480f      	ldr	r0, [pc, #60]	@ (8012648 <USBPD_TIM_Init+0x100>)
 801260a:	f7ff fe8b 	bl	8012324 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 801260e:	2200      	movs	r2, #0
 8012610:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012614:	480c      	ldr	r0, [pc, #48]	@ (8012648 <USBPD_TIM_Init+0x100>)
 8012616:	f7ff fe85 	bl	8012324 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 801261a:	2200      	movs	r2, #0
 801261c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8012620:	4809      	ldr	r0, [pc, #36]	@ (8012648 <USBPD_TIM_Init+0x100>)
 8012622:	f7ff fe7f 	bl	8012324 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 8012626:	4808      	ldr	r0, [pc, #32]	@ (8012648 <USBPD_TIM_Init+0x100>)
 8012628:	f7ff fdce 	bl	80121c8 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 801262c:	4b05      	ldr	r3, [pc, #20]	@ (8012644 <USBPD_TIM_Init+0xfc>)
 801262e:	f993 3000 	ldrsb.w	r3, [r3]
 8012632:	b2db      	uxtb	r3, r3
 8012634:	3301      	adds	r3, #1
 8012636:	b2db      	uxtb	r3, r3
 8012638:	b25a      	sxtb	r2, r3
 801263a:	4b02      	ldr	r3, [pc, #8]	@ (8012644 <USBPD_TIM_Init+0xfc>)
 801263c:	701a      	strb	r2, [r3, #0]
}
 801263e:	bf00      	nop
 8012640:	bd98      	pop	{r3, r4, r7, pc}
 8012642:	bf00      	nop
 8012644:	200035dc 	.word	0x200035dc
 8012648:	40012c00 	.word	0x40012c00
 801264c:	20000004 	.word	0x20000004
 8012650:	000f423f 	.word	0x000f423f
 8012654:	431bde83 	.word	0x431bde83

08012658 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	af00      	add	r7, sp, #0
  timer_initcounter--;
 801265c:	4b09      	ldr	r3, [pc, #36]	@ (8012684 <USBPD_TIM_DeInit+0x2c>)
 801265e:	f993 3000 	ldrsb.w	r3, [r3]
 8012662:	b2db      	uxtb	r3, r3
 8012664:	3b01      	subs	r3, #1
 8012666:	b2db      	uxtb	r3, r3
 8012668:	b25a      	sxtb	r2, r3
 801266a:	4b06      	ldr	r3, [pc, #24]	@ (8012684 <USBPD_TIM_DeInit+0x2c>)
 801266c:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 801266e:	4b05      	ldr	r3, [pc, #20]	@ (8012684 <USBPD_TIM_DeInit+0x2c>)
 8012670:	f993 3000 	ldrsb.w	r3, [r3]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d103      	bne.n	8012680 <USBPD_TIM_DeInit+0x28>
  {
    TIMX_CLK_DISABLE;
 8012678:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801267c:	f7ff fd90 	bl	80121a0 <LL_APB2_GRP1_DisableClock>
  }
}
 8012680:	bf00      	nop
 8012682:	bd80      	pop	{r7, pc}
 8012684:	200035dc 	.word	0x200035dc

08012688 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b082      	sub	sp, #8
 801268c:	af00      	add	r7, sp, #0
 801268e:	4603      	mov	r3, r0
 8012690:	6039      	str	r1, [r7, #0]
 8012692:	71fb      	strb	r3, [r7, #7]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8012694:	79fb      	ldrb	r3, [r7, #7]
 8012696:	2b03      	cmp	r3, #3
 8012698:	d85e      	bhi.n	8012758 <USBPD_TIM_Start+0xd0>
 801269a:	a201      	add	r2, pc, #4	@ (adr r2, 80126a0 <USBPD_TIM_Start+0x18>)
 801269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126a0:	080126b1 	.word	0x080126b1
 80126a4:	080126db 	.word	0x080126db
 80126a8:	08012705 	.word	0x08012705
 80126ac:	0801272f 	.word	0x0801272f
  {
    case TIM_PORT0_CRC:
      TIMX_CHANNEL1_SETEVENT;
 80126b0:	4b2c      	ldr	r3, [pc, #176]	@ (8012764 <USBPD_TIM_Start+0xdc>)
 80126b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	441a      	add	r2, r3
 80126b8:	4b2b      	ldr	r3, [pc, #172]	@ (8012768 <USBPD_TIM_Start+0xe0>)
 80126ba:	fba3 1302 	umull	r1, r3, r3, r2
 80126be:	0b5b      	lsrs	r3, r3, #13
 80126c0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80126c4:	fb01 f303 	mul.w	r3, r1, r3
 80126c8:	1ad3      	subs	r3, r2, r3
 80126ca:	4619      	mov	r1, r3
 80126cc:	4825      	ldr	r0, [pc, #148]	@ (8012764 <USBPD_TIM_Start+0xdc>)
 80126ce:	f7ff fe7f 	bl	80123d0 <LL_TIM_OC_SetCompareCH1>
 80126d2:	4824      	ldr	r0, [pc, #144]	@ (8012764 <USBPD_TIM_Start+0xdc>)
 80126d4:	f7ff feb4 	bl	8012440 <LL_TIM_ClearFlag_CC1>
      break;
 80126d8:	e03f      	b.n	801275a <USBPD_TIM_Start+0xd2>
    case TIM_PORT0_RETRY:
      TIMX_CHANNEL2_SETEVENT;
 80126da:	4b22      	ldr	r3, [pc, #136]	@ (8012764 <USBPD_TIM_Start+0xdc>)
 80126dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	441a      	add	r2, r3
 80126e2:	4b21      	ldr	r3, [pc, #132]	@ (8012768 <USBPD_TIM_Start+0xe0>)
 80126e4:	fba3 1302 	umull	r1, r3, r3, r2
 80126e8:	0b5b      	lsrs	r3, r3, #13
 80126ea:	f242 7110 	movw	r1, #10000	@ 0x2710
 80126ee:	fb01 f303 	mul.w	r3, r1, r3
 80126f2:	1ad3      	subs	r3, r2, r3
 80126f4:	4619      	mov	r1, r3
 80126f6:	481b      	ldr	r0, [pc, #108]	@ (8012764 <USBPD_TIM_Start+0xdc>)
 80126f8:	f7ff fe78 	bl	80123ec <LL_TIM_OC_SetCompareCH2>
 80126fc:	4819      	ldr	r0, [pc, #100]	@ (8012764 <USBPD_TIM_Start+0xdc>)
 80126fe:	f7ff fec0 	bl	8012482 <LL_TIM_ClearFlag_CC2>
      break;
 8012702:	e02a      	b.n	801275a <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_CRC:
      TIMX_CHANNEL3_SETEVENT;
 8012704:	4b17      	ldr	r3, [pc, #92]	@ (8012764 <USBPD_TIM_Start+0xdc>)
 8012706:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	441a      	add	r2, r3
 801270c:	4b16      	ldr	r3, [pc, #88]	@ (8012768 <USBPD_TIM_Start+0xe0>)
 801270e:	fba3 1302 	umull	r1, r3, r3, r2
 8012712:	0b5b      	lsrs	r3, r3, #13
 8012714:	f242 7110 	movw	r1, #10000	@ 0x2710
 8012718:	fb01 f303 	mul.w	r3, r1, r3
 801271c:	1ad3      	subs	r3, r2, r3
 801271e:	4619      	mov	r1, r3
 8012720:	4810      	ldr	r0, [pc, #64]	@ (8012764 <USBPD_TIM_Start+0xdc>)
 8012722:	f7ff fe71 	bl	8012408 <LL_TIM_OC_SetCompareCH3>
 8012726:	480f      	ldr	r0, [pc, #60]	@ (8012764 <USBPD_TIM_Start+0xdc>)
 8012728:	f7ff fecc 	bl	80124c4 <LL_TIM_ClearFlag_CC3>
      break;
 801272c:	e015      	b.n	801275a <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
 801272e:	4b0d      	ldr	r3, [pc, #52]	@ (8012764 <USBPD_TIM_Start+0xdc>)
 8012730:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	441a      	add	r2, r3
 8012736:	4b0c      	ldr	r3, [pc, #48]	@ (8012768 <USBPD_TIM_Start+0xe0>)
 8012738:	fba3 1302 	umull	r1, r3, r3, r2
 801273c:	0b5b      	lsrs	r3, r3, #13
 801273e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8012742:	fb01 f303 	mul.w	r3, r1, r3
 8012746:	1ad3      	subs	r3, r2, r3
 8012748:	4619      	mov	r1, r3
 801274a:	4806      	ldr	r0, [pc, #24]	@ (8012764 <USBPD_TIM_Start+0xdc>)
 801274c:	f7ff fe6a 	bl	8012424 <LL_TIM_OC_SetCompareCH4>
 8012750:	4804      	ldr	r0, [pc, #16]	@ (8012764 <USBPD_TIM_Start+0xdc>)
 8012752:	f7ff fed8 	bl	8012506 <LL_TIM_ClearFlag_CC4>
      break;
 8012756:	e000      	b.n	801275a <USBPD_TIM_Start+0xd2>
    default:
      break;
 8012758:	bf00      	nop
  }
}
 801275a:	bf00      	nop
 801275c:	3708      	adds	r7, #8
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
 8012762:	bf00      	nop
 8012764:	40012c00 	.word	0x40012c00
 8012768:	d1b71759 	.word	0xd1b71759

0801276c <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b084      	sub	sp, #16
 8012770:	af00      	add	r7, sp, #0
 8012772:	4603      	mov	r3, r0
 8012774:	71fb      	strb	r3, [r7, #7]
  uint32_t _expired = 1u;
 8012776:	2301      	movs	r3, #1
 8012778:	60fb      	str	r3, [r7, #12]
  switch (Id)
 801277a:	79fb      	ldrb	r3, [r7, #7]
 801277c:	2b03      	cmp	r3, #3
 801277e:	d81f      	bhi.n	80127c0 <USBPD_TIM_IsExpired+0x54>
 8012780:	a201      	add	r2, pc, #4	@ (adr r2, 8012788 <USBPD_TIM_IsExpired+0x1c>)
 8012782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012786:	bf00      	nop
 8012788:	08012799 	.word	0x08012799
 801278c:	080127a3 	.word	0x080127a3
 8012790:	080127ad 	.word	0x080127ad
 8012794:	080127b7 	.word	0x080127b7
  {
    case TIM_PORT0_CRC:
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8012798:	480c      	ldr	r0, [pc, #48]	@ (80127cc <USBPD_TIM_IsExpired+0x60>)
 801279a:	f7ff fe5f 	bl	801245c <LL_TIM_IsActiveFlag_CC1>
 801279e:	60f8      	str	r0, [r7, #12]
      break;
 80127a0:	e00f      	b.n	80127c2 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT0_RETRY:
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 80127a2:	480a      	ldr	r0, [pc, #40]	@ (80127cc <USBPD_TIM_IsExpired+0x60>)
 80127a4:	f7ff fe7b 	bl	801249e <LL_TIM_IsActiveFlag_CC2>
 80127a8:	60f8      	str	r0, [r7, #12]
      break;
 80127aa:	e00a      	b.n	80127c2 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_CRC:
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 80127ac:	4807      	ldr	r0, [pc, #28]	@ (80127cc <USBPD_TIM_IsExpired+0x60>)
 80127ae:	f7ff fe97 	bl	80124e0 <LL_TIM_IsActiveFlag_CC3>
 80127b2:	60f8      	str	r0, [r7, #12]
      break;
 80127b4:	e005      	b.n	80127c2 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 80127b6:	4805      	ldr	r0, [pc, #20]	@ (80127cc <USBPD_TIM_IsExpired+0x60>)
 80127b8:	f7ff feb3 	bl	8012522 <LL_TIM_IsActiveFlag_CC4>
 80127bc:	60f8      	str	r0, [r7, #12]
      break;
 80127be:	e000      	b.n	80127c2 <USBPD_TIM_IsExpired+0x56>
    default:
      break;
 80127c0:	bf00      	nop
  }
  return _expired;
 80127c2:	68fb      	ldr	r3, [r7, #12]
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	3710      	adds	r7, #16
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}
 80127cc:	40012c00 	.word	0x40012c00

080127d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80127d0:	b480      	push	{r7}
 80127d2:	b085      	sub	sp, #20
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	4603      	mov	r3, r0
 80127d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80127da:	2300      	movs	r3, #0
 80127dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80127de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127e2:	2b84      	cmp	r3, #132	@ 0x84
 80127e4:	d005      	beq.n	80127f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80127e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	4413      	add	r3, r2
 80127ee:	3303      	adds	r3, #3
 80127f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80127f2:	68fb      	ldr	r3, [r7, #12]
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3714      	adds	r7, #20
 80127f8:	46bd      	mov	sp, r7
 80127fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fe:	4770      	bx	lr

08012800 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012800:	b480      	push	{r7}
 8012802:	b083      	sub	sp, #12
 8012804:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012806:	f3ef 8305 	mrs	r3, IPSR
 801280a:	607b      	str	r3, [r7, #4]
  return(result);
 801280c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801280e:	2b00      	cmp	r3, #0
 8012810:	bf14      	ite	ne
 8012812:	2301      	movne	r3, #1
 8012814:	2300      	moveq	r3, #0
 8012816:	b2db      	uxtb	r3, r3
}
 8012818:	4618      	mov	r0, r3
 801281a:	370c      	adds	r7, #12
 801281c:	46bd      	mov	sp, r7
 801281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012822:	4770      	bx	lr

08012824 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012828:	f001 fadc 	bl	8013de4 <vTaskStartScheduler>
  
  return osOK;
 801282c:	2300      	movs	r3, #0
}
 801282e:	4618      	mov	r0, r3
 8012830:	bd80      	pop	{r7, pc}

08012832 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012832:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012834:	b087      	sub	sp, #28
 8012836:	af02      	add	r7, sp, #8
 8012838:	6078      	str	r0, [r7, #4]
 801283a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	685c      	ldr	r4, [r3, #4]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012848:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012850:	4618      	mov	r0, r3
 8012852:	f7ff ffbd 	bl	80127d0 <makeFreeRtosPriority>
 8012856:	4602      	mov	r2, r0
 8012858:	f107 030c 	add.w	r3, r7, #12
 801285c:	9301      	str	r3, [sp, #4]
 801285e:	9200      	str	r2, [sp, #0]
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	4632      	mov	r2, r6
 8012864:	4629      	mov	r1, r5
 8012866:	4620      	mov	r0, r4
 8012868:	f001 f834 	bl	80138d4 <xTaskCreate>
 801286c:	4603      	mov	r3, r0
 801286e:	2b01      	cmp	r3, #1
 8012870:	d001      	beq.n	8012876 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8012872:	2300      	movs	r3, #0
 8012874:	e000      	b.n	8012878 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8012876:	68fb      	ldr	r3, [r7, #12]
}
 8012878:	4618      	mov	r0, r3
 801287a:	3714      	adds	r7, #20
 801287c:	46bd      	mov	sp, r7
 801287e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012880 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f001 f97d 	bl	8013b88 <vTaskDelete>
  return osOK;
 801288e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8012890:	4618      	mov	r0, r3
 8012892:	3708      	adds	r7, #8
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b084      	sub	sp, #16
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d001      	beq.n	80128ae <osDelay+0x16>
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	e000      	b.n	80128b0 <osDelay+0x18>
 80128ae:	2301      	movs	r3, #1
 80128b0:	4618      	mov	r0, r3
 80128b2:	f001 f9f9 	bl	8013ca8 <vTaskDelay>
  
  return osOK;
 80128b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3710      	adds	r7, #16
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}

080128c0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b082      	sub	sp, #8
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6818      	ldr	r0, [r3, #0]
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	685b      	ldr	r3, [r3, #4]
 80128d2:	2200      	movs	r2, #0
 80128d4:	4619      	mov	r1, r3
 80128d6:	f000 f9d7 	bl	8012c88 <xQueueGenericCreate>
 80128da:	4603      	mov	r3, r0
#endif
}
 80128dc:	4618      	mov	r0, r3
 80128de:	3708      	adds	r7, #8
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}

080128e4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b086      	sub	sp, #24
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	60f8      	str	r0, [r7, #12]
 80128ec:	60b9      	str	r1, [r7, #8]
 80128ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80128f0:	2300      	movs	r3, #0
 80128f2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d101      	bne.n	8012902 <osMessagePut+0x1e>
    ticks = 1;
 80128fe:	2301      	movs	r3, #1
 8012900:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012902:	f7ff ff7d 	bl	8012800 <inHandlerMode>
 8012906:	4603      	mov	r3, r0
 8012908:	2b00      	cmp	r3, #0
 801290a:	d018      	beq.n	801293e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801290c:	f107 0210 	add.w	r2, r7, #16
 8012910:	f107 0108 	add.w	r1, r7, #8
 8012914:	2300      	movs	r3, #0
 8012916:	68f8      	ldr	r0, [r7, #12]
 8012918:	f000 fb12 	bl	8012f40 <xQueueGenericSendFromISR>
 801291c:	4603      	mov	r3, r0
 801291e:	2b01      	cmp	r3, #1
 8012920:	d001      	beq.n	8012926 <osMessagePut+0x42>
      return osErrorOS;
 8012922:	23ff      	movs	r3, #255	@ 0xff
 8012924:	e018      	b.n	8012958 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012926:	693b      	ldr	r3, [r7, #16]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d014      	beq.n	8012956 <osMessagePut+0x72>
 801292c:	4b0c      	ldr	r3, [pc, #48]	@ (8012960 <osMessagePut+0x7c>)
 801292e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012932:	601a      	str	r2, [r3, #0]
 8012934:	f3bf 8f4f 	dsb	sy
 8012938:	f3bf 8f6f 	isb	sy
 801293c:	e00b      	b.n	8012956 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801293e:	f107 0108 	add.w	r1, r7, #8
 8012942:	2300      	movs	r3, #0
 8012944:	697a      	ldr	r2, [r7, #20]
 8012946:	68f8      	ldr	r0, [r7, #12]
 8012948:	f000 f9f8 	bl	8012d3c <xQueueGenericSend>
 801294c:	4603      	mov	r3, r0
 801294e:	2b01      	cmp	r3, #1
 8012950:	d001      	beq.n	8012956 <osMessagePut+0x72>
      return osErrorOS;
 8012952:	23ff      	movs	r3, #255	@ 0xff
 8012954:	e000      	b.n	8012958 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8012956:	2300      	movs	r3, #0
}
 8012958:	4618      	mov	r0, r3
 801295a:	3718      	adds	r7, #24
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}
 8012960:	e000ed04 	.word	0xe000ed04

08012964 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012964:	b590      	push	{r4, r7, lr}
 8012966:	b08b      	sub	sp, #44	@ 0x2c
 8012968:	af00      	add	r7, sp, #0
 801296a:	60f8      	str	r0, [r7, #12]
 801296c:	60b9      	str	r1, [r7, #8]
 801296e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012970:	68bb      	ldr	r3, [r7, #8]
 8012972:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8012974:	2300      	movs	r3, #0
 8012976:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d10a      	bne.n	8012994 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801297e:	2380      	movs	r3, #128	@ 0x80
 8012980:	617b      	str	r3, [r7, #20]
    return event;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	461c      	mov	r4, r3
 8012986:	f107 0314 	add.w	r3, r7, #20
 801298a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801298e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012992:	e054      	b.n	8012a3e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012994:	2300      	movs	r3, #0
 8012996:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012998:	2300      	movs	r3, #0
 801299a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80129a2:	d103      	bne.n	80129ac <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80129a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80129a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80129aa:	e009      	b.n	80129c0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d006      	beq.n	80129c0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80129b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d101      	bne.n	80129c0 <osMessageGet+0x5c>
      ticks = 1;
 80129bc:	2301      	movs	r3, #1
 80129be:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80129c0:	f7ff ff1e 	bl	8012800 <inHandlerMode>
 80129c4:	4603      	mov	r3, r0
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d01c      	beq.n	8012a04 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80129ca:	f107 0220 	add.w	r2, r7, #32
 80129ce:	f107 0314 	add.w	r3, r7, #20
 80129d2:	3304      	adds	r3, #4
 80129d4:	4619      	mov	r1, r3
 80129d6:	68b8      	ldr	r0, [r7, #8]
 80129d8:	f000 fdd2 	bl	8013580 <xQueueReceiveFromISR>
 80129dc:	4603      	mov	r3, r0
 80129de:	2b01      	cmp	r3, #1
 80129e0:	d102      	bne.n	80129e8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80129e2:	2310      	movs	r3, #16
 80129e4:	617b      	str	r3, [r7, #20]
 80129e6:	e001      	b.n	80129ec <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80129e8:	2300      	movs	r3, #0
 80129ea:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80129ec:	6a3b      	ldr	r3, [r7, #32]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d01d      	beq.n	8012a2e <osMessageGet+0xca>
 80129f2:	4b15      	ldr	r3, [pc, #84]	@ (8012a48 <osMessageGet+0xe4>)
 80129f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80129f8:	601a      	str	r2, [r3, #0]
 80129fa:	f3bf 8f4f 	dsb	sy
 80129fe:	f3bf 8f6f 	isb	sy
 8012a02:	e014      	b.n	8012a2e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012a04:	f107 0314 	add.w	r3, r7, #20
 8012a08:	3304      	adds	r3, #4
 8012a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	68b8      	ldr	r0, [r7, #8]
 8012a10:	f000 fbc4 	bl	801319c <xQueueReceive>
 8012a14:	4603      	mov	r3, r0
 8012a16:	2b01      	cmp	r3, #1
 8012a18:	d102      	bne.n	8012a20 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8012a1a:	2310      	movs	r3, #16
 8012a1c:	617b      	str	r3, [r7, #20]
 8012a1e:	e006      	b.n	8012a2e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d101      	bne.n	8012a2a <osMessageGet+0xc6>
 8012a26:	2300      	movs	r3, #0
 8012a28:	e000      	b.n	8012a2c <osMessageGet+0xc8>
 8012a2a:	2340      	movs	r3, #64	@ 0x40
 8012a2c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	461c      	mov	r4, r3
 8012a32:	f107 0314 	add.w	r3, r7, #20
 8012a36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012a3e:	68f8      	ldr	r0, [r7, #12]
 8012a40:	372c      	adds	r7, #44	@ 0x2c
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd90      	pop	{r4, r7, pc}
 8012a46:	bf00      	nop
 8012a48:	e000ed04 	.word	0xe000ed04

08012a4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b083      	sub	sp, #12
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f103 0208 	add.w	r2, r3, #8
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012a64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f103 0208 	add.w	r2, r3, #8
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f103 0208 	add.w	r2, r3, #8
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012a80:	bf00      	nop
 8012a82:	370c      	adds	r7, #12
 8012a84:	46bd      	mov	sp, r7
 8012a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8a:	4770      	bx	lr

08012a8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012a8c:	b480      	push	{r7}
 8012a8e:	b083      	sub	sp, #12
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2200      	movs	r2, #0
 8012a98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012a9a:	bf00      	nop
 8012a9c:	370c      	adds	r7, #12
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa4:	4770      	bx	lr

08012aa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012aa6:	b480      	push	{r7}
 8012aa8:	b085      	sub	sp, #20
 8012aaa:	af00      	add	r7, sp, #0
 8012aac:	6078      	str	r0, [r7, #4]
 8012aae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	685b      	ldr	r3, [r3, #4]
 8012ab4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	68fa      	ldr	r2, [r7, #12]
 8012aba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	689a      	ldr	r2, [r3, #8]
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	689b      	ldr	r3, [r3, #8]
 8012ac8:	683a      	ldr	r2, [r7, #0]
 8012aca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	683a      	ldr	r2, [r7, #0]
 8012ad0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	687a      	ldr	r2, [r7, #4]
 8012ad6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	1c5a      	adds	r2, r3, #1
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	601a      	str	r2, [r3, #0]
}
 8012ae2:	bf00      	nop
 8012ae4:	3714      	adds	r7, #20
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aec:	4770      	bx	lr

08012aee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012aee:	b480      	push	{r7}
 8012af0:	b085      	sub	sp, #20
 8012af2:	af00      	add	r7, sp, #0
 8012af4:	6078      	str	r0, [r7, #4]
 8012af6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012b04:	d103      	bne.n	8012b0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	691b      	ldr	r3, [r3, #16]
 8012b0a:	60fb      	str	r3, [r7, #12]
 8012b0c:	e00c      	b.n	8012b28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	3308      	adds	r3, #8
 8012b12:	60fb      	str	r3, [r7, #12]
 8012b14:	e002      	b.n	8012b1c <vListInsert+0x2e>
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	60fb      	str	r3, [r7, #12]
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	68ba      	ldr	r2, [r7, #8]
 8012b24:	429a      	cmp	r2, r3
 8012b26:	d2f6      	bcs.n	8012b16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	685a      	ldr	r2, [r3, #4]
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	685b      	ldr	r3, [r3, #4]
 8012b34:	683a      	ldr	r2, [r7, #0]
 8012b36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	68fa      	ldr	r2, [r7, #12]
 8012b3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	683a      	ldr	r2, [r7, #0]
 8012b42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	687a      	ldr	r2, [r7, #4]
 8012b48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	1c5a      	adds	r2, r3, #1
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	601a      	str	r2, [r3, #0]
}
 8012b54:	bf00      	nop
 8012b56:	3714      	adds	r7, #20
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012b60:	b480      	push	{r7}
 8012b62:	b085      	sub	sp, #20
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	691b      	ldr	r3, [r3, #16]
 8012b6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	685b      	ldr	r3, [r3, #4]
 8012b72:	687a      	ldr	r2, [r7, #4]
 8012b74:	6892      	ldr	r2, [r2, #8]
 8012b76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	689b      	ldr	r3, [r3, #8]
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	6852      	ldr	r2, [r2, #4]
 8012b80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	687a      	ldr	r2, [r7, #4]
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d103      	bne.n	8012b94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	689a      	ldr	r2, [r3, #8]
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2200      	movs	r2, #0
 8012b98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	1e5a      	subs	r2, r3, #1
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	681b      	ldr	r3, [r3, #0]
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3714      	adds	r7, #20
 8012bac:	46bd      	mov	sp, r7
 8012bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb2:	4770      	bx	lr

08012bb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b084      	sub	sp, #16
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d10b      	bne.n	8012be0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bcc:	f383 8811 	msr	BASEPRI, r3
 8012bd0:	f3bf 8f6f 	isb	sy
 8012bd4:	f3bf 8f4f 	dsb	sy
 8012bd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012bda:	bf00      	nop
 8012bdc:	bf00      	nop
 8012bde:	e7fd      	b.n	8012bdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012be0:	f002 f98a 	bl	8014ef8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	681a      	ldr	r2, [r3, #0]
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bec:	68f9      	ldr	r1, [r7, #12]
 8012bee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012bf0:	fb01 f303 	mul.w	r3, r1, r3
 8012bf4:	441a      	add	r2, r3
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	681a      	ldr	r2, [r3, #0]
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	681a      	ldr	r2, [r3, #0]
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012c10:	3b01      	subs	r3, #1
 8012c12:	68f9      	ldr	r1, [r7, #12]
 8012c14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012c16:	fb01 f303 	mul.w	r3, r1, r3
 8012c1a:	441a      	add	r2, r3
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	22ff      	movs	r2, #255	@ 0xff
 8012c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	22ff      	movs	r2, #255	@ 0xff
 8012c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d114      	bne.n	8012c60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	691b      	ldr	r3, [r3, #16]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d01a      	beq.n	8012c74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	3310      	adds	r3, #16
 8012c42:	4618      	mov	r0, r3
 8012c44:	f001 fb2c 	bl	80142a0 <xTaskRemoveFromEventList>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d012      	beq.n	8012c74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8012c84 <xQueueGenericReset+0xd0>)
 8012c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c54:	601a      	str	r2, [r3, #0]
 8012c56:	f3bf 8f4f 	dsb	sy
 8012c5a:	f3bf 8f6f 	isb	sy
 8012c5e:	e009      	b.n	8012c74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	3310      	adds	r3, #16
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7ff fef1 	bl	8012a4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	3324      	adds	r3, #36	@ 0x24
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7ff feec 	bl	8012a4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012c74:	f002 f972 	bl	8014f5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012c78:	2301      	movs	r3, #1
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	3710      	adds	r7, #16
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
 8012c82:	bf00      	nop
 8012c84:	e000ed04 	.word	0xe000ed04

08012c88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b08a      	sub	sp, #40	@ 0x28
 8012c8c:	af02      	add	r7, sp, #8
 8012c8e:	60f8      	str	r0, [r7, #12]
 8012c90:	60b9      	str	r1, [r7, #8]
 8012c92:	4613      	mov	r3, r2
 8012c94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d10b      	bne.n	8012cb4 <xQueueGenericCreate+0x2c>
	__asm volatile
 8012c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ca0:	f383 8811 	msr	BASEPRI, r3
 8012ca4:	f3bf 8f6f 	isb	sy
 8012ca8:	f3bf 8f4f 	dsb	sy
 8012cac:	613b      	str	r3, [r7, #16]
}
 8012cae:	bf00      	nop
 8012cb0:	bf00      	nop
 8012cb2:	e7fd      	b.n	8012cb0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	68ba      	ldr	r2, [r7, #8]
 8012cb8:	fb02 f303 	mul.w	r3, r2, r3
 8012cbc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012cbe:	69fb      	ldr	r3, [r7, #28]
 8012cc0:	3350      	adds	r3, #80	@ 0x50
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f002 fa3a 	bl	801513c <pvPortMalloc>
 8012cc8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d00d      	beq.n	8012cec <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	3350      	adds	r3, #80	@ 0x50
 8012cd8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012cda:	79fa      	ldrb	r2, [r7, #7]
 8012cdc:	69bb      	ldr	r3, [r7, #24]
 8012cde:	9300      	str	r3, [sp, #0]
 8012ce0:	4613      	mov	r3, r2
 8012ce2:	697a      	ldr	r2, [r7, #20]
 8012ce4:	68b9      	ldr	r1, [r7, #8]
 8012ce6:	68f8      	ldr	r0, [r7, #12]
 8012ce8:	f000 f805 	bl	8012cf6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012cec:	69bb      	ldr	r3, [r7, #24]
	}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3720      	adds	r7, #32
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}

08012cf6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012cf6:	b580      	push	{r7, lr}
 8012cf8:	b084      	sub	sp, #16
 8012cfa:	af00      	add	r7, sp, #0
 8012cfc:	60f8      	str	r0, [r7, #12]
 8012cfe:	60b9      	str	r1, [r7, #8]
 8012d00:	607a      	str	r2, [r7, #4]
 8012d02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d103      	bne.n	8012d12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012d0a:	69bb      	ldr	r3, [r7, #24]
 8012d0c:	69ba      	ldr	r2, [r7, #24]
 8012d0e:	601a      	str	r2, [r3, #0]
 8012d10:	e002      	b.n	8012d18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012d12:	69bb      	ldr	r3, [r7, #24]
 8012d14:	687a      	ldr	r2, [r7, #4]
 8012d16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012d18:	69bb      	ldr	r3, [r7, #24]
 8012d1a:	68fa      	ldr	r2, [r7, #12]
 8012d1c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	68ba      	ldr	r2, [r7, #8]
 8012d22:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012d24:	2101      	movs	r1, #1
 8012d26:	69b8      	ldr	r0, [r7, #24]
 8012d28:	f7ff ff44 	bl	8012bb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012d2c:	69bb      	ldr	r3, [r7, #24]
 8012d2e:	78fa      	ldrb	r2, [r7, #3]
 8012d30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012d34:	bf00      	nop
 8012d36:	3710      	adds	r7, #16
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b08e      	sub	sp, #56	@ 0x38
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	60f8      	str	r0, [r7, #12]
 8012d44:	60b9      	str	r1, [r7, #8]
 8012d46:	607a      	str	r2, [r7, #4]
 8012d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d10b      	bne.n	8012d70 <xQueueGenericSend+0x34>
	__asm volatile
 8012d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d5c:	f383 8811 	msr	BASEPRI, r3
 8012d60:	f3bf 8f6f 	isb	sy
 8012d64:	f3bf 8f4f 	dsb	sy
 8012d68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012d6a:	bf00      	nop
 8012d6c:	bf00      	nop
 8012d6e:	e7fd      	b.n	8012d6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d103      	bne.n	8012d7e <xQueueGenericSend+0x42>
 8012d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d101      	bne.n	8012d82 <xQueueGenericSend+0x46>
 8012d7e:	2301      	movs	r3, #1
 8012d80:	e000      	b.n	8012d84 <xQueueGenericSend+0x48>
 8012d82:	2300      	movs	r3, #0
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d10b      	bne.n	8012da0 <xQueueGenericSend+0x64>
	__asm volatile
 8012d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d8c:	f383 8811 	msr	BASEPRI, r3
 8012d90:	f3bf 8f6f 	isb	sy
 8012d94:	f3bf 8f4f 	dsb	sy
 8012d98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012d9a:	bf00      	nop
 8012d9c:	bf00      	nop
 8012d9e:	e7fd      	b.n	8012d9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	2b02      	cmp	r3, #2
 8012da4:	d103      	bne.n	8012dae <xQueueGenericSend+0x72>
 8012da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012daa:	2b01      	cmp	r3, #1
 8012dac:	d101      	bne.n	8012db2 <xQueueGenericSend+0x76>
 8012dae:	2301      	movs	r3, #1
 8012db0:	e000      	b.n	8012db4 <xQueueGenericSend+0x78>
 8012db2:	2300      	movs	r3, #0
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d10b      	bne.n	8012dd0 <xQueueGenericSend+0x94>
	__asm volatile
 8012db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dbc:	f383 8811 	msr	BASEPRI, r3
 8012dc0:	f3bf 8f6f 	isb	sy
 8012dc4:	f3bf 8f4f 	dsb	sy
 8012dc8:	623b      	str	r3, [r7, #32]
}
 8012dca:	bf00      	nop
 8012dcc:	bf00      	nop
 8012dce:	e7fd      	b.n	8012dcc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012dd0:	f001 fc0c 	bl	80145ec <xTaskGetSchedulerState>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d102      	bne.n	8012de0 <xQueueGenericSend+0xa4>
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d101      	bne.n	8012de4 <xQueueGenericSend+0xa8>
 8012de0:	2301      	movs	r3, #1
 8012de2:	e000      	b.n	8012de6 <xQueueGenericSend+0xaa>
 8012de4:	2300      	movs	r3, #0
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d10b      	bne.n	8012e02 <xQueueGenericSend+0xc6>
	__asm volatile
 8012dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dee:	f383 8811 	msr	BASEPRI, r3
 8012df2:	f3bf 8f6f 	isb	sy
 8012df6:	f3bf 8f4f 	dsb	sy
 8012dfa:	61fb      	str	r3, [r7, #28]
}
 8012dfc:	bf00      	nop
 8012dfe:	bf00      	nop
 8012e00:	e7fd      	b.n	8012dfe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012e02:	f002 f879 	bl	8014ef8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d302      	bcc.n	8012e18 <xQueueGenericSend+0xdc>
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	2b02      	cmp	r3, #2
 8012e16:	d129      	bne.n	8012e6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012e18:	683a      	ldr	r2, [r7, #0]
 8012e1a:	68b9      	ldr	r1, [r7, #8]
 8012e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012e1e:	f000 fc49 	bl	80136b4 <prvCopyDataToQueue>
 8012e22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d010      	beq.n	8012e4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e2e:	3324      	adds	r3, #36	@ 0x24
 8012e30:	4618      	mov	r0, r3
 8012e32:	f001 fa35 	bl	80142a0 <xTaskRemoveFromEventList>
 8012e36:	4603      	mov	r3, r0
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d013      	beq.n	8012e64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8012f3c <xQueueGenericSend+0x200>)
 8012e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e42:	601a      	str	r2, [r3, #0]
 8012e44:	f3bf 8f4f 	dsb	sy
 8012e48:	f3bf 8f6f 	isb	sy
 8012e4c:	e00a      	b.n	8012e64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d007      	beq.n	8012e64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012e54:	4b39      	ldr	r3, [pc, #228]	@ (8012f3c <xQueueGenericSend+0x200>)
 8012e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e5a:	601a      	str	r2, [r3, #0]
 8012e5c:	f3bf 8f4f 	dsb	sy
 8012e60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012e64:	f002 f87a 	bl	8014f5c <vPortExitCritical>
				return pdPASS;
 8012e68:	2301      	movs	r3, #1
 8012e6a:	e063      	b.n	8012f34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d103      	bne.n	8012e7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012e72:	f002 f873 	bl	8014f5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012e76:	2300      	movs	r3, #0
 8012e78:	e05c      	b.n	8012f34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d106      	bne.n	8012e8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012e80:	f107 0314 	add.w	r3, r7, #20
 8012e84:	4618      	mov	r0, r3
 8012e86:	f001 fa6f 	bl	8014368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012e8a:	2301      	movs	r3, #1
 8012e8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012e8e:	f002 f865 	bl	8014f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012e92:	f000 fffb 	bl	8013e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012e96:	f002 f82f 	bl	8014ef8 <vPortEnterCritical>
 8012e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012ea0:	b25b      	sxtb	r3, r3
 8012ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012ea6:	d103      	bne.n	8012eb0 <xQueueGenericSend+0x174>
 8012ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eaa:	2200      	movs	r2, #0
 8012eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012eb6:	b25b      	sxtb	r3, r3
 8012eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012ebc:	d103      	bne.n	8012ec6 <xQueueGenericSend+0x18a>
 8012ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012ec6:	f002 f849 	bl	8014f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012eca:	1d3a      	adds	r2, r7, #4
 8012ecc:	f107 0314 	add.w	r3, r7, #20
 8012ed0:	4611      	mov	r1, r2
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f001 fa5e 	bl	8014394 <xTaskCheckForTimeOut>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d124      	bne.n	8012f28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012ede:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012ee0:	f000 fce0 	bl	80138a4 <prvIsQueueFull>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d018      	beq.n	8012f1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eec:	3310      	adds	r3, #16
 8012eee:	687a      	ldr	r2, [r7, #4]
 8012ef0:	4611      	mov	r1, r2
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f001 f9ae 	bl	8014254 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012ef8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012efa:	f000 fc6b 	bl	80137d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012efe:	f000 ffd3 	bl	8013ea8 <xTaskResumeAll>
 8012f02:	4603      	mov	r3, r0
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	f47f af7c 	bne.w	8012e02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8012f3c <xQueueGenericSend+0x200>)
 8012f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f10:	601a      	str	r2, [r3, #0]
 8012f12:	f3bf 8f4f 	dsb	sy
 8012f16:	f3bf 8f6f 	isb	sy
 8012f1a:	e772      	b.n	8012e02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012f1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012f1e:	f000 fc59 	bl	80137d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012f22:	f000 ffc1 	bl	8013ea8 <xTaskResumeAll>
 8012f26:	e76c      	b.n	8012e02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012f2a:	f000 fc53 	bl	80137d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012f2e:	f000 ffbb 	bl	8013ea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012f32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3738      	adds	r7, #56	@ 0x38
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}
 8012f3c:	e000ed04 	.word	0xe000ed04

08012f40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b090      	sub	sp, #64	@ 0x40
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	60f8      	str	r0, [r7, #12]
 8012f48:	60b9      	str	r1, [r7, #8]
 8012f4a:	607a      	str	r2, [r7, #4]
 8012f4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8012f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d10b      	bne.n	8012f70 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8012f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f5c:	f383 8811 	msr	BASEPRI, r3
 8012f60:	f3bf 8f6f 	isb	sy
 8012f64:	f3bf 8f4f 	dsb	sy
 8012f68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012f6a:	bf00      	nop
 8012f6c:	bf00      	nop
 8012f6e:	e7fd      	b.n	8012f6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d103      	bne.n	8012f7e <xQueueGenericSendFromISR+0x3e>
 8012f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d101      	bne.n	8012f82 <xQueueGenericSendFromISR+0x42>
 8012f7e:	2301      	movs	r3, #1
 8012f80:	e000      	b.n	8012f84 <xQueueGenericSendFromISR+0x44>
 8012f82:	2300      	movs	r3, #0
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d10b      	bne.n	8012fa0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8012f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f8c:	f383 8811 	msr	BASEPRI, r3
 8012f90:	f3bf 8f6f 	isb	sy
 8012f94:	f3bf 8f4f 	dsb	sy
 8012f98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012f9a:	bf00      	nop
 8012f9c:	bf00      	nop
 8012f9e:	e7fd      	b.n	8012f9c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	2b02      	cmp	r3, #2
 8012fa4:	d103      	bne.n	8012fae <xQueueGenericSendFromISR+0x6e>
 8012fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012faa:	2b01      	cmp	r3, #1
 8012fac:	d101      	bne.n	8012fb2 <xQueueGenericSendFromISR+0x72>
 8012fae:	2301      	movs	r3, #1
 8012fb0:	e000      	b.n	8012fb4 <xQueueGenericSendFromISR+0x74>
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d10b      	bne.n	8012fd0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8012fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fbc:	f383 8811 	msr	BASEPRI, r3
 8012fc0:	f3bf 8f6f 	isb	sy
 8012fc4:	f3bf 8f4f 	dsb	sy
 8012fc8:	623b      	str	r3, [r7, #32]
}
 8012fca:	bf00      	nop
 8012fcc:	bf00      	nop
 8012fce:	e7fd      	b.n	8012fcc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012fd0:	f002 f872 	bl	80150b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012fd4:	f3ef 8211 	mrs	r2, BASEPRI
 8012fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fdc:	f383 8811 	msr	BASEPRI, r3
 8012fe0:	f3bf 8f6f 	isb	sy
 8012fe4:	f3bf 8f4f 	dsb	sy
 8012fe8:	61fa      	str	r2, [r7, #28]
 8012fea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012fec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012fee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ff2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d302      	bcc.n	8013002 <xQueueGenericSendFromISR+0xc2>
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	2b02      	cmp	r3, #2
 8013000:	d12f      	bne.n	8013062 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013004:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013008:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801300c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801300e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013010:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013012:	683a      	ldr	r2, [r7, #0]
 8013014:	68b9      	ldr	r1, [r7, #8]
 8013016:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013018:	f000 fb4c 	bl	80136b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801301c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013020:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013024:	d112      	bne.n	801304c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801302a:	2b00      	cmp	r3, #0
 801302c:	d016      	beq.n	801305c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801302e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013030:	3324      	adds	r3, #36	@ 0x24
 8013032:	4618      	mov	r0, r3
 8013034:	f001 f934 	bl	80142a0 <xTaskRemoveFromEventList>
 8013038:	4603      	mov	r3, r0
 801303a:	2b00      	cmp	r3, #0
 801303c:	d00e      	beq.n	801305c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d00b      	beq.n	801305c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2201      	movs	r2, #1
 8013048:	601a      	str	r2, [r3, #0]
 801304a:	e007      	b.n	801305c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801304c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013050:	3301      	adds	r3, #1
 8013052:	b2db      	uxtb	r3, r3
 8013054:	b25a      	sxtb	r2, r3
 8013056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801305c:	2301      	movs	r3, #1
 801305e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8013060:	e001      	b.n	8013066 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013062:	2300      	movs	r3, #0
 8013064:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013068:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013070:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013074:	4618      	mov	r0, r3
 8013076:	3740      	adds	r7, #64	@ 0x40
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}

0801307c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b08e      	sub	sp, #56	@ 0x38
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801308c:	2b00      	cmp	r3, #0
 801308e:	d10b      	bne.n	80130a8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8013090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013094:	f383 8811 	msr	BASEPRI, r3
 8013098:	f3bf 8f6f 	isb	sy
 801309c:	f3bf 8f4f 	dsb	sy
 80130a0:	623b      	str	r3, [r7, #32]
}
 80130a2:	bf00      	nop
 80130a4:	bf00      	nop
 80130a6:	e7fd      	b.n	80130a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80130a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d00b      	beq.n	80130c8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80130b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130b4:	f383 8811 	msr	BASEPRI, r3
 80130b8:	f3bf 8f6f 	isb	sy
 80130bc:	f3bf 8f4f 	dsb	sy
 80130c0:	61fb      	str	r3, [r7, #28]
}
 80130c2:	bf00      	nop
 80130c4:	bf00      	nop
 80130c6:	e7fd      	b.n	80130c4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80130c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d103      	bne.n	80130d8 <xQueueGiveFromISR+0x5c>
 80130d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130d2:	689b      	ldr	r3, [r3, #8]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d101      	bne.n	80130dc <xQueueGiveFromISR+0x60>
 80130d8:	2301      	movs	r3, #1
 80130da:	e000      	b.n	80130de <xQueueGiveFromISR+0x62>
 80130dc:	2300      	movs	r3, #0
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d10b      	bne.n	80130fa <xQueueGiveFromISR+0x7e>
	__asm volatile
 80130e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130e6:	f383 8811 	msr	BASEPRI, r3
 80130ea:	f3bf 8f6f 	isb	sy
 80130ee:	f3bf 8f4f 	dsb	sy
 80130f2:	61bb      	str	r3, [r7, #24]
}
 80130f4:	bf00      	nop
 80130f6:	bf00      	nop
 80130f8:	e7fd      	b.n	80130f6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80130fa:	f001 ffdd 	bl	80150b8 <vPortValidateInterruptPriority>
	__asm volatile
 80130fe:	f3ef 8211 	mrs	r2, BASEPRI
 8013102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013106:	f383 8811 	msr	BASEPRI, r3
 801310a:	f3bf 8f6f 	isb	sy
 801310e:	f3bf 8f4f 	dsb	sy
 8013112:	617a      	str	r2, [r7, #20]
 8013114:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013116:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013118:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801311a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801311c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801311e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013126:	429a      	cmp	r2, r3
 8013128:	d22b      	bcs.n	8013182 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801312a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801312c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013130:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013136:	1c5a      	adds	r2, r3, #1
 8013138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801313a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801313c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013140:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013144:	d112      	bne.n	801316c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801314a:	2b00      	cmp	r3, #0
 801314c:	d016      	beq.n	801317c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801314e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013150:	3324      	adds	r3, #36	@ 0x24
 8013152:	4618      	mov	r0, r3
 8013154:	f001 f8a4 	bl	80142a0 <xTaskRemoveFromEventList>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	d00e      	beq.n	801317c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d00b      	beq.n	801317c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	2201      	movs	r2, #1
 8013168:	601a      	str	r2, [r3, #0]
 801316a:	e007      	b.n	801317c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801316c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013170:	3301      	adds	r3, #1
 8013172:	b2db      	uxtb	r3, r3
 8013174:	b25a      	sxtb	r2, r3
 8013176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801317c:	2301      	movs	r3, #1
 801317e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013180:	e001      	b.n	8013186 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013182:	2300      	movs	r3, #0
 8013184:	637b      	str	r3, [r7, #52]	@ 0x34
 8013186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013188:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	f383 8811 	msr	BASEPRI, r3
}
 8013190:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013194:	4618      	mov	r0, r3
 8013196:	3738      	adds	r7, #56	@ 0x38
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}

0801319c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b08c      	sub	sp, #48	@ 0x30
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	60f8      	str	r0, [r7, #12]
 80131a4:	60b9      	str	r1, [r7, #8]
 80131a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80131a8:	2300      	movs	r3, #0
 80131aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80131b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d10b      	bne.n	80131ce <xQueueReceive+0x32>
	__asm volatile
 80131b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ba:	f383 8811 	msr	BASEPRI, r3
 80131be:	f3bf 8f6f 	isb	sy
 80131c2:	f3bf 8f4f 	dsb	sy
 80131c6:	623b      	str	r3, [r7, #32]
}
 80131c8:	bf00      	nop
 80131ca:	bf00      	nop
 80131cc:	e7fd      	b.n	80131ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d103      	bne.n	80131dc <xQueueReceive+0x40>
 80131d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d101      	bne.n	80131e0 <xQueueReceive+0x44>
 80131dc:	2301      	movs	r3, #1
 80131de:	e000      	b.n	80131e2 <xQueueReceive+0x46>
 80131e0:	2300      	movs	r3, #0
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d10b      	bne.n	80131fe <xQueueReceive+0x62>
	__asm volatile
 80131e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ea:	f383 8811 	msr	BASEPRI, r3
 80131ee:	f3bf 8f6f 	isb	sy
 80131f2:	f3bf 8f4f 	dsb	sy
 80131f6:	61fb      	str	r3, [r7, #28]
}
 80131f8:	bf00      	nop
 80131fa:	bf00      	nop
 80131fc:	e7fd      	b.n	80131fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80131fe:	f001 f9f5 	bl	80145ec <xTaskGetSchedulerState>
 8013202:	4603      	mov	r3, r0
 8013204:	2b00      	cmp	r3, #0
 8013206:	d102      	bne.n	801320e <xQueueReceive+0x72>
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d101      	bne.n	8013212 <xQueueReceive+0x76>
 801320e:	2301      	movs	r3, #1
 8013210:	e000      	b.n	8013214 <xQueueReceive+0x78>
 8013212:	2300      	movs	r3, #0
 8013214:	2b00      	cmp	r3, #0
 8013216:	d10b      	bne.n	8013230 <xQueueReceive+0x94>
	__asm volatile
 8013218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801321c:	f383 8811 	msr	BASEPRI, r3
 8013220:	f3bf 8f6f 	isb	sy
 8013224:	f3bf 8f4f 	dsb	sy
 8013228:	61bb      	str	r3, [r7, #24]
}
 801322a:	bf00      	nop
 801322c:	bf00      	nop
 801322e:	e7fd      	b.n	801322c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013230:	f001 fe62 	bl	8014ef8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013238:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801323c:	2b00      	cmp	r3, #0
 801323e:	d01f      	beq.n	8013280 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013240:	68b9      	ldr	r1, [r7, #8]
 8013242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013244:	f000 faa0 	bl	8013788 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801324a:	1e5a      	subs	r2, r3, #1
 801324c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801324e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013252:	691b      	ldr	r3, [r3, #16]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d00f      	beq.n	8013278 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801325a:	3310      	adds	r3, #16
 801325c:	4618      	mov	r0, r3
 801325e:	f001 f81f 	bl	80142a0 <xTaskRemoveFromEventList>
 8013262:	4603      	mov	r3, r0
 8013264:	2b00      	cmp	r3, #0
 8013266:	d007      	beq.n	8013278 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013268:	4b3c      	ldr	r3, [pc, #240]	@ (801335c <xQueueReceive+0x1c0>)
 801326a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801326e:	601a      	str	r2, [r3, #0]
 8013270:	f3bf 8f4f 	dsb	sy
 8013274:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013278:	f001 fe70 	bl	8014f5c <vPortExitCritical>
				return pdPASS;
 801327c:	2301      	movs	r3, #1
 801327e:	e069      	b.n	8013354 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d103      	bne.n	801328e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013286:	f001 fe69 	bl	8014f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801328a:	2300      	movs	r3, #0
 801328c:	e062      	b.n	8013354 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801328e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013290:	2b00      	cmp	r3, #0
 8013292:	d106      	bne.n	80132a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013294:	f107 0310 	add.w	r3, r7, #16
 8013298:	4618      	mov	r0, r3
 801329a:	f001 f865 	bl	8014368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801329e:	2301      	movs	r3, #1
 80132a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80132a2:	f001 fe5b 	bl	8014f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80132a6:	f000 fdf1 	bl	8013e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80132aa:	f001 fe25 	bl	8014ef8 <vPortEnterCritical>
 80132ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80132b4:	b25b      	sxtb	r3, r3
 80132b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80132ba:	d103      	bne.n	80132c4 <xQueueReceive+0x128>
 80132bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132be:	2200      	movs	r2, #0
 80132c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80132c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80132ca:	b25b      	sxtb	r3, r3
 80132cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80132d0:	d103      	bne.n	80132da <xQueueReceive+0x13e>
 80132d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132d4:	2200      	movs	r2, #0
 80132d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80132da:	f001 fe3f 	bl	8014f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80132de:	1d3a      	adds	r2, r7, #4
 80132e0:	f107 0310 	add.w	r3, r7, #16
 80132e4:	4611      	mov	r1, r2
 80132e6:	4618      	mov	r0, r3
 80132e8:	f001 f854 	bl	8014394 <xTaskCheckForTimeOut>
 80132ec:	4603      	mov	r3, r0
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d123      	bne.n	801333a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80132f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80132f4:	f000 fac0 	bl	8013878 <prvIsQueueEmpty>
 80132f8:	4603      	mov	r3, r0
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d017      	beq.n	801332e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80132fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013300:	3324      	adds	r3, #36	@ 0x24
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	4611      	mov	r1, r2
 8013306:	4618      	mov	r0, r3
 8013308:	f000 ffa4 	bl	8014254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801330c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801330e:	f000 fa61 	bl	80137d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013312:	f000 fdc9 	bl	8013ea8 <xTaskResumeAll>
 8013316:	4603      	mov	r3, r0
 8013318:	2b00      	cmp	r3, #0
 801331a:	d189      	bne.n	8013230 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801331c:	4b0f      	ldr	r3, [pc, #60]	@ (801335c <xQueueReceive+0x1c0>)
 801331e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013322:	601a      	str	r2, [r3, #0]
 8013324:	f3bf 8f4f 	dsb	sy
 8013328:	f3bf 8f6f 	isb	sy
 801332c:	e780      	b.n	8013230 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801332e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013330:	f000 fa50 	bl	80137d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013334:	f000 fdb8 	bl	8013ea8 <xTaskResumeAll>
 8013338:	e77a      	b.n	8013230 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801333a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801333c:	f000 fa4a 	bl	80137d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013340:	f000 fdb2 	bl	8013ea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013344:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013346:	f000 fa97 	bl	8013878 <prvIsQueueEmpty>
 801334a:	4603      	mov	r3, r0
 801334c:	2b00      	cmp	r3, #0
 801334e:	f43f af6f 	beq.w	8013230 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013352:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013354:	4618      	mov	r0, r3
 8013356:	3730      	adds	r7, #48	@ 0x30
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}
 801335c:	e000ed04 	.word	0xe000ed04

08013360 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b08e      	sub	sp, #56	@ 0x38
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801336a:	2300      	movs	r3, #0
 801336c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013372:	2300      	movs	r3, #0
 8013374:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013378:	2b00      	cmp	r3, #0
 801337a:	d10b      	bne.n	8013394 <xQueueSemaphoreTake+0x34>
	__asm volatile
 801337c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013380:	f383 8811 	msr	BASEPRI, r3
 8013384:	f3bf 8f6f 	isb	sy
 8013388:	f3bf 8f4f 	dsb	sy
 801338c:	623b      	str	r3, [r7, #32]
}
 801338e:	bf00      	nop
 8013390:	bf00      	nop
 8013392:	e7fd      	b.n	8013390 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013398:	2b00      	cmp	r3, #0
 801339a:	d00b      	beq.n	80133b4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 801339c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133a0:	f383 8811 	msr	BASEPRI, r3
 80133a4:	f3bf 8f6f 	isb	sy
 80133a8:	f3bf 8f4f 	dsb	sy
 80133ac:	61fb      	str	r3, [r7, #28]
}
 80133ae:	bf00      	nop
 80133b0:	bf00      	nop
 80133b2:	e7fd      	b.n	80133b0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80133b4:	f001 f91a 	bl	80145ec <xTaskGetSchedulerState>
 80133b8:	4603      	mov	r3, r0
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d102      	bne.n	80133c4 <xQueueSemaphoreTake+0x64>
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d101      	bne.n	80133c8 <xQueueSemaphoreTake+0x68>
 80133c4:	2301      	movs	r3, #1
 80133c6:	e000      	b.n	80133ca <xQueueSemaphoreTake+0x6a>
 80133c8:	2300      	movs	r3, #0
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d10b      	bne.n	80133e6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80133ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133d2:	f383 8811 	msr	BASEPRI, r3
 80133d6:	f3bf 8f6f 	isb	sy
 80133da:	f3bf 8f4f 	dsb	sy
 80133de:	61bb      	str	r3, [r7, #24]
}
 80133e0:	bf00      	nop
 80133e2:	bf00      	nop
 80133e4:	e7fd      	b.n	80133e2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80133e6:	f001 fd87 	bl	8014ef8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80133ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133ee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80133f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d024      	beq.n	8013440 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80133f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133f8:	1e5a      	subs	r2, r3, #1
 80133fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133fc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80133fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d104      	bne.n	8013410 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013406:	f001 fa9d 	bl	8014944 <pvTaskIncrementMutexHeldCount>
 801340a:	4602      	mov	r2, r0
 801340c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801340e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013412:	691b      	ldr	r3, [r3, #16]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d00f      	beq.n	8013438 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801341a:	3310      	adds	r3, #16
 801341c:	4618      	mov	r0, r3
 801341e:	f000 ff3f 	bl	80142a0 <xTaskRemoveFromEventList>
 8013422:	4603      	mov	r3, r0
 8013424:	2b00      	cmp	r3, #0
 8013426:	d007      	beq.n	8013438 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013428:	4b54      	ldr	r3, [pc, #336]	@ (801357c <xQueueSemaphoreTake+0x21c>)
 801342a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801342e:	601a      	str	r2, [r3, #0]
 8013430:	f3bf 8f4f 	dsb	sy
 8013434:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013438:	f001 fd90 	bl	8014f5c <vPortExitCritical>
				return pdPASS;
 801343c:	2301      	movs	r3, #1
 801343e:	e098      	b.n	8013572 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d112      	bne.n	801346c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013448:	2b00      	cmp	r3, #0
 801344a:	d00b      	beq.n	8013464 <xQueueSemaphoreTake+0x104>
	__asm volatile
 801344c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013450:	f383 8811 	msr	BASEPRI, r3
 8013454:	f3bf 8f6f 	isb	sy
 8013458:	f3bf 8f4f 	dsb	sy
 801345c:	617b      	str	r3, [r7, #20]
}
 801345e:	bf00      	nop
 8013460:	bf00      	nop
 8013462:	e7fd      	b.n	8013460 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013464:	f001 fd7a 	bl	8014f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013468:	2300      	movs	r3, #0
 801346a:	e082      	b.n	8013572 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 801346c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801346e:	2b00      	cmp	r3, #0
 8013470:	d106      	bne.n	8013480 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013472:	f107 030c 	add.w	r3, r7, #12
 8013476:	4618      	mov	r0, r3
 8013478:	f000 ff76 	bl	8014368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801347c:	2301      	movs	r3, #1
 801347e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013480:	f001 fd6c 	bl	8014f5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013484:	f000 fd02 	bl	8013e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013488:	f001 fd36 	bl	8014ef8 <vPortEnterCritical>
 801348c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801348e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013492:	b25b      	sxtb	r3, r3
 8013494:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013498:	d103      	bne.n	80134a2 <xQueueSemaphoreTake+0x142>
 801349a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801349c:	2200      	movs	r2, #0
 801349e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80134a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80134a8:	b25b      	sxtb	r3, r3
 80134aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80134ae:	d103      	bne.n	80134b8 <xQueueSemaphoreTake+0x158>
 80134b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134b2:	2200      	movs	r2, #0
 80134b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80134b8:	f001 fd50 	bl	8014f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80134bc:	463a      	mov	r2, r7
 80134be:	f107 030c 	add.w	r3, r7, #12
 80134c2:	4611      	mov	r1, r2
 80134c4:	4618      	mov	r0, r3
 80134c6:	f000 ff65 	bl	8014394 <xTaskCheckForTimeOut>
 80134ca:	4603      	mov	r3, r0
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d132      	bne.n	8013536 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80134d2:	f000 f9d1 	bl	8013878 <prvIsQueueEmpty>
 80134d6:	4603      	mov	r3, r0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d026      	beq.n	801352a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80134dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d109      	bne.n	80134f8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80134e4:	f001 fd08 	bl	8014ef8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80134e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ea:	689b      	ldr	r3, [r3, #8]
 80134ec:	4618      	mov	r0, r3
 80134ee:	f001 f89b 	bl	8014628 <xTaskPriorityInherit>
 80134f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80134f4:	f001 fd32 	bl	8014f5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80134f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134fa:	3324      	adds	r3, #36	@ 0x24
 80134fc:	683a      	ldr	r2, [r7, #0]
 80134fe:	4611      	mov	r1, r2
 8013500:	4618      	mov	r0, r3
 8013502:	f000 fea7 	bl	8014254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013506:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013508:	f000 f964 	bl	80137d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801350c:	f000 fccc 	bl	8013ea8 <xTaskResumeAll>
 8013510:	4603      	mov	r3, r0
 8013512:	2b00      	cmp	r3, #0
 8013514:	f47f af67 	bne.w	80133e6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013518:	4b18      	ldr	r3, [pc, #96]	@ (801357c <xQueueSemaphoreTake+0x21c>)
 801351a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801351e:	601a      	str	r2, [r3, #0]
 8013520:	f3bf 8f4f 	dsb	sy
 8013524:	f3bf 8f6f 	isb	sy
 8013528:	e75d      	b.n	80133e6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801352a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801352c:	f000 f952 	bl	80137d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013530:	f000 fcba 	bl	8013ea8 <xTaskResumeAll>
 8013534:	e757      	b.n	80133e6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013536:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013538:	f000 f94c 	bl	80137d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801353c:	f000 fcb4 	bl	8013ea8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013540:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013542:	f000 f999 	bl	8013878 <prvIsQueueEmpty>
 8013546:	4603      	mov	r3, r0
 8013548:	2b00      	cmp	r3, #0
 801354a:	f43f af4c 	beq.w	80133e6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013550:	2b00      	cmp	r3, #0
 8013552:	d00d      	beq.n	8013570 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013554:	f001 fcd0 	bl	8014ef8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013558:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801355a:	f000 f893 	bl	8013684 <prvGetDisinheritPriorityAfterTimeout>
 801355e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013562:	689b      	ldr	r3, [r3, #8]
 8013564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013566:	4618      	mov	r0, r3
 8013568:	f001 f95c 	bl	8014824 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801356c:	f001 fcf6 	bl	8014f5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013570:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013572:	4618      	mov	r0, r3
 8013574:	3738      	adds	r7, #56	@ 0x38
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	e000ed04 	.word	0xe000ed04

08013580 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b08e      	sub	sp, #56	@ 0x38
 8013584:	af00      	add	r7, sp, #0
 8013586:	60f8      	str	r0, [r7, #12]
 8013588:	60b9      	str	r1, [r7, #8]
 801358a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013592:	2b00      	cmp	r3, #0
 8013594:	d10b      	bne.n	80135ae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8013596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801359a:	f383 8811 	msr	BASEPRI, r3
 801359e:	f3bf 8f6f 	isb	sy
 80135a2:	f3bf 8f4f 	dsb	sy
 80135a6:	623b      	str	r3, [r7, #32]
}
 80135a8:	bf00      	nop
 80135aa:	bf00      	nop
 80135ac:	e7fd      	b.n	80135aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d103      	bne.n	80135bc <xQueueReceiveFromISR+0x3c>
 80135b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d101      	bne.n	80135c0 <xQueueReceiveFromISR+0x40>
 80135bc:	2301      	movs	r3, #1
 80135be:	e000      	b.n	80135c2 <xQueueReceiveFromISR+0x42>
 80135c0:	2300      	movs	r3, #0
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d10b      	bne.n	80135de <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80135c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135ca:	f383 8811 	msr	BASEPRI, r3
 80135ce:	f3bf 8f6f 	isb	sy
 80135d2:	f3bf 8f4f 	dsb	sy
 80135d6:	61fb      	str	r3, [r7, #28]
}
 80135d8:	bf00      	nop
 80135da:	bf00      	nop
 80135dc:	e7fd      	b.n	80135da <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80135de:	f001 fd6b 	bl	80150b8 <vPortValidateInterruptPriority>
	__asm volatile
 80135e2:	f3ef 8211 	mrs	r2, BASEPRI
 80135e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135ea:	f383 8811 	msr	BASEPRI, r3
 80135ee:	f3bf 8f6f 	isb	sy
 80135f2:	f3bf 8f4f 	dsb	sy
 80135f6:	61ba      	str	r2, [r7, #24]
 80135f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80135fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80135fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80135fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013602:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013606:	2b00      	cmp	r3, #0
 8013608:	d02f      	beq.n	801366a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801360a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801360c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013614:	68b9      	ldr	r1, [r7, #8]
 8013616:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013618:	f000 f8b6 	bl	8013788 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801361e:	1e5a      	subs	r2, r3, #1
 8013620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013622:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013624:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801362c:	d112      	bne.n	8013654 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801362e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013630:	691b      	ldr	r3, [r3, #16]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d016      	beq.n	8013664 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013638:	3310      	adds	r3, #16
 801363a:	4618      	mov	r0, r3
 801363c:	f000 fe30 	bl	80142a0 <xTaskRemoveFromEventList>
 8013640:	4603      	mov	r3, r0
 8013642:	2b00      	cmp	r3, #0
 8013644:	d00e      	beq.n	8013664 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d00b      	beq.n	8013664 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2201      	movs	r2, #1
 8013650:	601a      	str	r2, [r3, #0]
 8013652:	e007      	b.n	8013664 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013658:	3301      	adds	r3, #1
 801365a:	b2db      	uxtb	r3, r3
 801365c:	b25a      	sxtb	r2, r3
 801365e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013664:	2301      	movs	r3, #1
 8013666:	637b      	str	r3, [r7, #52]	@ 0x34
 8013668:	e001      	b.n	801366e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801366a:	2300      	movs	r3, #0
 801366c:	637b      	str	r3, [r7, #52]	@ 0x34
 801366e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013670:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	f383 8811 	msr	BASEPRI, r3
}
 8013678:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801367a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801367c:	4618      	mov	r0, r3
 801367e:	3738      	adds	r7, #56	@ 0x38
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}

08013684 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013684:	b480      	push	{r7}
 8013686:	b085      	sub	sp, #20
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013690:	2b00      	cmp	r3, #0
 8013692:	d006      	beq.n	80136a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	f1c3 0307 	rsb	r3, r3, #7
 801369e:	60fb      	str	r3, [r7, #12]
 80136a0:	e001      	b.n	80136a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80136a2:	2300      	movs	r3, #0
 80136a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80136a6:	68fb      	ldr	r3, [r7, #12]
	}
 80136a8:	4618      	mov	r0, r3
 80136aa:	3714      	adds	r7, #20
 80136ac:	46bd      	mov	sp, r7
 80136ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b2:	4770      	bx	lr

080136b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b086      	sub	sp, #24
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	60f8      	str	r0, [r7, #12]
 80136bc:	60b9      	str	r1, [r7, #8]
 80136be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80136c0:	2300      	movs	r3, #0
 80136c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d10d      	bne.n	80136ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d14d      	bne.n	8013776 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	689b      	ldr	r3, [r3, #8]
 80136de:	4618      	mov	r0, r3
 80136e0:	f001 f818 	bl	8014714 <xTaskPriorityDisinherit>
 80136e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	2200      	movs	r2, #0
 80136ea:	609a      	str	r2, [r3, #8]
 80136ec:	e043      	b.n	8013776 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d119      	bne.n	8013728 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	6858      	ldr	r0, [r3, #4]
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136fc:	461a      	mov	r2, r3
 80136fe:	68b9      	ldr	r1, [r7, #8]
 8013700:	f005 f9f8 	bl	8018af4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	685a      	ldr	r2, [r3, #4]
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801370c:	441a      	add	r2, r3
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	685a      	ldr	r2, [r3, #4]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	689b      	ldr	r3, [r3, #8]
 801371a:	429a      	cmp	r2, r3
 801371c:	d32b      	bcc.n	8013776 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	681a      	ldr	r2, [r3, #0]
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	605a      	str	r2, [r3, #4]
 8013726:	e026      	b.n	8013776 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	68d8      	ldr	r0, [r3, #12]
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013730:	461a      	mov	r2, r3
 8013732:	68b9      	ldr	r1, [r7, #8]
 8013734:	f005 f9de 	bl	8018af4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	68da      	ldr	r2, [r3, #12]
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013740:	425b      	negs	r3, r3
 8013742:	441a      	add	r2, r3
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	68da      	ldr	r2, [r3, #12]
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	429a      	cmp	r2, r3
 8013752:	d207      	bcs.n	8013764 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	689a      	ldr	r2, [r3, #8]
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801375c:	425b      	negs	r3, r3
 801375e:	441a      	add	r2, r3
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2b02      	cmp	r3, #2
 8013768:	d105      	bne.n	8013776 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d002      	beq.n	8013776 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	3b01      	subs	r3, #1
 8013774:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	1c5a      	adds	r2, r3, #1
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801377e:	697b      	ldr	r3, [r7, #20]
}
 8013780:	4618      	mov	r0, r3
 8013782:	3718      	adds	r7, #24
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}

08013788 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b082      	sub	sp, #8
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013796:	2b00      	cmp	r3, #0
 8013798:	d018      	beq.n	80137cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	68da      	ldr	r2, [r3, #12]
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137a2:	441a      	add	r2, r3
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	68da      	ldr	r2, [r3, #12]
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	689b      	ldr	r3, [r3, #8]
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d303      	bcc.n	80137bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	681a      	ldr	r2, [r3, #0]
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	68d9      	ldr	r1, [r3, #12]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137c4:	461a      	mov	r2, r3
 80137c6:	6838      	ldr	r0, [r7, #0]
 80137c8:	f005 f994 	bl	8018af4 <memcpy>
	}
}
 80137cc:	bf00      	nop
 80137ce:	3708      	adds	r7, #8
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b084      	sub	sp, #16
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80137dc:	f001 fb8c 	bl	8014ef8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80137e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80137e8:	e011      	b.n	801380e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d012      	beq.n	8013818 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	3324      	adds	r3, #36	@ 0x24
 80137f6:	4618      	mov	r0, r3
 80137f8:	f000 fd52 	bl	80142a0 <xTaskRemoveFromEventList>
 80137fc:	4603      	mov	r3, r0
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d001      	beq.n	8013806 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013802:	f000 fe2b 	bl	801445c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013806:	7bfb      	ldrb	r3, [r7, #15]
 8013808:	3b01      	subs	r3, #1
 801380a:	b2db      	uxtb	r3, r3
 801380c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801380e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013812:	2b00      	cmp	r3, #0
 8013814:	dce9      	bgt.n	80137ea <prvUnlockQueue+0x16>
 8013816:	e000      	b.n	801381a <prvUnlockQueue+0x46>
					break;
 8013818:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	22ff      	movs	r2, #255	@ 0xff
 801381e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013822:	f001 fb9b 	bl	8014f5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013826:	f001 fb67 	bl	8014ef8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013830:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013832:	e011      	b.n	8013858 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	691b      	ldr	r3, [r3, #16]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d012      	beq.n	8013862 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	3310      	adds	r3, #16
 8013840:	4618      	mov	r0, r3
 8013842:	f000 fd2d 	bl	80142a0 <xTaskRemoveFromEventList>
 8013846:	4603      	mov	r3, r0
 8013848:	2b00      	cmp	r3, #0
 801384a:	d001      	beq.n	8013850 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801384c:	f000 fe06 	bl	801445c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013850:	7bbb      	ldrb	r3, [r7, #14]
 8013852:	3b01      	subs	r3, #1
 8013854:	b2db      	uxtb	r3, r3
 8013856:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013858:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801385c:	2b00      	cmp	r3, #0
 801385e:	dce9      	bgt.n	8013834 <prvUnlockQueue+0x60>
 8013860:	e000      	b.n	8013864 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013862:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	22ff      	movs	r2, #255	@ 0xff
 8013868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801386c:	f001 fb76 	bl	8014f5c <vPortExitCritical>
}
 8013870:	bf00      	nop
 8013872:	3710      	adds	r7, #16
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013880:	f001 fb3a 	bl	8014ef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013888:	2b00      	cmp	r3, #0
 801388a:	d102      	bne.n	8013892 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801388c:	2301      	movs	r3, #1
 801388e:	60fb      	str	r3, [r7, #12]
 8013890:	e001      	b.n	8013896 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013892:	2300      	movs	r3, #0
 8013894:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013896:	f001 fb61 	bl	8014f5c <vPortExitCritical>

	return xReturn;
 801389a:	68fb      	ldr	r3, [r7, #12]
}
 801389c:	4618      	mov	r0, r3
 801389e:	3710      	adds	r7, #16
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}

080138a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b084      	sub	sp, #16
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80138ac:	f001 fb24 	bl	8014ef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80138b8:	429a      	cmp	r2, r3
 80138ba:	d102      	bne.n	80138c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80138bc:	2301      	movs	r3, #1
 80138be:	60fb      	str	r3, [r7, #12]
 80138c0:	e001      	b.n	80138c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80138c2:	2300      	movs	r3, #0
 80138c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80138c6:	f001 fb49 	bl	8014f5c <vPortExitCritical>

	return xReturn;
 80138ca:	68fb      	ldr	r3, [r7, #12]
}
 80138cc:	4618      	mov	r0, r3
 80138ce:	3710      	adds	r7, #16
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}

080138d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b08c      	sub	sp, #48	@ 0x30
 80138d8:	af04      	add	r7, sp, #16
 80138da:	60f8      	str	r0, [r7, #12]
 80138dc:	60b9      	str	r1, [r7, #8]
 80138de:	603b      	str	r3, [r7, #0]
 80138e0:	4613      	mov	r3, r2
 80138e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80138e4:	88fb      	ldrh	r3, [r7, #6]
 80138e6:	009b      	lsls	r3, r3, #2
 80138e8:	4618      	mov	r0, r3
 80138ea:	f001 fc27 	bl	801513c <pvPortMalloc>
 80138ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d00e      	beq.n	8013914 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80138f6:	20ac      	movs	r0, #172	@ 0xac
 80138f8:	f001 fc20 	bl	801513c <pvPortMalloc>
 80138fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80138fe:	69fb      	ldr	r3, [r7, #28]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d003      	beq.n	801390c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	697a      	ldr	r2, [r7, #20]
 8013908:	631a      	str	r2, [r3, #48]	@ 0x30
 801390a:	e005      	b.n	8013918 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801390c:	6978      	ldr	r0, [r7, #20]
 801390e:	f001 fce3 	bl	80152d8 <vPortFree>
 8013912:	e001      	b.n	8013918 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013914:	2300      	movs	r3, #0
 8013916:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013918:	69fb      	ldr	r3, [r7, #28]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d013      	beq.n	8013946 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801391e:	88fa      	ldrh	r2, [r7, #6]
 8013920:	2300      	movs	r3, #0
 8013922:	9303      	str	r3, [sp, #12]
 8013924:	69fb      	ldr	r3, [r7, #28]
 8013926:	9302      	str	r3, [sp, #8]
 8013928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801392a:	9301      	str	r3, [sp, #4]
 801392c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801392e:	9300      	str	r3, [sp, #0]
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	68b9      	ldr	r1, [r7, #8]
 8013934:	68f8      	ldr	r0, [r7, #12]
 8013936:	f000 f80f 	bl	8013958 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801393a:	69f8      	ldr	r0, [r7, #28]
 801393c:	f000 f8b6 	bl	8013aac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013940:	2301      	movs	r3, #1
 8013942:	61bb      	str	r3, [r7, #24]
 8013944:	e002      	b.n	801394c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801394a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801394c:	69bb      	ldr	r3, [r7, #24]
	}
 801394e:	4618      	mov	r0, r3
 8013950:	3720      	adds	r7, #32
 8013952:	46bd      	mov	sp, r7
 8013954:	bd80      	pop	{r7, pc}
	...

08013958 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b088      	sub	sp, #32
 801395c:	af00      	add	r7, sp, #0
 801395e:	60f8      	str	r0, [r7, #12]
 8013960:	60b9      	str	r1, [r7, #8]
 8013962:	607a      	str	r2, [r7, #4]
 8013964:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013968:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	009b      	lsls	r3, r3, #2
 801396e:	461a      	mov	r2, r3
 8013970:	21a5      	movs	r1, #165	@ 0xa5
 8013972:	f005 f81d 	bl	80189b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013980:	3b01      	subs	r3, #1
 8013982:	009b      	lsls	r3, r3, #2
 8013984:	4413      	add	r3, r2
 8013986:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013988:	69bb      	ldr	r3, [r7, #24]
 801398a:	f023 0307 	bic.w	r3, r3, #7
 801398e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013990:	69bb      	ldr	r3, [r7, #24]
 8013992:	f003 0307 	and.w	r3, r3, #7
 8013996:	2b00      	cmp	r3, #0
 8013998:	d00b      	beq.n	80139b2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801399a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801399e:	f383 8811 	msr	BASEPRI, r3
 80139a2:	f3bf 8f6f 	isb	sy
 80139a6:	f3bf 8f4f 	dsb	sy
 80139aa:	617b      	str	r3, [r7, #20]
}
 80139ac:	bf00      	nop
 80139ae:	bf00      	nop
 80139b0:	e7fd      	b.n	80139ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d01f      	beq.n	80139f8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139b8:	2300      	movs	r3, #0
 80139ba:	61fb      	str	r3, [r7, #28]
 80139bc:	e012      	b.n	80139e4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80139be:	68ba      	ldr	r2, [r7, #8]
 80139c0:	69fb      	ldr	r3, [r7, #28]
 80139c2:	4413      	add	r3, r2
 80139c4:	7819      	ldrb	r1, [r3, #0]
 80139c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80139c8:	69fb      	ldr	r3, [r7, #28]
 80139ca:	4413      	add	r3, r2
 80139cc:	3334      	adds	r3, #52	@ 0x34
 80139ce:	460a      	mov	r2, r1
 80139d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80139d2:	68ba      	ldr	r2, [r7, #8]
 80139d4:	69fb      	ldr	r3, [r7, #28]
 80139d6:	4413      	add	r3, r2
 80139d8:	781b      	ldrb	r3, [r3, #0]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d006      	beq.n	80139ec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139de:	69fb      	ldr	r3, [r7, #28]
 80139e0:	3301      	adds	r3, #1
 80139e2:	61fb      	str	r3, [r7, #28]
 80139e4:	69fb      	ldr	r3, [r7, #28]
 80139e6:	2b0f      	cmp	r3, #15
 80139e8:	d9e9      	bls.n	80139be <prvInitialiseNewTask+0x66>
 80139ea:	e000      	b.n	80139ee <prvInitialiseNewTask+0x96>
			{
				break;
 80139ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80139ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139f0:	2200      	movs	r2, #0
 80139f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80139f6:	e003      	b.n	8013a00 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80139f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139fa:	2200      	movs	r2, #0
 80139fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a02:	2b06      	cmp	r3, #6
 8013a04:	d901      	bls.n	8013a0a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013a06:	2306      	movs	r3, #6
 8013a08:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a14:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a18:	2200      	movs	r2, #0
 8013a1a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a1e:	3304      	adds	r3, #4
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7ff f833 	bl	8012a8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a28:	3318      	adds	r3, #24
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7ff f82e 	bl	8012a8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a38:	f1c3 0207 	rsb	r2, r3, #7
 8013a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a44:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a48:	2200      	movs	r2, #0
 8013a4a:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a4e:	2200      	movs	r2, #0
 8013a50:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a56:	2200      	movs	r2, #0
 8013a58:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a5e:	3358      	adds	r3, #88	@ 0x58
 8013a60:	224c      	movs	r2, #76	@ 0x4c
 8013a62:	2100      	movs	r1, #0
 8013a64:	4618      	mov	r0, r3
 8013a66:	f004 ffa3 	bl	80189b0 <memset>
 8013a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8013aa0 <prvInitialiseNewTask+0x148>)
 8013a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8013a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a72:	4a0c      	ldr	r2, [pc, #48]	@ (8013aa4 <prvInitialiseNewTask+0x14c>)
 8013a74:	661a      	str	r2, [r3, #96]	@ 0x60
 8013a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a78:	4a0b      	ldr	r2, [pc, #44]	@ (8013aa8 <prvInitialiseNewTask+0x150>)
 8013a7a:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013a7c:	683a      	ldr	r2, [r7, #0]
 8013a7e:	68f9      	ldr	r1, [r7, #12]
 8013a80:	69b8      	ldr	r0, [r7, #24]
 8013a82:	f001 f90b 	bl	8014c9c <pxPortInitialiseStack>
 8013a86:	4602      	mov	r2, r0
 8013a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d002      	beq.n	8013a98 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a98:	bf00      	nop
 8013a9a:	3720      	adds	r7, #32
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}
 8013aa0:	200076c4 	.word	0x200076c4
 8013aa4:	2000772c 	.word	0x2000772c
 8013aa8:	20007794 	.word	0x20007794

08013aac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b082      	sub	sp, #8
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013ab4:	f001 fa20 	bl	8014ef8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8013b6c <prvAddNewTaskToReadyList+0xc0>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	3301      	adds	r3, #1
 8013abe:	4a2b      	ldr	r2, [pc, #172]	@ (8013b6c <prvAddNewTaskToReadyList+0xc0>)
 8013ac0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8013b70 <prvAddNewTaskToReadyList+0xc4>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d109      	bne.n	8013ade <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013aca:	4a29      	ldr	r2, [pc, #164]	@ (8013b70 <prvAddNewTaskToReadyList+0xc4>)
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013ad0:	4b26      	ldr	r3, [pc, #152]	@ (8013b6c <prvAddNewTaskToReadyList+0xc0>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	2b01      	cmp	r3, #1
 8013ad6:	d110      	bne.n	8013afa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013ad8:	f000 fce4 	bl	80144a4 <prvInitialiseTaskLists>
 8013adc:	e00d      	b.n	8013afa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013ade:	4b25      	ldr	r3, [pc, #148]	@ (8013b74 <prvAddNewTaskToReadyList+0xc8>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d109      	bne.n	8013afa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013ae6:	4b22      	ldr	r3, [pc, #136]	@ (8013b70 <prvAddNewTaskToReadyList+0xc4>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d802      	bhi.n	8013afa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013af4:	4a1e      	ldr	r2, [pc, #120]	@ (8013b70 <prvAddNewTaskToReadyList+0xc4>)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013afa:	4b1f      	ldr	r3, [pc, #124]	@ (8013b78 <prvAddNewTaskToReadyList+0xcc>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	3301      	adds	r3, #1
 8013b00:	4a1d      	ldr	r2, [pc, #116]	@ (8013b78 <prvAddNewTaskToReadyList+0xcc>)
 8013b02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013b04:	4b1c      	ldr	r3, [pc, #112]	@ (8013b78 <prvAddNewTaskToReadyList+0xcc>)
 8013b06:	681a      	ldr	r2, [r3, #0]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b10:	2201      	movs	r2, #1
 8013b12:	409a      	lsls	r2, r3
 8013b14:	4b19      	ldr	r3, [pc, #100]	@ (8013b7c <prvAddNewTaskToReadyList+0xd0>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	4313      	orrs	r3, r2
 8013b1a:	4a18      	ldr	r2, [pc, #96]	@ (8013b7c <prvAddNewTaskToReadyList+0xd0>)
 8013b1c:	6013      	str	r3, [r2, #0]
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b22:	4613      	mov	r3, r2
 8013b24:	009b      	lsls	r3, r3, #2
 8013b26:	4413      	add	r3, r2
 8013b28:	009b      	lsls	r3, r3, #2
 8013b2a:	4a15      	ldr	r2, [pc, #84]	@ (8013b80 <prvAddNewTaskToReadyList+0xd4>)
 8013b2c:	441a      	add	r2, r3
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	3304      	adds	r3, #4
 8013b32:	4619      	mov	r1, r3
 8013b34:	4610      	mov	r0, r2
 8013b36:	f7fe ffb6 	bl	8012aa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013b3a:	f001 fa0f 	bl	8014f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8013b74 <prvAddNewTaskToReadyList+0xc8>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d00e      	beq.n	8013b64 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013b46:	4b0a      	ldr	r3, [pc, #40]	@ (8013b70 <prvAddNewTaskToReadyList+0xc4>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d207      	bcs.n	8013b64 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013b54:	4b0b      	ldr	r3, [pc, #44]	@ (8013b84 <prvAddNewTaskToReadyList+0xd8>)
 8013b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013b5a:	601a      	str	r2, [r3, #0]
 8013b5c:	f3bf 8f4f 	dsb	sy
 8013b60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b64:	bf00      	nop
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}
 8013b6c:	200036e0 	.word	0x200036e0
 8013b70:	200035e0 	.word	0x200035e0
 8013b74:	200036ec 	.word	0x200036ec
 8013b78:	200036fc 	.word	0x200036fc
 8013b7c:	200036e8 	.word	0x200036e8
 8013b80:	200035e4 	.word	0x200035e4
 8013b84:	e000ed04 	.word	0xe000ed04

08013b88 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b084      	sub	sp, #16
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013b90:	f001 f9b2 	bl	8014ef8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d102      	bne.n	8013ba0 <vTaskDelete+0x18>
 8013b9a:	4b39      	ldr	r3, [pc, #228]	@ (8013c80 <vTaskDelete+0xf8>)
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	e000      	b.n	8013ba2 <vTaskDelete+0x1a>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	3304      	adds	r3, #4
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7fe ffd9 	bl	8012b60 <uxListRemove>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d115      	bne.n	8013be0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bb8:	4932      	ldr	r1, [pc, #200]	@ (8013c84 <vTaskDelete+0xfc>)
 8013bba:	4613      	mov	r3, r2
 8013bbc:	009b      	lsls	r3, r3, #2
 8013bbe:	4413      	add	r3, r2
 8013bc0:	009b      	lsls	r3, r3, #2
 8013bc2:	440b      	add	r3, r1
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d10a      	bne.n	8013be0 <vTaskDelete+0x58>
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bce:	2201      	movs	r2, #1
 8013bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8013bd4:	43da      	mvns	r2, r3
 8013bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8013c88 <vTaskDelete+0x100>)
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	4013      	ands	r3, r2
 8013bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8013c88 <vTaskDelete+0x100>)
 8013bde:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d004      	beq.n	8013bf2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	3318      	adds	r3, #24
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7fe ffb7 	bl	8012b60 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8013bf2:	4b26      	ldr	r3, [pc, #152]	@ (8013c8c <vTaskDelete+0x104>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	3301      	adds	r3, #1
 8013bf8:	4a24      	ldr	r2, [pc, #144]	@ (8013c8c <vTaskDelete+0x104>)
 8013bfa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8013bfc:	4b20      	ldr	r3, [pc, #128]	@ (8013c80 <vTaskDelete+0xf8>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	68fa      	ldr	r2, [r7, #12]
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d10b      	bne.n	8013c1e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	3304      	adds	r3, #4
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	4820      	ldr	r0, [pc, #128]	@ (8013c90 <vTaskDelete+0x108>)
 8013c0e:	f7fe ff4a 	bl	8012aa6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8013c12:	4b20      	ldr	r3, [pc, #128]	@ (8013c94 <vTaskDelete+0x10c>)
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	3301      	adds	r3, #1
 8013c18:	4a1e      	ldr	r2, [pc, #120]	@ (8013c94 <vTaskDelete+0x10c>)
 8013c1a:	6013      	str	r3, [r2, #0]
 8013c1c:	e009      	b.n	8013c32 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8013c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8013c98 <vTaskDelete+0x110>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	3b01      	subs	r3, #1
 8013c24:	4a1c      	ldr	r2, [pc, #112]	@ (8013c98 <vTaskDelete+0x110>)
 8013c26:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8013c28:	68f8      	ldr	r0, [r7, #12]
 8013c2a:	f000 fca9 	bl	8014580 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8013c2e:	f000 fcbd 	bl	80145ac <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8013c32:	f001 f993 	bl	8014f5c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8013c36:	4b19      	ldr	r3, [pc, #100]	@ (8013c9c <vTaskDelete+0x114>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d01c      	beq.n	8013c78 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8013c3e:	4b10      	ldr	r3, [pc, #64]	@ (8013c80 <vTaskDelete+0xf8>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	68fa      	ldr	r2, [r7, #12]
 8013c44:	429a      	cmp	r2, r3
 8013c46:	d117      	bne.n	8013c78 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8013c48:	4b15      	ldr	r3, [pc, #84]	@ (8013ca0 <vTaskDelete+0x118>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d00b      	beq.n	8013c68 <vTaskDelete+0xe0>
	__asm volatile
 8013c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c54:	f383 8811 	msr	BASEPRI, r3
 8013c58:	f3bf 8f6f 	isb	sy
 8013c5c:	f3bf 8f4f 	dsb	sy
 8013c60:	60bb      	str	r3, [r7, #8]
}
 8013c62:	bf00      	nop
 8013c64:	bf00      	nop
 8013c66:	e7fd      	b.n	8013c64 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8013c68:	4b0e      	ldr	r3, [pc, #56]	@ (8013ca4 <vTaskDelete+0x11c>)
 8013c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c6e:	601a      	str	r2, [r3, #0]
 8013c70:	f3bf 8f4f 	dsb	sy
 8013c74:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013c78:	bf00      	nop
 8013c7a:	3710      	adds	r7, #16
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}
 8013c80:	200035e0 	.word	0x200035e0
 8013c84:	200035e4 	.word	0x200035e4
 8013c88:	200036e8 	.word	0x200036e8
 8013c8c:	200036fc 	.word	0x200036fc
 8013c90:	200036b4 	.word	0x200036b4
 8013c94:	200036c8 	.word	0x200036c8
 8013c98:	200036e0 	.word	0x200036e0
 8013c9c:	200036ec 	.word	0x200036ec
 8013ca0:	20003708 	.word	0x20003708
 8013ca4:	e000ed04 	.word	0xe000ed04

08013ca8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b084      	sub	sp, #16
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d018      	beq.n	8013cec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013cba:	4b14      	ldr	r3, [pc, #80]	@ (8013d0c <vTaskDelay+0x64>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d00b      	beq.n	8013cda <vTaskDelay+0x32>
	__asm volatile
 8013cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cc6:	f383 8811 	msr	BASEPRI, r3
 8013cca:	f3bf 8f6f 	isb	sy
 8013cce:	f3bf 8f4f 	dsb	sy
 8013cd2:	60bb      	str	r3, [r7, #8]
}
 8013cd4:	bf00      	nop
 8013cd6:	bf00      	nop
 8013cd8:	e7fd      	b.n	8013cd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013cda:	f000 f8d7 	bl	8013e8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013cde:	2100      	movs	r1, #0
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f000 ff75 	bl	8014bd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013ce6:	f000 f8df 	bl	8013ea8 <xTaskResumeAll>
 8013cea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d107      	bne.n	8013d02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8013cf2:	4b07      	ldr	r3, [pc, #28]	@ (8013d10 <vTaskDelay+0x68>)
 8013cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013cf8:	601a      	str	r2, [r3, #0]
 8013cfa:	f3bf 8f4f 	dsb	sy
 8013cfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013d02:	bf00      	nop
 8013d04:	3710      	adds	r7, #16
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}
 8013d0a:	bf00      	nop
 8013d0c:	20003708 	.word	0x20003708
 8013d10:	e000ed04 	.word	0xe000ed04

08013d14 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b088      	sub	sp, #32
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8013d20:	69bb      	ldr	r3, [r7, #24]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d10b      	bne.n	8013d3e <eTaskGetState+0x2a>
	__asm volatile
 8013d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d2a:	f383 8811 	msr	BASEPRI, r3
 8013d2e:	f3bf 8f6f 	isb	sy
 8013d32:	f3bf 8f4f 	dsb	sy
 8013d36:	60bb      	str	r3, [r7, #8]
}
 8013d38:	bf00      	nop
 8013d3a:	bf00      	nop
 8013d3c:	e7fd      	b.n	8013d3a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8013d3e:	4b24      	ldr	r3, [pc, #144]	@ (8013dd0 <eTaskGetState+0xbc>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	69ba      	ldr	r2, [r7, #24]
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d102      	bne.n	8013d4e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8013d48:	2300      	movs	r3, #0
 8013d4a:	77fb      	strb	r3, [r7, #31]
 8013d4c:	e03a      	b.n	8013dc4 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8013d4e:	f001 f8d3 	bl	8014ef8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8013d52:	69bb      	ldr	r3, [r7, #24]
 8013d54:	695b      	ldr	r3, [r3, #20]
 8013d56:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8013d58:	4b1e      	ldr	r3, [pc, #120]	@ (8013dd4 <eTaskGetState+0xc0>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8013d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8013dd8 <eTaskGetState+0xc4>)
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8013d64:	f001 f8fa 	bl	8014f5c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8013d68:	697a      	ldr	r2, [r7, #20]
 8013d6a:	693b      	ldr	r3, [r7, #16]
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d003      	beq.n	8013d78 <eTaskGetState+0x64>
 8013d70:	697a      	ldr	r2, [r7, #20]
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d102      	bne.n	8013d7e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8013d78:	2302      	movs	r3, #2
 8013d7a:	77fb      	strb	r3, [r7, #31]
 8013d7c:	e022      	b.n	8013dc4 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	4a16      	ldr	r2, [pc, #88]	@ (8013ddc <eTaskGetState+0xc8>)
 8013d82:	4293      	cmp	r3, r2
 8013d84:	d112      	bne.n	8013dac <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8013d86:	69bb      	ldr	r3, [r7, #24]
 8013d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d10b      	bne.n	8013da6 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013d8e:	69bb      	ldr	r3, [r7, #24]
 8013d90:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8013d94:	b2db      	uxtb	r3, r3
 8013d96:	2b01      	cmp	r3, #1
 8013d98:	d102      	bne.n	8013da0 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8013d9a:	2302      	movs	r3, #2
 8013d9c:	77fb      	strb	r3, [r7, #31]
 8013d9e:	e011      	b.n	8013dc4 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8013da0:	2303      	movs	r3, #3
 8013da2:	77fb      	strb	r3, [r7, #31]
 8013da4:	e00e      	b.n	8013dc4 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8013da6:	2302      	movs	r3, #2
 8013da8:	77fb      	strb	r3, [r7, #31]
 8013daa:	e00b      	b.n	8013dc4 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	4a0c      	ldr	r2, [pc, #48]	@ (8013de0 <eTaskGetState+0xcc>)
 8013db0:	4293      	cmp	r3, r2
 8013db2:	d002      	beq.n	8013dba <eTaskGetState+0xa6>
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d102      	bne.n	8013dc0 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8013dba:	2304      	movs	r3, #4
 8013dbc:	77fb      	strb	r3, [r7, #31]
 8013dbe:	e001      	b.n	8013dc4 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8013dc4:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	3720      	adds	r7, #32
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
 8013dce:	bf00      	nop
 8013dd0:	200035e0 	.word	0x200035e0
 8013dd4:	20003698 	.word	0x20003698
 8013dd8:	2000369c 	.word	0x2000369c
 8013ddc:	200036cc 	.word	0x200036cc
 8013de0:	200036b4 	.word	0x200036b4

08013de4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b086      	sub	sp, #24
 8013de8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8013dea:	4b20      	ldr	r3, [pc, #128]	@ (8013e6c <vTaskStartScheduler+0x88>)
 8013dec:	9301      	str	r3, [sp, #4]
 8013dee:	2300      	movs	r3, #0
 8013df0:	9300      	str	r3, [sp, #0]
 8013df2:	2300      	movs	r3, #0
 8013df4:	2240      	movs	r2, #64	@ 0x40
 8013df6:	491e      	ldr	r1, [pc, #120]	@ (8013e70 <vTaskStartScheduler+0x8c>)
 8013df8:	481e      	ldr	r0, [pc, #120]	@ (8013e74 <vTaskStartScheduler+0x90>)
 8013dfa:	f7ff fd6b 	bl	80138d4 <xTaskCreate>
 8013dfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	2b01      	cmp	r3, #1
 8013e04:	d11d      	bne.n	8013e42 <vTaskStartScheduler+0x5e>
	__asm volatile
 8013e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e0a:	f383 8811 	msr	BASEPRI, r3
 8013e0e:	f3bf 8f6f 	isb	sy
 8013e12:	f3bf 8f4f 	dsb	sy
 8013e16:	60bb      	str	r3, [r7, #8]
}
 8013e18:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013e1a:	4b17      	ldr	r3, [pc, #92]	@ (8013e78 <vTaskStartScheduler+0x94>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	3358      	adds	r3, #88	@ 0x58
 8013e20:	4a16      	ldr	r2, [pc, #88]	@ (8013e7c <vTaskStartScheduler+0x98>)
 8013e22:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013e24:	4b16      	ldr	r3, [pc, #88]	@ (8013e80 <vTaskStartScheduler+0x9c>)
 8013e26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013e2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013e2c:	4b15      	ldr	r3, [pc, #84]	@ (8013e84 <vTaskStartScheduler+0xa0>)
 8013e2e:	2201      	movs	r2, #1
 8013e30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013e32:	4b15      	ldr	r3, [pc, #84]	@ (8013e88 <vTaskStartScheduler+0xa4>)
 8013e34:	2200      	movs	r2, #0
 8013e36:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8013e38:	f7ef fc0a 	bl	8003650 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013e3c:	f000 ffb8 	bl	8014db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013e40:	e00f      	b.n	8013e62 <vTaskStartScheduler+0x7e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013e48:	d10b      	bne.n	8013e62 <vTaskStartScheduler+0x7e>
	__asm volatile
 8013e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e4e:	f383 8811 	msr	BASEPRI, r3
 8013e52:	f3bf 8f6f 	isb	sy
 8013e56:	f3bf 8f4f 	dsb	sy
 8013e5a:	607b      	str	r3, [r7, #4]
}
 8013e5c:	bf00      	nop
 8013e5e:	bf00      	nop
 8013e60:	e7fd      	b.n	8013e5e <vTaskStartScheduler+0x7a>
}
 8013e62:	bf00      	nop
 8013e64:	3710      	adds	r7, #16
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}
 8013e6a:	bf00      	nop
 8013e6c:	20003704 	.word	0x20003704
 8013e70:	0801bcb0 	.word	0x0801bcb0
 8013e74:	08014475 	.word	0x08014475
 8013e78:	200035e0 	.word	0x200035e0
 8013e7c:	20000494 	.word	0x20000494
 8013e80:	20003700 	.word	0x20003700
 8013e84:	200036ec 	.word	0x200036ec
 8013e88:	200036e4 	.word	0x200036e4

08013e8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013e90:	4b04      	ldr	r3, [pc, #16]	@ (8013ea4 <vTaskSuspendAll+0x18>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	3301      	adds	r3, #1
 8013e96:	4a03      	ldr	r2, [pc, #12]	@ (8013ea4 <vTaskSuspendAll+0x18>)
 8013e98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013e9a:	bf00      	nop
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea2:	4770      	bx	lr
 8013ea4:	20003708 	.word	0x20003708

08013ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b084      	sub	sp, #16
 8013eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013eb6:	4b42      	ldr	r3, [pc, #264]	@ (8013fc0 <xTaskResumeAll+0x118>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d10b      	bne.n	8013ed6 <xTaskResumeAll+0x2e>
	__asm volatile
 8013ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ec2:	f383 8811 	msr	BASEPRI, r3
 8013ec6:	f3bf 8f6f 	isb	sy
 8013eca:	f3bf 8f4f 	dsb	sy
 8013ece:	603b      	str	r3, [r7, #0]
}
 8013ed0:	bf00      	nop
 8013ed2:	bf00      	nop
 8013ed4:	e7fd      	b.n	8013ed2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013ed6:	f001 f80f 	bl	8014ef8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013eda:	4b39      	ldr	r3, [pc, #228]	@ (8013fc0 <xTaskResumeAll+0x118>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	3b01      	subs	r3, #1
 8013ee0:	4a37      	ldr	r2, [pc, #220]	@ (8013fc0 <xTaskResumeAll+0x118>)
 8013ee2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ee4:	4b36      	ldr	r3, [pc, #216]	@ (8013fc0 <xTaskResumeAll+0x118>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d161      	bne.n	8013fb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013eec:	4b35      	ldr	r3, [pc, #212]	@ (8013fc4 <xTaskResumeAll+0x11c>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d05d      	beq.n	8013fb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013ef4:	e02e      	b.n	8013f54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ef6:	4b34      	ldr	r3, [pc, #208]	@ (8013fc8 <xTaskResumeAll+0x120>)
 8013ef8:	68db      	ldr	r3, [r3, #12]
 8013efa:	68db      	ldr	r3, [r3, #12]
 8013efc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	3318      	adds	r3, #24
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7fe fe2c 	bl	8012b60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	3304      	adds	r3, #4
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7fe fe27 	bl	8012b60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f16:	2201      	movs	r2, #1
 8013f18:	409a      	lsls	r2, r3
 8013f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8013fcc <xTaskResumeAll+0x124>)
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	4313      	orrs	r3, r2
 8013f20:	4a2a      	ldr	r2, [pc, #168]	@ (8013fcc <xTaskResumeAll+0x124>)
 8013f22:	6013      	str	r3, [r2, #0]
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f28:	4613      	mov	r3, r2
 8013f2a:	009b      	lsls	r3, r3, #2
 8013f2c:	4413      	add	r3, r2
 8013f2e:	009b      	lsls	r3, r3, #2
 8013f30:	4a27      	ldr	r2, [pc, #156]	@ (8013fd0 <xTaskResumeAll+0x128>)
 8013f32:	441a      	add	r2, r3
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	3304      	adds	r3, #4
 8013f38:	4619      	mov	r1, r3
 8013f3a:	4610      	mov	r0, r2
 8013f3c:	f7fe fdb3 	bl	8012aa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f44:	4b23      	ldr	r3, [pc, #140]	@ (8013fd4 <xTaskResumeAll+0x12c>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f4a:	429a      	cmp	r2, r3
 8013f4c:	d302      	bcc.n	8013f54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013f4e:	4b22      	ldr	r3, [pc, #136]	@ (8013fd8 <xTaskResumeAll+0x130>)
 8013f50:	2201      	movs	r2, #1
 8013f52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f54:	4b1c      	ldr	r3, [pc, #112]	@ (8013fc8 <xTaskResumeAll+0x120>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d1cc      	bne.n	8013ef6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d001      	beq.n	8013f66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013f62:	f000 fb23 	bl	80145ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013f66:	4b1d      	ldr	r3, [pc, #116]	@ (8013fdc <xTaskResumeAll+0x134>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d010      	beq.n	8013f94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013f72:	f000 f837 	bl	8013fe4 <xTaskIncrementTick>
 8013f76:	4603      	mov	r3, r0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d002      	beq.n	8013f82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013f7c:	4b16      	ldr	r3, [pc, #88]	@ (8013fd8 <xTaskResumeAll+0x130>)
 8013f7e:	2201      	movs	r2, #1
 8013f80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	3b01      	subs	r3, #1
 8013f86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d1f1      	bne.n	8013f72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013f8e:	4b13      	ldr	r3, [pc, #76]	@ (8013fdc <xTaskResumeAll+0x134>)
 8013f90:	2200      	movs	r2, #0
 8013f92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013f94:	4b10      	ldr	r3, [pc, #64]	@ (8013fd8 <xTaskResumeAll+0x130>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d009      	beq.n	8013fb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8013fe0 <xTaskResumeAll+0x138>)
 8013fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013fa6:	601a      	str	r2, [r3, #0]
 8013fa8:	f3bf 8f4f 	dsb	sy
 8013fac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013fb0:	f000 ffd4 	bl	8014f5c <vPortExitCritical>

	return xAlreadyYielded;
 8013fb4:	68bb      	ldr	r3, [r7, #8]
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3710      	adds	r7, #16
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
 8013fbe:	bf00      	nop
 8013fc0:	20003708 	.word	0x20003708
 8013fc4:	200036e0 	.word	0x200036e0
 8013fc8:	200036a0 	.word	0x200036a0
 8013fcc:	200036e8 	.word	0x200036e8
 8013fd0:	200035e4 	.word	0x200035e4
 8013fd4:	200035e0 	.word	0x200035e0
 8013fd8:	200036f4 	.word	0x200036f4
 8013fdc:	200036f0 	.word	0x200036f0
 8013fe0:	e000ed04 	.word	0xe000ed04

08013fe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b086      	sub	sp, #24
 8013fe8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013fea:	2300      	movs	r3, #0
 8013fec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013fee:	4b4f      	ldr	r3, [pc, #316]	@ (801412c <xTaskIncrementTick+0x148>)
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	f040 808f 	bne.w	8014116 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8014130 <xTaskIncrementTick+0x14c>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	3301      	adds	r3, #1
 8013ffe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014000:	4a4b      	ldr	r2, [pc, #300]	@ (8014130 <xTaskIncrementTick+0x14c>)
 8014002:	693b      	ldr	r3, [r7, #16]
 8014004:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014006:	693b      	ldr	r3, [r7, #16]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d121      	bne.n	8014050 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801400c:	4b49      	ldr	r3, [pc, #292]	@ (8014134 <xTaskIncrementTick+0x150>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d00b      	beq.n	801402e <xTaskIncrementTick+0x4a>
	__asm volatile
 8014016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801401a:	f383 8811 	msr	BASEPRI, r3
 801401e:	f3bf 8f6f 	isb	sy
 8014022:	f3bf 8f4f 	dsb	sy
 8014026:	603b      	str	r3, [r7, #0]
}
 8014028:	bf00      	nop
 801402a:	bf00      	nop
 801402c:	e7fd      	b.n	801402a <xTaskIncrementTick+0x46>
 801402e:	4b41      	ldr	r3, [pc, #260]	@ (8014134 <xTaskIncrementTick+0x150>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	60fb      	str	r3, [r7, #12]
 8014034:	4b40      	ldr	r3, [pc, #256]	@ (8014138 <xTaskIncrementTick+0x154>)
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	4a3e      	ldr	r2, [pc, #248]	@ (8014134 <xTaskIncrementTick+0x150>)
 801403a:	6013      	str	r3, [r2, #0]
 801403c:	4a3e      	ldr	r2, [pc, #248]	@ (8014138 <xTaskIncrementTick+0x154>)
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	6013      	str	r3, [r2, #0]
 8014042:	4b3e      	ldr	r3, [pc, #248]	@ (801413c <xTaskIncrementTick+0x158>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	3301      	adds	r3, #1
 8014048:	4a3c      	ldr	r2, [pc, #240]	@ (801413c <xTaskIncrementTick+0x158>)
 801404a:	6013      	str	r3, [r2, #0]
 801404c:	f000 faae 	bl	80145ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014050:	4b3b      	ldr	r3, [pc, #236]	@ (8014140 <xTaskIncrementTick+0x15c>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	693a      	ldr	r2, [r7, #16]
 8014056:	429a      	cmp	r2, r3
 8014058:	d348      	bcc.n	80140ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801405a:	4b36      	ldr	r3, [pc, #216]	@ (8014134 <xTaskIncrementTick+0x150>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d104      	bne.n	801406e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014064:	4b36      	ldr	r3, [pc, #216]	@ (8014140 <xTaskIncrementTick+0x15c>)
 8014066:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801406a:	601a      	str	r2, [r3, #0]
					break;
 801406c:	e03e      	b.n	80140ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801406e:	4b31      	ldr	r3, [pc, #196]	@ (8014134 <xTaskIncrementTick+0x150>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	68db      	ldr	r3, [r3, #12]
 8014074:	68db      	ldr	r3, [r3, #12]
 8014076:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	685b      	ldr	r3, [r3, #4]
 801407c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801407e:	693a      	ldr	r2, [r7, #16]
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	429a      	cmp	r2, r3
 8014084:	d203      	bcs.n	801408e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014086:	4a2e      	ldr	r2, [pc, #184]	@ (8014140 <xTaskIncrementTick+0x15c>)
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801408c:	e02e      	b.n	80140ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801408e:	68bb      	ldr	r3, [r7, #8]
 8014090:	3304      	adds	r3, #4
 8014092:	4618      	mov	r0, r3
 8014094:	f7fe fd64 	bl	8012b60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801409c:	2b00      	cmp	r3, #0
 801409e:	d004      	beq.n	80140aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	3318      	adds	r3, #24
 80140a4:	4618      	mov	r0, r3
 80140a6:	f7fe fd5b 	bl	8012b60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140ae:	2201      	movs	r2, #1
 80140b0:	409a      	lsls	r2, r3
 80140b2:	4b24      	ldr	r3, [pc, #144]	@ (8014144 <xTaskIncrementTick+0x160>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	4313      	orrs	r3, r2
 80140b8:	4a22      	ldr	r2, [pc, #136]	@ (8014144 <xTaskIncrementTick+0x160>)
 80140ba:	6013      	str	r3, [r2, #0]
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140c0:	4613      	mov	r3, r2
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	4413      	add	r3, r2
 80140c6:	009b      	lsls	r3, r3, #2
 80140c8:	4a1f      	ldr	r2, [pc, #124]	@ (8014148 <xTaskIncrementTick+0x164>)
 80140ca:	441a      	add	r2, r3
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	3304      	adds	r3, #4
 80140d0:	4619      	mov	r1, r3
 80140d2:	4610      	mov	r0, r2
 80140d4:	f7fe fce7 	bl	8012aa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140dc:	4b1b      	ldr	r3, [pc, #108]	@ (801414c <xTaskIncrementTick+0x168>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140e2:	429a      	cmp	r2, r3
 80140e4:	d3b9      	bcc.n	801405a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80140e6:	2301      	movs	r3, #1
 80140e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80140ea:	e7b6      	b.n	801405a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80140ec:	4b17      	ldr	r3, [pc, #92]	@ (801414c <xTaskIncrementTick+0x168>)
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140f2:	4915      	ldr	r1, [pc, #84]	@ (8014148 <xTaskIncrementTick+0x164>)
 80140f4:	4613      	mov	r3, r2
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	4413      	add	r3, r2
 80140fa:	009b      	lsls	r3, r3, #2
 80140fc:	440b      	add	r3, r1
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	2b01      	cmp	r3, #1
 8014102:	d901      	bls.n	8014108 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014104:	2301      	movs	r3, #1
 8014106:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014108:	4b11      	ldr	r3, [pc, #68]	@ (8014150 <xTaskIncrementTick+0x16c>)
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d007      	beq.n	8014120 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014110:	2301      	movs	r3, #1
 8014112:	617b      	str	r3, [r7, #20]
 8014114:	e004      	b.n	8014120 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014116:	4b0f      	ldr	r3, [pc, #60]	@ (8014154 <xTaskIncrementTick+0x170>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	3301      	adds	r3, #1
 801411c:	4a0d      	ldr	r2, [pc, #52]	@ (8014154 <xTaskIncrementTick+0x170>)
 801411e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014120:	697b      	ldr	r3, [r7, #20]
}
 8014122:	4618      	mov	r0, r3
 8014124:	3718      	adds	r7, #24
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}
 801412a:	bf00      	nop
 801412c:	20003708 	.word	0x20003708
 8014130:	200036e4 	.word	0x200036e4
 8014134:	20003698 	.word	0x20003698
 8014138:	2000369c 	.word	0x2000369c
 801413c:	200036f8 	.word	0x200036f8
 8014140:	20003700 	.word	0x20003700
 8014144:	200036e8 	.word	0x200036e8
 8014148:	200035e4 	.word	0x200035e4
 801414c:	200035e0 	.word	0x200035e0
 8014150:	200036f4 	.word	0x200036f4
 8014154:	200036f0 	.word	0x200036f0

08014158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b086      	sub	sp, #24
 801415c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801415e:	4b35      	ldr	r3, [pc, #212]	@ (8014234 <vTaskSwitchContext+0xdc>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d003      	beq.n	801416e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014166:	4b34      	ldr	r3, [pc, #208]	@ (8014238 <vTaskSwitchContext+0xe0>)
 8014168:	2201      	movs	r2, #1
 801416a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801416c:	e05e      	b.n	801422c <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 801416e:	4b32      	ldr	r3, [pc, #200]	@ (8014238 <vTaskSwitchContext+0xe0>)
 8014170:	2200      	movs	r2, #0
 8014172:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8014174:	f7ef fa73 	bl	800365e <getRunTimeCounterValue>
 8014178:	4603      	mov	r3, r0
 801417a:	4a30      	ldr	r2, [pc, #192]	@ (801423c <vTaskSwitchContext+0xe4>)
 801417c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801417e:	4b2f      	ldr	r3, [pc, #188]	@ (801423c <vTaskSwitchContext+0xe4>)
 8014180:	681a      	ldr	r2, [r3, #0]
 8014182:	4b2f      	ldr	r3, [pc, #188]	@ (8014240 <vTaskSwitchContext+0xe8>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	429a      	cmp	r2, r3
 8014188:	d909      	bls.n	801419e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801418a:	4b2e      	ldr	r3, [pc, #184]	@ (8014244 <vTaskSwitchContext+0xec>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014190:	4a2a      	ldr	r2, [pc, #168]	@ (801423c <vTaskSwitchContext+0xe4>)
 8014192:	6810      	ldr	r0, [r2, #0]
 8014194:	4a2a      	ldr	r2, [pc, #168]	@ (8014240 <vTaskSwitchContext+0xe8>)
 8014196:	6812      	ldr	r2, [r2, #0]
 8014198:	1a82      	subs	r2, r0, r2
 801419a:	440a      	add	r2, r1
 801419c:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 801419e:	4b27      	ldr	r3, [pc, #156]	@ (801423c <vTaskSwitchContext+0xe4>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	4a27      	ldr	r2, [pc, #156]	@ (8014240 <vTaskSwitchContext+0xe8>)
 80141a4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141a6:	4b28      	ldr	r3, [pc, #160]	@ (8014248 <vTaskSwitchContext+0xf0>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	fab3 f383 	clz	r3, r3
 80141b2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80141b4:	7afb      	ldrb	r3, [r7, #11]
 80141b6:	f1c3 031f 	rsb	r3, r3, #31
 80141ba:	617b      	str	r3, [r7, #20]
 80141bc:	4923      	ldr	r1, [pc, #140]	@ (801424c <vTaskSwitchContext+0xf4>)
 80141be:	697a      	ldr	r2, [r7, #20]
 80141c0:	4613      	mov	r3, r2
 80141c2:	009b      	lsls	r3, r3, #2
 80141c4:	4413      	add	r3, r2
 80141c6:	009b      	lsls	r3, r3, #2
 80141c8:	440b      	add	r3, r1
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d10b      	bne.n	80141e8 <vTaskSwitchContext+0x90>
	__asm volatile
 80141d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141d4:	f383 8811 	msr	BASEPRI, r3
 80141d8:	f3bf 8f6f 	isb	sy
 80141dc:	f3bf 8f4f 	dsb	sy
 80141e0:	607b      	str	r3, [r7, #4]
}
 80141e2:	bf00      	nop
 80141e4:	bf00      	nop
 80141e6:	e7fd      	b.n	80141e4 <vTaskSwitchContext+0x8c>
 80141e8:	697a      	ldr	r2, [r7, #20]
 80141ea:	4613      	mov	r3, r2
 80141ec:	009b      	lsls	r3, r3, #2
 80141ee:	4413      	add	r3, r2
 80141f0:	009b      	lsls	r3, r3, #2
 80141f2:	4a16      	ldr	r2, [pc, #88]	@ (801424c <vTaskSwitchContext+0xf4>)
 80141f4:	4413      	add	r3, r2
 80141f6:	613b      	str	r3, [r7, #16]
 80141f8:	693b      	ldr	r3, [r7, #16]
 80141fa:	685b      	ldr	r3, [r3, #4]
 80141fc:	685a      	ldr	r2, [r3, #4]
 80141fe:	693b      	ldr	r3, [r7, #16]
 8014200:	605a      	str	r2, [r3, #4]
 8014202:	693b      	ldr	r3, [r7, #16]
 8014204:	685a      	ldr	r2, [r3, #4]
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	3308      	adds	r3, #8
 801420a:	429a      	cmp	r2, r3
 801420c:	d104      	bne.n	8014218 <vTaskSwitchContext+0xc0>
 801420e:	693b      	ldr	r3, [r7, #16]
 8014210:	685b      	ldr	r3, [r3, #4]
 8014212:	685a      	ldr	r2, [r3, #4]
 8014214:	693b      	ldr	r3, [r7, #16]
 8014216:	605a      	str	r2, [r3, #4]
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	685b      	ldr	r3, [r3, #4]
 801421c:	68db      	ldr	r3, [r3, #12]
 801421e:	4a09      	ldr	r2, [pc, #36]	@ (8014244 <vTaskSwitchContext+0xec>)
 8014220:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014222:	4b08      	ldr	r3, [pc, #32]	@ (8014244 <vTaskSwitchContext+0xec>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	3358      	adds	r3, #88	@ 0x58
 8014228:	4a09      	ldr	r2, [pc, #36]	@ (8014250 <vTaskSwitchContext+0xf8>)
 801422a:	6013      	str	r3, [r2, #0]
}
 801422c:	bf00      	nop
 801422e:	3718      	adds	r7, #24
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}
 8014234:	20003708 	.word	0x20003708
 8014238:	200036f4 	.word	0x200036f4
 801423c:	20003710 	.word	0x20003710
 8014240:	2000370c 	.word	0x2000370c
 8014244:	200035e0 	.word	0x200035e0
 8014248:	200036e8 	.word	0x200036e8
 801424c:	200035e4 	.word	0x200035e4
 8014250:	20000494 	.word	0x20000494

08014254 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014254:	b580      	push	{r7, lr}
 8014256:	b084      	sub	sp, #16
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
 801425c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d10b      	bne.n	801427c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8014264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014268:	f383 8811 	msr	BASEPRI, r3
 801426c:	f3bf 8f6f 	isb	sy
 8014270:	f3bf 8f4f 	dsb	sy
 8014274:	60fb      	str	r3, [r7, #12]
}
 8014276:	bf00      	nop
 8014278:	bf00      	nop
 801427a:	e7fd      	b.n	8014278 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801427c:	4b07      	ldr	r3, [pc, #28]	@ (801429c <vTaskPlaceOnEventList+0x48>)
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	3318      	adds	r3, #24
 8014282:	4619      	mov	r1, r3
 8014284:	6878      	ldr	r0, [r7, #4]
 8014286:	f7fe fc32 	bl	8012aee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801428a:	2101      	movs	r1, #1
 801428c:	6838      	ldr	r0, [r7, #0]
 801428e:	f000 fc9f 	bl	8014bd0 <prvAddCurrentTaskToDelayedList>
}
 8014292:	bf00      	nop
 8014294:	3710      	adds	r7, #16
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}
 801429a:	bf00      	nop
 801429c:	200035e0 	.word	0x200035e0

080142a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b086      	sub	sp, #24
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	68db      	ldr	r3, [r3, #12]
 80142ac:	68db      	ldr	r3, [r3, #12]
 80142ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d10b      	bne.n	80142ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80142b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142ba:	f383 8811 	msr	BASEPRI, r3
 80142be:	f3bf 8f6f 	isb	sy
 80142c2:	f3bf 8f4f 	dsb	sy
 80142c6:	60fb      	str	r3, [r7, #12]
}
 80142c8:	bf00      	nop
 80142ca:	bf00      	nop
 80142cc:	e7fd      	b.n	80142ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80142ce:	693b      	ldr	r3, [r7, #16]
 80142d0:	3318      	adds	r3, #24
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7fe fc44 	bl	8012b60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142d8:	4b1d      	ldr	r3, [pc, #116]	@ (8014350 <xTaskRemoveFromEventList+0xb0>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d11c      	bne.n	801431a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80142e0:	693b      	ldr	r3, [r7, #16]
 80142e2:	3304      	adds	r3, #4
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7fe fc3b 	bl	8012b60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80142ea:	693b      	ldr	r3, [r7, #16]
 80142ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142ee:	2201      	movs	r2, #1
 80142f0:	409a      	lsls	r2, r3
 80142f2:	4b18      	ldr	r3, [pc, #96]	@ (8014354 <xTaskRemoveFromEventList+0xb4>)
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	4313      	orrs	r3, r2
 80142f8:	4a16      	ldr	r2, [pc, #88]	@ (8014354 <xTaskRemoveFromEventList+0xb4>)
 80142fa:	6013      	str	r3, [r2, #0]
 80142fc:	693b      	ldr	r3, [r7, #16]
 80142fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014300:	4613      	mov	r3, r2
 8014302:	009b      	lsls	r3, r3, #2
 8014304:	4413      	add	r3, r2
 8014306:	009b      	lsls	r3, r3, #2
 8014308:	4a13      	ldr	r2, [pc, #76]	@ (8014358 <xTaskRemoveFromEventList+0xb8>)
 801430a:	441a      	add	r2, r3
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	3304      	adds	r3, #4
 8014310:	4619      	mov	r1, r3
 8014312:	4610      	mov	r0, r2
 8014314:	f7fe fbc7 	bl	8012aa6 <vListInsertEnd>
 8014318:	e005      	b.n	8014326 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801431a:	693b      	ldr	r3, [r7, #16]
 801431c:	3318      	adds	r3, #24
 801431e:	4619      	mov	r1, r3
 8014320:	480e      	ldr	r0, [pc, #56]	@ (801435c <xTaskRemoveFromEventList+0xbc>)
 8014322:	f7fe fbc0 	bl	8012aa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014326:	693b      	ldr	r3, [r7, #16]
 8014328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801432a:	4b0d      	ldr	r3, [pc, #52]	@ (8014360 <xTaskRemoveFromEventList+0xc0>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014330:	429a      	cmp	r2, r3
 8014332:	d905      	bls.n	8014340 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014334:	2301      	movs	r3, #1
 8014336:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014338:	4b0a      	ldr	r3, [pc, #40]	@ (8014364 <xTaskRemoveFromEventList+0xc4>)
 801433a:	2201      	movs	r2, #1
 801433c:	601a      	str	r2, [r3, #0]
 801433e:	e001      	b.n	8014344 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014340:	2300      	movs	r3, #0
 8014342:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014344:	697b      	ldr	r3, [r7, #20]
}
 8014346:	4618      	mov	r0, r3
 8014348:	3718      	adds	r7, #24
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	20003708 	.word	0x20003708
 8014354:	200036e8 	.word	0x200036e8
 8014358:	200035e4 	.word	0x200035e4
 801435c:	200036a0 	.word	0x200036a0
 8014360:	200035e0 	.word	0x200035e0
 8014364:	200036f4 	.word	0x200036f4

08014368 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014368:	b480      	push	{r7}
 801436a:	b083      	sub	sp, #12
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014370:	4b06      	ldr	r3, [pc, #24]	@ (801438c <vTaskInternalSetTimeOutState+0x24>)
 8014372:	681a      	ldr	r2, [r3, #0]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014378:	4b05      	ldr	r3, [pc, #20]	@ (8014390 <vTaskInternalSetTimeOutState+0x28>)
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	605a      	str	r2, [r3, #4]
}
 8014380:	bf00      	nop
 8014382:	370c      	adds	r7, #12
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr
 801438c:	200036f8 	.word	0x200036f8
 8014390:	200036e4 	.word	0x200036e4

08014394 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b088      	sub	sp, #32
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
 801439c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d10b      	bne.n	80143bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80143a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143a8:	f383 8811 	msr	BASEPRI, r3
 80143ac:	f3bf 8f6f 	isb	sy
 80143b0:	f3bf 8f4f 	dsb	sy
 80143b4:	613b      	str	r3, [r7, #16]
}
 80143b6:	bf00      	nop
 80143b8:	bf00      	nop
 80143ba:	e7fd      	b.n	80143b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d10b      	bne.n	80143da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80143c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143c6:	f383 8811 	msr	BASEPRI, r3
 80143ca:	f3bf 8f6f 	isb	sy
 80143ce:	f3bf 8f4f 	dsb	sy
 80143d2:	60fb      	str	r3, [r7, #12]
}
 80143d4:	bf00      	nop
 80143d6:	bf00      	nop
 80143d8:	e7fd      	b.n	80143d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80143da:	f000 fd8d 	bl	8014ef8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80143de:	4b1d      	ldr	r3, [pc, #116]	@ (8014454 <xTaskCheckForTimeOut+0xc0>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	685b      	ldr	r3, [r3, #4]
 80143e8:	69ba      	ldr	r2, [r7, #24]
 80143ea:	1ad3      	subs	r3, r2, r3
 80143ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80143f6:	d102      	bne.n	80143fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80143f8:	2300      	movs	r3, #0
 80143fa:	61fb      	str	r3, [r7, #28]
 80143fc:	e023      	b.n	8014446 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	681a      	ldr	r2, [r3, #0]
 8014402:	4b15      	ldr	r3, [pc, #84]	@ (8014458 <xTaskCheckForTimeOut+0xc4>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	429a      	cmp	r2, r3
 8014408:	d007      	beq.n	801441a <xTaskCheckForTimeOut+0x86>
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	69ba      	ldr	r2, [r7, #24]
 8014410:	429a      	cmp	r2, r3
 8014412:	d302      	bcc.n	801441a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014414:	2301      	movs	r3, #1
 8014416:	61fb      	str	r3, [r7, #28]
 8014418:	e015      	b.n	8014446 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	697a      	ldr	r2, [r7, #20]
 8014420:	429a      	cmp	r2, r3
 8014422:	d20b      	bcs.n	801443c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	681a      	ldr	r2, [r3, #0]
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	1ad2      	subs	r2, r2, r3
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014430:	6878      	ldr	r0, [r7, #4]
 8014432:	f7ff ff99 	bl	8014368 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014436:	2300      	movs	r3, #0
 8014438:	61fb      	str	r3, [r7, #28]
 801443a:	e004      	b.n	8014446 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	2200      	movs	r2, #0
 8014440:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014442:	2301      	movs	r3, #1
 8014444:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014446:	f000 fd89 	bl	8014f5c <vPortExitCritical>

	return xReturn;
 801444a:	69fb      	ldr	r3, [r7, #28]
}
 801444c:	4618      	mov	r0, r3
 801444e:	3720      	adds	r7, #32
 8014450:	46bd      	mov	sp, r7
 8014452:	bd80      	pop	{r7, pc}
 8014454:	200036e4 	.word	0x200036e4
 8014458:	200036f8 	.word	0x200036f8

0801445c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801445c:	b480      	push	{r7}
 801445e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014460:	4b03      	ldr	r3, [pc, #12]	@ (8014470 <vTaskMissedYield+0x14>)
 8014462:	2201      	movs	r2, #1
 8014464:	601a      	str	r2, [r3, #0]
}
 8014466:	bf00      	nop
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr
 8014470:	200036f4 	.word	0x200036f4

08014474 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801447c:	f000 f852 	bl	8014524 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014480:	4b06      	ldr	r3, [pc, #24]	@ (801449c <prvIdleTask+0x28>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	2b01      	cmp	r3, #1
 8014486:	d9f9      	bls.n	801447c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014488:	4b05      	ldr	r3, [pc, #20]	@ (80144a0 <prvIdleTask+0x2c>)
 801448a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801448e:	601a      	str	r2, [r3, #0]
 8014490:	f3bf 8f4f 	dsb	sy
 8014494:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014498:	e7f0      	b.n	801447c <prvIdleTask+0x8>
 801449a:	bf00      	nop
 801449c:	200035e4 	.word	0x200035e4
 80144a0:	e000ed04 	.word	0xe000ed04

080144a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b082      	sub	sp, #8
 80144a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80144aa:	2300      	movs	r3, #0
 80144ac:	607b      	str	r3, [r7, #4]
 80144ae:	e00c      	b.n	80144ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80144b0:	687a      	ldr	r2, [r7, #4]
 80144b2:	4613      	mov	r3, r2
 80144b4:	009b      	lsls	r3, r3, #2
 80144b6:	4413      	add	r3, r2
 80144b8:	009b      	lsls	r3, r3, #2
 80144ba:	4a12      	ldr	r2, [pc, #72]	@ (8014504 <prvInitialiseTaskLists+0x60>)
 80144bc:	4413      	add	r3, r2
 80144be:	4618      	mov	r0, r3
 80144c0:	f7fe fac4 	bl	8012a4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	3301      	adds	r3, #1
 80144c8:	607b      	str	r3, [r7, #4]
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	2b06      	cmp	r3, #6
 80144ce:	d9ef      	bls.n	80144b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80144d0:	480d      	ldr	r0, [pc, #52]	@ (8014508 <prvInitialiseTaskLists+0x64>)
 80144d2:	f7fe fabb 	bl	8012a4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80144d6:	480d      	ldr	r0, [pc, #52]	@ (801450c <prvInitialiseTaskLists+0x68>)
 80144d8:	f7fe fab8 	bl	8012a4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80144dc:	480c      	ldr	r0, [pc, #48]	@ (8014510 <prvInitialiseTaskLists+0x6c>)
 80144de:	f7fe fab5 	bl	8012a4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80144e2:	480c      	ldr	r0, [pc, #48]	@ (8014514 <prvInitialiseTaskLists+0x70>)
 80144e4:	f7fe fab2 	bl	8012a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80144e8:	480b      	ldr	r0, [pc, #44]	@ (8014518 <prvInitialiseTaskLists+0x74>)
 80144ea:	f7fe faaf 	bl	8012a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80144ee:	4b0b      	ldr	r3, [pc, #44]	@ (801451c <prvInitialiseTaskLists+0x78>)
 80144f0:	4a05      	ldr	r2, [pc, #20]	@ (8014508 <prvInitialiseTaskLists+0x64>)
 80144f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80144f4:	4b0a      	ldr	r3, [pc, #40]	@ (8014520 <prvInitialiseTaskLists+0x7c>)
 80144f6:	4a05      	ldr	r2, [pc, #20]	@ (801450c <prvInitialiseTaskLists+0x68>)
 80144f8:	601a      	str	r2, [r3, #0]
}
 80144fa:	bf00      	nop
 80144fc:	3708      	adds	r7, #8
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}
 8014502:	bf00      	nop
 8014504:	200035e4 	.word	0x200035e4
 8014508:	20003670 	.word	0x20003670
 801450c:	20003684 	.word	0x20003684
 8014510:	200036a0 	.word	0x200036a0
 8014514:	200036b4 	.word	0x200036b4
 8014518:	200036cc 	.word	0x200036cc
 801451c:	20003698 	.word	0x20003698
 8014520:	2000369c 	.word	0x2000369c

08014524 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801452a:	e019      	b.n	8014560 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801452c:	f000 fce4 	bl	8014ef8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014530:	4b10      	ldr	r3, [pc, #64]	@ (8014574 <prvCheckTasksWaitingTermination+0x50>)
 8014532:	68db      	ldr	r3, [r3, #12]
 8014534:	68db      	ldr	r3, [r3, #12]
 8014536:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	3304      	adds	r3, #4
 801453c:	4618      	mov	r0, r3
 801453e:	f7fe fb0f 	bl	8012b60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014542:	4b0d      	ldr	r3, [pc, #52]	@ (8014578 <prvCheckTasksWaitingTermination+0x54>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	3b01      	subs	r3, #1
 8014548:	4a0b      	ldr	r2, [pc, #44]	@ (8014578 <prvCheckTasksWaitingTermination+0x54>)
 801454a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801454c:	4b0b      	ldr	r3, [pc, #44]	@ (801457c <prvCheckTasksWaitingTermination+0x58>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	3b01      	subs	r3, #1
 8014552:	4a0a      	ldr	r2, [pc, #40]	@ (801457c <prvCheckTasksWaitingTermination+0x58>)
 8014554:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014556:	f000 fd01 	bl	8014f5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	f000 f810 	bl	8014580 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014560:	4b06      	ldr	r3, [pc, #24]	@ (801457c <prvCheckTasksWaitingTermination+0x58>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d1e1      	bne.n	801452c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014568:	bf00      	nop
 801456a:	bf00      	nop
 801456c:	3708      	adds	r7, #8
 801456e:	46bd      	mov	sp, r7
 8014570:	bd80      	pop	{r7, pc}
 8014572:	bf00      	nop
 8014574:	200036b4 	.word	0x200036b4
 8014578:	200036e0 	.word	0x200036e0
 801457c:	200036c8 	.word	0x200036c8

08014580 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	3358      	adds	r3, #88	@ 0x58
 801458c:	4618      	mov	r0, r3
 801458e:	f004 fa1b 	bl	80189c8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014596:	4618      	mov	r0, r3
 8014598:	f000 fe9e 	bl	80152d8 <vPortFree>
			vPortFree( pxTCB );
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f000 fe9b 	bl	80152d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80145a2:	bf00      	nop
 80145a4:	3708      	adds	r7, #8
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}
	...

080145ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80145ac:	b480      	push	{r7}
 80145ae:	b083      	sub	sp, #12
 80145b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145b2:	4b0c      	ldr	r3, [pc, #48]	@ (80145e4 <prvResetNextTaskUnblockTime+0x38>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d104      	bne.n	80145c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80145bc:	4b0a      	ldr	r3, [pc, #40]	@ (80145e8 <prvResetNextTaskUnblockTime+0x3c>)
 80145be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80145c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80145c4:	e008      	b.n	80145d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145c6:	4b07      	ldr	r3, [pc, #28]	@ (80145e4 <prvResetNextTaskUnblockTime+0x38>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	68db      	ldr	r3, [r3, #12]
 80145cc:	68db      	ldr	r3, [r3, #12]
 80145ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	4a04      	ldr	r2, [pc, #16]	@ (80145e8 <prvResetNextTaskUnblockTime+0x3c>)
 80145d6:	6013      	str	r3, [r2, #0]
}
 80145d8:	bf00      	nop
 80145da:	370c      	adds	r7, #12
 80145dc:	46bd      	mov	sp, r7
 80145de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e2:	4770      	bx	lr
 80145e4:	20003698 	.word	0x20003698
 80145e8:	20003700 	.word	0x20003700

080145ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80145ec:	b480      	push	{r7}
 80145ee:	b083      	sub	sp, #12
 80145f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80145f2:	4b0b      	ldr	r3, [pc, #44]	@ (8014620 <xTaskGetSchedulerState+0x34>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d102      	bne.n	8014600 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80145fa:	2301      	movs	r3, #1
 80145fc:	607b      	str	r3, [r7, #4]
 80145fe:	e008      	b.n	8014612 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014600:	4b08      	ldr	r3, [pc, #32]	@ (8014624 <xTaskGetSchedulerState+0x38>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d102      	bne.n	801460e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014608:	2302      	movs	r3, #2
 801460a:	607b      	str	r3, [r7, #4]
 801460c:	e001      	b.n	8014612 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801460e:	2300      	movs	r3, #0
 8014610:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014612:	687b      	ldr	r3, [r7, #4]
	}
 8014614:	4618      	mov	r0, r3
 8014616:	370c      	adds	r7, #12
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr
 8014620:	200036ec 	.word	0x200036ec
 8014624:	20003708 	.word	0x20003708

08014628 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014628:	b580      	push	{r7, lr}
 801462a:	b084      	sub	sp, #16
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014634:	2300      	movs	r3, #0
 8014636:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d05e      	beq.n	80146fc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014642:	4b31      	ldr	r3, [pc, #196]	@ (8014708 <xTaskPriorityInherit+0xe0>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014648:	429a      	cmp	r2, r3
 801464a:	d24e      	bcs.n	80146ea <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	699b      	ldr	r3, [r3, #24]
 8014650:	2b00      	cmp	r3, #0
 8014652:	db06      	blt.n	8014662 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014654:	4b2c      	ldr	r3, [pc, #176]	@ (8014708 <xTaskPriorityInherit+0xe0>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801465a:	f1c3 0207 	rsb	r2, r3, #7
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014662:	68bb      	ldr	r3, [r7, #8]
 8014664:	6959      	ldr	r1, [r3, #20]
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801466a:	4613      	mov	r3, r2
 801466c:	009b      	lsls	r3, r3, #2
 801466e:	4413      	add	r3, r2
 8014670:	009b      	lsls	r3, r3, #2
 8014672:	4a26      	ldr	r2, [pc, #152]	@ (801470c <xTaskPriorityInherit+0xe4>)
 8014674:	4413      	add	r3, r2
 8014676:	4299      	cmp	r1, r3
 8014678:	d12f      	bne.n	80146da <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	3304      	adds	r3, #4
 801467e:	4618      	mov	r0, r3
 8014680:	f7fe fa6e 	bl	8012b60 <uxListRemove>
 8014684:	4603      	mov	r3, r0
 8014686:	2b00      	cmp	r3, #0
 8014688:	d10a      	bne.n	80146a0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801468e:	2201      	movs	r2, #1
 8014690:	fa02 f303 	lsl.w	r3, r2, r3
 8014694:	43da      	mvns	r2, r3
 8014696:	4b1e      	ldr	r3, [pc, #120]	@ (8014710 <xTaskPriorityInherit+0xe8>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	4013      	ands	r3, r2
 801469c:	4a1c      	ldr	r2, [pc, #112]	@ (8014710 <xTaskPriorityInherit+0xe8>)
 801469e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80146a0:	4b19      	ldr	r3, [pc, #100]	@ (8014708 <xTaskPriorityInherit+0xe0>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80146aa:	68bb      	ldr	r3, [r7, #8]
 80146ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146ae:	2201      	movs	r2, #1
 80146b0:	409a      	lsls	r2, r3
 80146b2:	4b17      	ldr	r3, [pc, #92]	@ (8014710 <xTaskPriorityInherit+0xe8>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	4313      	orrs	r3, r2
 80146b8:	4a15      	ldr	r2, [pc, #84]	@ (8014710 <xTaskPriorityInherit+0xe8>)
 80146ba:	6013      	str	r3, [r2, #0]
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146c0:	4613      	mov	r3, r2
 80146c2:	009b      	lsls	r3, r3, #2
 80146c4:	4413      	add	r3, r2
 80146c6:	009b      	lsls	r3, r3, #2
 80146c8:	4a10      	ldr	r2, [pc, #64]	@ (801470c <xTaskPriorityInherit+0xe4>)
 80146ca:	441a      	add	r2, r3
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	3304      	adds	r3, #4
 80146d0:	4619      	mov	r1, r3
 80146d2:	4610      	mov	r0, r2
 80146d4:	f7fe f9e7 	bl	8012aa6 <vListInsertEnd>
 80146d8:	e004      	b.n	80146e4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80146da:	4b0b      	ldr	r3, [pc, #44]	@ (8014708 <xTaskPriorityInherit+0xe0>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146e0:	68bb      	ldr	r3, [r7, #8]
 80146e2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80146e4:	2301      	movs	r3, #1
 80146e6:	60fb      	str	r3, [r7, #12]
 80146e8:	e008      	b.n	80146fc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80146ea:	68bb      	ldr	r3, [r7, #8]
 80146ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80146ee:	4b06      	ldr	r3, [pc, #24]	@ (8014708 <xTaskPriorityInherit+0xe0>)
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d201      	bcs.n	80146fc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80146f8:	2301      	movs	r3, #1
 80146fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80146fc:	68fb      	ldr	r3, [r7, #12]
	}
 80146fe:	4618      	mov	r0, r3
 8014700:	3710      	adds	r7, #16
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}
 8014706:	bf00      	nop
 8014708:	200035e0 	.word	0x200035e0
 801470c:	200035e4 	.word	0x200035e4
 8014710:	200036e8 	.word	0x200036e8

08014714 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014714:	b580      	push	{r7, lr}
 8014716:	b086      	sub	sp, #24
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014720:	2300      	movs	r3, #0
 8014722:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d070      	beq.n	801480c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801472a:	4b3b      	ldr	r3, [pc, #236]	@ (8014818 <xTaskPriorityDisinherit+0x104>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	693a      	ldr	r2, [r7, #16]
 8014730:	429a      	cmp	r2, r3
 8014732:	d00b      	beq.n	801474c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014738:	f383 8811 	msr	BASEPRI, r3
 801473c:	f3bf 8f6f 	isb	sy
 8014740:	f3bf 8f4f 	dsb	sy
 8014744:	60fb      	str	r3, [r7, #12]
}
 8014746:	bf00      	nop
 8014748:	bf00      	nop
 801474a:	e7fd      	b.n	8014748 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801474c:	693b      	ldr	r3, [r7, #16]
 801474e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014750:	2b00      	cmp	r3, #0
 8014752:	d10b      	bne.n	801476c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014758:	f383 8811 	msr	BASEPRI, r3
 801475c:	f3bf 8f6f 	isb	sy
 8014760:	f3bf 8f4f 	dsb	sy
 8014764:	60bb      	str	r3, [r7, #8]
}
 8014766:	bf00      	nop
 8014768:	bf00      	nop
 801476a:	e7fd      	b.n	8014768 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801476c:	693b      	ldr	r3, [r7, #16]
 801476e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014770:	1e5a      	subs	r2, r3, #1
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014776:	693b      	ldr	r3, [r7, #16]
 8014778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801477a:	693b      	ldr	r3, [r7, #16]
 801477c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801477e:	429a      	cmp	r2, r3
 8014780:	d044      	beq.n	801480c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014786:	2b00      	cmp	r3, #0
 8014788:	d140      	bne.n	801480c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801478a:	693b      	ldr	r3, [r7, #16]
 801478c:	3304      	adds	r3, #4
 801478e:	4618      	mov	r0, r3
 8014790:	f7fe f9e6 	bl	8012b60 <uxListRemove>
 8014794:	4603      	mov	r3, r0
 8014796:	2b00      	cmp	r3, #0
 8014798:	d115      	bne.n	80147c6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801479a:	693b      	ldr	r3, [r7, #16]
 801479c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801479e:	491f      	ldr	r1, [pc, #124]	@ (801481c <xTaskPriorityDisinherit+0x108>)
 80147a0:	4613      	mov	r3, r2
 80147a2:	009b      	lsls	r3, r3, #2
 80147a4:	4413      	add	r3, r2
 80147a6:	009b      	lsls	r3, r3, #2
 80147a8:	440b      	add	r3, r1
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d10a      	bne.n	80147c6 <xTaskPriorityDisinherit+0xb2>
 80147b0:	693b      	ldr	r3, [r7, #16]
 80147b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147b4:	2201      	movs	r2, #1
 80147b6:	fa02 f303 	lsl.w	r3, r2, r3
 80147ba:	43da      	mvns	r2, r3
 80147bc:	4b18      	ldr	r3, [pc, #96]	@ (8014820 <xTaskPriorityDisinherit+0x10c>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	4013      	ands	r3, r2
 80147c2:	4a17      	ldr	r2, [pc, #92]	@ (8014820 <xTaskPriorityDisinherit+0x10c>)
 80147c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80147c6:	693b      	ldr	r3, [r7, #16]
 80147c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147ce:	693b      	ldr	r3, [r7, #16]
 80147d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147d2:	f1c3 0207 	rsb	r2, r3, #7
 80147d6:	693b      	ldr	r3, [r7, #16]
 80147d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80147da:	693b      	ldr	r3, [r7, #16]
 80147dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147de:	2201      	movs	r2, #1
 80147e0:	409a      	lsls	r2, r3
 80147e2:	4b0f      	ldr	r3, [pc, #60]	@ (8014820 <xTaskPriorityDisinherit+0x10c>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	4313      	orrs	r3, r2
 80147e8:	4a0d      	ldr	r2, [pc, #52]	@ (8014820 <xTaskPriorityDisinherit+0x10c>)
 80147ea:	6013      	str	r3, [r2, #0]
 80147ec:	693b      	ldr	r3, [r7, #16]
 80147ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147f0:	4613      	mov	r3, r2
 80147f2:	009b      	lsls	r3, r3, #2
 80147f4:	4413      	add	r3, r2
 80147f6:	009b      	lsls	r3, r3, #2
 80147f8:	4a08      	ldr	r2, [pc, #32]	@ (801481c <xTaskPriorityDisinherit+0x108>)
 80147fa:	441a      	add	r2, r3
 80147fc:	693b      	ldr	r3, [r7, #16]
 80147fe:	3304      	adds	r3, #4
 8014800:	4619      	mov	r1, r3
 8014802:	4610      	mov	r0, r2
 8014804:	f7fe f94f 	bl	8012aa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014808:	2301      	movs	r3, #1
 801480a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801480c:	697b      	ldr	r3, [r7, #20]
	}
 801480e:	4618      	mov	r0, r3
 8014810:	3718      	adds	r7, #24
 8014812:	46bd      	mov	sp, r7
 8014814:	bd80      	pop	{r7, pc}
 8014816:	bf00      	nop
 8014818:	200035e0 	.word	0x200035e0
 801481c:	200035e4 	.word	0x200035e4
 8014820:	200036e8 	.word	0x200036e8

08014824 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014824:	b580      	push	{r7, lr}
 8014826:	b088      	sub	sp, #32
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
 801482c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014832:	2301      	movs	r3, #1
 8014834:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d079      	beq.n	8014930 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801483c:	69bb      	ldr	r3, [r7, #24]
 801483e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014840:	2b00      	cmp	r3, #0
 8014842:	d10b      	bne.n	801485c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014848:	f383 8811 	msr	BASEPRI, r3
 801484c:	f3bf 8f6f 	isb	sy
 8014850:	f3bf 8f4f 	dsb	sy
 8014854:	60fb      	str	r3, [r7, #12]
}
 8014856:	bf00      	nop
 8014858:	bf00      	nop
 801485a:	e7fd      	b.n	8014858 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801485c:	69bb      	ldr	r3, [r7, #24]
 801485e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014860:	683a      	ldr	r2, [r7, #0]
 8014862:	429a      	cmp	r2, r3
 8014864:	d902      	bls.n	801486c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	61fb      	str	r3, [r7, #28]
 801486a:	e002      	b.n	8014872 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801486c:	69bb      	ldr	r3, [r7, #24]
 801486e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014870:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014872:	69bb      	ldr	r3, [r7, #24]
 8014874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014876:	69fa      	ldr	r2, [r7, #28]
 8014878:	429a      	cmp	r2, r3
 801487a:	d059      	beq.n	8014930 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801487c:	69bb      	ldr	r3, [r7, #24]
 801487e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014880:	697a      	ldr	r2, [r7, #20]
 8014882:	429a      	cmp	r2, r3
 8014884:	d154      	bne.n	8014930 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014886:	4b2c      	ldr	r3, [pc, #176]	@ (8014938 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	69ba      	ldr	r2, [r7, #24]
 801488c:	429a      	cmp	r2, r3
 801488e:	d10b      	bne.n	80148a8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014894:	f383 8811 	msr	BASEPRI, r3
 8014898:	f3bf 8f6f 	isb	sy
 801489c:	f3bf 8f4f 	dsb	sy
 80148a0:	60bb      	str	r3, [r7, #8]
}
 80148a2:	bf00      	nop
 80148a4:	bf00      	nop
 80148a6:	e7fd      	b.n	80148a4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80148a8:	69bb      	ldr	r3, [r7, #24]
 80148aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80148ae:	69bb      	ldr	r3, [r7, #24]
 80148b0:	69fa      	ldr	r2, [r7, #28]
 80148b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80148b4:	69bb      	ldr	r3, [r7, #24]
 80148b6:	699b      	ldr	r3, [r3, #24]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	db04      	blt.n	80148c6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80148bc:	69fb      	ldr	r3, [r7, #28]
 80148be:	f1c3 0207 	rsb	r2, r3, #7
 80148c2:	69bb      	ldr	r3, [r7, #24]
 80148c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80148c6:	69bb      	ldr	r3, [r7, #24]
 80148c8:	6959      	ldr	r1, [r3, #20]
 80148ca:	693a      	ldr	r2, [r7, #16]
 80148cc:	4613      	mov	r3, r2
 80148ce:	009b      	lsls	r3, r3, #2
 80148d0:	4413      	add	r3, r2
 80148d2:	009b      	lsls	r3, r3, #2
 80148d4:	4a19      	ldr	r2, [pc, #100]	@ (801493c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80148d6:	4413      	add	r3, r2
 80148d8:	4299      	cmp	r1, r3
 80148da:	d129      	bne.n	8014930 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80148dc:	69bb      	ldr	r3, [r7, #24]
 80148de:	3304      	adds	r3, #4
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7fe f93d 	bl	8012b60 <uxListRemove>
 80148e6:	4603      	mov	r3, r0
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d10a      	bne.n	8014902 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80148ec:	69bb      	ldr	r3, [r7, #24]
 80148ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148f0:	2201      	movs	r2, #1
 80148f2:	fa02 f303 	lsl.w	r3, r2, r3
 80148f6:	43da      	mvns	r2, r3
 80148f8:	4b11      	ldr	r3, [pc, #68]	@ (8014940 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	4013      	ands	r3, r2
 80148fe:	4a10      	ldr	r2, [pc, #64]	@ (8014940 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014900:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014902:	69bb      	ldr	r3, [r7, #24]
 8014904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014906:	2201      	movs	r2, #1
 8014908:	409a      	lsls	r2, r3
 801490a:	4b0d      	ldr	r3, [pc, #52]	@ (8014940 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	4313      	orrs	r3, r2
 8014910:	4a0b      	ldr	r2, [pc, #44]	@ (8014940 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014912:	6013      	str	r3, [r2, #0]
 8014914:	69bb      	ldr	r3, [r7, #24]
 8014916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014918:	4613      	mov	r3, r2
 801491a:	009b      	lsls	r3, r3, #2
 801491c:	4413      	add	r3, r2
 801491e:	009b      	lsls	r3, r3, #2
 8014920:	4a06      	ldr	r2, [pc, #24]	@ (801493c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8014922:	441a      	add	r2, r3
 8014924:	69bb      	ldr	r3, [r7, #24]
 8014926:	3304      	adds	r3, #4
 8014928:	4619      	mov	r1, r3
 801492a:	4610      	mov	r0, r2
 801492c:	f7fe f8bb 	bl	8012aa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014930:	bf00      	nop
 8014932:	3720      	adds	r7, #32
 8014934:	46bd      	mov	sp, r7
 8014936:	bd80      	pop	{r7, pc}
 8014938:	200035e0 	.word	0x200035e0
 801493c:	200035e4 	.word	0x200035e4
 8014940:	200036e8 	.word	0x200036e8

08014944 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014944:	b480      	push	{r7}
 8014946:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014948:	4b07      	ldr	r3, [pc, #28]	@ (8014968 <pvTaskIncrementMutexHeldCount+0x24>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d004      	beq.n	801495a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014950:	4b05      	ldr	r3, [pc, #20]	@ (8014968 <pvTaskIncrementMutexHeldCount+0x24>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014956:	3201      	adds	r2, #1
 8014958:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801495a:	4b03      	ldr	r3, [pc, #12]	@ (8014968 <pvTaskIncrementMutexHeldCount+0x24>)
 801495c:	681b      	ldr	r3, [r3, #0]
	}
 801495e:	4618      	mov	r0, r3
 8014960:	46bd      	mov	sp, r7
 8014962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014966:	4770      	bx	lr
 8014968:	200035e0 	.word	0x200035e0

0801496c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 801496c:	b580      	push	{r7, lr}
 801496e:	b084      	sub	sp, #16
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8014976:	f000 fabf 	bl	8014ef8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801497a:	4b20      	ldr	r3, [pc, #128]	@ (80149fc <ulTaskNotifyTake+0x90>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014982:	2b00      	cmp	r3, #0
 8014984:	d113      	bne.n	80149ae <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8014986:	4b1d      	ldr	r3, [pc, #116]	@ (80149fc <ulTaskNotifyTake+0x90>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	2201      	movs	r2, #1
 801498c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d00b      	beq.n	80149ae <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014996:	2101      	movs	r1, #1
 8014998:	6838      	ldr	r0, [r7, #0]
 801499a:	f000 f919 	bl	8014bd0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801499e:	4b18      	ldr	r3, [pc, #96]	@ (8014a00 <ulTaskNotifyTake+0x94>)
 80149a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80149a4:	601a      	str	r2, [r3, #0]
 80149a6:	f3bf 8f4f 	dsb	sy
 80149aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80149ae:	f000 fad5 	bl	8014f5c <vPortExitCritical>

		taskENTER_CRITICAL();
 80149b2:	f000 faa1 	bl	8014ef8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80149b6:	4b11      	ldr	r3, [pc, #68]	@ (80149fc <ulTaskNotifyTake+0x90>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80149be:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d00e      	beq.n	80149e4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d005      	beq.n	80149d8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80149cc:	4b0b      	ldr	r3, [pc, #44]	@ (80149fc <ulTaskNotifyTake+0x90>)
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	2200      	movs	r2, #0
 80149d2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80149d6:	e005      	b.n	80149e4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80149d8:	4b08      	ldr	r3, [pc, #32]	@ (80149fc <ulTaskNotifyTake+0x90>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	68fa      	ldr	r2, [r7, #12]
 80149de:	3a01      	subs	r2, #1
 80149e0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80149e4:	4b05      	ldr	r3, [pc, #20]	@ (80149fc <ulTaskNotifyTake+0x90>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	2200      	movs	r2, #0
 80149ea:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
		}
		taskEXIT_CRITICAL();
 80149ee:	f000 fab5 	bl	8014f5c <vPortExitCritical>

		return ulReturn;
 80149f2:	68fb      	ldr	r3, [r7, #12]
	}
 80149f4:	4618      	mov	r0, r3
 80149f6:	3710      	adds	r7, #16
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}
 80149fc:	200035e0 	.word	0x200035e0
 8014a00:	e000ed04 	.word	0xe000ed04

08014a04 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b08e      	sub	sp, #56	@ 0x38
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	60f8      	str	r0, [r7, #12]
 8014a0c:	60b9      	str	r1, [r7, #8]
 8014a0e:	603b      	str	r3, [r7, #0]
 8014a10:	4613      	mov	r3, r2
 8014a12:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014a14:	2301      	movs	r3, #1
 8014a16:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d10b      	bne.n	8014a36 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8014a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a22:	f383 8811 	msr	BASEPRI, r3
 8014a26:	f3bf 8f6f 	isb	sy
 8014a2a:	f3bf 8f4f 	dsb	sy
 8014a2e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014a30:	bf00      	nop
 8014a32:	bf00      	nop
 8014a34:	e7fd      	b.n	8014a32 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014a36:	f000 fb3f 	bl	80150b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8014a3e:	f3ef 8211 	mrs	r2, BASEPRI
 8014a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a46:	f383 8811 	msr	BASEPRI, r3
 8014a4a:	f3bf 8f6f 	isb	sy
 8014a4e:	f3bf 8f4f 	dsb	sy
 8014a52:	623a      	str	r2, [r7, #32]
 8014a54:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014a56:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014a5a:	683b      	ldr	r3, [r7, #0]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d004      	beq.n	8014a6a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a62:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a6c:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8014a70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a76:	2202      	movs	r2, #2
 8014a78:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

			switch( eAction )
 8014a7c:	79fb      	ldrb	r3, [r7, #7]
 8014a7e:	2b04      	cmp	r3, #4
 8014a80:	d82e      	bhi.n	8014ae0 <xTaskGenericNotifyFromISR+0xdc>
 8014a82:	a201      	add	r2, pc, #4	@ (adr r2, 8014a88 <xTaskGenericNotifyFromISR+0x84>)
 8014a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a88:	08014b05 	.word	0x08014b05
 8014a8c:	08014a9d 	.word	0x08014a9d
 8014a90:	08014aaf 	.word	0x08014aaf
 8014a94:	08014abf 	.word	0x08014abf
 8014a98:	08014ac9 	.word	0x08014ac9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a9e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8014aa2:	68bb      	ldr	r3, [r7, #8]
 8014aa4:	431a      	orrs	r2, r3
 8014aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aa8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8014aac:	e02d      	b.n	8014b0a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ab0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014ab4:	1c5a      	adds	r2, r3, #1
 8014ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ab8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8014abc:	e025      	b.n	8014b0a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ac0:	68ba      	ldr	r2, [r7, #8]
 8014ac2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8014ac6:	e020      	b.n	8014b0a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014ac8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014acc:	2b02      	cmp	r3, #2
 8014ace:	d004      	beq.n	8014ada <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ad2:	68ba      	ldr	r2, [r7, #8]
 8014ad4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014ad8:	e017      	b.n	8014b0a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8014ada:	2300      	movs	r3, #0
 8014adc:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8014ade:	e014      	b.n	8014b0a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ae2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014aea:	d00d      	beq.n	8014b08 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8014aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014af0:	f383 8811 	msr	BASEPRI, r3
 8014af4:	f3bf 8f6f 	isb	sy
 8014af8:	f3bf 8f4f 	dsb	sy
 8014afc:	61bb      	str	r3, [r7, #24]
}
 8014afe:	bf00      	nop
 8014b00:	bf00      	nop
 8014b02:	e7fd      	b.n	8014b00 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8014b04:	bf00      	nop
 8014b06:	e000      	b.n	8014b0a <xTaskGenericNotifyFromISR+0x106>
					break;
 8014b08:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014b0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014b0e:	2b01      	cmp	r3, #1
 8014b10:	d146      	bne.n	8014ba0 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d00b      	beq.n	8014b32 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8014b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b1e:	f383 8811 	msr	BASEPRI, r3
 8014b22:	f3bf 8f6f 	isb	sy
 8014b26:	f3bf 8f4f 	dsb	sy
 8014b2a:	617b      	str	r3, [r7, #20]
}
 8014b2c:	bf00      	nop
 8014b2e:	bf00      	nop
 8014b30:	e7fd      	b.n	8014b2e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014b32:	4b21      	ldr	r3, [pc, #132]	@ (8014bb8 <xTaskGenericNotifyFromISR+0x1b4>)
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d11c      	bne.n	8014b74 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b3c:	3304      	adds	r3, #4
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f7fe f80e 	bl	8012b60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b48:	2201      	movs	r2, #1
 8014b4a:	409a      	lsls	r2, r3
 8014b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8014bbc <xTaskGenericNotifyFromISR+0x1b8>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	4313      	orrs	r3, r2
 8014b52:	4a1a      	ldr	r2, [pc, #104]	@ (8014bbc <xTaskGenericNotifyFromISR+0x1b8>)
 8014b54:	6013      	str	r3, [r2, #0]
 8014b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	009b      	lsls	r3, r3, #2
 8014b5e:	4413      	add	r3, r2
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	4a17      	ldr	r2, [pc, #92]	@ (8014bc0 <xTaskGenericNotifyFromISR+0x1bc>)
 8014b64:	441a      	add	r2, r3
 8014b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b68:	3304      	adds	r3, #4
 8014b6a:	4619      	mov	r1, r3
 8014b6c:	4610      	mov	r0, r2
 8014b6e:	f7fd ff9a 	bl	8012aa6 <vListInsertEnd>
 8014b72:	e005      	b.n	8014b80 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b76:	3318      	adds	r3, #24
 8014b78:	4619      	mov	r1, r3
 8014b7a:	4812      	ldr	r0, [pc, #72]	@ (8014bc4 <xTaskGenericNotifyFromISR+0x1c0>)
 8014b7c:	f7fd ff93 	bl	8012aa6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b84:	4b10      	ldr	r3, [pc, #64]	@ (8014bc8 <xTaskGenericNotifyFromISR+0x1c4>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b8a:	429a      	cmp	r2, r3
 8014b8c:	d908      	bls.n	8014ba0 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d002      	beq.n	8014b9a <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b96:	2201      	movs	r2, #1
 8014b98:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8014bcc <xTaskGenericNotifyFromISR+0x1c8>)
 8014b9c:	2201      	movs	r2, #1
 8014b9e:	601a      	str	r2, [r3, #0]
 8014ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ba2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014ba4:	693b      	ldr	r3, [r7, #16]
 8014ba6:	f383 8811 	msr	BASEPRI, r3
}
 8014baa:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	3738      	adds	r7, #56	@ 0x38
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	bf00      	nop
 8014bb8:	20003708 	.word	0x20003708
 8014bbc:	200036e8 	.word	0x200036e8
 8014bc0:	200035e4 	.word	0x200035e4
 8014bc4:	200036a0 	.word	0x200036a0
 8014bc8:	200035e0 	.word	0x200035e0
 8014bcc:	200036f4 	.word	0x200036f4

08014bd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b084      	sub	sp, #16
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014bda:	4b29      	ldr	r3, [pc, #164]	@ (8014c80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014be0:	4b28      	ldr	r3, [pc, #160]	@ (8014c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	3304      	adds	r3, #4
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7fd ffba 	bl	8012b60 <uxListRemove>
 8014bec:	4603      	mov	r3, r0
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d10b      	bne.n	8014c0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014bf2:	4b24      	ldr	r3, [pc, #144]	@ (8014c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bf8:	2201      	movs	r2, #1
 8014bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8014bfe:	43da      	mvns	r2, r3
 8014c00:	4b21      	ldr	r3, [pc, #132]	@ (8014c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	4013      	ands	r3, r2
 8014c06:	4a20      	ldr	r2, [pc, #128]	@ (8014c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014c08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014c10:	d10a      	bne.n	8014c28 <prvAddCurrentTaskToDelayedList+0x58>
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d007      	beq.n	8014c28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c18:	4b1a      	ldr	r3, [pc, #104]	@ (8014c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	3304      	adds	r3, #4
 8014c1e:	4619      	mov	r1, r3
 8014c20:	481a      	ldr	r0, [pc, #104]	@ (8014c8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8014c22:	f7fd ff40 	bl	8012aa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014c26:	e026      	b.n	8014c76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014c28:	68fa      	ldr	r2, [r7, #12]
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	4413      	add	r3, r2
 8014c2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014c30:	4b14      	ldr	r3, [pc, #80]	@ (8014c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	68ba      	ldr	r2, [r7, #8]
 8014c36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014c38:	68ba      	ldr	r2, [r7, #8]
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d209      	bcs.n	8014c54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c40:	4b13      	ldr	r3, [pc, #76]	@ (8014c90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014c42:	681a      	ldr	r2, [r3, #0]
 8014c44:	4b0f      	ldr	r3, [pc, #60]	@ (8014c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	3304      	adds	r3, #4
 8014c4a:	4619      	mov	r1, r3
 8014c4c:	4610      	mov	r0, r2
 8014c4e:	f7fd ff4e 	bl	8012aee <vListInsert>
}
 8014c52:	e010      	b.n	8014c76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c54:	4b0f      	ldr	r3, [pc, #60]	@ (8014c94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014c56:	681a      	ldr	r2, [r3, #0]
 8014c58:	4b0a      	ldr	r3, [pc, #40]	@ (8014c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	3304      	adds	r3, #4
 8014c5e:	4619      	mov	r1, r3
 8014c60:	4610      	mov	r0, r2
 8014c62:	f7fd ff44 	bl	8012aee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014c66:	4b0c      	ldr	r3, [pc, #48]	@ (8014c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	68ba      	ldr	r2, [r7, #8]
 8014c6c:	429a      	cmp	r2, r3
 8014c6e:	d202      	bcs.n	8014c76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014c70:	4a09      	ldr	r2, [pc, #36]	@ (8014c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014c72:	68bb      	ldr	r3, [r7, #8]
 8014c74:	6013      	str	r3, [r2, #0]
}
 8014c76:	bf00      	nop
 8014c78:	3710      	adds	r7, #16
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}
 8014c7e:	bf00      	nop
 8014c80:	200036e4 	.word	0x200036e4
 8014c84:	200035e0 	.word	0x200035e0
 8014c88:	200036e8 	.word	0x200036e8
 8014c8c:	200036cc 	.word	0x200036cc
 8014c90:	2000369c 	.word	0x2000369c
 8014c94:	20003698 	.word	0x20003698
 8014c98:	20003700 	.word	0x20003700

08014c9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014c9c:	b480      	push	{r7}
 8014c9e:	b085      	sub	sp, #20
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	60f8      	str	r0, [r7, #12]
 8014ca4:	60b9      	str	r1, [r7, #8]
 8014ca6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	3b04      	subs	r3, #4
 8014cac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	3b04      	subs	r3, #4
 8014cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014cbc:	68bb      	ldr	r3, [r7, #8]
 8014cbe:	f023 0201 	bic.w	r2, r3, #1
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	3b04      	subs	r3, #4
 8014cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8014d00 <pxPortInitialiseStack+0x64>)
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	3b14      	subs	r3, #20
 8014cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014cd8:	687a      	ldr	r2, [r7, #4]
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	3b04      	subs	r3, #4
 8014ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	f06f 0202 	mvn.w	r2, #2
 8014cea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	3b20      	subs	r3, #32
 8014cf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3714      	adds	r7, #20
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfe:	4770      	bx	lr
 8014d00:	08014d05 	.word	0x08014d05

08014d04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014d04:	b480      	push	{r7}
 8014d06:	b085      	sub	sp, #20
 8014d08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014d0e:	4b13      	ldr	r3, [pc, #76]	@ (8014d5c <prvTaskExitError+0x58>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014d16:	d00b      	beq.n	8014d30 <prvTaskExitError+0x2c>
	__asm volatile
 8014d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d1c:	f383 8811 	msr	BASEPRI, r3
 8014d20:	f3bf 8f6f 	isb	sy
 8014d24:	f3bf 8f4f 	dsb	sy
 8014d28:	60fb      	str	r3, [r7, #12]
}
 8014d2a:	bf00      	nop
 8014d2c:	bf00      	nop
 8014d2e:	e7fd      	b.n	8014d2c <prvTaskExitError+0x28>
	__asm volatile
 8014d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d34:	f383 8811 	msr	BASEPRI, r3
 8014d38:	f3bf 8f6f 	isb	sy
 8014d3c:	f3bf 8f4f 	dsb	sy
 8014d40:	60bb      	str	r3, [r7, #8]
}
 8014d42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014d44:	bf00      	nop
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d0fc      	beq.n	8014d46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014d4c:	bf00      	nop
 8014d4e:	bf00      	nop
 8014d50:	3714      	adds	r7, #20
 8014d52:	46bd      	mov	sp, r7
 8014d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d58:	4770      	bx	lr
 8014d5a:	bf00      	nop
 8014d5c:	20000140 	.word	0x20000140

08014d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014d60:	4b07      	ldr	r3, [pc, #28]	@ (8014d80 <pxCurrentTCBConst2>)
 8014d62:	6819      	ldr	r1, [r3, #0]
 8014d64:	6808      	ldr	r0, [r1, #0]
 8014d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6a:	f380 8809 	msr	PSP, r0
 8014d6e:	f3bf 8f6f 	isb	sy
 8014d72:	f04f 0000 	mov.w	r0, #0
 8014d76:	f380 8811 	msr	BASEPRI, r0
 8014d7a:	4770      	bx	lr
 8014d7c:	f3af 8000 	nop.w

08014d80 <pxCurrentTCBConst2>:
 8014d80:	200035e0 	.word	0x200035e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014d84:	bf00      	nop
 8014d86:	bf00      	nop

08014d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014d88:	4808      	ldr	r0, [pc, #32]	@ (8014dac <prvPortStartFirstTask+0x24>)
 8014d8a:	6800      	ldr	r0, [r0, #0]
 8014d8c:	6800      	ldr	r0, [r0, #0]
 8014d8e:	f380 8808 	msr	MSP, r0
 8014d92:	f04f 0000 	mov.w	r0, #0
 8014d96:	f380 8814 	msr	CONTROL, r0
 8014d9a:	b662      	cpsie	i
 8014d9c:	b661      	cpsie	f
 8014d9e:	f3bf 8f4f 	dsb	sy
 8014da2:	f3bf 8f6f 	isb	sy
 8014da6:	df00      	svc	0
 8014da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014daa:	bf00      	nop
 8014dac:	e000ed08 	.word	0xe000ed08

08014db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b086      	sub	sp, #24
 8014db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014db6:	4b47      	ldr	r3, [pc, #284]	@ (8014ed4 <xPortStartScheduler+0x124>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	4a47      	ldr	r2, [pc, #284]	@ (8014ed8 <xPortStartScheduler+0x128>)
 8014dbc:	4293      	cmp	r3, r2
 8014dbe:	d10b      	bne.n	8014dd8 <xPortStartScheduler+0x28>
	__asm volatile
 8014dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dc4:	f383 8811 	msr	BASEPRI, r3
 8014dc8:	f3bf 8f6f 	isb	sy
 8014dcc:	f3bf 8f4f 	dsb	sy
 8014dd0:	613b      	str	r3, [r7, #16]
}
 8014dd2:	bf00      	nop
 8014dd4:	bf00      	nop
 8014dd6:	e7fd      	b.n	8014dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8014ed4 <xPortStartScheduler+0x124>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	4a3f      	ldr	r2, [pc, #252]	@ (8014edc <xPortStartScheduler+0x12c>)
 8014dde:	4293      	cmp	r3, r2
 8014de0:	d10b      	bne.n	8014dfa <xPortStartScheduler+0x4a>
	__asm volatile
 8014de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014de6:	f383 8811 	msr	BASEPRI, r3
 8014dea:	f3bf 8f6f 	isb	sy
 8014dee:	f3bf 8f4f 	dsb	sy
 8014df2:	60fb      	str	r3, [r7, #12]
}
 8014df4:	bf00      	nop
 8014df6:	bf00      	nop
 8014df8:	e7fd      	b.n	8014df6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014dfa:	4b39      	ldr	r3, [pc, #228]	@ (8014ee0 <xPortStartScheduler+0x130>)
 8014dfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014dfe:	697b      	ldr	r3, [r7, #20]
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	22ff      	movs	r2, #255	@ 0xff
 8014e0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014e0c:	697b      	ldr	r3, [r7, #20]
 8014e0e:	781b      	ldrb	r3, [r3, #0]
 8014e10:	b2db      	uxtb	r3, r3
 8014e12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014e14:	78fb      	ldrb	r3, [r7, #3]
 8014e16:	b2db      	uxtb	r3, r3
 8014e18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014e1c:	b2da      	uxtb	r2, r3
 8014e1e:	4b31      	ldr	r3, [pc, #196]	@ (8014ee4 <xPortStartScheduler+0x134>)
 8014e20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014e22:	4b31      	ldr	r3, [pc, #196]	@ (8014ee8 <xPortStartScheduler+0x138>)
 8014e24:	2207      	movs	r2, #7
 8014e26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014e28:	e009      	b.n	8014e3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8014e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8014ee8 <xPortStartScheduler+0x138>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	3b01      	subs	r3, #1
 8014e30:	4a2d      	ldr	r2, [pc, #180]	@ (8014ee8 <xPortStartScheduler+0x138>)
 8014e32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014e34:	78fb      	ldrb	r3, [r7, #3]
 8014e36:	b2db      	uxtb	r3, r3
 8014e38:	005b      	lsls	r3, r3, #1
 8014e3a:	b2db      	uxtb	r3, r3
 8014e3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014e3e:	78fb      	ldrb	r3, [r7, #3]
 8014e40:	b2db      	uxtb	r3, r3
 8014e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014e46:	2b80      	cmp	r3, #128	@ 0x80
 8014e48:	d0ef      	beq.n	8014e2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014e4a:	4b27      	ldr	r3, [pc, #156]	@ (8014ee8 <xPortStartScheduler+0x138>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	f1c3 0307 	rsb	r3, r3, #7
 8014e52:	2b04      	cmp	r3, #4
 8014e54:	d00b      	beq.n	8014e6e <xPortStartScheduler+0xbe>
	__asm volatile
 8014e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e5a:	f383 8811 	msr	BASEPRI, r3
 8014e5e:	f3bf 8f6f 	isb	sy
 8014e62:	f3bf 8f4f 	dsb	sy
 8014e66:	60bb      	str	r3, [r7, #8]
}
 8014e68:	bf00      	nop
 8014e6a:	bf00      	nop
 8014e6c:	e7fd      	b.n	8014e6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8014ee8 <xPortStartScheduler+0x138>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	021b      	lsls	r3, r3, #8
 8014e74:	4a1c      	ldr	r2, [pc, #112]	@ (8014ee8 <xPortStartScheduler+0x138>)
 8014e76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014e78:	4b1b      	ldr	r3, [pc, #108]	@ (8014ee8 <xPortStartScheduler+0x138>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014e80:	4a19      	ldr	r2, [pc, #100]	@ (8014ee8 <xPortStartScheduler+0x138>)
 8014e82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	b2da      	uxtb	r2, r3
 8014e88:	697b      	ldr	r3, [r7, #20]
 8014e8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014e8c:	4b17      	ldr	r3, [pc, #92]	@ (8014eec <xPortStartScheduler+0x13c>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	4a16      	ldr	r2, [pc, #88]	@ (8014eec <xPortStartScheduler+0x13c>)
 8014e92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014e96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014e98:	4b14      	ldr	r3, [pc, #80]	@ (8014eec <xPortStartScheduler+0x13c>)
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	4a13      	ldr	r2, [pc, #76]	@ (8014eec <xPortStartScheduler+0x13c>)
 8014e9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014ea2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014ea4:	f000 f8da 	bl	801505c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014ea8:	4b11      	ldr	r3, [pc, #68]	@ (8014ef0 <xPortStartScheduler+0x140>)
 8014eaa:	2200      	movs	r2, #0
 8014eac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014eae:	f000 f8f9 	bl	80150a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014eb2:	4b10      	ldr	r3, [pc, #64]	@ (8014ef4 <xPortStartScheduler+0x144>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8014ef4 <xPortStartScheduler+0x144>)
 8014eb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014ebc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014ebe:	f7ff ff63 	bl	8014d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014ec2:	f7ff f949 	bl	8014158 <vTaskSwitchContext>
	prvTaskExitError();
 8014ec6:	f7ff ff1d 	bl	8014d04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014eca:	2300      	movs	r3, #0
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3718      	adds	r7, #24
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}
 8014ed4:	e000ed00 	.word	0xe000ed00
 8014ed8:	410fc271 	.word	0x410fc271
 8014edc:	410fc270 	.word	0x410fc270
 8014ee0:	e000e400 	.word	0xe000e400
 8014ee4:	20003714 	.word	0x20003714
 8014ee8:	20003718 	.word	0x20003718
 8014eec:	e000ed20 	.word	0xe000ed20
 8014ef0:	20000140 	.word	0x20000140
 8014ef4:	e000ef34 	.word	0xe000ef34

08014ef8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014ef8:	b480      	push	{r7}
 8014efa:	b083      	sub	sp, #12
 8014efc:	af00      	add	r7, sp, #0
	__asm volatile
 8014efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f02:	f383 8811 	msr	BASEPRI, r3
 8014f06:	f3bf 8f6f 	isb	sy
 8014f0a:	f3bf 8f4f 	dsb	sy
 8014f0e:	607b      	str	r3, [r7, #4]
}
 8014f10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014f12:	4b10      	ldr	r3, [pc, #64]	@ (8014f54 <vPortEnterCritical+0x5c>)
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	3301      	adds	r3, #1
 8014f18:	4a0e      	ldr	r2, [pc, #56]	@ (8014f54 <vPortEnterCritical+0x5c>)
 8014f1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8014f54 <vPortEnterCritical+0x5c>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b01      	cmp	r3, #1
 8014f22:	d110      	bne.n	8014f46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014f24:	4b0c      	ldr	r3, [pc, #48]	@ (8014f58 <vPortEnterCritical+0x60>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	b2db      	uxtb	r3, r3
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d00b      	beq.n	8014f46 <vPortEnterCritical+0x4e>
	__asm volatile
 8014f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f32:	f383 8811 	msr	BASEPRI, r3
 8014f36:	f3bf 8f6f 	isb	sy
 8014f3a:	f3bf 8f4f 	dsb	sy
 8014f3e:	603b      	str	r3, [r7, #0]
}
 8014f40:	bf00      	nop
 8014f42:	bf00      	nop
 8014f44:	e7fd      	b.n	8014f42 <vPortEnterCritical+0x4a>
	}
}
 8014f46:	bf00      	nop
 8014f48:	370c      	adds	r7, #12
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f50:	4770      	bx	lr
 8014f52:	bf00      	nop
 8014f54:	20000140 	.word	0x20000140
 8014f58:	e000ed04 	.word	0xe000ed04

08014f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014f5c:	b480      	push	{r7}
 8014f5e:	b083      	sub	sp, #12
 8014f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014f62:	4b12      	ldr	r3, [pc, #72]	@ (8014fac <vPortExitCritical+0x50>)
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d10b      	bne.n	8014f82 <vPortExitCritical+0x26>
	__asm volatile
 8014f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f6e:	f383 8811 	msr	BASEPRI, r3
 8014f72:	f3bf 8f6f 	isb	sy
 8014f76:	f3bf 8f4f 	dsb	sy
 8014f7a:	607b      	str	r3, [r7, #4]
}
 8014f7c:	bf00      	nop
 8014f7e:	bf00      	nop
 8014f80:	e7fd      	b.n	8014f7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014f82:	4b0a      	ldr	r3, [pc, #40]	@ (8014fac <vPortExitCritical+0x50>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	3b01      	subs	r3, #1
 8014f88:	4a08      	ldr	r2, [pc, #32]	@ (8014fac <vPortExitCritical+0x50>)
 8014f8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014f8c:	4b07      	ldr	r3, [pc, #28]	@ (8014fac <vPortExitCritical+0x50>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d105      	bne.n	8014fa0 <vPortExitCritical+0x44>
 8014f94:	2300      	movs	r3, #0
 8014f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	f383 8811 	msr	BASEPRI, r3
}
 8014f9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014fa0:	bf00      	nop
 8014fa2:	370c      	adds	r7, #12
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014faa:	4770      	bx	lr
 8014fac:	20000140 	.word	0x20000140

08014fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014fb0:	f3ef 8009 	mrs	r0, PSP
 8014fb4:	f3bf 8f6f 	isb	sy
 8014fb8:	4b15      	ldr	r3, [pc, #84]	@ (8015010 <pxCurrentTCBConst>)
 8014fba:	681a      	ldr	r2, [r3, #0]
 8014fbc:	f01e 0f10 	tst.w	lr, #16
 8014fc0:	bf08      	it	eq
 8014fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fca:	6010      	str	r0, [r2, #0]
 8014fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014fd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014fd4:	f380 8811 	msr	BASEPRI, r0
 8014fd8:	f3bf 8f4f 	dsb	sy
 8014fdc:	f3bf 8f6f 	isb	sy
 8014fe0:	f7ff f8ba 	bl	8014158 <vTaskSwitchContext>
 8014fe4:	f04f 0000 	mov.w	r0, #0
 8014fe8:	f380 8811 	msr	BASEPRI, r0
 8014fec:	bc09      	pop	{r0, r3}
 8014fee:	6819      	ldr	r1, [r3, #0]
 8014ff0:	6808      	ldr	r0, [r1, #0]
 8014ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ff6:	f01e 0f10 	tst.w	lr, #16
 8014ffa:	bf08      	it	eq
 8014ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015000:	f380 8809 	msr	PSP, r0
 8015004:	f3bf 8f6f 	isb	sy
 8015008:	4770      	bx	lr
 801500a:	bf00      	nop
 801500c:	f3af 8000 	nop.w

08015010 <pxCurrentTCBConst>:
 8015010:	200035e0 	.word	0x200035e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015014:	bf00      	nop
 8015016:	bf00      	nop

08015018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b082      	sub	sp, #8
 801501c:	af00      	add	r7, sp, #0
	__asm volatile
 801501e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015022:	f383 8811 	msr	BASEPRI, r3
 8015026:	f3bf 8f6f 	isb	sy
 801502a:	f3bf 8f4f 	dsb	sy
 801502e:	607b      	str	r3, [r7, #4]
}
 8015030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015032:	f7fe ffd7 	bl	8013fe4 <xTaskIncrementTick>
 8015036:	4603      	mov	r3, r0
 8015038:	2b00      	cmp	r3, #0
 801503a:	d003      	beq.n	8015044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801503c:	4b06      	ldr	r3, [pc, #24]	@ (8015058 <SysTick_Handler+0x40>)
 801503e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015042:	601a      	str	r2, [r3, #0]
 8015044:	2300      	movs	r3, #0
 8015046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015048:	683b      	ldr	r3, [r7, #0]
 801504a:	f383 8811 	msr	BASEPRI, r3
}
 801504e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015050:	bf00      	nop
 8015052:	3708      	adds	r7, #8
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}
 8015058:	e000ed04 	.word	0xe000ed04

0801505c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801505c:	b480      	push	{r7}
 801505e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015060:	4b0b      	ldr	r3, [pc, #44]	@ (8015090 <vPortSetupTimerInterrupt+0x34>)
 8015062:	2200      	movs	r2, #0
 8015064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015066:	4b0b      	ldr	r3, [pc, #44]	@ (8015094 <vPortSetupTimerInterrupt+0x38>)
 8015068:	2200      	movs	r2, #0
 801506a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801506c:	4b0a      	ldr	r3, [pc, #40]	@ (8015098 <vPortSetupTimerInterrupt+0x3c>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	4a0a      	ldr	r2, [pc, #40]	@ (801509c <vPortSetupTimerInterrupt+0x40>)
 8015072:	fba2 2303 	umull	r2, r3, r2, r3
 8015076:	099b      	lsrs	r3, r3, #6
 8015078:	4a09      	ldr	r2, [pc, #36]	@ (80150a0 <vPortSetupTimerInterrupt+0x44>)
 801507a:	3b01      	subs	r3, #1
 801507c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801507e:	4b04      	ldr	r3, [pc, #16]	@ (8015090 <vPortSetupTimerInterrupt+0x34>)
 8015080:	2207      	movs	r2, #7
 8015082:	601a      	str	r2, [r3, #0]
}
 8015084:	bf00      	nop
 8015086:	46bd      	mov	sp, r7
 8015088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508c:	4770      	bx	lr
 801508e:	bf00      	nop
 8015090:	e000e010 	.word	0xe000e010
 8015094:	e000e018 	.word	0xe000e018
 8015098:	20000004 	.word	0x20000004
 801509c:	10624dd3 	.word	0x10624dd3
 80150a0:	e000e014 	.word	0xe000e014

080150a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80150a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80150b4 <vPortEnableVFP+0x10>
 80150a8:	6801      	ldr	r1, [r0, #0]
 80150aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80150ae:	6001      	str	r1, [r0, #0]
 80150b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80150b2:	bf00      	nop
 80150b4:	e000ed88 	.word	0xe000ed88

080150b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80150b8:	b480      	push	{r7}
 80150ba:	b085      	sub	sp, #20
 80150bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80150be:	f3ef 8305 	mrs	r3, IPSR
 80150c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	2b0f      	cmp	r3, #15
 80150c8:	d915      	bls.n	80150f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80150ca:	4a18      	ldr	r2, [pc, #96]	@ (801512c <vPortValidateInterruptPriority+0x74>)
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	4413      	add	r3, r2
 80150d0:	781b      	ldrb	r3, [r3, #0]
 80150d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80150d4:	4b16      	ldr	r3, [pc, #88]	@ (8015130 <vPortValidateInterruptPriority+0x78>)
 80150d6:	781b      	ldrb	r3, [r3, #0]
 80150d8:	7afa      	ldrb	r2, [r7, #11]
 80150da:	429a      	cmp	r2, r3
 80150dc:	d20b      	bcs.n	80150f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80150de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150e2:	f383 8811 	msr	BASEPRI, r3
 80150e6:	f3bf 8f6f 	isb	sy
 80150ea:	f3bf 8f4f 	dsb	sy
 80150ee:	607b      	str	r3, [r7, #4]
}
 80150f0:	bf00      	nop
 80150f2:	bf00      	nop
 80150f4:	e7fd      	b.n	80150f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80150f6:	4b0f      	ldr	r3, [pc, #60]	@ (8015134 <vPortValidateInterruptPriority+0x7c>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80150fe:	4b0e      	ldr	r3, [pc, #56]	@ (8015138 <vPortValidateInterruptPriority+0x80>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	429a      	cmp	r2, r3
 8015104:	d90b      	bls.n	801511e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8015106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801510a:	f383 8811 	msr	BASEPRI, r3
 801510e:	f3bf 8f6f 	isb	sy
 8015112:	f3bf 8f4f 	dsb	sy
 8015116:	603b      	str	r3, [r7, #0]
}
 8015118:	bf00      	nop
 801511a:	bf00      	nop
 801511c:	e7fd      	b.n	801511a <vPortValidateInterruptPriority+0x62>
	}
 801511e:	bf00      	nop
 8015120:	3714      	adds	r7, #20
 8015122:	46bd      	mov	sp, r7
 8015124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015128:	4770      	bx	lr
 801512a:	bf00      	nop
 801512c:	e000e3f0 	.word	0xe000e3f0
 8015130:	20003714 	.word	0x20003714
 8015134:	e000ed0c 	.word	0xe000ed0c
 8015138:	20003718 	.word	0x20003718

0801513c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b08a      	sub	sp, #40	@ 0x28
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015144:	2300      	movs	r3, #0
 8015146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015148:	f7fe fea0 	bl	8013e8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801514c:	4b5c      	ldr	r3, [pc, #368]	@ (80152c0 <pvPortMalloc+0x184>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d101      	bne.n	8015158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015154:	f000 f924 	bl	80153a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015158:	4b5a      	ldr	r3, [pc, #360]	@ (80152c4 <pvPortMalloc+0x188>)
 801515a:	681a      	ldr	r2, [r3, #0]
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	4013      	ands	r3, r2
 8015160:	2b00      	cmp	r3, #0
 8015162:	f040 8095 	bne.w	8015290 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d01e      	beq.n	80151aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801516c:	2208      	movs	r2, #8
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	4413      	add	r3, r2
 8015172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f003 0307 	and.w	r3, r3, #7
 801517a:	2b00      	cmp	r3, #0
 801517c:	d015      	beq.n	80151aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	f023 0307 	bic.w	r3, r3, #7
 8015184:	3308      	adds	r3, #8
 8015186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f003 0307 	and.w	r3, r3, #7
 801518e:	2b00      	cmp	r3, #0
 8015190:	d00b      	beq.n	80151aa <pvPortMalloc+0x6e>
	__asm volatile
 8015192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015196:	f383 8811 	msr	BASEPRI, r3
 801519a:	f3bf 8f6f 	isb	sy
 801519e:	f3bf 8f4f 	dsb	sy
 80151a2:	617b      	str	r3, [r7, #20]
}
 80151a4:	bf00      	nop
 80151a6:	bf00      	nop
 80151a8:	e7fd      	b.n	80151a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d06f      	beq.n	8015290 <pvPortMalloc+0x154>
 80151b0:	4b45      	ldr	r3, [pc, #276]	@ (80152c8 <pvPortMalloc+0x18c>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	687a      	ldr	r2, [r7, #4]
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d86a      	bhi.n	8015290 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80151ba:	4b44      	ldr	r3, [pc, #272]	@ (80152cc <pvPortMalloc+0x190>)
 80151bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80151be:	4b43      	ldr	r3, [pc, #268]	@ (80152cc <pvPortMalloc+0x190>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80151c4:	e004      	b.n	80151d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80151c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80151ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80151d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151d2:	685b      	ldr	r3, [r3, #4]
 80151d4:	687a      	ldr	r2, [r7, #4]
 80151d6:	429a      	cmp	r2, r3
 80151d8:	d903      	bls.n	80151e2 <pvPortMalloc+0xa6>
 80151da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d1f1      	bne.n	80151c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80151e2:	4b37      	ldr	r3, [pc, #220]	@ (80152c0 <pvPortMalloc+0x184>)
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151e8:	429a      	cmp	r2, r3
 80151ea:	d051      	beq.n	8015290 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80151ec:	6a3b      	ldr	r3, [r7, #32]
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	2208      	movs	r2, #8
 80151f2:	4413      	add	r3, r2
 80151f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80151f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151f8:	681a      	ldr	r2, [r3, #0]
 80151fa:	6a3b      	ldr	r3, [r7, #32]
 80151fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80151fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015200:	685a      	ldr	r2, [r3, #4]
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	1ad2      	subs	r2, r2, r3
 8015206:	2308      	movs	r3, #8
 8015208:	005b      	lsls	r3, r3, #1
 801520a:	429a      	cmp	r2, r3
 801520c:	d920      	bls.n	8015250 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801520e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	4413      	add	r3, r2
 8015214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015216:	69bb      	ldr	r3, [r7, #24]
 8015218:	f003 0307 	and.w	r3, r3, #7
 801521c:	2b00      	cmp	r3, #0
 801521e:	d00b      	beq.n	8015238 <pvPortMalloc+0xfc>
	__asm volatile
 8015220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015224:	f383 8811 	msr	BASEPRI, r3
 8015228:	f3bf 8f6f 	isb	sy
 801522c:	f3bf 8f4f 	dsb	sy
 8015230:	613b      	str	r3, [r7, #16]
}
 8015232:	bf00      	nop
 8015234:	bf00      	nop
 8015236:	e7fd      	b.n	8015234 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801523a:	685a      	ldr	r2, [r3, #4]
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	1ad2      	subs	r2, r2, r3
 8015240:	69bb      	ldr	r3, [r7, #24]
 8015242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015246:	687a      	ldr	r2, [r7, #4]
 8015248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801524a:	69b8      	ldr	r0, [r7, #24]
 801524c:	f000 f90a 	bl	8015464 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015250:	4b1d      	ldr	r3, [pc, #116]	@ (80152c8 <pvPortMalloc+0x18c>)
 8015252:	681a      	ldr	r2, [r3, #0]
 8015254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015256:	685b      	ldr	r3, [r3, #4]
 8015258:	1ad3      	subs	r3, r2, r3
 801525a:	4a1b      	ldr	r2, [pc, #108]	@ (80152c8 <pvPortMalloc+0x18c>)
 801525c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801525e:	4b1a      	ldr	r3, [pc, #104]	@ (80152c8 <pvPortMalloc+0x18c>)
 8015260:	681a      	ldr	r2, [r3, #0]
 8015262:	4b1b      	ldr	r3, [pc, #108]	@ (80152d0 <pvPortMalloc+0x194>)
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	429a      	cmp	r2, r3
 8015268:	d203      	bcs.n	8015272 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801526a:	4b17      	ldr	r3, [pc, #92]	@ (80152c8 <pvPortMalloc+0x18c>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	4a18      	ldr	r2, [pc, #96]	@ (80152d0 <pvPortMalloc+0x194>)
 8015270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015274:	685a      	ldr	r2, [r3, #4]
 8015276:	4b13      	ldr	r3, [pc, #76]	@ (80152c4 <pvPortMalloc+0x188>)
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	431a      	orrs	r2, r3
 801527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801527e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015282:	2200      	movs	r2, #0
 8015284:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015286:	4b13      	ldr	r3, [pc, #76]	@ (80152d4 <pvPortMalloc+0x198>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	3301      	adds	r3, #1
 801528c:	4a11      	ldr	r2, [pc, #68]	@ (80152d4 <pvPortMalloc+0x198>)
 801528e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015290:	f7fe fe0a 	bl	8013ea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015294:	69fb      	ldr	r3, [r7, #28]
 8015296:	f003 0307 	and.w	r3, r3, #7
 801529a:	2b00      	cmp	r3, #0
 801529c:	d00b      	beq.n	80152b6 <pvPortMalloc+0x17a>
	__asm volatile
 801529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152a2:	f383 8811 	msr	BASEPRI, r3
 80152a6:	f3bf 8f6f 	isb	sy
 80152aa:	f3bf 8f4f 	dsb	sy
 80152ae:	60fb      	str	r3, [r7, #12]
}
 80152b0:	bf00      	nop
 80152b2:	bf00      	nop
 80152b4:	e7fd      	b.n	80152b2 <pvPortMalloc+0x176>
	return pvReturn;
 80152b6:	69fb      	ldr	r3, [r7, #28]
}
 80152b8:	4618      	mov	r0, r3
 80152ba:	3728      	adds	r7, #40	@ 0x28
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}
 80152c0:	200075a4 	.word	0x200075a4
 80152c4:	200075b8 	.word	0x200075b8
 80152c8:	200075a8 	.word	0x200075a8
 80152cc:	2000759c 	.word	0x2000759c
 80152d0:	200075ac 	.word	0x200075ac
 80152d4:	200075b0 	.word	0x200075b0

080152d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b086      	sub	sp, #24
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d04f      	beq.n	801538a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80152ea:	2308      	movs	r3, #8
 80152ec:	425b      	negs	r3, r3
 80152ee:	697a      	ldr	r2, [r7, #20]
 80152f0:	4413      	add	r3, r2
 80152f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80152f4:	697b      	ldr	r3, [r7, #20]
 80152f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80152f8:	693b      	ldr	r3, [r7, #16]
 80152fa:	685a      	ldr	r2, [r3, #4]
 80152fc:	4b25      	ldr	r3, [pc, #148]	@ (8015394 <vPortFree+0xbc>)
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	4013      	ands	r3, r2
 8015302:	2b00      	cmp	r3, #0
 8015304:	d10b      	bne.n	801531e <vPortFree+0x46>
	__asm volatile
 8015306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801530a:	f383 8811 	msr	BASEPRI, r3
 801530e:	f3bf 8f6f 	isb	sy
 8015312:	f3bf 8f4f 	dsb	sy
 8015316:	60fb      	str	r3, [r7, #12]
}
 8015318:	bf00      	nop
 801531a:	bf00      	nop
 801531c:	e7fd      	b.n	801531a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801531e:	693b      	ldr	r3, [r7, #16]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d00b      	beq.n	801533e <vPortFree+0x66>
	__asm volatile
 8015326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801532a:	f383 8811 	msr	BASEPRI, r3
 801532e:	f3bf 8f6f 	isb	sy
 8015332:	f3bf 8f4f 	dsb	sy
 8015336:	60bb      	str	r3, [r7, #8]
}
 8015338:	bf00      	nop
 801533a:	bf00      	nop
 801533c:	e7fd      	b.n	801533a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801533e:	693b      	ldr	r3, [r7, #16]
 8015340:	685a      	ldr	r2, [r3, #4]
 8015342:	4b14      	ldr	r3, [pc, #80]	@ (8015394 <vPortFree+0xbc>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	4013      	ands	r3, r2
 8015348:	2b00      	cmp	r3, #0
 801534a:	d01e      	beq.n	801538a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d11a      	bne.n	801538a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015354:	693b      	ldr	r3, [r7, #16]
 8015356:	685a      	ldr	r2, [r3, #4]
 8015358:	4b0e      	ldr	r3, [pc, #56]	@ (8015394 <vPortFree+0xbc>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	43db      	mvns	r3, r3
 801535e:	401a      	ands	r2, r3
 8015360:	693b      	ldr	r3, [r7, #16]
 8015362:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015364:	f7fe fd92 	bl	8013e8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	685a      	ldr	r2, [r3, #4]
 801536c:	4b0a      	ldr	r3, [pc, #40]	@ (8015398 <vPortFree+0xc0>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	4413      	add	r3, r2
 8015372:	4a09      	ldr	r2, [pc, #36]	@ (8015398 <vPortFree+0xc0>)
 8015374:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015376:	6938      	ldr	r0, [r7, #16]
 8015378:	f000 f874 	bl	8015464 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801537c:	4b07      	ldr	r3, [pc, #28]	@ (801539c <vPortFree+0xc4>)
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	3301      	adds	r3, #1
 8015382:	4a06      	ldr	r2, [pc, #24]	@ (801539c <vPortFree+0xc4>)
 8015384:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015386:	f7fe fd8f 	bl	8013ea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801538a:	bf00      	nop
 801538c:	3718      	adds	r7, #24
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	200075b8 	.word	0x200075b8
 8015398:	200075a8 	.word	0x200075a8
 801539c:	200075b4 	.word	0x200075b4

080153a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80153a0:	b480      	push	{r7}
 80153a2:	b085      	sub	sp, #20
 80153a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80153a6:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 80153aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80153ac:	4b27      	ldr	r3, [pc, #156]	@ (801544c <prvHeapInit+0xac>)
 80153ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	f003 0307 	and.w	r3, r3, #7
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d00c      	beq.n	80153d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	3307      	adds	r3, #7
 80153be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	f023 0307 	bic.w	r3, r3, #7
 80153c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80153c8:	68ba      	ldr	r2, [r7, #8]
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	1ad3      	subs	r3, r2, r3
 80153ce:	4a1f      	ldr	r2, [pc, #124]	@ (801544c <prvHeapInit+0xac>)
 80153d0:	4413      	add	r3, r2
 80153d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80153d8:	4a1d      	ldr	r2, [pc, #116]	@ (8015450 <prvHeapInit+0xb0>)
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80153de:	4b1c      	ldr	r3, [pc, #112]	@ (8015450 <prvHeapInit+0xb0>)
 80153e0:	2200      	movs	r2, #0
 80153e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	68ba      	ldr	r2, [r7, #8]
 80153e8:	4413      	add	r3, r2
 80153ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80153ec:	2208      	movs	r2, #8
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	1a9b      	subs	r3, r3, r2
 80153f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	f023 0307 	bic.w	r3, r3, #7
 80153fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	4a15      	ldr	r2, [pc, #84]	@ (8015454 <prvHeapInit+0xb4>)
 8015400:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015402:	4b14      	ldr	r3, [pc, #80]	@ (8015454 <prvHeapInit+0xb4>)
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	2200      	movs	r2, #0
 8015408:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801540a:	4b12      	ldr	r3, [pc, #72]	@ (8015454 <prvHeapInit+0xb4>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	2200      	movs	r2, #0
 8015410:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015416:	683b      	ldr	r3, [r7, #0]
 8015418:	68fa      	ldr	r2, [r7, #12]
 801541a:	1ad2      	subs	r2, r2, r3
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015420:	4b0c      	ldr	r3, [pc, #48]	@ (8015454 <prvHeapInit+0xb4>)
 8015422:	681a      	ldr	r2, [r3, #0]
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	685b      	ldr	r3, [r3, #4]
 801542c:	4a0a      	ldr	r2, [pc, #40]	@ (8015458 <prvHeapInit+0xb8>)
 801542e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	685b      	ldr	r3, [r3, #4]
 8015434:	4a09      	ldr	r2, [pc, #36]	@ (801545c <prvHeapInit+0xbc>)
 8015436:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015438:	4b09      	ldr	r3, [pc, #36]	@ (8015460 <prvHeapInit+0xc0>)
 801543a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801543e:	601a      	str	r2, [r3, #0]
}
 8015440:	bf00      	nop
 8015442:	3714      	adds	r7, #20
 8015444:	46bd      	mov	sp, r7
 8015446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544a:	4770      	bx	lr
 801544c:	2000371c 	.word	0x2000371c
 8015450:	2000759c 	.word	0x2000759c
 8015454:	200075a4 	.word	0x200075a4
 8015458:	200075ac 	.word	0x200075ac
 801545c:	200075a8 	.word	0x200075a8
 8015460:	200075b8 	.word	0x200075b8

08015464 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015464:	b480      	push	{r7}
 8015466:	b085      	sub	sp, #20
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801546c:	4b28      	ldr	r3, [pc, #160]	@ (8015510 <prvInsertBlockIntoFreeList+0xac>)
 801546e:	60fb      	str	r3, [r7, #12]
 8015470:	e002      	b.n	8015478 <prvInsertBlockIntoFreeList+0x14>
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	60fb      	str	r3, [r7, #12]
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	687a      	ldr	r2, [r7, #4]
 801547e:	429a      	cmp	r2, r3
 8015480:	d8f7      	bhi.n	8015472 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	685b      	ldr	r3, [r3, #4]
 801548a:	68ba      	ldr	r2, [r7, #8]
 801548c:	4413      	add	r3, r2
 801548e:	687a      	ldr	r2, [r7, #4]
 8015490:	429a      	cmp	r2, r3
 8015492:	d108      	bne.n	80154a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	685a      	ldr	r2, [r3, #4]
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	685b      	ldr	r3, [r3, #4]
 801549c:	441a      	add	r2, r3
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	685b      	ldr	r3, [r3, #4]
 80154ae:	68ba      	ldr	r2, [r7, #8]
 80154b0:	441a      	add	r2, r3
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d118      	bne.n	80154ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	681a      	ldr	r2, [r3, #0]
 80154be:	4b15      	ldr	r3, [pc, #84]	@ (8015514 <prvInsertBlockIntoFreeList+0xb0>)
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	429a      	cmp	r2, r3
 80154c4:	d00d      	beq.n	80154e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	685a      	ldr	r2, [r3, #4]
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	685b      	ldr	r3, [r3, #4]
 80154d0:	441a      	add	r2, r3
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	681a      	ldr	r2, [r3, #0]
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	601a      	str	r2, [r3, #0]
 80154e0:	e008      	b.n	80154f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80154e2:	4b0c      	ldr	r3, [pc, #48]	@ (8015514 <prvInsertBlockIntoFreeList+0xb0>)
 80154e4:	681a      	ldr	r2, [r3, #0]
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	601a      	str	r2, [r3, #0]
 80154ea:	e003      	b.n	80154f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	681a      	ldr	r2, [r3, #0]
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80154f4:	68fa      	ldr	r2, [r7, #12]
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d002      	beq.n	8015502 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	687a      	ldr	r2, [r7, #4]
 8015500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015502:	bf00      	nop
 8015504:	3714      	adds	r7, #20
 8015506:	46bd      	mov	sp, r7
 8015508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550c:	4770      	bx	lr
 801550e:	bf00      	nop
 8015510:	2000759c 	.word	0x2000759c
 8015514:	200075a4 	.word	0x200075a4

08015518 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b086      	sub	sp, #24
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 8015520:	2300      	movs	r3, #0
 8015522:	613b      	str	r3, [r7, #16]
 8015524:	2300      	movs	r3, #0
 8015526:	60fb      	str	r3, [r7, #12]
 8015528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801552c:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 801552e:	f7fe fcad 	bl	8013e8c <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 8015532:	4b22      	ldr	r3, [pc, #136]	@ (80155bc <vPortGetHeapStats+0xa4>)
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	617b      	str	r3, [r7, #20]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d01a      	beq.n	8015574 <vPortGetHeapStats+0x5c>
		{
			do
			{
				/* Increment the number of blocks and record the largest block seen
				so far. */
				xBlocks++;
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	3301      	adds	r3, #1
 8015542:	613b      	str	r3, [r7, #16]

				if( pxBlock->xBlockSize > xMaxSize )
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	685b      	ldr	r3, [r3, #4]
 8015548:	68fa      	ldr	r2, [r7, #12]
 801554a:	429a      	cmp	r2, r3
 801554c:	d202      	bcs.n	8015554 <vPortGetHeapStats+0x3c>
				{
					xMaxSize = pxBlock->xBlockSize;
 801554e:	697b      	ldr	r3, [r7, #20]
 8015550:	685b      	ldr	r3, [r3, #4]
 8015552:	60fb      	str	r3, [r7, #12]
				}

				if( pxBlock->xBlockSize < xMinSize )
 8015554:	697b      	ldr	r3, [r7, #20]
 8015556:	685b      	ldr	r3, [r3, #4]
 8015558:	68ba      	ldr	r2, [r7, #8]
 801555a:	429a      	cmp	r2, r3
 801555c:	d902      	bls.n	8015564 <vPortGetHeapStats+0x4c>
				{
					xMinSize = pxBlock->xBlockSize;
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	60bb      	str	r3, [r7, #8]
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	617b      	str	r3, [r7, #20]
			} while( pxBlock != pxEnd );
 801556a:	4b15      	ldr	r3, [pc, #84]	@ (80155c0 <vPortGetHeapStats+0xa8>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	697a      	ldr	r2, [r7, #20]
 8015570:	429a      	cmp	r2, r3
 8015572:	d1e4      	bne.n	801553e <vPortGetHeapStats+0x26>
		}
	}
	xTaskResumeAll();
 8015574:	f7fe fc98 	bl	8013ea8 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	68fa      	ldr	r2, [r7, #12]
 801557c:	605a      	str	r2, [r3, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	68ba      	ldr	r2, [r7, #8]
 8015582:	609a      	str	r2, [r3, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	693a      	ldr	r2, [r7, #16]
 8015588:	60da      	str	r2, [r3, #12]

	taskENTER_CRITICAL();
 801558a:	f7ff fcb5 	bl	8014ef8 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801558e:	4b0d      	ldr	r3, [pc, #52]	@ (80155c4 <vPortGetHeapStats+0xac>)
 8015590:	681a      	ldr	r2, [r3, #0]
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	601a      	str	r2, [r3, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 8015596:	4b0c      	ldr	r3, [pc, #48]	@ (80155c8 <vPortGetHeapStats+0xb0>)
 8015598:	681a      	ldr	r2, [r3, #0]
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	615a      	str	r2, [r3, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801559e:	4b0b      	ldr	r3, [pc, #44]	@ (80155cc <vPortGetHeapStats+0xb4>)
 80155a0:	681a      	ldr	r2, [r3, #0]
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	619a      	str	r2, [r3, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 80155a6:	4b0a      	ldr	r3, [pc, #40]	@ (80155d0 <vPortGetHeapStats+0xb8>)
 80155a8:	681a      	ldr	r2, [r3, #0]
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	611a      	str	r2, [r3, #16]
	}
	taskEXIT_CRITICAL();
 80155ae:	f7ff fcd5 	bl	8014f5c <vPortExitCritical>
}
 80155b2:	bf00      	nop
 80155b4:	3718      	adds	r7, #24
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd80      	pop	{r7, pc}
 80155ba:	bf00      	nop
 80155bc:	2000759c 	.word	0x2000759c
 80155c0:	200075a4 	.word	0x200075a4
 80155c4:	200075a8 	.word	0x200075a8
 80155c8:	200075b0 	.word	0x200075b0
 80155cc:	200075b4 	.word	0x200075b4
 80155d0:	200075ac 	.word	0x200075ac

080155d4 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 80155d8:	f7fc f851 	bl	801167e <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 80155dc:	f000 f818 	bl	8015610 <USBPD_DPM_InitCore>
 80155e0:	4603      	mov	r3, r0
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d001      	beq.n	80155ea <MX_USBPD_Init+0x16>
  {
    while(1);
 80155e6:	bf00      	nop
 80155e8:	e7fd      	b.n	80155e6 <MX_USBPD_Init+0x12>
  }

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 80155ea:	f000 fa01 	bl	80159f0 <USBPD_DPM_UserInit>
 80155ee:	4603      	mov	r3, r0
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d001      	beq.n	80155f8 <MX_USBPD_Init+0x24>
  {
    while(1);
 80155f4:	bf00      	nop
 80155f6:	e7fd      	b.n	80155f4 <MX_USBPD_Init+0x20>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 80155f8:	f000 f8b8 	bl	801576c <USBPD_DPM_InitOS>
 80155fc:	4603      	mov	r3, r0
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d001      	beq.n	8015606 <MX_USBPD_Init+0x32>
  {
    while(1);
 8015602:	bf00      	nop
 8015604:	e7fd      	b.n	8015602 <MX_USBPD_Init+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8015606:	b662      	cpsie	i
}
 8015608:	bf00      	nop
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 801560a:	bf00      	nop
 801560c:	bd80      	pop	{r7, pc}
	...

08015610 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 8015616:	2300      	movs	r3, #0
 8015618:	71fb      	strb	r3, [r7, #7]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 801561a:	484f      	ldr	r0, [pc, #316]	@ (8015758 <USBPD_DPM_InitCore+0x148>)
 801561c:	f7eb fb85 	bl	8000d2a <USBPD_PE_CheckLIB>
 8015620:	4603      	mov	r3, r0
 8015622:	2b01      	cmp	r3, #1
 8015624:	d001      	beq.n	801562a <USBPD_DPM_InitCore+0x1a>
  {
    return USBPD_ERROR;
 8015626:	2302      	movs	r3, #2
 8015628:	e092      	b.n	8015750 <USBPD_DPM_InitCore+0x140>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 801562a:	f7eb fb89 	bl	8000d40 <USBPD_PE_GetMemoryConsumption>
 801562e:	6038      	str	r0, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8015630:	2300      	movs	r3, #0
 8015632:	71bb      	strb	r3, [r7, #6]
 8015634:	e087      	b.n	8015746 <USBPD_DPM_InitCore+0x136>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 8015636:	79bb      	ldrb	r3, [r7, #6]
 8015638:	4a48      	ldr	r2, [pc, #288]	@ (801575c <USBPD_DPM_InitCore+0x14c>)
 801563a:	009b      	lsls	r3, r3, #2
 801563c:	4413      	add	r3, r2
 801563e:	785a      	ldrb	r2, [r3, #1]
 8015640:	f36f 02c3 	bfc	r2, #3, #1
 8015644:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 8015646:	79b9      	ldrb	r1, [r7, #6]
 8015648:	79ba      	ldrb	r2, [r7, #6]
 801564a:	4845      	ldr	r0, [pc, #276]	@ (8015760 <USBPD_DPM_InitCore+0x150>)
 801564c:	460b      	mov	r3, r1
 801564e:	005b      	lsls	r3, r3, #1
 8015650:	440b      	add	r3, r1
 8015652:	009b      	lsls	r3, r3, #2
 8015654:	4403      	add	r3, r0
 8015656:	791b      	ldrb	r3, [r3, #4]
 8015658:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801565c:	b2d8      	uxtb	r0, r3
 801565e:	493f      	ldr	r1, [pc, #252]	@ (801575c <USBPD_DPM_InitCore+0x14c>)
 8015660:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015664:	f360 0301 	bfi	r3, r0, #0, #2
 8015668:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 801566c:	79b9      	ldrb	r1, [r7, #6]
 801566e:	79ba      	ldrb	r2, [r7, #6]
 8015670:	483b      	ldr	r0, [pc, #236]	@ (8015760 <USBPD_DPM_InitCore+0x150>)
 8015672:	460b      	mov	r3, r1
 8015674:	005b      	lsls	r3, r3, #1
 8015676:	440b      	add	r3, r1
 8015678:	009b      	lsls	r3, r3, #2
 801567a:	4403      	add	r3, r0
 801567c:	791b      	ldrb	r3, [r3, #4]
 801567e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015682:	b2d8      	uxtb	r0, r3
 8015684:	4935      	ldr	r1, [pc, #212]	@ (801575c <USBPD_DPM_InitCore+0x14c>)
 8015686:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801568a:	f360 0382 	bfi	r3, r0, #2, #1
 801568e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 8015692:	79ba      	ldrb	r2, [r7, #6]
 8015694:	4931      	ldr	r1, [pc, #196]	@ (801575c <USBPD_DPM_InitCore+0x14c>)
 8015696:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801569a:	f36f 1304 	bfc	r3, #4, #1
 801569e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 80156a2:	79ba      	ldrb	r2, [r7, #6]
 80156a4:	492d      	ldr	r1, [pc, #180]	@ (801575c <USBPD_DPM_InitCore+0x14c>)
 80156a6:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 80156aa:	f36f 1387 	bfc	r3, #6, #2
 80156ae:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 80156b2:	79bb      	ldrb	r3, [r7, #6]
 80156b4:	4a29      	ldr	r2, [pc, #164]	@ (801575c <USBPD_DPM_InitCore+0x14c>)
 80156b6:	009b      	lsls	r3, r3, #2
 80156b8:	4413      	add	r3, r2
 80156ba:	785a      	ldrb	r2, [r3, #1]
 80156bc:	f36f 1246 	bfc	r2, #5, #2
 80156c0:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 80156c2:	79bb      	ldrb	r3, [r7, #6]
 80156c4:	4a25      	ldr	r2, [pc, #148]	@ (801575c <USBPD_DPM_InitCore+0x14c>)
 80156c6:	009b      	lsls	r3, r3, #2
 80156c8:	4413      	add	r3, r2
 80156ca:	785a      	ldrb	r2, [r3, #1]
 80156cc:	f36f 12c7 	bfc	r2, #7, #1
 80156d0:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index, (USBPD_CAD_Callbacks *)&CAD_cbs,
 80156d2:	79ba      	ldrb	r2, [r7, #6]
 80156d4:	4613      	mov	r3, r2
 80156d6:	005b      	lsls	r3, r3, #1
 80156d8:	4413      	add	r3, r2
 80156da:	009b      	lsls	r3, r3, #2
 80156dc:	4a20      	ldr	r2, [pc, #128]	@ (8015760 <USBPD_DPM_InitCore+0x150>)
 80156de:	441a      	add	r2, r3
 80156e0:	79bb      	ldrb	r3, [r7, #6]
 80156e2:	009b      	lsls	r3, r3, #2
 80156e4:	491d      	ldr	r1, [pc, #116]	@ (801575c <USBPD_DPM_InitCore+0x14c>)
 80156e6:	440b      	add	r3, r1
 80156e8:	79b8      	ldrb	r0, [r7, #6]
 80156ea:	491e      	ldr	r1, [pc, #120]	@ (8015764 <USBPD_DPM_InitCore+0x154>)
 80156ec:	f7ea fd98 	bl	8000220 <USBPD_CAD_Init>
 80156f0:	4603      	mov	r3, r0
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d001      	beq.n	80156fa <USBPD_DPM_InitCore+0xea>
 80156f6:	2302      	movs	r3, #2
 80156f8:	e02a      	b.n	8015750 <USBPD_DPM_InitCore+0x140>
                                           (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index], &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 80156fa:	79ba      	ldrb	r2, [r7, #6]
 80156fc:	4613      	mov	r3, r2
 80156fe:	005b      	lsls	r3, r3, #1
 8015700:	4413      	add	r3, r2
 8015702:	009b      	lsls	r3, r3, #2
 8015704:	4a16      	ldr	r2, [pc, #88]	@ (8015760 <USBPD_DPM_InitCore+0x150>)
 8015706:	1899      	adds	r1, r3, r2
 8015708:	79bb      	ldrb	r3, [r7, #6]
 801570a:	009b      	lsls	r3, r3, #2
 801570c:	4a13      	ldr	r2, [pc, #76]	@ (801575c <USBPD_DPM_InitCore+0x14c>)
 801570e:	441a      	add	r2, r3
 8015710:	79b8      	ldrb	r0, [r7, #6]
 8015712:	4b15      	ldr	r3, [pc, #84]	@ (8015768 <USBPD_DPM_InitCore+0x158>)
 8015714:	f7ea fe3a 	bl	800038c <USBPD_PE_Init>
 8015718:	4603      	mov	r3, r0
 801571a:	71fb      	strb	r3, [r7, #7]
 801571c:	79fb      	ldrb	r3, [r7, #7]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d001      	beq.n	8015726 <USBPD_DPM_InitCore+0x116>
 8015722:	79fb      	ldrb	r3, [r7, #7]
 8015724:	e014      	b.n	8015750 <USBPD_DPM_InitCore+0x140>
                                         &DPM_Params[_port_index], &dpmCallbacks));

  /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 8015726:	79bb      	ldrb	r3, [r7, #6]
 8015728:	4a0c      	ldr	r2, [pc, #48]	@ (801575c <USBPD_DPM_InitCore+0x14c>)
 801572a:	009b      	lsls	r3, r3, #2
 801572c:	4413      	add	r3, r2
 801572e:	785a      	ldrb	r2, [r3, #1]
 8015730:	f042 0208 	orr.w	r2, r2, #8
 8015734:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 8015736:	79bb      	ldrb	r3, [r7, #6]
 8015738:	2101      	movs	r1, #1
 801573a:	4618      	mov	r0, r3
 801573c:	f7ea fd98 	bl	8000270 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8015740:	79bb      	ldrb	r3, [r7, #6]
 8015742:	3301      	adds	r3, #1
 8015744:	71bb      	strb	r3, [r7, #6]
 8015746:	79bb      	ldrb	r3, [r7, #6]
 8015748:	2b00      	cmp	r3, #0
 801574a:	f43f af74 	beq.w	8015636 <USBPD_DPM_InitCore+0x26>
  }

  return _retr;
 801574e:	79fb      	ldrb	r3, [r7, #7]
}
 8015750:	4618      	mov	r0, r3
 8015752:	3708      	adds	r7, #8
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}
 8015758:	30410004 	.word	0x30410004
 801575c:	200075c8 	.word	0x200075c8
 8015760:	20000144 	.word	0x20000144
 8015764:	0801c270 	.word	0x0801c270
 8015768:	0801c278 	.word	0x0801c278

0801576c <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  CADQueueId = osMessageCreate(osMessageQ(queueCAD), NULL);
 8015770:	2100      	movs	r1, #0
 8015772:	480e      	ldr	r0, [pc, #56]	@ (80157ac <USBPD_DPM_InitOS+0x40>)
 8015774:	f7fd f8a4 	bl	80128c0 <osMessageCreate>
 8015778:	4603      	mov	r3, r0
 801577a:	4a0d      	ldr	r2, [pc, #52]	@ (80157b0 <USBPD_DPM_InitOS+0x44>)
 801577c:	6013      	str	r3, [r2, #0]
  if (osThreadCreate(osThread(CAD), NULL) == NULL)
 801577e:	2100      	movs	r1, #0
 8015780:	480c      	ldr	r0, [pc, #48]	@ (80157b4 <USBPD_DPM_InitOS+0x48>)
 8015782:	f7fd f856 	bl	8012832 <osThreadCreate>
 8015786:	4603      	mov	r3, r0
 8015788:	2b00      	cmp	r3, #0
 801578a:	d101      	bne.n	8015790 <USBPD_DPM_InitOS+0x24>
#else
  CADQueueId = osMessageQueueNew (2, sizeof(uint16_t), NULL);
  if (NULL == osThreadNew(USBPD_CAD_Task, &CADQueueId, &CAD_Thread_Atrr))
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 801578c:	2302      	movs	r3, #2
 801578e:	e00a      	b.n	80157a6 <USBPD_DPM_InitOS+0x3a>
  }

  /* Create the queue corresponding to PE task */
#if (osCMSIS < 0x20000U)
  PEQueueId[0] = osMessageCreate(osMessageQ(queuePE), NULL);
 8015790:	2100      	movs	r1, #0
 8015792:	4809      	ldr	r0, [pc, #36]	@ (80157b8 <USBPD_DPM_InitOS+0x4c>)
 8015794:	f7fd f894 	bl	80128c0 <osMessageCreate>
 8015798:	4603      	mov	r3, r0
 801579a:	4a08      	ldr	r2, [pc, #32]	@ (80157bc <USBPD_DPM_InitOS+0x50>)
 801579c:	6013      	str	r3, [r2, #0]
  PEQueueId[1] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#endif /* osCMSIS < 0x20000U */

  /* PE task to be created on attachment */
  DPM_PEThreadId_Table[USBPD_PORT_0] = NULL;
 801579e:	4b08      	ldr	r3, [pc, #32]	@ (80157c0 <USBPD_DPM_InitOS+0x54>)
 80157a0:	2200      	movs	r2, #0
 80157a2:	601a      	str	r2, [r3, #0]
#if USBPD_PORT_COUNT == 2
  DPM_PEThreadId_Table[USBPD_PORT_1] = NULL;
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 80157a4:	2300      	movs	r3, #0
}
 80157a6:	4618      	mov	r0, r3
 80157a8:	bd80      	pop	{r7, pc}
 80157aa:	bf00      	nop
 80157ac:	0801c268 	.word	0x0801c268
 80157b0:	200075bc 	.word	0x200075bc
 80157b4:	0801c254 	.word	0x0801c254
 80157b8:	0801c24c 	.word	0x0801c24c
 80157bc:	200075c4 	.word	0x200075c4
 80157c0:	200075c0 	.word	0x200075c0

080157c4 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b082      	sub	sp, #8
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	4603      	mov	r3, r0
 80157cc:	71fb      	strb	r3, [r7, #7]
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(PEQueueId[PortNum], 0xFFFF, 0);
 80157ce:	79fb      	ldrb	r3, [r7, #7]
 80157d0:	4a06      	ldr	r2, [pc, #24]	@ (80157ec <USBPD_PE_TaskWakeUp+0x28>)
 80157d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80157d6:	2200      	movs	r2, #0
 80157d8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80157dc:	4618      	mov	r0, r3
 80157de:	f7fd f881 	bl	80128e4 <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(PEQueueId[PortNum], &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 80157e2:	bf00      	nop
 80157e4:	3708      	adds	r7, #8
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}
 80157ea:	bf00      	nop
 80157ec:	200075c4 	.word	0x200075c4

080157f0 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
 80157f4:	4b04      	ldr	r3, [pc, #16]	@ (8015808 <USBPD_DPM_CADTaskWakeUp+0x18>)
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	2200      	movs	r2, #0
 80157fa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80157fe:	4618      	mov	r0, r3
 8015800:	f7fd f870 	bl	80128e4 <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 8015804:	bf00      	nop
 8015806:	bd80      	pop	{r7, pc}
 8015808:	200075bc 	.word	0x200075bc

0801580c <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task(void const *argument)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b088      	sub	sp, #32
 8015810:	af00      	add	r7, sp, #0
 8015812:	6178      	str	r0, [r7, #20]
  uint8_t _port = (uint32_t)argument;
 8015814:	697b      	ldr	r3, [r7, #20]
 8015816:	77fb      	strb	r3, [r7, #31]
  uint32_t _timing;

  for(;;)
  {
    _timing = USBPD_PE_StateMachine_SNK(_port);
 8015818:	7ffb      	ldrb	r3, [r7, #31]
 801581a:	4618      	mov	r0, r3
 801581c:	f7eb fd5e 	bl	80012dc <USBPD_PE_StateMachine_SNK>
 8015820:	61b8      	str	r0, [r7, #24]
    osMessageGet(PEQueueId[_port],_timing);
 8015822:	7ffb      	ldrb	r3, [r7, #31]
 8015824:	4a04      	ldr	r2, [pc, #16]	@ (8015838 <USBPD_PE_Task+0x2c>)
 8015826:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801582a:	463b      	mov	r3, r7
 801582c:	69ba      	ldr	r2, [r7, #24]
 801582e:	4618      	mov	r0, r3
 8015830:	f7fd f898 	bl	8012964 <osMessageGet>
    _timing = USBPD_PE_StateMachine_SNK(_port);
 8015834:	bf00      	nop
 8015836:	e7ef      	b.n	8015818 <USBPD_PE_Task+0xc>
 8015838:	200075c4 	.word	0x200075c4

0801583c <USBPD_CAD_Task>:
#if (osCMSIS < 0x20000U)
void USBPD_CAD_Task(void const *argument)
#else
void USBPD_CAD_Task(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 801583c:	b590      	push	{r4, r7, lr}
 801583e:	b087      	sub	sp, #28
 8015840:	af00      	add	r7, sp, #0
 8015842:	6178      	str	r0, [r7, #20]
  for (;;)
  {
#if (osCMSIS < 0x20000U)
    osMessageGet(CADQueueId, USBPD_CAD_Process());
 8015844:	4b05      	ldr	r3, [pc, #20]	@ (801585c <USBPD_CAD_Task+0x20>)
 8015846:	681c      	ldr	r4, [r3, #0]
 8015848:	f7ea fd19 	bl	800027e <USBPD_CAD_Process>
 801584c:	4602      	mov	r2, r0
 801584e:	463b      	mov	r3, r7
 8015850:	4621      	mov	r1, r4
 8015852:	4618      	mov	r0, r3
 8015854:	f7fd f886 	bl	8012964 <osMessageGet>
 8015858:	e7f4      	b.n	8015844 <USBPD_CAD_Task+0x8>
 801585a:	bf00      	nop
 801585c:	200075bc 	.word	0x200075bc

08015860 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b084      	sub	sp, #16
 8015864:	af00      	add	r7, sp, #0
 8015866:	4603      	mov	r3, r0
 8015868:	603a      	str	r2, [r7, #0]
 801586a:	71fb      	strb	r3, [r7, #7]
 801586c:	460b      	mov	r3, r1
 801586e:	71bb      	strb	r3, [r7, #6]

  switch (State)
 8015870:	79bb      	ldrb	r3, [r7, #6]
 8015872:	3b01      	subs	r3, #1
 8015874:	2b03      	cmp	r3, #3
 8015876:	d867      	bhi.n	8015948 <USBPD_DPM_CADCallback+0xe8>
 8015878:	a201      	add	r2, pc, #4	@ (adr r2, 8015880 <USBPD_DPM_CADCallback+0x20>)
 801587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801587e:	bf00      	nop
 8015880:	080158ad 	.word	0x080158ad
 8015884:	0801589f 	.word	0x0801589f
 8015888:	080158ad 	.word	0x080158ad
 801588c:	08015891 	.word	0x08015891
    case USBPD_CAD_EVENT_ATTEMC :
    {
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnStatus = USBPD_TRUE;
#endif /* _VCONN_SUPPORT */
      DPM_ManageAttachedState(PortNum, State, Cc);
 8015890:	79b9      	ldrb	r1, [r7, #6]
 8015892:	79fb      	ldrb	r3, [r7, #7]
 8015894:	683a      	ldr	r2, [r7, #0]
 8015896:	4618      	mov	r0, r3
 8015898:	f000 f860 	bl	801595c <DPM_ManageAttachedState>
#ifdef _VCONN_SUPPORT
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=TRUE");
#endif /* _VCONN_SUPPORT */
      break;
 801589c:	e055      	b.n	801594a <USBPD_DPM_CADCallback+0xea>
    }
    case USBPD_CAD_EVENT_ATTACHED :
      DPM_ManageAttachedState(PortNum, State, Cc);
 801589e:	79b9      	ldrb	r1, [r7, #6]
 80158a0:	79fb      	ldrb	r3, [r7, #7]
 80158a2:	683a      	ldr	r2, [r7, #0]
 80158a4:	4618      	mov	r0, r3
 80158a6:	f000 f859 	bl	801595c <DPM_ManageAttachedState>
      break;
 80158aa:	e04e      	b.n	801594a <USBPD_DPM_CADCallback+0xea>
    case USBPD_CAD_EVENT_DETACHED :
    case USBPD_CAD_EVENT_EMC :
    {
      /* The ufp is detached */
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 80158ac:	79fb      	ldrb	r3, [r7, #7]
 80158ae:	2100      	movs	r1, #0
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7ea fdd1 	bl	8000458 <USBPD_PE_IsCableConnected>
      /* Terminate PE task */
      if (DPM_PEThreadId_Table[PortNum] != NULL)
 80158b6:	79fb      	ldrb	r3, [r7, #7]
 80158b8:	4a26      	ldr	r2, [pc, #152]	@ (8015954 <USBPD_DPM_CADCallback+0xf4>)
 80158ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d023      	beq.n	801590a <USBPD_DPM_CADCallback+0xaa>
      {
        uint8_t _timeout = 0;
 80158c2:	2300      	movs	r3, #0
 80158c4:	73fb      	strb	r3, [r7, #15]
        /* Let time to PE to complete the ongoing action */
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 80158c6:	e008      	b.n	80158da <USBPD_DPM_CADCallback+0x7a>
        {
          osDelay(1);
 80158c8:	2001      	movs	r0, #1
 80158ca:	f7fc ffe5 	bl	8012898 <osDelay>
          _timeout++;
 80158ce:	7bfb      	ldrb	r3, [r7, #15]
 80158d0:	3301      	adds	r3, #1
 80158d2:	73fb      	strb	r3, [r7, #15]
          if (_timeout > 30)
 80158d4:	7bfb      	ldrb	r3, [r7, #15]
 80158d6:	2b1e      	cmp	r3, #30
 80158d8:	d80a      	bhi.n	80158f0 <USBPD_DPM_CADCallback+0x90>
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 80158da:	79fb      	ldrb	r3, [r7, #7]
 80158dc:	4a1d      	ldr	r2, [pc, #116]	@ (8015954 <USBPD_DPM_CADCallback+0xf4>)
 80158de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158e2:	4618      	mov	r0, r3
 80158e4:	f7fe fa16 	bl	8013d14 <eTaskGetState>
 80158e8:	4603      	mov	r3, r0
 80158ea:	2b02      	cmp	r3, #2
 80158ec:	d1ec      	bne.n	80158c8 <USBPD_DPM_CADCallback+0x68>
 80158ee:	e000      	b.n	80158f2 <USBPD_DPM_CADCallback+0x92>
          {
            break;
 80158f0:	bf00      	nop
          }
        };

        /* Kill PE task */
        osThreadTerminate(DPM_PEThreadId_Table[PortNum]);
 80158f2:	79fb      	ldrb	r3, [r7, #7]
 80158f4:	4a17      	ldr	r2, [pc, #92]	@ (8015954 <USBPD_DPM_CADCallback+0xf4>)
 80158f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158fa:	4618      	mov	r0, r3
 80158fc:	f7fc ffc0 	bl	8012880 <osThreadTerminate>
        DPM_PEThreadId_Table[PortNum] = NULL;
 8015900:	79fb      	ldrb	r3, [r7, #7]
 8015902:	4a14      	ldr	r2, [pc, #80]	@ (8015954 <USBPD_DPM_CADCallback+0xf4>)
 8015904:	2100      	movs	r1, #0
 8015906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 801590a:	79fa      	ldrb	r2, [r7, #7]
 801590c:	4912      	ldr	r1, [pc, #72]	@ (8015958 <USBPD_DPM_CADCallback+0xf8>)
 801590e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015912:	f36f 1304 	bfc	r3, #4, #1
 8015916:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 801591a:	79fa      	ldrb	r2, [r7, #7]
 801591c:	490e      	ldr	r1, [pc, #56]	@ (8015958 <USBPD_DPM_CADCallback+0xf8>)
 801591e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015922:	f36f 1387 	bfc	r3, #6, #2
 8015926:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 801592a:	79fb      	ldrb	r3, [r7, #7]
 801592c:	4a0a      	ldr	r2, [pc, #40]	@ (8015958 <USBPD_DPM_CADCallback+0xf8>)
 801592e:	009b      	lsls	r3, r3, #2
 8015930:	4413      	add	r3, r2
 8015932:	785a      	ldrb	r2, [r3, #1]
 8015934:	f36f 0202 	bfc	r2, #0, #3
 8015938:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 801593a:	79ba      	ldrb	r2, [r7, #6]
 801593c:	79fb      	ldrb	r3, [r7, #7]
 801593e:	4611      	mov	r1, r2
 8015940:	4618      	mov	r0, r3
 8015942:	f000 f85d 	bl	8015a00 <USBPD_DPM_UserCableDetection>
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnCCIs = CCNONE;
      DPM_Params[PortNum].VconnStatus = USBPD_FALSE;
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=FALSE");
#endif /* _VCONN_SUPPORT */
      break;
 8015946:	e000      	b.n	801594a <USBPD_DPM_CADCallback+0xea>
    }
    default :
      /* nothing to do */
      break;
 8015948:	bf00      	nop
  }
}
 801594a:	bf00      	nop
 801594c:	3710      	adds	r7, #16
 801594e:	46bd      	mov	sp, r7
 8015950:	bd80      	pop	{r7, pc}
 8015952:	bf00      	nop
 8015954:	200075c0 	.word	0x200075c0
 8015958:	200075c8 	.word	0x200075c8

0801595c <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 801595c:	b590      	push	{r4, r7, lr}
 801595e:	b083      	sub	sp, #12
 8015960:	af00      	add	r7, sp, #0
 8015962:	4603      	mov	r3, r0
 8015964:	603a      	str	r2, [r7, #0]
 8015966:	71fb      	strb	r3, [r7, #7]
 8015968:	460b      	mov	r3, r1
 801596a:	71bb      	strb	r3, [r7, #6]
  if (CC2 == Cc)
  {
    DPM_Params[PortNum].VconnCCIs = CC1;
  }
#endif /* _VCONN_SUPPORT */
  DPM_Params[PortNum].ActiveCCIs = Cc;
 801596c:	79fa      	ldrb	r2, [r7, #7]
 801596e:	683b      	ldr	r3, [r7, #0]
 8015970:	f003 0303 	and.w	r3, r3, #3
 8015974:	b2d8      	uxtb	r0, r3
 8015976:	491a      	ldr	r1, [pc, #104]	@ (80159e0 <DPM_ManageAttachedState+0x84>)
 8015978:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801597c:	f360 1387 	bfi	r3, r0, #6, #2
 8015980:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 8015984:	79fb      	ldrb	r3, [r7, #7]
 8015986:	2101      	movs	r1, #1
 8015988:	4618      	mov	r0, r3
 801598a:	f7ea fd65 	bl	8000458 <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 801598e:	79ba      	ldrb	r2, [r7, #6]
 8015990:	79fb      	ldrb	r3, [r7, #7]
 8015992:	4611      	mov	r1, r2
 8015994:	4618      	mov	r0, r3
 8015996:	f000 f833 	bl	8015a00 <USBPD_DPM_UserCableDetection>

  /* Create PE task */
  if (DPM_PEThreadId_Table[PortNum] == NULL)
 801599a:	79fb      	ldrb	r3, [r7, #7]
 801599c:	4a11      	ldr	r2, [pc, #68]	@ (80159e4 <DPM_ManageAttachedState+0x88>)
 801599e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d117      	bne.n	80159d6 <DPM_ManageAttachedState+0x7a>
  {
#if (osCMSIS < 0x20000U)
    DPM_PEThreadId_Table[PortNum] = osThreadCreate(OSTHREAD_PE(PortNum), (void *)((uint32_t)PortNum));
 80159a6:	79fb      	ldrb	r3, [r7, #7]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d101      	bne.n	80159b0 <DPM_ManageAttachedState+0x54>
 80159ac:	4b0e      	ldr	r3, [pc, #56]	@ (80159e8 <DPM_ManageAttachedState+0x8c>)
 80159ae:	e000      	b.n	80159b2 <DPM_ManageAttachedState+0x56>
 80159b0:	4b0e      	ldr	r3, [pc, #56]	@ (80159ec <DPM_ManageAttachedState+0x90>)
 80159b2:	79fa      	ldrb	r2, [r7, #7]
 80159b4:	79fc      	ldrb	r4, [r7, #7]
 80159b6:	4611      	mov	r1, r2
 80159b8:	4618      	mov	r0, r3
 80159ba:	f7fc ff3a 	bl	8012832 <osThreadCreate>
 80159be:	4603      	mov	r3, r0
 80159c0:	4a08      	ldr	r2, [pc, #32]	@ (80159e4 <DPM_ManageAttachedState+0x88>)
 80159c2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
#else
    DPM_PEThreadId_Table[PortNum] = osThreadNew(OSTHREAD_PE(PortNum), NULL, OSTHREAD_PE_ATTR(PortNum));
#endif /* osCMSIS < 0x20000U */
    if (DPM_PEThreadId_Table[PortNum] == NULL)
 80159c6:	79fb      	ldrb	r3, [r7, #7]
 80159c8:	4a06      	ldr	r2, [pc, #24]	@ (80159e4 <DPM_ManageAttachedState+0x88>)
 80159ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d101      	bne.n	80159d6 <DPM_ManageAttachedState+0x7a>
    {
      /* should not occur. May be an issue with FreeRTOS heap size too small */
      while (1);
 80159d2:	bf00      	nop
 80159d4:	e7fd      	b.n	80159d2 <DPM_ManageAttachedState+0x76>
    }
  }
}
 80159d6:	bf00      	nop
 80159d8:	370c      	adds	r7, #12
 80159da:	46bd      	mov	sp, r7
 80159dc:	bd90      	pop	{r4, r7, pc}
 80159de:	bf00      	nop
 80159e0:	200075c8 	.word	0x200075c8
 80159e4:	200075c0 	.word	0x200075c0
 80159e8:	0801c224 	.word	0x0801c224
 80159ec:	0801c238 	.word	0x0801c238

080159f0 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 80159f0:	b480      	push	{r7}
 80159f2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 80159f4:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	46bd      	mov	sp, r7
 80159fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fe:	4770      	bx	lr

08015a00 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 8015a00:	b480      	push	{r7}
 8015a02:	b083      	sub	sp, #12
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	4603      	mov	r3, r0
 8015a08:	460a      	mov	r2, r1
 8015a0a:	71fb      	strb	r3, [r7, #7]
 8015a0c:	4613      	mov	r3, r2
 8015a0e:	71bb      	strb	r3, [r7, #6]
      // }
      // break;
    // }
  // }
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8015a10:	bf00      	nop
 8015a12:	370c      	adds	r7, #12
 8015a14:	46bd      	mov	sp, r7
 8015a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1a:	4770      	bx	lr

08015a1c <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	b083      	sub	sp, #12
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	4603      	mov	r3, r0
 8015a24:	460a      	mov	r2, r1
 8015a26:	71fb      	strb	r3, [r7, #7]
 8015a28:	4613      	mov	r3, r2
 8015a2a:	71bb      	strb	r3, [r7, #6]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 8015a2c:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_Notification */
}
 8015a2e:	bf00      	nop
 8015a30:	370c      	adds	r7, #12
 8015a32:	46bd      	mov	sp, r7
 8015a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a38:	4770      	bx	lr

08015a3a <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 8015a3a:	b480      	push	{r7}
 8015a3c:	b083      	sub	sp, #12
 8015a3e:	af00      	add	r7, sp, #0
 8015a40:	4603      	mov	r3, r0
 8015a42:	6039      	str	r1, [r7, #0]
 8015a44:	71fb      	strb	r3, [r7, #7]
 8015a46:	4613      	mov	r3, r2
 8015a48:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 8015a4a:	bf00      	nop
 8015a4c:	370c      	adds	r7, #12
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a54:	4770      	bx	lr

08015a56 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8015a56:	b480      	push	{r7}
 8015a58:	b085      	sub	sp, #20
 8015a5a:	af00      	add	r7, sp, #0
 8015a5c:	60ba      	str	r2, [r7, #8]
 8015a5e:	607b      	str	r3, [r7, #4]
 8015a60:	4603      	mov	r3, r0
 8015a62:	73fb      	strb	r3, [r7, #15]
 8015a64:	460b      	mov	r3, r1
 8015a66:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 8015a68:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 8015a6a:	bf00      	nop
 8015a6c:	3714      	adds	r7, #20
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a74:	4770      	bx	lr

08015a76 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 8015a76:	b480      	push	{r7}
 8015a78:	b085      	sub	sp, #20
 8015a7a:	af00      	add	r7, sp, #0
 8015a7c:	60ba      	str	r2, [r7, #8]
 8015a7e:	607b      	str	r3, [r7, #4]
 8015a80:	4603      	mov	r3, r0
 8015a82:	73fb      	strb	r3, [r7, #15]
 8015a84:	460b      	mov	r3, r1
 8015a86:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 8015a88:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 8015a8a:	bf00      	nop
 8015a8c:	3714      	adds	r7, #20
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a94:	4770      	bx	lr

08015a96 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 8015a96:	b480      	push	{r7}
 8015a98:	b085      	sub	sp, #20
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	60b9      	str	r1, [r7, #8]
 8015aa0:	607a      	str	r2, [r7, #4]
 8015aa2:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 8015aa4:	bf00      	nop
 8015aa6:	3714      	adds	r7, #20
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aae:	4770      	bx	lr

08015ab0 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 8015ab0:	b480      	push	{r7}
 8015ab2:	b083      	sub	sp, #12
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	603a      	str	r2, [r7, #0]
 8015ab8:	461a      	mov	r2, r3
 8015aba:	4603      	mov	r3, r0
 8015abc:	71fb      	strb	r3, [r7, #7]
 8015abe:	460b      	mov	r3, r1
 8015ac0:	71bb      	strb	r3, [r7, #6]
 8015ac2:	4613      	mov	r3, r2
 8015ac4:	80bb      	strh	r3, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 8015ac6:	bf00      	nop
 8015ac8:	370c      	adds	r7, #12
 8015aca:	46bd      	mov	sp, r7
 8015acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad0:	4770      	bx	lr

08015ad2 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 8015ad2:	b580      	push	{r7, lr}
 8015ad4:	b082      	sub	sp, #8
 8015ad6:	af00      	add	r7, sp, #0
 8015ad8:	4603      	mov	r3, r0
 8015ada:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8015adc:	79fb      	ldrb	r3, [r7, #7]
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f7ea fc50 	bl	8000384 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 8015ae4:	bf00      	nop
 8015ae6:	3708      	adds	r7, #8
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}

08015aec <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8015aec:	b480      	push	{r7}
 8015aee:	b085      	sub	sp, #20
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	4603      	mov	r3, r0
 8015af4:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 8015af6:	230c      	movs	r3, #12
 8015af8:	73fb      	strb	r3, [r7, #15]
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 8015afa:	79fb      	ldrb	r3, [r7, #7]
 8015afc:	4a18      	ldr	r2, [pc, #96]	@ (8015b60 <USBPD_DPM_EvaluateDataRoleSwap+0x74>)
 8015afe:	2158      	movs	r1, #88	@ 0x58
 8015b00:	fb01 f303 	mul.w	r3, r1, r3
 8015b04:	4413      	add	r3, r2
 8015b06:	781b      	ldrb	r3, [r3, #0]
 8015b08:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015b0c:	b2db      	uxtb	r3, r3
 8015b0e:	2b01      	cmp	r3, #1
 8015b10:	d108      	bne.n	8015b24 <USBPD_DPM_EvaluateDataRoleSwap+0x38>
 8015b12:	79fb      	ldrb	r3, [r7, #7]
 8015b14:	4a13      	ldr	r2, [pc, #76]	@ (8015b64 <USBPD_DPM_EvaluateDataRoleSwap+0x78>)
 8015b16:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8015b1a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015b1e:	b2db      	uxtb	r3, r3
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d014      	beq.n	8015b4e <USBPD_DPM_EvaluateDataRoleSwap+0x62>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 8015b24:	79fb      	ldrb	r3, [r7, #7]
 8015b26:	4a0e      	ldr	r2, [pc, #56]	@ (8015b60 <USBPD_DPM_EvaluateDataRoleSwap+0x74>)
 8015b28:	2158      	movs	r1, #88	@ 0x58
 8015b2a:	fb01 f303 	mul.w	r3, r1, r3
 8015b2e:	4413      	add	r3, r2
 8015b30:	781b      	ldrb	r3, [r3, #0]
 8015b32:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015b36:	b2db      	uxtb	r3, r3
 8015b38:	2b01      	cmp	r3, #1
 8015b3a:	d10a      	bne.n	8015b52 <USBPD_DPM_EvaluateDataRoleSwap+0x66>
 8015b3c:	79fb      	ldrb	r3, [r7, #7]
 8015b3e:	4a09      	ldr	r2, [pc, #36]	@ (8015b64 <USBPD_DPM_EvaluateDataRoleSwap+0x78>)
 8015b40:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8015b44:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015b48:	b2db      	uxtb	r3, r3
 8015b4a:	2b01      	cmp	r3, #1
 8015b4c:	d101      	bne.n	8015b52 <USBPD_DPM_EvaluateDataRoleSwap+0x66>
    {
      status = USBPD_ACCEPT;
 8015b4e:	230a      	movs	r3, #10
 8015b50:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8015b52:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 8015b54:	4618      	mov	r0, r3
 8015b56:	3714      	adds	r7, #20
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5e:	4770      	bx	lr
 8015b60:	20000150 	.word	0x20000150
 8015b64:	200075c8 	.word	0x200075c8

08015b68 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b082      	sub	sp, #8
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	4603      	mov	r3, r0
 8015b70:	460a      	mov	r2, r1
 8015b72:	71fb      	strb	r3, [r7, #7]
 8015b74:	4613      	mov	r3, r2
 8015b76:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 8015b78:	79ba      	ldrb	r2, [r7, #6]
 8015b7a:	79fb      	ldrb	r3, [r7, #7]
 8015b7c:	4611      	mov	r1, r2
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f000 f80a 	bl	8015b98 <USBPD_PWR_IF_SupplyReady>
 8015b84:	4603      	mov	r3, r0
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	bf0c      	ite	eq
 8015b8a:	2301      	moveq	r3, #1
 8015b8c:	2300      	movne	r3, #0
 8015b8e:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 8015b90:	4618      	mov	r0, r3
 8015b92:	3708      	adds	r7, #8
 8015b94:	46bd      	mov	sp, r7
 8015b96:	bd80      	pop	{r7, pc}

08015b98 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b084      	sub	sp, #16
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	460a      	mov	r2, r1
 8015ba2:	71fb      	strb	r3, [r7, #7]
 8015ba4:	4613      	mov	r3, r2
 8015ba6:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8015ba8:	2302      	movs	r3, #2
 8015baa:	73fb      	strb	r3, [r7, #15]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 8015bac:	79fb      	ldrb	r3, [r7, #7]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d001      	beq.n	8015bb6 <USBPD_PWR_IF_SupplyReady+0x1e>
  {
    return USBPD_ERROR;
 8015bb2:	2302      	movs	r3, #2
 8015bb4:	e01c      	b.n	8015bf0 <USBPD_PWR_IF_SupplyReady+0x58>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8015bb6:	79fb      	ldrb	r3, [r7, #7]
 8015bb8:	f107 0208 	add.w	r2, r7, #8
 8015bbc:	4611      	mov	r1, r2
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f000 f890 	bl	8015ce4 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8015bc4:	79bb      	ldrb	r3, [r7, #6]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d109      	bne.n	8015bde <USBPD_PWR_IF_SupplyReady+0x46>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8015bca:	68bb      	ldr	r3, [r7, #8]
 8015bcc:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8015bd0:	4293      	cmp	r3, r2
 8015bd2:	d801      	bhi.n	8015bd8 <USBPD_PWR_IF_SupplyReady+0x40>
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	e000      	b.n	8015bda <USBPD_PWR_IF_SupplyReady+0x42>
 8015bd8:	2302      	movs	r3, #2
 8015bda:	73fb      	strb	r3, [r7, #15]
 8015bdc:	e007      	b.n	8015bee <USBPD_PWR_IF_SupplyReady+0x56>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8015bde:	68bb      	ldr	r3, [r7, #8]
 8015be0:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8015be4:	d901      	bls.n	8015bea <USBPD_PWR_IF_SupplyReady+0x52>
 8015be6:	2300      	movs	r3, #0
 8015be8:	e000      	b.n	8015bec <USBPD_PWR_IF_SupplyReady+0x54>
 8015bea:	2302      	movs	r3, #2
 8015bec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015bee:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	3710      	adds	r7, #16
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}

08015bf8 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b084      	sub	sp, #16
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	4603      	mov	r3, r0
 8015c00:	460a      	mov	r2, r1
 8015c02:	71fb      	strb	r3, [r7, #7]
 8015c04:	4613      	mov	r3, r2
 8015c06:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 8015c08:	2300      	movs	r3, #0
 8015c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 8015c0c:	79fb      	ldrb	r3, [r7, #7]
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f7fc fa9c 	bl	801214c <HW_IF_PWR_GetVoltage>
 8015c14:	4603      	mov	r3, r0
 8015c16:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 8015c18:	79bb      	ldrb	r3, [r7, #6]
 8015c1a:	2b02      	cmp	r3, #2
 8015c1c:	d015      	beq.n	8015c4a <USBPD_PWR_IF_GetVBUSStatus+0x52>
 8015c1e:	2b02      	cmp	r3, #2
 8015c20:	dc1a      	bgt.n	8015c58 <USBPD_PWR_IF_GetVBUSStatus+0x60>
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d002      	beq.n	8015c2c <USBPD_PWR_IF_GetVBUSStatus+0x34>
 8015c26:	2b01      	cmp	r3, #1
 8015c28:	d008      	beq.n	8015c3c <USBPD_PWR_IF_GetVBUSStatus+0x44>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 8015c2a:	e015      	b.n	8015c58 <USBPD_PWR_IF_GetVBUSStatus+0x60>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015c2c:	68bb      	ldr	r3, [r7, #8]
 8015c2e:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8015c32:	4293      	cmp	r3, r2
 8015c34:	d812      	bhi.n	8015c5c <USBPD_PWR_IF_GetVBUSStatus+0x64>
 8015c36:	2301      	movs	r3, #1
 8015c38:	73fb      	strb	r3, [r7, #15]
    break;
 8015c3a:	e00f      	b.n	8015c5c <USBPD_PWR_IF_GetVBUSStatus+0x64>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015c3c:	68bb      	ldr	r3, [r7, #8]
 8015c3e:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8015c42:	d30d      	bcc.n	8015c60 <USBPD_PWR_IF_GetVBUSStatus+0x68>
 8015c44:	2301      	movs	r3, #1
 8015c46:	73fb      	strb	r3, [r7, #15]
    break;
 8015c48:	e00a      	b.n	8015c60 <USBPD_PWR_IF_GetVBUSStatus+0x68>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015c4a:	68bb      	ldr	r3, [r7, #8]
 8015c4c:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8015c50:	d208      	bcs.n	8015c64 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
 8015c52:	2301      	movs	r3, #1
 8015c54:	73fb      	strb	r3, [r7, #15]
    break;
 8015c56:	e005      	b.n	8015c64 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
    break;
 8015c58:	bf00      	nop
 8015c5a:	e004      	b.n	8015c66 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8015c5c:	bf00      	nop
 8015c5e:	e002      	b.n	8015c66 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8015c60:	bf00      	nop
 8015c62:	e000      	b.n	8015c66 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8015c64:	bf00      	nop
  }
  return _status;
 8015c66:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3710      	adds	r7, #16
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <BSP_USBPD_PWR_Init>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 8015c70:	b480      	push	{r7}
 8015c72:	b085      	sub	sp, #20
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d002      	beq.n	8015c88 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015c82:	f06f 0301 	mvn.w	r3, #1
 8015c86:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8015c88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	3714      	adds	r7, #20
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c94:	4770      	bx	lr

08015c96 <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 8015c96:	b480      	push	{r7}
 8015c98:	b085      	sub	sp, #20
 8015c9a:	af00      	add	r7, sp, #0
 8015c9c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d002      	beq.n	8015cae <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015ca8:	f06f 0301 	mvn.w	r3, #1
 8015cac:	60fb      	str	r3, [r7, #12]
  else
  {
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 8015cae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3714      	adds	r7, #20
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cba:	4770      	bx	lr

08015cbc <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	b085      	sub	sp, #20
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8015cc4:	f06f 030a 	mvn.w	r3, #10
 8015cc8:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d002      	beq.n	8015cd6 <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015cd0:	f06f 0301 	mvn.w	r3, #1
 8015cd4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 8015cd8:	4618      	mov	r0, r3
 8015cda:	3714      	adds	r7, #20
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce2:	4770      	bx	lr

08015ce4 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 8015ce4:	b480      	push	{r7}
 8015ce6:	b085      	sub	sp, #20
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid       */
  int32_t ret;
  uint32_t val = 0U;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	60bb      	str	r3, [r7, #8]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d102      	bne.n	8015cfe <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d103      	bne.n	8015d06 <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015cfe:	f06f 0301 	mvn.w	r3, #1
 8015d02:	60fb      	str	r3, [r7, #12]
 8015d04:	e002      	b.n	8015d0c <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8015d06:	f06f 030a 	mvn.w	r3, #10
 8015d0a:	60fb      	str	r3, [r7, #12]
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  }
  *pVoltage = val;
 8015d0c:	683b      	ldr	r3, [r7, #0]
 8015d0e:	68ba      	ldr	r2, [r7, #8]
 8015d10:	601a      	str	r2, [r3, #0]
  return ret;
 8015d12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 8015d14:	4618      	mov	r0, r3
 8015d16:	3714      	adds	r7, #20
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d1e:	4770      	bx	lr

08015d20 <asserv_init>:
extern uint16_t adc2_asserv_VAL[2];

int16_t I_cons_1 = 0;
int16_t I_cons_2 = 0;

void asserv_init(void){
 8015d20:	b480      	push	{r7}
 8015d22:	af00      	add	r7, sp, #0

}
 8015d24:	bf00      	nop
 8015d26:	46bd      	mov	sp, r7
 8015d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2c:	4770      	bx	lr
	...

08015d30 <CUSTOM_TIM_PeriodElapsedCallback>:
/*
 * We must declared here a function CUSTOM_ because main.c already use this callback
 */

/*********** PREEMPTION PRIORITY 14 ***********/
void CUSTOM_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b086      	sub	sp, #24
 8015d34:	af02      	add	r7, sp, #8
 8015d36:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM15) { //Every 1s
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	4a5d      	ldr	r2, [pc, #372]	@ (8015eb4 <CUSTOM_TIM_PeriodElapsedCallback+0x184>)
 8015d3e:	4293      	cmp	r3, r2
 8015d40:	d132      	bne.n	8015da8 <CUSTOM_TIM_PeriodElapsedCallback+0x78>
		if (isSeeIMU) {
 8015d42:	4b5d      	ldr	r3, [pc, #372]	@ (8015eb8 <CUSTOM_TIM_PeriodElapsedCallback+0x188>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d02e      	beq.n	8015da8 <CUSTOM_TIM_PeriodElapsedCallback+0x78>
			uint8_t ret_ADXL;
			uint8_t ret_GPIO;
			ADXL343_ReadRegister(0x2B, &ret_ADXL, 1);
 8015d4a:	f107 030e 	add.w	r3, r7, #14
 8015d4e:	2201      	movs	r2, #1
 8015d50:	4619      	mov	r1, r3
 8015d52:	202b      	movs	r0, #43	@ 0x2b
 8015d54:	f7ef fcfa 	bl	800574c <ADXL343_ReadRegister>
			TCA9555_ReadRegister(0x01, &ret_GPIO, 1);
 8015d58:	f107 030d 	add.w	r3, r7, #13
 8015d5c:	2201      	movs	r2, #1
 8015d5e:	4619      	mov	r1, r3
 8015d60:	2001      	movs	r0, #1
 8015d62:	f7ef fe9b 	bl	8005a9c <TCA9555_ReadRegister>
			printf("READ - ACP_TAP_STATUS :0x%02X\r\n",ret_ADXL);
 8015d66:	7bbb      	ldrb	r3, [r7, #14]
 8015d68:	4619      	mov	r1, r3
 8015d6a:	4854      	ldr	r0, [pc, #336]	@ (8015ebc <CUSTOM_TIM_PeriodElapsedCallback+0x18c>)
 8015d6c:	f002 fd42 	bl	80187f4 <iprintf>
			printf("READ - OUTPUT Port Registers :0x%02X\r\n",ret_GPIO);
 8015d70:	7b7b      	ldrb	r3, [r7, #13]
 8015d72:	4619      	mov	r1, r3
 8015d74:	4852      	ldr	r0, [pc, #328]	@ (8015ec0 <CUSTOM_TIM_PeriodElapsedCallback+0x190>)
 8015d76:	f002 fd3d 	bl	80187f4 <iprintf>


			BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	60bb      	str	r3, [r7, #8]
			xTaskNotifyFromISR(h_task_asserv_XYZ,
 8015d7e:	4b51      	ldr	r3, [pc, #324]	@ (8015ec4 <CUSTOM_TIM_PeriodElapsedCallback+0x194>)
 8015d80:	6818      	ldr	r0, [r3, #0]
 8015d82:	f107 0308 	add.w	r3, r7, #8
 8015d86:	9300      	str	r3, [sp, #0]
 8015d88:	2300      	movs	r3, #0
 8015d8a:	2201      	movs	r2, #1
 8015d8c:	2101      	movs	r1, #1
 8015d8e:	f7fe fe39 	bl	8014a04 <xTaskGenericNotifyFromISR>
					1,
					eSetBits,
					&pxHigherPriorityTaskWoken);
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d007      	beq.n	8015da8 <CUSTOM_TIM_PeriodElapsedCallback+0x78>
 8015d98:	4b4b      	ldr	r3, [pc, #300]	@ (8015ec8 <CUSTOM_TIM_PeriodElapsedCallback+0x198>)
 8015d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015d9e:	601a      	str	r2, [r3, #0]
 8015da0:	f3bf 8f4f 	dsb	sy
 8015da4:	f3bf 8f6f 	isb	sy

		}
	}
	if (htim->Instance == TIM16) { //Every 1ms
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	4a47      	ldr	r2, [pc, #284]	@ (8015ecc <CUSTOM_TIM_PeriodElapsedCallback+0x19c>)
 8015dae:	4293      	cmp	r3, r2
 8015db0:	d17c      	bne.n	8015eac <CUSTOM_TIM_PeriodElapsedCallback+0x17c>
		if (isSpeedInit) {
 8015db2:	4b47      	ldr	r3, [pc, #284]	@ (8015ed0 <CUSTOM_TIM_PeriodElapsedCallback+0x1a0>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d078      	beq.n	8015eac <CUSTOM_TIM_PeriodElapsedCallback+0x17c>
			/*** SMOOTH SPEED CHANGE ***/
			uint8_t isSMOOTHspeed = 0;
 8015dba:	2300      	movs	r3, #0
 8015dbc:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver1.FWD->pulseGoal != *(MDriver1.FWD->CCR_Channel) ? 1: 0; //Stocke sur un bit si on doit changer une valeur de pulse
 8015dbe:	4b45      	ldr	r3, [pc, #276]	@ (8015ed4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015dc0:	685b      	ldr	r3, [r3, #4]
 8015dc2:	689a      	ldr	r2, [r3, #8]
 8015dc4:	4b43      	ldr	r3, [pc, #268]	@ (8015ed4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015dc6:	685b      	ldr	r3, [r3, #4]
 8015dc8:	685b      	ldr	r3, [r3, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	bf14      	ite	ne
 8015dd0:	2301      	movne	r3, #1
 8015dd2:	2300      	moveq	r3, #0
 8015dd4:	b2db      	uxtb	r3, r3
 8015dd6:	b25a      	sxtb	r2, r3
 8015dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ddc:	4313      	orrs	r3, r2
 8015dde:	b25b      	sxtb	r3, r3
 8015de0:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver1.REV->pulseGoal != *(MDriver1.REV->CCR_Channel) ? 1<<1: 0;
 8015de2:	4b3c      	ldr	r3, [pc, #240]	@ (8015ed4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015de4:	689b      	ldr	r3, [r3, #8]
 8015de6:	689a      	ldr	r2, [r3, #8]
 8015de8:	4b3a      	ldr	r3, [pc, #232]	@ (8015ed4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015dea:	689b      	ldr	r3, [r3, #8]
 8015dec:	685b      	ldr	r3, [r3, #4]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	429a      	cmp	r2, r3
 8015df2:	d001      	beq.n	8015df8 <CUSTOM_TIM_PeriodElapsedCallback+0xc8>
 8015df4:	2302      	movs	r3, #2
 8015df6:	e000      	b.n	8015dfa <CUSTOM_TIM_PeriodElapsedCallback+0xca>
 8015df8:	2300      	movs	r3, #0
 8015dfa:	b25a      	sxtb	r2, r3
 8015dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e00:	4313      	orrs	r3, r2
 8015e02:	b25b      	sxtb	r3, r3
 8015e04:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver2.FWD->pulseGoal != *(MDriver2.FWD->CCR_Channel) ? 1<<2: 0;
 8015e06:	4b34      	ldr	r3, [pc, #208]	@ (8015ed8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015e08:	685b      	ldr	r3, [r3, #4]
 8015e0a:	689a      	ldr	r2, [r3, #8]
 8015e0c:	4b32      	ldr	r3, [pc, #200]	@ (8015ed8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015e0e:	685b      	ldr	r3, [r3, #4]
 8015e10:	685b      	ldr	r3, [r3, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	429a      	cmp	r2, r3
 8015e16:	d001      	beq.n	8015e1c <CUSTOM_TIM_PeriodElapsedCallback+0xec>
 8015e18:	2304      	movs	r3, #4
 8015e1a:	e000      	b.n	8015e1e <CUSTOM_TIM_PeriodElapsedCallback+0xee>
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	b25a      	sxtb	r2, r3
 8015e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e24:	4313      	orrs	r3, r2
 8015e26:	b25b      	sxtb	r3, r3
 8015e28:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver2.REV->pulseGoal != *(MDriver2.REV->CCR_Channel) ? 1<<3: 0;
 8015e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8015ed8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015e2c:	689b      	ldr	r3, [r3, #8]
 8015e2e:	689a      	ldr	r2, [r3, #8]
 8015e30:	4b29      	ldr	r3, [pc, #164]	@ (8015ed8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015e32:	689b      	ldr	r3, [r3, #8]
 8015e34:	685b      	ldr	r3, [r3, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	d001      	beq.n	8015e40 <CUSTOM_TIM_PeriodElapsedCallback+0x110>
 8015e3c:	2308      	movs	r3, #8
 8015e3e:	e000      	b.n	8015e42 <CUSTOM_TIM_PeriodElapsedCallback+0x112>
 8015e40:	2300      	movs	r3, #0
 8015e42:	b25a      	sxtb	r2, r3
 8015e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e48:	4313      	orrs	r3, r2
 8015e4a:	b25b      	sxtb	r3, r3
 8015e4c:	73fb      	strb	r3, [r7, #15]


			if(isSMOOTHspeed){ // Si un seul 1 est présent aloir la condition est vrai
 8015e4e:	7bfb      	ldrb	r3, [r7, #15]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d02b      	beq.n	8015eac <CUSTOM_TIM_PeriodElapsedCallback+0x17c>
				(isSMOOTHspeed & 0b1)>> 0 ? // Si on a detecter une erreur
 8015e54:	7bfb      	ldrb	r3, [r7, #15]
 8015e56:	f003 0301 	and.w	r3, r3, #1
						IT_ZXB5210_speed_UPDATE(&MDriver1, MDriver1.FWD):(void)0;
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d005      	beq.n	8015e6a <CUSTOM_TIM_PeriodElapsedCallback+0x13a>
 8015e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8015ed4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015e60:	685b      	ldr	r3, [r3, #4]
 8015e62:	4619      	mov	r1, r3
 8015e64:	481b      	ldr	r0, [pc, #108]	@ (8015ed4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015e66:	f7ef ff8d 	bl	8005d84 <IT_ZXB5210_speed_UPDATE>
				(isSMOOTHspeed & 0b10)>> 1 ?
 8015e6a:	7bfb      	ldrb	r3, [r7, #15]
 8015e6c:	f003 0302 	and.w	r3, r3, #2
						IT_ZXB5210_speed_UPDATE(&MDriver1, MDriver1.REV):(void)0;
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d005      	beq.n	8015e80 <CUSTOM_TIM_PeriodElapsedCallback+0x150>
 8015e74:	4b17      	ldr	r3, [pc, #92]	@ (8015ed4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015e76:	689b      	ldr	r3, [r3, #8]
 8015e78:	4619      	mov	r1, r3
 8015e7a:	4816      	ldr	r0, [pc, #88]	@ (8015ed4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015e7c:	f7ef ff82 	bl	8005d84 <IT_ZXB5210_speed_UPDATE>
				(isSMOOTHspeed & 0b100)>> 2 ?
 8015e80:	7bfb      	ldrb	r3, [r7, #15]
 8015e82:	f003 0304 	and.w	r3, r3, #4
						IT_ZXB5210_speed_UPDATE(&MDriver2, MDriver2.FWD):(void)0;
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d005      	beq.n	8015e96 <CUSTOM_TIM_PeriodElapsedCallback+0x166>
 8015e8a:	4b13      	ldr	r3, [pc, #76]	@ (8015ed8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015e8c:	685b      	ldr	r3, [r3, #4]
 8015e8e:	4619      	mov	r1, r3
 8015e90:	4811      	ldr	r0, [pc, #68]	@ (8015ed8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015e92:	f7ef ff77 	bl	8005d84 <IT_ZXB5210_speed_UPDATE>
				(isSMOOTHspeed & 0b1000)>> 3 ?
 8015e96:	7bfb      	ldrb	r3, [r7, #15]
 8015e98:	f003 0308 	and.w	r3, r3, #8
						IT_ZXB5210_speed_UPDATE(&MDriver2, MDriver2.REV):(void)0;
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d005      	beq.n	8015eac <CUSTOM_TIM_PeriodElapsedCallback+0x17c>
 8015ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8015ed8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015ea2:	689b      	ldr	r3, [r3, #8]
 8015ea4:	4619      	mov	r1, r3
 8015ea6:	480c      	ldr	r0, [pc, #48]	@ (8015ed8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015ea8:	f7ef ff6c 	bl	8005d84 <IT_ZXB5210_speed_UPDATE>
			}
		}
	}
}
 8015eac:	bf00      	nop
 8015eae:	3710      	adds	r7, #16
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd80      	pop	{r7, pc}
 8015eb4:	40014000 	.word	0x40014000
 8015eb8:	200076b0 	.word	0x200076b0
 8015ebc:	0801bcf4 	.word	0x0801bcf4
 8015ec0:	0801bd14 	.word	0x0801bd14
 8015ec4:	200006d4 	.word	0x200006d4
 8015ec8:	e000ed04 	.word	0xe000ed04
 8015ecc:	40014400 	.word	0x40014400
 8015ed0:	20000d98 	.word	0x20000d98
 8015ed4:	20000d40 	.word	0x20000d40
 8015ed8:	20000d4c 	.word	0x20000d4c

08015edc <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b084      	sub	sp, #16
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART2) {
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8015f20 <HAL_UART_RxHalfCpltCallback+0x44>)
 8015eea:	4293      	cmp	r3, r2
 8015eec:	d114      	bne.n	8015f18 <HAL_UART_RxHalfCpltCallback+0x3c>
    	BaseType_t higher_priority_task_woken = pdFALSE;
 8015eee:	2300      	movs	r3, #0
 8015ef0:	60fb      	str	r3, [r7, #12]
    	xSemaphoreGiveFromISR(semb_halfCllbck, &higher_priority_task_woken);
 8015ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8015f24 <HAL_UART_RxHalfCpltCallback+0x48>)
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	f107 020c 	add.w	r2, r7, #12
 8015efa:	4611      	mov	r1, r2
 8015efc:	4618      	mov	r0, r3
 8015efe:	f7fd f8bd 	bl	801307c <xQueueGiveFromISR>
    	portYIELD_FROM_ISR(higher_priority_task_woken);
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d007      	beq.n	8015f18 <HAL_UART_RxHalfCpltCallback+0x3c>
 8015f08:	4b07      	ldr	r3, [pc, #28]	@ (8015f28 <HAL_UART_RxHalfCpltCallback+0x4c>)
 8015f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015f0e:	601a      	str	r2, [r3, #0]
 8015f10:	f3bf 8f4f 	dsb	sy
 8015f14:	f3bf 8f6f 	isb	sy
    }
}
 8015f18:	bf00      	nop
 8015f1a:	3710      	adds	r7, #16
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	bd80      	pop	{r7, pc}
 8015f20:	40004400 	.word	0x40004400
 8015f24:	200006e4 	.word	0x200006e4
 8015f28:	e000ed04 	.word	0xe000ed04

08015f2c <HAL_UART_RxCpltCallback>:

/*********** PREEMPTION PRIORITY 5 ***********/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b084      	sub	sp, #16
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]

	/** SHELL INTERRUPTIONS **/
	if (huart->Instance == USART1) {
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	4a1a      	ldr	r2, [pc, #104]	@ (8015fa4 <HAL_UART_RxCpltCallback+0x78>)
 8015f3a:	4293      	cmp	r3, r2
 8015f3c:	d114      	bne.n	8015f68 <HAL_UART_RxCpltCallback+0x3c>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8015f42:	4b19      	ldr	r3, [pc, #100]	@ (8015fa8 <HAL_UART_RxCpltCallback+0x7c>)
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	f107 020c 	add.w	r2, r7, #12
 8015f4a:	4611      	mov	r1, r2
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7fd f895 	bl	801307c <xQueueGiveFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d007      	beq.n	8015f68 <HAL_UART_RxCpltCallback+0x3c>
 8015f58:	4b14      	ldr	r3, [pc, #80]	@ (8015fac <HAL_UART_RxCpltCallback+0x80>)
 8015f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015f5e:	601a      	str	r2, [r3, #0]
 8015f60:	f3bf 8f4f 	dsb	sy
 8015f64:	f3bf 8f6f 	isb	sy
	}

    if (huart->Instance == USART2){
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	4a10      	ldr	r2, [pc, #64]	@ (8015fb0 <HAL_UART_RxCpltCallback+0x84>)
 8015f6e:	4293      	cmp	r3, r2
 8015f70:	d114      	bne.n	8015f9c <HAL_UART_RxCpltCallback+0x70>
		BaseType_t higher_priority_task_woken = pdFALSE;
 8015f72:	2300      	movs	r3, #0
 8015f74:	60bb      	str	r3, [r7, #8]
    	xSemaphoreGiveFromISR(semb_cpltCllbck, &higher_priority_task_woken);
 8015f76:	4b0f      	ldr	r3, [pc, #60]	@ (8015fb4 <HAL_UART_RxCpltCallback+0x88>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	f107 0208 	add.w	r2, r7, #8
 8015f7e:	4611      	mov	r1, r2
 8015f80:	4618      	mov	r0, r3
 8015f82:	f7fd f87b 	bl	801307c <xQueueGiveFromISR>
    	portYIELD_FROM_ISR(higher_priority_task_woken);
 8015f86:	68bb      	ldr	r3, [r7, #8]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d007      	beq.n	8015f9c <HAL_UART_RxCpltCallback+0x70>
 8015f8c:	4b07      	ldr	r3, [pc, #28]	@ (8015fac <HAL_UART_RxCpltCallback+0x80>)
 8015f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015f92:	601a      	str	r2, [r3, #0]
 8015f94:	f3bf 8f4f 	dsb	sy
 8015f98:	f3bf 8f6f 	isb	sy
    }
}
 8015f9c:	bf00      	nop
 8015f9e:	3710      	adds	r7, #16
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}
 8015fa4:	40013800 	.word	0x40013800
 8015fa8:	200075cc 	.word	0x200075cc
 8015fac:	e000ed04 	.word	0xe000ed04
 8015fb0:	40004400 	.word	0x40004400
 8015fb4:	200006e8 	.word	0x200006e8

08015fb8 <HAL_ADC_ConvCpltCallback>:
/*********** PREEMPTION PRIORITY 5 ***********/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b086      	sub	sp, #24
 8015fbc:	af02      	add	r7, sp, #8
 8015fbe:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC2) {
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8016000 <HAL_ADC_ConvCpltCallback+0x48>)
 8015fc6:	4293      	cmp	r3, r2
 8015fc8:	d116      	bne.n	8015ff8 <HAL_ADC_ConvCpltCallback+0x40>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	60fb      	str	r3, [r7, #12]
		xTaskNotifyFromISR(h_task_asserv_I,
 8015fce:	4b0d      	ldr	r3, [pc, #52]	@ (8016004 <HAL_ADC_ConvCpltCallback+0x4c>)
 8015fd0:	6818      	ldr	r0, [r3, #0]
 8015fd2:	f107 030c 	add.w	r3, r7, #12
 8015fd6:	9300      	str	r3, [sp, #0]
 8015fd8:	2300      	movs	r3, #0
 8015fda:	2201      	movs	r2, #1
 8015fdc:	2101      	movs	r1, #1
 8015fde:	f7fe fd11 	bl	8014a04 <xTaskGenericNotifyFromISR>
				1,
				eSetBits,
				&pxHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d007      	beq.n	8015ff8 <HAL_ADC_ConvCpltCallback+0x40>
 8015fe8:	4b07      	ldr	r3, [pc, #28]	@ (8016008 <HAL_ADC_ConvCpltCallback+0x50>)
 8015fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015fee:	601a      	str	r2, [r3, #0]
 8015ff0:	f3bf 8f4f 	dsb	sy
 8015ff4:	f3bf 8f6f 	isb	sy
	}
}
 8015ff8:	bf00      	nop
 8015ffa:	3710      	adds	r7, #16
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bd80      	pop	{r7, pc}
 8016000:	50000100 	.word	0x50000100
 8016004:	200006d0 	.word	0x200006d0
 8016008:	e000ed04 	.word	0xe000ed04

0801600c <changeMode_run>:
#include "components/ADXL343.h"

static int  workMode =0;


void changeMode_run(void*){
 801600c:	b580      	push	{r7, lr}
 801600e:	b084      	sub	sp, #16
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]

	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8016014:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8016018:	2001      	movs	r0, #1
 801601a:	f7fe fca7 	bl	801496c <ulTaskNotifyTake>

		// Lire dans les registre du Ge
		uint8_t ret=0;
 801601e:	2300      	movs	r3, #0
 8016020:	73bb      	strb	r3, [r7, #14]
		TCA9555_ReadRegister(0x03,&ret,1);
 8016022:	f107 030e 	add.w	r3, r7, #14
 8016026:	2201      	movs	r2, #1
 8016028:	4619      	mov	r1, r3
 801602a:	2003      	movs	r0, #3
 801602c:	f7ef fd36 	bl	8005a9c <TCA9555_ReadRegister>
		uint8_t INT_IMU2 =  (ret >> 7) & 0b1;
 8016030:	7bbb      	ldrb	r3, [r7, #14]
 8016032:	09db      	lsrs	r3, r3, #7
 8016034:	73fb      	strb	r3, [r7, #15]
		// Prendre decision
		if (INT_IMU2==1){
 8016036:	7bfb      	ldrb	r3, [r7, #15]
 8016038:	2b01      	cmp	r3, #1
 801603a:	d109      	bne.n	8016050 <changeMode_run+0x44>
			workMode = workMode ==0 ? 1 : 0;
 801603c:	4b14      	ldr	r3, [pc, #80]	@ (8016090 <changeMode_run+0x84>)
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	2b00      	cmp	r3, #0
 8016042:	bf0c      	ite	eq
 8016044:	2301      	moveq	r3, #1
 8016046:	2300      	movne	r3, #0
 8016048:	b2db      	uxtb	r3, r3
 801604a:	461a      	mov	r2, r3
 801604c:	4b10      	ldr	r3, [pc, #64]	@ (8016090 <changeMode_run+0x84>)
 801604e:	601a      	str	r2, [r3, #0]
		}
		if (workMode){
 8016050:	4b0f      	ldr	r3, [pc, #60]	@ (8016090 <changeMode_run+0x84>)
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d008      	beq.n	801606a <changeMode_run+0x5e>
			LP5812_WriteRegister(0x044,125);
 8016058:	217d      	movs	r1, #125	@ 0x7d
 801605a:	2044      	movs	r0, #68	@ 0x44
 801605c:	f7ef fc70 	bl	8005940 <LP5812_WriteRegister>
			LP5812_WriteRegister(0x049,0);
 8016060:	2100      	movs	r1, #0
 8016062:	2049      	movs	r0, #73	@ 0x49
 8016064:	f7ef fc6c 	bl	8005940 <LP5812_WriteRegister>
 8016068:	e007      	b.n	801607a <changeMode_run+0x6e>

		}
		else{
			LP5812_WriteRegister(0x049,125);
 801606a:	217d      	movs	r1, #125	@ 0x7d
 801606c:	2049      	movs	r0, #73	@ 0x49
 801606e:	f7ef fc67 	bl	8005940 <LP5812_WriteRegister>
			LP5812_WriteRegister(0x044,0);
 8016072:	2100      	movs	r1, #0
 8016074:	2044      	movs	r0, #68	@ 0x44
 8016076:	f7ef fc63 	bl	8005940 <LP5812_WriteRegister>
		}
		uint8_t retADXL=0;
 801607a:	2300      	movs	r3, #0
 801607c:	737b      	strb	r3, [r7, #13]
		ADXL343_ReadRegister(0x30,&retADXL,1); //Permet de reinitialiser le registre de l'adxl
 801607e:	f107 030d 	add.w	r3, r7, #13
 8016082:	2201      	movs	r2, #1
 8016084:	4619      	mov	r1, r3
 8016086:	2030      	movs	r0, #48	@ 0x30
 8016088:	f7ef fb60 	bl	800574c <ADXL343_ReadRegister>
	for(;;){
 801608c:	e7c2      	b.n	8016014 <changeMode_run+0x8>
 801608e:	bf00      	nop
 8016090:	200075d0 	.word	0x200075d0

08016094 <shell_init>:
int isStarted = 0;
int isADC_cplt =0;
uint8_t PWMLed = 255;


void shell_init(void) {
 8016094:	b580      	push	{r7, lr}
 8016096:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS * sizeof(char*));
 8016098:	2220      	movs	r2, #32
 801609a:	2100      	movs	r1, #0
 801609c:	481c      	ldr	r0, [pc, #112]	@ (8016110 <shell_init+0x7c>)
 801609e:	f002 fc87 	bl	80189b0 <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 80160a2:	2240      	movs	r2, #64	@ 0x40
 80160a4:	2100      	movs	r1, #0
 80160a6:	481b      	ldr	r0, [pc, #108]	@ (8016114 <shell_init+0x80>)
 80160a8:	f002 fc82 	bl	80189b0 <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
 80160ac:	4b1a      	ldr	r3, [pc, #104]	@ (8016118 <shell_init+0x84>)
 80160ae:	2200      	movs	r2, #0
 80160b0:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 80160b2:	2240      	movs	r2, #64	@ 0x40
 80160b4:	2100      	movs	r1, #0
 80160b6:	4819      	ldr	r0, [pc, #100]	@ (801611c <shell_init+0x88>)
 80160b8:	f002 fc7a 	bl	80189b0 <memset>
	sem_uart_read = xSemaphoreCreateBinary();
 80160bc:	2203      	movs	r2, #3
 80160be:	2100      	movs	r1, #0
 80160c0:	2001      	movs	r0, #1
 80160c2:	f7fc fde1 	bl	8012c88 <xQueueGenericCreate>
 80160c6:	4603      	mov	r3, r0
 80160c8:	4a15      	ldr	r2, [pc, #84]	@ (8016120 <shell_init+0x8c>)
 80160ca:	6013      	str	r3, [r2, #0]
	sem_uart_read == NULL ? Error_Handler() : (void) 0;
 80160cc:	4b14      	ldr	r3, [pc, #80]	@ (8016120 <shell_init+0x8c>)
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d101      	bne.n	80160d8 <shell_init+0x44>
 80160d4:	f7ed ff30 	bl	8003f38 <Error_Handler>

	HAL_UART_Transmit(&UART_DEVICE, started, strlen((char*) started),
 80160d8:	4812      	ldr	r0, [pc, #72]	@ (8016124 <shell_init+0x90>)
 80160da:	f7ec faf1 	bl	80026c0 <strlen>
 80160de:	4603      	mov	r3, r0
 80160e0:	b29a      	uxth	r2, r3
 80160e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80160e6:	490f      	ldr	r1, [pc, #60]	@ (8016124 <shell_init+0x90>)
 80160e8:	480f      	ldr	r0, [pc, #60]	@ (8016128 <shell_init+0x94>)
 80160ea:	f7f6 f981 	bl	800c3f0 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	HAL_UART_Transmit(&UART_DEVICE, prompt, strlen((char*) prompt),
 80160ee:	480f      	ldr	r0, [pc, #60]	@ (801612c <shell_init+0x98>)
 80160f0:	f7ec fae6 	bl	80026c0 <strlen>
 80160f4:	4603      	mov	r3, r0
 80160f6:	b29a      	uxth	r2, r3
 80160f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80160fc:	490b      	ldr	r1, [pc, #44]	@ (801612c <shell_init+0x98>)
 80160fe:	480a      	ldr	r0, [pc, #40]	@ (8016128 <shell_init+0x94>)
 8016100:	f7f6 f976 	bl	800c3f0 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	subfunct_start(0);
 8016104:	2000      	movs	r0, #0
 8016106:	f000 f95b 	bl	80163c0 <subfunct_start>
}
 801610a:	bf00      	nop
 801610c:	bd80      	pop	{r7, pc}
 801610e:	bf00      	nop
 8016110:	20007684 	.word	0x20007684
 8016114:	20007640 	.word	0x20007640
 8016118:	200075f8 	.word	0x200075f8
 801611c:	200075fc 	.word	0x200075fc
 8016120:	200075cc 	.word	0x200075cc
 8016124:	20000278 	.word	0x20000278
 8016128:	20000bb8 	.word	0x20000bb8
 801612c:	200002fc 	.word	0x200002fc

08016130 <shell_run>:

void shell_run(void*) {
 8016130:	b580      	push	{r7, lr}
 8016132:	b084      	sub	sp, #16
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8016138:	2300      	movs	r3, #0
 801613a:	60fb      	str	r3, [r7, #12]
	for (;;) {
		reading = 1;
 801613c:	2301      	movs	r3, #1
 801613e:	60fb      	str	r3, [r7, #12]
		idx_cmd = 0;
 8016140:	4b5d      	ldr	r3, [pc, #372]	@ (80162b8 <shell_run+0x188>)
 8016142:	2200      	movs	r2, #0
 8016144:	601a      	str	r2, [r3, #0]
		while (reading) {
 8016146:	e070      	b.n	801622a <shell_run+0xfa>
			HAL_UART_Receive_IT(&UART_DEVICE, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8016148:	2201      	movs	r2, #1
 801614a:	495c      	ldr	r1, [pc, #368]	@ (80162bc <shell_run+0x18c>)
 801614c:	485c      	ldr	r0, [pc, #368]	@ (80162c0 <shell_run+0x190>)
 801614e:	f7f6 fb39 	bl	800c7c4 <HAL_UART_Receive_IT>
			xSemaphoreTake(sem_uart_read, portMAX_DELAY)!=pdPASS ? Error_Handler():(void)0;
 8016152:	4b5c      	ldr	r3, [pc, #368]	@ (80162c4 <shell_run+0x194>)
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801615a:	4618      	mov	r0, r3
 801615c:	f7fd f900 	bl	8013360 <xQueueSemaphoreTake>
 8016160:	4603      	mov	r3, r0
 8016162:	2b01      	cmp	r3, #1
 8016164:	d001      	beq.n	801616a <shell_run+0x3a>
 8016166:	f7ed fee7 	bl	8003f38 <Error_Handler>

			switch (uartRxBuffer[0]) {
 801616a:	4b54      	ldr	r3, [pc, #336]	@ (80162bc <shell_run+0x18c>)
 801616c:	781b      	ldrb	r3, [r3, #0]
 801616e:	2b7f      	cmp	r3, #127	@ 0x7f
 8016170:	d035      	beq.n	80161de <shell_run+0xae>
 8016172:	2b7f      	cmp	r3, #127	@ 0x7f
 8016174:	dc47      	bgt.n	8016206 <shell_run+0xd6>
 8016176:	2b08      	cmp	r3, #8
 8016178:	d031      	beq.n	80161de <shell_run+0xae>
 801617a:	2b0d      	cmp	r3, #13
 801617c:	d143      	bne.n	8016206 <shell_run+0xd6>
			case ASCII_CR: // Nouvelle ligne, instruction à traiter
				HAL_UART_Transmit(&UART_DEVICE, newline, sizeof(newline),
 801617e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016182:	2203      	movs	r2, #3
 8016184:	4950      	ldr	r1, [pc, #320]	@ (80162c8 <shell_run+0x198>)
 8016186:	484e      	ldr	r0, [pc, #312]	@ (80162c0 <shell_run+0x190>)
 8016188:	f7f6 f932 	bl	800c3f0 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				//cmdBuffer[idx_cmd] = '\0';
				//On copie la commande dans l'historique
				//strcpy(cmdHistory[cmdHistory_index_save % CMD_HISTORY_SIZE], cmdBuffer);
				//cmdHistory_index_save++;
				argc = 0;
 801618c:	4b4f      	ldr	r3, [pc, #316]	@ (80162cc <shell_run+0x19c>)
 801618e:	2200      	movs	r2, #0
 8016190:	601a      	str	r2, [r3, #0]
				token = strtok(cmdBuffer, " ");
 8016192:	494f      	ldr	r1, [pc, #316]	@ (80162d0 <shell_run+0x1a0>)
 8016194:	484f      	ldr	r0, [pc, #316]	@ (80162d4 <shell_run+0x1a4>)
 8016196:	f002 fbaf 	bl	80188f8 <strtok>
 801619a:	4603      	mov	r3, r0
 801619c:	4a4e      	ldr	r2, [pc, #312]	@ (80162d8 <shell_run+0x1a8>)
 801619e:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 80161a0:	e010      	b.n	80161c4 <shell_run+0x94>
					argv[argc++] = token;
 80161a2:	4b4a      	ldr	r3, [pc, #296]	@ (80162cc <shell_run+0x19c>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	1c5a      	adds	r2, r3, #1
 80161a8:	4948      	ldr	r1, [pc, #288]	@ (80162cc <shell_run+0x19c>)
 80161aa:	600a      	str	r2, [r1, #0]
 80161ac:	4a4a      	ldr	r2, [pc, #296]	@ (80162d8 <shell_run+0x1a8>)
 80161ae:	6812      	ldr	r2, [r2, #0]
 80161b0:	494a      	ldr	r1, [pc, #296]	@ (80162dc <shell_run+0x1ac>)
 80161b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					token = strtok(NULL, " ");
 80161b6:	4946      	ldr	r1, [pc, #280]	@ (80162d0 <shell_run+0x1a0>)
 80161b8:	2000      	movs	r0, #0
 80161ba:	f002 fb9d 	bl	80188f8 <strtok>
 80161be:	4603      	mov	r3, r0
 80161c0:	4a45      	ldr	r2, [pc, #276]	@ (80162d8 <shell_run+0x1a8>)
 80161c2:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 80161c4:	4b44      	ldr	r3, [pc, #272]	@ (80162d8 <shell_run+0x1a8>)
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d1ea      	bne.n	80161a2 <shell_run+0x72>
				}
				idx_cmd = 0;
 80161cc:	4b3a      	ldr	r3, [pc, #232]	@ (80162b8 <shell_run+0x188>)
 80161ce:	2200      	movs	r2, #0
 80161d0:	601a      	str	r2, [r3, #0]
				reading = 0;        //exit read loop
 80161d2:	2300      	movs	r3, #0
 80161d4:	60fb      	str	r3, [r7, #12]
				newCmdReady = 1;
 80161d6:	4b42      	ldr	r3, [pc, #264]	@ (80162e0 <shell_run+0x1b0>)
 80161d8:	2201      	movs	r2, #1
 80161da:	601a      	str	r2, [r3, #0]
				break;
 80161dc:	e025      	b.n	801622a <shell_run+0xfa>
			case ASCII_BACK:
			case ASCII_BACK_BIS: // Suppression du dernier caractère
				if (idx_cmd == 0) {
 80161de:	4b36      	ldr	r3, [pc, #216]	@ (80162b8 <shell_run+0x188>)
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d020      	beq.n	8016228 <shell_run+0xf8>
					break;
				}
				cmdBuffer[idx_cmd--] = '\0';
 80161e6:	4b34      	ldr	r3, [pc, #208]	@ (80162b8 <shell_run+0x188>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	1e5a      	subs	r2, r3, #1
 80161ec:	4932      	ldr	r1, [pc, #200]	@ (80162b8 <shell_run+0x188>)
 80161ee:	600a      	str	r2, [r1, #0]
 80161f0:	4a38      	ldr	r2, [pc, #224]	@ (80162d4 <shell_run+0x1a4>)
 80161f2:	2100      	movs	r1, #0
 80161f4:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, backspace, sizeof(backspace),
 80161f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80161fa:	2204      	movs	r2, #4
 80161fc:	4939      	ldr	r1, [pc, #228]	@ (80162e4 <shell_run+0x1b4>)
 80161fe:	4830      	ldr	r0, [pc, #192]	@ (80162c0 <shell_run+0x190>)
 8016200:	f7f6 f8f6 	bl	800c3f0 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				break;
 8016204:	e011      	b.n	801622a <shell_run+0xfa>
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8016206:	4b2c      	ldr	r3, [pc, #176]	@ (80162b8 <shell_run+0x188>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	1c5a      	adds	r2, r3, #1
 801620c:	492a      	ldr	r1, [pc, #168]	@ (80162b8 <shell_run+0x188>)
 801620e:	600a      	str	r2, [r1, #0]
 8016210:	4a2a      	ldr	r2, [pc, #168]	@ (80162bc <shell_run+0x18c>)
 8016212:	7811      	ldrb	r1, [r2, #0]
 8016214:	4a2f      	ldr	r2, [pc, #188]	@ (80162d4 <shell_run+0x1a4>)
 8016216:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, uartRxBuffer,
 8016218:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801621c:	2201      	movs	r2, #1
 801621e:	4927      	ldr	r1, [pc, #156]	@ (80162bc <shell_run+0x18c>)
 8016220:	4827      	ldr	r0, [pc, #156]	@ (80162c0 <shell_run+0x190>)
 8016222:	f7f6 f8e5 	bl	800c3f0 <HAL_UART_Transmit>
 8016226:	e000      	b.n	801622a <shell_run+0xfa>
					break;
 8016228:	bf00      	nop
		while (reading) {
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d18b      	bne.n	8016148 <shell_run+0x18>
						UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
			}
		}
		if (newCmdReady) {
 8016230:	4b2b      	ldr	r3, [pc, #172]	@ (80162e0 <shell_run+0x1b0>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d081      	beq.n	801613c <shell_run+0xc>
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8016238:	2300      	movs	r3, #0
 801623a:	60bb      	str	r3, [r7, #8]
 801623c:	e01b      	b.n	8016276 <shell_run+0x146>
				if (strcmp(argv[0], mapping[i].name) == 0) {
 801623e:	4b27      	ldr	r3, [pc, #156]	@ (80162dc <shell_run+0x1ac>)
 8016240:	681a      	ldr	r2, [r3, #0]
 8016242:	4929      	ldr	r1, [pc, #164]	@ (80162e8 <shell_run+0x1b8>)
 8016244:	68bb      	ldr	r3, [r7, #8]
 8016246:	011b      	lsls	r3, r3, #4
 8016248:	440b      	add	r3, r1
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	4619      	mov	r1, r3
 801624e:	4610      	mov	r0, r2
 8016250:	f7ec fa3e 	bl	80026d0 <strcmp>
 8016254:	4603      	mov	r3, r0
 8016256:	2b00      	cmp	r3, #0
 8016258:	d10a      	bne.n	8016270 <shell_run+0x140>
					isFind = 1;
 801625a:	4b24      	ldr	r3, [pc, #144]	@ (80162ec <shell_run+0x1bc>)
 801625c:	2201      	movs	r2, #1
 801625e:	601a      	str	r2, [r3, #0]
					mapping[i].funct(argv);
 8016260:	4a21      	ldr	r2, [pc, #132]	@ (80162e8 <shell_run+0x1b8>)
 8016262:	68bb      	ldr	r3, [r7, #8]
 8016264:	011b      	lsls	r3, r3, #4
 8016266:	4413      	add	r3, r2
 8016268:	330c      	adds	r3, #12
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	481b      	ldr	r0, [pc, #108]	@ (80162dc <shell_run+0x1ac>)
 801626e:	4798      	blx	r3
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	3301      	adds	r3, #1
 8016274:	60bb      	str	r3, [r7, #8]
 8016276:	68bb      	ldr	r3, [r7, #8]
 8016278:	2b0c      	cmp	r3, #12
 801627a:	d9e0      	bls.n	801623e <shell_run+0x10e>
				}
			}
			if (!isFind) {
 801627c:	4b1b      	ldr	r3, [pc, #108]	@ (80162ec <shell_run+0x1bc>)
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d106      	bne.n	8016292 <shell_run+0x162>
				HAL_UART_Transmit(&UART_DEVICE, cmdNotFound,
 8016284:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016288:	2214      	movs	r2, #20
 801628a:	4919      	ldr	r1, [pc, #100]	@ (80162f0 <shell_run+0x1c0>)
 801628c:	480c      	ldr	r0, [pc, #48]	@ (80162c0 <shell_run+0x190>)
 801628e:	f7f6 f8af 	bl	800c3f0 <HAL_UART_Transmit>
						sizeof(cmdNotFound), HAL_MAX_DELAY);
			}

			HAL_UART_Transmit(&UART_DEVICE, prompt, sizeof(prompt),
 8016292:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016296:	2212      	movs	r2, #18
 8016298:	4916      	ldr	r1, [pc, #88]	@ (80162f4 <shell_run+0x1c4>)
 801629a:	4809      	ldr	r0, [pc, #36]	@ (80162c0 <shell_run+0x190>)
 801629c:	f7f6 f8a8 	bl	800c3f0 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			newCmdReady = 0;
 80162a0:	4b0f      	ldr	r3, [pc, #60]	@ (80162e0 <shell_run+0x1b0>)
 80162a2:	2200      	movs	r2, #0
 80162a4:	601a      	str	r2, [r3, #0]
			isFind = 0;
 80162a6:	4b11      	ldr	r3, [pc, #68]	@ (80162ec <shell_run+0x1bc>)
 80162a8:	2200      	movs	r2, #0
 80162aa:	601a      	str	r2, [r3, #0]
			memset(cmdBuffer, 0, MAX_ARGS * sizeof(char*));
 80162ac:	2220      	movs	r2, #32
 80162ae:	2100      	movs	r1, #0
 80162b0:	4808      	ldr	r0, [pc, #32]	@ (80162d4 <shell_run+0x1a4>)
 80162b2:	f002 fb7d 	bl	80189b0 <memset>
		reading = 1;
 80162b6:	e741      	b.n	801613c <shell_run+0xc>
 80162b8:	20007680 	.word	0x20007680
 80162bc:	200075f8 	.word	0x200075f8
 80162c0:	20000bb8 	.word	0x20000bb8
 80162c4:	200075cc 	.word	0x200075cc
 80162c8:	200002e0 	.word	0x200002e0
 80162cc:	200076a4 	.word	0x200076a4
 80162d0:	0801bef0 	.word	0x0801bef0
 80162d4:	20007640 	.word	0x20007640
 80162d8:	200076a8 	.word	0x200076a8
 80162dc:	20007684 	.word	0x20007684
 80162e0:	200076ac 	.word	0x200076ac
 80162e4:	200002e4 	.word	0x200002e4
 80162e8:	200001a8 	.word	0x200001a8
 80162ec:	200076b8 	.word	0x200076b8
 80162f0:	200002e8 	.word	0x200002e8
 80162f4:	200002fc 	.word	0x200002fc

080162f8 <subfunct_help>:

/*
 * ***********************************************************************************************
 * 										SUBFUNCTIONS
 *************************************************************************************************/
void subfunct_help(char **argv) {
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b088      	sub	sp, #32
 80162fc:	af04      	add	r7, sp, #16
 80162fe:	6078      	str	r0, [r7, #4]
	printf("%s%-15s | %-30s | %-50s\r\n%s%s", GRAS, "Fonctions", "Params",
 8016300:	4b1a      	ldr	r3, [pc, #104]	@ (801636c <subfunct_help+0x74>)
 8016302:	9302      	str	r3, [sp, #8]
 8016304:	4b1a      	ldr	r3, [pc, #104]	@ (8016370 <subfunct_help+0x78>)
 8016306:	9301      	str	r3, [sp, #4]
 8016308:	4b1a      	ldr	r3, [pc, #104]	@ (8016374 <subfunct_help+0x7c>)
 801630a:	9300      	str	r3, [sp, #0]
 801630c:	4b1a      	ldr	r3, [pc, #104]	@ (8016378 <subfunct_help+0x80>)
 801630e:	4a1b      	ldr	r2, [pc, #108]	@ (801637c <subfunct_help+0x84>)
 8016310:	491b      	ldr	r1, [pc, #108]	@ (8016380 <subfunct_help+0x88>)
 8016312:	481c      	ldr	r0, [pc, #112]	@ (8016384 <subfunct_help+0x8c>)
 8016314:	f002 fa6e 	bl	80187f4 <iprintf>
			"Description", D_RESET, separator);
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8016318:	2300      	movs	r3, #0
 801631a:	60fb      	str	r3, [r7, #12]
 801631c:	e01b      	b.n	8016356 <subfunct_help+0x5e>
		printf("%s%-15s%s | %-30s | %-50s\r\n", FUNCTION, mapping[i].name,
 801631e:	4a1a      	ldr	r2, [pc, #104]	@ (8016388 <subfunct_help+0x90>)
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	011b      	lsls	r3, r3, #4
 8016324:	4413      	add	r3, r2
 8016326:	6819      	ldr	r1, [r3, #0]
 8016328:	4a17      	ldr	r2, [pc, #92]	@ (8016388 <subfunct_help+0x90>)
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	011b      	lsls	r3, r3, #4
 801632e:	4413      	add	r3, r2
 8016330:	3308      	adds	r3, #8
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	4814      	ldr	r0, [pc, #80]	@ (8016388 <subfunct_help+0x90>)
 8016336:	68fa      	ldr	r2, [r7, #12]
 8016338:	0112      	lsls	r2, r2, #4
 801633a:	4402      	add	r2, r0
 801633c:	3204      	adds	r2, #4
 801633e:	6812      	ldr	r2, [r2, #0]
 8016340:	9201      	str	r2, [sp, #4]
 8016342:	9300      	str	r3, [sp, #0]
 8016344:	4b0a      	ldr	r3, [pc, #40]	@ (8016370 <subfunct_help+0x78>)
 8016346:	460a      	mov	r2, r1
 8016348:	4910      	ldr	r1, [pc, #64]	@ (801638c <subfunct_help+0x94>)
 801634a:	4811      	ldr	r0, [pc, #68]	@ (8016390 <subfunct_help+0x98>)
 801634c:	f002 fa52 	bl	80187f4 <iprintf>
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	3301      	adds	r3, #1
 8016354:	60fb      	str	r3, [r7, #12]
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	2b0c      	cmp	r3, #12
 801635a:	d9e0      	bls.n	801631e <subfunct_help+0x26>
				D_RESET, mapping[i].params, mapping[i].resume);
	}
	printf(separator);
 801635c:	480d      	ldr	r0, [pc, #52]	@ (8016394 <subfunct_help+0x9c>)
 801635e:	f002 fab1 	bl	80188c4 <puts>
}
 8016362:	bf00      	nop
 8016364:	3710      	adds	r7, #16
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}
 801636a:	bf00      	nop
 801636c:	0801bf30 	.word	0x0801bf30
 8016370:	0801bf80 	.word	0x0801bf80
 8016374:	0801bf88 	.word	0x0801bf88
 8016378:	0801bef4 	.word	0x0801bef4
 801637c:	0801befc 	.word	0x0801befc
 8016380:	0801bf08 	.word	0x0801bf08
 8016384:	0801bf10 	.word	0x0801bf10
 8016388:	200001a8 	.word	0x200001a8
 801638c:	0801bf94 	.word	0x0801bf94
 8016390:	0801bf9c 	.word	0x0801bf9c
 8016394:	0801bfb8 	.word	0x0801bfb8

08016398 <subfunct_clear>:
void subfunct_clear(char **argv) {
 8016398:	b580      	push	{r7, lr}
 801639a:	b082      	sub	sp, #8
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, clear, sizeof(clear), HAL_MAX_DELAY);
 80163a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80163a4:	2208      	movs	r2, #8
 80163a6:	4904      	ldr	r1, [pc, #16]	@ (80163b8 <subfunct_clear+0x20>)
 80163a8:	4804      	ldr	r0, [pc, #16]	@ (80163bc <subfunct_clear+0x24>)
 80163aa:	f7f6 f821 	bl	800c3f0 <HAL_UART_Transmit>
}
 80163ae:	bf00      	nop
 80163b0:	3708      	adds	r7, #8
 80163b2:	46bd      	mov	sp, r7
 80163b4:	bd80      	pop	{r7, pc}
 80163b6:	bf00      	nop
 80163b8:	20000310 	.word	0x20000310
 80163bc:	20000bb8 	.word	0x20000bb8

080163c0 <subfunct_start>:
void subfunct_start(char **argv) {
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b082      	sub	sp, #8
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(&htim15) == HAL_OK ?
 80163c8:	482a      	ldr	r0, [pc, #168]	@ (8016474 <subfunct_start+0xb4>)
 80163ca:	f7f4 fa7f 	bl	800a8cc <HAL_TIM_Base_Start_IT>
 80163ce:	4603      	mov	r3, r0
			debug(START, "TIMER 15 - CALCUL IMU") : (void) 0;
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d103      	bne.n	80163dc <subfunct_start+0x1c>
 80163d4:	4928      	ldr	r1, [pc, #160]	@ (8016478 <subfunct_start+0xb8>)
 80163d6:	4829      	ldr	r0, [pc, #164]	@ (801647c <subfunct_start+0xbc>)
 80163d8:	f000 fb66 	bl	8016aa8 <debug>
	HAL_TIM_Base_Start_IT(&htim16) == HAL_OK ?
 80163dc:	4828      	ldr	r0, [pc, #160]	@ (8016480 <subfunct_start+0xc0>)
 80163de:	f7f4 fa75 	bl	800a8cc <HAL_TIM_Base_Start_IT>
 80163e2:	4603      	mov	r3, r0
			debug(START, "TIMER 16 - SMOOTH SPEED") : (void) 0;
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d103      	bne.n	80163f0 <subfunct_start+0x30>
 80163e8:	4926      	ldr	r1, [pc, #152]	@ (8016484 <subfunct_start+0xc4>)
 80163ea:	4824      	ldr	r0, [pc, #144]	@ (801647c <subfunct_start+0xbc>)
 80163ec:	f000 fb5c 	bl	8016aa8 <debug>
	HAL_TIM_Base_Start(&htim2) == HAL_OK ?
 80163f0:	4825      	ldr	r0, [pc, #148]	@ (8016488 <subfunct_start+0xc8>)
 80163f2:	f7f4 f9e1 	bl	800a7b8 <HAL_TIM_Base_Start>
 80163f6:	4603      	mov	r3, r0
			debug(START, "TIMER 2 for PWM" ) : debug(D_ERROR, "TIMER 2 for PWM");
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d104      	bne.n	8016406 <subfunct_start+0x46>
 80163fc:	4923      	ldr	r1, [pc, #140]	@ (801648c <subfunct_start+0xcc>)
 80163fe:	481f      	ldr	r0, [pc, #124]	@ (801647c <subfunct_start+0xbc>)
 8016400:	f000 fb52 	bl	8016aa8 <debug>
 8016404:	e003      	b.n	801640e <subfunct_start+0x4e>
 8016406:	4921      	ldr	r1, [pc, #132]	@ (801648c <subfunct_start+0xcc>)
 8016408:	4821      	ldr	r0, [pc, #132]	@ (8016490 <subfunct_start+0xd0>)
 801640a:	f000 fb4d 	bl	8016aa8 <debug>
	HAL_TIM_Base_Start(&htim3) == HAL_OK ?
 801640e:	4821      	ldr	r0, [pc, #132]	@ (8016494 <subfunct_start+0xd4>)
 8016410:	f7f4 f9d2 	bl	800a7b8 <HAL_TIM_Base_Start>
 8016414:	4603      	mov	r3, r0
			debug(START, "TIMER 3 for PWM") : debug(D_ERROR, "TIMER 3 for PWM");
 8016416:	2b00      	cmp	r3, #0
 8016418:	d104      	bne.n	8016424 <subfunct_start+0x64>
 801641a:	491f      	ldr	r1, [pc, #124]	@ (8016498 <subfunct_start+0xd8>)
 801641c:	4817      	ldr	r0, [pc, #92]	@ (801647c <subfunct_start+0xbc>)
 801641e:	f000 fb43 	bl	8016aa8 <debug>
 8016422:	e003      	b.n	801642c <subfunct_start+0x6c>
 8016424:	491c      	ldr	r1, [pc, #112]	@ (8016498 <subfunct_start+0xd8>)
 8016426:	481a      	ldr	r0, [pc, #104]	@ (8016490 <subfunct_start+0xd0>)
 8016428:	f000 fb3e 	bl	8016aa8 <debug>
	HAL_ADCEx_Calibration_Start(&hadc2,ADC_SINGLE_ENDED) == HAL_OK ?
 801642c:	217f      	movs	r1, #127	@ 0x7f
 801642e:	481b      	ldr	r0, [pc, #108]	@ (801649c <subfunct_start+0xdc>)
 8016430:	f7f1 fb46 	bl	8007ac0 <HAL_ADCEx_Calibration_Start>
 8016434:	4603      	mov	r3, r0
			debug(START, "ADC2 CALIBRATION") : debug(D_ERROR, "ADC2 CALIBRATION");
 8016436:	2b00      	cmp	r3, #0
 8016438:	d104      	bne.n	8016444 <subfunct_start+0x84>
 801643a:	4919      	ldr	r1, [pc, #100]	@ (80164a0 <subfunct_start+0xe0>)
 801643c:	480f      	ldr	r0, [pc, #60]	@ (801647c <subfunct_start+0xbc>)
 801643e:	f000 fb33 	bl	8016aa8 <debug>
 8016442:	e003      	b.n	801644c <subfunct_start+0x8c>
 8016444:	4916      	ldr	r1, [pc, #88]	@ (80164a0 <subfunct_start+0xe0>)
 8016446:	4812      	ldr	r0, [pc, #72]	@ (8016490 <subfunct_start+0xd0>)
 8016448:	f000 fb2e 	bl	8016aa8 <debug>

	LP5812_WriteRegister(0x049,0);
 801644c:	2100      	movs	r1, #0
 801644e:	2049      	movs	r0, #73	@ 0x49
 8016450:	f7ef fa76 	bl	8005940 <LP5812_WriteRegister>
	LP5812_WriteRegister(0x044,0);
 8016454:	2100      	movs	r1, #0
 8016456:	2044      	movs	r0, #68	@ 0x44
 8016458:	f7ef fa72 	bl	8005940 <LP5812_WriteRegister>
	//To-Do : Chenillard des LEDs
	TCA9555_init();
 801645c:	f7ef fa9c 	bl	8005998 <TCA9555_init>
	LP5812_Init();
 8016460:	f7ef f9a2 	bl	80057a8 <LP5812_Init>
	ADXL343_init();
 8016464:	f7ee fe50 	bl	8005108 <ADXL343_init>
	ZXB5210_init();
 8016468:	f7ef fb46 	bl	8005af8 <ZXB5210_init>

	return;
 801646c:	bf00      	nop
}
 801646e:	3708      	adds	r7, #8
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}
 8016474:	20000a20 	.word	0x20000a20
 8016478:	0801c004 	.word	0x0801c004
 801647c:	0801c01c 	.word	0x0801c01c
 8016480:	20000aec 	.word	0x20000aec
 8016484:	0801c028 	.word	0x0801c028
 8016488:	200007bc 	.word	0x200007bc
 801648c:	0801c040 	.word	0x0801c040
 8016490:	0801c050 	.word	0x0801c050
 8016494:	20000888 	.word	0x20000888
 8016498:	0801c05c 	.word	0x0801c05c
 801649c:	20000524 	.word	0x20000524
 80164a0:	0801c06c 	.word	0x0801c06c

080164a4 <subfunct_stop>:
void subfunct_stop(char **argv) {
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b082      	sub	sp, #8
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim15) == HAL_OK ?
 80164ac:	4813      	ldr	r0, [pc, #76]	@ (80164fc <subfunct_stop+0x58>)
 80164ae:	f7f4 f9e5 	bl	800a87c <HAL_TIM_Base_Stop>
 80164b2:	4603      	mov	r3, r0
			debug(STOP, "TIMER 15 - CALCUL IMU") : (void) 0;
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d103      	bne.n	80164c0 <subfunct_stop+0x1c>
 80164b8:	4911      	ldr	r1, [pc, #68]	@ (8016500 <subfunct_stop+0x5c>)
 80164ba:	4812      	ldr	r0, [pc, #72]	@ (8016504 <subfunct_stop+0x60>)
 80164bc:	f000 faf4 	bl	8016aa8 <debug>
	ZXB5210_speed_FWD(&MDriver1,0);
 80164c0:	2100      	movs	r1, #0
 80164c2:	4811      	ldr	r0, [pc, #68]	@ (8016508 <subfunct_stop+0x64>)
 80164c4:	f7ef fc1e 	bl	8005d04 <ZXB5210_speed_FWD>
	ZXB5210_speed_FWD(&MDriver2,0);
 80164c8:	2100      	movs	r1, #0
 80164ca:	4810      	ldr	r0, [pc, #64]	@ (801650c <subfunct_stop+0x68>)
 80164cc:	f7ef fc1a 	bl	8005d04 <ZXB5210_speed_FWD>

	//	HAL_TIM_Base_Stop(&htim2) == HAL_OK ?
	//			debug(STOP, "TIMER 2") : debug(D_ERROR, "TIMER 2");
	//	HAL_TIM_Base_Stop(&htim3) == HAL_OK ?
	//			debug(STOP, "TIMER 3") : debug(D_ERROR, "TIMER 3");
	HAL_ADC_Stop_DMA(&hadc2) == HAL_OK ?
 80164d0:	480f      	ldr	r0, [pc, #60]	@ (8016510 <subfunct_stop+0x6c>)
 80164d2:	f7f0 fa09 	bl	80068e8 <HAL_ADC_Stop_DMA>
 80164d6:	4603      	mov	r3, r0
			debug(STOP, "ADC DMA") : debug(D_ERROR, "ADC2 DMA");
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d104      	bne.n	80164e6 <subfunct_stop+0x42>
 80164dc:	490d      	ldr	r1, [pc, #52]	@ (8016514 <subfunct_stop+0x70>)
 80164de:	4809      	ldr	r0, [pc, #36]	@ (8016504 <subfunct_stop+0x60>)
 80164e0:	f000 fae2 	bl	8016aa8 <debug>
 80164e4:	e003      	b.n	80164ee <subfunct_stop+0x4a>
 80164e6:	490c      	ldr	r1, [pc, #48]	@ (8016518 <subfunct_stop+0x74>)
 80164e8:	480c      	ldr	r0, [pc, #48]	@ (801651c <subfunct_stop+0x78>)
 80164ea:	f000 fadd 	bl	8016aa8 <debug>

	ZXB5210_deinit();
 80164ee:	f7ef fbb7 	bl	8005c60 <ZXB5210_deinit>
	return;
 80164f2:	bf00      	nop
}
 80164f4:	3708      	adds	r7, #8
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}
 80164fa:	bf00      	nop
 80164fc:	20000a20 	.word	0x20000a20
 8016500:	0801c004 	.word	0x0801c004
 8016504:	0801c080 	.word	0x0801c080
 8016508:	20000d40 	.word	0x20000d40
 801650c:	20000d4c 	.word	0x20000d4c
 8016510:	20000524 	.word	0x20000524
 8016514:	0801c08c 	.word	0x0801c08c
 8016518:	0801c094 	.word	0x0801c094
 801651c:	0801c050 	.word	0x0801c050

08016520 <subfunct_speed>:
void subfunct_speed(char **argv) {
 8016520:	b580      	push	{r7, lr}
 8016522:	b084      	sub	sp, #16
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
	/*
	 * int:MotorID 	int:speed
	 * ex:	speed 1 90
	 */
	MDriver_t* MDriver;
	if (argv[1] == NULL || argv[2] == NULL) {
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	3304      	adds	r3, #4
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d004      	beq.n	801653c <subfunct_speed+0x1c>
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	3308      	adds	r3, #8
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d104      	bne.n	8016546 <subfunct_speed+0x26>
		debug(INFORMATION,"SPEED - ARGUMENTS NEEDED");
 801653c:	491a      	ldr	r1, [pc, #104]	@ (80165a8 <subfunct_speed+0x88>)
 801653e:	481b      	ldr	r0, [pc, #108]	@ (80165ac <subfunct_speed+0x8c>)
 8016540:	f000 fab2 	bl	8016aa8 <debug>
		return;
 8016544:	e02c      	b.n	80165a0 <subfunct_speed+0x80>
	}
	uint8_t driver_id = (uint8_t) strtol(argv[1], NULL, 10); // Base 10
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	3304      	adds	r3, #4
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	220a      	movs	r2, #10
 801654e:	2100      	movs	r1, #0
 8016550:	4618      	mov	r0, r3
 8016552:	f002 f927 	bl	80187a4 <strtol>
 8016556:	4603      	mov	r3, r0
 8016558:	73fb      	strb	r3, [r7, #15]
	int8_t s_alpha = (int8_t) strtol(argv[2], NULL, 10); //Prends des valeurs entre -128 et 127
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	3308      	adds	r3, #8
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	220a      	movs	r2, #10
 8016562:	2100      	movs	r1, #0
 8016564:	4618      	mov	r0, r3
 8016566:	f002 f91d 	bl	80187a4 <strtol>
 801656a:	4603      	mov	r3, r0
 801656c:	73bb      	strb	r3, [r7, #14]

	MDriver = driver_id==1 ? &MDriver1 : &MDriver2;
 801656e:	7bfb      	ldrb	r3, [r7, #15]
 8016570:	2b01      	cmp	r3, #1
 8016572:	d101      	bne.n	8016578 <subfunct_speed+0x58>
 8016574:	4b0e      	ldr	r3, [pc, #56]	@ (80165b0 <subfunct_speed+0x90>)
 8016576:	e000      	b.n	801657a <subfunct_speed+0x5a>
 8016578:	4b0e      	ldr	r3, [pc, #56]	@ (80165b4 <subfunct_speed+0x94>)
 801657a:	60bb      	str	r3, [r7, #8]
	s_alpha > 0 ? ZXB5210_speed_FWD(MDriver, (uint8_t)s_alpha) : ZXB5210_speed_REV(MDriver, (uint8_t)-s_alpha);
 801657c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016580:	2b00      	cmp	r3, #0
 8016582:	dd05      	ble.n	8016590 <subfunct_speed+0x70>
 8016584:	7bbb      	ldrb	r3, [r7, #14]
 8016586:	4619      	mov	r1, r3
 8016588:	68b8      	ldr	r0, [r7, #8]
 801658a:	f7ef fbbb 	bl	8005d04 <ZXB5210_speed_FWD>

	return;
 801658e:	e006      	b.n	801659e <subfunct_speed+0x7e>
	s_alpha > 0 ? ZXB5210_speed_FWD(MDriver, (uint8_t)s_alpha) : ZXB5210_speed_REV(MDriver, (uint8_t)-s_alpha);
 8016590:	7bbb      	ldrb	r3, [r7, #14]
 8016592:	425b      	negs	r3, r3
 8016594:	b2db      	uxtb	r3, r3
 8016596:	4619      	mov	r1, r3
 8016598:	68b8      	ldr	r0, [r7, #8]
 801659a:	f7ef fbd3 	bl	8005d44 <ZXB5210_speed_REV>
	return;
 801659e:	bf00      	nop
}
 80165a0:	3710      	adds	r7, #16
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}
 80165a6:	bf00      	nop
 80165a8:	0801c0a0 	.word	0x0801c0a0
 80165ac:	0801c0bc 	.word	0x0801c0bc
 80165b0:	20000d40 	.word	0x20000d40
 80165b4:	20000d4c 	.word	0x20000d4c

080165b8 <subfunct_Iasserv>:
void subfunct_Iasserv(char **argv) {
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b082      	sub	sp, #8
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
	/** THIS DMA REQUEST IS SYNC WITH THE TIM15 EVENT **/

	HAL_ADC_Start_DMA(&hadc2,(uint32_t*)adc2_asserv_VAL,NUM_CHANNEL_ADC2) == HAL_OK ?
 80165c0:	2202      	movs	r2, #2
 80165c2:	490a      	ldr	r1, [pc, #40]	@ (80165ec <subfunct_Iasserv+0x34>)
 80165c4:	480a      	ldr	r0, [pc, #40]	@ (80165f0 <subfunct_Iasserv+0x38>)
 80165c6:	f7f0 f8db 	bl	8006780 <HAL_ADC_Start_DMA>
 80165ca:	4603      	mov	r3, r0
			debug(START, "ADC2 DMA") : debug(D_ERROR, "ADC2 DMA");
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d104      	bne.n	80165da <subfunct_Iasserv+0x22>
 80165d0:	4908      	ldr	r1, [pc, #32]	@ (80165f4 <subfunct_Iasserv+0x3c>)
 80165d2:	4809      	ldr	r0, [pc, #36]	@ (80165f8 <subfunct_Iasserv+0x40>)
 80165d4:	f000 fa68 	bl	8016aa8 <debug>
	return;
 80165d8:	e004      	b.n	80165e4 <subfunct_Iasserv+0x2c>
			debug(START, "ADC2 DMA") : debug(D_ERROR, "ADC2 DMA");
 80165da:	4906      	ldr	r1, [pc, #24]	@ (80165f4 <subfunct_Iasserv+0x3c>)
 80165dc:	4807      	ldr	r0, [pc, #28]	@ (80165fc <subfunct_Iasserv+0x44>)
 80165de:	f000 fa63 	bl	8016aa8 <debug>
	return;
 80165e2:	bf00      	nop
}
 80165e4:	3708      	adds	r7, #8
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}
 80165ea:	bf00      	nop
 80165ec:	2000763c 	.word	0x2000763c
 80165f0:	20000524 	.word	0x20000524
 80165f4:	0801c094 	.word	0x0801c094
 80165f8:	0801c01c 	.word	0x0801c01c
 80165fc:	0801c050 	.word	0x0801c050

08016600 <subfunct_setLed>:
void subfunct_setLed(char **argv) {
 8016600:	b580      	push	{r7, lr}
 8016602:	b084      	sub	sp, #16
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
	 * int: LedId	int: %PWM(0-255)
	 */

	//uint8_t unused = argv[0];
	//uint8_t LedID = (uint8_t) strtol(argv[1], NULL, 10); // Base 10
	uint8_t PWM = (uint8_t) strtol(argv[2], NULL, 10); // Base 10
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	3308      	adds	r3, #8
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	220a      	movs	r2, #10
 8016610:	2100      	movs	r1, #0
 8016612:	4618      	mov	r0, r3
 8016614:	f002 f8c6 	bl	80187a4 <strtol>
 8016618:	4603      	mov	r3, r0
 801661a:	73fb      	strb	r3, [r7, #15]
	/* Set chip_en = 1 to enable the device*/
	LP5812_WriteRegister(0x000, 0x01) == HAL_OK ?
 801661c:	2101      	movs	r1, #1
 801661e:	2000      	movs	r0, #0
 8016620:	f7ef f98e 	bl	8005940 <LP5812_WriteRegister>
 8016624:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 8016626:	2b00      	cmp	r3, #0
 8016628:	d103      	bne.n	8016632 <subfunct_setLed+0x32>
 801662a:	4877      	ldr	r0, [pc, #476]	@ (8016808 <subfunct_setLed+0x208>)
 801662c:	f002 f8e2 	bl	80187f4 <iprintf>
 8016630:	e002      	b.n	8016638 <subfunct_setLed+0x38>
 8016632:	4876      	ldr	r0, [pc, #472]	@ (801680c <subfunct_setLed+0x20c>)
 8016634:	f002 f8de 	bl	80187f4 <iprintf>
	/* Set led_mode = 4h to configure the LED drive mode as direct drive mode*/
	LP5812_WriteRegister(0x002, 0x40) == HAL_OK ?
 8016638:	2140      	movs	r1, #64	@ 0x40
 801663a:	2002      	movs	r0, #2
 801663c:	f7ef f980 	bl	8005940 <LP5812_WriteRegister>
 8016640:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 8016642:	2b00      	cmp	r3, #0
 8016644:	d103      	bne.n	801664e <subfunct_setLed+0x4e>
 8016646:	4870      	ldr	r0, [pc, #448]	@ (8016808 <subfunct_setLed+0x208>)
 8016648:	f002 f8d4 	bl	80187f4 <iprintf>
 801664c:	e002      	b.n	8016654 <subfunct_setLed+0x54>
 801664e:	486f      	ldr	r0, [pc, #444]	@ (801680c <subfunct_setLed+0x20c>)
 8016650:	f002 f8d0 	bl	80187f4 <iprintf>
	/* Send update command to complete configuration settings*/
	LP5812_WriteRegister(0x010, 0x55) == HAL_OK ?
 8016654:	2155      	movs	r1, #85	@ 0x55
 8016656:	2010      	movs	r0, #16
 8016658:	f7ef f972 	bl	8005940 <LP5812_WriteRegister>
 801665c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801665e:	2b00      	cmp	r3, #0
 8016660:	d103      	bne.n	801666a <subfunct_setLed+0x6a>
 8016662:	4869      	ldr	r0, [pc, #420]	@ (8016808 <subfunct_setLed+0x208>)
 8016664:	f002 f8c6 	bl	80187f4 <iprintf>
 8016668:	e002      	b.n	8016670 <subfunct_setLed+0x70>
 801666a:	4868      	ldr	r0, [pc, #416]	@ (801680c <subfunct_setLed+0x20c>)
 801666c:	f002 f8c2 	bl	80187f4 <iprintf>

	/* Set duty cycle for LEDs*/
	PWMLed = PWM < 255 ? 255 : 0;
 8016670:	7bfb      	ldrb	r3, [r7, #15]
 8016672:	2bff      	cmp	r3, #255	@ 0xff
 8016674:	d001      	beq.n	801667a <subfunct_setLed+0x7a>
 8016676:	22ff      	movs	r2, #255	@ 0xff
 8016678:	e000      	b.n	801667c <subfunct_setLed+0x7c>
 801667a:	2200      	movs	r2, #0
 801667c:	4b64      	ldr	r3, [pc, #400]	@ (8016810 <subfunct_setLed+0x210>)
 801667e:	701a      	strb	r2, [r3, #0]
	LP5812_WriteRegister(0x044, PWMLed) == HAL_OK ?
 8016680:	4b63      	ldr	r3, [pc, #396]	@ (8016810 <subfunct_setLed+0x210>)
 8016682:	781b      	ldrb	r3, [r3, #0]
 8016684:	4619      	mov	r1, r3
 8016686:	2044      	movs	r0, #68	@ 0x44
 8016688:	f7ef f95a 	bl	8005940 <LP5812_WriteRegister>
 801668c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801668e:	2b00      	cmp	r3, #0
 8016690:	d103      	bne.n	801669a <subfunct_setLed+0x9a>
 8016692:	485d      	ldr	r0, [pc, #372]	@ (8016808 <subfunct_setLed+0x208>)
 8016694:	f002 f8ae 	bl	80187f4 <iprintf>
 8016698:	e002      	b.n	80166a0 <subfunct_setLed+0xa0>
 801669a:	485c      	ldr	r0, [pc, #368]	@ (801680c <subfunct_setLed+0x20c>)
 801669c:	f002 f8aa 	bl	80187f4 <iprintf>
	LP5812_WriteRegister(0x045, PWMLed) == HAL_OK ?
 80166a0:	4b5b      	ldr	r3, [pc, #364]	@ (8016810 <subfunct_setLed+0x210>)
 80166a2:	781b      	ldrb	r3, [r3, #0]
 80166a4:	4619      	mov	r1, r3
 80166a6:	2045      	movs	r0, #69	@ 0x45
 80166a8:	f7ef f94a 	bl	8005940 <LP5812_WriteRegister>
 80166ac:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d103      	bne.n	80166ba <subfunct_setLed+0xba>
 80166b2:	4855      	ldr	r0, [pc, #340]	@ (8016808 <subfunct_setLed+0x208>)
 80166b4:	f002 f89e 	bl	80187f4 <iprintf>
 80166b8:	e002      	b.n	80166c0 <subfunct_setLed+0xc0>
 80166ba:	4854      	ldr	r0, [pc, #336]	@ (801680c <subfunct_setLed+0x20c>)
 80166bc:	f002 f89a 	bl	80187f4 <iprintf>
	LP5812_WriteRegister(0x046, PWMLed) == HAL_OK ?
 80166c0:	4b53      	ldr	r3, [pc, #332]	@ (8016810 <subfunct_setLed+0x210>)
 80166c2:	781b      	ldrb	r3, [r3, #0]
 80166c4:	4619      	mov	r1, r3
 80166c6:	2046      	movs	r0, #70	@ 0x46
 80166c8:	f7ef f93a 	bl	8005940 <LP5812_WriteRegister>
 80166cc:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d103      	bne.n	80166da <subfunct_setLed+0xda>
 80166d2:	484d      	ldr	r0, [pc, #308]	@ (8016808 <subfunct_setLed+0x208>)
 80166d4:	f002 f88e 	bl	80187f4 <iprintf>
 80166d8:	e002      	b.n	80166e0 <subfunct_setLed+0xe0>
 80166da:	484c      	ldr	r0, [pc, #304]	@ (801680c <subfunct_setLed+0x20c>)
 80166dc:	f002 f88a 	bl	80187f4 <iprintf>
	LP5812_WriteRegister(0x047, PWMLed) == HAL_OK ?
 80166e0:	4b4b      	ldr	r3, [pc, #300]	@ (8016810 <subfunct_setLed+0x210>)
 80166e2:	781b      	ldrb	r3, [r3, #0]
 80166e4:	4619      	mov	r1, r3
 80166e6:	2047      	movs	r0, #71	@ 0x47
 80166e8:	f7ef f92a 	bl	8005940 <LP5812_WriteRegister>
 80166ec:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d103      	bne.n	80166fa <subfunct_setLed+0xfa>
 80166f2:	4845      	ldr	r0, [pc, #276]	@ (8016808 <subfunct_setLed+0x208>)
 80166f4:	f002 f87e 	bl	80187f4 <iprintf>
 80166f8:	e002      	b.n	8016700 <subfunct_setLed+0x100>
 80166fa:	4844      	ldr	r0, [pc, #272]	@ (801680c <subfunct_setLed+0x20c>)
 80166fc:	f002 f87a 	bl	80187f4 <iprintf>
	LP5812_WriteRegister(0x048, PWMLed) == HAL_OK ?
 8016700:	4b43      	ldr	r3, [pc, #268]	@ (8016810 <subfunct_setLed+0x210>)
 8016702:	781b      	ldrb	r3, [r3, #0]
 8016704:	4619      	mov	r1, r3
 8016706:	2048      	movs	r0, #72	@ 0x48
 8016708:	f7ef f91a 	bl	8005940 <LP5812_WriteRegister>
 801670c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801670e:	2b00      	cmp	r3, #0
 8016710:	d103      	bne.n	801671a <subfunct_setLed+0x11a>
 8016712:	483d      	ldr	r0, [pc, #244]	@ (8016808 <subfunct_setLed+0x208>)
 8016714:	f002 f86e 	bl	80187f4 <iprintf>
 8016718:	e002      	b.n	8016720 <subfunct_setLed+0x120>
 801671a:	483c      	ldr	r0, [pc, #240]	@ (801680c <subfunct_setLed+0x20c>)
 801671c:	f002 f86a 	bl	80187f4 <iprintf>
	LP5812_WriteRegister(0x049, PWMLed) == HAL_OK ?
 8016720:	4b3b      	ldr	r3, [pc, #236]	@ (8016810 <subfunct_setLed+0x210>)
 8016722:	781b      	ldrb	r3, [r3, #0]
 8016724:	4619      	mov	r1, r3
 8016726:	2049      	movs	r0, #73	@ 0x49
 8016728:	f7ef f90a 	bl	8005940 <LP5812_WriteRegister>
 801672c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801672e:	2b00      	cmp	r3, #0
 8016730:	d103      	bne.n	801673a <subfunct_setLed+0x13a>
 8016732:	4835      	ldr	r0, [pc, #212]	@ (8016808 <subfunct_setLed+0x208>)
 8016734:	f002 f85e 	bl	80187f4 <iprintf>
 8016738:	e002      	b.n	8016740 <subfunct_setLed+0x140>
 801673a:	4834      	ldr	r0, [pc, #208]	@ (801680c <subfunct_setLed+0x20c>)
 801673c:	f002 f85a 	bl	80187f4 <iprintf>
	LP5812_WriteRegister(0x04A, PWMLed) == HAL_OK ?
 8016740:	4b33      	ldr	r3, [pc, #204]	@ (8016810 <subfunct_setLed+0x210>)
 8016742:	781b      	ldrb	r3, [r3, #0]
 8016744:	4619      	mov	r1, r3
 8016746:	204a      	movs	r0, #74	@ 0x4a
 8016748:	f7ef f8fa 	bl	8005940 <LP5812_WriteRegister>
 801674c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801674e:	2b00      	cmp	r3, #0
 8016750:	d103      	bne.n	801675a <subfunct_setLed+0x15a>
 8016752:	482d      	ldr	r0, [pc, #180]	@ (8016808 <subfunct_setLed+0x208>)
 8016754:	f002 f84e 	bl	80187f4 <iprintf>
 8016758:	e002      	b.n	8016760 <subfunct_setLed+0x160>
 801675a:	482c      	ldr	r0, [pc, #176]	@ (801680c <subfunct_setLed+0x20c>)
 801675c:	f002 f84a 	bl	80187f4 <iprintf>
	LP5812_WriteRegister(0x04B, PWMLed) == HAL_OK ?
 8016760:	4b2b      	ldr	r3, [pc, #172]	@ (8016810 <subfunct_setLed+0x210>)
 8016762:	781b      	ldrb	r3, [r3, #0]
 8016764:	4619      	mov	r1, r3
 8016766:	204b      	movs	r0, #75	@ 0x4b
 8016768:	f7ef f8ea 	bl	8005940 <LP5812_WriteRegister>
 801676c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801676e:	2b00      	cmp	r3, #0
 8016770:	d103      	bne.n	801677a <subfunct_setLed+0x17a>
 8016772:	4825      	ldr	r0, [pc, #148]	@ (8016808 <subfunct_setLed+0x208>)
 8016774:	f002 f83e 	bl	80187f4 <iprintf>
 8016778:	e002      	b.n	8016780 <subfunct_setLed+0x180>
 801677a:	4824      	ldr	r0, [pc, #144]	@ (801680c <subfunct_setLed+0x20c>)
 801677c:	f002 f83a 	bl	80187f4 <iprintf>
	LP5812_WriteRegister(0x04C, PWMLed) == HAL_OK ?
 8016780:	4b23      	ldr	r3, [pc, #140]	@ (8016810 <subfunct_setLed+0x210>)
 8016782:	781b      	ldrb	r3, [r3, #0]
 8016784:	4619      	mov	r1, r3
 8016786:	204c      	movs	r0, #76	@ 0x4c
 8016788:	f7ef f8da 	bl	8005940 <LP5812_WriteRegister>
 801678c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801678e:	2b00      	cmp	r3, #0
 8016790:	d103      	bne.n	801679a <subfunct_setLed+0x19a>
 8016792:	481d      	ldr	r0, [pc, #116]	@ (8016808 <subfunct_setLed+0x208>)
 8016794:	f002 f82e 	bl	80187f4 <iprintf>
 8016798:	e002      	b.n	80167a0 <subfunct_setLed+0x1a0>
 801679a:	481c      	ldr	r0, [pc, #112]	@ (801680c <subfunct_setLed+0x20c>)
 801679c:	f002 f82a 	bl	80187f4 <iprintf>
	LP5812_WriteRegister(0x04D, PWMLed) == HAL_OK ?
 80167a0:	4b1b      	ldr	r3, [pc, #108]	@ (8016810 <subfunct_setLed+0x210>)
 80167a2:	781b      	ldrb	r3, [r3, #0]
 80167a4:	4619      	mov	r1, r3
 80167a6:	204d      	movs	r0, #77	@ 0x4d
 80167a8:	f7ef f8ca 	bl	8005940 <LP5812_WriteRegister>
 80167ac:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d103      	bne.n	80167ba <subfunct_setLed+0x1ba>
 80167b2:	4815      	ldr	r0, [pc, #84]	@ (8016808 <subfunct_setLed+0x208>)
 80167b4:	f002 f81e 	bl	80187f4 <iprintf>
 80167b8:	e002      	b.n	80167c0 <subfunct_setLed+0x1c0>
 80167ba:	4814      	ldr	r0, [pc, #80]	@ (801680c <subfunct_setLed+0x20c>)
 80167bc:	f002 f81a 	bl	80187f4 <iprintf>
	LP5812_WriteRegister(0x04E, PWMLed) == HAL_OK ?
 80167c0:	4b13      	ldr	r3, [pc, #76]	@ (8016810 <subfunct_setLed+0x210>)
 80167c2:	781b      	ldrb	r3, [r3, #0]
 80167c4:	4619      	mov	r1, r3
 80167c6:	204e      	movs	r0, #78	@ 0x4e
 80167c8:	f7ef f8ba 	bl	8005940 <LP5812_WriteRegister>
 80167cc:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d103      	bne.n	80167da <subfunct_setLed+0x1da>
 80167d2:	480d      	ldr	r0, [pc, #52]	@ (8016808 <subfunct_setLed+0x208>)
 80167d4:	f002 f80e 	bl	80187f4 <iprintf>
 80167d8:	e002      	b.n	80167e0 <subfunct_setLed+0x1e0>
 80167da:	480c      	ldr	r0, [pc, #48]	@ (801680c <subfunct_setLed+0x20c>)
 80167dc:	f002 f80a 	bl	80187f4 <iprintf>
	LP5812_WriteRegister(0x04F, PWMLed) == HAL_OK ?
 80167e0:	4b0b      	ldr	r3, [pc, #44]	@ (8016810 <subfunct_setLed+0x210>)
 80167e2:	781b      	ldrb	r3, [r3, #0]
 80167e4:	4619      	mov	r1, r3
 80167e6:	204f      	movs	r0, #79	@ 0x4f
 80167e8:	f7ef f8aa 	bl	8005940 <LP5812_WriteRegister>
 80167ec:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d103      	bne.n	80167fa <subfunct_setLed+0x1fa>
 80167f2:	4805      	ldr	r0, [pc, #20]	@ (8016808 <subfunct_setLed+0x208>)
 80167f4:	f001 fffe 	bl	80187f4 <iprintf>
}
 80167f8:	e002      	b.n	8016800 <subfunct_setLed+0x200>
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80167fa:	4804      	ldr	r0, [pc, #16]	@ (801680c <subfunct_setLed+0x20c>)
 80167fc:	f001 fffa 	bl	80187f4 <iprintf>
}
 8016800:	bf00      	nop
 8016802:	3710      	adds	r7, #16
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}
 8016808:	0801c0d0 	.word	0x0801c0d0
 801680c:	0801c0dc 	.word	0x0801c0dc
 8016810:	20000318 	.word	0x20000318

08016814 <subfunct_seeIMU>:
void subfunct_seeIMU(char **argv) {
 8016814:	b480      	push	{r7}
 8016816:	b083      	sub	sp, #12
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	isSeeIMU = isSeeIMU == 1 ? 0 : 1;
 801681c:	4b07      	ldr	r3, [pc, #28]	@ (801683c <subfunct_seeIMU+0x28>)
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	2b01      	cmp	r3, #1
 8016822:	bf14      	ite	ne
 8016824:	2301      	movne	r3, #1
 8016826:	2300      	moveq	r3, #0
 8016828:	b2db      	uxtb	r3, r3
 801682a:	461a      	mov	r2, r3
 801682c:	4b03      	ldr	r3, [pc, #12]	@ (801683c <subfunct_seeIMU+0x28>)
 801682e:	601a      	str	r2, [r3, #0]

	/* in main.c : TIM16 permet de faire calculer la vitesse et la position   */
}
 8016830:	bf00      	nop
 8016832:	370c      	adds	r7, #12
 8016834:	46bd      	mov	sp, r7
 8016836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683a:	4770      	bx	lr
 801683c:	200076b0 	.word	0x200076b0

08016840 <subfunct_IMU_Update>:
void subfunct_IMU_Update(char **argv) {
 8016840:	b580      	push	{r7, lr}
 8016842:	b084      	sub	sp, #16
 8016844:	af00      	add	r7, sp, #0
 8016846:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	uint8_t startReg = 0x1D;
 8016848:	231d      	movs	r3, #29
 801684a:	72fb      	strb	r3, [r7, #11]
	uint8_t endReg = 0x39;
 801684c:	2339      	movs	r3, #57	@ 0x39
 801684e:	72bb      	strb	r3, [r7, #10]
	for (int i = 1; i <= endReg - startReg + 1; i++) {
 8016850:	2301      	movs	r3, #1
 8016852:	60fb      	str	r3, [r7, #12]
 8016854:	e01d      	b.n	8016892 <subfunct_IMU_Update+0x52>
		uint8_t ret = 0;
 8016856:	2300      	movs	r3, #0
 8016858:	727b      	strb	r3, [r7, #9]
		ADXL343_ReadRegister(IMURegister[i].reg, &ret, 1);
 801685a:	4a14      	ldr	r2, [pc, #80]	@ (80168ac <subfunct_IMU_Update+0x6c>)
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	00db      	lsls	r3, r3, #3
 8016860:	4413      	add	r3, r2
 8016862:	791b      	ldrb	r3, [r3, #4]
 8016864:	f107 0109 	add.w	r1, r7, #9
 8016868:	2201      	movs	r2, #1
 801686a:	4618      	mov	r0, r3
 801686c:	f7ee ff6e 	bl	800574c <ADXL343_ReadRegister>
		printf("READ - 0x%02X (%s): 0x%02X\r\n", IMURegister[i].reg,
 8016870:	4a0e      	ldr	r2, [pc, #56]	@ (80168ac <subfunct_IMU_Update+0x6c>)
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	00db      	lsls	r3, r3, #3
 8016876:	4413      	add	r3, r2
 8016878:	791b      	ldrb	r3, [r3, #4]
 801687a:	4619      	mov	r1, r3
 801687c:	4a0b      	ldr	r2, [pc, #44]	@ (80168ac <subfunct_IMU_Update+0x6c>)
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016884:	7a7b      	ldrb	r3, [r7, #9]
 8016886:	480a      	ldr	r0, [pc, #40]	@ (80168b0 <subfunct_IMU_Update+0x70>)
 8016888:	f001 ffb4 	bl	80187f4 <iprintf>
	for (int i = 1; i <= endReg - startReg + 1; i++) {
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	3301      	adds	r3, #1
 8016890:	60fb      	str	r3, [r7, #12]
 8016892:	7aba      	ldrb	r2, [r7, #10]
 8016894:	7afb      	ldrb	r3, [r7, #11]
 8016896:	1ad3      	subs	r3, r2, r3
 8016898:	3301      	adds	r3, #1
 801689a:	68fa      	ldr	r2, [r7, #12]
 801689c:	429a      	cmp	r2, r3
 801689e:	ddda      	ble.n	8016856 <subfunct_IMU_Update+0x16>
				IMURegister[i].name, ret);
	}
	/* in main.c : TIM16 permet de faire calculer la vitesse et la position   */
}
 80168a0:	bf00      	nop
 80168a2:	bf00      	nop
 80168a4:	3710      	adds	r7, #16
 80168a6:	46bd      	mov	sp, r7
 80168a8:	bd80      	pop	{r7, pc}
 80168aa:	bf00      	nop
 80168ac:	20000008 	.word	0x20000008
 80168b0:	0801c0e8 	.word	0x0801c0e8

080168b4 <subfunct_IMU_SelfTest>:
void subfunct_IMU_SelfTest(char **argv) {
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b084      	sub	sp, #16
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	uint8_t ret;

	isSeeIMUFORCE = isSeeIMUFORCE == 1 ? 0 : 1;
 80168bc:	4b1f      	ldr	r3, [pc, #124]	@ (801693c <subfunct_IMU_SelfTest+0x88>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	2b01      	cmp	r3, #1
 80168c2:	bf14      	ite	ne
 80168c4:	2301      	movne	r3, #1
 80168c6:	2300      	moveq	r3, #0
 80168c8:	b2db      	uxtb	r3, r3
 80168ca:	461a      	mov	r2, r3
 80168cc:	4b1b      	ldr	r3, [pc, #108]	@ (801693c <subfunct_IMU_SelfTest+0x88>)
 80168ce:	601a      	str	r2, [r3, #0]
	char *debugType = isSeeIMUFORCE == 1 ? START : STOP;
 80168d0:	4b1a      	ldr	r3, [pc, #104]	@ (801693c <subfunct_IMU_SelfTest+0x88>)
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	2b01      	cmp	r3, #1
 80168d6:	d101      	bne.n	80168dc <subfunct_IMU_SelfTest+0x28>
 80168d8:	4b19      	ldr	r3, [pc, #100]	@ (8016940 <subfunct_IMU_SelfTest+0x8c>)
 80168da:	e000      	b.n	80168de <subfunct_IMU_SelfTest+0x2a>
 80168dc:	4b19      	ldr	r3, [pc, #100]	@ (8016944 <subfunct_IMU_SelfTest+0x90>)
 80168de:	60fb      	str	r3, [r7, #12]

	ADXL343_ReadRegister(0x31, &ret, 1) != HAL_OK ?
 80168e0:	f107 030b 	add.w	r3, r7, #11
 80168e4:	2201      	movs	r2, #1
 80168e6:	4619      	mov	r1, r3
 80168e8:	2031      	movs	r0, #49	@ 0x31
 80168ea:	f7ee ff2f 	bl	800574c <ADXL343_ReadRegister>
 80168ee:	4603      	mov	r3, r0
			debug(D_ERROR, "I2C READ in IMUFORCE") : (void) 0;
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d003      	beq.n	80168fc <subfunct_IMU_SelfTest+0x48>
 80168f4:	4914      	ldr	r1, [pc, #80]	@ (8016948 <subfunct_IMU_SelfTest+0x94>)
 80168f6:	4815      	ldr	r0, [pc, #84]	@ (801694c <subfunct_IMU_SelfTest+0x98>)
 80168f8:	f000 f8d6 	bl	8016aa8 <debug>
	ADXL343_WriteRegister(0x31, ((isSeeIMUFORCE << 7) | (ret & 0x7F)))
 80168fc:	4b0f      	ldr	r3, [pc, #60]	@ (801693c <subfunct_IMU_SelfTest+0x88>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	01db      	lsls	r3, r3, #7
 8016902:	b25a      	sxtb	r2, r3
 8016904:	7afb      	ldrb	r3, [r7, #11]
 8016906:	b25b      	sxtb	r3, r3
 8016908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801690c:	b25b      	sxtb	r3, r3
 801690e:	4313      	orrs	r3, r2
 8016910:	b25b      	sxtb	r3, r3
 8016912:	b2db      	uxtb	r3, r3
 8016914:	4619      	mov	r1, r3
 8016916:	2031      	movs	r0, #49	@ 0x31
 8016918:	f7ee fefa 	bl	8005710 <ADXL343_WriteRegister>
 801691c:	4603      	mov	r3, r0
	!= HAL_OK ? debug(D_ERROR, "I2C WRITE in IMUFORCE") : (void) 0;
 801691e:	2b00      	cmp	r3, #0
 8016920:	d003      	beq.n	801692a <subfunct_IMU_SelfTest+0x76>
 8016922:	490b      	ldr	r1, [pc, #44]	@ (8016950 <subfunct_IMU_SelfTest+0x9c>)
 8016924:	4809      	ldr	r0, [pc, #36]	@ (801694c <subfunct_IMU_SelfTest+0x98>)
 8016926:	f000 f8bf 	bl	8016aa8 <debug>
	debug(debugType, "IMU FORCE - Self Test");
 801692a:	490a      	ldr	r1, [pc, #40]	@ (8016954 <subfunct_IMU_SelfTest+0xa0>)
 801692c:	68f8      	ldr	r0, [r7, #12]
 801692e:	f000 f8bb 	bl	8016aa8 <debug>
	/* in main.c : TIM16 permet de calculer la vitesse et la position   */
}
 8016932:	bf00      	nop
 8016934:	3710      	adds	r7, #16
 8016936:	46bd      	mov	sp, r7
 8016938:	bd80      	pop	{r7, pc}
 801693a:	bf00      	nop
 801693c:	200076b4 	.word	0x200076b4
 8016940:	0801c01c 	.word	0x0801c01c
 8016944:	0801c080 	.word	0x0801c080
 8016948:	0801c108 	.word	0x0801c108
 801694c:	0801c050 	.word	0x0801c050
 8016950:	0801c120 	.word	0x0801c120
 8016954:	0801c138 	.word	0x0801c138

08016958 <subfunct_IMU_GET>:
void subfunct_IMU_GET(char **argv) {
 8016958:	b580      	push	{r7, lr}
 801695a:	b08e      	sub	sp, #56	@ 0x38
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	XYZ_t accPREV = accXYZ;
 8016960:	4a2b      	ldr	r2, [pc, #172]	@ (8016a10 <subfunct_IMU_GET+0xb8>)
 8016962:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016966:	ca07      	ldmia	r2, {r0, r1, r2}
 8016968:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	XYZ_t vitPREV = vitXYZ;
 801696c:	4a29      	ldr	r2, [pc, #164]	@ (8016a14 <subfunct_IMU_GET+0xbc>)
 801696e:	f107 0320 	add.w	r3, r7, #32
 8016972:	ca07      	ldmia	r2, {r0, r1, r2}
 8016974:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	accXYZ = ADXL343_getAcc();
 8016978:	f7ee fe1c 	bl	80055b4 <ADXL343_getAcc>
 801697c:	eef0 6a40 	vmov.f32	s13, s0
 8016980:	eeb0 7a60 	vmov.f32	s14, s1
 8016984:	eef0 7a41 	vmov.f32	s15, s2
 8016988:	4b21      	ldr	r3, [pc, #132]	@ (8016a10 <subfunct_IMU_GET+0xb8>)
 801698a:	edc3 6a00 	vstr	s13, [r3]
 801698e:	ed83 7a01 	vstr	s14, [r3, #4]
 8016992:	edc3 7a02 	vstr	s15, [r3, #8]

	vitXYZ = (XYZ_t ) { accPREV.X - accXYZ.X, accPREV.Y - accXYZ.Y, accPREV.Z
 8016996:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801699a:	4b1d      	ldr	r3, [pc, #116]	@ (8016a10 <subfunct_IMU_GET+0xb8>)
 801699c:	edd3 7a00 	vldr	s15, [r3]
 80169a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80169a4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80169a8:	4b19      	ldr	r3, [pc, #100]	@ (8016a10 <subfunct_IMU_GET+0xb8>)
 80169aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80169ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80169b2:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
		- accXYZ.Z };
 80169b6:	4b16      	ldr	r3, [pc, #88]	@ (8016a10 <subfunct_IMU_GET+0xb8>)
 80169b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80169bc:	ee76 7a67 	vsub.f32	s15, s12, s15
	vitXYZ = (XYZ_t ) { accPREV.X - accXYZ.X, accPREV.Y - accXYZ.Y, accPREV.Z
 80169c0:	4b14      	ldr	r3, [pc, #80]	@ (8016a14 <subfunct_IMU_GET+0xbc>)
 80169c2:	edc3 6a00 	vstr	s13, [r3]
 80169c6:	4b13      	ldr	r3, [pc, #76]	@ (8016a14 <subfunct_IMU_GET+0xbc>)
 80169c8:	ed83 7a01 	vstr	s14, [r3, #4]
 80169cc:	4b11      	ldr	r3, [pc, #68]	@ (8016a14 <subfunct_IMU_GET+0xbc>)
 80169ce:	edc3 7a02 	vstr	s15, [r3, #8]
	posXYZ = (XYZ_t ) { vitPREV.X - vitPREV.X, vitPREV.Y - vitPREV.Y, vitPREV.Z
 80169d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80169d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80169da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80169de:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80169e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80169e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80169ea:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
		- vitPREV.Z };
 80169ee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80169f2:	ee76 7a67 	vsub.f32	s15, s12, s15
	posXYZ = (XYZ_t ) { vitPREV.X - vitPREV.X, vitPREV.Y - vitPREV.Y, vitPREV.Z
 80169f6:	4b08      	ldr	r3, [pc, #32]	@ (8016a18 <subfunct_IMU_GET+0xc0>)
 80169f8:	edc3 6a00 	vstr	s13, [r3]
 80169fc:	4b06      	ldr	r3, [pc, #24]	@ (8016a18 <subfunct_IMU_GET+0xc0>)
 80169fe:	ed83 7a01 	vstr	s14, [r3, #4]
 8016a02:	4b05      	ldr	r3, [pc, #20]	@ (8016a18 <subfunct_IMU_GET+0xc0>)
 8016a04:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8016a08:	bf00      	nop
 8016a0a:	3738      	adds	r7, #56	@ 0x38
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}
 8016a10:	200075d4 	.word	0x200075d4
 8016a14:	200075e0 	.word	0x200075e0
 8016a18:	200075ec 	.word	0x200075ec

08016a1c <subfunct_MIAOU>:
void subfunct_MIAOU(char **argv) {
 8016a1c:	b480      	push	{r7}
 8016a1e:	b083      	sub	sp, #12
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
	return;
 8016a24:	bf00      	nop
}
 8016a26:	370c      	adds	r7, #12
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2e:	4770      	bx	lr

08016a30 <subfunct_modify_calc_speed>:
void subfunct_modify_calc_speed(char**argv){
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b088      	sub	sp, #32
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
	MDriver_t* MDriver;
	MDriver_Config_t* MDriver_Config;
	uint8_t driver_id = (uint8_t) strtol(argv[1], NULL, 10); // Base 10
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	3304      	adds	r3, #4
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	220a      	movs	r2, #10
 8016a40:	2100      	movs	r1, #0
 8016a42:	4618      	mov	r0, r3
 8016a44:	f001 feae 	bl	80187a4 <strtol>
 8016a48:	4603      	mov	r3, r0
 8016a4a:	77fb      	strb	r3, [r7, #31]
	char* sens_motor = argv[2];
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	689b      	ldr	r3, [r3, #8]
 8016a50:	61bb      	str	r3, [r7, #24]
	int32_t offset_user = (int32_t) strtol(argv[3], NULL, 10); //Prends des valeurs entre -128 et 127
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	330c      	adds	r3, #12
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	220a      	movs	r2, #10
 8016a5a:	2100      	movs	r1, #0
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f001 fea1 	bl	80187a4 <strtol>
 8016a62:	6178      	str	r0, [r7, #20]
	MDriver = driver_id==1 ? &MDriver1 : &MDriver2;
 8016a64:	7ffb      	ldrb	r3, [r7, #31]
 8016a66:	2b01      	cmp	r3, #1
 8016a68:	d101      	bne.n	8016a6e <subfunct_modify_calc_speed+0x3e>
 8016a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8016a9c <subfunct_modify_calc_speed+0x6c>)
 8016a6c:	e000      	b.n	8016a70 <subfunct_modify_calc_speed+0x40>
 8016a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8016aa0 <subfunct_modify_calc_speed+0x70>)
 8016a70:	613b      	str	r3, [r7, #16]
	MDriver_Config = strcmp(sens_motor, "FWD") == 0 ? MDriver->FWD : MDriver->REV;
 8016a72:	490c      	ldr	r1, [pc, #48]	@ (8016aa4 <subfunct_modify_calc_speed+0x74>)
 8016a74:	69b8      	ldr	r0, [r7, #24]
 8016a76:	f7eb fe2b 	bl	80026d0 <strcmp>
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d102      	bne.n	8016a86 <subfunct_modify_calc_speed+0x56>
 8016a80:	693b      	ldr	r3, [r7, #16]
 8016a82:	685b      	ldr	r3, [r3, #4]
 8016a84:	e001      	b.n	8016a8a <subfunct_modify_calc_speed+0x5a>
 8016a86:	693b      	ldr	r3, [r7, #16]
 8016a88:	689b      	ldr	r3, [r3, #8]
 8016a8a:	60fb      	str	r3, [r7, #12]
	MDriver_Config->offset=offset_user;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	697a      	ldr	r2, [r7, #20]
 8016a90:	60da      	str	r2, [r3, #12]

}
 8016a92:	bf00      	nop
 8016a94:	3720      	adds	r7, #32
 8016a96:	46bd      	mov	sp, r7
 8016a98:	bd80      	pop	{r7, pc}
 8016a9a:	bf00      	nop
 8016a9c:	20000d40 	.word	0x20000d40
 8016aa0:	20000d4c 	.word	0x20000d4c
 8016aa4:	0801c150 	.word	0x0801c150

08016aa8 <debug>:
}
/************************************************************************************************
 * 										DEBUG
 *************************************************************************************************/

void debug(char *debugType, char *message) {
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b082      	sub	sp, #8
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
 8016ab0:	6039      	str	r1, [r7, #0]

	printf("%-15s%s| %s\r\n", debugType, D_RESET, message);
 8016ab2:	683b      	ldr	r3, [r7, #0]
 8016ab4:	4a04      	ldr	r2, [pc, #16]	@ (8016ac8 <debug+0x20>)
 8016ab6:	6879      	ldr	r1, [r7, #4]
 8016ab8:	4804      	ldr	r0, [pc, #16]	@ (8016acc <debug+0x24>)
 8016aba:	f001 fe9b 	bl	80187f4 <iprintf>

}
 8016abe:	bf00      	nop
 8016ac0:	3708      	adds	r7, #8
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}
 8016ac6:	bf00      	nop
 8016ac8:	0801bf80 	.word	0x0801bf80
 8016acc:	0801c154 	.word	0x0801c154

08016ad0 <__cvt>:
 8016ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016ad4:	ec57 6b10 	vmov	r6, r7, d0
 8016ad8:	2f00      	cmp	r7, #0
 8016ada:	460c      	mov	r4, r1
 8016adc:	4619      	mov	r1, r3
 8016ade:	463b      	mov	r3, r7
 8016ae0:	bfbb      	ittet	lt
 8016ae2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8016ae6:	461f      	movlt	r7, r3
 8016ae8:	2300      	movge	r3, #0
 8016aea:	232d      	movlt	r3, #45	@ 0x2d
 8016aec:	700b      	strb	r3, [r1, #0]
 8016aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016af0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8016af4:	4691      	mov	r9, r2
 8016af6:	f023 0820 	bic.w	r8, r3, #32
 8016afa:	bfbc      	itt	lt
 8016afc:	4632      	movlt	r2, r6
 8016afe:	4616      	movlt	r6, r2
 8016b00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016b04:	d005      	beq.n	8016b12 <__cvt+0x42>
 8016b06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8016b0a:	d100      	bne.n	8016b0e <__cvt+0x3e>
 8016b0c:	3401      	adds	r4, #1
 8016b0e:	2102      	movs	r1, #2
 8016b10:	e000      	b.n	8016b14 <__cvt+0x44>
 8016b12:	2103      	movs	r1, #3
 8016b14:	ab03      	add	r3, sp, #12
 8016b16:	9301      	str	r3, [sp, #4]
 8016b18:	ab02      	add	r3, sp, #8
 8016b1a:	9300      	str	r3, [sp, #0]
 8016b1c:	ec47 6b10 	vmov	d0, r6, r7
 8016b20:	4653      	mov	r3, sl
 8016b22:	4622      	mov	r2, r4
 8016b24:	f002 f8ac 	bl	8018c80 <_dtoa_r>
 8016b28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8016b2c:	4605      	mov	r5, r0
 8016b2e:	d119      	bne.n	8016b64 <__cvt+0x94>
 8016b30:	f019 0f01 	tst.w	r9, #1
 8016b34:	d00e      	beq.n	8016b54 <__cvt+0x84>
 8016b36:	eb00 0904 	add.w	r9, r0, r4
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	4630      	mov	r0, r6
 8016b40:	4639      	mov	r1, r7
 8016b42:	f7ec f9f3 	bl	8002f2c <__aeabi_dcmpeq>
 8016b46:	b108      	cbz	r0, 8016b4c <__cvt+0x7c>
 8016b48:	f8cd 900c 	str.w	r9, [sp, #12]
 8016b4c:	2230      	movs	r2, #48	@ 0x30
 8016b4e:	9b03      	ldr	r3, [sp, #12]
 8016b50:	454b      	cmp	r3, r9
 8016b52:	d31e      	bcc.n	8016b92 <__cvt+0xc2>
 8016b54:	9b03      	ldr	r3, [sp, #12]
 8016b56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016b58:	1b5b      	subs	r3, r3, r5
 8016b5a:	4628      	mov	r0, r5
 8016b5c:	6013      	str	r3, [r2, #0]
 8016b5e:	b004      	add	sp, #16
 8016b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016b68:	eb00 0904 	add.w	r9, r0, r4
 8016b6c:	d1e5      	bne.n	8016b3a <__cvt+0x6a>
 8016b6e:	7803      	ldrb	r3, [r0, #0]
 8016b70:	2b30      	cmp	r3, #48	@ 0x30
 8016b72:	d10a      	bne.n	8016b8a <__cvt+0xba>
 8016b74:	2200      	movs	r2, #0
 8016b76:	2300      	movs	r3, #0
 8016b78:	4630      	mov	r0, r6
 8016b7a:	4639      	mov	r1, r7
 8016b7c:	f7ec f9d6 	bl	8002f2c <__aeabi_dcmpeq>
 8016b80:	b918      	cbnz	r0, 8016b8a <__cvt+0xba>
 8016b82:	f1c4 0401 	rsb	r4, r4, #1
 8016b86:	f8ca 4000 	str.w	r4, [sl]
 8016b8a:	f8da 3000 	ldr.w	r3, [sl]
 8016b8e:	4499      	add	r9, r3
 8016b90:	e7d3      	b.n	8016b3a <__cvt+0x6a>
 8016b92:	1c59      	adds	r1, r3, #1
 8016b94:	9103      	str	r1, [sp, #12]
 8016b96:	701a      	strb	r2, [r3, #0]
 8016b98:	e7d9      	b.n	8016b4e <__cvt+0x7e>

08016b9a <__exponent>:
 8016b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b9c:	2900      	cmp	r1, #0
 8016b9e:	bfba      	itte	lt
 8016ba0:	4249      	neglt	r1, r1
 8016ba2:	232d      	movlt	r3, #45	@ 0x2d
 8016ba4:	232b      	movge	r3, #43	@ 0x2b
 8016ba6:	2909      	cmp	r1, #9
 8016ba8:	7002      	strb	r2, [r0, #0]
 8016baa:	7043      	strb	r3, [r0, #1]
 8016bac:	dd29      	ble.n	8016c02 <__exponent+0x68>
 8016bae:	f10d 0307 	add.w	r3, sp, #7
 8016bb2:	461d      	mov	r5, r3
 8016bb4:	270a      	movs	r7, #10
 8016bb6:	461a      	mov	r2, r3
 8016bb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8016bbc:	fb07 1416 	mls	r4, r7, r6, r1
 8016bc0:	3430      	adds	r4, #48	@ 0x30
 8016bc2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8016bc6:	460c      	mov	r4, r1
 8016bc8:	2c63      	cmp	r4, #99	@ 0x63
 8016bca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8016bce:	4631      	mov	r1, r6
 8016bd0:	dcf1      	bgt.n	8016bb6 <__exponent+0x1c>
 8016bd2:	3130      	adds	r1, #48	@ 0x30
 8016bd4:	1e94      	subs	r4, r2, #2
 8016bd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016bda:	1c41      	adds	r1, r0, #1
 8016bdc:	4623      	mov	r3, r4
 8016bde:	42ab      	cmp	r3, r5
 8016be0:	d30a      	bcc.n	8016bf8 <__exponent+0x5e>
 8016be2:	f10d 0309 	add.w	r3, sp, #9
 8016be6:	1a9b      	subs	r3, r3, r2
 8016be8:	42ac      	cmp	r4, r5
 8016bea:	bf88      	it	hi
 8016bec:	2300      	movhi	r3, #0
 8016bee:	3302      	adds	r3, #2
 8016bf0:	4403      	add	r3, r0
 8016bf2:	1a18      	subs	r0, r3, r0
 8016bf4:	b003      	add	sp, #12
 8016bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bf8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8016bfc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8016c00:	e7ed      	b.n	8016bde <__exponent+0x44>
 8016c02:	2330      	movs	r3, #48	@ 0x30
 8016c04:	3130      	adds	r1, #48	@ 0x30
 8016c06:	7083      	strb	r3, [r0, #2]
 8016c08:	70c1      	strb	r1, [r0, #3]
 8016c0a:	1d03      	adds	r3, r0, #4
 8016c0c:	e7f1      	b.n	8016bf2 <__exponent+0x58>
	...

08016c10 <_printf_float>:
 8016c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c14:	b08d      	sub	sp, #52	@ 0x34
 8016c16:	460c      	mov	r4, r1
 8016c18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016c1c:	4616      	mov	r6, r2
 8016c1e:	461f      	mov	r7, r3
 8016c20:	4605      	mov	r5, r0
 8016c22:	f001 fecd 	bl	80189c0 <_localeconv_r>
 8016c26:	6803      	ldr	r3, [r0, #0]
 8016c28:	9304      	str	r3, [sp, #16]
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	f7eb fd48 	bl	80026c0 <strlen>
 8016c30:	2300      	movs	r3, #0
 8016c32:	930a      	str	r3, [sp, #40]	@ 0x28
 8016c34:	f8d8 3000 	ldr.w	r3, [r8]
 8016c38:	9005      	str	r0, [sp, #20]
 8016c3a:	3307      	adds	r3, #7
 8016c3c:	f023 0307 	bic.w	r3, r3, #7
 8016c40:	f103 0208 	add.w	r2, r3, #8
 8016c44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016c48:	f8d4 b000 	ldr.w	fp, [r4]
 8016c4c:	f8c8 2000 	str.w	r2, [r8]
 8016c50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016c54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8016c58:	9307      	str	r3, [sp, #28]
 8016c5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8016c5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8016c62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016c66:	4b9c      	ldr	r3, [pc, #624]	@ (8016ed8 <_printf_float+0x2c8>)
 8016c68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016c6c:	f7ec f990 	bl	8002f90 <__aeabi_dcmpun>
 8016c70:	bb70      	cbnz	r0, 8016cd0 <_printf_float+0xc0>
 8016c72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016c76:	4b98      	ldr	r3, [pc, #608]	@ (8016ed8 <_printf_float+0x2c8>)
 8016c78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016c7c:	f7ec f96a 	bl	8002f54 <__aeabi_dcmple>
 8016c80:	bb30      	cbnz	r0, 8016cd0 <_printf_float+0xc0>
 8016c82:	2200      	movs	r2, #0
 8016c84:	2300      	movs	r3, #0
 8016c86:	4640      	mov	r0, r8
 8016c88:	4649      	mov	r1, r9
 8016c8a:	f7ec f959 	bl	8002f40 <__aeabi_dcmplt>
 8016c8e:	b110      	cbz	r0, 8016c96 <_printf_float+0x86>
 8016c90:	232d      	movs	r3, #45	@ 0x2d
 8016c92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016c96:	4a91      	ldr	r2, [pc, #580]	@ (8016edc <_printf_float+0x2cc>)
 8016c98:	4b91      	ldr	r3, [pc, #580]	@ (8016ee0 <_printf_float+0x2d0>)
 8016c9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016c9e:	bf94      	ite	ls
 8016ca0:	4690      	movls	r8, r2
 8016ca2:	4698      	movhi	r8, r3
 8016ca4:	2303      	movs	r3, #3
 8016ca6:	6123      	str	r3, [r4, #16]
 8016ca8:	f02b 0304 	bic.w	r3, fp, #4
 8016cac:	6023      	str	r3, [r4, #0]
 8016cae:	f04f 0900 	mov.w	r9, #0
 8016cb2:	9700      	str	r7, [sp, #0]
 8016cb4:	4633      	mov	r3, r6
 8016cb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8016cb8:	4621      	mov	r1, r4
 8016cba:	4628      	mov	r0, r5
 8016cbc:	f000 fa7c 	bl	80171b8 <_printf_common>
 8016cc0:	3001      	adds	r0, #1
 8016cc2:	f040 808d 	bne.w	8016de0 <_printf_float+0x1d0>
 8016cc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016cca:	b00d      	add	sp, #52	@ 0x34
 8016ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cd0:	4642      	mov	r2, r8
 8016cd2:	464b      	mov	r3, r9
 8016cd4:	4640      	mov	r0, r8
 8016cd6:	4649      	mov	r1, r9
 8016cd8:	f7ec f95a 	bl	8002f90 <__aeabi_dcmpun>
 8016cdc:	b140      	cbz	r0, 8016cf0 <_printf_float+0xe0>
 8016cde:	464b      	mov	r3, r9
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	bfbc      	itt	lt
 8016ce4:	232d      	movlt	r3, #45	@ 0x2d
 8016ce6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8016cea:	4a7e      	ldr	r2, [pc, #504]	@ (8016ee4 <_printf_float+0x2d4>)
 8016cec:	4b7e      	ldr	r3, [pc, #504]	@ (8016ee8 <_printf_float+0x2d8>)
 8016cee:	e7d4      	b.n	8016c9a <_printf_float+0x8a>
 8016cf0:	6863      	ldr	r3, [r4, #4]
 8016cf2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8016cf6:	9206      	str	r2, [sp, #24]
 8016cf8:	1c5a      	adds	r2, r3, #1
 8016cfa:	d13b      	bne.n	8016d74 <_printf_float+0x164>
 8016cfc:	2306      	movs	r3, #6
 8016cfe:	6063      	str	r3, [r4, #4]
 8016d00:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8016d04:	2300      	movs	r3, #0
 8016d06:	6022      	str	r2, [r4, #0]
 8016d08:	9303      	str	r3, [sp, #12]
 8016d0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8016d0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8016d10:	ab09      	add	r3, sp, #36	@ 0x24
 8016d12:	9300      	str	r3, [sp, #0]
 8016d14:	6861      	ldr	r1, [r4, #4]
 8016d16:	ec49 8b10 	vmov	d0, r8, r9
 8016d1a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8016d1e:	4628      	mov	r0, r5
 8016d20:	f7ff fed6 	bl	8016ad0 <__cvt>
 8016d24:	9b06      	ldr	r3, [sp, #24]
 8016d26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016d28:	2b47      	cmp	r3, #71	@ 0x47
 8016d2a:	4680      	mov	r8, r0
 8016d2c:	d129      	bne.n	8016d82 <_printf_float+0x172>
 8016d2e:	1cc8      	adds	r0, r1, #3
 8016d30:	db02      	blt.n	8016d38 <_printf_float+0x128>
 8016d32:	6863      	ldr	r3, [r4, #4]
 8016d34:	4299      	cmp	r1, r3
 8016d36:	dd41      	ble.n	8016dbc <_printf_float+0x1ac>
 8016d38:	f1aa 0a02 	sub.w	sl, sl, #2
 8016d3c:	fa5f fa8a 	uxtb.w	sl, sl
 8016d40:	3901      	subs	r1, #1
 8016d42:	4652      	mov	r2, sl
 8016d44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8016d48:	9109      	str	r1, [sp, #36]	@ 0x24
 8016d4a:	f7ff ff26 	bl	8016b9a <__exponent>
 8016d4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016d50:	1813      	adds	r3, r2, r0
 8016d52:	2a01      	cmp	r2, #1
 8016d54:	4681      	mov	r9, r0
 8016d56:	6123      	str	r3, [r4, #16]
 8016d58:	dc02      	bgt.n	8016d60 <_printf_float+0x150>
 8016d5a:	6822      	ldr	r2, [r4, #0]
 8016d5c:	07d2      	lsls	r2, r2, #31
 8016d5e:	d501      	bpl.n	8016d64 <_printf_float+0x154>
 8016d60:	3301      	adds	r3, #1
 8016d62:	6123      	str	r3, [r4, #16]
 8016d64:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d0a2      	beq.n	8016cb2 <_printf_float+0xa2>
 8016d6c:	232d      	movs	r3, #45	@ 0x2d
 8016d6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016d72:	e79e      	b.n	8016cb2 <_printf_float+0xa2>
 8016d74:	9a06      	ldr	r2, [sp, #24]
 8016d76:	2a47      	cmp	r2, #71	@ 0x47
 8016d78:	d1c2      	bne.n	8016d00 <_printf_float+0xf0>
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d1c0      	bne.n	8016d00 <_printf_float+0xf0>
 8016d7e:	2301      	movs	r3, #1
 8016d80:	e7bd      	b.n	8016cfe <_printf_float+0xee>
 8016d82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8016d86:	d9db      	bls.n	8016d40 <_printf_float+0x130>
 8016d88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8016d8c:	d118      	bne.n	8016dc0 <_printf_float+0x1b0>
 8016d8e:	2900      	cmp	r1, #0
 8016d90:	6863      	ldr	r3, [r4, #4]
 8016d92:	dd0b      	ble.n	8016dac <_printf_float+0x19c>
 8016d94:	6121      	str	r1, [r4, #16]
 8016d96:	b913      	cbnz	r3, 8016d9e <_printf_float+0x18e>
 8016d98:	6822      	ldr	r2, [r4, #0]
 8016d9a:	07d0      	lsls	r0, r2, #31
 8016d9c:	d502      	bpl.n	8016da4 <_printf_float+0x194>
 8016d9e:	3301      	adds	r3, #1
 8016da0:	440b      	add	r3, r1
 8016da2:	6123      	str	r3, [r4, #16]
 8016da4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8016da6:	f04f 0900 	mov.w	r9, #0
 8016daa:	e7db      	b.n	8016d64 <_printf_float+0x154>
 8016dac:	b913      	cbnz	r3, 8016db4 <_printf_float+0x1a4>
 8016dae:	6822      	ldr	r2, [r4, #0]
 8016db0:	07d2      	lsls	r2, r2, #31
 8016db2:	d501      	bpl.n	8016db8 <_printf_float+0x1a8>
 8016db4:	3302      	adds	r3, #2
 8016db6:	e7f4      	b.n	8016da2 <_printf_float+0x192>
 8016db8:	2301      	movs	r3, #1
 8016dba:	e7f2      	b.n	8016da2 <_printf_float+0x192>
 8016dbc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8016dc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016dc2:	4299      	cmp	r1, r3
 8016dc4:	db05      	blt.n	8016dd2 <_printf_float+0x1c2>
 8016dc6:	6823      	ldr	r3, [r4, #0]
 8016dc8:	6121      	str	r1, [r4, #16]
 8016dca:	07d8      	lsls	r0, r3, #31
 8016dcc:	d5ea      	bpl.n	8016da4 <_printf_float+0x194>
 8016dce:	1c4b      	adds	r3, r1, #1
 8016dd0:	e7e7      	b.n	8016da2 <_printf_float+0x192>
 8016dd2:	2900      	cmp	r1, #0
 8016dd4:	bfd4      	ite	le
 8016dd6:	f1c1 0202 	rsble	r2, r1, #2
 8016dda:	2201      	movgt	r2, #1
 8016ddc:	4413      	add	r3, r2
 8016dde:	e7e0      	b.n	8016da2 <_printf_float+0x192>
 8016de0:	6823      	ldr	r3, [r4, #0]
 8016de2:	055a      	lsls	r2, r3, #21
 8016de4:	d407      	bmi.n	8016df6 <_printf_float+0x1e6>
 8016de6:	6923      	ldr	r3, [r4, #16]
 8016de8:	4642      	mov	r2, r8
 8016dea:	4631      	mov	r1, r6
 8016dec:	4628      	mov	r0, r5
 8016dee:	47b8      	blx	r7
 8016df0:	3001      	adds	r0, #1
 8016df2:	d12b      	bne.n	8016e4c <_printf_float+0x23c>
 8016df4:	e767      	b.n	8016cc6 <_printf_float+0xb6>
 8016df6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8016dfa:	f240 80dd 	bls.w	8016fb8 <_printf_float+0x3a8>
 8016dfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8016e02:	2200      	movs	r2, #0
 8016e04:	2300      	movs	r3, #0
 8016e06:	f7ec f891 	bl	8002f2c <__aeabi_dcmpeq>
 8016e0a:	2800      	cmp	r0, #0
 8016e0c:	d033      	beq.n	8016e76 <_printf_float+0x266>
 8016e0e:	4a37      	ldr	r2, [pc, #220]	@ (8016eec <_printf_float+0x2dc>)
 8016e10:	2301      	movs	r3, #1
 8016e12:	4631      	mov	r1, r6
 8016e14:	4628      	mov	r0, r5
 8016e16:	47b8      	blx	r7
 8016e18:	3001      	adds	r0, #1
 8016e1a:	f43f af54 	beq.w	8016cc6 <_printf_float+0xb6>
 8016e1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8016e22:	4543      	cmp	r3, r8
 8016e24:	db02      	blt.n	8016e2c <_printf_float+0x21c>
 8016e26:	6823      	ldr	r3, [r4, #0]
 8016e28:	07d8      	lsls	r0, r3, #31
 8016e2a:	d50f      	bpl.n	8016e4c <_printf_float+0x23c>
 8016e2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016e30:	4631      	mov	r1, r6
 8016e32:	4628      	mov	r0, r5
 8016e34:	47b8      	blx	r7
 8016e36:	3001      	adds	r0, #1
 8016e38:	f43f af45 	beq.w	8016cc6 <_printf_float+0xb6>
 8016e3c:	f04f 0900 	mov.w	r9, #0
 8016e40:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8016e44:	f104 0a1a 	add.w	sl, r4, #26
 8016e48:	45c8      	cmp	r8, r9
 8016e4a:	dc09      	bgt.n	8016e60 <_printf_float+0x250>
 8016e4c:	6823      	ldr	r3, [r4, #0]
 8016e4e:	079b      	lsls	r3, r3, #30
 8016e50:	f100 8103 	bmi.w	801705a <_printf_float+0x44a>
 8016e54:	68e0      	ldr	r0, [r4, #12]
 8016e56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016e58:	4298      	cmp	r0, r3
 8016e5a:	bfb8      	it	lt
 8016e5c:	4618      	movlt	r0, r3
 8016e5e:	e734      	b.n	8016cca <_printf_float+0xba>
 8016e60:	2301      	movs	r3, #1
 8016e62:	4652      	mov	r2, sl
 8016e64:	4631      	mov	r1, r6
 8016e66:	4628      	mov	r0, r5
 8016e68:	47b8      	blx	r7
 8016e6a:	3001      	adds	r0, #1
 8016e6c:	f43f af2b 	beq.w	8016cc6 <_printf_float+0xb6>
 8016e70:	f109 0901 	add.w	r9, r9, #1
 8016e74:	e7e8      	b.n	8016e48 <_printf_float+0x238>
 8016e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	dc39      	bgt.n	8016ef0 <_printf_float+0x2e0>
 8016e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8016eec <_printf_float+0x2dc>)
 8016e7e:	2301      	movs	r3, #1
 8016e80:	4631      	mov	r1, r6
 8016e82:	4628      	mov	r0, r5
 8016e84:	47b8      	blx	r7
 8016e86:	3001      	adds	r0, #1
 8016e88:	f43f af1d 	beq.w	8016cc6 <_printf_float+0xb6>
 8016e8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8016e90:	ea59 0303 	orrs.w	r3, r9, r3
 8016e94:	d102      	bne.n	8016e9c <_printf_float+0x28c>
 8016e96:	6823      	ldr	r3, [r4, #0]
 8016e98:	07d9      	lsls	r1, r3, #31
 8016e9a:	d5d7      	bpl.n	8016e4c <_printf_float+0x23c>
 8016e9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016ea0:	4631      	mov	r1, r6
 8016ea2:	4628      	mov	r0, r5
 8016ea4:	47b8      	blx	r7
 8016ea6:	3001      	adds	r0, #1
 8016ea8:	f43f af0d 	beq.w	8016cc6 <_printf_float+0xb6>
 8016eac:	f04f 0a00 	mov.w	sl, #0
 8016eb0:	f104 0b1a 	add.w	fp, r4, #26
 8016eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016eb6:	425b      	negs	r3, r3
 8016eb8:	4553      	cmp	r3, sl
 8016eba:	dc01      	bgt.n	8016ec0 <_printf_float+0x2b0>
 8016ebc:	464b      	mov	r3, r9
 8016ebe:	e793      	b.n	8016de8 <_printf_float+0x1d8>
 8016ec0:	2301      	movs	r3, #1
 8016ec2:	465a      	mov	r2, fp
 8016ec4:	4631      	mov	r1, r6
 8016ec6:	4628      	mov	r0, r5
 8016ec8:	47b8      	blx	r7
 8016eca:	3001      	adds	r0, #1
 8016ecc:	f43f aefb 	beq.w	8016cc6 <_printf_float+0xb6>
 8016ed0:	f10a 0a01 	add.w	sl, sl, #1
 8016ed4:	e7ee      	b.n	8016eb4 <_printf_float+0x2a4>
 8016ed6:	bf00      	nop
 8016ed8:	7fefffff 	.word	0x7fefffff
 8016edc:	0801c2b8 	.word	0x0801c2b8
 8016ee0:	0801c2bc 	.word	0x0801c2bc
 8016ee4:	0801c2c0 	.word	0x0801c2c0
 8016ee8:	0801c2c4 	.word	0x0801c2c4
 8016eec:	0801c2c8 	.word	0x0801c2c8
 8016ef0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016ef2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016ef6:	4553      	cmp	r3, sl
 8016ef8:	bfa8      	it	ge
 8016efa:	4653      	movge	r3, sl
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	4699      	mov	r9, r3
 8016f00:	dc36      	bgt.n	8016f70 <_printf_float+0x360>
 8016f02:	f04f 0b00 	mov.w	fp, #0
 8016f06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016f0a:	f104 021a 	add.w	r2, r4, #26
 8016f0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016f10:	9306      	str	r3, [sp, #24]
 8016f12:	eba3 0309 	sub.w	r3, r3, r9
 8016f16:	455b      	cmp	r3, fp
 8016f18:	dc31      	bgt.n	8016f7e <_printf_float+0x36e>
 8016f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f1c:	459a      	cmp	sl, r3
 8016f1e:	dc3a      	bgt.n	8016f96 <_printf_float+0x386>
 8016f20:	6823      	ldr	r3, [r4, #0]
 8016f22:	07da      	lsls	r2, r3, #31
 8016f24:	d437      	bmi.n	8016f96 <_printf_float+0x386>
 8016f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f28:	ebaa 0903 	sub.w	r9, sl, r3
 8016f2c:	9b06      	ldr	r3, [sp, #24]
 8016f2e:	ebaa 0303 	sub.w	r3, sl, r3
 8016f32:	4599      	cmp	r9, r3
 8016f34:	bfa8      	it	ge
 8016f36:	4699      	movge	r9, r3
 8016f38:	f1b9 0f00 	cmp.w	r9, #0
 8016f3c:	dc33      	bgt.n	8016fa6 <_printf_float+0x396>
 8016f3e:	f04f 0800 	mov.w	r8, #0
 8016f42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016f46:	f104 0b1a 	add.w	fp, r4, #26
 8016f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f4c:	ebaa 0303 	sub.w	r3, sl, r3
 8016f50:	eba3 0309 	sub.w	r3, r3, r9
 8016f54:	4543      	cmp	r3, r8
 8016f56:	f77f af79 	ble.w	8016e4c <_printf_float+0x23c>
 8016f5a:	2301      	movs	r3, #1
 8016f5c:	465a      	mov	r2, fp
 8016f5e:	4631      	mov	r1, r6
 8016f60:	4628      	mov	r0, r5
 8016f62:	47b8      	blx	r7
 8016f64:	3001      	adds	r0, #1
 8016f66:	f43f aeae 	beq.w	8016cc6 <_printf_float+0xb6>
 8016f6a:	f108 0801 	add.w	r8, r8, #1
 8016f6e:	e7ec      	b.n	8016f4a <_printf_float+0x33a>
 8016f70:	4642      	mov	r2, r8
 8016f72:	4631      	mov	r1, r6
 8016f74:	4628      	mov	r0, r5
 8016f76:	47b8      	blx	r7
 8016f78:	3001      	adds	r0, #1
 8016f7a:	d1c2      	bne.n	8016f02 <_printf_float+0x2f2>
 8016f7c:	e6a3      	b.n	8016cc6 <_printf_float+0xb6>
 8016f7e:	2301      	movs	r3, #1
 8016f80:	4631      	mov	r1, r6
 8016f82:	4628      	mov	r0, r5
 8016f84:	9206      	str	r2, [sp, #24]
 8016f86:	47b8      	blx	r7
 8016f88:	3001      	adds	r0, #1
 8016f8a:	f43f ae9c 	beq.w	8016cc6 <_printf_float+0xb6>
 8016f8e:	9a06      	ldr	r2, [sp, #24]
 8016f90:	f10b 0b01 	add.w	fp, fp, #1
 8016f94:	e7bb      	b.n	8016f0e <_printf_float+0x2fe>
 8016f96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016f9a:	4631      	mov	r1, r6
 8016f9c:	4628      	mov	r0, r5
 8016f9e:	47b8      	blx	r7
 8016fa0:	3001      	adds	r0, #1
 8016fa2:	d1c0      	bne.n	8016f26 <_printf_float+0x316>
 8016fa4:	e68f      	b.n	8016cc6 <_printf_float+0xb6>
 8016fa6:	9a06      	ldr	r2, [sp, #24]
 8016fa8:	464b      	mov	r3, r9
 8016faa:	4442      	add	r2, r8
 8016fac:	4631      	mov	r1, r6
 8016fae:	4628      	mov	r0, r5
 8016fb0:	47b8      	blx	r7
 8016fb2:	3001      	adds	r0, #1
 8016fb4:	d1c3      	bne.n	8016f3e <_printf_float+0x32e>
 8016fb6:	e686      	b.n	8016cc6 <_printf_float+0xb6>
 8016fb8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016fbc:	f1ba 0f01 	cmp.w	sl, #1
 8016fc0:	dc01      	bgt.n	8016fc6 <_printf_float+0x3b6>
 8016fc2:	07db      	lsls	r3, r3, #31
 8016fc4:	d536      	bpl.n	8017034 <_printf_float+0x424>
 8016fc6:	2301      	movs	r3, #1
 8016fc8:	4642      	mov	r2, r8
 8016fca:	4631      	mov	r1, r6
 8016fcc:	4628      	mov	r0, r5
 8016fce:	47b8      	blx	r7
 8016fd0:	3001      	adds	r0, #1
 8016fd2:	f43f ae78 	beq.w	8016cc6 <_printf_float+0xb6>
 8016fd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016fda:	4631      	mov	r1, r6
 8016fdc:	4628      	mov	r0, r5
 8016fde:	47b8      	blx	r7
 8016fe0:	3001      	adds	r0, #1
 8016fe2:	f43f ae70 	beq.w	8016cc6 <_printf_float+0xb6>
 8016fe6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8016fea:	2200      	movs	r2, #0
 8016fec:	2300      	movs	r3, #0
 8016fee:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8016ff2:	f7eb ff9b 	bl	8002f2c <__aeabi_dcmpeq>
 8016ff6:	b9c0      	cbnz	r0, 801702a <_printf_float+0x41a>
 8016ff8:	4653      	mov	r3, sl
 8016ffa:	f108 0201 	add.w	r2, r8, #1
 8016ffe:	4631      	mov	r1, r6
 8017000:	4628      	mov	r0, r5
 8017002:	47b8      	blx	r7
 8017004:	3001      	adds	r0, #1
 8017006:	d10c      	bne.n	8017022 <_printf_float+0x412>
 8017008:	e65d      	b.n	8016cc6 <_printf_float+0xb6>
 801700a:	2301      	movs	r3, #1
 801700c:	465a      	mov	r2, fp
 801700e:	4631      	mov	r1, r6
 8017010:	4628      	mov	r0, r5
 8017012:	47b8      	blx	r7
 8017014:	3001      	adds	r0, #1
 8017016:	f43f ae56 	beq.w	8016cc6 <_printf_float+0xb6>
 801701a:	f108 0801 	add.w	r8, r8, #1
 801701e:	45d0      	cmp	r8, sl
 8017020:	dbf3      	blt.n	801700a <_printf_float+0x3fa>
 8017022:	464b      	mov	r3, r9
 8017024:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017028:	e6df      	b.n	8016dea <_printf_float+0x1da>
 801702a:	f04f 0800 	mov.w	r8, #0
 801702e:	f104 0b1a 	add.w	fp, r4, #26
 8017032:	e7f4      	b.n	801701e <_printf_float+0x40e>
 8017034:	2301      	movs	r3, #1
 8017036:	4642      	mov	r2, r8
 8017038:	e7e1      	b.n	8016ffe <_printf_float+0x3ee>
 801703a:	2301      	movs	r3, #1
 801703c:	464a      	mov	r2, r9
 801703e:	4631      	mov	r1, r6
 8017040:	4628      	mov	r0, r5
 8017042:	47b8      	blx	r7
 8017044:	3001      	adds	r0, #1
 8017046:	f43f ae3e 	beq.w	8016cc6 <_printf_float+0xb6>
 801704a:	f108 0801 	add.w	r8, r8, #1
 801704e:	68e3      	ldr	r3, [r4, #12]
 8017050:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017052:	1a5b      	subs	r3, r3, r1
 8017054:	4543      	cmp	r3, r8
 8017056:	dcf0      	bgt.n	801703a <_printf_float+0x42a>
 8017058:	e6fc      	b.n	8016e54 <_printf_float+0x244>
 801705a:	f04f 0800 	mov.w	r8, #0
 801705e:	f104 0919 	add.w	r9, r4, #25
 8017062:	e7f4      	b.n	801704e <_printf_float+0x43e>

08017064 <malloc>:
 8017064:	4b02      	ldr	r3, [pc, #8]	@ (8017070 <malloc+0xc>)
 8017066:	4601      	mov	r1, r0
 8017068:	6818      	ldr	r0, [r3, #0]
 801706a:	f000 b825 	b.w	80170b8 <_malloc_r>
 801706e:	bf00      	nop
 8017070:	20000494 	.word	0x20000494

08017074 <sbrk_aligned>:
 8017074:	b570      	push	{r4, r5, r6, lr}
 8017076:	4e0f      	ldr	r6, [pc, #60]	@ (80170b4 <sbrk_aligned+0x40>)
 8017078:	460c      	mov	r4, r1
 801707a:	6831      	ldr	r1, [r6, #0]
 801707c:	4605      	mov	r5, r0
 801707e:	b911      	cbnz	r1, 8017086 <sbrk_aligned+0x12>
 8017080:	f001 fcf8 	bl	8018a74 <_sbrk_r>
 8017084:	6030      	str	r0, [r6, #0]
 8017086:	4621      	mov	r1, r4
 8017088:	4628      	mov	r0, r5
 801708a:	f001 fcf3 	bl	8018a74 <_sbrk_r>
 801708e:	1c43      	adds	r3, r0, #1
 8017090:	d103      	bne.n	801709a <sbrk_aligned+0x26>
 8017092:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017096:	4620      	mov	r0, r4
 8017098:	bd70      	pop	{r4, r5, r6, pc}
 801709a:	1cc4      	adds	r4, r0, #3
 801709c:	f024 0403 	bic.w	r4, r4, #3
 80170a0:	42a0      	cmp	r0, r4
 80170a2:	d0f8      	beq.n	8017096 <sbrk_aligned+0x22>
 80170a4:	1a21      	subs	r1, r4, r0
 80170a6:	4628      	mov	r0, r5
 80170a8:	f001 fce4 	bl	8018a74 <_sbrk_r>
 80170ac:	3001      	adds	r0, #1
 80170ae:	d1f2      	bne.n	8017096 <sbrk_aligned+0x22>
 80170b0:	e7ef      	b.n	8017092 <sbrk_aligned+0x1e>
 80170b2:	bf00      	nop
 80170b4:	200076bc 	.word	0x200076bc

080170b8 <_malloc_r>:
 80170b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170bc:	1ccd      	adds	r5, r1, #3
 80170be:	f025 0503 	bic.w	r5, r5, #3
 80170c2:	3508      	adds	r5, #8
 80170c4:	2d0c      	cmp	r5, #12
 80170c6:	bf38      	it	cc
 80170c8:	250c      	movcc	r5, #12
 80170ca:	2d00      	cmp	r5, #0
 80170cc:	4606      	mov	r6, r0
 80170ce:	db01      	blt.n	80170d4 <_malloc_r+0x1c>
 80170d0:	42a9      	cmp	r1, r5
 80170d2:	d904      	bls.n	80170de <_malloc_r+0x26>
 80170d4:	230c      	movs	r3, #12
 80170d6:	6033      	str	r3, [r6, #0]
 80170d8:	2000      	movs	r0, #0
 80170da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80171b4 <_malloc_r+0xfc>
 80170e2:	f000 fc0b 	bl	80178fc <__malloc_lock>
 80170e6:	f8d8 3000 	ldr.w	r3, [r8]
 80170ea:	461c      	mov	r4, r3
 80170ec:	bb44      	cbnz	r4, 8017140 <_malloc_r+0x88>
 80170ee:	4629      	mov	r1, r5
 80170f0:	4630      	mov	r0, r6
 80170f2:	f7ff ffbf 	bl	8017074 <sbrk_aligned>
 80170f6:	1c43      	adds	r3, r0, #1
 80170f8:	4604      	mov	r4, r0
 80170fa:	d158      	bne.n	80171ae <_malloc_r+0xf6>
 80170fc:	f8d8 4000 	ldr.w	r4, [r8]
 8017100:	4627      	mov	r7, r4
 8017102:	2f00      	cmp	r7, #0
 8017104:	d143      	bne.n	801718e <_malloc_r+0xd6>
 8017106:	2c00      	cmp	r4, #0
 8017108:	d04b      	beq.n	80171a2 <_malloc_r+0xea>
 801710a:	6823      	ldr	r3, [r4, #0]
 801710c:	4639      	mov	r1, r7
 801710e:	4630      	mov	r0, r6
 8017110:	eb04 0903 	add.w	r9, r4, r3
 8017114:	f001 fcae 	bl	8018a74 <_sbrk_r>
 8017118:	4581      	cmp	r9, r0
 801711a:	d142      	bne.n	80171a2 <_malloc_r+0xea>
 801711c:	6821      	ldr	r1, [r4, #0]
 801711e:	1a6d      	subs	r5, r5, r1
 8017120:	4629      	mov	r1, r5
 8017122:	4630      	mov	r0, r6
 8017124:	f7ff ffa6 	bl	8017074 <sbrk_aligned>
 8017128:	3001      	adds	r0, #1
 801712a:	d03a      	beq.n	80171a2 <_malloc_r+0xea>
 801712c:	6823      	ldr	r3, [r4, #0]
 801712e:	442b      	add	r3, r5
 8017130:	6023      	str	r3, [r4, #0]
 8017132:	f8d8 3000 	ldr.w	r3, [r8]
 8017136:	685a      	ldr	r2, [r3, #4]
 8017138:	bb62      	cbnz	r2, 8017194 <_malloc_r+0xdc>
 801713a:	f8c8 7000 	str.w	r7, [r8]
 801713e:	e00f      	b.n	8017160 <_malloc_r+0xa8>
 8017140:	6822      	ldr	r2, [r4, #0]
 8017142:	1b52      	subs	r2, r2, r5
 8017144:	d420      	bmi.n	8017188 <_malloc_r+0xd0>
 8017146:	2a0b      	cmp	r2, #11
 8017148:	d917      	bls.n	801717a <_malloc_r+0xc2>
 801714a:	1961      	adds	r1, r4, r5
 801714c:	42a3      	cmp	r3, r4
 801714e:	6025      	str	r5, [r4, #0]
 8017150:	bf18      	it	ne
 8017152:	6059      	strne	r1, [r3, #4]
 8017154:	6863      	ldr	r3, [r4, #4]
 8017156:	bf08      	it	eq
 8017158:	f8c8 1000 	streq.w	r1, [r8]
 801715c:	5162      	str	r2, [r4, r5]
 801715e:	604b      	str	r3, [r1, #4]
 8017160:	4630      	mov	r0, r6
 8017162:	f000 fbd1 	bl	8017908 <__malloc_unlock>
 8017166:	f104 000b 	add.w	r0, r4, #11
 801716a:	1d23      	adds	r3, r4, #4
 801716c:	f020 0007 	bic.w	r0, r0, #7
 8017170:	1ac2      	subs	r2, r0, r3
 8017172:	bf1c      	itt	ne
 8017174:	1a1b      	subne	r3, r3, r0
 8017176:	50a3      	strne	r3, [r4, r2]
 8017178:	e7af      	b.n	80170da <_malloc_r+0x22>
 801717a:	6862      	ldr	r2, [r4, #4]
 801717c:	42a3      	cmp	r3, r4
 801717e:	bf0c      	ite	eq
 8017180:	f8c8 2000 	streq.w	r2, [r8]
 8017184:	605a      	strne	r2, [r3, #4]
 8017186:	e7eb      	b.n	8017160 <_malloc_r+0xa8>
 8017188:	4623      	mov	r3, r4
 801718a:	6864      	ldr	r4, [r4, #4]
 801718c:	e7ae      	b.n	80170ec <_malloc_r+0x34>
 801718e:	463c      	mov	r4, r7
 8017190:	687f      	ldr	r7, [r7, #4]
 8017192:	e7b6      	b.n	8017102 <_malloc_r+0x4a>
 8017194:	461a      	mov	r2, r3
 8017196:	685b      	ldr	r3, [r3, #4]
 8017198:	42a3      	cmp	r3, r4
 801719a:	d1fb      	bne.n	8017194 <_malloc_r+0xdc>
 801719c:	2300      	movs	r3, #0
 801719e:	6053      	str	r3, [r2, #4]
 80171a0:	e7de      	b.n	8017160 <_malloc_r+0xa8>
 80171a2:	230c      	movs	r3, #12
 80171a4:	6033      	str	r3, [r6, #0]
 80171a6:	4630      	mov	r0, r6
 80171a8:	f000 fbae 	bl	8017908 <__malloc_unlock>
 80171ac:	e794      	b.n	80170d8 <_malloc_r+0x20>
 80171ae:	6005      	str	r5, [r0, #0]
 80171b0:	e7d6      	b.n	8017160 <_malloc_r+0xa8>
 80171b2:	bf00      	nop
 80171b4:	200076c0 	.word	0x200076c0

080171b8 <_printf_common>:
 80171b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171bc:	4616      	mov	r6, r2
 80171be:	4698      	mov	r8, r3
 80171c0:	688a      	ldr	r2, [r1, #8]
 80171c2:	690b      	ldr	r3, [r1, #16]
 80171c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80171c8:	4293      	cmp	r3, r2
 80171ca:	bfb8      	it	lt
 80171cc:	4613      	movlt	r3, r2
 80171ce:	6033      	str	r3, [r6, #0]
 80171d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80171d4:	4607      	mov	r7, r0
 80171d6:	460c      	mov	r4, r1
 80171d8:	b10a      	cbz	r2, 80171de <_printf_common+0x26>
 80171da:	3301      	adds	r3, #1
 80171dc:	6033      	str	r3, [r6, #0]
 80171de:	6823      	ldr	r3, [r4, #0]
 80171e0:	0699      	lsls	r1, r3, #26
 80171e2:	bf42      	ittt	mi
 80171e4:	6833      	ldrmi	r3, [r6, #0]
 80171e6:	3302      	addmi	r3, #2
 80171e8:	6033      	strmi	r3, [r6, #0]
 80171ea:	6825      	ldr	r5, [r4, #0]
 80171ec:	f015 0506 	ands.w	r5, r5, #6
 80171f0:	d106      	bne.n	8017200 <_printf_common+0x48>
 80171f2:	f104 0a19 	add.w	sl, r4, #25
 80171f6:	68e3      	ldr	r3, [r4, #12]
 80171f8:	6832      	ldr	r2, [r6, #0]
 80171fa:	1a9b      	subs	r3, r3, r2
 80171fc:	42ab      	cmp	r3, r5
 80171fe:	dc26      	bgt.n	801724e <_printf_common+0x96>
 8017200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017204:	6822      	ldr	r2, [r4, #0]
 8017206:	3b00      	subs	r3, #0
 8017208:	bf18      	it	ne
 801720a:	2301      	movne	r3, #1
 801720c:	0692      	lsls	r2, r2, #26
 801720e:	d42b      	bmi.n	8017268 <_printf_common+0xb0>
 8017210:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017214:	4641      	mov	r1, r8
 8017216:	4638      	mov	r0, r7
 8017218:	47c8      	blx	r9
 801721a:	3001      	adds	r0, #1
 801721c:	d01e      	beq.n	801725c <_printf_common+0xa4>
 801721e:	6823      	ldr	r3, [r4, #0]
 8017220:	6922      	ldr	r2, [r4, #16]
 8017222:	f003 0306 	and.w	r3, r3, #6
 8017226:	2b04      	cmp	r3, #4
 8017228:	bf02      	ittt	eq
 801722a:	68e5      	ldreq	r5, [r4, #12]
 801722c:	6833      	ldreq	r3, [r6, #0]
 801722e:	1aed      	subeq	r5, r5, r3
 8017230:	68a3      	ldr	r3, [r4, #8]
 8017232:	bf0c      	ite	eq
 8017234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017238:	2500      	movne	r5, #0
 801723a:	4293      	cmp	r3, r2
 801723c:	bfc4      	itt	gt
 801723e:	1a9b      	subgt	r3, r3, r2
 8017240:	18ed      	addgt	r5, r5, r3
 8017242:	2600      	movs	r6, #0
 8017244:	341a      	adds	r4, #26
 8017246:	42b5      	cmp	r5, r6
 8017248:	d11a      	bne.n	8017280 <_printf_common+0xc8>
 801724a:	2000      	movs	r0, #0
 801724c:	e008      	b.n	8017260 <_printf_common+0xa8>
 801724e:	2301      	movs	r3, #1
 8017250:	4652      	mov	r2, sl
 8017252:	4641      	mov	r1, r8
 8017254:	4638      	mov	r0, r7
 8017256:	47c8      	blx	r9
 8017258:	3001      	adds	r0, #1
 801725a:	d103      	bne.n	8017264 <_printf_common+0xac>
 801725c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017264:	3501      	adds	r5, #1
 8017266:	e7c6      	b.n	80171f6 <_printf_common+0x3e>
 8017268:	18e1      	adds	r1, r4, r3
 801726a:	1c5a      	adds	r2, r3, #1
 801726c:	2030      	movs	r0, #48	@ 0x30
 801726e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017272:	4422      	add	r2, r4
 8017274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801727c:	3302      	adds	r3, #2
 801727e:	e7c7      	b.n	8017210 <_printf_common+0x58>
 8017280:	2301      	movs	r3, #1
 8017282:	4622      	mov	r2, r4
 8017284:	4641      	mov	r1, r8
 8017286:	4638      	mov	r0, r7
 8017288:	47c8      	blx	r9
 801728a:	3001      	adds	r0, #1
 801728c:	d0e6      	beq.n	801725c <_printf_common+0xa4>
 801728e:	3601      	adds	r6, #1
 8017290:	e7d9      	b.n	8017246 <_printf_common+0x8e>
	...

08017294 <_printf_i>:
 8017294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017298:	7e0f      	ldrb	r7, [r1, #24]
 801729a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801729c:	2f78      	cmp	r7, #120	@ 0x78
 801729e:	4691      	mov	r9, r2
 80172a0:	4680      	mov	r8, r0
 80172a2:	460c      	mov	r4, r1
 80172a4:	469a      	mov	sl, r3
 80172a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80172aa:	d807      	bhi.n	80172bc <_printf_i+0x28>
 80172ac:	2f62      	cmp	r7, #98	@ 0x62
 80172ae:	d80a      	bhi.n	80172c6 <_printf_i+0x32>
 80172b0:	2f00      	cmp	r7, #0
 80172b2:	f000 80d2 	beq.w	801745a <_printf_i+0x1c6>
 80172b6:	2f58      	cmp	r7, #88	@ 0x58
 80172b8:	f000 80b9 	beq.w	801742e <_printf_i+0x19a>
 80172bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80172c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80172c4:	e03a      	b.n	801733c <_printf_i+0xa8>
 80172c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80172ca:	2b15      	cmp	r3, #21
 80172cc:	d8f6      	bhi.n	80172bc <_printf_i+0x28>
 80172ce:	a101      	add	r1, pc, #4	@ (adr r1, 80172d4 <_printf_i+0x40>)
 80172d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80172d4:	0801732d 	.word	0x0801732d
 80172d8:	08017341 	.word	0x08017341
 80172dc:	080172bd 	.word	0x080172bd
 80172e0:	080172bd 	.word	0x080172bd
 80172e4:	080172bd 	.word	0x080172bd
 80172e8:	080172bd 	.word	0x080172bd
 80172ec:	08017341 	.word	0x08017341
 80172f0:	080172bd 	.word	0x080172bd
 80172f4:	080172bd 	.word	0x080172bd
 80172f8:	080172bd 	.word	0x080172bd
 80172fc:	080172bd 	.word	0x080172bd
 8017300:	08017441 	.word	0x08017441
 8017304:	0801736b 	.word	0x0801736b
 8017308:	080173fb 	.word	0x080173fb
 801730c:	080172bd 	.word	0x080172bd
 8017310:	080172bd 	.word	0x080172bd
 8017314:	08017463 	.word	0x08017463
 8017318:	080172bd 	.word	0x080172bd
 801731c:	0801736b 	.word	0x0801736b
 8017320:	080172bd 	.word	0x080172bd
 8017324:	080172bd 	.word	0x080172bd
 8017328:	08017403 	.word	0x08017403
 801732c:	6833      	ldr	r3, [r6, #0]
 801732e:	1d1a      	adds	r2, r3, #4
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	6032      	str	r2, [r6, #0]
 8017334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801733c:	2301      	movs	r3, #1
 801733e:	e09d      	b.n	801747c <_printf_i+0x1e8>
 8017340:	6833      	ldr	r3, [r6, #0]
 8017342:	6820      	ldr	r0, [r4, #0]
 8017344:	1d19      	adds	r1, r3, #4
 8017346:	6031      	str	r1, [r6, #0]
 8017348:	0606      	lsls	r6, r0, #24
 801734a:	d501      	bpl.n	8017350 <_printf_i+0xbc>
 801734c:	681d      	ldr	r5, [r3, #0]
 801734e:	e003      	b.n	8017358 <_printf_i+0xc4>
 8017350:	0645      	lsls	r5, r0, #25
 8017352:	d5fb      	bpl.n	801734c <_printf_i+0xb8>
 8017354:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017358:	2d00      	cmp	r5, #0
 801735a:	da03      	bge.n	8017364 <_printf_i+0xd0>
 801735c:	232d      	movs	r3, #45	@ 0x2d
 801735e:	426d      	negs	r5, r5
 8017360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017364:	4859      	ldr	r0, [pc, #356]	@ (80174cc <_printf_i+0x238>)
 8017366:	230a      	movs	r3, #10
 8017368:	e011      	b.n	801738e <_printf_i+0xfa>
 801736a:	6821      	ldr	r1, [r4, #0]
 801736c:	6833      	ldr	r3, [r6, #0]
 801736e:	0608      	lsls	r0, r1, #24
 8017370:	f853 5b04 	ldr.w	r5, [r3], #4
 8017374:	d402      	bmi.n	801737c <_printf_i+0xe8>
 8017376:	0649      	lsls	r1, r1, #25
 8017378:	bf48      	it	mi
 801737a:	b2ad      	uxthmi	r5, r5
 801737c:	2f6f      	cmp	r7, #111	@ 0x6f
 801737e:	4853      	ldr	r0, [pc, #332]	@ (80174cc <_printf_i+0x238>)
 8017380:	6033      	str	r3, [r6, #0]
 8017382:	bf14      	ite	ne
 8017384:	230a      	movne	r3, #10
 8017386:	2308      	moveq	r3, #8
 8017388:	2100      	movs	r1, #0
 801738a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801738e:	6866      	ldr	r6, [r4, #4]
 8017390:	60a6      	str	r6, [r4, #8]
 8017392:	2e00      	cmp	r6, #0
 8017394:	bfa2      	ittt	ge
 8017396:	6821      	ldrge	r1, [r4, #0]
 8017398:	f021 0104 	bicge.w	r1, r1, #4
 801739c:	6021      	strge	r1, [r4, #0]
 801739e:	b90d      	cbnz	r5, 80173a4 <_printf_i+0x110>
 80173a0:	2e00      	cmp	r6, #0
 80173a2:	d04b      	beq.n	801743c <_printf_i+0x1a8>
 80173a4:	4616      	mov	r6, r2
 80173a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80173aa:	fb03 5711 	mls	r7, r3, r1, r5
 80173ae:	5dc7      	ldrb	r7, [r0, r7]
 80173b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80173b4:	462f      	mov	r7, r5
 80173b6:	42bb      	cmp	r3, r7
 80173b8:	460d      	mov	r5, r1
 80173ba:	d9f4      	bls.n	80173a6 <_printf_i+0x112>
 80173bc:	2b08      	cmp	r3, #8
 80173be:	d10b      	bne.n	80173d8 <_printf_i+0x144>
 80173c0:	6823      	ldr	r3, [r4, #0]
 80173c2:	07df      	lsls	r7, r3, #31
 80173c4:	d508      	bpl.n	80173d8 <_printf_i+0x144>
 80173c6:	6923      	ldr	r3, [r4, #16]
 80173c8:	6861      	ldr	r1, [r4, #4]
 80173ca:	4299      	cmp	r1, r3
 80173cc:	bfde      	ittt	le
 80173ce:	2330      	movle	r3, #48	@ 0x30
 80173d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80173d4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80173d8:	1b92      	subs	r2, r2, r6
 80173da:	6122      	str	r2, [r4, #16]
 80173dc:	f8cd a000 	str.w	sl, [sp]
 80173e0:	464b      	mov	r3, r9
 80173e2:	aa03      	add	r2, sp, #12
 80173e4:	4621      	mov	r1, r4
 80173e6:	4640      	mov	r0, r8
 80173e8:	f7ff fee6 	bl	80171b8 <_printf_common>
 80173ec:	3001      	adds	r0, #1
 80173ee:	d14a      	bne.n	8017486 <_printf_i+0x1f2>
 80173f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80173f4:	b004      	add	sp, #16
 80173f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173fa:	6823      	ldr	r3, [r4, #0]
 80173fc:	f043 0320 	orr.w	r3, r3, #32
 8017400:	6023      	str	r3, [r4, #0]
 8017402:	4833      	ldr	r0, [pc, #204]	@ (80174d0 <_printf_i+0x23c>)
 8017404:	2778      	movs	r7, #120	@ 0x78
 8017406:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801740a:	6823      	ldr	r3, [r4, #0]
 801740c:	6831      	ldr	r1, [r6, #0]
 801740e:	061f      	lsls	r7, r3, #24
 8017410:	f851 5b04 	ldr.w	r5, [r1], #4
 8017414:	d402      	bmi.n	801741c <_printf_i+0x188>
 8017416:	065f      	lsls	r7, r3, #25
 8017418:	bf48      	it	mi
 801741a:	b2ad      	uxthmi	r5, r5
 801741c:	6031      	str	r1, [r6, #0]
 801741e:	07d9      	lsls	r1, r3, #31
 8017420:	bf44      	itt	mi
 8017422:	f043 0320 	orrmi.w	r3, r3, #32
 8017426:	6023      	strmi	r3, [r4, #0]
 8017428:	b11d      	cbz	r5, 8017432 <_printf_i+0x19e>
 801742a:	2310      	movs	r3, #16
 801742c:	e7ac      	b.n	8017388 <_printf_i+0xf4>
 801742e:	4827      	ldr	r0, [pc, #156]	@ (80174cc <_printf_i+0x238>)
 8017430:	e7e9      	b.n	8017406 <_printf_i+0x172>
 8017432:	6823      	ldr	r3, [r4, #0]
 8017434:	f023 0320 	bic.w	r3, r3, #32
 8017438:	6023      	str	r3, [r4, #0]
 801743a:	e7f6      	b.n	801742a <_printf_i+0x196>
 801743c:	4616      	mov	r6, r2
 801743e:	e7bd      	b.n	80173bc <_printf_i+0x128>
 8017440:	6833      	ldr	r3, [r6, #0]
 8017442:	6825      	ldr	r5, [r4, #0]
 8017444:	6961      	ldr	r1, [r4, #20]
 8017446:	1d18      	adds	r0, r3, #4
 8017448:	6030      	str	r0, [r6, #0]
 801744a:	062e      	lsls	r6, r5, #24
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	d501      	bpl.n	8017454 <_printf_i+0x1c0>
 8017450:	6019      	str	r1, [r3, #0]
 8017452:	e002      	b.n	801745a <_printf_i+0x1c6>
 8017454:	0668      	lsls	r0, r5, #25
 8017456:	d5fb      	bpl.n	8017450 <_printf_i+0x1bc>
 8017458:	8019      	strh	r1, [r3, #0]
 801745a:	2300      	movs	r3, #0
 801745c:	6123      	str	r3, [r4, #16]
 801745e:	4616      	mov	r6, r2
 8017460:	e7bc      	b.n	80173dc <_printf_i+0x148>
 8017462:	6833      	ldr	r3, [r6, #0]
 8017464:	1d1a      	adds	r2, r3, #4
 8017466:	6032      	str	r2, [r6, #0]
 8017468:	681e      	ldr	r6, [r3, #0]
 801746a:	6862      	ldr	r2, [r4, #4]
 801746c:	2100      	movs	r1, #0
 801746e:	4630      	mov	r0, r6
 8017470:	f7eb f8d6 	bl	8002620 <memchr>
 8017474:	b108      	cbz	r0, 801747a <_printf_i+0x1e6>
 8017476:	1b80      	subs	r0, r0, r6
 8017478:	6060      	str	r0, [r4, #4]
 801747a:	6863      	ldr	r3, [r4, #4]
 801747c:	6123      	str	r3, [r4, #16]
 801747e:	2300      	movs	r3, #0
 8017480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017484:	e7aa      	b.n	80173dc <_printf_i+0x148>
 8017486:	6923      	ldr	r3, [r4, #16]
 8017488:	4632      	mov	r2, r6
 801748a:	4649      	mov	r1, r9
 801748c:	4640      	mov	r0, r8
 801748e:	47d0      	blx	sl
 8017490:	3001      	adds	r0, #1
 8017492:	d0ad      	beq.n	80173f0 <_printf_i+0x15c>
 8017494:	6823      	ldr	r3, [r4, #0]
 8017496:	079b      	lsls	r3, r3, #30
 8017498:	d413      	bmi.n	80174c2 <_printf_i+0x22e>
 801749a:	68e0      	ldr	r0, [r4, #12]
 801749c:	9b03      	ldr	r3, [sp, #12]
 801749e:	4298      	cmp	r0, r3
 80174a0:	bfb8      	it	lt
 80174a2:	4618      	movlt	r0, r3
 80174a4:	e7a6      	b.n	80173f4 <_printf_i+0x160>
 80174a6:	2301      	movs	r3, #1
 80174a8:	4632      	mov	r2, r6
 80174aa:	4649      	mov	r1, r9
 80174ac:	4640      	mov	r0, r8
 80174ae:	47d0      	blx	sl
 80174b0:	3001      	adds	r0, #1
 80174b2:	d09d      	beq.n	80173f0 <_printf_i+0x15c>
 80174b4:	3501      	adds	r5, #1
 80174b6:	68e3      	ldr	r3, [r4, #12]
 80174b8:	9903      	ldr	r1, [sp, #12]
 80174ba:	1a5b      	subs	r3, r3, r1
 80174bc:	42ab      	cmp	r3, r5
 80174be:	dcf2      	bgt.n	80174a6 <_printf_i+0x212>
 80174c0:	e7eb      	b.n	801749a <_printf_i+0x206>
 80174c2:	2500      	movs	r5, #0
 80174c4:	f104 0619 	add.w	r6, r4, #25
 80174c8:	e7f5      	b.n	80174b6 <_printf_i+0x222>
 80174ca:	bf00      	nop
 80174cc:	0801c2ca 	.word	0x0801c2ca
 80174d0:	0801c2db 	.word	0x0801c2db

080174d4 <_scanf_float>:
 80174d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174d8:	b087      	sub	sp, #28
 80174da:	4617      	mov	r7, r2
 80174dc:	9303      	str	r3, [sp, #12]
 80174de:	688b      	ldr	r3, [r1, #8]
 80174e0:	1e5a      	subs	r2, r3, #1
 80174e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80174e6:	bf81      	itttt	hi
 80174e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80174ec:	eb03 0b05 	addhi.w	fp, r3, r5
 80174f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80174f4:	608b      	strhi	r3, [r1, #8]
 80174f6:	680b      	ldr	r3, [r1, #0]
 80174f8:	460a      	mov	r2, r1
 80174fa:	f04f 0500 	mov.w	r5, #0
 80174fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8017502:	f842 3b1c 	str.w	r3, [r2], #28
 8017506:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801750a:	4680      	mov	r8, r0
 801750c:	460c      	mov	r4, r1
 801750e:	bf98      	it	ls
 8017510:	f04f 0b00 	movls.w	fp, #0
 8017514:	9201      	str	r2, [sp, #4]
 8017516:	4616      	mov	r6, r2
 8017518:	46aa      	mov	sl, r5
 801751a:	46a9      	mov	r9, r5
 801751c:	9502      	str	r5, [sp, #8]
 801751e:	68a2      	ldr	r2, [r4, #8]
 8017520:	b152      	cbz	r2, 8017538 <_scanf_float+0x64>
 8017522:	683b      	ldr	r3, [r7, #0]
 8017524:	781b      	ldrb	r3, [r3, #0]
 8017526:	2b4e      	cmp	r3, #78	@ 0x4e
 8017528:	d864      	bhi.n	80175f4 <_scanf_float+0x120>
 801752a:	2b40      	cmp	r3, #64	@ 0x40
 801752c:	d83c      	bhi.n	80175a8 <_scanf_float+0xd4>
 801752e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8017532:	b2c8      	uxtb	r0, r1
 8017534:	280e      	cmp	r0, #14
 8017536:	d93a      	bls.n	80175ae <_scanf_float+0xda>
 8017538:	f1b9 0f00 	cmp.w	r9, #0
 801753c:	d003      	beq.n	8017546 <_scanf_float+0x72>
 801753e:	6823      	ldr	r3, [r4, #0]
 8017540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017544:	6023      	str	r3, [r4, #0]
 8017546:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801754a:	f1ba 0f01 	cmp.w	sl, #1
 801754e:	f200 8117 	bhi.w	8017780 <_scanf_float+0x2ac>
 8017552:	9b01      	ldr	r3, [sp, #4]
 8017554:	429e      	cmp	r6, r3
 8017556:	f200 8108 	bhi.w	801776a <_scanf_float+0x296>
 801755a:	2001      	movs	r0, #1
 801755c:	b007      	add	sp, #28
 801755e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017562:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8017566:	2a0d      	cmp	r2, #13
 8017568:	d8e6      	bhi.n	8017538 <_scanf_float+0x64>
 801756a:	a101      	add	r1, pc, #4	@ (adr r1, 8017570 <_scanf_float+0x9c>)
 801756c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017570:	080176b7 	.word	0x080176b7
 8017574:	08017539 	.word	0x08017539
 8017578:	08017539 	.word	0x08017539
 801757c:	08017539 	.word	0x08017539
 8017580:	08017717 	.word	0x08017717
 8017584:	080176ef 	.word	0x080176ef
 8017588:	08017539 	.word	0x08017539
 801758c:	08017539 	.word	0x08017539
 8017590:	080176c5 	.word	0x080176c5
 8017594:	08017539 	.word	0x08017539
 8017598:	08017539 	.word	0x08017539
 801759c:	08017539 	.word	0x08017539
 80175a0:	08017539 	.word	0x08017539
 80175a4:	0801767d 	.word	0x0801767d
 80175a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80175ac:	e7db      	b.n	8017566 <_scanf_float+0x92>
 80175ae:	290e      	cmp	r1, #14
 80175b0:	d8c2      	bhi.n	8017538 <_scanf_float+0x64>
 80175b2:	a001      	add	r0, pc, #4	@ (adr r0, 80175b8 <_scanf_float+0xe4>)
 80175b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80175b8:	0801766d 	.word	0x0801766d
 80175bc:	08017539 	.word	0x08017539
 80175c0:	0801766d 	.word	0x0801766d
 80175c4:	08017703 	.word	0x08017703
 80175c8:	08017539 	.word	0x08017539
 80175cc:	08017615 	.word	0x08017615
 80175d0:	08017653 	.word	0x08017653
 80175d4:	08017653 	.word	0x08017653
 80175d8:	08017653 	.word	0x08017653
 80175dc:	08017653 	.word	0x08017653
 80175e0:	08017653 	.word	0x08017653
 80175e4:	08017653 	.word	0x08017653
 80175e8:	08017653 	.word	0x08017653
 80175ec:	08017653 	.word	0x08017653
 80175f0:	08017653 	.word	0x08017653
 80175f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80175f6:	d809      	bhi.n	801760c <_scanf_float+0x138>
 80175f8:	2b60      	cmp	r3, #96	@ 0x60
 80175fa:	d8b2      	bhi.n	8017562 <_scanf_float+0x8e>
 80175fc:	2b54      	cmp	r3, #84	@ 0x54
 80175fe:	d07b      	beq.n	80176f8 <_scanf_float+0x224>
 8017600:	2b59      	cmp	r3, #89	@ 0x59
 8017602:	d199      	bne.n	8017538 <_scanf_float+0x64>
 8017604:	2d07      	cmp	r5, #7
 8017606:	d197      	bne.n	8017538 <_scanf_float+0x64>
 8017608:	2508      	movs	r5, #8
 801760a:	e02c      	b.n	8017666 <_scanf_float+0x192>
 801760c:	2b74      	cmp	r3, #116	@ 0x74
 801760e:	d073      	beq.n	80176f8 <_scanf_float+0x224>
 8017610:	2b79      	cmp	r3, #121	@ 0x79
 8017612:	e7f6      	b.n	8017602 <_scanf_float+0x12e>
 8017614:	6821      	ldr	r1, [r4, #0]
 8017616:	05c8      	lsls	r0, r1, #23
 8017618:	d51b      	bpl.n	8017652 <_scanf_float+0x17e>
 801761a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801761e:	6021      	str	r1, [r4, #0]
 8017620:	f109 0901 	add.w	r9, r9, #1
 8017624:	f1bb 0f00 	cmp.w	fp, #0
 8017628:	d003      	beq.n	8017632 <_scanf_float+0x15e>
 801762a:	3201      	adds	r2, #1
 801762c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8017630:	60a2      	str	r2, [r4, #8]
 8017632:	68a3      	ldr	r3, [r4, #8]
 8017634:	3b01      	subs	r3, #1
 8017636:	60a3      	str	r3, [r4, #8]
 8017638:	6923      	ldr	r3, [r4, #16]
 801763a:	3301      	adds	r3, #1
 801763c:	6123      	str	r3, [r4, #16]
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	3b01      	subs	r3, #1
 8017642:	2b00      	cmp	r3, #0
 8017644:	607b      	str	r3, [r7, #4]
 8017646:	f340 8087 	ble.w	8017758 <_scanf_float+0x284>
 801764a:	683b      	ldr	r3, [r7, #0]
 801764c:	3301      	adds	r3, #1
 801764e:	603b      	str	r3, [r7, #0]
 8017650:	e765      	b.n	801751e <_scanf_float+0x4a>
 8017652:	eb1a 0105 	adds.w	r1, sl, r5
 8017656:	f47f af6f 	bne.w	8017538 <_scanf_float+0x64>
 801765a:	6822      	ldr	r2, [r4, #0]
 801765c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8017660:	6022      	str	r2, [r4, #0]
 8017662:	460d      	mov	r5, r1
 8017664:	468a      	mov	sl, r1
 8017666:	f806 3b01 	strb.w	r3, [r6], #1
 801766a:	e7e2      	b.n	8017632 <_scanf_float+0x15e>
 801766c:	6822      	ldr	r2, [r4, #0]
 801766e:	0610      	lsls	r0, r2, #24
 8017670:	f57f af62 	bpl.w	8017538 <_scanf_float+0x64>
 8017674:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8017678:	6022      	str	r2, [r4, #0]
 801767a:	e7f4      	b.n	8017666 <_scanf_float+0x192>
 801767c:	f1ba 0f00 	cmp.w	sl, #0
 8017680:	d10e      	bne.n	80176a0 <_scanf_float+0x1cc>
 8017682:	f1b9 0f00 	cmp.w	r9, #0
 8017686:	d10e      	bne.n	80176a6 <_scanf_float+0x1d2>
 8017688:	6822      	ldr	r2, [r4, #0]
 801768a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801768e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8017692:	d108      	bne.n	80176a6 <_scanf_float+0x1d2>
 8017694:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8017698:	6022      	str	r2, [r4, #0]
 801769a:	f04f 0a01 	mov.w	sl, #1
 801769e:	e7e2      	b.n	8017666 <_scanf_float+0x192>
 80176a0:	f1ba 0f02 	cmp.w	sl, #2
 80176a4:	d055      	beq.n	8017752 <_scanf_float+0x27e>
 80176a6:	2d01      	cmp	r5, #1
 80176a8:	d002      	beq.n	80176b0 <_scanf_float+0x1dc>
 80176aa:	2d04      	cmp	r5, #4
 80176ac:	f47f af44 	bne.w	8017538 <_scanf_float+0x64>
 80176b0:	3501      	adds	r5, #1
 80176b2:	b2ed      	uxtb	r5, r5
 80176b4:	e7d7      	b.n	8017666 <_scanf_float+0x192>
 80176b6:	f1ba 0f01 	cmp.w	sl, #1
 80176ba:	f47f af3d 	bne.w	8017538 <_scanf_float+0x64>
 80176be:	f04f 0a02 	mov.w	sl, #2
 80176c2:	e7d0      	b.n	8017666 <_scanf_float+0x192>
 80176c4:	b97d      	cbnz	r5, 80176e6 <_scanf_float+0x212>
 80176c6:	f1b9 0f00 	cmp.w	r9, #0
 80176ca:	f47f af38 	bne.w	801753e <_scanf_float+0x6a>
 80176ce:	6822      	ldr	r2, [r4, #0]
 80176d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80176d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80176d8:	f040 8108 	bne.w	80178ec <_scanf_float+0x418>
 80176dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80176e0:	6022      	str	r2, [r4, #0]
 80176e2:	2501      	movs	r5, #1
 80176e4:	e7bf      	b.n	8017666 <_scanf_float+0x192>
 80176e6:	2d03      	cmp	r5, #3
 80176e8:	d0e2      	beq.n	80176b0 <_scanf_float+0x1dc>
 80176ea:	2d05      	cmp	r5, #5
 80176ec:	e7de      	b.n	80176ac <_scanf_float+0x1d8>
 80176ee:	2d02      	cmp	r5, #2
 80176f0:	f47f af22 	bne.w	8017538 <_scanf_float+0x64>
 80176f4:	2503      	movs	r5, #3
 80176f6:	e7b6      	b.n	8017666 <_scanf_float+0x192>
 80176f8:	2d06      	cmp	r5, #6
 80176fa:	f47f af1d 	bne.w	8017538 <_scanf_float+0x64>
 80176fe:	2507      	movs	r5, #7
 8017700:	e7b1      	b.n	8017666 <_scanf_float+0x192>
 8017702:	6822      	ldr	r2, [r4, #0]
 8017704:	0591      	lsls	r1, r2, #22
 8017706:	f57f af17 	bpl.w	8017538 <_scanf_float+0x64>
 801770a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801770e:	6022      	str	r2, [r4, #0]
 8017710:	f8cd 9008 	str.w	r9, [sp, #8]
 8017714:	e7a7      	b.n	8017666 <_scanf_float+0x192>
 8017716:	6822      	ldr	r2, [r4, #0]
 8017718:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801771c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017720:	d006      	beq.n	8017730 <_scanf_float+0x25c>
 8017722:	0550      	lsls	r0, r2, #21
 8017724:	f57f af08 	bpl.w	8017538 <_scanf_float+0x64>
 8017728:	f1b9 0f00 	cmp.w	r9, #0
 801772c:	f000 80de 	beq.w	80178ec <_scanf_float+0x418>
 8017730:	0591      	lsls	r1, r2, #22
 8017732:	bf58      	it	pl
 8017734:	9902      	ldrpl	r1, [sp, #8]
 8017736:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801773a:	bf58      	it	pl
 801773c:	eba9 0101 	subpl.w	r1, r9, r1
 8017740:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8017744:	bf58      	it	pl
 8017746:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801774a:	6022      	str	r2, [r4, #0]
 801774c:	f04f 0900 	mov.w	r9, #0
 8017750:	e789      	b.n	8017666 <_scanf_float+0x192>
 8017752:	f04f 0a03 	mov.w	sl, #3
 8017756:	e786      	b.n	8017666 <_scanf_float+0x192>
 8017758:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801775c:	4639      	mov	r1, r7
 801775e:	4640      	mov	r0, r8
 8017760:	4798      	blx	r3
 8017762:	2800      	cmp	r0, #0
 8017764:	f43f aedb 	beq.w	801751e <_scanf_float+0x4a>
 8017768:	e6e6      	b.n	8017538 <_scanf_float+0x64>
 801776a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801776e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017772:	463a      	mov	r2, r7
 8017774:	4640      	mov	r0, r8
 8017776:	4798      	blx	r3
 8017778:	6923      	ldr	r3, [r4, #16]
 801777a:	3b01      	subs	r3, #1
 801777c:	6123      	str	r3, [r4, #16]
 801777e:	e6e8      	b.n	8017552 <_scanf_float+0x7e>
 8017780:	1e6b      	subs	r3, r5, #1
 8017782:	2b06      	cmp	r3, #6
 8017784:	d824      	bhi.n	80177d0 <_scanf_float+0x2fc>
 8017786:	2d02      	cmp	r5, #2
 8017788:	d836      	bhi.n	80177f8 <_scanf_float+0x324>
 801778a:	9b01      	ldr	r3, [sp, #4]
 801778c:	429e      	cmp	r6, r3
 801778e:	f67f aee4 	bls.w	801755a <_scanf_float+0x86>
 8017792:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017796:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801779a:	463a      	mov	r2, r7
 801779c:	4640      	mov	r0, r8
 801779e:	4798      	blx	r3
 80177a0:	6923      	ldr	r3, [r4, #16]
 80177a2:	3b01      	subs	r3, #1
 80177a4:	6123      	str	r3, [r4, #16]
 80177a6:	e7f0      	b.n	801778a <_scanf_float+0x2b6>
 80177a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80177ac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80177b0:	463a      	mov	r2, r7
 80177b2:	4640      	mov	r0, r8
 80177b4:	4798      	blx	r3
 80177b6:	6923      	ldr	r3, [r4, #16]
 80177b8:	3b01      	subs	r3, #1
 80177ba:	6123      	str	r3, [r4, #16]
 80177bc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80177c0:	fa5f fa8a 	uxtb.w	sl, sl
 80177c4:	f1ba 0f02 	cmp.w	sl, #2
 80177c8:	d1ee      	bne.n	80177a8 <_scanf_float+0x2d4>
 80177ca:	3d03      	subs	r5, #3
 80177cc:	b2ed      	uxtb	r5, r5
 80177ce:	1b76      	subs	r6, r6, r5
 80177d0:	6823      	ldr	r3, [r4, #0]
 80177d2:	05da      	lsls	r2, r3, #23
 80177d4:	d530      	bpl.n	8017838 <_scanf_float+0x364>
 80177d6:	055b      	lsls	r3, r3, #21
 80177d8:	d511      	bpl.n	80177fe <_scanf_float+0x32a>
 80177da:	9b01      	ldr	r3, [sp, #4]
 80177dc:	429e      	cmp	r6, r3
 80177de:	f67f aebc 	bls.w	801755a <_scanf_float+0x86>
 80177e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80177e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80177ea:	463a      	mov	r2, r7
 80177ec:	4640      	mov	r0, r8
 80177ee:	4798      	blx	r3
 80177f0:	6923      	ldr	r3, [r4, #16]
 80177f2:	3b01      	subs	r3, #1
 80177f4:	6123      	str	r3, [r4, #16]
 80177f6:	e7f0      	b.n	80177da <_scanf_float+0x306>
 80177f8:	46aa      	mov	sl, r5
 80177fa:	46b3      	mov	fp, r6
 80177fc:	e7de      	b.n	80177bc <_scanf_float+0x2e8>
 80177fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017802:	6923      	ldr	r3, [r4, #16]
 8017804:	2965      	cmp	r1, #101	@ 0x65
 8017806:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801780a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 801780e:	6123      	str	r3, [r4, #16]
 8017810:	d00c      	beq.n	801782c <_scanf_float+0x358>
 8017812:	2945      	cmp	r1, #69	@ 0x45
 8017814:	d00a      	beq.n	801782c <_scanf_float+0x358>
 8017816:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801781a:	463a      	mov	r2, r7
 801781c:	4640      	mov	r0, r8
 801781e:	4798      	blx	r3
 8017820:	6923      	ldr	r3, [r4, #16]
 8017822:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017826:	3b01      	subs	r3, #1
 8017828:	1eb5      	subs	r5, r6, #2
 801782a:	6123      	str	r3, [r4, #16]
 801782c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017830:	463a      	mov	r2, r7
 8017832:	4640      	mov	r0, r8
 8017834:	4798      	blx	r3
 8017836:	462e      	mov	r6, r5
 8017838:	6822      	ldr	r2, [r4, #0]
 801783a:	f012 0210 	ands.w	r2, r2, #16
 801783e:	d001      	beq.n	8017844 <_scanf_float+0x370>
 8017840:	2000      	movs	r0, #0
 8017842:	e68b      	b.n	801755c <_scanf_float+0x88>
 8017844:	7032      	strb	r2, [r6, #0]
 8017846:	6823      	ldr	r3, [r4, #0]
 8017848:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801784c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017850:	d11c      	bne.n	801788c <_scanf_float+0x3b8>
 8017852:	9b02      	ldr	r3, [sp, #8]
 8017854:	454b      	cmp	r3, r9
 8017856:	eba3 0209 	sub.w	r2, r3, r9
 801785a:	d123      	bne.n	80178a4 <_scanf_float+0x3d0>
 801785c:	9901      	ldr	r1, [sp, #4]
 801785e:	2200      	movs	r2, #0
 8017860:	4640      	mov	r0, r8
 8017862:	f000 ff1d 	bl	80186a0 <_strtod_r>
 8017866:	9b03      	ldr	r3, [sp, #12]
 8017868:	6821      	ldr	r1, [r4, #0]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	f011 0f02 	tst.w	r1, #2
 8017870:	ec57 6b10 	vmov	r6, r7, d0
 8017874:	f103 0204 	add.w	r2, r3, #4
 8017878:	d01f      	beq.n	80178ba <_scanf_float+0x3e6>
 801787a:	9903      	ldr	r1, [sp, #12]
 801787c:	600a      	str	r2, [r1, #0]
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	e9c3 6700 	strd	r6, r7, [r3]
 8017884:	68e3      	ldr	r3, [r4, #12]
 8017886:	3301      	adds	r3, #1
 8017888:	60e3      	str	r3, [r4, #12]
 801788a:	e7d9      	b.n	8017840 <_scanf_float+0x36c>
 801788c:	9b04      	ldr	r3, [sp, #16]
 801788e:	2b00      	cmp	r3, #0
 8017890:	d0e4      	beq.n	801785c <_scanf_float+0x388>
 8017892:	9905      	ldr	r1, [sp, #20]
 8017894:	230a      	movs	r3, #10
 8017896:	3101      	adds	r1, #1
 8017898:	4640      	mov	r0, r8
 801789a:	f000 ff81 	bl	80187a0 <_strtol_r>
 801789e:	9b04      	ldr	r3, [sp, #16]
 80178a0:	9e05      	ldr	r6, [sp, #20]
 80178a2:	1ac2      	subs	r2, r0, r3
 80178a4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80178a8:	429e      	cmp	r6, r3
 80178aa:	bf28      	it	cs
 80178ac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80178b0:	4910      	ldr	r1, [pc, #64]	@ (80178f4 <_scanf_float+0x420>)
 80178b2:	4630      	mov	r0, r6
 80178b4:	f000 f82e 	bl	8017914 <siprintf>
 80178b8:	e7d0      	b.n	801785c <_scanf_float+0x388>
 80178ba:	f011 0f04 	tst.w	r1, #4
 80178be:	9903      	ldr	r1, [sp, #12]
 80178c0:	600a      	str	r2, [r1, #0]
 80178c2:	d1dc      	bne.n	801787e <_scanf_float+0x3aa>
 80178c4:	681d      	ldr	r5, [r3, #0]
 80178c6:	4632      	mov	r2, r6
 80178c8:	463b      	mov	r3, r7
 80178ca:	4630      	mov	r0, r6
 80178cc:	4639      	mov	r1, r7
 80178ce:	f7eb fb5f 	bl	8002f90 <__aeabi_dcmpun>
 80178d2:	b128      	cbz	r0, 80178e0 <_scanf_float+0x40c>
 80178d4:	4808      	ldr	r0, [pc, #32]	@ (80178f8 <_scanf_float+0x424>)
 80178d6:	f001 f927 	bl	8018b28 <nanf>
 80178da:	ed85 0a00 	vstr	s0, [r5]
 80178de:	e7d1      	b.n	8017884 <_scanf_float+0x3b0>
 80178e0:	4630      	mov	r0, r6
 80178e2:	4639      	mov	r1, r7
 80178e4:	f7eb fbb2 	bl	800304c <__aeabi_d2f>
 80178e8:	6028      	str	r0, [r5, #0]
 80178ea:	e7cb      	b.n	8017884 <_scanf_float+0x3b0>
 80178ec:	f04f 0900 	mov.w	r9, #0
 80178f0:	e629      	b.n	8017546 <_scanf_float+0x72>
 80178f2:	bf00      	nop
 80178f4:	0801c2ec 	.word	0x0801c2ec
 80178f8:	0801c4fd 	.word	0x0801c4fd

080178fc <__malloc_lock>:
 80178fc:	4801      	ldr	r0, [pc, #4]	@ (8017904 <__malloc_lock+0x8>)
 80178fe:	f001 b8f4 	b.w	8018aea <__retarget_lock_acquire_recursive>
 8017902:	bf00      	nop
 8017904:	20007804 	.word	0x20007804

08017908 <__malloc_unlock>:
 8017908:	4801      	ldr	r0, [pc, #4]	@ (8017910 <__malloc_unlock+0x8>)
 801790a:	f001 b8ef 	b.w	8018aec <__retarget_lock_release_recursive>
 801790e:	bf00      	nop
 8017910:	20007804 	.word	0x20007804

08017914 <siprintf>:
 8017914:	b40e      	push	{r1, r2, r3}
 8017916:	b500      	push	{lr}
 8017918:	b09c      	sub	sp, #112	@ 0x70
 801791a:	ab1d      	add	r3, sp, #116	@ 0x74
 801791c:	9002      	str	r0, [sp, #8]
 801791e:	9006      	str	r0, [sp, #24]
 8017920:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017924:	4809      	ldr	r0, [pc, #36]	@ (801794c <siprintf+0x38>)
 8017926:	9107      	str	r1, [sp, #28]
 8017928:	9104      	str	r1, [sp, #16]
 801792a:	4909      	ldr	r1, [pc, #36]	@ (8017950 <siprintf+0x3c>)
 801792c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017930:	9105      	str	r1, [sp, #20]
 8017932:	6800      	ldr	r0, [r0, #0]
 8017934:	9301      	str	r3, [sp, #4]
 8017936:	a902      	add	r1, sp, #8
 8017938:	f002 fb44 	bl	8019fc4 <_svfiprintf_r>
 801793c:	9b02      	ldr	r3, [sp, #8]
 801793e:	2200      	movs	r2, #0
 8017940:	701a      	strb	r2, [r3, #0]
 8017942:	b01c      	add	sp, #112	@ 0x70
 8017944:	f85d eb04 	ldr.w	lr, [sp], #4
 8017948:	b003      	add	sp, #12
 801794a:	4770      	bx	lr
 801794c:	20000494 	.word	0x20000494
 8017950:	ffff0208 	.word	0xffff0208

08017954 <std>:
 8017954:	2300      	movs	r3, #0
 8017956:	b510      	push	{r4, lr}
 8017958:	4604      	mov	r4, r0
 801795a:	e9c0 3300 	strd	r3, r3, [r0]
 801795e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017962:	6083      	str	r3, [r0, #8]
 8017964:	8181      	strh	r1, [r0, #12]
 8017966:	6643      	str	r3, [r0, #100]	@ 0x64
 8017968:	81c2      	strh	r2, [r0, #14]
 801796a:	6183      	str	r3, [r0, #24]
 801796c:	4619      	mov	r1, r3
 801796e:	2208      	movs	r2, #8
 8017970:	305c      	adds	r0, #92	@ 0x5c
 8017972:	f001 f81d 	bl	80189b0 <memset>
 8017976:	4b0d      	ldr	r3, [pc, #52]	@ (80179ac <std+0x58>)
 8017978:	6263      	str	r3, [r4, #36]	@ 0x24
 801797a:	4b0d      	ldr	r3, [pc, #52]	@ (80179b0 <std+0x5c>)
 801797c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801797e:	4b0d      	ldr	r3, [pc, #52]	@ (80179b4 <std+0x60>)
 8017980:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017982:	4b0d      	ldr	r3, [pc, #52]	@ (80179b8 <std+0x64>)
 8017984:	6323      	str	r3, [r4, #48]	@ 0x30
 8017986:	4b0d      	ldr	r3, [pc, #52]	@ (80179bc <std+0x68>)
 8017988:	6224      	str	r4, [r4, #32]
 801798a:	429c      	cmp	r4, r3
 801798c:	d006      	beq.n	801799c <std+0x48>
 801798e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017992:	4294      	cmp	r4, r2
 8017994:	d002      	beq.n	801799c <std+0x48>
 8017996:	33d0      	adds	r3, #208	@ 0xd0
 8017998:	429c      	cmp	r4, r3
 801799a:	d105      	bne.n	80179a8 <std+0x54>
 801799c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80179a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179a4:	f001 b8a0 	b.w	8018ae8 <__retarget_lock_init_recursive>
 80179a8:	bd10      	pop	{r4, pc}
 80179aa:	bf00      	nop
 80179ac:	0801af21 	.word	0x0801af21
 80179b0:	0801af43 	.word	0x0801af43
 80179b4:	0801af7b 	.word	0x0801af7b
 80179b8:	0801af9f 	.word	0x0801af9f
 80179bc:	200076c4 	.word	0x200076c4

080179c0 <stdio_exit_handler>:
 80179c0:	4a02      	ldr	r2, [pc, #8]	@ (80179cc <stdio_exit_handler+0xc>)
 80179c2:	4903      	ldr	r1, [pc, #12]	@ (80179d0 <stdio_exit_handler+0x10>)
 80179c4:	4803      	ldr	r0, [pc, #12]	@ (80179d4 <stdio_exit_handler+0x14>)
 80179c6:	f000 bef7 	b.w	80187b8 <_fwalk_sglue>
 80179ca:	bf00      	nop
 80179cc:	2000031c 	.word	0x2000031c
 80179d0:	0801a56d 	.word	0x0801a56d
 80179d4:	20000498 	.word	0x20000498

080179d8 <cleanup_stdio>:
 80179d8:	6841      	ldr	r1, [r0, #4]
 80179da:	4b0c      	ldr	r3, [pc, #48]	@ (8017a0c <cleanup_stdio+0x34>)
 80179dc:	4299      	cmp	r1, r3
 80179de:	b510      	push	{r4, lr}
 80179e0:	4604      	mov	r4, r0
 80179e2:	d001      	beq.n	80179e8 <cleanup_stdio+0x10>
 80179e4:	f002 fdc2 	bl	801a56c <_fflush_r>
 80179e8:	68a1      	ldr	r1, [r4, #8]
 80179ea:	4b09      	ldr	r3, [pc, #36]	@ (8017a10 <cleanup_stdio+0x38>)
 80179ec:	4299      	cmp	r1, r3
 80179ee:	d002      	beq.n	80179f6 <cleanup_stdio+0x1e>
 80179f0:	4620      	mov	r0, r4
 80179f2:	f002 fdbb 	bl	801a56c <_fflush_r>
 80179f6:	68e1      	ldr	r1, [r4, #12]
 80179f8:	4b06      	ldr	r3, [pc, #24]	@ (8017a14 <cleanup_stdio+0x3c>)
 80179fa:	4299      	cmp	r1, r3
 80179fc:	d004      	beq.n	8017a08 <cleanup_stdio+0x30>
 80179fe:	4620      	mov	r0, r4
 8017a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a04:	f002 bdb2 	b.w	801a56c <_fflush_r>
 8017a08:	bd10      	pop	{r4, pc}
 8017a0a:	bf00      	nop
 8017a0c:	200076c4 	.word	0x200076c4
 8017a10:	2000772c 	.word	0x2000772c
 8017a14:	20007794 	.word	0x20007794

08017a18 <global_stdio_init.part.0>:
 8017a18:	b510      	push	{r4, lr}
 8017a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8017a48 <global_stdio_init.part.0+0x30>)
 8017a1c:	4c0b      	ldr	r4, [pc, #44]	@ (8017a4c <global_stdio_init.part.0+0x34>)
 8017a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8017a50 <global_stdio_init.part.0+0x38>)
 8017a20:	601a      	str	r2, [r3, #0]
 8017a22:	4620      	mov	r0, r4
 8017a24:	2200      	movs	r2, #0
 8017a26:	2104      	movs	r1, #4
 8017a28:	f7ff ff94 	bl	8017954 <std>
 8017a2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017a30:	2201      	movs	r2, #1
 8017a32:	2109      	movs	r1, #9
 8017a34:	f7ff ff8e 	bl	8017954 <std>
 8017a38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017a3c:	2202      	movs	r2, #2
 8017a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a42:	2112      	movs	r1, #18
 8017a44:	f7ff bf86 	b.w	8017954 <std>
 8017a48:	200077fc 	.word	0x200077fc
 8017a4c:	200076c4 	.word	0x200076c4
 8017a50:	080179c1 	.word	0x080179c1

08017a54 <__sfp_lock_acquire>:
 8017a54:	4801      	ldr	r0, [pc, #4]	@ (8017a5c <__sfp_lock_acquire+0x8>)
 8017a56:	f001 b848 	b.w	8018aea <__retarget_lock_acquire_recursive>
 8017a5a:	bf00      	nop
 8017a5c:	20007805 	.word	0x20007805

08017a60 <__sfp_lock_release>:
 8017a60:	4801      	ldr	r0, [pc, #4]	@ (8017a68 <__sfp_lock_release+0x8>)
 8017a62:	f001 b843 	b.w	8018aec <__retarget_lock_release_recursive>
 8017a66:	bf00      	nop
 8017a68:	20007805 	.word	0x20007805

08017a6c <__sinit>:
 8017a6c:	b510      	push	{r4, lr}
 8017a6e:	4604      	mov	r4, r0
 8017a70:	f7ff fff0 	bl	8017a54 <__sfp_lock_acquire>
 8017a74:	6a23      	ldr	r3, [r4, #32]
 8017a76:	b11b      	cbz	r3, 8017a80 <__sinit+0x14>
 8017a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a7c:	f7ff bff0 	b.w	8017a60 <__sfp_lock_release>
 8017a80:	4b04      	ldr	r3, [pc, #16]	@ (8017a94 <__sinit+0x28>)
 8017a82:	6223      	str	r3, [r4, #32]
 8017a84:	4b04      	ldr	r3, [pc, #16]	@ (8017a98 <__sinit+0x2c>)
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d1f5      	bne.n	8017a78 <__sinit+0xc>
 8017a8c:	f7ff ffc4 	bl	8017a18 <global_stdio_init.part.0>
 8017a90:	e7f2      	b.n	8017a78 <__sinit+0xc>
 8017a92:	bf00      	nop
 8017a94:	080179d9 	.word	0x080179d9
 8017a98:	200077fc 	.word	0x200077fc

08017a9c <sulp>:
 8017a9c:	b570      	push	{r4, r5, r6, lr}
 8017a9e:	4604      	mov	r4, r0
 8017aa0:	460d      	mov	r5, r1
 8017aa2:	ec45 4b10 	vmov	d0, r4, r5
 8017aa6:	4616      	mov	r6, r2
 8017aa8:	f003 f8fc 	bl	801aca4 <__ulp>
 8017aac:	ec51 0b10 	vmov	r0, r1, d0
 8017ab0:	b17e      	cbz	r6, 8017ad2 <sulp+0x36>
 8017ab2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017ab6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	dd09      	ble.n	8017ad2 <sulp+0x36>
 8017abe:	051b      	lsls	r3, r3, #20
 8017ac0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8017ac4:	2400      	movs	r4, #0
 8017ac6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8017aca:	4622      	mov	r2, r4
 8017acc:	462b      	mov	r3, r5
 8017ace:	f7ea ffc5 	bl	8002a5c <__aeabi_dmul>
 8017ad2:	ec41 0b10 	vmov	d0, r0, r1
 8017ad6:	bd70      	pop	{r4, r5, r6, pc}

08017ad8 <_strtod_l>:
 8017ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017adc:	b09f      	sub	sp, #124	@ 0x7c
 8017ade:	460c      	mov	r4, r1
 8017ae0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	921a      	str	r2, [sp, #104]	@ 0x68
 8017ae6:	9005      	str	r0, [sp, #20]
 8017ae8:	f04f 0a00 	mov.w	sl, #0
 8017aec:	f04f 0b00 	mov.w	fp, #0
 8017af0:	460a      	mov	r2, r1
 8017af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8017af4:	7811      	ldrb	r1, [r2, #0]
 8017af6:	292b      	cmp	r1, #43	@ 0x2b
 8017af8:	d04a      	beq.n	8017b90 <_strtod_l+0xb8>
 8017afa:	d838      	bhi.n	8017b6e <_strtod_l+0x96>
 8017afc:	290d      	cmp	r1, #13
 8017afe:	d832      	bhi.n	8017b66 <_strtod_l+0x8e>
 8017b00:	2908      	cmp	r1, #8
 8017b02:	d832      	bhi.n	8017b6a <_strtod_l+0x92>
 8017b04:	2900      	cmp	r1, #0
 8017b06:	d03b      	beq.n	8017b80 <_strtod_l+0xa8>
 8017b08:	2200      	movs	r2, #0
 8017b0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017b0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8017b0e:	782a      	ldrb	r2, [r5, #0]
 8017b10:	2a30      	cmp	r2, #48	@ 0x30
 8017b12:	f040 80b3 	bne.w	8017c7c <_strtod_l+0x1a4>
 8017b16:	786a      	ldrb	r2, [r5, #1]
 8017b18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017b1c:	2a58      	cmp	r2, #88	@ 0x58
 8017b1e:	d16e      	bne.n	8017bfe <_strtod_l+0x126>
 8017b20:	9302      	str	r3, [sp, #8]
 8017b22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017b24:	9301      	str	r3, [sp, #4]
 8017b26:	ab1a      	add	r3, sp, #104	@ 0x68
 8017b28:	9300      	str	r3, [sp, #0]
 8017b2a:	4a8e      	ldr	r2, [pc, #568]	@ (8017d64 <_strtod_l+0x28c>)
 8017b2c:	9805      	ldr	r0, [sp, #20]
 8017b2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8017b30:	a919      	add	r1, sp, #100	@ 0x64
 8017b32:	f001 ff1b 	bl	801996c <__gethex>
 8017b36:	f010 060f 	ands.w	r6, r0, #15
 8017b3a:	4604      	mov	r4, r0
 8017b3c:	d005      	beq.n	8017b4a <_strtod_l+0x72>
 8017b3e:	2e06      	cmp	r6, #6
 8017b40:	d128      	bne.n	8017b94 <_strtod_l+0xbc>
 8017b42:	3501      	adds	r5, #1
 8017b44:	2300      	movs	r3, #0
 8017b46:	9519      	str	r5, [sp, #100]	@ 0x64
 8017b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017b4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	f040 858e 	bne.w	801866e <_strtod_l+0xb96>
 8017b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017b54:	b1cb      	cbz	r3, 8017b8a <_strtod_l+0xb2>
 8017b56:	4652      	mov	r2, sl
 8017b58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8017b5c:	ec43 2b10 	vmov	d0, r2, r3
 8017b60:	b01f      	add	sp, #124	@ 0x7c
 8017b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b66:	2920      	cmp	r1, #32
 8017b68:	d1ce      	bne.n	8017b08 <_strtod_l+0x30>
 8017b6a:	3201      	adds	r2, #1
 8017b6c:	e7c1      	b.n	8017af2 <_strtod_l+0x1a>
 8017b6e:	292d      	cmp	r1, #45	@ 0x2d
 8017b70:	d1ca      	bne.n	8017b08 <_strtod_l+0x30>
 8017b72:	2101      	movs	r1, #1
 8017b74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017b76:	1c51      	adds	r1, r2, #1
 8017b78:	9119      	str	r1, [sp, #100]	@ 0x64
 8017b7a:	7852      	ldrb	r2, [r2, #1]
 8017b7c:	2a00      	cmp	r2, #0
 8017b7e:	d1c5      	bne.n	8017b0c <_strtod_l+0x34>
 8017b80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017b82:	9419      	str	r4, [sp, #100]	@ 0x64
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	f040 8570 	bne.w	801866a <_strtod_l+0xb92>
 8017b8a:	4652      	mov	r2, sl
 8017b8c:	465b      	mov	r3, fp
 8017b8e:	e7e5      	b.n	8017b5c <_strtod_l+0x84>
 8017b90:	2100      	movs	r1, #0
 8017b92:	e7ef      	b.n	8017b74 <_strtod_l+0x9c>
 8017b94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017b96:	b13a      	cbz	r2, 8017ba8 <_strtod_l+0xd0>
 8017b98:	2135      	movs	r1, #53	@ 0x35
 8017b9a:	a81c      	add	r0, sp, #112	@ 0x70
 8017b9c:	f003 f97c 	bl	801ae98 <__copybits>
 8017ba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017ba2:	9805      	ldr	r0, [sp, #20]
 8017ba4:	f002 fd4a 	bl	801a63c <_Bfree>
 8017ba8:	3e01      	subs	r6, #1
 8017baa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8017bac:	2e04      	cmp	r6, #4
 8017bae:	d806      	bhi.n	8017bbe <_strtod_l+0xe6>
 8017bb0:	e8df f006 	tbb	[pc, r6]
 8017bb4:	201d0314 	.word	0x201d0314
 8017bb8:	14          	.byte	0x14
 8017bb9:	00          	.byte	0x00
 8017bba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8017bbe:	05e1      	lsls	r1, r4, #23
 8017bc0:	bf48      	it	mi
 8017bc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8017bc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017bca:	0d1b      	lsrs	r3, r3, #20
 8017bcc:	051b      	lsls	r3, r3, #20
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d1bb      	bne.n	8017b4a <_strtod_l+0x72>
 8017bd2:	f000 ff5f 	bl	8018a94 <__errno>
 8017bd6:	2322      	movs	r3, #34	@ 0x22
 8017bd8:	6003      	str	r3, [r0, #0]
 8017bda:	e7b6      	b.n	8017b4a <_strtod_l+0x72>
 8017bdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8017be0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8017be4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8017be8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017bec:	e7e7      	b.n	8017bbe <_strtod_l+0xe6>
 8017bee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8017d6c <_strtod_l+0x294>
 8017bf2:	e7e4      	b.n	8017bbe <_strtod_l+0xe6>
 8017bf4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8017bf8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8017bfc:	e7df      	b.n	8017bbe <_strtod_l+0xe6>
 8017bfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017c00:	1c5a      	adds	r2, r3, #1
 8017c02:	9219      	str	r2, [sp, #100]	@ 0x64
 8017c04:	785b      	ldrb	r3, [r3, #1]
 8017c06:	2b30      	cmp	r3, #48	@ 0x30
 8017c08:	d0f9      	beq.n	8017bfe <_strtod_l+0x126>
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d09d      	beq.n	8017b4a <_strtod_l+0x72>
 8017c0e:	2301      	movs	r3, #1
 8017c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017c14:	930c      	str	r3, [sp, #48]	@ 0x30
 8017c16:	2300      	movs	r3, #0
 8017c18:	9308      	str	r3, [sp, #32]
 8017c1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8017c1c:	461f      	mov	r7, r3
 8017c1e:	220a      	movs	r2, #10
 8017c20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8017c22:	7805      	ldrb	r5, [r0, #0]
 8017c24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8017c28:	b2d9      	uxtb	r1, r3
 8017c2a:	2909      	cmp	r1, #9
 8017c2c:	d928      	bls.n	8017c80 <_strtod_l+0x1a8>
 8017c2e:	494e      	ldr	r1, [pc, #312]	@ (8017d68 <_strtod_l+0x290>)
 8017c30:	2201      	movs	r2, #1
 8017c32:	f000 fe4f 	bl	80188d4 <strncmp>
 8017c36:	2800      	cmp	r0, #0
 8017c38:	d032      	beq.n	8017ca0 <_strtod_l+0x1c8>
 8017c3a:	2000      	movs	r0, #0
 8017c3c:	462a      	mov	r2, r5
 8017c3e:	4681      	mov	r9, r0
 8017c40:	463d      	mov	r5, r7
 8017c42:	4603      	mov	r3, r0
 8017c44:	2a65      	cmp	r2, #101	@ 0x65
 8017c46:	d001      	beq.n	8017c4c <_strtod_l+0x174>
 8017c48:	2a45      	cmp	r2, #69	@ 0x45
 8017c4a:	d114      	bne.n	8017c76 <_strtod_l+0x19e>
 8017c4c:	b91d      	cbnz	r5, 8017c56 <_strtod_l+0x17e>
 8017c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017c50:	4302      	orrs	r2, r0
 8017c52:	d095      	beq.n	8017b80 <_strtod_l+0xa8>
 8017c54:	2500      	movs	r5, #0
 8017c56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8017c58:	1c62      	adds	r2, r4, #1
 8017c5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8017c5c:	7862      	ldrb	r2, [r4, #1]
 8017c5e:	2a2b      	cmp	r2, #43	@ 0x2b
 8017c60:	d077      	beq.n	8017d52 <_strtod_l+0x27a>
 8017c62:	2a2d      	cmp	r2, #45	@ 0x2d
 8017c64:	d07b      	beq.n	8017d5e <_strtod_l+0x286>
 8017c66:	f04f 0c00 	mov.w	ip, #0
 8017c6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8017c6e:	2909      	cmp	r1, #9
 8017c70:	f240 8082 	bls.w	8017d78 <_strtod_l+0x2a0>
 8017c74:	9419      	str	r4, [sp, #100]	@ 0x64
 8017c76:	f04f 0800 	mov.w	r8, #0
 8017c7a:	e0a2      	b.n	8017dc2 <_strtod_l+0x2ea>
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	e7c7      	b.n	8017c10 <_strtod_l+0x138>
 8017c80:	2f08      	cmp	r7, #8
 8017c82:	bfd5      	itete	le
 8017c84:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8017c86:	9908      	ldrgt	r1, [sp, #32]
 8017c88:	fb02 3301 	mlale	r3, r2, r1, r3
 8017c8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8017c90:	f100 0001 	add.w	r0, r0, #1
 8017c94:	bfd4      	ite	le
 8017c96:	930a      	strle	r3, [sp, #40]	@ 0x28
 8017c98:	9308      	strgt	r3, [sp, #32]
 8017c9a:	3701      	adds	r7, #1
 8017c9c:	9019      	str	r0, [sp, #100]	@ 0x64
 8017c9e:	e7bf      	b.n	8017c20 <_strtod_l+0x148>
 8017ca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017ca2:	1c5a      	adds	r2, r3, #1
 8017ca4:	9219      	str	r2, [sp, #100]	@ 0x64
 8017ca6:	785a      	ldrb	r2, [r3, #1]
 8017ca8:	b37f      	cbz	r7, 8017d0a <_strtod_l+0x232>
 8017caa:	4681      	mov	r9, r0
 8017cac:	463d      	mov	r5, r7
 8017cae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8017cb2:	2b09      	cmp	r3, #9
 8017cb4:	d912      	bls.n	8017cdc <_strtod_l+0x204>
 8017cb6:	2301      	movs	r3, #1
 8017cb8:	e7c4      	b.n	8017c44 <_strtod_l+0x16c>
 8017cba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017cbc:	1c5a      	adds	r2, r3, #1
 8017cbe:	9219      	str	r2, [sp, #100]	@ 0x64
 8017cc0:	785a      	ldrb	r2, [r3, #1]
 8017cc2:	3001      	adds	r0, #1
 8017cc4:	2a30      	cmp	r2, #48	@ 0x30
 8017cc6:	d0f8      	beq.n	8017cba <_strtod_l+0x1e2>
 8017cc8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8017ccc:	2b08      	cmp	r3, #8
 8017cce:	f200 84d3 	bhi.w	8018678 <_strtod_l+0xba0>
 8017cd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017cd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8017cd6:	4681      	mov	r9, r0
 8017cd8:	2000      	movs	r0, #0
 8017cda:	4605      	mov	r5, r0
 8017cdc:	3a30      	subs	r2, #48	@ 0x30
 8017cde:	f100 0301 	add.w	r3, r0, #1
 8017ce2:	d02a      	beq.n	8017d3a <_strtod_l+0x262>
 8017ce4:	4499      	add	r9, r3
 8017ce6:	eb00 0c05 	add.w	ip, r0, r5
 8017cea:	462b      	mov	r3, r5
 8017cec:	210a      	movs	r1, #10
 8017cee:	4563      	cmp	r3, ip
 8017cf0:	d10d      	bne.n	8017d0e <_strtod_l+0x236>
 8017cf2:	1c69      	adds	r1, r5, #1
 8017cf4:	4401      	add	r1, r0
 8017cf6:	4428      	add	r0, r5
 8017cf8:	2808      	cmp	r0, #8
 8017cfa:	dc16      	bgt.n	8017d2a <_strtod_l+0x252>
 8017cfc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017cfe:	230a      	movs	r3, #10
 8017d00:	fb03 2300 	mla	r3, r3, r0, r2
 8017d04:	930a      	str	r3, [sp, #40]	@ 0x28
 8017d06:	2300      	movs	r3, #0
 8017d08:	e018      	b.n	8017d3c <_strtod_l+0x264>
 8017d0a:	4638      	mov	r0, r7
 8017d0c:	e7da      	b.n	8017cc4 <_strtod_l+0x1ec>
 8017d0e:	2b08      	cmp	r3, #8
 8017d10:	f103 0301 	add.w	r3, r3, #1
 8017d14:	dc03      	bgt.n	8017d1e <_strtod_l+0x246>
 8017d16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017d18:	434e      	muls	r6, r1
 8017d1a:	960a      	str	r6, [sp, #40]	@ 0x28
 8017d1c:	e7e7      	b.n	8017cee <_strtod_l+0x216>
 8017d1e:	2b10      	cmp	r3, #16
 8017d20:	bfde      	ittt	le
 8017d22:	9e08      	ldrle	r6, [sp, #32]
 8017d24:	434e      	mulle	r6, r1
 8017d26:	9608      	strle	r6, [sp, #32]
 8017d28:	e7e1      	b.n	8017cee <_strtod_l+0x216>
 8017d2a:	280f      	cmp	r0, #15
 8017d2c:	dceb      	bgt.n	8017d06 <_strtod_l+0x22e>
 8017d2e:	9808      	ldr	r0, [sp, #32]
 8017d30:	230a      	movs	r3, #10
 8017d32:	fb03 2300 	mla	r3, r3, r0, r2
 8017d36:	9308      	str	r3, [sp, #32]
 8017d38:	e7e5      	b.n	8017d06 <_strtod_l+0x22e>
 8017d3a:	4629      	mov	r1, r5
 8017d3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017d3e:	1c50      	adds	r0, r2, #1
 8017d40:	9019      	str	r0, [sp, #100]	@ 0x64
 8017d42:	7852      	ldrb	r2, [r2, #1]
 8017d44:	4618      	mov	r0, r3
 8017d46:	460d      	mov	r5, r1
 8017d48:	e7b1      	b.n	8017cae <_strtod_l+0x1d6>
 8017d4a:	f04f 0900 	mov.w	r9, #0
 8017d4e:	2301      	movs	r3, #1
 8017d50:	e77d      	b.n	8017c4e <_strtod_l+0x176>
 8017d52:	f04f 0c00 	mov.w	ip, #0
 8017d56:	1ca2      	adds	r2, r4, #2
 8017d58:	9219      	str	r2, [sp, #100]	@ 0x64
 8017d5a:	78a2      	ldrb	r2, [r4, #2]
 8017d5c:	e785      	b.n	8017c6a <_strtod_l+0x192>
 8017d5e:	f04f 0c01 	mov.w	ip, #1
 8017d62:	e7f8      	b.n	8017d56 <_strtod_l+0x27e>
 8017d64:	0801c308 	.word	0x0801c308
 8017d68:	0801c2f1 	.word	0x0801c2f1
 8017d6c:	7ff00000 	.word	0x7ff00000
 8017d70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017d72:	1c51      	adds	r1, r2, #1
 8017d74:	9119      	str	r1, [sp, #100]	@ 0x64
 8017d76:	7852      	ldrb	r2, [r2, #1]
 8017d78:	2a30      	cmp	r2, #48	@ 0x30
 8017d7a:	d0f9      	beq.n	8017d70 <_strtod_l+0x298>
 8017d7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8017d80:	2908      	cmp	r1, #8
 8017d82:	f63f af78 	bhi.w	8017c76 <_strtod_l+0x19e>
 8017d86:	3a30      	subs	r2, #48	@ 0x30
 8017d88:	920e      	str	r2, [sp, #56]	@ 0x38
 8017d8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017d8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8017d8e:	f04f 080a 	mov.w	r8, #10
 8017d92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017d94:	1c56      	adds	r6, r2, #1
 8017d96:	9619      	str	r6, [sp, #100]	@ 0x64
 8017d98:	7852      	ldrb	r2, [r2, #1]
 8017d9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017d9e:	f1be 0f09 	cmp.w	lr, #9
 8017da2:	d939      	bls.n	8017e18 <_strtod_l+0x340>
 8017da4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017da6:	1a76      	subs	r6, r6, r1
 8017da8:	2e08      	cmp	r6, #8
 8017daa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8017dae:	dc03      	bgt.n	8017db8 <_strtod_l+0x2e0>
 8017db0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017db2:	4588      	cmp	r8, r1
 8017db4:	bfa8      	it	ge
 8017db6:	4688      	movge	r8, r1
 8017db8:	f1bc 0f00 	cmp.w	ip, #0
 8017dbc:	d001      	beq.n	8017dc2 <_strtod_l+0x2ea>
 8017dbe:	f1c8 0800 	rsb	r8, r8, #0
 8017dc2:	2d00      	cmp	r5, #0
 8017dc4:	d14e      	bne.n	8017e64 <_strtod_l+0x38c>
 8017dc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017dc8:	4308      	orrs	r0, r1
 8017dca:	f47f aebe 	bne.w	8017b4a <_strtod_l+0x72>
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	f47f aed6 	bne.w	8017b80 <_strtod_l+0xa8>
 8017dd4:	2a69      	cmp	r2, #105	@ 0x69
 8017dd6:	d028      	beq.n	8017e2a <_strtod_l+0x352>
 8017dd8:	dc25      	bgt.n	8017e26 <_strtod_l+0x34e>
 8017dda:	2a49      	cmp	r2, #73	@ 0x49
 8017ddc:	d025      	beq.n	8017e2a <_strtod_l+0x352>
 8017dde:	2a4e      	cmp	r2, #78	@ 0x4e
 8017de0:	f47f aece 	bne.w	8017b80 <_strtod_l+0xa8>
 8017de4:	499b      	ldr	r1, [pc, #620]	@ (8018054 <_strtod_l+0x57c>)
 8017de6:	a819      	add	r0, sp, #100	@ 0x64
 8017de8:	f001 ffe2 	bl	8019db0 <__match>
 8017dec:	2800      	cmp	r0, #0
 8017dee:	f43f aec7 	beq.w	8017b80 <_strtod_l+0xa8>
 8017df2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017df4:	781b      	ldrb	r3, [r3, #0]
 8017df6:	2b28      	cmp	r3, #40	@ 0x28
 8017df8:	d12e      	bne.n	8017e58 <_strtod_l+0x380>
 8017dfa:	4997      	ldr	r1, [pc, #604]	@ (8018058 <_strtod_l+0x580>)
 8017dfc:	aa1c      	add	r2, sp, #112	@ 0x70
 8017dfe:	a819      	add	r0, sp, #100	@ 0x64
 8017e00:	f001 ffea 	bl	8019dd8 <__hexnan>
 8017e04:	2805      	cmp	r0, #5
 8017e06:	d127      	bne.n	8017e58 <_strtod_l+0x380>
 8017e08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017e0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8017e0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8017e12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8017e16:	e698      	b.n	8017b4a <_strtod_l+0x72>
 8017e18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017e1a:	fb08 2101 	mla	r1, r8, r1, r2
 8017e1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8017e22:	920e      	str	r2, [sp, #56]	@ 0x38
 8017e24:	e7b5      	b.n	8017d92 <_strtod_l+0x2ba>
 8017e26:	2a6e      	cmp	r2, #110	@ 0x6e
 8017e28:	e7da      	b.n	8017de0 <_strtod_l+0x308>
 8017e2a:	498c      	ldr	r1, [pc, #560]	@ (801805c <_strtod_l+0x584>)
 8017e2c:	a819      	add	r0, sp, #100	@ 0x64
 8017e2e:	f001 ffbf 	bl	8019db0 <__match>
 8017e32:	2800      	cmp	r0, #0
 8017e34:	f43f aea4 	beq.w	8017b80 <_strtod_l+0xa8>
 8017e38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017e3a:	4989      	ldr	r1, [pc, #548]	@ (8018060 <_strtod_l+0x588>)
 8017e3c:	3b01      	subs	r3, #1
 8017e3e:	a819      	add	r0, sp, #100	@ 0x64
 8017e40:	9319      	str	r3, [sp, #100]	@ 0x64
 8017e42:	f001 ffb5 	bl	8019db0 <__match>
 8017e46:	b910      	cbnz	r0, 8017e4e <_strtod_l+0x376>
 8017e48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017e4a:	3301      	adds	r3, #1
 8017e4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8017e4e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8018070 <_strtod_l+0x598>
 8017e52:	f04f 0a00 	mov.w	sl, #0
 8017e56:	e678      	b.n	8017b4a <_strtod_l+0x72>
 8017e58:	4882      	ldr	r0, [pc, #520]	@ (8018064 <_strtod_l+0x58c>)
 8017e5a:	f000 fe5d 	bl	8018b18 <nan>
 8017e5e:	ec5b ab10 	vmov	sl, fp, d0
 8017e62:	e672      	b.n	8017b4a <_strtod_l+0x72>
 8017e64:	eba8 0309 	sub.w	r3, r8, r9
 8017e68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e6c:	2f00      	cmp	r7, #0
 8017e6e:	bf08      	it	eq
 8017e70:	462f      	moveq	r7, r5
 8017e72:	2d10      	cmp	r5, #16
 8017e74:	462c      	mov	r4, r5
 8017e76:	bfa8      	it	ge
 8017e78:	2410      	movge	r4, #16
 8017e7a:	f7ea fd75 	bl	8002968 <__aeabi_ui2d>
 8017e7e:	2d09      	cmp	r5, #9
 8017e80:	4682      	mov	sl, r0
 8017e82:	468b      	mov	fp, r1
 8017e84:	dc13      	bgt.n	8017eae <_strtod_l+0x3d6>
 8017e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	f43f ae5e 	beq.w	8017b4a <_strtod_l+0x72>
 8017e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e90:	dd78      	ble.n	8017f84 <_strtod_l+0x4ac>
 8017e92:	2b16      	cmp	r3, #22
 8017e94:	dc5f      	bgt.n	8017f56 <_strtod_l+0x47e>
 8017e96:	4974      	ldr	r1, [pc, #464]	@ (8018068 <_strtod_l+0x590>)
 8017e98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017ea0:	4652      	mov	r2, sl
 8017ea2:	465b      	mov	r3, fp
 8017ea4:	f7ea fdda 	bl	8002a5c <__aeabi_dmul>
 8017ea8:	4682      	mov	sl, r0
 8017eaa:	468b      	mov	fp, r1
 8017eac:	e64d      	b.n	8017b4a <_strtod_l+0x72>
 8017eae:	4b6e      	ldr	r3, [pc, #440]	@ (8018068 <_strtod_l+0x590>)
 8017eb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017eb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8017eb8:	f7ea fdd0 	bl	8002a5c <__aeabi_dmul>
 8017ebc:	4682      	mov	sl, r0
 8017ebe:	9808      	ldr	r0, [sp, #32]
 8017ec0:	468b      	mov	fp, r1
 8017ec2:	f7ea fd51 	bl	8002968 <__aeabi_ui2d>
 8017ec6:	4602      	mov	r2, r0
 8017ec8:	460b      	mov	r3, r1
 8017eca:	4650      	mov	r0, sl
 8017ecc:	4659      	mov	r1, fp
 8017ece:	f7ea fc0f 	bl	80026f0 <__adddf3>
 8017ed2:	2d0f      	cmp	r5, #15
 8017ed4:	4682      	mov	sl, r0
 8017ed6:	468b      	mov	fp, r1
 8017ed8:	ddd5      	ble.n	8017e86 <_strtod_l+0x3ae>
 8017eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017edc:	1b2c      	subs	r4, r5, r4
 8017ede:	441c      	add	r4, r3
 8017ee0:	2c00      	cmp	r4, #0
 8017ee2:	f340 8096 	ble.w	8018012 <_strtod_l+0x53a>
 8017ee6:	f014 030f 	ands.w	r3, r4, #15
 8017eea:	d00a      	beq.n	8017f02 <_strtod_l+0x42a>
 8017eec:	495e      	ldr	r1, [pc, #376]	@ (8018068 <_strtod_l+0x590>)
 8017eee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017ef2:	4652      	mov	r2, sl
 8017ef4:	465b      	mov	r3, fp
 8017ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017efa:	f7ea fdaf 	bl	8002a5c <__aeabi_dmul>
 8017efe:	4682      	mov	sl, r0
 8017f00:	468b      	mov	fp, r1
 8017f02:	f034 040f 	bics.w	r4, r4, #15
 8017f06:	d073      	beq.n	8017ff0 <_strtod_l+0x518>
 8017f08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8017f0c:	dd48      	ble.n	8017fa0 <_strtod_l+0x4c8>
 8017f0e:	2400      	movs	r4, #0
 8017f10:	46a0      	mov	r8, r4
 8017f12:	940a      	str	r4, [sp, #40]	@ 0x28
 8017f14:	46a1      	mov	r9, r4
 8017f16:	9a05      	ldr	r2, [sp, #20]
 8017f18:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8018070 <_strtod_l+0x598>
 8017f1c:	2322      	movs	r3, #34	@ 0x22
 8017f1e:	6013      	str	r3, [r2, #0]
 8017f20:	f04f 0a00 	mov.w	sl, #0
 8017f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	f43f ae0f 	beq.w	8017b4a <_strtod_l+0x72>
 8017f2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017f2e:	9805      	ldr	r0, [sp, #20]
 8017f30:	f002 fb84 	bl	801a63c <_Bfree>
 8017f34:	9805      	ldr	r0, [sp, #20]
 8017f36:	4649      	mov	r1, r9
 8017f38:	f002 fb80 	bl	801a63c <_Bfree>
 8017f3c:	9805      	ldr	r0, [sp, #20]
 8017f3e:	4641      	mov	r1, r8
 8017f40:	f002 fb7c 	bl	801a63c <_Bfree>
 8017f44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017f46:	9805      	ldr	r0, [sp, #20]
 8017f48:	f002 fb78 	bl	801a63c <_Bfree>
 8017f4c:	9805      	ldr	r0, [sp, #20]
 8017f4e:	4621      	mov	r1, r4
 8017f50:	f002 fb74 	bl	801a63c <_Bfree>
 8017f54:	e5f9      	b.n	8017b4a <_strtod_l+0x72>
 8017f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8017f5c:	4293      	cmp	r3, r2
 8017f5e:	dbbc      	blt.n	8017eda <_strtod_l+0x402>
 8017f60:	4c41      	ldr	r4, [pc, #260]	@ (8018068 <_strtod_l+0x590>)
 8017f62:	f1c5 050f 	rsb	r5, r5, #15
 8017f66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017f6a:	4652      	mov	r2, sl
 8017f6c:	465b      	mov	r3, fp
 8017f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017f72:	f7ea fd73 	bl	8002a5c <__aeabi_dmul>
 8017f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f78:	1b5d      	subs	r5, r3, r5
 8017f7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8017f7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017f82:	e78f      	b.n	8017ea4 <_strtod_l+0x3cc>
 8017f84:	3316      	adds	r3, #22
 8017f86:	dba8      	blt.n	8017eda <_strtod_l+0x402>
 8017f88:	4b37      	ldr	r3, [pc, #220]	@ (8018068 <_strtod_l+0x590>)
 8017f8a:	eba9 0808 	sub.w	r8, r9, r8
 8017f8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8017f92:	e9d8 2300 	ldrd	r2, r3, [r8]
 8017f96:	4650      	mov	r0, sl
 8017f98:	4659      	mov	r1, fp
 8017f9a:	f7ea fe89 	bl	8002cb0 <__aeabi_ddiv>
 8017f9e:	e783      	b.n	8017ea8 <_strtod_l+0x3d0>
 8017fa0:	4b32      	ldr	r3, [pc, #200]	@ (801806c <_strtod_l+0x594>)
 8017fa2:	9308      	str	r3, [sp, #32]
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	1124      	asrs	r4, r4, #4
 8017fa8:	4650      	mov	r0, sl
 8017faa:	4659      	mov	r1, fp
 8017fac:	461e      	mov	r6, r3
 8017fae:	2c01      	cmp	r4, #1
 8017fb0:	dc21      	bgt.n	8017ff6 <_strtod_l+0x51e>
 8017fb2:	b10b      	cbz	r3, 8017fb8 <_strtod_l+0x4e0>
 8017fb4:	4682      	mov	sl, r0
 8017fb6:	468b      	mov	fp, r1
 8017fb8:	492c      	ldr	r1, [pc, #176]	@ (801806c <_strtod_l+0x594>)
 8017fba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8017fbe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8017fc2:	4652      	mov	r2, sl
 8017fc4:	465b      	mov	r3, fp
 8017fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017fca:	f7ea fd47 	bl	8002a5c <__aeabi_dmul>
 8017fce:	4b28      	ldr	r3, [pc, #160]	@ (8018070 <_strtod_l+0x598>)
 8017fd0:	460a      	mov	r2, r1
 8017fd2:	400b      	ands	r3, r1
 8017fd4:	4927      	ldr	r1, [pc, #156]	@ (8018074 <_strtod_l+0x59c>)
 8017fd6:	428b      	cmp	r3, r1
 8017fd8:	4682      	mov	sl, r0
 8017fda:	d898      	bhi.n	8017f0e <_strtod_l+0x436>
 8017fdc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8017fe0:	428b      	cmp	r3, r1
 8017fe2:	bf86      	itte	hi
 8017fe4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8018078 <_strtod_l+0x5a0>
 8017fe8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8017fec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	9308      	str	r3, [sp, #32]
 8017ff4:	e07a      	b.n	80180ec <_strtod_l+0x614>
 8017ff6:	07e2      	lsls	r2, r4, #31
 8017ff8:	d505      	bpl.n	8018006 <_strtod_l+0x52e>
 8017ffa:	9b08      	ldr	r3, [sp, #32]
 8017ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018000:	f7ea fd2c 	bl	8002a5c <__aeabi_dmul>
 8018004:	2301      	movs	r3, #1
 8018006:	9a08      	ldr	r2, [sp, #32]
 8018008:	3208      	adds	r2, #8
 801800a:	3601      	adds	r6, #1
 801800c:	1064      	asrs	r4, r4, #1
 801800e:	9208      	str	r2, [sp, #32]
 8018010:	e7cd      	b.n	8017fae <_strtod_l+0x4d6>
 8018012:	d0ed      	beq.n	8017ff0 <_strtod_l+0x518>
 8018014:	4264      	negs	r4, r4
 8018016:	f014 020f 	ands.w	r2, r4, #15
 801801a:	d00a      	beq.n	8018032 <_strtod_l+0x55a>
 801801c:	4b12      	ldr	r3, [pc, #72]	@ (8018068 <_strtod_l+0x590>)
 801801e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018022:	4650      	mov	r0, sl
 8018024:	4659      	mov	r1, fp
 8018026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801802a:	f7ea fe41 	bl	8002cb0 <__aeabi_ddiv>
 801802e:	4682      	mov	sl, r0
 8018030:	468b      	mov	fp, r1
 8018032:	1124      	asrs	r4, r4, #4
 8018034:	d0dc      	beq.n	8017ff0 <_strtod_l+0x518>
 8018036:	2c1f      	cmp	r4, #31
 8018038:	dd20      	ble.n	801807c <_strtod_l+0x5a4>
 801803a:	2400      	movs	r4, #0
 801803c:	46a0      	mov	r8, r4
 801803e:	940a      	str	r4, [sp, #40]	@ 0x28
 8018040:	46a1      	mov	r9, r4
 8018042:	9a05      	ldr	r2, [sp, #20]
 8018044:	2322      	movs	r3, #34	@ 0x22
 8018046:	f04f 0a00 	mov.w	sl, #0
 801804a:	f04f 0b00 	mov.w	fp, #0
 801804e:	6013      	str	r3, [r2, #0]
 8018050:	e768      	b.n	8017f24 <_strtod_l+0x44c>
 8018052:	bf00      	nop
 8018054:	0801c2c5 	.word	0x0801c2c5
 8018058:	0801c2f4 	.word	0x0801c2f4
 801805c:	0801c2bd 	.word	0x0801c2bd
 8018060:	0801c501 	.word	0x0801c501
 8018064:	0801c4fd 	.word	0x0801c4fd
 8018068:	0801c678 	.word	0x0801c678
 801806c:	0801c650 	.word	0x0801c650
 8018070:	7ff00000 	.word	0x7ff00000
 8018074:	7ca00000 	.word	0x7ca00000
 8018078:	7fefffff 	.word	0x7fefffff
 801807c:	f014 0310 	ands.w	r3, r4, #16
 8018080:	bf18      	it	ne
 8018082:	236a      	movne	r3, #106	@ 0x6a
 8018084:	4ea9      	ldr	r6, [pc, #676]	@ (801832c <_strtod_l+0x854>)
 8018086:	9308      	str	r3, [sp, #32]
 8018088:	4650      	mov	r0, sl
 801808a:	4659      	mov	r1, fp
 801808c:	2300      	movs	r3, #0
 801808e:	07e2      	lsls	r2, r4, #31
 8018090:	d504      	bpl.n	801809c <_strtod_l+0x5c4>
 8018092:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018096:	f7ea fce1 	bl	8002a5c <__aeabi_dmul>
 801809a:	2301      	movs	r3, #1
 801809c:	1064      	asrs	r4, r4, #1
 801809e:	f106 0608 	add.w	r6, r6, #8
 80180a2:	d1f4      	bne.n	801808e <_strtod_l+0x5b6>
 80180a4:	b10b      	cbz	r3, 80180aa <_strtod_l+0x5d2>
 80180a6:	4682      	mov	sl, r0
 80180a8:	468b      	mov	fp, r1
 80180aa:	9b08      	ldr	r3, [sp, #32]
 80180ac:	b1b3      	cbz	r3, 80180dc <_strtod_l+0x604>
 80180ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80180b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	4659      	mov	r1, fp
 80180ba:	dd0f      	ble.n	80180dc <_strtod_l+0x604>
 80180bc:	2b1f      	cmp	r3, #31
 80180be:	dd55      	ble.n	801816c <_strtod_l+0x694>
 80180c0:	2b34      	cmp	r3, #52	@ 0x34
 80180c2:	bfde      	ittt	le
 80180c4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80180c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80180cc:	4093      	lslle	r3, r2
 80180ce:	f04f 0a00 	mov.w	sl, #0
 80180d2:	bfcc      	ite	gt
 80180d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80180d8:	ea03 0b01 	andle.w	fp, r3, r1
 80180dc:	2200      	movs	r2, #0
 80180de:	2300      	movs	r3, #0
 80180e0:	4650      	mov	r0, sl
 80180e2:	4659      	mov	r1, fp
 80180e4:	f7ea ff22 	bl	8002f2c <__aeabi_dcmpeq>
 80180e8:	2800      	cmp	r0, #0
 80180ea:	d1a6      	bne.n	801803a <_strtod_l+0x562>
 80180ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80180ee:	9300      	str	r3, [sp, #0]
 80180f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80180f2:	9805      	ldr	r0, [sp, #20]
 80180f4:	462b      	mov	r3, r5
 80180f6:	463a      	mov	r2, r7
 80180f8:	f002 fb08 	bl	801a70c <__s2b>
 80180fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80180fe:	2800      	cmp	r0, #0
 8018100:	f43f af05 	beq.w	8017f0e <_strtod_l+0x436>
 8018104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018106:	2a00      	cmp	r2, #0
 8018108:	eba9 0308 	sub.w	r3, r9, r8
 801810c:	bfa8      	it	ge
 801810e:	2300      	movge	r3, #0
 8018110:	9312      	str	r3, [sp, #72]	@ 0x48
 8018112:	2400      	movs	r4, #0
 8018114:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8018118:	9316      	str	r3, [sp, #88]	@ 0x58
 801811a:	46a0      	mov	r8, r4
 801811c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801811e:	9805      	ldr	r0, [sp, #20]
 8018120:	6859      	ldr	r1, [r3, #4]
 8018122:	f002 fa4b 	bl	801a5bc <_Balloc>
 8018126:	4681      	mov	r9, r0
 8018128:	2800      	cmp	r0, #0
 801812a:	f43f aef4 	beq.w	8017f16 <_strtod_l+0x43e>
 801812e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018130:	691a      	ldr	r2, [r3, #16]
 8018132:	3202      	adds	r2, #2
 8018134:	f103 010c 	add.w	r1, r3, #12
 8018138:	0092      	lsls	r2, r2, #2
 801813a:	300c      	adds	r0, #12
 801813c:	f000 fcda 	bl	8018af4 <memcpy>
 8018140:	ec4b ab10 	vmov	d0, sl, fp
 8018144:	9805      	ldr	r0, [sp, #20]
 8018146:	aa1c      	add	r2, sp, #112	@ 0x70
 8018148:	a91b      	add	r1, sp, #108	@ 0x6c
 801814a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801814e:	f002 fe19 	bl	801ad84 <__d2b>
 8018152:	901a      	str	r0, [sp, #104]	@ 0x68
 8018154:	2800      	cmp	r0, #0
 8018156:	f43f aede 	beq.w	8017f16 <_strtod_l+0x43e>
 801815a:	9805      	ldr	r0, [sp, #20]
 801815c:	2101      	movs	r1, #1
 801815e:	f002 fb6b 	bl	801a838 <__i2b>
 8018162:	4680      	mov	r8, r0
 8018164:	b948      	cbnz	r0, 801817a <_strtod_l+0x6a2>
 8018166:	f04f 0800 	mov.w	r8, #0
 801816a:	e6d4      	b.n	8017f16 <_strtod_l+0x43e>
 801816c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018170:	fa02 f303 	lsl.w	r3, r2, r3
 8018174:	ea03 0a0a 	and.w	sl, r3, sl
 8018178:	e7b0      	b.n	80180dc <_strtod_l+0x604>
 801817a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801817c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801817e:	2d00      	cmp	r5, #0
 8018180:	bfab      	itete	ge
 8018182:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8018184:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8018186:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8018188:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801818a:	bfac      	ite	ge
 801818c:	18ef      	addge	r7, r5, r3
 801818e:	1b5e      	sublt	r6, r3, r5
 8018190:	9b08      	ldr	r3, [sp, #32]
 8018192:	1aed      	subs	r5, r5, r3
 8018194:	4415      	add	r5, r2
 8018196:	4b66      	ldr	r3, [pc, #408]	@ (8018330 <_strtod_l+0x858>)
 8018198:	3d01      	subs	r5, #1
 801819a:	429d      	cmp	r5, r3
 801819c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80181a0:	da50      	bge.n	8018244 <_strtod_l+0x76c>
 80181a2:	1b5b      	subs	r3, r3, r5
 80181a4:	2b1f      	cmp	r3, #31
 80181a6:	eba2 0203 	sub.w	r2, r2, r3
 80181aa:	f04f 0101 	mov.w	r1, #1
 80181ae:	dc3d      	bgt.n	801822c <_strtod_l+0x754>
 80181b0:	fa01 f303 	lsl.w	r3, r1, r3
 80181b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80181b6:	2300      	movs	r3, #0
 80181b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80181ba:	18bd      	adds	r5, r7, r2
 80181bc:	9b08      	ldr	r3, [sp, #32]
 80181be:	42af      	cmp	r7, r5
 80181c0:	4416      	add	r6, r2
 80181c2:	441e      	add	r6, r3
 80181c4:	463b      	mov	r3, r7
 80181c6:	bfa8      	it	ge
 80181c8:	462b      	movge	r3, r5
 80181ca:	42b3      	cmp	r3, r6
 80181cc:	bfa8      	it	ge
 80181ce:	4633      	movge	r3, r6
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	bfc2      	ittt	gt
 80181d4:	1aed      	subgt	r5, r5, r3
 80181d6:	1af6      	subgt	r6, r6, r3
 80181d8:	1aff      	subgt	r7, r7, r3
 80181da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80181dc:	2b00      	cmp	r3, #0
 80181de:	dd16      	ble.n	801820e <_strtod_l+0x736>
 80181e0:	4641      	mov	r1, r8
 80181e2:	9805      	ldr	r0, [sp, #20]
 80181e4:	461a      	mov	r2, r3
 80181e6:	f002 fbe7 	bl	801a9b8 <__pow5mult>
 80181ea:	4680      	mov	r8, r0
 80181ec:	2800      	cmp	r0, #0
 80181ee:	d0ba      	beq.n	8018166 <_strtod_l+0x68e>
 80181f0:	4601      	mov	r1, r0
 80181f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80181f4:	9805      	ldr	r0, [sp, #20]
 80181f6:	f002 fb35 	bl	801a864 <__multiply>
 80181fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80181fc:	2800      	cmp	r0, #0
 80181fe:	f43f ae8a 	beq.w	8017f16 <_strtod_l+0x43e>
 8018202:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018204:	9805      	ldr	r0, [sp, #20]
 8018206:	f002 fa19 	bl	801a63c <_Bfree>
 801820a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801820c:	931a      	str	r3, [sp, #104]	@ 0x68
 801820e:	2d00      	cmp	r5, #0
 8018210:	dc1d      	bgt.n	801824e <_strtod_l+0x776>
 8018212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018214:	2b00      	cmp	r3, #0
 8018216:	dd23      	ble.n	8018260 <_strtod_l+0x788>
 8018218:	4649      	mov	r1, r9
 801821a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801821c:	9805      	ldr	r0, [sp, #20]
 801821e:	f002 fbcb 	bl	801a9b8 <__pow5mult>
 8018222:	4681      	mov	r9, r0
 8018224:	b9e0      	cbnz	r0, 8018260 <_strtod_l+0x788>
 8018226:	f04f 0900 	mov.w	r9, #0
 801822a:	e674      	b.n	8017f16 <_strtod_l+0x43e>
 801822c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8018230:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8018234:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8018238:	35e2      	adds	r5, #226	@ 0xe2
 801823a:	fa01 f305 	lsl.w	r3, r1, r5
 801823e:	9310      	str	r3, [sp, #64]	@ 0x40
 8018240:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018242:	e7ba      	b.n	80181ba <_strtod_l+0x6e2>
 8018244:	2300      	movs	r3, #0
 8018246:	9310      	str	r3, [sp, #64]	@ 0x40
 8018248:	2301      	movs	r3, #1
 801824a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801824c:	e7b5      	b.n	80181ba <_strtod_l+0x6e2>
 801824e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018250:	9805      	ldr	r0, [sp, #20]
 8018252:	462a      	mov	r2, r5
 8018254:	f002 fc0a 	bl	801aa6c <__lshift>
 8018258:	901a      	str	r0, [sp, #104]	@ 0x68
 801825a:	2800      	cmp	r0, #0
 801825c:	d1d9      	bne.n	8018212 <_strtod_l+0x73a>
 801825e:	e65a      	b.n	8017f16 <_strtod_l+0x43e>
 8018260:	2e00      	cmp	r6, #0
 8018262:	dd07      	ble.n	8018274 <_strtod_l+0x79c>
 8018264:	4649      	mov	r1, r9
 8018266:	9805      	ldr	r0, [sp, #20]
 8018268:	4632      	mov	r2, r6
 801826a:	f002 fbff 	bl	801aa6c <__lshift>
 801826e:	4681      	mov	r9, r0
 8018270:	2800      	cmp	r0, #0
 8018272:	d0d8      	beq.n	8018226 <_strtod_l+0x74e>
 8018274:	2f00      	cmp	r7, #0
 8018276:	dd08      	ble.n	801828a <_strtod_l+0x7b2>
 8018278:	4641      	mov	r1, r8
 801827a:	9805      	ldr	r0, [sp, #20]
 801827c:	463a      	mov	r2, r7
 801827e:	f002 fbf5 	bl	801aa6c <__lshift>
 8018282:	4680      	mov	r8, r0
 8018284:	2800      	cmp	r0, #0
 8018286:	f43f ae46 	beq.w	8017f16 <_strtod_l+0x43e>
 801828a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801828c:	9805      	ldr	r0, [sp, #20]
 801828e:	464a      	mov	r2, r9
 8018290:	f002 fc74 	bl	801ab7c <__mdiff>
 8018294:	4604      	mov	r4, r0
 8018296:	2800      	cmp	r0, #0
 8018298:	f43f ae3d 	beq.w	8017f16 <_strtod_l+0x43e>
 801829c:	68c3      	ldr	r3, [r0, #12]
 801829e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80182a0:	2300      	movs	r3, #0
 80182a2:	60c3      	str	r3, [r0, #12]
 80182a4:	4641      	mov	r1, r8
 80182a6:	f002 fc4d 	bl	801ab44 <__mcmp>
 80182aa:	2800      	cmp	r0, #0
 80182ac:	da46      	bge.n	801833c <_strtod_l+0x864>
 80182ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80182b0:	ea53 030a 	orrs.w	r3, r3, sl
 80182b4:	d16c      	bne.n	8018390 <_strtod_l+0x8b8>
 80182b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d168      	bne.n	8018390 <_strtod_l+0x8b8>
 80182be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80182c2:	0d1b      	lsrs	r3, r3, #20
 80182c4:	051b      	lsls	r3, r3, #20
 80182c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80182ca:	d961      	bls.n	8018390 <_strtod_l+0x8b8>
 80182cc:	6963      	ldr	r3, [r4, #20]
 80182ce:	b913      	cbnz	r3, 80182d6 <_strtod_l+0x7fe>
 80182d0:	6923      	ldr	r3, [r4, #16]
 80182d2:	2b01      	cmp	r3, #1
 80182d4:	dd5c      	ble.n	8018390 <_strtod_l+0x8b8>
 80182d6:	4621      	mov	r1, r4
 80182d8:	2201      	movs	r2, #1
 80182da:	9805      	ldr	r0, [sp, #20]
 80182dc:	f002 fbc6 	bl	801aa6c <__lshift>
 80182e0:	4641      	mov	r1, r8
 80182e2:	4604      	mov	r4, r0
 80182e4:	f002 fc2e 	bl	801ab44 <__mcmp>
 80182e8:	2800      	cmp	r0, #0
 80182ea:	dd51      	ble.n	8018390 <_strtod_l+0x8b8>
 80182ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80182f0:	9a08      	ldr	r2, [sp, #32]
 80182f2:	0d1b      	lsrs	r3, r3, #20
 80182f4:	051b      	lsls	r3, r3, #20
 80182f6:	2a00      	cmp	r2, #0
 80182f8:	d06b      	beq.n	80183d2 <_strtod_l+0x8fa>
 80182fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80182fe:	d868      	bhi.n	80183d2 <_strtod_l+0x8fa>
 8018300:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8018304:	f67f ae9d 	bls.w	8018042 <_strtod_l+0x56a>
 8018308:	4b0a      	ldr	r3, [pc, #40]	@ (8018334 <_strtod_l+0x85c>)
 801830a:	4650      	mov	r0, sl
 801830c:	4659      	mov	r1, fp
 801830e:	2200      	movs	r2, #0
 8018310:	f7ea fba4 	bl	8002a5c <__aeabi_dmul>
 8018314:	4b08      	ldr	r3, [pc, #32]	@ (8018338 <_strtod_l+0x860>)
 8018316:	400b      	ands	r3, r1
 8018318:	4682      	mov	sl, r0
 801831a:	468b      	mov	fp, r1
 801831c:	2b00      	cmp	r3, #0
 801831e:	f47f ae05 	bne.w	8017f2c <_strtod_l+0x454>
 8018322:	9a05      	ldr	r2, [sp, #20]
 8018324:	2322      	movs	r3, #34	@ 0x22
 8018326:	6013      	str	r3, [r2, #0]
 8018328:	e600      	b.n	8017f2c <_strtod_l+0x454>
 801832a:	bf00      	nop
 801832c:	0801c320 	.word	0x0801c320
 8018330:	fffffc02 	.word	0xfffffc02
 8018334:	39500000 	.word	0x39500000
 8018338:	7ff00000 	.word	0x7ff00000
 801833c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8018340:	d165      	bne.n	801840e <_strtod_l+0x936>
 8018342:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018348:	b35a      	cbz	r2, 80183a2 <_strtod_l+0x8ca>
 801834a:	4a9f      	ldr	r2, [pc, #636]	@ (80185c8 <_strtod_l+0xaf0>)
 801834c:	4293      	cmp	r3, r2
 801834e:	d12b      	bne.n	80183a8 <_strtod_l+0x8d0>
 8018350:	9b08      	ldr	r3, [sp, #32]
 8018352:	4651      	mov	r1, sl
 8018354:	b303      	cbz	r3, 8018398 <_strtod_l+0x8c0>
 8018356:	4b9d      	ldr	r3, [pc, #628]	@ (80185cc <_strtod_l+0xaf4>)
 8018358:	465a      	mov	r2, fp
 801835a:	4013      	ands	r3, r2
 801835c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8018360:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018364:	d81b      	bhi.n	801839e <_strtod_l+0x8c6>
 8018366:	0d1b      	lsrs	r3, r3, #20
 8018368:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801836c:	fa02 f303 	lsl.w	r3, r2, r3
 8018370:	4299      	cmp	r1, r3
 8018372:	d119      	bne.n	80183a8 <_strtod_l+0x8d0>
 8018374:	4b96      	ldr	r3, [pc, #600]	@ (80185d0 <_strtod_l+0xaf8>)
 8018376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018378:	429a      	cmp	r2, r3
 801837a:	d102      	bne.n	8018382 <_strtod_l+0x8aa>
 801837c:	3101      	adds	r1, #1
 801837e:	f43f adca 	beq.w	8017f16 <_strtod_l+0x43e>
 8018382:	4b92      	ldr	r3, [pc, #584]	@ (80185cc <_strtod_l+0xaf4>)
 8018384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018386:	401a      	ands	r2, r3
 8018388:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801838c:	f04f 0a00 	mov.w	sl, #0
 8018390:	9b08      	ldr	r3, [sp, #32]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d1b8      	bne.n	8018308 <_strtod_l+0x830>
 8018396:	e5c9      	b.n	8017f2c <_strtod_l+0x454>
 8018398:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801839c:	e7e8      	b.n	8018370 <_strtod_l+0x898>
 801839e:	4613      	mov	r3, r2
 80183a0:	e7e6      	b.n	8018370 <_strtod_l+0x898>
 80183a2:	ea53 030a 	orrs.w	r3, r3, sl
 80183a6:	d0a1      	beq.n	80182ec <_strtod_l+0x814>
 80183a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80183aa:	b1db      	cbz	r3, 80183e4 <_strtod_l+0x90c>
 80183ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80183ae:	4213      	tst	r3, r2
 80183b0:	d0ee      	beq.n	8018390 <_strtod_l+0x8b8>
 80183b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80183b4:	9a08      	ldr	r2, [sp, #32]
 80183b6:	4650      	mov	r0, sl
 80183b8:	4659      	mov	r1, fp
 80183ba:	b1bb      	cbz	r3, 80183ec <_strtod_l+0x914>
 80183bc:	f7ff fb6e 	bl	8017a9c <sulp>
 80183c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80183c4:	ec53 2b10 	vmov	r2, r3, d0
 80183c8:	f7ea f992 	bl	80026f0 <__adddf3>
 80183cc:	4682      	mov	sl, r0
 80183ce:	468b      	mov	fp, r1
 80183d0:	e7de      	b.n	8018390 <_strtod_l+0x8b8>
 80183d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80183d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80183da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80183de:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80183e2:	e7d5      	b.n	8018390 <_strtod_l+0x8b8>
 80183e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80183e6:	ea13 0f0a 	tst.w	r3, sl
 80183ea:	e7e1      	b.n	80183b0 <_strtod_l+0x8d8>
 80183ec:	f7ff fb56 	bl	8017a9c <sulp>
 80183f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80183f4:	ec53 2b10 	vmov	r2, r3, d0
 80183f8:	f7ea f978 	bl	80026ec <__aeabi_dsub>
 80183fc:	2200      	movs	r2, #0
 80183fe:	2300      	movs	r3, #0
 8018400:	4682      	mov	sl, r0
 8018402:	468b      	mov	fp, r1
 8018404:	f7ea fd92 	bl	8002f2c <__aeabi_dcmpeq>
 8018408:	2800      	cmp	r0, #0
 801840a:	d0c1      	beq.n	8018390 <_strtod_l+0x8b8>
 801840c:	e619      	b.n	8018042 <_strtod_l+0x56a>
 801840e:	4641      	mov	r1, r8
 8018410:	4620      	mov	r0, r4
 8018412:	f002 fd0f 	bl	801ae34 <__ratio>
 8018416:	ec57 6b10 	vmov	r6, r7, d0
 801841a:	2200      	movs	r2, #0
 801841c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018420:	4630      	mov	r0, r6
 8018422:	4639      	mov	r1, r7
 8018424:	f7ea fd96 	bl	8002f54 <__aeabi_dcmple>
 8018428:	2800      	cmp	r0, #0
 801842a:	d06f      	beq.n	801850c <_strtod_l+0xa34>
 801842c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801842e:	2b00      	cmp	r3, #0
 8018430:	d17a      	bne.n	8018528 <_strtod_l+0xa50>
 8018432:	f1ba 0f00 	cmp.w	sl, #0
 8018436:	d158      	bne.n	80184ea <_strtod_l+0xa12>
 8018438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801843a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801843e:	2b00      	cmp	r3, #0
 8018440:	d15a      	bne.n	80184f8 <_strtod_l+0xa20>
 8018442:	4b64      	ldr	r3, [pc, #400]	@ (80185d4 <_strtod_l+0xafc>)
 8018444:	2200      	movs	r2, #0
 8018446:	4630      	mov	r0, r6
 8018448:	4639      	mov	r1, r7
 801844a:	f7ea fd79 	bl	8002f40 <__aeabi_dcmplt>
 801844e:	2800      	cmp	r0, #0
 8018450:	d159      	bne.n	8018506 <_strtod_l+0xa2e>
 8018452:	4630      	mov	r0, r6
 8018454:	4639      	mov	r1, r7
 8018456:	4b60      	ldr	r3, [pc, #384]	@ (80185d8 <_strtod_l+0xb00>)
 8018458:	2200      	movs	r2, #0
 801845a:	f7ea faff 	bl	8002a5c <__aeabi_dmul>
 801845e:	4606      	mov	r6, r0
 8018460:	460f      	mov	r7, r1
 8018462:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8018466:	9606      	str	r6, [sp, #24]
 8018468:	9307      	str	r3, [sp, #28]
 801846a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801846e:	4d57      	ldr	r5, [pc, #348]	@ (80185cc <_strtod_l+0xaf4>)
 8018470:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8018474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018476:	401d      	ands	r5, r3
 8018478:	4b58      	ldr	r3, [pc, #352]	@ (80185dc <_strtod_l+0xb04>)
 801847a:	429d      	cmp	r5, r3
 801847c:	f040 80b2 	bne.w	80185e4 <_strtod_l+0xb0c>
 8018480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018482:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8018486:	ec4b ab10 	vmov	d0, sl, fp
 801848a:	f002 fc0b 	bl	801aca4 <__ulp>
 801848e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018492:	ec51 0b10 	vmov	r0, r1, d0
 8018496:	f7ea fae1 	bl	8002a5c <__aeabi_dmul>
 801849a:	4652      	mov	r2, sl
 801849c:	465b      	mov	r3, fp
 801849e:	f7ea f927 	bl	80026f0 <__adddf3>
 80184a2:	460b      	mov	r3, r1
 80184a4:	4949      	ldr	r1, [pc, #292]	@ (80185cc <_strtod_l+0xaf4>)
 80184a6:	4a4e      	ldr	r2, [pc, #312]	@ (80185e0 <_strtod_l+0xb08>)
 80184a8:	4019      	ands	r1, r3
 80184aa:	4291      	cmp	r1, r2
 80184ac:	4682      	mov	sl, r0
 80184ae:	d942      	bls.n	8018536 <_strtod_l+0xa5e>
 80184b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80184b2:	4b47      	ldr	r3, [pc, #284]	@ (80185d0 <_strtod_l+0xaf8>)
 80184b4:	429a      	cmp	r2, r3
 80184b6:	d103      	bne.n	80184c0 <_strtod_l+0x9e8>
 80184b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80184ba:	3301      	adds	r3, #1
 80184bc:	f43f ad2b 	beq.w	8017f16 <_strtod_l+0x43e>
 80184c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80185d0 <_strtod_l+0xaf8>
 80184c4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80184c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80184ca:	9805      	ldr	r0, [sp, #20]
 80184cc:	f002 f8b6 	bl	801a63c <_Bfree>
 80184d0:	9805      	ldr	r0, [sp, #20]
 80184d2:	4649      	mov	r1, r9
 80184d4:	f002 f8b2 	bl	801a63c <_Bfree>
 80184d8:	9805      	ldr	r0, [sp, #20]
 80184da:	4641      	mov	r1, r8
 80184dc:	f002 f8ae 	bl	801a63c <_Bfree>
 80184e0:	9805      	ldr	r0, [sp, #20]
 80184e2:	4621      	mov	r1, r4
 80184e4:	f002 f8aa 	bl	801a63c <_Bfree>
 80184e8:	e618      	b.n	801811c <_strtod_l+0x644>
 80184ea:	f1ba 0f01 	cmp.w	sl, #1
 80184ee:	d103      	bne.n	80184f8 <_strtod_l+0xa20>
 80184f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	f43f ada5 	beq.w	8018042 <_strtod_l+0x56a>
 80184f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80185a8 <_strtod_l+0xad0>
 80184fc:	4f35      	ldr	r7, [pc, #212]	@ (80185d4 <_strtod_l+0xafc>)
 80184fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018502:	2600      	movs	r6, #0
 8018504:	e7b1      	b.n	801846a <_strtod_l+0x992>
 8018506:	4f34      	ldr	r7, [pc, #208]	@ (80185d8 <_strtod_l+0xb00>)
 8018508:	2600      	movs	r6, #0
 801850a:	e7aa      	b.n	8018462 <_strtod_l+0x98a>
 801850c:	4b32      	ldr	r3, [pc, #200]	@ (80185d8 <_strtod_l+0xb00>)
 801850e:	4630      	mov	r0, r6
 8018510:	4639      	mov	r1, r7
 8018512:	2200      	movs	r2, #0
 8018514:	f7ea faa2 	bl	8002a5c <__aeabi_dmul>
 8018518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801851a:	4606      	mov	r6, r0
 801851c:	460f      	mov	r7, r1
 801851e:	2b00      	cmp	r3, #0
 8018520:	d09f      	beq.n	8018462 <_strtod_l+0x98a>
 8018522:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8018526:	e7a0      	b.n	801846a <_strtod_l+0x992>
 8018528:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80185b0 <_strtod_l+0xad8>
 801852c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018530:	ec57 6b17 	vmov	r6, r7, d7
 8018534:	e799      	b.n	801846a <_strtod_l+0x992>
 8018536:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801853a:	9b08      	ldr	r3, [sp, #32]
 801853c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8018540:	2b00      	cmp	r3, #0
 8018542:	d1c1      	bne.n	80184c8 <_strtod_l+0x9f0>
 8018544:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018548:	0d1b      	lsrs	r3, r3, #20
 801854a:	051b      	lsls	r3, r3, #20
 801854c:	429d      	cmp	r5, r3
 801854e:	d1bb      	bne.n	80184c8 <_strtod_l+0x9f0>
 8018550:	4630      	mov	r0, r6
 8018552:	4639      	mov	r1, r7
 8018554:	f7ea fde2 	bl	800311c <__aeabi_d2lz>
 8018558:	f7ea fa52 	bl	8002a00 <__aeabi_l2d>
 801855c:	4602      	mov	r2, r0
 801855e:	460b      	mov	r3, r1
 8018560:	4630      	mov	r0, r6
 8018562:	4639      	mov	r1, r7
 8018564:	f7ea f8c2 	bl	80026ec <__aeabi_dsub>
 8018568:	460b      	mov	r3, r1
 801856a:	4602      	mov	r2, r0
 801856c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8018570:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8018574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018576:	ea46 060a 	orr.w	r6, r6, sl
 801857a:	431e      	orrs	r6, r3
 801857c:	d06f      	beq.n	801865e <_strtod_l+0xb86>
 801857e:	a30e      	add	r3, pc, #56	@ (adr r3, 80185b8 <_strtod_l+0xae0>)
 8018580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018584:	f7ea fcdc 	bl	8002f40 <__aeabi_dcmplt>
 8018588:	2800      	cmp	r0, #0
 801858a:	f47f accf 	bne.w	8017f2c <_strtod_l+0x454>
 801858e:	a30c      	add	r3, pc, #48	@ (adr r3, 80185c0 <_strtod_l+0xae8>)
 8018590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018598:	f7ea fcf0 	bl	8002f7c <__aeabi_dcmpgt>
 801859c:	2800      	cmp	r0, #0
 801859e:	d093      	beq.n	80184c8 <_strtod_l+0x9f0>
 80185a0:	e4c4      	b.n	8017f2c <_strtod_l+0x454>
 80185a2:	bf00      	nop
 80185a4:	f3af 8000 	nop.w
 80185a8:	00000000 	.word	0x00000000
 80185ac:	bff00000 	.word	0xbff00000
 80185b0:	00000000 	.word	0x00000000
 80185b4:	3ff00000 	.word	0x3ff00000
 80185b8:	94a03595 	.word	0x94a03595
 80185bc:	3fdfffff 	.word	0x3fdfffff
 80185c0:	35afe535 	.word	0x35afe535
 80185c4:	3fe00000 	.word	0x3fe00000
 80185c8:	000fffff 	.word	0x000fffff
 80185cc:	7ff00000 	.word	0x7ff00000
 80185d0:	7fefffff 	.word	0x7fefffff
 80185d4:	3ff00000 	.word	0x3ff00000
 80185d8:	3fe00000 	.word	0x3fe00000
 80185dc:	7fe00000 	.word	0x7fe00000
 80185e0:	7c9fffff 	.word	0x7c9fffff
 80185e4:	9b08      	ldr	r3, [sp, #32]
 80185e6:	b323      	cbz	r3, 8018632 <_strtod_l+0xb5a>
 80185e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80185ec:	d821      	bhi.n	8018632 <_strtod_l+0xb5a>
 80185ee:	a328      	add	r3, pc, #160	@ (adr r3, 8018690 <_strtod_l+0xbb8>)
 80185f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185f4:	4630      	mov	r0, r6
 80185f6:	4639      	mov	r1, r7
 80185f8:	f7ea fcac 	bl	8002f54 <__aeabi_dcmple>
 80185fc:	b1a0      	cbz	r0, 8018628 <_strtod_l+0xb50>
 80185fe:	4639      	mov	r1, r7
 8018600:	4630      	mov	r0, r6
 8018602:	f7ea fd03 	bl	800300c <__aeabi_d2uiz>
 8018606:	2801      	cmp	r0, #1
 8018608:	bf38      	it	cc
 801860a:	2001      	movcc	r0, #1
 801860c:	f7ea f9ac 	bl	8002968 <__aeabi_ui2d>
 8018610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018612:	4606      	mov	r6, r0
 8018614:	460f      	mov	r7, r1
 8018616:	b9fb      	cbnz	r3, 8018658 <_strtod_l+0xb80>
 8018618:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801861c:	9014      	str	r0, [sp, #80]	@ 0x50
 801861e:	9315      	str	r3, [sp, #84]	@ 0x54
 8018620:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8018624:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8018628:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801862a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801862e:	1b5b      	subs	r3, r3, r5
 8018630:	9311      	str	r3, [sp, #68]	@ 0x44
 8018632:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018636:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801863a:	f002 fb33 	bl	801aca4 <__ulp>
 801863e:	4650      	mov	r0, sl
 8018640:	ec53 2b10 	vmov	r2, r3, d0
 8018644:	4659      	mov	r1, fp
 8018646:	f7ea fa09 	bl	8002a5c <__aeabi_dmul>
 801864a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801864e:	f7ea f84f 	bl	80026f0 <__adddf3>
 8018652:	4682      	mov	sl, r0
 8018654:	468b      	mov	fp, r1
 8018656:	e770      	b.n	801853a <_strtod_l+0xa62>
 8018658:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801865c:	e7e0      	b.n	8018620 <_strtod_l+0xb48>
 801865e:	a30e      	add	r3, pc, #56	@ (adr r3, 8018698 <_strtod_l+0xbc0>)
 8018660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018664:	f7ea fc6c 	bl	8002f40 <__aeabi_dcmplt>
 8018668:	e798      	b.n	801859c <_strtod_l+0xac4>
 801866a:	2300      	movs	r3, #0
 801866c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801866e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8018670:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018672:	6013      	str	r3, [r2, #0]
 8018674:	f7ff ba6d 	b.w	8017b52 <_strtod_l+0x7a>
 8018678:	2a65      	cmp	r2, #101	@ 0x65
 801867a:	f43f ab66 	beq.w	8017d4a <_strtod_l+0x272>
 801867e:	2a45      	cmp	r2, #69	@ 0x45
 8018680:	f43f ab63 	beq.w	8017d4a <_strtod_l+0x272>
 8018684:	2301      	movs	r3, #1
 8018686:	f7ff bb9e 	b.w	8017dc6 <_strtod_l+0x2ee>
 801868a:	bf00      	nop
 801868c:	f3af 8000 	nop.w
 8018690:	ffc00000 	.word	0xffc00000
 8018694:	41dfffff 	.word	0x41dfffff
 8018698:	94a03595 	.word	0x94a03595
 801869c:	3fcfffff 	.word	0x3fcfffff

080186a0 <_strtod_r>:
 80186a0:	4b01      	ldr	r3, [pc, #4]	@ (80186a8 <_strtod_r+0x8>)
 80186a2:	f7ff ba19 	b.w	8017ad8 <_strtod_l>
 80186a6:	bf00      	nop
 80186a8:	20000328 	.word	0x20000328

080186ac <_strtol_l.constprop.0>:
 80186ac:	2b24      	cmp	r3, #36	@ 0x24
 80186ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186b2:	4686      	mov	lr, r0
 80186b4:	4690      	mov	r8, r2
 80186b6:	d801      	bhi.n	80186bc <_strtol_l.constprop.0+0x10>
 80186b8:	2b01      	cmp	r3, #1
 80186ba:	d106      	bne.n	80186ca <_strtol_l.constprop.0+0x1e>
 80186bc:	f000 f9ea 	bl	8018a94 <__errno>
 80186c0:	2316      	movs	r3, #22
 80186c2:	6003      	str	r3, [r0, #0]
 80186c4:	2000      	movs	r0, #0
 80186c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186ca:	4834      	ldr	r0, [pc, #208]	@ (801879c <_strtol_l.constprop.0+0xf0>)
 80186cc:	460d      	mov	r5, r1
 80186ce:	462a      	mov	r2, r5
 80186d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80186d4:	5d06      	ldrb	r6, [r0, r4]
 80186d6:	f016 0608 	ands.w	r6, r6, #8
 80186da:	d1f8      	bne.n	80186ce <_strtol_l.constprop.0+0x22>
 80186dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80186de:	d12d      	bne.n	801873c <_strtol_l.constprop.0+0x90>
 80186e0:	782c      	ldrb	r4, [r5, #0]
 80186e2:	2601      	movs	r6, #1
 80186e4:	1c95      	adds	r5, r2, #2
 80186e6:	f033 0210 	bics.w	r2, r3, #16
 80186ea:	d109      	bne.n	8018700 <_strtol_l.constprop.0+0x54>
 80186ec:	2c30      	cmp	r4, #48	@ 0x30
 80186ee:	d12a      	bne.n	8018746 <_strtol_l.constprop.0+0x9a>
 80186f0:	782a      	ldrb	r2, [r5, #0]
 80186f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80186f6:	2a58      	cmp	r2, #88	@ 0x58
 80186f8:	d125      	bne.n	8018746 <_strtol_l.constprop.0+0x9a>
 80186fa:	786c      	ldrb	r4, [r5, #1]
 80186fc:	2310      	movs	r3, #16
 80186fe:	3502      	adds	r5, #2
 8018700:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8018704:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8018708:	2200      	movs	r2, #0
 801870a:	fbbc f9f3 	udiv	r9, ip, r3
 801870e:	4610      	mov	r0, r2
 8018710:	fb03 ca19 	mls	sl, r3, r9, ip
 8018714:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8018718:	2f09      	cmp	r7, #9
 801871a:	d81b      	bhi.n	8018754 <_strtol_l.constprop.0+0xa8>
 801871c:	463c      	mov	r4, r7
 801871e:	42a3      	cmp	r3, r4
 8018720:	dd27      	ble.n	8018772 <_strtol_l.constprop.0+0xc6>
 8018722:	1c57      	adds	r7, r2, #1
 8018724:	d007      	beq.n	8018736 <_strtol_l.constprop.0+0x8a>
 8018726:	4581      	cmp	r9, r0
 8018728:	d320      	bcc.n	801876c <_strtol_l.constprop.0+0xc0>
 801872a:	d101      	bne.n	8018730 <_strtol_l.constprop.0+0x84>
 801872c:	45a2      	cmp	sl, r4
 801872e:	db1d      	blt.n	801876c <_strtol_l.constprop.0+0xc0>
 8018730:	fb00 4003 	mla	r0, r0, r3, r4
 8018734:	2201      	movs	r2, #1
 8018736:	f815 4b01 	ldrb.w	r4, [r5], #1
 801873a:	e7eb      	b.n	8018714 <_strtol_l.constprop.0+0x68>
 801873c:	2c2b      	cmp	r4, #43	@ 0x2b
 801873e:	bf04      	itt	eq
 8018740:	782c      	ldrbeq	r4, [r5, #0]
 8018742:	1c95      	addeq	r5, r2, #2
 8018744:	e7cf      	b.n	80186e6 <_strtol_l.constprop.0+0x3a>
 8018746:	2b00      	cmp	r3, #0
 8018748:	d1da      	bne.n	8018700 <_strtol_l.constprop.0+0x54>
 801874a:	2c30      	cmp	r4, #48	@ 0x30
 801874c:	bf0c      	ite	eq
 801874e:	2308      	moveq	r3, #8
 8018750:	230a      	movne	r3, #10
 8018752:	e7d5      	b.n	8018700 <_strtol_l.constprop.0+0x54>
 8018754:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8018758:	2f19      	cmp	r7, #25
 801875a:	d801      	bhi.n	8018760 <_strtol_l.constprop.0+0xb4>
 801875c:	3c37      	subs	r4, #55	@ 0x37
 801875e:	e7de      	b.n	801871e <_strtol_l.constprop.0+0x72>
 8018760:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8018764:	2f19      	cmp	r7, #25
 8018766:	d804      	bhi.n	8018772 <_strtol_l.constprop.0+0xc6>
 8018768:	3c57      	subs	r4, #87	@ 0x57
 801876a:	e7d8      	b.n	801871e <_strtol_l.constprop.0+0x72>
 801876c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018770:	e7e1      	b.n	8018736 <_strtol_l.constprop.0+0x8a>
 8018772:	1c53      	adds	r3, r2, #1
 8018774:	d108      	bne.n	8018788 <_strtol_l.constprop.0+0xdc>
 8018776:	2322      	movs	r3, #34	@ 0x22
 8018778:	f8ce 3000 	str.w	r3, [lr]
 801877c:	4660      	mov	r0, ip
 801877e:	f1b8 0f00 	cmp.w	r8, #0
 8018782:	d0a0      	beq.n	80186c6 <_strtol_l.constprop.0+0x1a>
 8018784:	1e69      	subs	r1, r5, #1
 8018786:	e006      	b.n	8018796 <_strtol_l.constprop.0+0xea>
 8018788:	b106      	cbz	r6, 801878c <_strtol_l.constprop.0+0xe0>
 801878a:	4240      	negs	r0, r0
 801878c:	f1b8 0f00 	cmp.w	r8, #0
 8018790:	d099      	beq.n	80186c6 <_strtol_l.constprop.0+0x1a>
 8018792:	2a00      	cmp	r2, #0
 8018794:	d1f6      	bne.n	8018784 <_strtol_l.constprop.0+0xd8>
 8018796:	f8c8 1000 	str.w	r1, [r8]
 801879a:	e794      	b.n	80186c6 <_strtol_l.constprop.0+0x1a>
 801879c:	0801c3c2 	.word	0x0801c3c2

080187a0 <_strtol_r>:
 80187a0:	f7ff bf84 	b.w	80186ac <_strtol_l.constprop.0>

080187a4 <strtol>:
 80187a4:	4613      	mov	r3, r2
 80187a6:	460a      	mov	r2, r1
 80187a8:	4601      	mov	r1, r0
 80187aa:	4802      	ldr	r0, [pc, #8]	@ (80187b4 <strtol+0x10>)
 80187ac:	6800      	ldr	r0, [r0, #0]
 80187ae:	f7ff bf7d 	b.w	80186ac <_strtol_l.constprop.0>
 80187b2:	bf00      	nop
 80187b4:	20000494 	.word	0x20000494

080187b8 <_fwalk_sglue>:
 80187b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187bc:	4607      	mov	r7, r0
 80187be:	4688      	mov	r8, r1
 80187c0:	4614      	mov	r4, r2
 80187c2:	2600      	movs	r6, #0
 80187c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80187c8:	f1b9 0901 	subs.w	r9, r9, #1
 80187cc:	d505      	bpl.n	80187da <_fwalk_sglue+0x22>
 80187ce:	6824      	ldr	r4, [r4, #0]
 80187d0:	2c00      	cmp	r4, #0
 80187d2:	d1f7      	bne.n	80187c4 <_fwalk_sglue+0xc>
 80187d4:	4630      	mov	r0, r6
 80187d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187da:	89ab      	ldrh	r3, [r5, #12]
 80187dc:	2b01      	cmp	r3, #1
 80187de:	d907      	bls.n	80187f0 <_fwalk_sglue+0x38>
 80187e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80187e4:	3301      	adds	r3, #1
 80187e6:	d003      	beq.n	80187f0 <_fwalk_sglue+0x38>
 80187e8:	4629      	mov	r1, r5
 80187ea:	4638      	mov	r0, r7
 80187ec:	47c0      	blx	r8
 80187ee:	4306      	orrs	r6, r0
 80187f0:	3568      	adds	r5, #104	@ 0x68
 80187f2:	e7e9      	b.n	80187c8 <_fwalk_sglue+0x10>

080187f4 <iprintf>:
 80187f4:	b40f      	push	{r0, r1, r2, r3}
 80187f6:	b507      	push	{r0, r1, r2, lr}
 80187f8:	4906      	ldr	r1, [pc, #24]	@ (8018814 <iprintf+0x20>)
 80187fa:	ab04      	add	r3, sp, #16
 80187fc:	6808      	ldr	r0, [r1, #0]
 80187fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8018802:	6881      	ldr	r1, [r0, #8]
 8018804:	9301      	str	r3, [sp, #4]
 8018806:	f001 fd03 	bl	801a210 <_vfiprintf_r>
 801880a:	b003      	add	sp, #12
 801880c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018810:	b004      	add	sp, #16
 8018812:	4770      	bx	lr
 8018814:	20000494 	.word	0x20000494

08018818 <_puts_r>:
 8018818:	6a03      	ldr	r3, [r0, #32]
 801881a:	b570      	push	{r4, r5, r6, lr}
 801881c:	6884      	ldr	r4, [r0, #8]
 801881e:	4605      	mov	r5, r0
 8018820:	460e      	mov	r6, r1
 8018822:	b90b      	cbnz	r3, 8018828 <_puts_r+0x10>
 8018824:	f7ff f922 	bl	8017a6c <__sinit>
 8018828:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801882a:	07db      	lsls	r3, r3, #31
 801882c:	d405      	bmi.n	801883a <_puts_r+0x22>
 801882e:	89a3      	ldrh	r3, [r4, #12]
 8018830:	0598      	lsls	r0, r3, #22
 8018832:	d402      	bmi.n	801883a <_puts_r+0x22>
 8018834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018836:	f000 f958 	bl	8018aea <__retarget_lock_acquire_recursive>
 801883a:	89a3      	ldrh	r3, [r4, #12]
 801883c:	0719      	lsls	r1, r3, #28
 801883e:	d502      	bpl.n	8018846 <_puts_r+0x2e>
 8018840:	6923      	ldr	r3, [r4, #16]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d135      	bne.n	80188b2 <_puts_r+0x9a>
 8018846:	4621      	mov	r1, r4
 8018848:	4628      	mov	r0, r5
 801884a:	f002 fc2b 	bl	801b0a4 <__swsetup_r>
 801884e:	b380      	cbz	r0, 80188b2 <_puts_r+0x9a>
 8018850:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8018854:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018856:	07da      	lsls	r2, r3, #31
 8018858:	d405      	bmi.n	8018866 <_puts_r+0x4e>
 801885a:	89a3      	ldrh	r3, [r4, #12]
 801885c:	059b      	lsls	r3, r3, #22
 801885e:	d402      	bmi.n	8018866 <_puts_r+0x4e>
 8018860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018862:	f000 f943 	bl	8018aec <__retarget_lock_release_recursive>
 8018866:	4628      	mov	r0, r5
 8018868:	bd70      	pop	{r4, r5, r6, pc}
 801886a:	2b00      	cmp	r3, #0
 801886c:	da04      	bge.n	8018878 <_puts_r+0x60>
 801886e:	69a2      	ldr	r2, [r4, #24]
 8018870:	429a      	cmp	r2, r3
 8018872:	dc17      	bgt.n	80188a4 <_puts_r+0x8c>
 8018874:	290a      	cmp	r1, #10
 8018876:	d015      	beq.n	80188a4 <_puts_r+0x8c>
 8018878:	6823      	ldr	r3, [r4, #0]
 801887a:	1c5a      	adds	r2, r3, #1
 801887c:	6022      	str	r2, [r4, #0]
 801887e:	7019      	strb	r1, [r3, #0]
 8018880:	68a3      	ldr	r3, [r4, #8]
 8018882:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018886:	3b01      	subs	r3, #1
 8018888:	60a3      	str	r3, [r4, #8]
 801888a:	2900      	cmp	r1, #0
 801888c:	d1ed      	bne.n	801886a <_puts_r+0x52>
 801888e:	2b00      	cmp	r3, #0
 8018890:	da11      	bge.n	80188b6 <_puts_r+0x9e>
 8018892:	4622      	mov	r2, r4
 8018894:	210a      	movs	r1, #10
 8018896:	4628      	mov	r0, r5
 8018898:	f002 fbc6 	bl	801b028 <__swbuf_r>
 801889c:	3001      	adds	r0, #1
 801889e:	d0d7      	beq.n	8018850 <_puts_r+0x38>
 80188a0:	250a      	movs	r5, #10
 80188a2:	e7d7      	b.n	8018854 <_puts_r+0x3c>
 80188a4:	4622      	mov	r2, r4
 80188a6:	4628      	mov	r0, r5
 80188a8:	f002 fbbe 	bl	801b028 <__swbuf_r>
 80188ac:	3001      	adds	r0, #1
 80188ae:	d1e7      	bne.n	8018880 <_puts_r+0x68>
 80188b0:	e7ce      	b.n	8018850 <_puts_r+0x38>
 80188b2:	3e01      	subs	r6, #1
 80188b4:	e7e4      	b.n	8018880 <_puts_r+0x68>
 80188b6:	6823      	ldr	r3, [r4, #0]
 80188b8:	1c5a      	adds	r2, r3, #1
 80188ba:	6022      	str	r2, [r4, #0]
 80188bc:	220a      	movs	r2, #10
 80188be:	701a      	strb	r2, [r3, #0]
 80188c0:	e7ee      	b.n	80188a0 <_puts_r+0x88>
	...

080188c4 <puts>:
 80188c4:	4b02      	ldr	r3, [pc, #8]	@ (80188d0 <puts+0xc>)
 80188c6:	4601      	mov	r1, r0
 80188c8:	6818      	ldr	r0, [r3, #0]
 80188ca:	f7ff bfa5 	b.w	8018818 <_puts_r>
 80188ce:	bf00      	nop
 80188d0:	20000494 	.word	0x20000494

080188d4 <strncmp>:
 80188d4:	b510      	push	{r4, lr}
 80188d6:	b16a      	cbz	r2, 80188f4 <strncmp+0x20>
 80188d8:	3901      	subs	r1, #1
 80188da:	1884      	adds	r4, r0, r2
 80188dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80188e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80188e4:	429a      	cmp	r2, r3
 80188e6:	d103      	bne.n	80188f0 <strncmp+0x1c>
 80188e8:	42a0      	cmp	r0, r4
 80188ea:	d001      	beq.n	80188f0 <strncmp+0x1c>
 80188ec:	2a00      	cmp	r2, #0
 80188ee:	d1f5      	bne.n	80188dc <strncmp+0x8>
 80188f0:	1ad0      	subs	r0, r2, r3
 80188f2:	bd10      	pop	{r4, pc}
 80188f4:	4610      	mov	r0, r2
 80188f6:	e7fc      	b.n	80188f2 <strncmp+0x1e>

080188f8 <strtok>:
 80188f8:	4b16      	ldr	r3, [pc, #88]	@ (8018954 <strtok+0x5c>)
 80188fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188fe:	681f      	ldr	r7, [r3, #0]
 8018900:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8018902:	4605      	mov	r5, r0
 8018904:	460e      	mov	r6, r1
 8018906:	b9ec      	cbnz	r4, 8018944 <strtok+0x4c>
 8018908:	2050      	movs	r0, #80	@ 0x50
 801890a:	f7fe fbab 	bl	8017064 <malloc>
 801890e:	4602      	mov	r2, r0
 8018910:	6478      	str	r0, [r7, #68]	@ 0x44
 8018912:	b920      	cbnz	r0, 801891e <strtok+0x26>
 8018914:	4b10      	ldr	r3, [pc, #64]	@ (8018958 <strtok+0x60>)
 8018916:	4811      	ldr	r0, [pc, #68]	@ (801895c <strtok+0x64>)
 8018918:	215b      	movs	r1, #91	@ 0x5b
 801891a:	f000 f90b 	bl	8018b34 <__assert_func>
 801891e:	e9c0 4400 	strd	r4, r4, [r0]
 8018922:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8018926:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801892a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801892e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8018932:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8018936:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801893a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801893e:	6184      	str	r4, [r0, #24]
 8018940:	7704      	strb	r4, [r0, #28]
 8018942:	6244      	str	r4, [r0, #36]	@ 0x24
 8018944:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018946:	4631      	mov	r1, r6
 8018948:	4628      	mov	r0, r5
 801894a:	2301      	movs	r3, #1
 801894c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018950:	f000 b806 	b.w	8018960 <__strtok_r>
 8018954:	20000494 	.word	0x20000494
 8018958:	0801c348 	.word	0x0801c348
 801895c:	0801c35f 	.word	0x0801c35f

08018960 <__strtok_r>:
 8018960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018962:	4604      	mov	r4, r0
 8018964:	b908      	cbnz	r0, 801896a <__strtok_r+0xa>
 8018966:	6814      	ldr	r4, [r2, #0]
 8018968:	b144      	cbz	r4, 801897c <__strtok_r+0x1c>
 801896a:	4620      	mov	r0, r4
 801896c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018970:	460f      	mov	r7, r1
 8018972:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018976:	b91e      	cbnz	r6, 8018980 <__strtok_r+0x20>
 8018978:	b965      	cbnz	r5, 8018994 <__strtok_r+0x34>
 801897a:	6015      	str	r5, [r2, #0]
 801897c:	2000      	movs	r0, #0
 801897e:	e005      	b.n	801898c <__strtok_r+0x2c>
 8018980:	42b5      	cmp	r5, r6
 8018982:	d1f6      	bne.n	8018972 <__strtok_r+0x12>
 8018984:	2b00      	cmp	r3, #0
 8018986:	d1f0      	bne.n	801896a <__strtok_r+0xa>
 8018988:	6014      	str	r4, [r2, #0]
 801898a:	7003      	strb	r3, [r0, #0]
 801898c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801898e:	461c      	mov	r4, r3
 8018990:	e00c      	b.n	80189ac <__strtok_r+0x4c>
 8018992:	b915      	cbnz	r5, 801899a <__strtok_r+0x3a>
 8018994:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018998:	460e      	mov	r6, r1
 801899a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801899e:	42ab      	cmp	r3, r5
 80189a0:	d1f7      	bne.n	8018992 <__strtok_r+0x32>
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d0f3      	beq.n	801898e <__strtok_r+0x2e>
 80189a6:	2300      	movs	r3, #0
 80189a8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80189ac:	6014      	str	r4, [r2, #0]
 80189ae:	e7ed      	b.n	801898c <__strtok_r+0x2c>

080189b0 <memset>:
 80189b0:	4402      	add	r2, r0
 80189b2:	4603      	mov	r3, r0
 80189b4:	4293      	cmp	r3, r2
 80189b6:	d100      	bne.n	80189ba <memset+0xa>
 80189b8:	4770      	bx	lr
 80189ba:	f803 1b01 	strb.w	r1, [r3], #1
 80189be:	e7f9      	b.n	80189b4 <memset+0x4>

080189c0 <_localeconv_r>:
 80189c0:	4800      	ldr	r0, [pc, #0]	@ (80189c4 <_localeconv_r+0x4>)
 80189c2:	4770      	bx	lr
 80189c4:	20000418 	.word	0x20000418

080189c8 <_reclaim_reent>:
 80189c8:	4b29      	ldr	r3, [pc, #164]	@ (8018a70 <_reclaim_reent+0xa8>)
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	4283      	cmp	r3, r0
 80189ce:	b570      	push	{r4, r5, r6, lr}
 80189d0:	4604      	mov	r4, r0
 80189d2:	d04b      	beq.n	8018a6c <_reclaim_reent+0xa4>
 80189d4:	69c3      	ldr	r3, [r0, #28]
 80189d6:	b1ab      	cbz	r3, 8018a04 <_reclaim_reent+0x3c>
 80189d8:	68db      	ldr	r3, [r3, #12]
 80189da:	b16b      	cbz	r3, 80189f8 <_reclaim_reent+0x30>
 80189dc:	2500      	movs	r5, #0
 80189de:	69e3      	ldr	r3, [r4, #28]
 80189e0:	68db      	ldr	r3, [r3, #12]
 80189e2:	5959      	ldr	r1, [r3, r5]
 80189e4:	2900      	cmp	r1, #0
 80189e6:	d13b      	bne.n	8018a60 <_reclaim_reent+0x98>
 80189e8:	3504      	adds	r5, #4
 80189ea:	2d80      	cmp	r5, #128	@ 0x80
 80189ec:	d1f7      	bne.n	80189de <_reclaim_reent+0x16>
 80189ee:	69e3      	ldr	r3, [r4, #28]
 80189f0:	4620      	mov	r0, r4
 80189f2:	68d9      	ldr	r1, [r3, #12]
 80189f4:	f000 ff08 	bl	8019808 <_free_r>
 80189f8:	69e3      	ldr	r3, [r4, #28]
 80189fa:	6819      	ldr	r1, [r3, #0]
 80189fc:	b111      	cbz	r1, 8018a04 <_reclaim_reent+0x3c>
 80189fe:	4620      	mov	r0, r4
 8018a00:	f000 ff02 	bl	8019808 <_free_r>
 8018a04:	6961      	ldr	r1, [r4, #20]
 8018a06:	b111      	cbz	r1, 8018a0e <_reclaim_reent+0x46>
 8018a08:	4620      	mov	r0, r4
 8018a0a:	f000 fefd 	bl	8019808 <_free_r>
 8018a0e:	69e1      	ldr	r1, [r4, #28]
 8018a10:	b111      	cbz	r1, 8018a18 <_reclaim_reent+0x50>
 8018a12:	4620      	mov	r0, r4
 8018a14:	f000 fef8 	bl	8019808 <_free_r>
 8018a18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018a1a:	b111      	cbz	r1, 8018a22 <_reclaim_reent+0x5a>
 8018a1c:	4620      	mov	r0, r4
 8018a1e:	f000 fef3 	bl	8019808 <_free_r>
 8018a22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018a24:	b111      	cbz	r1, 8018a2c <_reclaim_reent+0x64>
 8018a26:	4620      	mov	r0, r4
 8018a28:	f000 feee 	bl	8019808 <_free_r>
 8018a2c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8018a2e:	b111      	cbz	r1, 8018a36 <_reclaim_reent+0x6e>
 8018a30:	4620      	mov	r0, r4
 8018a32:	f000 fee9 	bl	8019808 <_free_r>
 8018a36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8018a38:	b111      	cbz	r1, 8018a40 <_reclaim_reent+0x78>
 8018a3a:	4620      	mov	r0, r4
 8018a3c:	f000 fee4 	bl	8019808 <_free_r>
 8018a40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8018a42:	b111      	cbz	r1, 8018a4a <_reclaim_reent+0x82>
 8018a44:	4620      	mov	r0, r4
 8018a46:	f000 fedf 	bl	8019808 <_free_r>
 8018a4a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018a4c:	b111      	cbz	r1, 8018a54 <_reclaim_reent+0x8c>
 8018a4e:	4620      	mov	r0, r4
 8018a50:	f000 feda 	bl	8019808 <_free_r>
 8018a54:	6a23      	ldr	r3, [r4, #32]
 8018a56:	b14b      	cbz	r3, 8018a6c <_reclaim_reent+0xa4>
 8018a58:	4620      	mov	r0, r4
 8018a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a5e:	4718      	bx	r3
 8018a60:	680e      	ldr	r6, [r1, #0]
 8018a62:	4620      	mov	r0, r4
 8018a64:	f000 fed0 	bl	8019808 <_free_r>
 8018a68:	4631      	mov	r1, r6
 8018a6a:	e7bb      	b.n	80189e4 <_reclaim_reent+0x1c>
 8018a6c:	bd70      	pop	{r4, r5, r6, pc}
 8018a6e:	bf00      	nop
 8018a70:	20000494 	.word	0x20000494

08018a74 <_sbrk_r>:
 8018a74:	b538      	push	{r3, r4, r5, lr}
 8018a76:	4d06      	ldr	r5, [pc, #24]	@ (8018a90 <_sbrk_r+0x1c>)
 8018a78:	2300      	movs	r3, #0
 8018a7a:	4604      	mov	r4, r0
 8018a7c:	4608      	mov	r0, r1
 8018a7e:	602b      	str	r3, [r5, #0]
 8018a80:	f7eb fc5a 	bl	8004338 <_sbrk>
 8018a84:	1c43      	adds	r3, r0, #1
 8018a86:	d102      	bne.n	8018a8e <_sbrk_r+0x1a>
 8018a88:	682b      	ldr	r3, [r5, #0]
 8018a8a:	b103      	cbz	r3, 8018a8e <_sbrk_r+0x1a>
 8018a8c:	6023      	str	r3, [r4, #0]
 8018a8e:	bd38      	pop	{r3, r4, r5, pc}
 8018a90:	20007800 	.word	0x20007800

08018a94 <__errno>:
 8018a94:	4b01      	ldr	r3, [pc, #4]	@ (8018a9c <__errno+0x8>)
 8018a96:	6818      	ldr	r0, [r3, #0]
 8018a98:	4770      	bx	lr
 8018a9a:	bf00      	nop
 8018a9c:	20000494 	.word	0x20000494

08018aa0 <__libc_init_array>:
 8018aa0:	b570      	push	{r4, r5, r6, lr}
 8018aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8018ad8 <__libc_init_array+0x38>)
 8018aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8018adc <__libc_init_array+0x3c>)
 8018aa6:	1b64      	subs	r4, r4, r5
 8018aa8:	10a4      	asrs	r4, r4, #2
 8018aaa:	2600      	movs	r6, #0
 8018aac:	42a6      	cmp	r6, r4
 8018aae:	d109      	bne.n	8018ac4 <__libc_init_array+0x24>
 8018ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8018ae0 <__libc_init_array+0x40>)
 8018ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8018ae4 <__libc_init_array+0x44>)
 8018ab4:	f002 fcec 	bl	801b490 <_init>
 8018ab8:	1b64      	subs	r4, r4, r5
 8018aba:	10a4      	asrs	r4, r4, #2
 8018abc:	2600      	movs	r6, #0
 8018abe:	42a6      	cmp	r6, r4
 8018ac0:	d105      	bne.n	8018ace <__libc_init_array+0x2e>
 8018ac2:	bd70      	pop	{r4, r5, r6, pc}
 8018ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ac8:	4798      	blx	r3
 8018aca:	3601      	adds	r6, #1
 8018acc:	e7ee      	b.n	8018aac <__libc_init_array+0xc>
 8018ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ad2:	4798      	blx	r3
 8018ad4:	3601      	adds	r6, #1
 8018ad6:	e7f2      	b.n	8018abe <__libc_init_array+0x1e>
 8018ad8:	0801c748 	.word	0x0801c748
 8018adc:	0801c748 	.word	0x0801c748
 8018ae0:	0801c748 	.word	0x0801c748
 8018ae4:	0801c74c 	.word	0x0801c74c

08018ae8 <__retarget_lock_init_recursive>:
 8018ae8:	4770      	bx	lr

08018aea <__retarget_lock_acquire_recursive>:
 8018aea:	4770      	bx	lr

08018aec <__retarget_lock_release_recursive>:
 8018aec:	4770      	bx	lr

08018aee <__aeabi_memclr>:
 8018aee:	2200      	movs	r2, #0
 8018af0:	f7e9 bd49 	b.w	8002586 <__aeabi_memset>

08018af4 <memcpy>:
 8018af4:	440a      	add	r2, r1
 8018af6:	4291      	cmp	r1, r2
 8018af8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8018afc:	d100      	bne.n	8018b00 <memcpy+0xc>
 8018afe:	4770      	bx	lr
 8018b00:	b510      	push	{r4, lr}
 8018b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018b0a:	4291      	cmp	r1, r2
 8018b0c:	d1f9      	bne.n	8018b02 <memcpy+0xe>
 8018b0e:	bd10      	pop	{r4, pc}

08018b10 <__aeabi_memcpy>:
 8018b10:	f7ff bff0 	b.w	8018af4 <memcpy>
 8018b14:	0000      	movs	r0, r0
	...

08018b18 <nan>:
 8018b18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018b20 <nan+0x8>
 8018b1c:	4770      	bx	lr
 8018b1e:	bf00      	nop
 8018b20:	00000000 	.word	0x00000000
 8018b24:	7ff80000 	.word	0x7ff80000

08018b28 <nanf>:
 8018b28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018b30 <nanf+0x8>
 8018b2c:	4770      	bx	lr
 8018b2e:	bf00      	nop
 8018b30:	7fc00000 	.word	0x7fc00000

08018b34 <__assert_func>:
 8018b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018b36:	4614      	mov	r4, r2
 8018b38:	461a      	mov	r2, r3
 8018b3a:	4b09      	ldr	r3, [pc, #36]	@ (8018b60 <__assert_func+0x2c>)
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	4605      	mov	r5, r0
 8018b40:	68d8      	ldr	r0, [r3, #12]
 8018b42:	b954      	cbnz	r4, 8018b5a <__assert_func+0x26>
 8018b44:	4b07      	ldr	r3, [pc, #28]	@ (8018b64 <__assert_func+0x30>)
 8018b46:	461c      	mov	r4, r3
 8018b48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018b4c:	9100      	str	r1, [sp, #0]
 8018b4e:	462b      	mov	r3, r5
 8018b50:	4905      	ldr	r1, [pc, #20]	@ (8018b68 <__assert_func+0x34>)
 8018b52:	f002 fa29 	bl	801afa8 <fiprintf>
 8018b56:	f002 fbed 	bl	801b334 <abort>
 8018b5a:	4b04      	ldr	r3, [pc, #16]	@ (8018b6c <__assert_func+0x38>)
 8018b5c:	e7f4      	b.n	8018b48 <__assert_func+0x14>
 8018b5e:	bf00      	nop
 8018b60:	20000494 	.word	0x20000494
 8018b64:	0801c4fd 	.word	0x0801c4fd
 8018b68:	0801c4cf 	.word	0x0801c4cf
 8018b6c:	0801c4c2 	.word	0x0801c4c2

08018b70 <quorem>:
 8018b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b74:	6903      	ldr	r3, [r0, #16]
 8018b76:	690c      	ldr	r4, [r1, #16]
 8018b78:	42a3      	cmp	r3, r4
 8018b7a:	4607      	mov	r7, r0
 8018b7c:	db7e      	blt.n	8018c7c <quorem+0x10c>
 8018b7e:	3c01      	subs	r4, #1
 8018b80:	f101 0814 	add.w	r8, r1, #20
 8018b84:	00a3      	lsls	r3, r4, #2
 8018b86:	f100 0514 	add.w	r5, r0, #20
 8018b8a:	9300      	str	r3, [sp, #0]
 8018b8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018b90:	9301      	str	r3, [sp, #4]
 8018b92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018b96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018b9a:	3301      	adds	r3, #1
 8018b9c:	429a      	cmp	r2, r3
 8018b9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018ba2:	fbb2 f6f3 	udiv	r6, r2, r3
 8018ba6:	d32e      	bcc.n	8018c06 <quorem+0x96>
 8018ba8:	f04f 0a00 	mov.w	sl, #0
 8018bac:	46c4      	mov	ip, r8
 8018bae:	46ae      	mov	lr, r5
 8018bb0:	46d3      	mov	fp, sl
 8018bb2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018bb6:	b298      	uxth	r0, r3
 8018bb8:	fb06 a000 	mla	r0, r6, r0, sl
 8018bbc:	0c02      	lsrs	r2, r0, #16
 8018bbe:	0c1b      	lsrs	r3, r3, #16
 8018bc0:	fb06 2303 	mla	r3, r6, r3, r2
 8018bc4:	f8de 2000 	ldr.w	r2, [lr]
 8018bc8:	b280      	uxth	r0, r0
 8018bca:	b292      	uxth	r2, r2
 8018bcc:	1a12      	subs	r2, r2, r0
 8018bce:	445a      	add	r2, fp
 8018bd0:	f8de 0000 	ldr.w	r0, [lr]
 8018bd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018bd8:	b29b      	uxth	r3, r3
 8018bda:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8018bde:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8018be2:	b292      	uxth	r2, r2
 8018be4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8018be8:	45e1      	cmp	r9, ip
 8018bea:	f84e 2b04 	str.w	r2, [lr], #4
 8018bee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8018bf2:	d2de      	bcs.n	8018bb2 <quorem+0x42>
 8018bf4:	9b00      	ldr	r3, [sp, #0]
 8018bf6:	58eb      	ldr	r3, [r5, r3]
 8018bf8:	b92b      	cbnz	r3, 8018c06 <quorem+0x96>
 8018bfa:	9b01      	ldr	r3, [sp, #4]
 8018bfc:	3b04      	subs	r3, #4
 8018bfe:	429d      	cmp	r5, r3
 8018c00:	461a      	mov	r2, r3
 8018c02:	d32f      	bcc.n	8018c64 <quorem+0xf4>
 8018c04:	613c      	str	r4, [r7, #16]
 8018c06:	4638      	mov	r0, r7
 8018c08:	f001 ff9c 	bl	801ab44 <__mcmp>
 8018c0c:	2800      	cmp	r0, #0
 8018c0e:	db25      	blt.n	8018c5c <quorem+0xec>
 8018c10:	4629      	mov	r1, r5
 8018c12:	2000      	movs	r0, #0
 8018c14:	f858 2b04 	ldr.w	r2, [r8], #4
 8018c18:	f8d1 c000 	ldr.w	ip, [r1]
 8018c1c:	fa1f fe82 	uxth.w	lr, r2
 8018c20:	fa1f f38c 	uxth.w	r3, ip
 8018c24:	eba3 030e 	sub.w	r3, r3, lr
 8018c28:	4403      	add	r3, r0
 8018c2a:	0c12      	lsrs	r2, r2, #16
 8018c2c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8018c30:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8018c34:	b29b      	uxth	r3, r3
 8018c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018c3a:	45c1      	cmp	r9, r8
 8018c3c:	f841 3b04 	str.w	r3, [r1], #4
 8018c40:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018c44:	d2e6      	bcs.n	8018c14 <quorem+0xa4>
 8018c46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018c4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018c4e:	b922      	cbnz	r2, 8018c5a <quorem+0xea>
 8018c50:	3b04      	subs	r3, #4
 8018c52:	429d      	cmp	r5, r3
 8018c54:	461a      	mov	r2, r3
 8018c56:	d30b      	bcc.n	8018c70 <quorem+0x100>
 8018c58:	613c      	str	r4, [r7, #16]
 8018c5a:	3601      	adds	r6, #1
 8018c5c:	4630      	mov	r0, r6
 8018c5e:	b003      	add	sp, #12
 8018c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c64:	6812      	ldr	r2, [r2, #0]
 8018c66:	3b04      	subs	r3, #4
 8018c68:	2a00      	cmp	r2, #0
 8018c6a:	d1cb      	bne.n	8018c04 <quorem+0x94>
 8018c6c:	3c01      	subs	r4, #1
 8018c6e:	e7c6      	b.n	8018bfe <quorem+0x8e>
 8018c70:	6812      	ldr	r2, [r2, #0]
 8018c72:	3b04      	subs	r3, #4
 8018c74:	2a00      	cmp	r2, #0
 8018c76:	d1ef      	bne.n	8018c58 <quorem+0xe8>
 8018c78:	3c01      	subs	r4, #1
 8018c7a:	e7ea      	b.n	8018c52 <quorem+0xe2>
 8018c7c:	2000      	movs	r0, #0
 8018c7e:	e7ee      	b.n	8018c5e <quorem+0xee>

08018c80 <_dtoa_r>:
 8018c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c84:	69c7      	ldr	r7, [r0, #28]
 8018c86:	b099      	sub	sp, #100	@ 0x64
 8018c88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018c8c:	ec55 4b10 	vmov	r4, r5, d0
 8018c90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8018c92:	9109      	str	r1, [sp, #36]	@ 0x24
 8018c94:	4683      	mov	fp, r0
 8018c96:	920e      	str	r2, [sp, #56]	@ 0x38
 8018c98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018c9a:	b97f      	cbnz	r7, 8018cbc <_dtoa_r+0x3c>
 8018c9c:	2010      	movs	r0, #16
 8018c9e:	f7fe f9e1 	bl	8017064 <malloc>
 8018ca2:	4602      	mov	r2, r0
 8018ca4:	f8cb 001c 	str.w	r0, [fp, #28]
 8018ca8:	b920      	cbnz	r0, 8018cb4 <_dtoa_r+0x34>
 8018caa:	4ba7      	ldr	r3, [pc, #668]	@ (8018f48 <_dtoa_r+0x2c8>)
 8018cac:	21ef      	movs	r1, #239	@ 0xef
 8018cae:	48a7      	ldr	r0, [pc, #668]	@ (8018f4c <_dtoa_r+0x2cc>)
 8018cb0:	f7ff ff40 	bl	8018b34 <__assert_func>
 8018cb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8018cb8:	6007      	str	r7, [r0, #0]
 8018cba:	60c7      	str	r7, [r0, #12]
 8018cbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018cc0:	6819      	ldr	r1, [r3, #0]
 8018cc2:	b159      	cbz	r1, 8018cdc <_dtoa_r+0x5c>
 8018cc4:	685a      	ldr	r2, [r3, #4]
 8018cc6:	604a      	str	r2, [r1, #4]
 8018cc8:	2301      	movs	r3, #1
 8018cca:	4093      	lsls	r3, r2
 8018ccc:	608b      	str	r3, [r1, #8]
 8018cce:	4658      	mov	r0, fp
 8018cd0:	f001 fcb4 	bl	801a63c <_Bfree>
 8018cd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018cd8:	2200      	movs	r2, #0
 8018cda:	601a      	str	r2, [r3, #0]
 8018cdc:	1e2b      	subs	r3, r5, #0
 8018cde:	bfb9      	ittee	lt
 8018ce0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8018ce4:	9303      	strlt	r3, [sp, #12]
 8018ce6:	2300      	movge	r3, #0
 8018ce8:	6033      	strge	r3, [r6, #0]
 8018cea:	9f03      	ldr	r7, [sp, #12]
 8018cec:	4b98      	ldr	r3, [pc, #608]	@ (8018f50 <_dtoa_r+0x2d0>)
 8018cee:	bfbc      	itt	lt
 8018cf0:	2201      	movlt	r2, #1
 8018cf2:	6032      	strlt	r2, [r6, #0]
 8018cf4:	43bb      	bics	r3, r7
 8018cf6:	d112      	bne.n	8018d1e <_dtoa_r+0x9e>
 8018cf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018cfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8018cfe:	6013      	str	r3, [r2, #0]
 8018d00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018d04:	4323      	orrs	r3, r4
 8018d06:	f000 854d 	beq.w	80197a4 <_dtoa_r+0xb24>
 8018d0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018d0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8018f64 <_dtoa_r+0x2e4>
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	f000 854f 	beq.w	80197b4 <_dtoa_r+0xb34>
 8018d16:	f10a 0303 	add.w	r3, sl, #3
 8018d1a:	f000 bd49 	b.w	80197b0 <_dtoa_r+0xb30>
 8018d1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018d22:	2200      	movs	r2, #0
 8018d24:	ec51 0b17 	vmov	r0, r1, d7
 8018d28:	2300      	movs	r3, #0
 8018d2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8018d2e:	f7ea f8fd 	bl	8002f2c <__aeabi_dcmpeq>
 8018d32:	4680      	mov	r8, r0
 8018d34:	b158      	cbz	r0, 8018d4e <_dtoa_r+0xce>
 8018d36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018d38:	2301      	movs	r3, #1
 8018d3a:	6013      	str	r3, [r2, #0]
 8018d3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018d3e:	b113      	cbz	r3, 8018d46 <_dtoa_r+0xc6>
 8018d40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018d42:	4b84      	ldr	r3, [pc, #528]	@ (8018f54 <_dtoa_r+0x2d4>)
 8018d44:	6013      	str	r3, [r2, #0]
 8018d46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8018f68 <_dtoa_r+0x2e8>
 8018d4a:	f000 bd33 	b.w	80197b4 <_dtoa_r+0xb34>
 8018d4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018d52:	aa16      	add	r2, sp, #88	@ 0x58
 8018d54:	a917      	add	r1, sp, #92	@ 0x5c
 8018d56:	4658      	mov	r0, fp
 8018d58:	f002 f814 	bl	801ad84 <__d2b>
 8018d5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8018d60:	4681      	mov	r9, r0
 8018d62:	2e00      	cmp	r6, #0
 8018d64:	d077      	beq.n	8018e56 <_dtoa_r+0x1d6>
 8018d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018d68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8018d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018d74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8018d78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8018d7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8018d80:	4619      	mov	r1, r3
 8018d82:	2200      	movs	r2, #0
 8018d84:	4b74      	ldr	r3, [pc, #464]	@ (8018f58 <_dtoa_r+0x2d8>)
 8018d86:	f7e9 fcb1 	bl	80026ec <__aeabi_dsub>
 8018d8a:	a369      	add	r3, pc, #420	@ (adr r3, 8018f30 <_dtoa_r+0x2b0>)
 8018d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d90:	f7e9 fe64 	bl	8002a5c <__aeabi_dmul>
 8018d94:	a368      	add	r3, pc, #416	@ (adr r3, 8018f38 <_dtoa_r+0x2b8>)
 8018d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d9a:	f7e9 fca9 	bl	80026f0 <__adddf3>
 8018d9e:	4604      	mov	r4, r0
 8018da0:	4630      	mov	r0, r6
 8018da2:	460d      	mov	r5, r1
 8018da4:	f7e9 fdf0 	bl	8002988 <__aeabi_i2d>
 8018da8:	a365      	add	r3, pc, #404	@ (adr r3, 8018f40 <_dtoa_r+0x2c0>)
 8018daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dae:	f7e9 fe55 	bl	8002a5c <__aeabi_dmul>
 8018db2:	4602      	mov	r2, r0
 8018db4:	460b      	mov	r3, r1
 8018db6:	4620      	mov	r0, r4
 8018db8:	4629      	mov	r1, r5
 8018dba:	f7e9 fc99 	bl	80026f0 <__adddf3>
 8018dbe:	4604      	mov	r4, r0
 8018dc0:	460d      	mov	r5, r1
 8018dc2:	f7ea f8fb 	bl	8002fbc <__aeabi_d2iz>
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	4607      	mov	r7, r0
 8018dca:	2300      	movs	r3, #0
 8018dcc:	4620      	mov	r0, r4
 8018dce:	4629      	mov	r1, r5
 8018dd0:	f7ea f8b6 	bl	8002f40 <__aeabi_dcmplt>
 8018dd4:	b140      	cbz	r0, 8018de8 <_dtoa_r+0x168>
 8018dd6:	4638      	mov	r0, r7
 8018dd8:	f7e9 fdd6 	bl	8002988 <__aeabi_i2d>
 8018ddc:	4622      	mov	r2, r4
 8018dde:	462b      	mov	r3, r5
 8018de0:	f7ea f8a4 	bl	8002f2c <__aeabi_dcmpeq>
 8018de4:	b900      	cbnz	r0, 8018de8 <_dtoa_r+0x168>
 8018de6:	3f01      	subs	r7, #1
 8018de8:	2f16      	cmp	r7, #22
 8018dea:	d851      	bhi.n	8018e90 <_dtoa_r+0x210>
 8018dec:	4b5b      	ldr	r3, [pc, #364]	@ (8018f5c <_dtoa_r+0x2dc>)
 8018dee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018dfa:	f7ea f8a1 	bl	8002f40 <__aeabi_dcmplt>
 8018dfe:	2800      	cmp	r0, #0
 8018e00:	d048      	beq.n	8018e94 <_dtoa_r+0x214>
 8018e02:	3f01      	subs	r7, #1
 8018e04:	2300      	movs	r3, #0
 8018e06:	9312      	str	r3, [sp, #72]	@ 0x48
 8018e08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018e0a:	1b9b      	subs	r3, r3, r6
 8018e0c:	1e5a      	subs	r2, r3, #1
 8018e0e:	bf44      	itt	mi
 8018e10:	f1c3 0801 	rsbmi	r8, r3, #1
 8018e14:	2300      	movmi	r3, #0
 8018e16:	9208      	str	r2, [sp, #32]
 8018e18:	bf54      	ite	pl
 8018e1a:	f04f 0800 	movpl.w	r8, #0
 8018e1e:	9308      	strmi	r3, [sp, #32]
 8018e20:	2f00      	cmp	r7, #0
 8018e22:	db39      	blt.n	8018e98 <_dtoa_r+0x218>
 8018e24:	9b08      	ldr	r3, [sp, #32]
 8018e26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8018e28:	443b      	add	r3, r7
 8018e2a:	9308      	str	r3, [sp, #32]
 8018e2c:	2300      	movs	r3, #0
 8018e2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018e32:	2b09      	cmp	r3, #9
 8018e34:	d864      	bhi.n	8018f00 <_dtoa_r+0x280>
 8018e36:	2b05      	cmp	r3, #5
 8018e38:	bfc4      	itt	gt
 8018e3a:	3b04      	subgt	r3, #4
 8018e3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8018e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018e40:	f1a3 0302 	sub.w	r3, r3, #2
 8018e44:	bfcc      	ite	gt
 8018e46:	2400      	movgt	r4, #0
 8018e48:	2401      	movle	r4, #1
 8018e4a:	2b03      	cmp	r3, #3
 8018e4c:	d863      	bhi.n	8018f16 <_dtoa_r+0x296>
 8018e4e:	e8df f003 	tbb	[pc, r3]
 8018e52:	372a      	.short	0x372a
 8018e54:	5535      	.short	0x5535
 8018e56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8018e5a:	441e      	add	r6, r3
 8018e5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8018e60:	2b20      	cmp	r3, #32
 8018e62:	bfc1      	itttt	gt
 8018e64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8018e68:	409f      	lslgt	r7, r3
 8018e6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8018e6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8018e72:	bfd6      	itet	le
 8018e74:	f1c3 0320 	rsble	r3, r3, #32
 8018e78:	ea47 0003 	orrgt.w	r0, r7, r3
 8018e7c:	fa04 f003 	lslle.w	r0, r4, r3
 8018e80:	f7e9 fd72 	bl	8002968 <__aeabi_ui2d>
 8018e84:	2201      	movs	r2, #1
 8018e86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8018e8a:	3e01      	subs	r6, #1
 8018e8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8018e8e:	e777      	b.n	8018d80 <_dtoa_r+0x100>
 8018e90:	2301      	movs	r3, #1
 8018e92:	e7b8      	b.n	8018e06 <_dtoa_r+0x186>
 8018e94:	9012      	str	r0, [sp, #72]	@ 0x48
 8018e96:	e7b7      	b.n	8018e08 <_dtoa_r+0x188>
 8018e98:	427b      	negs	r3, r7
 8018e9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	eba8 0807 	sub.w	r8, r8, r7
 8018ea2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018ea4:	e7c4      	b.n	8018e30 <_dtoa_r+0x1b0>
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	dc35      	bgt.n	8018f1c <_dtoa_r+0x29c>
 8018eb0:	2301      	movs	r3, #1
 8018eb2:	9300      	str	r3, [sp, #0]
 8018eb4:	9307      	str	r3, [sp, #28]
 8018eb6:	461a      	mov	r2, r3
 8018eb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8018eba:	e00b      	b.n	8018ed4 <_dtoa_r+0x254>
 8018ebc:	2301      	movs	r3, #1
 8018ebe:	e7f3      	b.n	8018ea8 <_dtoa_r+0x228>
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018ec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018ec6:	18fb      	adds	r3, r7, r3
 8018ec8:	9300      	str	r3, [sp, #0]
 8018eca:	3301      	adds	r3, #1
 8018ecc:	2b01      	cmp	r3, #1
 8018ece:	9307      	str	r3, [sp, #28]
 8018ed0:	bfb8      	it	lt
 8018ed2:	2301      	movlt	r3, #1
 8018ed4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8018ed8:	2100      	movs	r1, #0
 8018eda:	2204      	movs	r2, #4
 8018edc:	f102 0514 	add.w	r5, r2, #20
 8018ee0:	429d      	cmp	r5, r3
 8018ee2:	d91f      	bls.n	8018f24 <_dtoa_r+0x2a4>
 8018ee4:	6041      	str	r1, [r0, #4]
 8018ee6:	4658      	mov	r0, fp
 8018ee8:	f001 fb68 	bl	801a5bc <_Balloc>
 8018eec:	4682      	mov	sl, r0
 8018eee:	2800      	cmp	r0, #0
 8018ef0:	d13c      	bne.n	8018f6c <_dtoa_r+0x2ec>
 8018ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8018f60 <_dtoa_r+0x2e0>)
 8018ef4:	4602      	mov	r2, r0
 8018ef6:	f240 11af 	movw	r1, #431	@ 0x1af
 8018efa:	e6d8      	b.n	8018cae <_dtoa_r+0x2e>
 8018efc:	2301      	movs	r3, #1
 8018efe:	e7e0      	b.n	8018ec2 <_dtoa_r+0x242>
 8018f00:	2401      	movs	r4, #1
 8018f02:	2300      	movs	r3, #0
 8018f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8018f06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018f08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018f0c:	9300      	str	r3, [sp, #0]
 8018f0e:	9307      	str	r3, [sp, #28]
 8018f10:	2200      	movs	r2, #0
 8018f12:	2312      	movs	r3, #18
 8018f14:	e7d0      	b.n	8018eb8 <_dtoa_r+0x238>
 8018f16:	2301      	movs	r3, #1
 8018f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018f1a:	e7f5      	b.n	8018f08 <_dtoa_r+0x288>
 8018f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f1e:	9300      	str	r3, [sp, #0]
 8018f20:	9307      	str	r3, [sp, #28]
 8018f22:	e7d7      	b.n	8018ed4 <_dtoa_r+0x254>
 8018f24:	3101      	adds	r1, #1
 8018f26:	0052      	lsls	r2, r2, #1
 8018f28:	e7d8      	b.n	8018edc <_dtoa_r+0x25c>
 8018f2a:	bf00      	nop
 8018f2c:	f3af 8000 	nop.w
 8018f30:	636f4361 	.word	0x636f4361
 8018f34:	3fd287a7 	.word	0x3fd287a7
 8018f38:	8b60c8b3 	.word	0x8b60c8b3
 8018f3c:	3fc68a28 	.word	0x3fc68a28
 8018f40:	509f79fb 	.word	0x509f79fb
 8018f44:	3fd34413 	.word	0x3fd34413
 8018f48:	0801c348 	.word	0x0801c348
 8018f4c:	0801c50b 	.word	0x0801c50b
 8018f50:	7ff00000 	.word	0x7ff00000
 8018f54:	0801c2c9 	.word	0x0801c2c9
 8018f58:	3ff80000 	.word	0x3ff80000
 8018f5c:	0801c678 	.word	0x0801c678
 8018f60:	0801c563 	.word	0x0801c563
 8018f64:	0801c507 	.word	0x0801c507
 8018f68:	0801c2c8 	.word	0x0801c2c8
 8018f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018f70:	6018      	str	r0, [r3, #0]
 8018f72:	9b07      	ldr	r3, [sp, #28]
 8018f74:	2b0e      	cmp	r3, #14
 8018f76:	f200 80a4 	bhi.w	80190c2 <_dtoa_r+0x442>
 8018f7a:	2c00      	cmp	r4, #0
 8018f7c:	f000 80a1 	beq.w	80190c2 <_dtoa_r+0x442>
 8018f80:	2f00      	cmp	r7, #0
 8018f82:	dd33      	ble.n	8018fec <_dtoa_r+0x36c>
 8018f84:	4bad      	ldr	r3, [pc, #692]	@ (801923c <_dtoa_r+0x5bc>)
 8018f86:	f007 020f 	and.w	r2, r7, #15
 8018f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018f8e:	ed93 7b00 	vldr	d7, [r3]
 8018f92:	05f8      	lsls	r0, r7, #23
 8018f94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018f98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8018f9c:	d516      	bpl.n	8018fcc <_dtoa_r+0x34c>
 8018f9e:	4ba8      	ldr	r3, [pc, #672]	@ (8019240 <_dtoa_r+0x5c0>)
 8018fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018fa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018fa8:	f7e9 fe82 	bl	8002cb0 <__aeabi_ddiv>
 8018fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018fb0:	f004 040f 	and.w	r4, r4, #15
 8018fb4:	2603      	movs	r6, #3
 8018fb6:	4da2      	ldr	r5, [pc, #648]	@ (8019240 <_dtoa_r+0x5c0>)
 8018fb8:	b954      	cbnz	r4, 8018fd0 <_dtoa_r+0x350>
 8018fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018fc2:	f7e9 fe75 	bl	8002cb0 <__aeabi_ddiv>
 8018fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018fca:	e028      	b.n	801901e <_dtoa_r+0x39e>
 8018fcc:	2602      	movs	r6, #2
 8018fce:	e7f2      	b.n	8018fb6 <_dtoa_r+0x336>
 8018fd0:	07e1      	lsls	r1, r4, #31
 8018fd2:	d508      	bpl.n	8018fe6 <_dtoa_r+0x366>
 8018fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018fdc:	f7e9 fd3e 	bl	8002a5c <__aeabi_dmul>
 8018fe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018fe4:	3601      	adds	r6, #1
 8018fe6:	1064      	asrs	r4, r4, #1
 8018fe8:	3508      	adds	r5, #8
 8018fea:	e7e5      	b.n	8018fb8 <_dtoa_r+0x338>
 8018fec:	f000 80d2 	beq.w	8019194 <_dtoa_r+0x514>
 8018ff0:	427c      	negs	r4, r7
 8018ff2:	4b92      	ldr	r3, [pc, #584]	@ (801923c <_dtoa_r+0x5bc>)
 8018ff4:	4d92      	ldr	r5, [pc, #584]	@ (8019240 <_dtoa_r+0x5c0>)
 8018ff6:	f004 020f 	and.w	r2, r4, #15
 8018ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019002:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019006:	f7e9 fd29 	bl	8002a5c <__aeabi_dmul>
 801900a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801900e:	1124      	asrs	r4, r4, #4
 8019010:	2300      	movs	r3, #0
 8019012:	2602      	movs	r6, #2
 8019014:	2c00      	cmp	r4, #0
 8019016:	f040 80b2 	bne.w	801917e <_dtoa_r+0x4fe>
 801901a:	2b00      	cmp	r3, #0
 801901c:	d1d3      	bne.n	8018fc6 <_dtoa_r+0x346>
 801901e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019020:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8019024:	2b00      	cmp	r3, #0
 8019026:	f000 80b7 	beq.w	8019198 <_dtoa_r+0x518>
 801902a:	4b86      	ldr	r3, [pc, #536]	@ (8019244 <_dtoa_r+0x5c4>)
 801902c:	2200      	movs	r2, #0
 801902e:	4620      	mov	r0, r4
 8019030:	4629      	mov	r1, r5
 8019032:	f7e9 ff85 	bl	8002f40 <__aeabi_dcmplt>
 8019036:	2800      	cmp	r0, #0
 8019038:	f000 80ae 	beq.w	8019198 <_dtoa_r+0x518>
 801903c:	9b07      	ldr	r3, [sp, #28]
 801903e:	2b00      	cmp	r3, #0
 8019040:	f000 80aa 	beq.w	8019198 <_dtoa_r+0x518>
 8019044:	9b00      	ldr	r3, [sp, #0]
 8019046:	2b00      	cmp	r3, #0
 8019048:	dd37      	ble.n	80190ba <_dtoa_r+0x43a>
 801904a:	1e7b      	subs	r3, r7, #1
 801904c:	9304      	str	r3, [sp, #16]
 801904e:	4620      	mov	r0, r4
 8019050:	4b7d      	ldr	r3, [pc, #500]	@ (8019248 <_dtoa_r+0x5c8>)
 8019052:	2200      	movs	r2, #0
 8019054:	4629      	mov	r1, r5
 8019056:	f7e9 fd01 	bl	8002a5c <__aeabi_dmul>
 801905a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801905e:	9c00      	ldr	r4, [sp, #0]
 8019060:	3601      	adds	r6, #1
 8019062:	4630      	mov	r0, r6
 8019064:	f7e9 fc90 	bl	8002988 <__aeabi_i2d>
 8019068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801906c:	f7e9 fcf6 	bl	8002a5c <__aeabi_dmul>
 8019070:	4b76      	ldr	r3, [pc, #472]	@ (801924c <_dtoa_r+0x5cc>)
 8019072:	2200      	movs	r2, #0
 8019074:	f7e9 fb3c 	bl	80026f0 <__adddf3>
 8019078:	4605      	mov	r5, r0
 801907a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801907e:	2c00      	cmp	r4, #0
 8019080:	f040 808d 	bne.w	801919e <_dtoa_r+0x51e>
 8019084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019088:	4b71      	ldr	r3, [pc, #452]	@ (8019250 <_dtoa_r+0x5d0>)
 801908a:	2200      	movs	r2, #0
 801908c:	f7e9 fb2e 	bl	80026ec <__aeabi_dsub>
 8019090:	4602      	mov	r2, r0
 8019092:	460b      	mov	r3, r1
 8019094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019098:	462a      	mov	r2, r5
 801909a:	4633      	mov	r3, r6
 801909c:	f7e9 ff6e 	bl	8002f7c <__aeabi_dcmpgt>
 80190a0:	2800      	cmp	r0, #0
 80190a2:	f040 828b 	bne.w	80195bc <_dtoa_r+0x93c>
 80190a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80190aa:	462a      	mov	r2, r5
 80190ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80190b0:	f7e9 ff46 	bl	8002f40 <__aeabi_dcmplt>
 80190b4:	2800      	cmp	r0, #0
 80190b6:	f040 8128 	bne.w	801930a <_dtoa_r+0x68a>
 80190ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80190be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80190c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	f2c0 815a 	blt.w	801937e <_dtoa_r+0x6fe>
 80190ca:	2f0e      	cmp	r7, #14
 80190cc:	f300 8157 	bgt.w	801937e <_dtoa_r+0x6fe>
 80190d0:	4b5a      	ldr	r3, [pc, #360]	@ (801923c <_dtoa_r+0x5bc>)
 80190d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80190d6:	ed93 7b00 	vldr	d7, [r3]
 80190da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80190dc:	2b00      	cmp	r3, #0
 80190de:	ed8d 7b00 	vstr	d7, [sp]
 80190e2:	da03      	bge.n	80190ec <_dtoa_r+0x46c>
 80190e4:	9b07      	ldr	r3, [sp, #28]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	f340 8101 	ble.w	80192ee <_dtoa_r+0x66e>
 80190ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80190f0:	4656      	mov	r6, sl
 80190f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80190f6:	4620      	mov	r0, r4
 80190f8:	4629      	mov	r1, r5
 80190fa:	f7e9 fdd9 	bl	8002cb0 <__aeabi_ddiv>
 80190fe:	f7e9 ff5d 	bl	8002fbc <__aeabi_d2iz>
 8019102:	4680      	mov	r8, r0
 8019104:	f7e9 fc40 	bl	8002988 <__aeabi_i2d>
 8019108:	e9dd 2300 	ldrd	r2, r3, [sp]
 801910c:	f7e9 fca6 	bl	8002a5c <__aeabi_dmul>
 8019110:	4602      	mov	r2, r0
 8019112:	460b      	mov	r3, r1
 8019114:	4620      	mov	r0, r4
 8019116:	4629      	mov	r1, r5
 8019118:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801911c:	f7e9 fae6 	bl	80026ec <__aeabi_dsub>
 8019120:	f806 4b01 	strb.w	r4, [r6], #1
 8019124:	9d07      	ldr	r5, [sp, #28]
 8019126:	eba6 040a 	sub.w	r4, r6, sl
 801912a:	42a5      	cmp	r5, r4
 801912c:	4602      	mov	r2, r0
 801912e:	460b      	mov	r3, r1
 8019130:	f040 8117 	bne.w	8019362 <_dtoa_r+0x6e2>
 8019134:	f7e9 fadc 	bl	80026f0 <__adddf3>
 8019138:	e9dd 2300 	ldrd	r2, r3, [sp]
 801913c:	4604      	mov	r4, r0
 801913e:	460d      	mov	r5, r1
 8019140:	f7e9 ff1c 	bl	8002f7c <__aeabi_dcmpgt>
 8019144:	2800      	cmp	r0, #0
 8019146:	f040 80f9 	bne.w	801933c <_dtoa_r+0x6bc>
 801914a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801914e:	4620      	mov	r0, r4
 8019150:	4629      	mov	r1, r5
 8019152:	f7e9 feeb 	bl	8002f2c <__aeabi_dcmpeq>
 8019156:	b118      	cbz	r0, 8019160 <_dtoa_r+0x4e0>
 8019158:	f018 0f01 	tst.w	r8, #1
 801915c:	f040 80ee 	bne.w	801933c <_dtoa_r+0x6bc>
 8019160:	4649      	mov	r1, r9
 8019162:	4658      	mov	r0, fp
 8019164:	f001 fa6a 	bl	801a63c <_Bfree>
 8019168:	2300      	movs	r3, #0
 801916a:	7033      	strb	r3, [r6, #0]
 801916c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801916e:	3701      	adds	r7, #1
 8019170:	601f      	str	r7, [r3, #0]
 8019172:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8019174:	2b00      	cmp	r3, #0
 8019176:	f000 831d 	beq.w	80197b4 <_dtoa_r+0xb34>
 801917a:	601e      	str	r6, [r3, #0]
 801917c:	e31a      	b.n	80197b4 <_dtoa_r+0xb34>
 801917e:	07e2      	lsls	r2, r4, #31
 8019180:	d505      	bpl.n	801918e <_dtoa_r+0x50e>
 8019182:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019186:	f7e9 fc69 	bl	8002a5c <__aeabi_dmul>
 801918a:	3601      	adds	r6, #1
 801918c:	2301      	movs	r3, #1
 801918e:	1064      	asrs	r4, r4, #1
 8019190:	3508      	adds	r5, #8
 8019192:	e73f      	b.n	8019014 <_dtoa_r+0x394>
 8019194:	2602      	movs	r6, #2
 8019196:	e742      	b.n	801901e <_dtoa_r+0x39e>
 8019198:	9c07      	ldr	r4, [sp, #28]
 801919a:	9704      	str	r7, [sp, #16]
 801919c:	e761      	b.n	8019062 <_dtoa_r+0x3e2>
 801919e:	4b27      	ldr	r3, [pc, #156]	@ (801923c <_dtoa_r+0x5bc>)
 80191a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80191a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80191a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80191aa:	4454      	add	r4, sl
 80191ac:	2900      	cmp	r1, #0
 80191ae:	d053      	beq.n	8019258 <_dtoa_r+0x5d8>
 80191b0:	4928      	ldr	r1, [pc, #160]	@ (8019254 <_dtoa_r+0x5d4>)
 80191b2:	2000      	movs	r0, #0
 80191b4:	f7e9 fd7c 	bl	8002cb0 <__aeabi_ddiv>
 80191b8:	4633      	mov	r3, r6
 80191ba:	462a      	mov	r2, r5
 80191bc:	f7e9 fa96 	bl	80026ec <__aeabi_dsub>
 80191c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80191c4:	4656      	mov	r6, sl
 80191c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80191ca:	f7e9 fef7 	bl	8002fbc <__aeabi_d2iz>
 80191ce:	4605      	mov	r5, r0
 80191d0:	f7e9 fbda 	bl	8002988 <__aeabi_i2d>
 80191d4:	4602      	mov	r2, r0
 80191d6:	460b      	mov	r3, r1
 80191d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80191dc:	f7e9 fa86 	bl	80026ec <__aeabi_dsub>
 80191e0:	3530      	adds	r5, #48	@ 0x30
 80191e2:	4602      	mov	r2, r0
 80191e4:	460b      	mov	r3, r1
 80191e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80191ea:	f806 5b01 	strb.w	r5, [r6], #1
 80191ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80191f2:	f7e9 fea5 	bl	8002f40 <__aeabi_dcmplt>
 80191f6:	2800      	cmp	r0, #0
 80191f8:	d171      	bne.n	80192de <_dtoa_r+0x65e>
 80191fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80191fe:	4911      	ldr	r1, [pc, #68]	@ (8019244 <_dtoa_r+0x5c4>)
 8019200:	2000      	movs	r0, #0
 8019202:	f7e9 fa73 	bl	80026ec <__aeabi_dsub>
 8019206:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801920a:	f7e9 fe99 	bl	8002f40 <__aeabi_dcmplt>
 801920e:	2800      	cmp	r0, #0
 8019210:	f040 8095 	bne.w	801933e <_dtoa_r+0x6be>
 8019214:	42a6      	cmp	r6, r4
 8019216:	f43f af50 	beq.w	80190ba <_dtoa_r+0x43a>
 801921a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801921e:	4b0a      	ldr	r3, [pc, #40]	@ (8019248 <_dtoa_r+0x5c8>)
 8019220:	2200      	movs	r2, #0
 8019222:	f7e9 fc1b 	bl	8002a5c <__aeabi_dmul>
 8019226:	4b08      	ldr	r3, [pc, #32]	@ (8019248 <_dtoa_r+0x5c8>)
 8019228:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801922c:	2200      	movs	r2, #0
 801922e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019232:	f7e9 fc13 	bl	8002a5c <__aeabi_dmul>
 8019236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801923a:	e7c4      	b.n	80191c6 <_dtoa_r+0x546>
 801923c:	0801c678 	.word	0x0801c678
 8019240:	0801c650 	.word	0x0801c650
 8019244:	3ff00000 	.word	0x3ff00000
 8019248:	40240000 	.word	0x40240000
 801924c:	401c0000 	.word	0x401c0000
 8019250:	40140000 	.word	0x40140000
 8019254:	3fe00000 	.word	0x3fe00000
 8019258:	4631      	mov	r1, r6
 801925a:	4628      	mov	r0, r5
 801925c:	f7e9 fbfe 	bl	8002a5c <__aeabi_dmul>
 8019260:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8019264:	9415      	str	r4, [sp, #84]	@ 0x54
 8019266:	4656      	mov	r6, sl
 8019268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801926c:	f7e9 fea6 	bl	8002fbc <__aeabi_d2iz>
 8019270:	4605      	mov	r5, r0
 8019272:	f7e9 fb89 	bl	8002988 <__aeabi_i2d>
 8019276:	4602      	mov	r2, r0
 8019278:	460b      	mov	r3, r1
 801927a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801927e:	f7e9 fa35 	bl	80026ec <__aeabi_dsub>
 8019282:	3530      	adds	r5, #48	@ 0x30
 8019284:	f806 5b01 	strb.w	r5, [r6], #1
 8019288:	4602      	mov	r2, r0
 801928a:	460b      	mov	r3, r1
 801928c:	42a6      	cmp	r6, r4
 801928e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019292:	f04f 0200 	mov.w	r2, #0
 8019296:	d124      	bne.n	80192e2 <_dtoa_r+0x662>
 8019298:	4bac      	ldr	r3, [pc, #688]	@ (801954c <_dtoa_r+0x8cc>)
 801929a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801929e:	f7e9 fa27 	bl	80026f0 <__adddf3>
 80192a2:	4602      	mov	r2, r0
 80192a4:	460b      	mov	r3, r1
 80192a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80192aa:	f7e9 fe67 	bl	8002f7c <__aeabi_dcmpgt>
 80192ae:	2800      	cmp	r0, #0
 80192b0:	d145      	bne.n	801933e <_dtoa_r+0x6be>
 80192b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80192b6:	49a5      	ldr	r1, [pc, #660]	@ (801954c <_dtoa_r+0x8cc>)
 80192b8:	2000      	movs	r0, #0
 80192ba:	f7e9 fa17 	bl	80026ec <__aeabi_dsub>
 80192be:	4602      	mov	r2, r0
 80192c0:	460b      	mov	r3, r1
 80192c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80192c6:	f7e9 fe3b 	bl	8002f40 <__aeabi_dcmplt>
 80192ca:	2800      	cmp	r0, #0
 80192cc:	f43f aef5 	beq.w	80190ba <_dtoa_r+0x43a>
 80192d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80192d2:	1e73      	subs	r3, r6, #1
 80192d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80192d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80192da:	2b30      	cmp	r3, #48	@ 0x30
 80192dc:	d0f8      	beq.n	80192d0 <_dtoa_r+0x650>
 80192de:	9f04      	ldr	r7, [sp, #16]
 80192e0:	e73e      	b.n	8019160 <_dtoa_r+0x4e0>
 80192e2:	4b9b      	ldr	r3, [pc, #620]	@ (8019550 <_dtoa_r+0x8d0>)
 80192e4:	f7e9 fbba 	bl	8002a5c <__aeabi_dmul>
 80192e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80192ec:	e7bc      	b.n	8019268 <_dtoa_r+0x5e8>
 80192ee:	d10c      	bne.n	801930a <_dtoa_r+0x68a>
 80192f0:	4b98      	ldr	r3, [pc, #608]	@ (8019554 <_dtoa_r+0x8d4>)
 80192f2:	2200      	movs	r2, #0
 80192f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80192f8:	f7e9 fbb0 	bl	8002a5c <__aeabi_dmul>
 80192fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019300:	f7e9 fe32 	bl	8002f68 <__aeabi_dcmpge>
 8019304:	2800      	cmp	r0, #0
 8019306:	f000 8157 	beq.w	80195b8 <_dtoa_r+0x938>
 801930a:	2400      	movs	r4, #0
 801930c:	4625      	mov	r5, r4
 801930e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019310:	43db      	mvns	r3, r3
 8019312:	9304      	str	r3, [sp, #16]
 8019314:	4656      	mov	r6, sl
 8019316:	2700      	movs	r7, #0
 8019318:	4621      	mov	r1, r4
 801931a:	4658      	mov	r0, fp
 801931c:	f001 f98e 	bl	801a63c <_Bfree>
 8019320:	2d00      	cmp	r5, #0
 8019322:	d0dc      	beq.n	80192de <_dtoa_r+0x65e>
 8019324:	b12f      	cbz	r7, 8019332 <_dtoa_r+0x6b2>
 8019326:	42af      	cmp	r7, r5
 8019328:	d003      	beq.n	8019332 <_dtoa_r+0x6b2>
 801932a:	4639      	mov	r1, r7
 801932c:	4658      	mov	r0, fp
 801932e:	f001 f985 	bl	801a63c <_Bfree>
 8019332:	4629      	mov	r1, r5
 8019334:	4658      	mov	r0, fp
 8019336:	f001 f981 	bl	801a63c <_Bfree>
 801933a:	e7d0      	b.n	80192de <_dtoa_r+0x65e>
 801933c:	9704      	str	r7, [sp, #16]
 801933e:	4633      	mov	r3, r6
 8019340:	461e      	mov	r6, r3
 8019342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019346:	2a39      	cmp	r2, #57	@ 0x39
 8019348:	d107      	bne.n	801935a <_dtoa_r+0x6da>
 801934a:	459a      	cmp	sl, r3
 801934c:	d1f8      	bne.n	8019340 <_dtoa_r+0x6c0>
 801934e:	9a04      	ldr	r2, [sp, #16]
 8019350:	3201      	adds	r2, #1
 8019352:	9204      	str	r2, [sp, #16]
 8019354:	2230      	movs	r2, #48	@ 0x30
 8019356:	f88a 2000 	strb.w	r2, [sl]
 801935a:	781a      	ldrb	r2, [r3, #0]
 801935c:	3201      	adds	r2, #1
 801935e:	701a      	strb	r2, [r3, #0]
 8019360:	e7bd      	b.n	80192de <_dtoa_r+0x65e>
 8019362:	4b7b      	ldr	r3, [pc, #492]	@ (8019550 <_dtoa_r+0x8d0>)
 8019364:	2200      	movs	r2, #0
 8019366:	f7e9 fb79 	bl	8002a5c <__aeabi_dmul>
 801936a:	2200      	movs	r2, #0
 801936c:	2300      	movs	r3, #0
 801936e:	4604      	mov	r4, r0
 8019370:	460d      	mov	r5, r1
 8019372:	f7e9 fddb 	bl	8002f2c <__aeabi_dcmpeq>
 8019376:	2800      	cmp	r0, #0
 8019378:	f43f aebb 	beq.w	80190f2 <_dtoa_r+0x472>
 801937c:	e6f0      	b.n	8019160 <_dtoa_r+0x4e0>
 801937e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019380:	2a00      	cmp	r2, #0
 8019382:	f000 80db 	beq.w	801953c <_dtoa_r+0x8bc>
 8019386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019388:	2a01      	cmp	r2, #1
 801938a:	f300 80bf 	bgt.w	801950c <_dtoa_r+0x88c>
 801938e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019390:	2a00      	cmp	r2, #0
 8019392:	f000 80b7 	beq.w	8019504 <_dtoa_r+0x884>
 8019396:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801939a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801939c:	4646      	mov	r6, r8
 801939e:	9a08      	ldr	r2, [sp, #32]
 80193a0:	2101      	movs	r1, #1
 80193a2:	441a      	add	r2, r3
 80193a4:	4658      	mov	r0, fp
 80193a6:	4498      	add	r8, r3
 80193a8:	9208      	str	r2, [sp, #32]
 80193aa:	f001 fa45 	bl	801a838 <__i2b>
 80193ae:	4605      	mov	r5, r0
 80193b0:	b15e      	cbz	r6, 80193ca <_dtoa_r+0x74a>
 80193b2:	9b08      	ldr	r3, [sp, #32]
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	dd08      	ble.n	80193ca <_dtoa_r+0x74a>
 80193b8:	42b3      	cmp	r3, r6
 80193ba:	9a08      	ldr	r2, [sp, #32]
 80193bc:	bfa8      	it	ge
 80193be:	4633      	movge	r3, r6
 80193c0:	eba8 0803 	sub.w	r8, r8, r3
 80193c4:	1af6      	subs	r6, r6, r3
 80193c6:	1ad3      	subs	r3, r2, r3
 80193c8:	9308      	str	r3, [sp, #32]
 80193ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80193cc:	b1f3      	cbz	r3, 801940c <_dtoa_r+0x78c>
 80193ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	f000 80b7 	beq.w	8019544 <_dtoa_r+0x8c4>
 80193d6:	b18c      	cbz	r4, 80193fc <_dtoa_r+0x77c>
 80193d8:	4629      	mov	r1, r5
 80193da:	4622      	mov	r2, r4
 80193dc:	4658      	mov	r0, fp
 80193de:	f001 faeb 	bl	801a9b8 <__pow5mult>
 80193e2:	464a      	mov	r2, r9
 80193e4:	4601      	mov	r1, r0
 80193e6:	4605      	mov	r5, r0
 80193e8:	4658      	mov	r0, fp
 80193ea:	f001 fa3b 	bl	801a864 <__multiply>
 80193ee:	4649      	mov	r1, r9
 80193f0:	9004      	str	r0, [sp, #16]
 80193f2:	4658      	mov	r0, fp
 80193f4:	f001 f922 	bl	801a63c <_Bfree>
 80193f8:	9b04      	ldr	r3, [sp, #16]
 80193fa:	4699      	mov	r9, r3
 80193fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80193fe:	1b1a      	subs	r2, r3, r4
 8019400:	d004      	beq.n	801940c <_dtoa_r+0x78c>
 8019402:	4649      	mov	r1, r9
 8019404:	4658      	mov	r0, fp
 8019406:	f001 fad7 	bl	801a9b8 <__pow5mult>
 801940a:	4681      	mov	r9, r0
 801940c:	2101      	movs	r1, #1
 801940e:	4658      	mov	r0, fp
 8019410:	f001 fa12 	bl	801a838 <__i2b>
 8019414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019416:	4604      	mov	r4, r0
 8019418:	2b00      	cmp	r3, #0
 801941a:	f000 81cf 	beq.w	80197bc <_dtoa_r+0xb3c>
 801941e:	461a      	mov	r2, r3
 8019420:	4601      	mov	r1, r0
 8019422:	4658      	mov	r0, fp
 8019424:	f001 fac8 	bl	801a9b8 <__pow5mult>
 8019428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801942a:	2b01      	cmp	r3, #1
 801942c:	4604      	mov	r4, r0
 801942e:	f300 8095 	bgt.w	801955c <_dtoa_r+0x8dc>
 8019432:	9b02      	ldr	r3, [sp, #8]
 8019434:	2b00      	cmp	r3, #0
 8019436:	f040 8087 	bne.w	8019548 <_dtoa_r+0x8c8>
 801943a:	9b03      	ldr	r3, [sp, #12]
 801943c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019440:	2b00      	cmp	r3, #0
 8019442:	f040 8089 	bne.w	8019558 <_dtoa_r+0x8d8>
 8019446:	9b03      	ldr	r3, [sp, #12]
 8019448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801944c:	0d1b      	lsrs	r3, r3, #20
 801944e:	051b      	lsls	r3, r3, #20
 8019450:	b12b      	cbz	r3, 801945e <_dtoa_r+0x7de>
 8019452:	9b08      	ldr	r3, [sp, #32]
 8019454:	3301      	adds	r3, #1
 8019456:	9308      	str	r3, [sp, #32]
 8019458:	f108 0801 	add.w	r8, r8, #1
 801945c:	2301      	movs	r3, #1
 801945e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019462:	2b00      	cmp	r3, #0
 8019464:	f000 81b0 	beq.w	80197c8 <_dtoa_r+0xb48>
 8019468:	6923      	ldr	r3, [r4, #16]
 801946a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801946e:	6918      	ldr	r0, [r3, #16]
 8019470:	f001 f996 	bl	801a7a0 <__hi0bits>
 8019474:	f1c0 0020 	rsb	r0, r0, #32
 8019478:	9b08      	ldr	r3, [sp, #32]
 801947a:	4418      	add	r0, r3
 801947c:	f010 001f 	ands.w	r0, r0, #31
 8019480:	d077      	beq.n	8019572 <_dtoa_r+0x8f2>
 8019482:	f1c0 0320 	rsb	r3, r0, #32
 8019486:	2b04      	cmp	r3, #4
 8019488:	dd6b      	ble.n	8019562 <_dtoa_r+0x8e2>
 801948a:	9b08      	ldr	r3, [sp, #32]
 801948c:	f1c0 001c 	rsb	r0, r0, #28
 8019490:	4403      	add	r3, r0
 8019492:	4480      	add	r8, r0
 8019494:	4406      	add	r6, r0
 8019496:	9308      	str	r3, [sp, #32]
 8019498:	f1b8 0f00 	cmp.w	r8, #0
 801949c:	dd05      	ble.n	80194aa <_dtoa_r+0x82a>
 801949e:	4649      	mov	r1, r9
 80194a0:	4642      	mov	r2, r8
 80194a2:	4658      	mov	r0, fp
 80194a4:	f001 fae2 	bl	801aa6c <__lshift>
 80194a8:	4681      	mov	r9, r0
 80194aa:	9b08      	ldr	r3, [sp, #32]
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	dd05      	ble.n	80194bc <_dtoa_r+0x83c>
 80194b0:	4621      	mov	r1, r4
 80194b2:	461a      	mov	r2, r3
 80194b4:	4658      	mov	r0, fp
 80194b6:	f001 fad9 	bl	801aa6c <__lshift>
 80194ba:	4604      	mov	r4, r0
 80194bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d059      	beq.n	8019576 <_dtoa_r+0x8f6>
 80194c2:	4621      	mov	r1, r4
 80194c4:	4648      	mov	r0, r9
 80194c6:	f001 fb3d 	bl	801ab44 <__mcmp>
 80194ca:	2800      	cmp	r0, #0
 80194cc:	da53      	bge.n	8019576 <_dtoa_r+0x8f6>
 80194ce:	1e7b      	subs	r3, r7, #1
 80194d0:	9304      	str	r3, [sp, #16]
 80194d2:	4649      	mov	r1, r9
 80194d4:	2300      	movs	r3, #0
 80194d6:	220a      	movs	r2, #10
 80194d8:	4658      	mov	r0, fp
 80194da:	f001 f8d1 	bl	801a680 <__multadd>
 80194de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80194e0:	4681      	mov	r9, r0
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	f000 8172 	beq.w	80197cc <_dtoa_r+0xb4c>
 80194e8:	2300      	movs	r3, #0
 80194ea:	4629      	mov	r1, r5
 80194ec:	220a      	movs	r2, #10
 80194ee:	4658      	mov	r0, fp
 80194f0:	f001 f8c6 	bl	801a680 <__multadd>
 80194f4:	9b00      	ldr	r3, [sp, #0]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	4605      	mov	r5, r0
 80194fa:	dc67      	bgt.n	80195cc <_dtoa_r+0x94c>
 80194fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80194fe:	2b02      	cmp	r3, #2
 8019500:	dc41      	bgt.n	8019586 <_dtoa_r+0x906>
 8019502:	e063      	b.n	80195cc <_dtoa_r+0x94c>
 8019504:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8019506:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801950a:	e746      	b.n	801939a <_dtoa_r+0x71a>
 801950c:	9b07      	ldr	r3, [sp, #28]
 801950e:	1e5c      	subs	r4, r3, #1
 8019510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019512:	42a3      	cmp	r3, r4
 8019514:	bfbf      	itttt	lt
 8019516:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8019518:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801951a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801951c:	1ae3      	sublt	r3, r4, r3
 801951e:	bfb4      	ite	lt
 8019520:	18d2      	addlt	r2, r2, r3
 8019522:	1b1c      	subge	r4, r3, r4
 8019524:	9b07      	ldr	r3, [sp, #28]
 8019526:	bfbc      	itt	lt
 8019528:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801952a:	2400      	movlt	r4, #0
 801952c:	2b00      	cmp	r3, #0
 801952e:	bfb5      	itete	lt
 8019530:	eba8 0603 	sublt.w	r6, r8, r3
 8019534:	9b07      	ldrge	r3, [sp, #28]
 8019536:	2300      	movlt	r3, #0
 8019538:	4646      	movge	r6, r8
 801953a:	e730      	b.n	801939e <_dtoa_r+0x71e>
 801953c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801953e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8019540:	4646      	mov	r6, r8
 8019542:	e735      	b.n	80193b0 <_dtoa_r+0x730>
 8019544:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019546:	e75c      	b.n	8019402 <_dtoa_r+0x782>
 8019548:	2300      	movs	r3, #0
 801954a:	e788      	b.n	801945e <_dtoa_r+0x7de>
 801954c:	3fe00000 	.word	0x3fe00000
 8019550:	40240000 	.word	0x40240000
 8019554:	40140000 	.word	0x40140000
 8019558:	9b02      	ldr	r3, [sp, #8]
 801955a:	e780      	b.n	801945e <_dtoa_r+0x7de>
 801955c:	2300      	movs	r3, #0
 801955e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019560:	e782      	b.n	8019468 <_dtoa_r+0x7e8>
 8019562:	d099      	beq.n	8019498 <_dtoa_r+0x818>
 8019564:	9a08      	ldr	r2, [sp, #32]
 8019566:	331c      	adds	r3, #28
 8019568:	441a      	add	r2, r3
 801956a:	4498      	add	r8, r3
 801956c:	441e      	add	r6, r3
 801956e:	9208      	str	r2, [sp, #32]
 8019570:	e792      	b.n	8019498 <_dtoa_r+0x818>
 8019572:	4603      	mov	r3, r0
 8019574:	e7f6      	b.n	8019564 <_dtoa_r+0x8e4>
 8019576:	9b07      	ldr	r3, [sp, #28]
 8019578:	9704      	str	r7, [sp, #16]
 801957a:	2b00      	cmp	r3, #0
 801957c:	dc20      	bgt.n	80195c0 <_dtoa_r+0x940>
 801957e:	9300      	str	r3, [sp, #0]
 8019580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019582:	2b02      	cmp	r3, #2
 8019584:	dd1e      	ble.n	80195c4 <_dtoa_r+0x944>
 8019586:	9b00      	ldr	r3, [sp, #0]
 8019588:	2b00      	cmp	r3, #0
 801958a:	f47f aec0 	bne.w	801930e <_dtoa_r+0x68e>
 801958e:	4621      	mov	r1, r4
 8019590:	2205      	movs	r2, #5
 8019592:	4658      	mov	r0, fp
 8019594:	f001 f874 	bl	801a680 <__multadd>
 8019598:	4601      	mov	r1, r0
 801959a:	4604      	mov	r4, r0
 801959c:	4648      	mov	r0, r9
 801959e:	f001 fad1 	bl	801ab44 <__mcmp>
 80195a2:	2800      	cmp	r0, #0
 80195a4:	f77f aeb3 	ble.w	801930e <_dtoa_r+0x68e>
 80195a8:	4656      	mov	r6, sl
 80195aa:	2331      	movs	r3, #49	@ 0x31
 80195ac:	f806 3b01 	strb.w	r3, [r6], #1
 80195b0:	9b04      	ldr	r3, [sp, #16]
 80195b2:	3301      	adds	r3, #1
 80195b4:	9304      	str	r3, [sp, #16]
 80195b6:	e6ae      	b.n	8019316 <_dtoa_r+0x696>
 80195b8:	9c07      	ldr	r4, [sp, #28]
 80195ba:	9704      	str	r7, [sp, #16]
 80195bc:	4625      	mov	r5, r4
 80195be:	e7f3      	b.n	80195a8 <_dtoa_r+0x928>
 80195c0:	9b07      	ldr	r3, [sp, #28]
 80195c2:	9300      	str	r3, [sp, #0]
 80195c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	f000 8104 	beq.w	80197d4 <_dtoa_r+0xb54>
 80195cc:	2e00      	cmp	r6, #0
 80195ce:	dd05      	ble.n	80195dc <_dtoa_r+0x95c>
 80195d0:	4629      	mov	r1, r5
 80195d2:	4632      	mov	r2, r6
 80195d4:	4658      	mov	r0, fp
 80195d6:	f001 fa49 	bl	801aa6c <__lshift>
 80195da:	4605      	mov	r5, r0
 80195dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d05a      	beq.n	8019698 <_dtoa_r+0xa18>
 80195e2:	6869      	ldr	r1, [r5, #4]
 80195e4:	4658      	mov	r0, fp
 80195e6:	f000 ffe9 	bl	801a5bc <_Balloc>
 80195ea:	4606      	mov	r6, r0
 80195ec:	b928      	cbnz	r0, 80195fa <_dtoa_r+0x97a>
 80195ee:	4b84      	ldr	r3, [pc, #528]	@ (8019800 <_dtoa_r+0xb80>)
 80195f0:	4602      	mov	r2, r0
 80195f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80195f6:	f7ff bb5a 	b.w	8018cae <_dtoa_r+0x2e>
 80195fa:	692a      	ldr	r2, [r5, #16]
 80195fc:	3202      	adds	r2, #2
 80195fe:	0092      	lsls	r2, r2, #2
 8019600:	f105 010c 	add.w	r1, r5, #12
 8019604:	300c      	adds	r0, #12
 8019606:	f7ff fa75 	bl	8018af4 <memcpy>
 801960a:	2201      	movs	r2, #1
 801960c:	4631      	mov	r1, r6
 801960e:	4658      	mov	r0, fp
 8019610:	f001 fa2c 	bl	801aa6c <__lshift>
 8019614:	f10a 0301 	add.w	r3, sl, #1
 8019618:	9307      	str	r3, [sp, #28]
 801961a:	9b00      	ldr	r3, [sp, #0]
 801961c:	4453      	add	r3, sl
 801961e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019620:	9b02      	ldr	r3, [sp, #8]
 8019622:	f003 0301 	and.w	r3, r3, #1
 8019626:	462f      	mov	r7, r5
 8019628:	930a      	str	r3, [sp, #40]	@ 0x28
 801962a:	4605      	mov	r5, r0
 801962c:	9b07      	ldr	r3, [sp, #28]
 801962e:	4621      	mov	r1, r4
 8019630:	3b01      	subs	r3, #1
 8019632:	4648      	mov	r0, r9
 8019634:	9300      	str	r3, [sp, #0]
 8019636:	f7ff fa9b 	bl	8018b70 <quorem>
 801963a:	4639      	mov	r1, r7
 801963c:	9002      	str	r0, [sp, #8]
 801963e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8019642:	4648      	mov	r0, r9
 8019644:	f001 fa7e 	bl	801ab44 <__mcmp>
 8019648:	462a      	mov	r2, r5
 801964a:	9008      	str	r0, [sp, #32]
 801964c:	4621      	mov	r1, r4
 801964e:	4658      	mov	r0, fp
 8019650:	f001 fa94 	bl	801ab7c <__mdiff>
 8019654:	68c2      	ldr	r2, [r0, #12]
 8019656:	4606      	mov	r6, r0
 8019658:	bb02      	cbnz	r2, 801969c <_dtoa_r+0xa1c>
 801965a:	4601      	mov	r1, r0
 801965c:	4648      	mov	r0, r9
 801965e:	f001 fa71 	bl	801ab44 <__mcmp>
 8019662:	4602      	mov	r2, r0
 8019664:	4631      	mov	r1, r6
 8019666:	4658      	mov	r0, fp
 8019668:	920e      	str	r2, [sp, #56]	@ 0x38
 801966a:	f000 ffe7 	bl	801a63c <_Bfree>
 801966e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019670:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019672:	9e07      	ldr	r6, [sp, #28]
 8019674:	ea43 0102 	orr.w	r1, r3, r2
 8019678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801967a:	4319      	orrs	r1, r3
 801967c:	d110      	bne.n	80196a0 <_dtoa_r+0xa20>
 801967e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8019682:	d029      	beq.n	80196d8 <_dtoa_r+0xa58>
 8019684:	9b08      	ldr	r3, [sp, #32]
 8019686:	2b00      	cmp	r3, #0
 8019688:	dd02      	ble.n	8019690 <_dtoa_r+0xa10>
 801968a:	9b02      	ldr	r3, [sp, #8]
 801968c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8019690:	9b00      	ldr	r3, [sp, #0]
 8019692:	f883 8000 	strb.w	r8, [r3]
 8019696:	e63f      	b.n	8019318 <_dtoa_r+0x698>
 8019698:	4628      	mov	r0, r5
 801969a:	e7bb      	b.n	8019614 <_dtoa_r+0x994>
 801969c:	2201      	movs	r2, #1
 801969e:	e7e1      	b.n	8019664 <_dtoa_r+0x9e4>
 80196a0:	9b08      	ldr	r3, [sp, #32]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	db04      	blt.n	80196b0 <_dtoa_r+0xa30>
 80196a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80196a8:	430b      	orrs	r3, r1
 80196aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80196ac:	430b      	orrs	r3, r1
 80196ae:	d120      	bne.n	80196f2 <_dtoa_r+0xa72>
 80196b0:	2a00      	cmp	r2, #0
 80196b2:	dded      	ble.n	8019690 <_dtoa_r+0xa10>
 80196b4:	4649      	mov	r1, r9
 80196b6:	2201      	movs	r2, #1
 80196b8:	4658      	mov	r0, fp
 80196ba:	f001 f9d7 	bl	801aa6c <__lshift>
 80196be:	4621      	mov	r1, r4
 80196c0:	4681      	mov	r9, r0
 80196c2:	f001 fa3f 	bl	801ab44 <__mcmp>
 80196c6:	2800      	cmp	r0, #0
 80196c8:	dc03      	bgt.n	80196d2 <_dtoa_r+0xa52>
 80196ca:	d1e1      	bne.n	8019690 <_dtoa_r+0xa10>
 80196cc:	f018 0f01 	tst.w	r8, #1
 80196d0:	d0de      	beq.n	8019690 <_dtoa_r+0xa10>
 80196d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80196d6:	d1d8      	bne.n	801968a <_dtoa_r+0xa0a>
 80196d8:	9a00      	ldr	r2, [sp, #0]
 80196da:	2339      	movs	r3, #57	@ 0x39
 80196dc:	7013      	strb	r3, [r2, #0]
 80196de:	4633      	mov	r3, r6
 80196e0:	461e      	mov	r6, r3
 80196e2:	3b01      	subs	r3, #1
 80196e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80196e8:	2a39      	cmp	r2, #57	@ 0x39
 80196ea:	d052      	beq.n	8019792 <_dtoa_r+0xb12>
 80196ec:	3201      	adds	r2, #1
 80196ee:	701a      	strb	r2, [r3, #0]
 80196f0:	e612      	b.n	8019318 <_dtoa_r+0x698>
 80196f2:	2a00      	cmp	r2, #0
 80196f4:	dd07      	ble.n	8019706 <_dtoa_r+0xa86>
 80196f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80196fa:	d0ed      	beq.n	80196d8 <_dtoa_r+0xa58>
 80196fc:	9a00      	ldr	r2, [sp, #0]
 80196fe:	f108 0301 	add.w	r3, r8, #1
 8019702:	7013      	strb	r3, [r2, #0]
 8019704:	e608      	b.n	8019318 <_dtoa_r+0x698>
 8019706:	9b07      	ldr	r3, [sp, #28]
 8019708:	9a07      	ldr	r2, [sp, #28]
 801970a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801970e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019710:	4293      	cmp	r3, r2
 8019712:	d028      	beq.n	8019766 <_dtoa_r+0xae6>
 8019714:	4649      	mov	r1, r9
 8019716:	2300      	movs	r3, #0
 8019718:	220a      	movs	r2, #10
 801971a:	4658      	mov	r0, fp
 801971c:	f000 ffb0 	bl	801a680 <__multadd>
 8019720:	42af      	cmp	r7, r5
 8019722:	4681      	mov	r9, r0
 8019724:	f04f 0300 	mov.w	r3, #0
 8019728:	f04f 020a 	mov.w	r2, #10
 801972c:	4639      	mov	r1, r7
 801972e:	4658      	mov	r0, fp
 8019730:	d107      	bne.n	8019742 <_dtoa_r+0xac2>
 8019732:	f000 ffa5 	bl	801a680 <__multadd>
 8019736:	4607      	mov	r7, r0
 8019738:	4605      	mov	r5, r0
 801973a:	9b07      	ldr	r3, [sp, #28]
 801973c:	3301      	adds	r3, #1
 801973e:	9307      	str	r3, [sp, #28]
 8019740:	e774      	b.n	801962c <_dtoa_r+0x9ac>
 8019742:	f000 ff9d 	bl	801a680 <__multadd>
 8019746:	4629      	mov	r1, r5
 8019748:	4607      	mov	r7, r0
 801974a:	2300      	movs	r3, #0
 801974c:	220a      	movs	r2, #10
 801974e:	4658      	mov	r0, fp
 8019750:	f000 ff96 	bl	801a680 <__multadd>
 8019754:	4605      	mov	r5, r0
 8019756:	e7f0      	b.n	801973a <_dtoa_r+0xaba>
 8019758:	9b00      	ldr	r3, [sp, #0]
 801975a:	2b00      	cmp	r3, #0
 801975c:	bfcc      	ite	gt
 801975e:	461e      	movgt	r6, r3
 8019760:	2601      	movle	r6, #1
 8019762:	4456      	add	r6, sl
 8019764:	2700      	movs	r7, #0
 8019766:	4649      	mov	r1, r9
 8019768:	2201      	movs	r2, #1
 801976a:	4658      	mov	r0, fp
 801976c:	f001 f97e 	bl	801aa6c <__lshift>
 8019770:	4621      	mov	r1, r4
 8019772:	4681      	mov	r9, r0
 8019774:	f001 f9e6 	bl	801ab44 <__mcmp>
 8019778:	2800      	cmp	r0, #0
 801977a:	dcb0      	bgt.n	80196de <_dtoa_r+0xa5e>
 801977c:	d102      	bne.n	8019784 <_dtoa_r+0xb04>
 801977e:	f018 0f01 	tst.w	r8, #1
 8019782:	d1ac      	bne.n	80196de <_dtoa_r+0xa5e>
 8019784:	4633      	mov	r3, r6
 8019786:	461e      	mov	r6, r3
 8019788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801978c:	2a30      	cmp	r2, #48	@ 0x30
 801978e:	d0fa      	beq.n	8019786 <_dtoa_r+0xb06>
 8019790:	e5c2      	b.n	8019318 <_dtoa_r+0x698>
 8019792:	459a      	cmp	sl, r3
 8019794:	d1a4      	bne.n	80196e0 <_dtoa_r+0xa60>
 8019796:	9b04      	ldr	r3, [sp, #16]
 8019798:	3301      	adds	r3, #1
 801979a:	9304      	str	r3, [sp, #16]
 801979c:	2331      	movs	r3, #49	@ 0x31
 801979e:	f88a 3000 	strb.w	r3, [sl]
 80197a2:	e5b9      	b.n	8019318 <_dtoa_r+0x698>
 80197a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80197a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8019804 <_dtoa_r+0xb84>
 80197aa:	b11b      	cbz	r3, 80197b4 <_dtoa_r+0xb34>
 80197ac:	f10a 0308 	add.w	r3, sl, #8
 80197b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80197b2:	6013      	str	r3, [r2, #0]
 80197b4:	4650      	mov	r0, sl
 80197b6:	b019      	add	sp, #100	@ 0x64
 80197b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80197be:	2b01      	cmp	r3, #1
 80197c0:	f77f ae37 	ble.w	8019432 <_dtoa_r+0x7b2>
 80197c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80197c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80197c8:	2001      	movs	r0, #1
 80197ca:	e655      	b.n	8019478 <_dtoa_r+0x7f8>
 80197cc:	9b00      	ldr	r3, [sp, #0]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	f77f aed6 	ble.w	8019580 <_dtoa_r+0x900>
 80197d4:	4656      	mov	r6, sl
 80197d6:	4621      	mov	r1, r4
 80197d8:	4648      	mov	r0, r9
 80197da:	f7ff f9c9 	bl	8018b70 <quorem>
 80197de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80197e2:	f806 8b01 	strb.w	r8, [r6], #1
 80197e6:	9b00      	ldr	r3, [sp, #0]
 80197e8:	eba6 020a 	sub.w	r2, r6, sl
 80197ec:	4293      	cmp	r3, r2
 80197ee:	ddb3      	ble.n	8019758 <_dtoa_r+0xad8>
 80197f0:	4649      	mov	r1, r9
 80197f2:	2300      	movs	r3, #0
 80197f4:	220a      	movs	r2, #10
 80197f6:	4658      	mov	r0, fp
 80197f8:	f000 ff42 	bl	801a680 <__multadd>
 80197fc:	4681      	mov	r9, r0
 80197fe:	e7ea      	b.n	80197d6 <_dtoa_r+0xb56>
 8019800:	0801c563 	.word	0x0801c563
 8019804:	0801c4fe 	.word	0x0801c4fe

08019808 <_free_r>:
 8019808:	b538      	push	{r3, r4, r5, lr}
 801980a:	4605      	mov	r5, r0
 801980c:	2900      	cmp	r1, #0
 801980e:	d041      	beq.n	8019894 <_free_r+0x8c>
 8019810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019814:	1f0c      	subs	r4, r1, #4
 8019816:	2b00      	cmp	r3, #0
 8019818:	bfb8      	it	lt
 801981a:	18e4      	addlt	r4, r4, r3
 801981c:	f7fe f86e 	bl	80178fc <__malloc_lock>
 8019820:	4a1d      	ldr	r2, [pc, #116]	@ (8019898 <_free_r+0x90>)
 8019822:	6813      	ldr	r3, [r2, #0]
 8019824:	b933      	cbnz	r3, 8019834 <_free_r+0x2c>
 8019826:	6063      	str	r3, [r4, #4]
 8019828:	6014      	str	r4, [r2, #0]
 801982a:	4628      	mov	r0, r5
 801982c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019830:	f7fe b86a 	b.w	8017908 <__malloc_unlock>
 8019834:	42a3      	cmp	r3, r4
 8019836:	d908      	bls.n	801984a <_free_r+0x42>
 8019838:	6820      	ldr	r0, [r4, #0]
 801983a:	1821      	adds	r1, r4, r0
 801983c:	428b      	cmp	r3, r1
 801983e:	bf01      	itttt	eq
 8019840:	6819      	ldreq	r1, [r3, #0]
 8019842:	685b      	ldreq	r3, [r3, #4]
 8019844:	1809      	addeq	r1, r1, r0
 8019846:	6021      	streq	r1, [r4, #0]
 8019848:	e7ed      	b.n	8019826 <_free_r+0x1e>
 801984a:	461a      	mov	r2, r3
 801984c:	685b      	ldr	r3, [r3, #4]
 801984e:	b10b      	cbz	r3, 8019854 <_free_r+0x4c>
 8019850:	42a3      	cmp	r3, r4
 8019852:	d9fa      	bls.n	801984a <_free_r+0x42>
 8019854:	6811      	ldr	r1, [r2, #0]
 8019856:	1850      	adds	r0, r2, r1
 8019858:	42a0      	cmp	r0, r4
 801985a:	d10b      	bne.n	8019874 <_free_r+0x6c>
 801985c:	6820      	ldr	r0, [r4, #0]
 801985e:	4401      	add	r1, r0
 8019860:	1850      	adds	r0, r2, r1
 8019862:	4283      	cmp	r3, r0
 8019864:	6011      	str	r1, [r2, #0]
 8019866:	d1e0      	bne.n	801982a <_free_r+0x22>
 8019868:	6818      	ldr	r0, [r3, #0]
 801986a:	685b      	ldr	r3, [r3, #4]
 801986c:	6053      	str	r3, [r2, #4]
 801986e:	4408      	add	r0, r1
 8019870:	6010      	str	r0, [r2, #0]
 8019872:	e7da      	b.n	801982a <_free_r+0x22>
 8019874:	d902      	bls.n	801987c <_free_r+0x74>
 8019876:	230c      	movs	r3, #12
 8019878:	602b      	str	r3, [r5, #0]
 801987a:	e7d6      	b.n	801982a <_free_r+0x22>
 801987c:	6820      	ldr	r0, [r4, #0]
 801987e:	1821      	adds	r1, r4, r0
 8019880:	428b      	cmp	r3, r1
 8019882:	bf04      	itt	eq
 8019884:	6819      	ldreq	r1, [r3, #0]
 8019886:	685b      	ldreq	r3, [r3, #4]
 8019888:	6063      	str	r3, [r4, #4]
 801988a:	bf04      	itt	eq
 801988c:	1809      	addeq	r1, r1, r0
 801988e:	6021      	streq	r1, [r4, #0]
 8019890:	6054      	str	r4, [r2, #4]
 8019892:	e7ca      	b.n	801982a <_free_r+0x22>
 8019894:	bd38      	pop	{r3, r4, r5, pc}
 8019896:	bf00      	nop
 8019898:	200076c0 	.word	0x200076c0

0801989c <rshift>:
 801989c:	6903      	ldr	r3, [r0, #16]
 801989e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80198a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80198a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80198aa:	f100 0414 	add.w	r4, r0, #20
 80198ae:	dd45      	ble.n	801993c <rshift+0xa0>
 80198b0:	f011 011f 	ands.w	r1, r1, #31
 80198b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80198b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80198bc:	d10c      	bne.n	80198d8 <rshift+0x3c>
 80198be:	f100 0710 	add.w	r7, r0, #16
 80198c2:	4629      	mov	r1, r5
 80198c4:	42b1      	cmp	r1, r6
 80198c6:	d334      	bcc.n	8019932 <rshift+0x96>
 80198c8:	1a9b      	subs	r3, r3, r2
 80198ca:	009b      	lsls	r3, r3, #2
 80198cc:	1eea      	subs	r2, r5, #3
 80198ce:	4296      	cmp	r6, r2
 80198d0:	bf38      	it	cc
 80198d2:	2300      	movcc	r3, #0
 80198d4:	4423      	add	r3, r4
 80198d6:	e015      	b.n	8019904 <rshift+0x68>
 80198d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80198dc:	f1c1 0820 	rsb	r8, r1, #32
 80198e0:	40cf      	lsrs	r7, r1
 80198e2:	f105 0e04 	add.w	lr, r5, #4
 80198e6:	46a1      	mov	r9, r4
 80198e8:	4576      	cmp	r6, lr
 80198ea:	46f4      	mov	ip, lr
 80198ec:	d815      	bhi.n	801991a <rshift+0x7e>
 80198ee:	1a9a      	subs	r2, r3, r2
 80198f0:	0092      	lsls	r2, r2, #2
 80198f2:	3a04      	subs	r2, #4
 80198f4:	3501      	adds	r5, #1
 80198f6:	42ae      	cmp	r6, r5
 80198f8:	bf38      	it	cc
 80198fa:	2200      	movcc	r2, #0
 80198fc:	18a3      	adds	r3, r4, r2
 80198fe:	50a7      	str	r7, [r4, r2]
 8019900:	b107      	cbz	r7, 8019904 <rshift+0x68>
 8019902:	3304      	adds	r3, #4
 8019904:	1b1a      	subs	r2, r3, r4
 8019906:	42a3      	cmp	r3, r4
 8019908:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801990c:	bf08      	it	eq
 801990e:	2300      	moveq	r3, #0
 8019910:	6102      	str	r2, [r0, #16]
 8019912:	bf08      	it	eq
 8019914:	6143      	streq	r3, [r0, #20]
 8019916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801991a:	f8dc c000 	ldr.w	ip, [ip]
 801991e:	fa0c fc08 	lsl.w	ip, ip, r8
 8019922:	ea4c 0707 	orr.w	r7, ip, r7
 8019926:	f849 7b04 	str.w	r7, [r9], #4
 801992a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801992e:	40cf      	lsrs	r7, r1
 8019930:	e7da      	b.n	80198e8 <rshift+0x4c>
 8019932:	f851 cb04 	ldr.w	ip, [r1], #4
 8019936:	f847 cf04 	str.w	ip, [r7, #4]!
 801993a:	e7c3      	b.n	80198c4 <rshift+0x28>
 801993c:	4623      	mov	r3, r4
 801993e:	e7e1      	b.n	8019904 <rshift+0x68>

08019940 <__hexdig_fun>:
 8019940:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8019944:	2b09      	cmp	r3, #9
 8019946:	d802      	bhi.n	801994e <__hexdig_fun+0xe>
 8019948:	3820      	subs	r0, #32
 801994a:	b2c0      	uxtb	r0, r0
 801994c:	4770      	bx	lr
 801994e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8019952:	2b05      	cmp	r3, #5
 8019954:	d801      	bhi.n	801995a <__hexdig_fun+0x1a>
 8019956:	3847      	subs	r0, #71	@ 0x47
 8019958:	e7f7      	b.n	801994a <__hexdig_fun+0xa>
 801995a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801995e:	2b05      	cmp	r3, #5
 8019960:	d801      	bhi.n	8019966 <__hexdig_fun+0x26>
 8019962:	3827      	subs	r0, #39	@ 0x27
 8019964:	e7f1      	b.n	801994a <__hexdig_fun+0xa>
 8019966:	2000      	movs	r0, #0
 8019968:	4770      	bx	lr
	...

0801996c <__gethex>:
 801996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019970:	b085      	sub	sp, #20
 8019972:	468a      	mov	sl, r1
 8019974:	9302      	str	r3, [sp, #8]
 8019976:	680b      	ldr	r3, [r1, #0]
 8019978:	9001      	str	r0, [sp, #4]
 801997a:	4690      	mov	r8, r2
 801997c:	1c9c      	adds	r4, r3, #2
 801997e:	46a1      	mov	r9, r4
 8019980:	f814 0b01 	ldrb.w	r0, [r4], #1
 8019984:	2830      	cmp	r0, #48	@ 0x30
 8019986:	d0fa      	beq.n	801997e <__gethex+0x12>
 8019988:	eba9 0303 	sub.w	r3, r9, r3
 801998c:	f1a3 0b02 	sub.w	fp, r3, #2
 8019990:	f7ff ffd6 	bl	8019940 <__hexdig_fun>
 8019994:	4605      	mov	r5, r0
 8019996:	2800      	cmp	r0, #0
 8019998:	d168      	bne.n	8019a6c <__gethex+0x100>
 801999a:	49a0      	ldr	r1, [pc, #640]	@ (8019c1c <__gethex+0x2b0>)
 801999c:	2201      	movs	r2, #1
 801999e:	4648      	mov	r0, r9
 80199a0:	f7fe ff98 	bl	80188d4 <strncmp>
 80199a4:	4607      	mov	r7, r0
 80199a6:	2800      	cmp	r0, #0
 80199a8:	d167      	bne.n	8019a7a <__gethex+0x10e>
 80199aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80199ae:	4626      	mov	r6, r4
 80199b0:	f7ff ffc6 	bl	8019940 <__hexdig_fun>
 80199b4:	2800      	cmp	r0, #0
 80199b6:	d062      	beq.n	8019a7e <__gethex+0x112>
 80199b8:	4623      	mov	r3, r4
 80199ba:	7818      	ldrb	r0, [r3, #0]
 80199bc:	2830      	cmp	r0, #48	@ 0x30
 80199be:	4699      	mov	r9, r3
 80199c0:	f103 0301 	add.w	r3, r3, #1
 80199c4:	d0f9      	beq.n	80199ba <__gethex+0x4e>
 80199c6:	f7ff ffbb 	bl	8019940 <__hexdig_fun>
 80199ca:	fab0 f580 	clz	r5, r0
 80199ce:	096d      	lsrs	r5, r5, #5
 80199d0:	f04f 0b01 	mov.w	fp, #1
 80199d4:	464a      	mov	r2, r9
 80199d6:	4616      	mov	r6, r2
 80199d8:	3201      	adds	r2, #1
 80199da:	7830      	ldrb	r0, [r6, #0]
 80199dc:	f7ff ffb0 	bl	8019940 <__hexdig_fun>
 80199e0:	2800      	cmp	r0, #0
 80199e2:	d1f8      	bne.n	80199d6 <__gethex+0x6a>
 80199e4:	498d      	ldr	r1, [pc, #564]	@ (8019c1c <__gethex+0x2b0>)
 80199e6:	2201      	movs	r2, #1
 80199e8:	4630      	mov	r0, r6
 80199ea:	f7fe ff73 	bl	80188d4 <strncmp>
 80199ee:	2800      	cmp	r0, #0
 80199f0:	d13f      	bne.n	8019a72 <__gethex+0x106>
 80199f2:	b944      	cbnz	r4, 8019a06 <__gethex+0x9a>
 80199f4:	1c74      	adds	r4, r6, #1
 80199f6:	4622      	mov	r2, r4
 80199f8:	4616      	mov	r6, r2
 80199fa:	3201      	adds	r2, #1
 80199fc:	7830      	ldrb	r0, [r6, #0]
 80199fe:	f7ff ff9f 	bl	8019940 <__hexdig_fun>
 8019a02:	2800      	cmp	r0, #0
 8019a04:	d1f8      	bne.n	80199f8 <__gethex+0x8c>
 8019a06:	1ba4      	subs	r4, r4, r6
 8019a08:	00a7      	lsls	r7, r4, #2
 8019a0a:	7833      	ldrb	r3, [r6, #0]
 8019a0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8019a10:	2b50      	cmp	r3, #80	@ 0x50
 8019a12:	d13e      	bne.n	8019a92 <__gethex+0x126>
 8019a14:	7873      	ldrb	r3, [r6, #1]
 8019a16:	2b2b      	cmp	r3, #43	@ 0x2b
 8019a18:	d033      	beq.n	8019a82 <__gethex+0x116>
 8019a1a:	2b2d      	cmp	r3, #45	@ 0x2d
 8019a1c:	d034      	beq.n	8019a88 <__gethex+0x11c>
 8019a1e:	1c71      	adds	r1, r6, #1
 8019a20:	2400      	movs	r4, #0
 8019a22:	7808      	ldrb	r0, [r1, #0]
 8019a24:	f7ff ff8c 	bl	8019940 <__hexdig_fun>
 8019a28:	1e43      	subs	r3, r0, #1
 8019a2a:	b2db      	uxtb	r3, r3
 8019a2c:	2b18      	cmp	r3, #24
 8019a2e:	d830      	bhi.n	8019a92 <__gethex+0x126>
 8019a30:	f1a0 0210 	sub.w	r2, r0, #16
 8019a34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019a38:	f7ff ff82 	bl	8019940 <__hexdig_fun>
 8019a3c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8019a40:	fa5f fc8c 	uxtb.w	ip, ip
 8019a44:	f1bc 0f18 	cmp.w	ip, #24
 8019a48:	f04f 030a 	mov.w	r3, #10
 8019a4c:	d91e      	bls.n	8019a8c <__gethex+0x120>
 8019a4e:	b104      	cbz	r4, 8019a52 <__gethex+0xe6>
 8019a50:	4252      	negs	r2, r2
 8019a52:	4417      	add	r7, r2
 8019a54:	f8ca 1000 	str.w	r1, [sl]
 8019a58:	b1ed      	cbz	r5, 8019a96 <__gethex+0x12a>
 8019a5a:	f1bb 0f00 	cmp.w	fp, #0
 8019a5e:	bf0c      	ite	eq
 8019a60:	2506      	moveq	r5, #6
 8019a62:	2500      	movne	r5, #0
 8019a64:	4628      	mov	r0, r5
 8019a66:	b005      	add	sp, #20
 8019a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a6c:	2500      	movs	r5, #0
 8019a6e:	462c      	mov	r4, r5
 8019a70:	e7b0      	b.n	80199d4 <__gethex+0x68>
 8019a72:	2c00      	cmp	r4, #0
 8019a74:	d1c7      	bne.n	8019a06 <__gethex+0x9a>
 8019a76:	4627      	mov	r7, r4
 8019a78:	e7c7      	b.n	8019a0a <__gethex+0x9e>
 8019a7a:	464e      	mov	r6, r9
 8019a7c:	462f      	mov	r7, r5
 8019a7e:	2501      	movs	r5, #1
 8019a80:	e7c3      	b.n	8019a0a <__gethex+0x9e>
 8019a82:	2400      	movs	r4, #0
 8019a84:	1cb1      	adds	r1, r6, #2
 8019a86:	e7cc      	b.n	8019a22 <__gethex+0xb6>
 8019a88:	2401      	movs	r4, #1
 8019a8a:	e7fb      	b.n	8019a84 <__gethex+0x118>
 8019a8c:	fb03 0002 	mla	r0, r3, r2, r0
 8019a90:	e7ce      	b.n	8019a30 <__gethex+0xc4>
 8019a92:	4631      	mov	r1, r6
 8019a94:	e7de      	b.n	8019a54 <__gethex+0xe8>
 8019a96:	eba6 0309 	sub.w	r3, r6, r9
 8019a9a:	3b01      	subs	r3, #1
 8019a9c:	4629      	mov	r1, r5
 8019a9e:	2b07      	cmp	r3, #7
 8019aa0:	dc0a      	bgt.n	8019ab8 <__gethex+0x14c>
 8019aa2:	9801      	ldr	r0, [sp, #4]
 8019aa4:	f000 fd8a 	bl	801a5bc <_Balloc>
 8019aa8:	4604      	mov	r4, r0
 8019aaa:	b940      	cbnz	r0, 8019abe <__gethex+0x152>
 8019aac:	4b5c      	ldr	r3, [pc, #368]	@ (8019c20 <__gethex+0x2b4>)
 8019aae:	4602      	mov	r2, r0
 8019ab0:	21e4      	movs	r1, #228	@ 0xe4
 8019ab2:	485c      	ldr	r0, [pc, #368]	@ (8019c24 <__gethex+0x2b8>)
 8019ab4:	f7ff f83e 	bl	8018b34 <__assert_func>
 8019ab8:	3101      	adds	r1, #1
 8019aba:	105b      	asrs	r3, r3, #1
 8019abc:	e7ef      	b.n	8019a9e <__gethex+0x132>
 8019abe:	f100 0a14 	add.w	sl, r0, #20
 8019ac2:	2300      	movs	r3, #0
 8019ac4:	4655      	mov	r5, sl
 8019ac6:	469b      	mov	fp, r3
 8019ac8:	45b1      	cmp	r9, r6
 8019aca:	d337      	bcc.n	8019b3c <__gethex+0x1d0>
 8019acc:	f845 bb04 	str.w	fp, [r5], #4
 8019ad0:	eba5 050a 	sub.w	r5, r5, sl
 8019ad4:	10ad      	asrs	r5, r5, #2
 8019ad6:	6125      	str	r5, [r4, #16]
 8019ad8:	4658      	mov	r0, fp
 8019ada:	f000 fe61 	bl	801a7a0 <__hi0bits>
 8019ade:	016d      	lsls	r5, r5, #5
 8019ae0:	f8d8 6000 	ldr.w	r6, [r8]
 8019ae4:	1a2d      	subs	r5, r5, r0
 8019ae6:	42b5      	cmp	r5, r6
 8019ae8:	dd54      	ble.n	8019b94 <__gethex+0x228>
 8019aea:	1bad      	subs	r5, r5, r6
 8019aec:	4629      	mov	r1, r5
 8019aee:	4620      	mov	r0, r4
 8019af0:	f001 f9f5 	bl	801aede <__any_on>
 8019af4:	4681      	mov	r9, r0
 8019af6:	b178      	cbz	r0, 8019b18 <__gethex+0x1ac>
 8019af8:	1e6b      	subs	r3, r5, #1
 8019afa:	1159      	asrs	r1, r3, #5
 8019afc:	f003 021f 	and.w	r2, r3, #31
 8019b00:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019b04:	f04f 0901 	mov.w	r9, #1
 8019b08:	fa09 f202 	lsl.w	r2, r9, r2
 8019b0c:	420a      	tst	r2, r1
 8019b0e:	d003      	beq.n	8019b18 <__gethex+0x1ac>
 8019b10:	454b      	cmp	r3, r9
 8019b12:	dc36      	bgt.n	8019b82 <__gethex+0x216>
 8019b14:	f04f 0902 	mov.w	r9, #2
 8019b18:	4629      	mov	r1, r5
 8019b1a:	4620      	mov	r0, r4
 8019b1c:	f7ff febe 	bl	801989c <rshift>
 8019b20:	442f      	add	r7, r5
 8019b22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019b26:	42bb      	cmp	r3, r7
 8019b28:	da42      	bge.n	8019bb0 <__gethex+0x244>
 8019b2a:	9801      	ldr	r0, [sp, #4]
 8019b2c:	4621      	mov	r1, r4
 8019b2e:	f000 fd85 	bl	801a63c <_Bfree>
 8019b32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019b34:	2300      	movs	r3, #0
 8019b36:	6013      	str	r3, [r2, #0]
 8019b38:	25a3      	movs	r5, #163	@ 0xa3
 8019b3a:	e793      	b.n	8019a64 <__gethex+0xf8>
 8019b3c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8019b40:	2a2e      	cmp	r2, #46	@ 0x2e
 8019b42:	d012      	beq.n	8019b6a <__gethex+0x1fe>
 8019b44:	2b20      	cmp	r3, #32
 8019b46:	d104      	bne.n	8019b52 <__gethex+0x1e6>
 8019b48:	f845 bb04 	str.w	fp, [r5], #4
 8019b4c:	f04f 0b00 	mov.w	fp, #0
 8019b50:	465b      	mov	r3, fp
 8019b52:	7830      	ldrb	r0, [r6, #0]
 8019b54:	9303      	str	r3, [sp, #12]
 8019b56:	f7ff fef3 	bl	8019940 <__hexdig_fun>
 8019b5a:	9b03      	ldr	r3, [sp, #12]
 8019b5c:	f000 000f 	and.w	r0, r0, #15
 8019b60:	4098      	lsls	r0, r3
 8019b62:	ea4b 0b00 	orr.w	fp, fp, r0
 8019b66:	3304      	adds	r3, #4
 8019b68:	e7ae      	b.n	8019ac8 <__gethex+0x15c>
 8019b6a:	45b1      	cmp	r9, r6
 8019b6c:	d8ea      	bhi.n	8019b44 <__gethex+0x1d8>
 8019b6e:	492b      	ldr	r1, [pc, #172]	@ (8019c1c <__gethex+0x2b0>)
 8019b70:	9303      	str	r3, [sp, #12]
 8019b72:	2201      	movs	r2, #1
 8019b74:	4630      	mov	r0, r6
 8019b76:	f7fe fead 	bl	80188d4 <strncmp>
 8019b7a:	9b03      	ldr	r3, [sp, #12]
 8019b7c:	2800      	cmp	r0, #0
 8019b7e:	d1e1      	bne.n	8019b44 <__gethex+0x1d8>
 8019b80:	e7a2      	b.n	8019ac8 <__gethex+0x15c>
 8019b82:	1ea9      	subs	r1, r5, #2
 8019b84:	4620      	mov	r0, r4
 8019b86:	f001 f9aa 	bl	801aede <__any_on>
 8019b8a:	2800      	cmp	r0, #0
 8019b8c:	d0c2      	beq.n	8019b14 <__gethex+0x1a8>
 8019b8e:	f04f 0903 	mov.w	r9, #3
 8019b92:	e7c1      	b.n	8019b18 <__gethex+0x1ac>
 8019b94:	da09      	bge.n	8019baa <__gethex+0x23e>
 8019b96:	1b75      	subs	r5, r6, r5
 8019b98:	4621      	mov	r1, r4
 8019b9a:	9801      	ldr	r0, [sp, #4]
 8019b9c:	462a      	mov	r2, r5
 8019b9e:	f000 ff65 	bl	801aa6c <__lshift>
 8019ba2:	1b7f      	subs	r7, r7, r5
 8019ba4:	4604      	mov	r4, r0
 8019ba6:	f100 0a14 	add.w	sl, r0, #20
 8019baa:	f04f 0900 	mov.w	r9, #0
 8019bae:	e7b8      	b.n	8019b22 <__gethex+0x1b6>
 8019bb0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019bb4:	42bd      	cmp	r5, r7
 8019bb6:	dd6f      	ble.n	8019c98 <__gethex+0x32c>
 8019bb8:	1bed      	subs	r5, r5, r7
 8019bba:	42ae      	cmp	r6, r5
 8019bbc:	dc34      	bgt.n	8019c28 <__gethex+0x2bc>
 8019bbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019bc2:	2b02      	cmp	r3, #2
 8019bc4:	d022      	beq.n	8019c0c <__gethex+0x2a0>
 8019bc6:	2b03      	cmp	r3, #3
 8019bc8:	d024      	beq.n	8019c14 <__gethex+0x2a8>
 8019bca:	2b01      	cmp	r3, #1
 8019bcc:	d115      	bne.n	8019bfa <__gethex+0x28e>
 8019bce:	42ae      	cmp	r6, r5
 8019bd0:	d113      	bne.n	8019bfa <__gethex+0x28e>
 8019bd2:	2e01      	cmp	r6, #1
 8019bd4:	d10b      	bne.n	8019bee <__gethex+0x282>
 8019bd6:	9a02      	ldr	r2, [sp, #8]
 8019bd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019bdc:	6013      	str	r3, [r2, #0]
 8019bde:	2301      	movs	r3, #1
 8019be0:	6123      	str	r3, [r4, #16]
 8019be2:	f8ca 3000 	str.w	r3, [sl]
 8019be6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019be8:	2562      	movs	r5, #98	@ 0x62
 8019bea:	601c      	str	r4, [r3, #0]
 8019bec:	e73a      	b.n	8019a64 <__gethex+0xf8>
 8019bee:	1e71      	subs	r1, r6, #1
 8019bf0:	4620      	mov	r0, r4
 8019bf2:	f001 f974 	bl	801aede <__any_on>
 8019bf6:	2800      	cmp	r0, #0
 8019bf8:	d1ed      	bne.n	8019bd6 <__gethex+0x26a>
 8019bfa:	9801      	ldr	r0, [sp, #4]
 8019bfc:	4621      	mov	r1, r4
 8019bfe:	f000 fd1d 	bl	801a63c <_Bfree>
 8019c02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019c04:	2300      	movs	r3, #0
 8019c06:	6013      	str	r3, [r2, #0]
 8019c08:	2550      	movs	r5, #80	@ 0x50
 8019c0a:	e72b      	b.n	8019a64 <__gethex+0xf8>
 8019c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d1f3      	bne.n	8019bfa <__gethex+0x28e>
 8019c12:	e7e0      	b.n	8019bd6 <__gethex+0x26a>
 8019c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d1dd      	bne.n	8019bd6 <__gethex+0x26a>
 8019c1a:	e7ee      	b.n	8019bfa <__gethex+0x28e>
 8019c1c:	0801c2f1 	.word	0x0801c2f1
 8019c20:	0801c563 	.word	0x0801c563
 8019c24:	0801c574 	.word	0x0801c574
 8019c28:	1e6f      	subs	r7, r5, #1
 8019c2a:	f1b9 0f00 	cmp.w	r9, #0
 8019c2e:	d130      	bne.n	8019c92 <__gethex+0x326>
 8019c30:	b127      	cbz	r7, 8019c3c <__gethex+0x2d0>
 8019c32:	4639      	mov	r1, r7
 8019c34:	4620      	mov	r0, r4
 8019c36:	f001 f952 	bl	801aede <__any_on>
 8019c3a:	4681      	mov	r9, r0
 8019c3c:	117a      	asrs	r2, r7, #5
 8019c3e:	2301      	movs	r3, #1
 8019c40:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8019c44:	f007 071f 	and.w	r7, r7, #31
 8019c48:	40bb      	lsls	r3, r7
 8019c4a:	4213      	tst	r3, r2
 8019c4c:	4629      	mov	r1, r5
 8019c4e:	4620      	mov	r0, r4
 8019c50:	bf18      	it	ne
 8019c52:	f049 0902 	orrne.w	r9, r9, #2
 8019c56:	f7ff fe21 	bl	801989c <rshift>
 8019c5a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8019c5e:	1b76      	subs	r6, r6, r5
 8019c60:	2502      	movs	r5, #2
 8019c62:	f1b9 0f00 	cmp.w	r9, #0
 8019c66:	d047      	beq.n	8019cf8 <__gethex+0x38c>
 8019c68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019c6c:	2b02      	cmp	r3, #2
 8019c6e:	d015      	beq.n	8019c9c <__gethex+0x330>
 8019c70:	2b03      	cmp	r3, #3
 8019c72:	d017      	beq.n	8019ca4 <__gethex+0x338>
 8019c74:	2b01      	cmp	r3, #1
 8019c76:	d109      	bne.n	8019c8c <__gethex+0x320>
 8019c78:	f019 0f02 	tst.w	r9, #2
 8019c7c:	d006      	beq.n	8019c8c <__gethex+0x320>
 8019c7e:	f8da 3000 	ldr.w	r3, [sl]
 8019c82:	ea49 0903 	orr.w	r9, r9, r3
 8019c86:	f019 0f01 	tst.w	r9, #1
 8019c8a:	d10e      	bne.n	8019caa <__gethex+0x33e>
 8019c8c:	f045 0510 	orr.w	r5, r5, #16
 8019c90:	e032      	b.n	8019cf8 <__gethex+0x38c>
 8019c92:	f04f 0901 	mov.w	r9, #1
 8019c96:	e7d1      	b.n	8019c3c <__gethex+0x2d0>
 8019c98:	2501      	movs	r5, #1
 8019c9a:	e7e2      	b.n	8019c62 <__gethex+0x2f6>
 8019c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019c9e:	f1c3 0301 	rsb	r3, r3, #1
 8019ca2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d0f0      	beq.n	8019c8c <__gethex+0x320>
 8019caa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019cae:	f104 0314 	add.w	r3, r4, #20
 8019cb2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019cb6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019cba:	f04f 0c00 	mov.w	ip, #0
 8019cbe:	4618      	mov	r0, r3
 8019cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8019cc4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8019cc8:	d01b      	beq.n	8019d02 <__gethex+0x396>
 8019cca:	3201      	adds	r2, #1
 8019ccc:	6002      	str	r2, [r0, #0]
 8019cce:	2d02      	cmp	r5, #2
 8019cd0:	f104 0314 	add.w	r3, r4, #20
 8019cd4:	d13c      	bne.n	8019d50 <__gethex+0x3e4>
 8019cd6:	f8d8 2000 	ldr.w	r2, [r8]
 8019cda:	3a01      	subs	r2, #1
 8019cdc:	42b2      	cmp	r2, r6
 8019cde:	d109      	bne.n	8019cf4 <__gethex+0x388>
 8019ce0:	1171      	asrs	r1, r6, #5
 8019ce2:	2201      	movs	r2, #1
 8019ce4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019ce8:	f006 061f 	and.w	r6, r6, #31
 8019cec:	fa02 f606 	lsl.w	r6, r2, r6
 8019cf0:	421e      	tst	r6, r3
 8019cf2:	d13a      	bne.n	8019d6a <__gethex+0x3fe>
 8019cf4:	f045 0520 	orr.w	r5, r5, #32
 8019cf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019cfa:	601c      	str	r4, [r3, #0]
 8019cfc:	9b02      	ldr	r3, [sp, #8]
 8019cfe:	601f      	str	r7, [r3, #0]
 8019d00:	e6b0      	b.n	8019a64 <__gethex+0xf8>
 8019d02:	4299      	cmp	r1, r3
 8019d04:	f843 cc04 	str.w	ip, [r3, #-4]
 8019d08:	d8d9      	bhi.n	8019cbe <__gethex+0x352>
 8019d0a:	68a3      	ldr	r3, [r4, #8]
 8019d0c:	459b      	cmp	fp, r3
 8019d0e:	db17      	blt.n	8019d40 <__gethex+0x3d4>
 8019d10:	6861      	ldr	r1, [r4, #4]
 8019d12:	9801      	ldr	r0, [sp, #4]
 8019d14:	3101      	adds	r1, #1
 8019d16:	f000 fc51 	bl	801a5bc <_Balloc>
 8019d1a:	4681      	mov	r9, r0
 8019d1c:	b918      	cbnz	r0, 8019d26 <__gethex+0x3ba>
 8019d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8019d88 <__gethex+0x41c>)
 8019d20:	4602      	mov	r2, r0
 8019d22:	2184      	movs	r1, #132	@ 0x84
 8019d24:	e6c5      	b.n	8019ab2 <__gethex+0x146>
 8019d26:	6922      	ldr	r2, [r4, #16]
 8019d28:	3202      	adds	r2, #2
 8019d2a:	f104 010c 	add.w	r1, r4, #12
 8019d2e:	0092      	lsls	r2, r2, #2
 8019d30:	300c      	adds	r0, #12
 8019d32:	f7fe fedf 	bl	8018af4 <memcpy>
 8019d36:	4621      	mov	r1, r4
 8019d38:	9801      	ldr	r0, [sp, #4]
 8019d3a:	f000 fc7f 	bl	801a63c <_Bfree>
 8019d3e:	464c      	mov	r4, r9
 8019d40:	6923      	ldr	r3, [r4, #16]
 8019d42:	1c5a      	adds	r2, r3, #1
 8019d44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019d48:	6122      	str	r2, [r4, #16]
 8019d4a:	2201      	movs	r2, #1
 8019d4c:	615a      	str	r2, [r3, #20]
 8019d4e:	e7be      	b.n	8019cce <__gethex+0x362>
 8019d50:	6922      	ldr	r2, [r4, #16]
 8019d52:	455a      	cmp	r2, fp
 8019d54:	dd0b      	ble.n	8019d6e <__gethex+0x402>
 8019d56:	2101      	movs	r1, #1
 8019d58:	4620      	mov	r0, r4
 8019d5a:	f7ff fd9f 	bl	801989c <rshift>
 8019d5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019d62:	3701      	adds	r7, #1
 8019d64:	42bb      	cmp	r3, r7
 8019d66:	f6ff aee0 	blt.w	8019b2a <__gethex+0x1be>
 8019d6a:	2501      	movs	r5, #1
 8019d6c:	e7c2      	b.n	8019cf4 <__gethex+0x388>
 8019d6e:	f016 061f 	ands.w	r6, r6, #31
 8019d72:	d0fa      	beq.n	8019d6a <__gethex+0x3fe>
 8019d74:	4453      	add	r3, sl
 8019d76:	f1c6 0620 	rsb	r6, r6, #32
 8019d7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8019d7e:	f000 fd0f 	bl	801a7a0 <__hi0bits>
 8019d82:	42b0      	cmp	r0, r6
 8019d84:	dbe7      	blt.n	8019d56 <__gethex+0x3ea>
 8019d86:	e7f0      	b.n	8019d6a <__gethex+0x3fe>
 8019d88:	0801c563 	.word	0x0801c563

08019d8c <L_shift>:
 8019d8c:	f1c2 0208 	rsb	r2, r2, #8
 8019d90:	0092      	lsls	r2, r2, #2
 8019d92:	b570      	push	{r4, r5, r6, lr}
 8019d94:	f1c2 0620 	rsb	r6, r2, #32
 8019d98:	6843      	ldr	r3, [r0, #4]
 8019d9a:	6804      	ldr	r4, [r0, #0]
 8019d9c:	fa03 f506 	lsl.w	r5, r3, r6
 8019da0:	432c      	orrs	r4, r5
 8019da2:	40d3      	lsrs	r3, r2
 8019da4:	6004      	str	r4, [r0, #0]
 8019da6:	f840 3f04 	str.w	r3, [r0, #4]!
 8019daa:	4288      	cmp	r0, r1
 8019dac:	d3f4      	bcc.n	8019d98 <L_shift+0xc>
 8019dae:	bd70      	pop	{r4, r5, r6, pc}

08019db0 <__match>:
 8019db0:	b530      	push	{r4, r5, lr}
 8019db2:	6803      	ldr	r3, [r0, #0]
 8019db4:	3301      	adds	r3, #1
 8019db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019dba:	b914      	cbnz	r4, 8019dc2 <__match+0x12>
 8019dbc:	6003      	str	r3, [r0, #0]
 8019dbe:	2001      	movs	r0, #1
 8019dc0:	bd30      	pop	{r4, r5, pc}
 8019dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019dc6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8019dca:	2d19      	cmp	r5, #25
 8019dcc:	bf98      	it	ls
 8019dce:	3220      	addls	r2, #32
 8019dd0:	42a2      	cmp	r2, r4
 8019dd2:	d0f0      	beq.n	8019db6 <__match+0x6>
 8019dd4:	2000      	movs	r0, #0
 8019dd6:	e7f3      	b.n	8019dc0 <__match+0x10>

08019dd8 <__hexnan>:
 8019dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ddc:	680b      	ldr	r3, [r1, #0]
 8019dde:	6801      	ldr	r1, [r0, #0]
 8019de0:	115e      	asrs	r6, r3, #5
 8019de2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019de6:	f013 031f 	ands.w	r3, r3, #31
 8019dea:	b087      	sub	sp, #28
 8019dec:	bf18      	it	ne
 8019dee:	3604      	addne	r6, #4
 8019df0:	2500      	movs	r5, #0
 8019df2:	1f37      	subs	r7, r6, #4
 8019df4:	4682      	mov	sl, r0
 8019df6:	4690      	mov	r8, r2
 8019df8:	9301      	str	r3, [sp, #4]
 8019dfa:	f846 5c04 	str.w	r5, [r6, #-4]
 8019dfe:	46b9      	mov	r9, r7
 8019e00:	463c      	mov	r4, r7
 8019e02:	9502      	str	r5, [sp, #8]
 8019e04:	46ab      	mov	fp, r5
 8019e06:	784a      	ldrb	r2, [r1, #1]
 8019e08:	1c4b      	adds	r3, r1, #1
 8019e0a:	9303      	str	r3, [sp, #12]
 8019e0c:	b342      	cbz	r2, 8019e60 <__hexnan+0x88>
 8019e0e:	4610      	mov	r0, r2
 8019e10:	9105      	str	r1, [sp, #20]
 8019e12:	9204      	str	r2, [sp, #16]
 8019e14:	f7ff fd94 	bl	8019940 <__hexdig_fun>
 8019e18:	2800      	cmp	r0, #0
 8019e1a:	d151      	bne.n	8019ec0 <__hexnan+0xe8>
 8019e1c:	9a04      	ldr	r2, [sp, #16]
 8019e1e:	9905      	ldr	r1, [sp, #20]
 8019e20:	2a20      	cmp	r2, #32
 8019e22:	d818      	bhi.n	8019e56 <__hexnan+0x7e>
 8019e24:	9b02      	ldr	r3, [sp, #8]
 8019e26:	459b      	cmp	fp, r3
 8019e28:	dd13      	ble.n	8019e52 <__hexnan+0x7a>
 8019e2a:	454c      	cmp	r4, r9
 8019e2c:	d206      	bcs.n	8019e3c <__hexnan+0x64>
 8019e2e:	2d07      	cmp	r5, #7
 8019e30:	dc04      	bgt.n	8019e3c <__hexnan+0x64>
 8019e32:	462a      	mov	r2, r5
 8019e34:	4649      	mov	r1, r9
 8019e36:	4620      	mov	r0, r4
 8019e38:	f7ff ffa8 	bl	8019d8c <L_shift>
 8019e3c:	4544      	cmp	r4, r8
 8019e3e:	d952      	bls.n	8019ee6 <__hexnan+0x10e>
 8019e40:	2300      	movs	r3, #0
 8019e42:	f1a4 0904 	sub.w	r9, r4, #4
 8019e46:	f844 3c04 	str.w	r3, [r4, #-4]
 8019e4a:	f8cd b008 	str.w	fp, [sp, #8]
 8019e4e:	464c      	mov	r4, r9
 8019e50:	461d      	mov	r5, r3
 8019e52:	9903      	ldr	r1, [sp, #12]
 8019e54:	e7d7      	b.n	8019e06 <__hexnan+0x2e>
 8019e56:	2a29      	cmp	r2, #41	@ 0x29
 8019e58:	d157      	bne.n	8019f0a <__hexnan+0x132>
 8019e5a:	3102      	adds	r1, #2
 8019e5c:	f8ca 1000 	str.w	r1, [sl]
 8019e60:	f1bb 0f00 	cmp.w	fp, #0
 8019e64:	d051      	beq.n	8019f0a <__hexnan+0x132>
 8019e66:	454c      	cmp	r4, r9
 8019e68:	d206      	bcs.n	8019e78 <__hexnan+0xa0>
 8019e6a:	2d07      	cmp	r5, #7
 8019e6c:	dc04      	bgt.n	8019e78 <__hexnan+0xa0>
 8019e6e:	462a      	mov	r2, r5
 8019e70:	4649      	mov	r1, r9
 8019e72:	4620      	mov	r0, r4
 8019e74:	f7ff ff8a 	bl	8019d8c <L_shift>
 8019e78:	4544      	cmp	r4, r8
 8019e7a:	d936      	bls.n	8019eea <__hexnan+0x112>
 8019e7c:	f1a8 0204 	sub.w	r2, r8, #4
 8019e80:	4623      	mov	r3, r4
 8019e82:	f853 1b04 	ldr.w	r1, [r3], #4
 8019e86:	f842 1f04 	str.w	r1, [r2, #4]!
 8019e8a:	429f      	cmp	r7, r3
 8019e8c:	d2f9      	bcs.n	8019e82 <__hexnan+0xaa>
 8019e8e:	1b3b      	subs	r3, r7, r4
 8019e90:	f023 0303 	bic.w	r3, r3, #3
 8019e94:	3304      	adds	r3, #4
 8019e96:	3401      	adds	r4, #1
 8019e98:	3e03      	subs	r6, #3
 8019e9a:	42b4      	cmp	r4, r6
 8019e9c:	bf88      	it	hi
 8019e9e:	2304      	movhi	r3, #4
 8019ea0:	4443      	add	r3, r8
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	f843 2b04 	str.w	r2, [r3], #4
 8019ea8:	429f      	cmp	r7, r3
 8019eaa:	d2fb      	bcs.n	8019ea4 <__hexnan+0xcc>
 8019eac:	683b      	ldr	r3, [r7, #0]
 8019eae:	b91b      	cbnz	r3, 8019eb8 <__hexnan+0xe0>
 8019eb0:	4547      	cmp	r7, r8
 8019eb2:	d128      	bne.n	8019f06 <__hexnan+0x12e>
 8019eb4:	2301      	movs	r3, #1
 8019eb6:	603b      	str	r3, [r7, #0]
 8019eb8:	2005      	movs	r0, #5
 8019eba:	b007      	add	sp, #28
 8019ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ec0:	3501      	adds	r5, #1
 8019ec2:	2d08      	cmp	r5, #8
 8019ec4:	f10b 0b01 	add.w	fp, fp, #1
 8019ec8:	dd06      	ble.n	8019ed8 <__hexnan+0x100>
 8019eca:	4544      	cmp	r4, r8
 8019ecc:	d9c1      	bls.n	8019e52 <__hexnan+0x7a>
 8019ece:	2300      	movs	r3, #0
 8019ed0:	f844 3c04 	str.w	r3, [r4, #-4]
 8019ed4:	2501      	movs	r5, #1
 8019ed6:	3c04      	subs	r4, #4
 8019ed8:	6822      	ldr	r2, [r4, #0]
 8019eda:	f000 000f 	and.w	r0, r0, #15
 8019ede:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019ee2:	6020      	str	r0, [r4, #0]
 8019ee4:	e7b5      	b.n	8019e52 <__hexnan+0x7a>
 8019ee6:	2508      	movs	r5, #8
 8019ee8:	e7b3      	b.n	8019e52 <__hexnan+0x7a>
 8019eea:	9b01      	ldr	r3, [sp, #4]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d0dd      	beq.n	8019eac <__hexnan+0xd4>
 8019ef0:	f1c3 0320 	rsb	r3, r3, #32
 8019ef4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019ef8:	40da      	lsrs	r2, r3
 8019efa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8019efe:	4013      	ands	r3, r2
 8019f00:	f846 3c04 	str.w	r3, [r6, #-4]
 8019f04:	e7d2      	b.n	8019eac <__hexnan+0xd4>
 8019f06:	3f04      	subs	r7, #4
 8019f08:	e7d0      	b.n	8019eac <__hexnan+0xd4>
 8019f0a:	2004      	movs	r0, #4
 8019f0c:	e7d5      	b.n	8019eba <__hexnan+0xe2>

08019f0e <__ssputs_r>:
 8019f0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f12:	688e      	ldr	r6, [r1, #8]
 8019f14:	461f      	mov	r7, r3
 8019f16:	42be      	cmp	r6, r7
 8019f18:	680b      	ldr	r3, [r1, #0]
 8019f1a:	4682      	mov	sl, r0
 8019f1c:	460c      	mov	r4, r1
 8019f1e:	4690      	mov	r8, r2
 8019f20:	d82d      	bhi.n	8019f7e <__ssputs_r+0x70>
 8019f22:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019f26:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019f2a:	d026      	beq.n	8019f7a <__ssputs_r+0x6c>
 8019f2c:	6965      	ldr	r5, [r4, #20]
 8019f2e:	6909      	ldr	r1, [r1, #16]
 8019f30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f34:	eba3 0901 	sub.w	r9, r3, r1
 8019f38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019f3c:	1c7b      	adds	r3, r7, #1
 8019f3e:	444b      	add	r3, r9
 8019f40:	106d      	asrs	r5, r5, #1
 8019f42:	429d      	cmp	r5, r3
 8019f44:	bf38      	it	cc
 8019f46:	461d      	movcc	r5, r3
 8019f48:	0553      	lsls	r3, r2, #21
 8019f4a:	d527      	bpl.n	8019f9c <__ssputs_r+0x8e>
 8019f4c:	4629      	mov	r1, r5
 8019f4e:	f7fd f8b3 	bl	80170b8 <_malloc_r>
 8019f52:	4606      	mov	r6, r0
 8019f54:	b360      	cbz	r0, 8019fb0 <__ssputs_r+0xa2>
 8019f56:	6921      	ldr	r1, [r4, #16]
 8019f58:	464a      	mov	r2, r9
 8019f5a:	f7fe fdcb 	bl	8018af4 <memcpy>
 8019f5e:	89a3      	ldrh	r3, [r4, #12]
 8019f60:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019f68:	81a3      	strh	r3, [r4, #12]
 8019f6a:	6126      	str	r6, [r4, #16]
 8019f6c:	6165      	str	r5, [r4, #20]
 8019f6e:	444e      	add	r6, r9
 8019f70:	eba5 0509 	sub.w	r5, r5, r9
 8019f74:	6026      	str	r6, [r4, #0]
 8019f76:	60a5      	str	r5, [r4, #8]
 8019f78:	463e      	mov	r6, r7
 8019f7a:	42be      	cmp	r6, r7
 8019f7c:	d900      	bls.n	8019f80 <__ssputs_r+0x72>
 8019f7e:	463e      	mov	r6, r7
 8019f80:	6820      	ldr	r0, [r4, #0]
 8019f82:	4632      	mov	r2, r6
 8019f84:	4641      	mov	r1, r8
 8019f86:	f001 f952 	bl	801b22e <memmove>
 8019f8a:	68a3      	ldr	r3, [r4, #8]
 8019f8c:	1b9b      	subs	r3, r3, r6
 8019f8e:	60a3      	str	r3, [r4, #8]
 8019f90:	6823      	ldr	r3, [r4, #0]
 8019f92:	4433      	add	r3, r6
 8019f94:	6023      	str	r3, [r4, #0]
 8019f96:	2000      	movs	r0, #0
 8019f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f9c:	462a      	mov	r2, r5
 8019f9e:	f001 f815 	bl	801afcc <_realloc_r>
 8019fa2:	4606      	mov	r6, r0
 8019fa4:	2800      	cmp	r0, #0
 8019fa6:	d1e0      	bne.n	8019f6a <__ssputs_r+0x5c>
 8019fa8:	6921      	ldr	r1, [r4, #16]
 8019faa:	4650      	mov	r0, sl
 8019fac:	f7ff fc2c 	bl	8019808 <_free_r>
 8019fb0:	230c      	movs	r3, #12
 8019fb2:	f8ca 3000 	str.w	r3, [sl]
 8019fb6:	89a3      	ldrh	r3, [r4, #12]
 8019fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019fbc:	81a3      	strh	r3, [r4, #12]
 8019fbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019fc2:	e7e9      	b.n	8019f98 <__ssputs_r+0x8a>

08019fc4 <_svfiprintf_r>:
 8019fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fc8:	4698      	mov	r8, r3
 8019fca:	898b      	ldrh	r3, [r1, #12]
 8019fcc:	061b      	lsls	r3, r3, #24
 8019fce:	b09d      	sub	sp, #116	@ 0x74
 8019fd0:	4607      	mov	r7, r0
 8019fd2:	460d      	mov	r5, r1
 8019fd4:	4614      	mov	r4, r2
 8019fd6:	d510      	bpl.n	8019ffa <_svfiprintf_r+0x36>
 8019fd8:	690b      	ldr	r3, [r1, #16]
 8019fda:	b973      	cbnz	r3, 8019ffa <_svfiprintf_r+0x36>
 8019fdc:	2140      	movs	r1, #64	@ 0x40
 8019fde:	f7fd f86b 	bl	80170b8 <_malloc_r>
 8019fe2:	6028      	str	r0, [r5, #0]
 8019fe4:	6128      	str	r0, [r5, #16]
 8019fe6:	b930      	cbnz	r0, 8019ff6 <_svfiprintf_r+0x32>
 8019fe8:	230c      	movs	r3, #12
 8019fea:	603b      	str	r3, [r7, #0]
 8019fec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ff0:	b01d      	add	sp, #116	@ 0x74
 8019ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ff6:	2340      	movs	r3, #64	@ 0x40
 8019ff8:	616b      	str	r3, [r5, #20]
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ffe:	2320      	movs	r3, #32
 801a000:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a004:	f8cd 800c 	str.w	r8, [sp, #12]
 801a008:	2330      	movs	r3, #48	@ 0x30
 801a00a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a1a8 <_svfiprintf_r+0x1e4>
 801a00e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a012:	f04f 0901 	mov.w	r9, #1
 801a016:	4623      	mov	r3, r4
 801a018:	469a      	mov	sl, r3
 801a01a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a01e:	b10a      	cbz	r2, 801a024 <_svfiprintf_r+0x60>
 801a020:	2a25      	cmp	r2, #37	@ 0x25
 801a022:	d1f9      	bne.n	801a018 <_svfiprintf_r+0x54>
 801a024:	ebba 0b04 	subs.w	fp, sl, r4
 801a028:	d00b      	beq.n	801a042 <_svfiprintf_r+0x7e>
 801a02a:	465b      	mov	r3, fp
 801a02c:	4622      	mov	r2, r4
 801a02e:	4629      	mov	r1, r5
 801a030:	4638      	mov	r0, r7
 801a032:	f7ff ff6c 	bl	8019f0e <__ssputs_r>
 801a036:	3001      	adds	r0, #1
 801a038:	f000 80a7 	beq.w	801a18a <_svfiprintf_r+0x1c6>
 801a03c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a03e:	445a      	add	r2, fp
 801a040:	9209      	str	r2, [sp, #36]	@ 0x24
 801a042:	f89a 3000 	ldrb.w	r3, [sl]
 801a046:	2b00      	cmp	r3, #0
 801a048:	f000 809f 	beq.w	801a18a <_svfiprintf_r+0x1c6>
 801a04c:	2300      	movs	r3, #0
 801a04e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a056:	f10a 0a01 	add.w	sl, sl, #1
 801a05a:	9304      	str	r3, [sp, #16]
 801a05c:	9307      	str	r3, [sp, #28]
 801a05e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a062:	931a      	str	r3, [sp, #104]	@ 0x68
 801a064:	4654      	mov	r4, sl
 801a066:	2205      	movs	r2, #5
 801a068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a06c:	484e      	ldr	r0, [pc, #312]	@ (801a1a8 <_svfiprintf_r+0x1e4>)
 801a06e:	f7e8 fad7 	bl	8002620 <memchr>
 801a072:	9a04      	ldr	r2, [sp, #16]
 801a074:	b9d8      	cbnz	r0, 801a0ae <_svfiprintf_r+0xea>
 801a076:	06d0      	lsls	r0, r2, #27
 801a078:	bf44      	itt	mi
 801a07a:	2320      	movmi	r3, #32
 801a07c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a080:	0711      	lsls	r1, r2, #28
 801a082:	bf44      	itt	mi
 801a084:	232b      	movmi	r3, #43	@ 0x2b
 801a086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a08a:	f89a 3000 	ldrb.w	r3, [sl]
 801a08e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a090:	d015      	beq.n	801a0be <_svfiprintf_r+0xfa>
 801a092:	9a07      	ldr	r2, [sp, #28]
 801a094:	4654      	mov	r4, sl
 801a096:	2000      	movs	r0, #0
 801a098:	f04f 0c0a 	mov.w	ip, #10
 801a09c:	4621      	mov	r1, r4
 801a09e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0a2:	3b30      	subs	r3, #48	@ 0x30
 801a0a4:	2b09      	cmp	r3, #9
 801a0a6:	d94b      	bls.n	801a140 <_svfiprintf_r+0x17c>
 801a0a8:	b1b0      	cbz	r0, 801a0d8 <_svfiprintf_r+0x114>
 801a0aa:	9207      	str	r2, [sp, #28]
 801a0ac:	e014      	b.n	801a0d8 <_svfiprintf_r+0x114>
 801a0ae:	eba0 0308 	sub.w	r3, r0, r8
 801a0b2:	fa09 f303 	lsl.w	r3, r9, r3
 801a0b6:	4313      	orrs	r3, r2
 801a0b8:	9304      	str	r3, [sp, #16]
 801a0ba:	46a2      	mov	sl, r4
 801a0bc:	e7d2      	b.n	801a064 <_svfiprintf_r+0xa0>
 801a0be:	9b03      	ldr	r3, [sp, #12]
 801a0c0:	1d19      	adds	r1, r3, #4
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	9103      	str	r1, [sp, #12]
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	bfbb      	ittet	lt
 801a0ca:	425b      	neglt	r3, r3
 801a0cc:	f042 0202 	orrlt.w	r2, r2, #2
 801a0d0:	9307      	strge	r3, [sp, #28]
 801a0d2:	9307      	strlt	r3, [sp, #28]
 801a0d4:	bfb8      	it	lt
 801a0d6:	9204      	strlt	r2, [sp, #16]
 801a0d8:	7823      	ldrb	r3, [r4, #0]
 801a0da:	2b2e      	cmp	r3, #46	@ 0x2e
 801a0dc:	d10a      	bne.n	801a0f4 <_svfiprintf_r+0x130>
 801a0de:	7863      	ldrb	r3, [r4, #1]
 801a0e0:	2b2a      	cmp	r3, #42	@ 0x2a
 801a0e2:	d132      	bne.n	801a14a <_svfiprintf_r+0x186>
 801a0e4:	9b03      	ldr	r3, [sp, #12]
 801a0e6:	1d1a      	adds	r2, r3, #4
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	9203      	str	r2, [sp, #12]
 801a0ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a0f0:	3402      	adds	r4, #2
 801a0f2:	9305      	str	r3, [sp, #20]
 801a0f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a1b8 <_svfiprintf_r+0x1f4>
 801a0f8:	7821      	ldrb	r1, [r4, #0]
 801a0fa:	2203      	movs	r2, #3
 801a0fc:	4650      	mov	r0, sl
 801a0fe:	f7e8 fa8f 	bl	8002620 <memchr>
 801a102:	b138      	cbz	r0, 801a114 <_svfiprintf_r+0x150>
 801a104:	9b04      	ldr	r3, [sp, #16]
 801a106:	eba0 000a 	sub.w	r0, r0, sl
 801a10a:	2240      	movs	r2, #64	@ 0x40
 801a10c:	4082      	lsls	r2, r0
 801a10e:	4313      	orrs	r3, r2
 801a110:	3401      	adds	r4, #1
 801a112:	9304      	str	r3, [sp, #16]
 801a114:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a118:	4824      	ldr	r0, [pc, #144]	@ (801a1ac <_svfiprintf_r+0x1e8>)
 801a11a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a11e:	2206      	movs	r2, #6
 801a120:	f7e8 fa7e 	bl	8002620 <memchr>
 801a124:	2800      	cmp	r0, #0
 801a126:	d036      	beq.n	801a196 <_svfiprintf_r+0x1d2>
 801a128:	4b21      	ldr	r3, [pc, #132]	@ (801a1b0 <_svfiprintf_r+0x1ec>)
 801a12a:	bb1b      	cbnz	r3, 801a174 <_svfiprintf_r+0x1b0>
 801a12c:	9b03      	ldr	r3, [sp, #12]
 801a12e:	3307      	adds	r3, #7
 801a130:	f023 0307 	bic.w	r3, r3, #7
 801a134:	3308      	adds	r3, #8
 801a136:	9303      	str	r3, [sp, #12]
 801a138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a13a:	4433      	add	r3, r6
 801a13c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a13e:	e76a      	b.n	801a016 <_svfiprintf_r+0x52>
 801a140:	fb0c 3202 	mla	r2, ip, r2, r3
 801a144:	460c      	mov	r4, r1
 801a146:	2001      	movs	r0, #1
 801a148:	e7a8      	b.n	801a09c <_svfiprintf_r+0xd8>
 801a14a:	2300      	movs	r3, #0
 801a14c:	3401      	adds	r4, #1
 801a14e:	9305      	str	r3, [sp, #20]
 801a150:	4619      	mov	r1, r3
 801a152:	f04f 0c0a 	mov.w	ip, #10
 801a156:	4620      	mov	r0, r4
 801a158:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a15c:	3a30      	subs	r2, #48	@ 0x30
 801a15e:	2a09      	cmp	r2, #9
 801a160:	d903      	bls.n	801a16a <_svfiprintf_r+0x1a6>
 801a162:	2b00      	cmp	r3, #0
 801a164:	d0c6      	beq.n	801a0f4 <_svfiprintf_r+0x130>
 801a166:	9105      	str	r1, [sp, #20]
 801a168:	e7c4      	b.n	801a0f4 <_svfiprintf_r+0x130>
 801a16a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a16e:	4604      	mov	r4, r0
 801a170:	2301      	movs	r3, #1
 801a172:	e7f0      	b.n	801a156 <_svfiprintf_r+0x192>
 801a174:	ab03      	add	r3, sp, #12
 801a176:	9300      	str	r3, [sp, #0]
 801a178:	462a      	mov	r2, r5
 801a17a:	4b0e      	ldr	r3, [pc, #56]	@ (801a1b4 <_svfiprintf_r+0x1f0>)
 801a17c:	a904      	add	r1, sp, #16
 801a17e:	4638      	mov	r0, r7
 801a180:	f7fc fd46 	bl	8016c10 <_printf_float>
 801a184:	1c42      	adds	r2, r0, #1
 801a186:	4606      	mov	r6, r0
 801a188:	d1d6      	bne.n	801a138 <_svfiprintf_r+0x174>
 801a18a:	89ab      	ldrh	r3, [r5, #12]
 801a18c:	065b      	lsls	r3, r3, #25
 801a18e:	f53f af2d 	bmi.w	8019fec <_svfiprintf_r+0x28>
 801a192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a194:	e72c      	b.n	8019ff0 <_svfiprintf_r+0x2c>
 801a196:	ab03      	add	r3, sp, #12
 801a198:	9300      	str	r3, [sp, #0]
 801a19a:	462a      	mov	r2, r5
 801a19c:	4b05      	ldr	r3, [pc, #20]	@ (801a1b4 <_svfiprintf_r+0x1f0>)
 801a19e:	a904      	add	r1, sp, #16
 801a1a0:	4638      	mov	r0, r7
 801a1a2:	f7fd f877 	bl	8017294 <_printf_i>
 801a1a6:	e7ed      	b.n	801a184 <_svfiprintf_r+0x1c0>
 801a1a8:	0801c5d4 	.word	0x0801c5d4
 801a1ac:	0801c5de 	.word	0x0801c5de
 801a1b0:	08016c11 	.word	0x08016c11
 801a1b4:	08019f0f 	.word	0x08019f0f
 801a1b8:	0801c5da 	.word	0x0801c5da

0801a1bc <__sfputc_r>:
 801a1bc:	6893      	ldr	r3, [r2, #8]
 801a1be:	3b01      	subs	r3, #1
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	b410      	push	{r4}
 801a1c4:	6093      	str	r3, [r2, #8]
 801a1c6:	da08      	bge.n	801a1da <__sfputc_r+0x1e>
 801a1c8:	6994      	ldr	r4, [r2, #24]
 801a1ca:	42a3      	cmp	r3, r4
 801a1cc:	db01      	blt.n	801a1d2 <__sfputc_r+0x16>
 801a1ce:	290a      	cmp	r1, #10
 801a1d0:	d103      	bne.n	801a1da <__sfputc_r+0x1e>
 801a1d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1d6:	f000 bf27 	b.w	801b028 <__swbuf_r>
 801a1da:	6813      	ldr	r3, [r2, #0]
 801a1dc:	1c58      	adds	r0, r3, #1
 801a1de:	6010      	str	r0, [r2, #0]
 801a1e0:	7019      	strb	r1, [r3, #0]
 801a1e2:	4608      	mov	r0, r1
 801a1e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1e8:	4770      	bx	lr

0801a1ea <__sfputs_r>:
 801a1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1ec:	4606      	mov	r6, r0
 801a1ee:	460f      	mov	r7, r1
 801a1f0:	4614      	mov	r4, r2
 801a1f2:	18d5      	adds	r5, r2, r3
 801a1f4:	42ac      	cmp	r4, r5
 801a1f6:	d101      	bne.n	801a1fc <__sfputs_r+0x12>
 801a1f8:	2000      	movs	r0, #0
 801a1fa:	e007      	b.n	801a20c <__sfputs_r+0x22>
 801a1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a200:	463a      	mov	r2, r7
 801a202:	4630      	mov	r0, r6
 801a204:	f7ff ffda 	bl	801a1bc <__sfputc_r>
 801a208:	1c43      	adds	r3, r0, #1
 801a20a:	d1f3      	bne.n	801a1f4 <__sfputs_r+0xa>
 801a20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a210 <_vfiprintf_r>:
 801a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a214:	460d      	mov	r5, r1
 801a216:	b09d      	sub	sp, #116	@ 0x74
 801a218:	4614      	mov	r4, r2
 801a21a:	4698      	mov	r8, r3
 801a21c:	4606      	mov	r6, r0
 801a21e:	b118      	cbz	r0, 801a228 <_vfiprintf_r+0x18>
 801a220:	6a03      	ldr	r3, [r0, #32]
 801a222:	b90b      	cbnz	r3, 801a228 <_vfiprintf_r+0x18>
 801a224:	f7fd fc22 	bl	8017a6c <__sinit>
 801a228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a22a:	07d9      	lsls	r1, r3, #31
 801a22c:	d405      	bmi.n	801a23a <_vfiprintf_r+0x2a>
 801a22e:	89ab      	ldrh	r3, [r5, #12]
 801a230:	059a      	lsls	r2, r3, #22
 801a232:	d402      	bmi.n	801a23a <_vfiprintf_r+0x2a>
 801a234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a236:	f7fe fc58 	bl	8018aea <__retarget_lock_acquire_recursive>
 801a23a:	89ab      	ldrh	r3, [r5, #12]
 801a23c:	071b      	lsls	r3, r3, #28
 801a23e:	d501      	bpl.n	801a244 <_vfiprintf_r+0x34>
 801a240:	692b      	ldr	r3, [r5, #16]
 801a242:	b99b      	cbnz	r3, 801a26c <_vfiprintf_r+0x5c>
 801a244:	4629      	mov	r1, r5
 801a246:	4630      	mov	r0, r6
 801a248:	f000 ff2c 	bl	801b0a4 <__swsetup_r>
 801a24c:	b170      	cbz	r0, 801a26c <_vfiprintf_r+0x5c>
 801a24e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a250:	07dc      	lsls	r4, r3, #31
 801a252:	d504      	bpl.n	801a25e <_vfiprintf_r+0x4e>
 801a254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a258:	b01d      	add	sp, #116	@ 0x74
 801a25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a25e:	89ab      	ldrh	r3, [r5, #12]
 801a260:	0598      	lsls	r0, r3, #22
 801a262:	d4f7      	bmi.n	801a254 <_vfiprintf_r+0x44>
 801a264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a266:	f7fe fc41 	bl	8018aec <__retarget_lock_release_recursive>
 801a26a:	e7f3      	b.n	801a254 <_vfiprintf_r+0x44>
 801a26c:	2300      	movs	r3, #0
 801a26e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a270:	2320      	movs	r3, #32
 801a272:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a276:	f8cd 800c 	str.w	r8, [sp, #12]
 801a27a:	2330      	movs	r3, #48	@ 0x30
 801a27c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a42c <_vfiprintf_r+0x21c>
 801a280:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a284:	f04f 0901 	mov.w	r9, #1
 801a288:	4623      	mov	r3, r4
 801a28a:	469a      	mov	sl, r3
 801a28c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a290:	b10a      	cbz	r2, 801a296 <_vfiprintf_r+0x86>
 801a292:	2a25      	cmp	r2, #37	@ 0x25
 801a294:	d1f9      	bne.n	801a28a <_vfiprintf_r+0x7a>
 801a296:	ebba 0b04 	subs.w	fp, sl, r4
 801a29a:	d00b      	beq.n	801a2b4 <_vfiprintf_r+0xa4>
 801a29c:	465b      	mov	r3, fp
 801a29e:	4622      	mov	r2, r4
 801a2a0:	4629      	mov	r1, r5
 801a2a2:	4630      	mov	r0, r6
 801a2a4:	f7ff ffa1 	bl	801a1ea <__sfputs_r>
 801a2a8:	3001      	adds	r0, #1
 801a2aa:	f000 80a7 	beq.w	801a3fc <_vfiprintf_r+0x1ec>
 801a2ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a2b0:	445a      	add	r2, fp
 801a2b2:	9209      	str	r2, [sp, #36]	@ 0x24
 801a2b4:	f89a 3000 	ldrb.w	r3, [sl]
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	f000 809f 	beq.w	801a3fc <_vfiprintf_r+0x1ec>
 801a2be:	2300      	movs	r3, #0
 801a2c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a2c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a2c8:	f10a 0a01 	add.w	sl, sl, #1
 801a2cc:	9304      	str	r3, [sp, #16]
 801a2ce:	9307      	str	r3, [sp, #28]
 801a2d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a2d4:	931a      	str	r3, [sp, #104]	@ 0x68
 801a2d6:	4654      	mov	r4, sl
 801a2d8:	2205      	movs	r2, #5
 801a2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2de:	4853      	ldr	r0, [pc, #332]	@ (801a42c <_vfiprintf_r+0x21c>)
 801a2e0:	f7e8 f99e 	bl	8002620 <memchr>
 801a2e4:	9a04      	ldr	r2, [sp, #16]
 801a2e6:	b9d8      	cbnz	r0, 801a320 <_vfiprintf_r+0x110>
 801a2e8:	06d1      	lsls	r1, r2, #27
 801a2ea:	bf44      	itt	mi
 801a2ec:	2320      	movmi	r3, #32
 801a2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a2f2:	0713      	lsls	r3, r2, #28
 801a2f4:	bf44      	itt	mi
 801a2f6:	232b      	movmi	r3, #43	@ 0x2b
 801a2f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a2fc:	f89a 3000 	ldrb.w	r3, [sl]
 801a300:	2b2a      	cmp	r3, #42	@ 0x2a
 801a302:	d015      	beq.n	801a330 <_vfiprintf_r+0x120>
 801a304:	9a07      	ldr	r2, [sp, #28]
 801a306:	4654      	mov	r4, sl
 801a308:	2000      	movs	r0, #0
 801a30a:	f04f 0c0a 	mov.w	ip, #10
 801a30e:	4621      	mov	r1, r4
 801a310:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a314:	3b30      	subs	r3, #48	@ 0x30
 801a316:	2b09      	cmp	r3, #9
 801a318:	d94b      	bls.n	801a3b2 <_vfiprintf_r+0x1a2>
 801a31a:	b1b0      	cbz	r0, 801a34a <_vfiprintf_r+0x13a>
 801a31c:	9207      	str	r2, [sp, #28]
 801a31e:	e014      	b.n	801a34a <_vfiprintf_r+0x13a>
 801a320:	eba0 0308 	sub.w	r3, r0, r8
 801a324:	fa09 f303 	lsl.w	r3, r9, r3
 801a328:	4313      	orrs	r3, r2
 801a32a:	9304      	str	r3, [sp, #16]
 801a32c:	46a2      	mov	sl, r4
 801a32e:	e7d2      	b.n	801a2d6 <_vfiprintf_r+0xc6>
 801a330:	9b03      	ldr	r3, [sp, #12]
 801a332:	1d19      	adds	r1, r3, #4
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	9103      	str	r1, [sp, #12]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	bfbb      	ittet	lt
 801a33c:	425b      	neglt	r3, r3
 801a33e:	f042 0202 	orrlt.w	r2, r2, #2
 801a342:	9307      	strge	r3, [sp, #28]
 801a344:	9307      	strlt	r3, [sp, #28]
 801a346:	bfb8      	it	lt
 801a348:	9204      	strlt	r2, [sp, #16]
 801a34a:	7823      	ldrb	r3, [r4, #0]
 801a34c:	2b2e      	cmp	r3, #46	@ 0x2e
 801a34e:	d10a      	bne.n	801a366 <_vfiprintf_r+0x156>
 801a350:	7863      	ldrb	r3, [r4, #1]
 801a352:	2b2a      	cmp	r3, #42	@ 0x2a
 801a354:	d132      	bne.n	801a3bc <_vfiprintf_r+0x1ac>
 801a356:	9b03      	ldr	r3, [sp, #12]
 801a358:	1d1a      	adds	r2, r3, #4
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	9203      	str	r2, [sp, #12]
 801a35e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a362:	3402      	adds	r4, #2
 801a364:	9305      	str	r3, [sp, #20]
 801a366:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a43c <_vfiprintf_r+0x22c>
 801a36a:	7821      	ldrb	r1, [r4, #0]
 801a36c:	2203      	movs	r2, #3
 801a36e:	4650      	mov	r0, sl
 801a370:	f7e8 f956 	bl	8002620 <memchr>
 801a374:	b138      	cbz	r0, 801a386 <_vfiprintf_r+0x176>
 801a376:	9b04      	ldr	r3, [sp, #16]
 801a378:	eba0 000a 	sub.w	r0, r0, sl
 801a37c:	2240      	movs	r2, #64	@ 0x40
 801a37e:	4082      	lsls	r2, r0
 801a380:	4313      	orrs	r3, r2
 801a382:	3401      	adds	r4, #1
 801a384:	9304      	str	r3, [sp, #16]
 801a386:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a38a:	4829      	ldr	r0, [pc, #164]	@ (801a430 <_vfiprintf_r+0x220>)
 801a38c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a390:	2206      	movs	r2, #6
 801a392:	f7e8 f945 	bl	8002620 <memchr>
 801a396:	2800      	cmp	r0, #0
 801a398:	d03f      	beq.n	801a41a <_vfiprintf_r+0x20a>
 801a39a:	4b26      	ldr	r3, [pc, #152]	@ (801a434 <_vfiprintf_r+0x224>)
 801a39c:	bb1b      	cbnz	r3, 801a3e6 <_vfiprintf_r+0x1d6>
 801a39e:	9b03      	ldr	r3, [sp, #12]
 801a3a0:	3307      	adds	r3, #7
 801a3a2:	f023 0307 	bic.w	r3, r3, #7
 801a3a6:	3308      	adds	r3, #8
 801a3a8:	9303      	str	r3, [sp, #12]
 801a3aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a3ac:	443b      	add	r3, r7
 801a3ae:	9309      	str	r3, [sp, #36]	@ 0x24
 801a3b0:	e76a      	b.n	801a288 <_vfiprintf_r+0x78>
 801a3b2:	fb0c 3202 	mla	r2, ip, r2, r3
 801a3b6:	460c      	mov	r4, r1
 801a3b8:	2001      	movs	r0, #1
 801a3ba:	e7a8      	b.n	801a30e <_vfiprintf_r+0xfe>
 801a3bc:	2300      	movs	r3, #0
 801a3be:	3401      	adds	r4, #1
 801a3c0:	9305      	str	r3, [sp, #20]
 801a3c2:	4619      	mov	r1, r3
 801a3c4:	f04f 0c0a 	mov.w	ip, #10
 801a3c8:	4620      	mov	r0, r4
 801a3ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a3ce:	3a30      	subs	r2, #48	@ 0x30
 801a3d0:	2a09      	cmp	r2, #9
 801a3d2:	d903      	bls.n	801a3dc <_vfiprintf_r+0x1cc>
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d0c6      	beq.n	801a366 <_vfiprintf_r+0x156>
 801a3d8:	9105      	str	r1, [sp, #20]
 801a3da:	e7c4      	b.n	801a366 <_vfiprintf_r+0x156>
 801a3dc:	fb0c 2101 	mla	r1, ip, r1, r2
 801a3e0:	4604      	mov	r4, r0
 801a3e2:	2301      	movs	r3, #1
 801a3e4:	e7f0      	b.n	801a3c8 <_vfiprintf_r+0x1b8>
 801a3e6:	ab03      	add	r3, sp, #12
 801a3e8:	9300      	str	r3, [sp, #0]
 801a3ea:	462a      	mov	r2, r5
 801a3ec:	4b12      	ldr	r3, [pc, #72]	@ (801a438 <_vfiprintf_r+0x228>)
 801a3ee:	a904      	add	r1, sp, #16
 801a3f0:	4630      	mov	r0, r6
 801a3f2:	f7fc fc0d 	bl	8016c10 <_printf_float>
 801a3f6:	4607      	mov	r7, r0
 801a3f8:	1c78      	adds	r0, r7, #1
 801a3fa:	d1d6      	bne.n	801a3aa <_vfiprintf_r+0x19a>
 801a3fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a3fe:	07d9      	lsls	r1, r3, #31
 801a400:	d405      	bmi.n	801a40e <_vfiprintf_r+0x1fe>
 801a402:	89ab      	ldrh	r3, [r5, #12]
 801a404:	059a      	lsls	r2, r3, #22
 801a406:	d402      	bmi.n	801a40e <_vfiprintf_r+0x1fe>
 801a408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a40a:	f7fe fb6f 	bl	8018aec <__retarget_lock_release_recursive>
 801a40e:	89ab      	ldrh	r3, [r5, #12]
 801a410:	065b      	lsls	r3, r3, #25
 801a412:	f53f af1f 	bmi.w	801a254 <_vfiprintf_r+0x44>
 801a416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a418:	e71e      	b.n	801a258 <_vfiprintf_r+0x48>
 801a41a:	ab03      	add	r3, sp, #12
 801a41c:	9300      	str	r3, [sp, #0]
 801a41e:	462a      	mov	r2, r5
 801a420:	4b05      	ldr	r3, [pc, #20]	@ (801a438 <_vfiprintf_r+0x228>)
 801a422:	a904      	add	r1, sp, #16
 801a424:	4630      	mov	r0, r6
 801a426:	f7fc ff35 	bl	8017294 <_printf_i>
 801a42a:	e7e4      	b.n	801a3f6 <_vfiprintf_r+0x1e6>
 801a42c:	0801c5d4 	.word	0x0801c5d4
 801a430:	0801c5de 	.word	0x0801c5de
 801a434:	08016c11 	.word	0x08016c11
 801a438:	0801a1eb 	.word	0x0801a1eb
 801a43c:	0801c5da 	.word	0x0801c5da

0801a440 <__ascii_mbtowc>:
 801a440:	b082      	sub	sp, #8
 801a442:	b901      	cbnz	r1, 801a446 <__ascii_mbtowc+0x6>
 801a444:	a901      	add	r1, sp, #4
 801a446:	b142      	cbz	r2, 801a45a <__ascii_mbtowc+0x1a>
 801a448:	b14b      	cbz	r3, 801a45e <__ascii_mbtowc+0x1e>
 801a44a:	7813      	ldrb	r3, [r2, #0]
 801a44c:	600b      	str	r3, [r1, #0]
 801a44e:	7812      	ldrb	r2, [r2, #0]
 801a450:	1e10      	subs	r0, r2, #0
 801a452:	bf18      	it	ne
 801a454:	2001      	movne	r0, #1
 801a456:	b002      	add	sp, #8
 801a458:	4770      	bx	lr
 801a45a:	4610      	mov	r0, r2
 801a45c:	e7fb      	b.n	801a456 <__ascii_mbtowc+0x16>
 801a45e:	f06f 0001 	mvn.w	r0, #1
 801a462:	e7f8      	b.n	801a456 <__ascii_mbtowc+0x16>

0801a464 <__sflush_r>:
 801a464:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a46c:	0716      	lsls	r6, r2, #28
 801a46e:	4605      	mov	r5, r0
 801a470:	460c      	mov	r4, r1
 801a472:	d454      	bmi.n	801a51e <__sflush_r+0xba>
 801a474:	684b      	ldr	r3, [r1, #4]
 801a476:	2b00      	cmp	r3, #0
 801a478:	dc02      	bgt.n	801a480 <__sflush_r+0x1c>
 801a47a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	dd48      	ble.n	801a512 <__sflush_r+0xae>
 801a480:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a482:	2e00      	cmp	r6, #0
 801a484:	d045      	beq.n	801a512 <__sflush_r+0xae>
 801a486:	2300      	movs	r3, #0
 801a488:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a48c:	682f      	ldr	r7, [r5, #0]
 801a48e:	6a21      	ldr	r1, [r4, #32]
 801a490:	602b      	str	r3, [r5, #0]
 801a492:	d030      	beq.n	801a4f6 <__sflush_r+0x92>
 801a494:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a496:	89a3      	ldrh	r3, [r4, #12]
 801a498:	0759      	lsls	r1, r3, #29
 801a49a:	d505      	bpl.n	801a4a8 <__sflush_r+0x44>
 801a49c:	6863      	ldr	r3, [r4, #4]
 801a49e:	1ad2      	subs	r2, r2, r3
 801a4a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a4a2:	b10b      	cbz	r3, 801a4a8 <__sflush_r+0x44>
 801a4a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a4a6:	1ad2      	subs	r2, r2, r3
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a4ac:	6a21      	ldr	r1, [r4, #32]
 801a4ae:	4628      	mov	r0, r5
 801a4b0:	47b0      	blx	r6
 801a4b2:	1c43      	adds	r3, r0, #1
 801a4b4:	89a3      	ldrh	r3, [r4, #12]
 801a4b6:	d106      	bne.n	801a4c6 <__sflush_r+0x62>
 801a4b8:	6829      	ldr	r1, [r5, #0]
 801a4ba:	291d      	cmp	r1, #29
 801a4bc:	d82b      	bhi.n	801a516 <__sflush_r+0xb2>
 801a4be:	4a2a      	ldr	r2, [pc, #168]	@ (801a568 <__sflush_r+0x104>)
 801a4c0:	410a      	asrs	r2, r1
 801a4c2:	07d6      	lsls	r6, r2, #31
 801a4c4:	d427      	bmi.n	801a516 <__sflush_r+0xb2>
 801a4c6:	2200      	movs	r2, #0
 801a4c8:	6062      	str	r2, [r4, #4]
 801a4ca:	04d9      	lsls	r1, r3, #19
 801a4cc:	6922      	ldr	r2, [r4, #16]
 801a4ce:	6022      	str	r2, [r4, #0]
 801a4d0:	d504      	bpl.n	801a4dc <__sflush_r+0x78>
 801a4d2:	1c42      	adds	r2, r0, #1
 801a4d4:	d101      	bne.n	801a4da <__sflush_r+0x76>
 801a4d6:	682b      	ldr	r3, [r5, #0]
 801a4d8:	b903      	cbnz	r3, 801a4dc <__sflush_r+0x78>
 801a4da:	6560      	str	r0, [r4, #84]	@ 0x54
 801a4dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a4de:	602f      	str	r7, [r5, #0]
 801a4e0:	b1b9      	cbz	r1, 801a512 <__sflush_r+0xae>
 801a4e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a4e6:	4299      	cmp	r1, r3
 801a4e8:	d002      	beq.n	801a4f0 <__sflush_r+0x8c>
 801a4ea:	4628      	mov	r0, r5
 801a4ec:	f7ff f98c 	bl	8019808 <_free_r>
 801a4f0:	2300      	movs	r3, #0
 801a4f2:	6363      	str	r3, [r4, #52]	@ 0x34
 801a4f4:	e00d      	b.n	801a512 <__sflush_r+0xae>
 801a4f6:	2301      	movs	r3, #1
 801a4f8:	4628      	mov	r0, r5
 801a4fa:	47b0      	blx	r6
 801a4fc:	4602      	mov	r2, r0
 801a4fe:	1c50      	adds	r0, r2, #1
 801a500:	d1c9      	bne.n	801a496 <__sflush_r+0x32>
 801a502:	682b      	ldr	r3, [r5, #0]
 801a504:	2b00      	cmp	r3, #0
 801a506:	d0c6      	beq.n	801a496 <__sflush_r+0x32>
 801a508:	2b1d      	cmp	r3, #29
 801a50a:	d001      	beq.n	801a510 <__sflush_r+0xac>
 801a50c:	2b16      	cmp	r3, #22
 801a50e:	d11e      	bne.n	801a54e <__sflush_r+0xea>
 801a510:	602f      	str	r7, [r5, #0]
 801a512:	2000      	movs	r0, #0
 801a514:	e022      	b.n	801a55c <__sflush_r+0xf8>
 801a516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a51a:	b21b      	sxth	r3, r3
 801a51c:	e01b      	b.n	801a556 <__sflush_r+0xf2>
 801a51e:	690f      	ldr	r7, [r1, #16]
 801a520:	2f00      	cmp	r7, #0
 801a522:	d0f6      	beq.n	801a512 <__sflush_r+0xae>
 801a524:	0793      	lsls	r3, r2, #30
 801a526:	680e      	ldr	r6, [r1, #0]
 801a528:	bf08      	it	eq
 801a52a:	694b      	ldreq	r3, [r1, #20]
 801a52c:	600f      	str	r7, [r1, #0]
 801a52e:	bf18      	it	ne
 801a530:	2300      	movne	r3, #0
 801a532:	eba6 0807 	sub.w	r8, r6, r7
 801a536:	608b      	str	r3, [r1, #8]
 801a538:	f1b8 0f00 	cmp.w	r8, #0
 801a53c:	dde9      	ble.n	801a512 <__sflush_r+0xae>
 801a53e:	6a21      	ldr	r1, [r4, #32]
 801a540:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a542:	4643      	mov	r3, r8
 801a544:	463a      	mov	r2, r7
 801a546:	4628      	mov	r0, r5
 801a548:	47b0      	blx	r6
 801a54a:	2800      	cmp	r0, #0
 801a54c:	dc08      	bgt.n	801a560 <__sflush_r+0xfc>
 801a54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a556:	81a3      	strh	r3, [r4, #12]
 801a558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a560:	4407      	add	r7, r0
 801a562:	eba8 0800 	sub.w	r8, r8, r0
 801a566:	e7e7      	b.n	801a538 <__sflush_r+0xd4>
 801a568:	dfbffffe 	.word	0xdfbffffe

0801a56c <_fflush_r>:
 801a56c:	b538      	push	{r3, r4, r5, lr}
 801a56e:	690b      	ldr	r3, [r1, #16]
 801a570:	4605      	mov	r5, r0
 801a572:	460c      	mov	r4, r1
 801a574:	b913      	cbnz	r3, 801a57c <_fflush_r+0x10>
 801a576:	2500      	movs	r5, #0
 801a578:	4628      	mov	r0, r5
 801a57a:	bd38      	pop	{r3, r4, r5, pc}
 801a57c:	b118      	cbz	r0, 801a586 <_fflush_r+0x1a>
 801a57e:	6a03      	ldr	r3, [r0, #32]
 801a580:	b90b      	cbnz	r3, 801a586 <_fflush_r+0x1a>
 801a582:	f7fd fa73 	bl	8017a6c <__sinit>
 801a586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d0f3      	beq.n	801a576 <_fflush_r+0xa>
 801a58e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a590:	07d0      	lsls	r0, r2, #31
 801a592:	d404      	bmi.n	801a59e <_fflush_r+0x32>
 801a594:	0599      	lsls	r1, r3, #22
 801a596:	d402      	bmi.n	801a59e <_fflush_r+0x32>
 801a598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a59a:	f7fe faa6 	bl	8018aea <__retarget_lock_acquire_recursive>
 801a59e:	4628      	mov	r0, r5
 801a5a0:	4621      	mov	r1, r4
 801a5a2:	f7ff ff5f 	bl	801a464 <__sflush_r>
 801a5a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a5a8:	07da      	lsls	r2, r3, #31
 801a5aa:	4605      	mov	r5, r0
 801a5ac:	d4e4      	bmi.n	801a578 <_fflush_r+0xc>
 801a5ae:	89a3      	ldrh	r3, [r4, #12]
 801a5b0:	059b      	lsls	r3, r3, #22
 801a5b2:	d4e1      	bmi.n	801a578 <_fflush_r+0xc>
 801a5b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a5b6:	f7fe fa99 	bl	8018aec <__retarget_lock_release_recursive>
 801a5ba:	e7dd      	b.n	801a578 <_fflush_r+0xc>

0801a5bc <_Balloc>:
 801a5bc:	b570      	push	{r4, r5, r6, lr}
 801a5be:	69c6      	ldr	r6, [r0, #28]
 801a5c0:	4604      	mov	r4, r0
 801a5c2:	460d      	mov	r5, r1
 801a5c4:	b976      	cbnz	r6, 801a5e4 <_Balloc+0x28>
 801a5c6:	2010      	movs	r0, #16
 801a5c8:	f7fc fd4c 	bl	8017064 <malloc>
 801a5cc:	4602      	mov	r2, r0
 801a5ce:	61e0      	str	r0, [r4, #28]
 801a5d0:	b920      	cbnz	r0, 801a5dc <_Balloc+0x20>
 801a5d2:	4b18      	ldr	r3, [pc, #96]	@ (801a634 <_Balloc+0x78>)
 801a5d4:	4818      	ldr	r0, [pc, #96]	@ (801a638 <_Balloc+0x7c>)
 801a5d6:	216b      	movs	r1, #107	@ 0x6b
 801a5d8:	f7fe faac 	bl	8018b34 <__assert_func>
 801a5dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a5e0:	6006      	str	r6, [r0, #0]
 801a5e2:	60c6      	str	r6, [r0, #12]
 801a5e4:	69e6      	ldr	r6, [r4, #28]
 801a5e6:	68f3      	ldr	r3, [r6, #12]
 801a5e8:	b183      	cbz	r3, 801a60c <_Balloc+0x50>
 801a5ea:	69e3      	ldr	r3, [r4, #28]
 801a5ec:	68db      	ldr	r3, [r3, #12]
 801a5ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a5f2:	b9b8      	cbnz	r0, 801a624 <_Balloc+0x68>
 801a5f4:	2101      	movs	r1, #1
 801a5f6:	fa01 f605 	lsl.w	r6, r1, r5
 801a5fa:	1d72      	adds	r2, r6, #5
 801a5fc:	0092      	lsls	r2, r2, #2
 801a5fe:	4620      	mov	r0, r4
 801a600:	f000 fe9f 	bl	801b342 <_calloc_r>
 801a604:	b160      	cbz	r0, 801a620 <_Balloc+0x64>
 801a606:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a60a:	e00e      	b.n	801a62a <_Balloc+0x6e>
 801a60c:	2221      	movs	r2, #33	@ 0x21
 801a60e:	2104      	movs	r1, #4
 801a610:	4620      	mov	r0, r4
 801a612:	f000 fe96 	bl	801b342 <_calloc_r>
 801a616:	69e3      	ldr	r3, [r4, #28]
 801a618:	60f0      	str	r0, [r6, #12]
 801a61a:	68db      	ldr	r3, [r3, #12]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d1e4      	bne.n	801a5ea <_Balloc+0x2e>
 801a620:	2000      	movs	r0, #0
 801a622:	bd70      	pop	{r4, r5, r6, pc}
 801a624:	6802      	ldr	r2, [r0, #0]
 801a626:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a62a:	2300      	movs	r3, #0
 801a62c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a630:	e7f7      	b.n	801a622 <_Balloc+0x66>
 801a632:	bf00      	nop
 801a634:	0801c348 	.word	0x0801c348
 801a638:	0801c5e5 	.word	0x0801c5e5

0801a63c <_Bfree>:
 801a63c:	b570      	push	{r4, r5, r6, lr}
 801a63e:	69c6      	ldr	r6, [r0, #28]
 801a640:	4605      	mov	r5, r0
 801a642:	460c      	mov	r4, r1
 801a644:	b976      	cbnz	r6, 801a664 <_Bfree+0x28>
 801a646:	2010      	movs	r0, #16
 801a648:	f7fc fd0c 	bl	8017064 <malloc>
 801a64c:	4602      	mov	r2, r0
 801a64e:	61e8      	str	r0, [r5, #28]
 801a650:	b920      	cbnz	r0, 801a65c <_Bfree+0x20>
 801a652:	4b09      	ldr	r3, [pc, #36]	@ (801a678 <_Bfree+0x3c>)
 801a654:	4809      	ldr	r0, [pc, #36]	@ (801a67c <_Bfree+0x40>)
 801a656:	218f      	movs	r1, #143	@ 0x8f
 801a658:	f7fe fa6c 	bl	8018b34 <__assert_func>
 801a65c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a660:	6006      	str	r6, [r0, #0]
 801a662:	60c6      	str	r6, [r0, #12]
 801a664:	b13c      	cbz	r4, 801a676 <_Bfree+0x3a>
 801a666:	69eb      	ldr	r3, [r5, #28]
 801a668:	6862      	ldr	r2, [r4, #4]
 801a66a:	68db      	ldr	r3, [r3, #12]
 801a66c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a670:	6021      	str	r1, [r4, #0]
 801a672:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a676:	bd70      	pop	{r4, r5, r6, pc}
 801a678:	0801c348 	.word	0x0801c348
 801a67c:	0801c5e5 	.word	0x0801c5e5

0801a680 <__multadd>:
 801a680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a684:	690d      	ldr	r5, [r1, #16]
 801a686:	4607      	mov	r7, r0
 801a688:	460c      	mov	r4, r1
 801a68a:	461e      	mov	r6, r3
 801a68c:	f101 0c14 	add.w	ip, r1, #20
 801a690:	2000      	movs	r0, #0
 801a692:	f8dc 3000 	ldr.w	r3, [ip]
 801a696:	b299      	uxth	r1, r3
 801a698:	fb02 6101 	mla	r1, r2, r1, r6
 801a69c:	0c1e      	lsrs	r6, r3, #16
 801a69e:	0c0b      	lsrs	r3, r1, #16
 801a6a0:	fb02 3306 	mla	r3, r2, r6, r3
 801a6a4:	b289      	uxth	r1, r1
 801a6a6:	3001      	adds	r0, #1
 801a6a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a6ac:	4285      	cmp	r5, r0
 801a6ae:	f84c 1b04 	str.w	r1, [ip], #4
 801a6b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a6b6:	dcec      	bgt.n	801a692 <__multadd+0x12>
 801a6b8:	b30e      	cbz	r6, 801a6fe <__multadd+0x7e>
 801a6ba:	68a3      	ldr	r3, [r4, #8]
 801a6bc:	42ab      	cmp	r3, r5
 801a6be:	dc19      	bgt.n	801a6f4 <__multadd+0x74>
 801a6c0:	6861      	ldr	r1, [r4, #4]
 801a6c2:	4638      	mov	r0, r7
 801a6c4:	3101      	adds	r1, #1
 801a6c6:	f7ff ff79 	bl	801a5bc <_Balloc>
 801a6ca:	4680      	mov	r8, r0
 801a6cc:	b928      	cbnz	r0, 801a6da <__multadd+0x5a>
 801a6ce:	4602      	mov	r2, r0
 801a6d0:	4b0c      	ldr	r3, [pc, #48]	@ (801a704 <__multadd+0x84>)
 801a6d2:	480d      	ldr	r0, [pc, #52]	@ (801a708 <__multadd+0x88>)
 801a6d4:	21ba      	movs	r1, #186	@ 0xba
 801a6d6:	f7fe fa2d 	bl	8018b34 <__assert_func>
 801a6da:	6922      	ldr	r2, [r4, #16]
 801a6dc:	3202      	adds	r2, #2
 801a6de:	f104 010c 	add.w	r1, r4, #12
 801a6e2:	0092      	lsls	r2, r2, #2
 801a6e4:	300c      	adds	r0, #12
 801a6e6:	f7fe fa05 	bl	8018af4 <memcpy>
 801a6ea:	4621      	mov	r1, r4
 801a6ec:	4638      	mov	r0, r7
 801a6ee:	f7ff ffa5 	bl	801a63c <_Bfree>
 801a6f2:	4644      	mov	r4, r8
 801a6f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a6f8:	3501      	adds	r5, #1
 801a6fa:	615e      	str	r6, [r3, #20]
 801a6fc:	6125      	str	r5, [r4, #16]
 801a6fe:	4620      	mov	r0, r4
 801a700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a704:	0801c563 	.word	0x0801c563
 801a708:	0801c5e5 	.word	0x0801c5e5

0801a70c <__s2b>:
 801a70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a710:	460c      	mov	r4, r1
 801a712:	4615      	mov	r5, r2
 801a714:	461f      	mov	r7, r3
 801a716:	2209      	movs	r2, #9
 801a718:	3308      	adds	r3, #8
 801a71a:	4606      	mov	r6, r0
 801a71c:	fb93 f3f2 	sdiv	r3, r3, r2
 801a720:	2100      	movs	r1, #0
 801a722:	2201      	movs	r2, #1
 801a724:	429a      	cmp	r2, r3
 801a726:	db09      	blt.n	801a73c <__s2b+0x30>
 801a728:	4630      	mov	r0, r6
 801a72a:	f7ff ff47 	bl	801a5bc <_Balloc>
 801a72e:	b940      	cbnz	r0, 801a742 <__s2b+0x36>
 801a730:	4602      	mov	r2, r0
 801a732:	4b19      	ldr	r3, [pc, #100]	@ (801a798 <__s2b+0x8c>)
 801a734:	4819      	ldr	r0, [pc, #100]	@ (801a79c <__s2b+0x90>)
 801a736:	21d3      	movs	r1, #211	@ 0xd3
 801a738:	f7fe f9fc 	bl	8018b34 <__assert_func>
 801a73c:	0052      	lsls	r2, r2, #1
 801a73e:	3101      	adds	r1, #1
 801a740:	e7f0      	b.n	801a724 <__s2b+0x18>
 801a742:	9b08      	ldr	r3, [sp, #32]
 801a744:	6143      	str	r3, [r0, #20]
 801a746:	2d09      	cmp	r5, #9
 801a748:	f04f 0301 	mov.w	r3, #1
 801a74c:	6103      	str	r3, [r0, #16]
 801a74e:	dd16      	ble.n	801a77e <__s2b+0x72>
 801a750:	f104 0909 	add.w	r9, r4, #9
 801a754:	46c8      	mov	r8, r9
 801a756:	442c      	add	r4, r5
 801a758:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a75c:	4601      	mov	r1, r0
 801a75e:	3b30      	subs	r3, #48	@ 0x30
 801a760:	220a      	movs	r2, #10
 801a762:	4630      	mov	r0, r6
 801a764:	f7ff ff8c 	bl	801a680 <__multadd>
 801a768:	45a0      	cmp	r8, r4
 801a76a:	d1f5      	bne.n	801a758 <__s2b+0x4c>
 801a76c:	f1a5 0408 	sub.w	r4, r5, #8
 801a770:	444c      	add	r4, r9
 801a772:	1b2d      	subs	r5, r5, r4
 801a774:	1963      	adds	r3, r4, r5
 801a776:	42bb      	cmp	r3, r7
 801a778:	db04      	blt.n	801a784 <__s2b+0x78>
 801a77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a77e:	340a      	adds	r4, #10
 801a780:	2509      	movs	r5, #9
 801a782:	e7f6      	b.n	801a772 <__s2b+0x66>
 801a784:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a788:	4601      	mov	r1, r0
 801a78a:	3b30      	subs	r3, #48	@ 0x30
 801a78c:	220a      	movs	r2, #10
 801a78e:	4630      	mov	r0, r6
 801a790:	f7ff ff76 	bl	801a680 <__multadd>
 801a794:	e7ee      	b.n	801a774 <__s2b+0x68>
 801a796:	bf00      	nop
 801a798:	0801c563 	.word	0x0801c563
 801a79c:	0801c5e5 	.word	0x0801c5e5

0801a7a0 <__hi0bits>:
 801a7a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a7a4:	4603      	mov	r3, r0
 801a7a6:	bf36      	itet	cc
 801a7a8:	0403      	lslcc	r3, r0, #16
 801a7aa:	2000      	movcs	r0, #0
 801a7ac:	2010      	movcc	r0, #16
 801a7ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a7b2:	bf3c      	itt	cc
 801a7b4:	021b      	lslcc	r3, r3, #8
 801a7b6:	3008      	addcc	r0, #8
 801a7b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a7bc:	bf3c      	itt	cc
 801a7be:	011b      	lslcc	r3, r3, #4
 801a7c0:	3004      	addcc	r0, #4
 801a7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a7c6:	bf3c      	itt	cc
 801a7c8:	009b      	lslcc	r3, r3, #2
 801a7ca:	3002      	addcc	r0, #2
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	db05      	blt.n	801a7dc <__hi0bits+0x3c>
 801a7d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a7d4:	f100 0001 	add.w	r0, r0, #1
 801a7d8:	bf08      	it	eq
 801a7da:	2020      	moveq	r0, #32
 801a7dc:	4770      	bx	lr

0801a7de <__lo0bits>:
 801a7de:	6803      	ldr	r3, [r0, #0]
 801a7e0:	4602      	mov	r2, r0
 801a7e2:	f013 0007 	ands.w	r0, r3, #7
 801a7e6:	d00b      	beq.n	801a800 <__lo0bits+0x22>
 801a7e8:	07d9      	lsls	r1, r3, #31
 801a7ea:	d421      	bmi.n	801a830 <__lo0bits+0x52>
 801a7ec:	0798      	lsls	r0, r3, #30
 801a7ee:	bf49      	itett	mi
 801a7f0:	085b      	lsrmi	r3, r3, #1
 801a7f2:	089b      	lsrpl	r3, r3, #2
 801a7f4:	2001      	movmi	r0, #1
 801a7f6:	6013      	strmi	r3, [r2, #0]
 801a7f8:	bf5c      	itt	pl
 801a7fa:	6013      	strpl	r3, [r2, #0]
 801a7fc:	2002      	movpl	r0, #2
 801a7fe:	4770      	bx	lr
 801a800:	b299      	uxth	r1, r3
 801a802:	b909      	cbnz	r1, 801a808 <__lo0bits+0x2a>
 801a804:	0c1b      	lsrs	r3, r3, #16
 801a806:	2010      	movs	r0, #16
 801a808:	b2d9      	uxtb	r1, r3
 801a80a:	b909      	cbnz	r1, 801a810 <__lo0bits+0x32>
 801a80c:	3008      	adds	r0, #8
 801a80e:	0a1b      	lsrs	r3, r3, #8
 801a810:	0719      	lsls	r1, r3, #28
 801a812:	bf04      	itt	eq
 801a814:	091b      	lsreq	r3, r3, #4
 801a816:	3004      	addeq	r0, #4
 801a818:	0799      	lsls	r1, r3, #30
 801a81a:	bf04      	itt	eq
 801a81c:	089b      	lsreq	r3, r3, #2
 801a81e:	3002      	addeq	r0, #2
 801a820:	07d9      	lsls	r1, r3, #31
 801a822:	d403      	bmi.n	801a82c <__lo0bits+0x4e>
 801a824:	085b      	lsrs	r3, r3, #1
 801a826:	f100 0001 	add.w	r0, r0, #1
 801a82a:	d003      	beq.n	801a834 <__lo0bits+0x56>
 801a82c:	6013      	str	r3, [r2, #0]
 801a82e:	4770      	bx	lr
 801a830:	2000      	movs	r0, #0
 801a832:	4770      	bx	lr
 801a834:	2020      	movs	r0, #32
 801a836:	4770      	bx	lr

0801a838 <__i2b>:
 801a838:	b510      	push	{r4, lr}
 801a83a:	460c      	mov	r4, r1
 801a83c:	2101      	movs	r1, #1
 801a83e:	f7ff febd 	bl	801a5bc <_Balloc>
 801a842:	4602      	mov	r2, r0
 801a844:	b928      	cbnz	r0, 801a852 <__i2b+0x1a>
 801a846:	4b05      	ldr	r3, [pc, #20]	@ (801a85c <__i2b+0x24>)
 801a848:	4805      	ldr	r0, [pc, #20]	@ (801a860 <__i2b+0x28>)
 801a84a:	f240 1145 	movw	r1, #325	@ 0x145
 801a84e:	f7fe f971 	bl	8018b34 <__assert_func>
 801a852:	2301      	movs	r3, #1
 801a854:	6144      	str	r4, [r0, #20]
 801a856:	6103      	str	r3, [r0, #16]
 801a858:	bd10      	pop	{r4, pc}
 801a85a:	bf00      	nop
 801a85c:	0801c563 	.word	0x0801c563
 801a860:	0801c5e5 	.word	0x0801c5e5

0801a864 <__multiply>:
 801a864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a868:	4614      	mov	r4, r2
 801a86a:	690a      	ldr	r2, [r1, #16]
 801a86c:	6923      	ldr	r3, [r4, #16]
 801a86e:	429a      	cmp	r2, r3
 801a870:	bfa8      	it	ge
 801a872:	4623      	movge	r3, r4
 801a874:	460f      	mov	r7, r1
 801a876:	bfa4      	itt	ge
 801a878:	460c      	movge	r4, r1
 801a87a:	461f      	movge	r7, r3
 801a87c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801a880:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801a884:	68a3      	ldr	r3, [r4, #8]
 801a886:	6861      	ldr	r1, [r4, #4]
 801a888:	eb0a 0609 	add.w	r6, sl, r9
 801a88c:	42b3      	cmp	r3, r6
 801a88e:	b085      	sub	sp, #20
 801a890:	bfb8      	it	lt
 801a892:	3101      	addlt	r1, #1
 801a894:	f7ff fe92 	bl	801a5bc <_Balloc>
 801a898:	b930      	cbnz	r0, 801a8a8 <__multiply+0x44>
 801a89a:	4602      	mov	r2, r0
 801a89c:	4b44      	ldr	r3, [pc, #272]	@ (801a9b0 <__multiply+0x14c>)
 801a89e:	4845      	ldr	r0, [pc, #276]	@ (801a9b4 <__multiply+0x150>)
 801a8a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a8a4:	f7fe f946 	bl	8018b34 <__assert_func>
 801a8a8:	f100 0514 	add.w	r5, r0, #20
 801a8ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a8b0:	462b      	mov	r3, r5
 801a8b2:	2200      	movs	r2, #0
 801a8b4:	4543      	cmp	r3, r8
 801a8b6:	d321      	bcc.n	801a8fc <__multiply+0x98>
 801a8b8:	f107 0114 	add.w	r1, r7, #20
 801a8bc:	f104 0214 	add.w	r2, r4, #20
 801a8c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801a8c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801a8c8:	9302      	str	r3, [sp, #8]
 801a8ca:	1b13      	subs	r3, r2, r4
 801a8cc:	3b15      	subs	r3, #21
 801a8ce:	f023 0303 	bic.w	r3, r3, #3
 801a8d2:	3304      	adds	r3, #4
 801a8d4:	f104 0715 	add.w	r7, r4, #21
 801a8d8:	42ba      	cmp	r2, r7
 801a8da:	bf38      	it	cc
 801a8dc:	2304      	movcc	r3, #4
 801a8de:	9301      	str	r3, [sp, #4]
 801a8e0:	9b02      	ldr	r3, [sp, #8]
 801a8e2:	9103      	str	r1, [sp, #12]
 801a8e4:	428b      	cmp	r3, r1
 801a8e6:	d80c      	bhi.n	801a902 <__multiply+0x9e>
 801a8e8:	2e00      	cmp	r6, #0
 801a8ea:	dd03      	ble.n	801a8f4 <__multiply+0x90>
 801a8ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d05b      	beq.n	801a9ac <__multiply+0x148>
 801a8f4:	6106      	str	r6, [r0, #16]
 801a8f6:	b005      	add	sp, #20
 801a8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8fc:	f843 2b04 	str.w	r2, [r3], #4
 801a900:	e7d8      	b.n	801a8b4 <__multiply+0x50>
 801a902:	f8b1 a000 	ldrh.w	sl, [r1]
 801a906:	f1ba 0f00 	cmp.w	sl, #0
 801a90a:	d024      	beq.n	801a956 <__multiply+0xf2>
 801a90c:	f104 0e14 	add.w	lr, r4, #20
 801a910:	46a9      	mov	r9, r5
 801a912:	f04f 0c00 	mov.w	ip, #0
 801a916:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a91a:	f8d9 3000 	ldr.w	r3, [r9]
 801a91e:	fa1f fb87 	uxth.w	fp, r7
 801a922:	b29b      	uxth	r3, r3
 801a924:	fb0a 330b 	mla	r3, sl, fp, r3
 801a928:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801a92c:	f8d9 7000 	ldr.w	r7, [r9]
 801a930:	4463      	add	r3, ip
 801a932:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a936:	fb0a c70b 	mla	r7, sl, fp, ip
 801a93a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801a93e:	b29b      	uxth	r3, r3
 801a940:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a944:	4572      	cmp	r2, lr
 801a946:	f849 3b04 	str.w	r3, [r9], #4
 801a94a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a94e:	d8e2      	bhi.n	801a916 <__multiply+0xb2>
 801a950:	9b01      	ldr	r3, [sp, #4]
 801a952:	f845 c003 	str.w	ip, [r5, r3]
 801a956:	9b03      	ldr	r3, [sp, #12]
 801a958:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801a95c:	3104      	adds	r1, #4
 801a95e:	f1b9 0f00 	cmp.w	r9, #0
 801a962:	d021      	beq.n	801a9a8 <__multiply+0x144>
 801a964:	682b      	ldr	r3, [r5, #0]
 801a966:	f104 0c14 	add.w	ip, r4, #20
 801a96a:	46ae      	mov	lr, r5
 801a96c:	f04f 0a00 	mov.w	sl, #0
 801a970:	f8bc b000 	ldrh.w	fp, [ip]
 801a974:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801a978:	fb09 770b 	mla	r7, r9, fp, r7
 801a97c:	4457      	add	r7, sl
 801a97e:	b29b      	uxth	r3, r3
 801a980:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a984:	f84e 3b04 	str.w	r3, [lr], #4
 801a988:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a98c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a990:	f8be 3000 	ldrh.w	r3, [lr]
 801a994:	fb09 330a 	mla	r3, r9, sl, r3
 801a998:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801a99c:	4562      	cmp	r2, ip
 801a99e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a9a2:	d8e5      	bhi.n	801a970 <__multiply+0x10c>
 801a9a4:	9f01      	ldr	r7, [sp, #4]
 801a9a6:	51eb      	str	r3, [r5, r7]
 801a9a8:	3504      	adds	r5, #4
 801a9aa:	e799      	b.n	801a8e0 <__multiply+0x7c>
 801a9ac:	3e01      	subs	r6, #1
 801a9ae:	e79b      	b.n	801a8e8 <__multiply+0x84>
 801a9b0:	0801c563 	.word	0x0801c563
 801a9b4:	0801c5e5 	.word	0x0801c5e5

0801a9b8 <__pow5mult>:
 801a9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a9bc:	4615      	mov	r5, r2
 801a9be:	f012 0203 	ands.w	r2, r2, #3
 801a9c2:	4607      	mov	r7, r0
 801a9c4:	460e      	mov	r6, r1
 801a9c6:	d007      	beq.n	801a9d8 <__pow5mult+0x20>
 801a9c8:	4c25      	ldr	r4, [pc, #148]	@ (801aa60 <__pow5mult+0xa8>)
 801a9ca:	3a01      	subs	r2, #1
 801a9cc:	2300      	movs	r3, #0
 801a9ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a9d2:	f7ff fe55 	bl	801a680 <__multadd>
 801a9d6:	4606      	mov	r6, r0
 801a9d8:	10ad      	asrs	r5, r5, #2
 801a9da:	d03d      	beq.n	801aa58 <__pow5mult+0xa0>
 801a9dc:	69fc      	ldr	r4, [r7, #28]
 801a9de:	b97c      	cbnz	r4, 801aa00 <__pow5mult+0x48>
 801a9e0:	2010      	movs	r0, #16
 801a9e2:	f7fc fb3f 	bl	8017064 <malloc>
 801a9e6:	4602      	mov	r2, r0
 801a9e8:	61f8      	str	r0, [r7, #28]
 801a9ea:	b928      	cbnz	r0, 801a9f8 <__pow5mult+0x40>
 801a9ec:	4b1d      	ldr	r3, [pc, #116]	@ (801aa64 <__pow5mult+0xac>)
 801a9ee:	481e      	ldr	r0, [pc, #120]	@ (801aa68 <__pow5mult+0xb0>)
 801a9f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801a9f4:	f7fe f89e 	bl	8018b34 <__assert_func>
 801a9f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a9fc:	6004      	str	r4, [r0, #0]
 801a9fe:	60c4      	str	r4, [r0, #12]
 801aa00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801aa04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801aa08:	b94c      	cbnz	r4, 801aa1e <__pow5mult+0x66>
 801aa0a:	f240 2171 	movw	r1, #625	@ 0x271
 801aa0e:	4638      	mov	r0, r7
 801aa10:	f7ff ff12 	bl	801a838 <__i2b>
 801aa14:	2300      	movs	r3, #0
 801aa16:	f8c8 0008 	str.w	r0, [r8, #8]
 801aa1a:	4604      	mov	r4, r0
 801aa1c:	6003      	str	r3, [r0, #0]
 801aa1e:	f04f 0900 	mov.w	r9, #0
 801aa22:	07eb      	lsls	r3, r5, #31
 801aa24:	d50a      	bpl.n	801aa3c <__pow5mult+0x84>
 801aa26:	4631      	mov	r1, r6
 801aa28:	4622      	mov	r2, r4
 801aa2a:	4638      	mov	r0, r7
 801aa2c:	f7ff ff1a 	bl	801a864 <__multiply>
 801aa30:	4631      	mov	r1, r6
 801aa32:	4680      	mov	r8, r0
 801aa34:	4638      	mov	r0, r7
 801aa36:	f7ff fe01 	bl	801a63c <_Bfree>
 801aa3a:	4646      	mov	r6, r8
 801aa3c:	106d      	asrs	r5, r5, #1
 801aa3e:	d00b      	beq.n	801aa58 <__pow5mult+0xa0>
 801aa40:	6820      	ldr	r0, [r4, #0]
 801aa42:	b938      	cbnz	r0, 801aa54 <__pow5mult+0x9c>
 801aa44:	4622      	mov	r2, r4
 801aa46:	4621      	mov	r1, r4
 801aa48:	4638      	mov	r0, r7
 801aa4a:	f7ff ff0b 	bl	801a864 <__multiply>
 801aa4e:	6020      	str	r0, [r4, #0]
 801aa50:	f8c0 9000 	str.w	r9, [r0]
 801aa54:	4604      	mov	r4, r0
 801aa56:	e7e4      	b.n	801aa22 <__pow5mult+0x6a>
 801aa58:	4630      	mov	r0, r6
 801aa5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa5e:	bf00      	nop
 801aa60:	0801c640 	.word	0x0801c640
 801aa64:	0801c348 	.word	0x0801c348
 801aa68:	0801c5e5 	.word	0x0801c5e5

0801aa6c <__lshift>:
 801aa6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa70:	460c      	mov	r4, r1
 801aa72:	6849      	ldr	r1, [r1, #4]
 801aa74:	6923      	ldr	r3, [r4, #16]
 801aa76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801aa7a:	68a3      	ldr	r3, [r4, #8]
 801aa7c:	4607      	mov	r7, r0
 801aa7e:	4691      	mov	r9, r2
 801aa80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801aa84:	f108 0601 	add.w	r6, r8, #1
 801aa88:	42b3      	cmp	r3, r6
 801aa8a:	db0b      	blt.n	801aaa4 <__lshift+0x38>
 801aa8c:	4638      	mov	r0, r7
 801aa8e:	f7ff fd95 	bl	801a5bc <_Balloc>
 801aa92:	4605      	mov	r5, r0
 801aa94:	b948      	cbnz	r0, 801aaaa <__lshift+0x3e>
 801aa96:	4602      	mov	r2, r0
 801aa98:	4b28      	ldr	r3, [pc, #160]	@ (801ab3c <__lshift+0xd0>)
 801aa9a:	4829      	ldr	r0, [pc, #164]	@ (801ab40 <__lshift+0xd4>)
 801aa9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801aaa0:	f7fe f848 	bl	8018b34 <__assert_func>
 801aaa4:	3101      	adds	r1, #1
 801aaa6:	005b      	lsls	r3, r3, #1
 801aaa8:	e7ee      	b.n	801aa88 <__lshift+0x1c>
 801aaaa:	2300      	movs	r3, #0
 801aaac:	f100 0114 	add.w	r1, r0, #20
 801aab0:	f100 0210 	add.w	r2, r0, #16
 801aab4:	4618      	mov	r0, r3
 801aab6:	4553      	cmp	r3, sl
 801aab8:	db33      	blt.n	801ab22 <__lshift+0xb6>
 801aaba:	6920      	ldr	r0, [r4, #16]
 801aabc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801aac0:	f104 0314 	add.w	r3, r4, #20
 801aac4:	f019 091f 	ands.w	r9, r9, #31
 801aac8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801aacc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801aad0:	d02b      	beq.n	801ab2a <__lshift+0xbe>
 801aad2:	f1c9 0e20 	rsb	lr, r9, #32
 801aad6:	468a      	mov	sl, r1
 801aad8:	2200      	movs	r2, #0
 801aada:	6818      	ldr	r0, [r3, #0]
 801aadc:	fa00 f009 	lsl.w	r0, r0, r9
 801aae0:	4310      	orrs	r0, r2
 801aae2:	f84a 0b04 	str.w	r0, [sl], #4
 801aae6:	f853 2b04 	ldr.w	r2, [r3], #4
 801aaea:	459c      	cmp	ip, r3
 801aaec:	fa22 f20e 	lsr.w	r2, r2, lr
 801aaf0:	d8f3      	bhi.n	801aada <__lshift+0x6e>
 801aaf2:	ebac 0304 	sub.w	r3, ip, r4
 801aaf6:	3b15      	subs	r3, #21
 801aaf8:	f023 0303 	bic.w	r3, r3, #3
 801aafc:	3304      	adds	r3, #4
 801aafe:	f104 0015 	add.w	r0, r4, #21
 801ab02:	4584      	cmp	ip, r0
 801ab04:	bf38      	it	cc
 801ab06:	2304      	movcc	r3, #4
 801ab08:	50ca      	str	r2, [r1, r3]
 801ab0a:	b10a      	cbz	r2, 801ab10 <__lshift+0xa4>
 801ab0c:	f108 0602 	add.w	r6, r8, #2
 801ab10:	3e01      	subs	r6, #1
 801ab12:	4638      	mov	r0, r7
 801ab14:	612e      	str	r6, [r5, #16]
 801ab16:	4621      	mov	r1, r4
 801ab18:	f7ff fd90 	bl	801a63c <_Bfree>
 801ab1c:	4628      	mov	r0, r5
 801ab1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab22:	f842 0f04 	str.w	r0, [r2, #4]!
 801ab26:	3301      	adds	r3, #1
 801ab28:	e7c5      	b.n	801aab6 <__lshift+0x4a>
 801ab2a:	3904      	subs	r1, #4
 801ab2c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab30:	f841 2f04 	str.w	r2, [r1, #4]!
 801ab34:	459c      	cmp	ip, r3
 801ab36:	d8f9      	bhi.n	801ab2c <__lshift+0xc0>
 801ab38:	e7ea      	b.n	801ab10 <__lshift+0xa4>
 801ab3a:	bf00      	nop
 801ab3c:	0801c563 	.word	0x0801c563
 801ab40:	0801c5e5 	.word	0x0801c5e5

0801ab44 <__mcmp>:
 801ab44:	690a      	ldr	r2, [r1, #16]
 801ab46:	4603      	mov	r3, r0
 801ab48:	6900      	ldr	r0, [r0, #16]
 801ab4a:	1a80      	subs	r0, r0, r2
 801ab4c:	b530      	push	{r4, r5, lr}
 801ab4e:	d10e      	bne.n	801ab6e <__mcmp+0x2a>
 801ab50:	3314      	adds	r3, #20
 801ab52:	3114      	adds	r1, #20
 801ab54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ab58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ab5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ab60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ab64:	4295      	cmp	r5, r2
 801ab66:	d003      	beq.n	801ab70 <__mcmp+0x2c>
 801ab68:	d205      	bcs.n	801ab76 <__mcmp+0x32>
 801ab6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ab6e:	bd30      	pop	{r4, r5, pc}
 801ab70:	42a3      	cmp	r3, r4
 801ab72:	d3f3      	bcc.n	801ab5c <__mcmp+0x18>
 801ab74:	e7fb      	b.n	801ab6e <__mcmp+0x2a>
 801ab76:	2001      	movs	r0, #1
 801ab78:	e7f9      	b.n	801ab6e <__mcmp+0x2a>
	...

0801ab7c <__mdiff>:
 801ab7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab80:	4689      	mov	r9, r1
 801ab82:	4606      	mov	r6, r0
 801ab84:	4611      	mov	r1, r2
 801ab86:	4648      	mov	r0, r9
 801ab88:	4614      	mov	r4, r2
 801ab8a:	f7ff ffdb 	bl	801ab44 <__mcmp>
 801ab8e:	1e05      	subs	r5, r0, #0
 801ab90:	d112      	bne.n	801abb8 <__mdiff+0x3c>
 801ab92:	4629      	mov	r1, r5
 801ab94:	4630      	mov	r0, r6
 801ab96:	f7ff fd11 	bl	801a5bc <_Balloc>
 801ab9a:	4602      	mov	r2, r0
 801ab9c:	b928      	cbnz	r0, 801abaa <__mdiff+0x2e>
 801ab9e:	4b3f      	ldr	r3, [pc, #252]	@ (801ac9c <__mdiff+0x120>)
 801aba0:	f240 2137 	movw	r1, #567	@ 0x237
 801aba4:	483e      	ldr	r0, [pc, #248]	@ (801aca0 <__mdiff+0x124>)
 801aba6:	f7fd ffc5 	bl	8018b34 <__assert_func>
 801abaa:	2301      	movs	r3, #1
 801abac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801abb0:	4610      	mov	r0, r2
 801abb2:	b003      	add	sp, #12
 801abb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abb8:	bfbc      	itt	lt
 801abba:	464b      	movlt	r3, r9
 801abbc:	46a1      	movlt	r9, r4
 801abbe:	4630      	mov	r0, r6
 801abc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801abc4:	bfba      	itte	lt
 801abc6:	461c      	movlt	r4, r3
 801abc8:	2501      	movlt	r5, #1
 801abca:	2500      	movge	r5, #0
 801abcc:	f7ff fcf6 	bl	801a5bc <_Balloc>
 801abd0:	4602      	mov	r2, r0
 801abd2:	b918      	cbnz	r0, 801abdc <__mdiff+0x60>
 801abd4:	4b31      	ldr	r3, [pc, #196]	@ (801ac9c <__mdiff+0x120>)
 801abd6:	f240 2145 	movw	r1, #581	@ 0x245
 801abda:	e7e3      	b.n	801aba4 <__mdiff+0x28>
 801abdc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801abe0:	6926      	ldr	r6, [r4, #16]
 801abe2:	60c5      	str	r5, [r0, #12]
 801abe4:	f109 0310 	add.w	r3, r9, #16
 801abe8:	f109 0514 	add.w	r5, r9, #20
 801abec:	f104 0e14 	add.w	lr, r4, #20
 801abf0:	f100 0b14 	add.w	fp, r0, #20
 801abf4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801abf8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801abfc:	9301      	str	r3, [sp, #4]
 801abfe:	46d9      	mov	r9, fp
 801ac00:	f04f 0c00 	mov.w	ip, #0
 801ac04:	9b01      	ldr	r3, [sp, #4]
 801ac06:	f85e 0b04 	ldr.w	r0, [lr], #4
 801ac0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801ac0e:	9301      	str	r3, [sp, #4]
 801ac10:	fa1f f38a 	uxth.w	r3, sl
 801ac14:	4619      	mov	r1, r3
 801ac16:	b283      	uxth	r3, r0
 801ac18:	1acb      	subs	r3, r1, r3
 801ac1a:	0c00      	lsrs	r0, r0, #16
 801ac1c:	4463      	add	r3, ip
 801ac1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801ac22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801ac26:	b29b      	uxth	r3, r3
 801ac28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801ac2c:	4576      	cmp	r6, lr
 801ac2e:	f849 3b04 	str.w	r3, [r9], #4
 801ac32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ac36:	d8e5      	bhi.n	801ac04 <__mdiff+0x88>
 801ac38:	1b33      	subs	r3, r6, r4
 801ac3a:	3b15      	subs	r3, #21
 801ac3c:	f023 0303 	bic.w	r3, r3, #3
 801ac40:	3415      	adds	r4, #21
 801ac42:	3304      	adds	r3, #4
 801ac44:	42a6      	cmp	r6, r4
 801ac46:	bf38      	it	cc
 801ac48:	2304      	movcc	r3, #4
 801ac4a:	441d      	add	r5, r3
 801ac4c:	445b      	add	r3, fp
 801ac4e:	461e      	mov	r6, r3
 801ac50:	462c      	mov	r4, r5
 801ac52:	4544      	cmp	r4, r8
 801ac54:	d30e      	bcc.n	801ac74 <__mdiff+0xf8>
 801ac56:	f108 0103 	add.w	r1, r8, #3
 801ac5a:	1b49      	subs	r1, r1, r5
 801ac5c:	f021 0103 	bic.w	r1, r1, #3
 801ac60:	3d03      	subs	r5, #3
 801ac62:	45a8      	cmp	r8, r5
 801ac64:	bf38      	it	cc
 801ac66:	2100      	movcc	r1, #0
 801ac68:	440b      	add	r3, r1
 801ac6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ac6e:	b191      	cbz	r1, 801ac96 <__mdiff+0x11a>
 801ac70:	6117      	str	r7, [r2, #16]
 801ac72:	e79d      	b.n	801abb0 <__mdiff+0x34>
 801ac74:	f854 1b04 	ldr.w	r1, [r4], #4
 801ac78:	46e6      	mov	lr, ip
 801ac7a:	0c08      	lsrs	r0, r1, #16
 801ac7c:	fa1c fc81 	uxtah	ip, ip, r1
 801ac80:	4471      	add	r1, lr
 801ac82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801ac86:	b289      	uxth	r1, r1
 801ac88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ac8c:	f846 1b04 	str.w	r1, [r6], #4
 801ac90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ac94:	e7dd      	b.n	801ac52 <__mdiff+0xd6>
 801ac96:	3f01      	subs	r7, #1
 801ac98:	e7e7      	b.n	801ac6a <__mdiff+0xee>
 801ac9a:	bf00      	nop
 801ac9c:	0801c563 	.word	0x0801c563
 801aca0:	0801c5e5 	.word	0x0801c5e5

0801aca4 <__ulp>:
 801aca4:	b082      	sub	sp, #8
 801aca6:	ed8d 0b00 	vstr	d0, [sp]
 801acaa:	9a01      	ldr	r2, [sp, #4]
 801acac:	4b0f      	ldr	r3, [pc, #60]	@ (801acec <__ulp+0x48>)
 801acae:	4013      	ands	r3, r2
 801acb0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	dc08      	bgt.n	801acca <__ulp+0x26>
 801acb8:	425b      	negs	r3, r3
 801acba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801acbe:	ea4f 5223 	mov.w	r2, r3, asr #20
 801acc2:	da04      	bge.n	801acce <__ulp+0x2a>
 801acc4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801acc8:	4113      	asrs	r3, r2
 801acca:	2200      	movs	r2, #0
 801accc:	e008      	b.n	801ace0 <__ulp+0x3c>
 801acce:	f1a2 0314 	sub.w	r3, r2, #20
 801acd2:	2b1e      	cmp	r3, #30
 801acd4:	bfda      	itte	le
 801acd6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801acda:	40da      	lsrle	r2, r3
 801acdc:	2201      	movgt	r2, #1
 801acde:	2300      	movs	r3, #0
 801ace0:	4619      	mov	r1, r3
 801ace2:	4610      	mov	r0, r2
 801ace4:	ec41 0b10 	vmov	d0, r0, r1
 801ace8:	b002      	add	sp, #8
 801acea:	4770      	bx	lr
 801acec:	7ff00000 	.word	0x7ff00000

0801acf0 <__b2d>:
 801acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acf4:	6906      	ldr	r6, [r0, #16]
 801acf6:	f100 0814 	add.w	r8, r0, #20
 801acfa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801acfe:	1f37      	subs	r7, r6, #4
 801ad00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ad04:	4610      	mov	r0, r2
 801ad06:	f7ff fd4b 	bl	801a7a0 <__hi0bits>
 801ad0a:	f1c0 0320 	rsb	r3, r0, #32
 801ad0e:	280a      	cmp	r0, #10
 801ad10:	600b      	str	r3, [r1, #0]
 801ad12:	491b      	ldr	r1, [pc, #108]	@ (801ad80 <__b2d+0x90>)
 801ad14:	dc15      	bgt.n	801ad42 <__b2d+0x52>
 801ad16:	f1c0 0c0b 	rsb	ip, r0, #11
 801ad1a:	fa22 f30c 	lsr.w	r3, r2, ip
 801ad1e:	45b8      	cmp	r8, r7
 801ad20:	ea43 0501 	orr.w	r5, r3, r1
 801ad24:	bf34      	ite	cc
 801ad26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ad2a:	2300      	movcs	r3, #0
 801ad2c:	3015      	adds	r0, #21
 801ad2e:	fa02 f000 	lsl.w	r0, r2, r0
 801ad32:	fa23 f30c 	lsr.w	r3, r3, ip
 801ad36:	4303      	orrs	r3, r0
 801ad38:	461c      	mov	r4, r3
 801ad3a:	ec45 4b10 	vmov	d0, r4, r5
 801ad3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad42:	45b8      	cmp	r8, r7
 801ad44:	bf3a      	itte	cc
 801ad46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ad4a:	f1a6 0708 	subcc.w	r7, r6, #8
 801ad4e:	2300      	movcs	r3, #0
 801ad50:	380b      	subs	r0, #11
 801ad52:	d012      	beq.n	801ad7a <__b2d+0x8a>
 801ad54:	f1c0 0120 	rsb	r1, r0, #32
 801ad58:	fa23 f401 	lsr.w	r4, r3, r1
 801ad5c:	4082      	lsls	r2, r0
 801ad5e:	4322      	orrs	r2, r4
 801ad60:	4547      	cmp	r7, r8
 801ad62:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801ad66:	bf8c      	ite	hi
 801ad68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801ad6c:	2200      	movls	r2, #0
 801ad6e:	4083      	lsls	r3, r0
 801ad70:	40ca      	lsrs	r2, r1
 801ad72:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801ad76:	4313      	orrs	r3, r2
 801ad78:	e7de      	b.n	801ad38 <__b2d+0x48>
 801ad7a:	ea42 0501 	orr.w	r5, r2, r1
 801ad7e:	e7db      	b.n	801ad38 <__b2d+0x48>
 801ad80:	3ff00000 	.word	0x3ff00000

0801ad84 <__d2b>:
 801ad84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ad88:	460f      	mov	r7, r1
 801ad8a:	2101      	movs	r1, #1
 801ad8c:	ec59 8b10 	vmov	r8, r9, d0
 801ad90:	4616      	mov	r6, r2
 801ad92:	f7ff fc13 	bl	801a5bc <_Balloc>
 801ad96:	4604      	mov	r4, r0
 801ad98:	b930      	cbnz	r0, 801ada8 <__d2b+0x24>
 801ad9a:	4602      	mov	r2, r0
 801ad9c:	4b23      	ldr	r3, [pc, #140]	@ (801ae2c <__d2b+0xa8>)
 801ad9e:	4824      	ldr	r0, [pc, #144]	@ (801ae30 <__d2b+0xac>)
 801ada0:	f240 310f 	movw	r1, #783	@ 0x30f
 801ada4:	f7fd fec6 	bl	8018b34 <__assert_func>
 801ada8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801adac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801adb0:	b10d      	cbz	r5, 801adb6 <__d2b+0x32>
 801adb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801adb6:	9301      	str	r3, [sp, #4]
 801adb8:	f1b8 0300 	subs.w	r3, r8, #0
 801adbc:	d023      	beq.n	801ae06 <__d2b+0x82>
 801adbe:	4668      	mov	r0, sp
 801adc0:	9300      	str	r3, [sp, #0]
 801adc2:	f7ff fd0c 	bl	801a7de <__lo0bits>
 801adc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801adca:	b1d0      	cbz	r0, 801ae02 <__d2b+0x7e>
 801adcc:	f1c0 0320 	rsb	r3, r0, #32
 801add0:	fa02 f303 	lsl.w	r3, r2, r3
 801add4:	430b      	orrs	r3, r1
 801add6:	40c2      	lsrs	r2, r0
 801add8:	6163      	str	r3, [r4, #20]
 801adda:	9201      	str	r2, [sp, #4]
 801addc:	9b01      	ldr	r3, [sp, #4]
 801adde:	61a3      	str	r3, [r4, #24]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	bf0c      	ite	eq
 801ade4:	2201      	moveq	r2, #1
 801ade6:	2202      	movne	r2, #2
 801ade8:	6122      	str	r2, [r4, #16]
 801adea:	b1a5      	cbz	r5, 801ae16 <__d2b+0x92>
 801adec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801adf0:	4405      	add	r5, r0
 801adf2:	603d      	str	r5, [r7, #0]
 801adf4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801adf8:	6030      	str	r0, [r6, #0]
 801adfa:	4620      	mov	r0, r4
 801adfc:	b003      	add	sp, #12
 801adfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae02:	6161      	str	r1, [r4, #20]
 801ae04:	e7ea      	b.n	801addc <__d2b+0x58>
 801ae06:	a801      	add	r0, sp, #4
 801ae08:	f7ff fce9 	bl	801a7de <__lo0bits>
 801ae0c:	9b01      	ldr	r3, [sp, #4]
 801ae0e:	6163      	str	r3, [r4, #20]
 801ae10:	3020      	adds	r0, #32
 801ae12:	2201      	movs	r2, #1
 801ae14:	e7e8      	b.n	801ade8 <__d2b+0x64>
 801ae16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ae1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ae1e:	6038      	str	r0, [r7, #0]
 801ae20:	6918      	ldr	r0, [r3, #16]
 801ae22:	f7ff fcbd 	bl	801a7a0 <__hi0bits>
 801ae26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ae2a:	e7e5      	b.n	801adf8 <__d2b+0x74>
 801ae2c:	0801c563 	.word	0x0801c563
 801ae30:	0801c5e5 	.word	0x0801c5e5

0801ae34 <__ratio>:
 801ae34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae38:	b085      	sub	sp, #20
 801ae3a:	e9cd 1000 	strd	r1, r0, [sp]
 801ae3e:	a902      	add	r1, sp, #8
 801ae40:	f7ff ff56 	bl	801acf0 <__b2d>
 801ae44:	9800      	ldr	r0, [sp, #0]
 801ae46:	a903      	add	r1, sp, #12
 801ae48:	ec55 4b10 	vmov	r4, r5, d0
 801ae4c:	f7ff ff50 	bl	801acf0 <__b2d>
 801ae50:	9b01      	ldr	r3, [sp, #4]
 801ae52:	6919      	ldr	r1, [r3, #16]
 801ae54:	9b00      	ldr	r3, [sp, #0]
 801ae56:	691b      	ldr	r3, [r3, #16]
 801ae58:	1ac9      	subs	r1, r1, r3
 801ae5a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801ae5e:	1a9b      	subs	r3, r3, r2
 801ae60:	ec5b ab10 	vmov	sl, fp, d0
 801ae64:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	bfce      	itee	gt
 801ae6c:	462a      	movgt	r2, r5
 801ae6e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ae72:	465a      	movle	r2, fp
 801ae74:	462f      	mov	r7, r5
 801ae76:	46d9      	mov	r9, fp
 801ae78:	bfcc      	ite	gt
 801ae7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ae7e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801ae82:	464b      	mov	r3, r9
 801ae84:	4652      	mov	r2, sl
 801ae86:	4620      	mov	r0, r4
 801ae88:	4639      	mov	r1, r7
 801ae8a:	f7e7 ff11 	bl	8002cb0 <__aeabi_ddiv>
 801ae8e:	ec41 0b10 	vmov	d0, r0, r1
 801ae92:	b005      	add	sp, #20
 801ae94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae98 <__copybits>:
 801ae98:	3901      	subs	r1, #1
 801ae9a:	b570      	push	{r4, r5, r6, lr}
 801ae9c:	1149      	asrs	r1, r1, #5
 801ae9e:	6914      	ldr	r4, [r2, #16]
 801aea0:	3101      	adds	r1, #1
 801aea2:	f102 0314 	add.w	r3, r2, #20
 801aea6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801aeaa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801aeae:	1f05      	subs	r5, r0, #4
 801aeb0:	42a3      	cmp	r3, r4
 801aeb2:	d30c      	bcc.n	801aece <__copybits+0x36>
 801aeb4:	1aa3      	subs	r3, r4, r2
 801aeb6:	3b11      	subs	r3, #17
 801aeb8:	f023 0303 	bic.w	r3, r3, #3
 801aebc:	3211      	adds	r2, #17
 801aebe:	42a2      	cmp	r2, r4
 801aec0:	bf88      	it	hi
 801aec2:	2300      	movhi	r3, #0
 801aec4:	4418      	add	r0, r3
 801aec6:	2300      	movs	r3, #0
 801aec8:	4288      	cmp	r0, r1
 801aeca:	d305      	bcc.n	801aed8 <__copybits+0x40>
 801aecc:	bd70      	pop	{r4, r5, r6, pc}
 801aece:	f853 6b04 	ldr.w	r6, [r3], #4
 801aed2:	f845 6f04 	str.w	r6, [r5, #4]!
 801aed6:	e7eb      	b.n	801aeb0 <__copybits+0x18>
 801aed8:	f840 3b04 	str.w	r3, [r0], #4
 801aedc:	e7f4      	b.n	801aec8 <__copybits+0x30>

0801aede <__any_on>:
 801aede:	f100 0214 	add.w	r2, r0, #20
 801aee2:	6900      	ldr	r0, [r0, #16]
 801aee4:	114b      	asrs	r3, r1, #5
 801aee6:	4298      	cmp	r0, r3
 801aee8:	b510      	push	{r4, lr}
 801aeea:	db11      	blt.n	801af10 <__any_on+0x32>
 801aeec:	dd0a      	ble.n	801af04 <__any_on+0x26>
 801aeee:	f011 011f 	ands.w	r1, r1, #31
 801aef2:	d007      	beq.n	801af04 <__any_on+0x26>
 801aef4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801aef8:	fa24 f001 	lsr.w	r0, r4, r1
 801aefc:	fa00 f101 	lsl.w	r1, r0, r1
 801af00:	428c      	cmp	r4, r1
 801af02:	d10b      	bne.n	801af1c <__any_on+0x3e>
 801af04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801af08:	4293      	cmp	r3, r2
 801af0a:	d803      	bhi.n	801af14 <__any_on+0x36>
 801af0c:	2000      	movs	r0, #0
 801af0e:	bd10      	pop	{r4, pc}
 801af10:	4603      	mov	r3, r0
 801af12:	e7f7      	b.n	801af04 <__any_on+0x26>
 801af14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801af18:	2900      	cmp	r1, #0
 801af1a:	d0f5      	beq.n	801af08 <__any_on+0x2a>
 801af1c:	2001      	movs	r0, #1
 801af1e:	e7f6      	b.n	801af0e <__any_on+0x30>

0801af20 <__sread>:
 801af20:	b510      	push	{r4, lr}
 801af22:	460c      	mov	r4, r1
 801af24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af28:	f000 f9e0 	bl	801b2ec <_read_r>
 801af2c:	2800      	cmp	r0, #0
 801af2e:	bfab      	itete	ge
 801af30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801af32:	89a3      	ldrhlt	r3, [r4, #12]
 801af34:	181b      	addge	r3, r3, r0
 801af36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801af3a:	bfac      	ite	ge
 801af3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801af3e:	81a3      	strhlt	r3, [r4, #12]
 801af40:	bd10      	pop	{r4, pc}

0801af42 <__swrite>:
 801af42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af46:	461f      	mov	r7, r3
 801af48:	898b      	ldrh	r3, [r1, #12]
 801af4a:	05db      	lsls	r3, r3, #23
 801af4c:	4605      	mov	r5, r0
 801af4e:	460c      	mov	r4, r1
 801af50:	4616      	mov	r6, r2
 801af52:	d505      	bpl.n	801af60 <__swrite+0x1e>
 801af54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af58:	2302      	movs	r3, #2
 801af5a:	2200      	movs	r2, #0
 801af5c:	f000 f9b4 	bl	801b2c8 <_lseek_r>
 801af60:	89a3      	ldrh	r3, [r4, #12]
 801af62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801af6a:	81a3      	strh	r3, [r4, #12]
 801af6c:	4632      	mov	r2, r6
 801af6e:	463b      	mov	r3, r7
 801af70:	4628      	mov	r0, r5
 801af72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af76:	f000 b9cb 	b.w	801b310 <_write_r>

0801af7a <__sseek>:
 801af7a:	b510      	push	{r4, lr}
 801af7c:	460c      	mov	r4, r1
 801af7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af82:	f000 f9a1 	bl	801b2c8 <_lseek_r>
 801af86:	1c43      	adds	r3, r0, #1
 801af88:	89a3      	ldrh	r3, [r4, #12]
 801af8a:	bf15      	itete	ne
 801af8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801af8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801af92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801af96:	81a3      	strheq	r3, [r4, #12]
 801af98:	bf18      	it	ne
 801af9a:	81a3      	strhne	r3, [r4, #12]
 801af9c:	bd10      	pop	{r4, pc}

0801af9e <__sclose>:
 801af9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801afa2:	f000 b95f 	b.w	801b264 <_close_r>
	...

0801afa8 <fiprintf>:
 801afa8:	b40e      	push	{r1, r2, r3}
 801afaa:	b503      	push	{r0, r1, lr}
 801afac:	4601      	mov	r1, r0
 801afae:	ab03      	add	r3, sp, #12
 801afb0:	4805      	ldr	r0, [pc, #20]	@ (801afc8 <fiprintf+0x20>)
 801afb2:	f853 2b04 	ldr.w	r2, [r3], #4
 801afb6:	6800      	ldr	r0, [r0, #0]
 801afb8:	9301      	str	r3, [sp, #4]
 801afba:	f7ff f929 	bl	801a210 <_vfiprintf_r>
 801afbe:	b002      	add	sp, #8
 801afc0:	f85d eb04 	ldr.w	lr, [sp], #4
 801afc4:	b003      	add	sp, #12
 801afc6:	4770      	bx	lr
 801afc8:	20000494 	.word	0x20000494

0801afcc <_realloc_r>:
 801afcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afd0:	4680      	mov	r8, r0
 801afd2:	4615      	mov	r5, r2
 801afd4:	460c      	mov	r4, r1
 801afd6:	b921      	cbnz	r1, 801afe2 <_realloc_r+0x16>
 801afd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801afdc:	4611      	mov	r1, r2
 801afde:	f7fc b86b 	b.w	80170b8 <_malloc_r>
 801afe2:	b92a      	cbnz	r2, 801aff0 <_realloc_r+0x24>
 801afe4:	f7fe fc10 	bl	8019808 <_free_r>
 801afe8:	2400      	movs	r4, #0
 801afea:	4620      	mov	r0, r4
 801afec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aff0:	f000 f9bb 	bl	801b36a <_malloc_usable_size_r>
 801aff4:	4285      	cmp	r5, r0
 801aff6:	4606      	mov	r6, r0
 801aff8:	d802      	bhi.n	801b000 <_realloc_r+0x34>
 801affa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801affe:	d8f4      	bhi.n	801afea <_realloc_r+0x1e>
 801b000:	4629      	mov	r1, r5
 801b002:	4640      	mov	r0, r8
 801b004:	f7fc f858 	bl	80170b8 <_malloc_r>
 801b008:	4607      	mov	r7, r0
 801b00a:	2800      	cmp	r0, #0
 801b00c:	d0ec      	beq.n	801afe8 <_realloc_r+0x1c>
 801b00e:	42b5      	cmp	r5, r6
 801b010:	462a      	mov	r2, r5
 801b012:	4621      	mov	r1, r4
 801b014:	bf28      	it	cs
 801b016:	4632      	movcs	r2, r6
 801b018:	f7fd fd6c 	bl	8018af4 <memcpy>
 801b01c:	4621      	mov	r1, r4
 801b01e:	4640      	mov	r0, r8
 801b020:	f7fe fbf2 	bl	8019808 <_free_r>
 801b024:	463c      	mov	r4, r7
 801b026:	e7e0      	b.n	801afea <_realloc_r+0x1e>

0801b028 <__swbuf_r>:
 801b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b02a:	460e      	mov	r6, r1
 801b02c:	4614      	mov	r4, r2
 801b02e:	4605      	mov	r5, r0
 801b030:	b118      	cbz	r0, 801b03a <__swbuf_r+0x12>
 801b032:	6a03      	ldr	r3, [r0, #32]
 801b034:	b90b      	cbnz	r3, 801b03a <__swbuf_r+0x12>
 801b036:	f7fc fd19 	bl	8017a6c <__sinit>
 801b03a:	69a3      	ldr	r3, [r4, #24]
 801b03c:	60a3      	str	r3, [r4, #8]
 801b03e:	89a3      	ldrh	r3, [r4, #12]
 801b040:	071a      	lsls	r2, r3, #28
 801b042:	d501      	bpl.n	801b048 <__swbuf_r+0x20>
 801b044:	6923      	ldr	r3, [r4, #16]
 801b046:	b943      	cbnz	r3, 801b05a <__swbuf_r+0x32>
 801b048:	4621      	mov	r1, r4
 801b04a:	4628      	mov	r0, r5
 801b04c:	f000 f82a 	bl	801b0a4 <__swsetup_r>
 801b050:	b118      	cbz	r0, 801b05a <__swbuf_r+0x32>
 801b052:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b056:	4638      	mov	r0, r7
 801b058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b05a:	6823      	ldr	r3, [r4, #0]
 801b05c:	6922      	ldr	r2, [r4, #16]
 801b05e:	1a98      	subs	r0, r3, r2
 801b060:	6963      	ldr	r3, [r4, #20]
 801b062:	b2f6      	uxtb	r6, r6
 801b064:	4283      	cmp	r3, r0
 801b066:	4637      	mov	r7, r6
 801b068:	dc05      	bgt.n	801b076 <__swbuf_r+0x4e>
 801b06a:	4621      	mov	r1, r4
 801b06c:	4628      	mov	r0, r5
 801b06e:	f7ff fa7d 	bl	801a56c <_fflush_r>
 801b072:	2800      	cmp	r0, #0
 801b074:	d1ed      	bne.n	801b052 <__swbuf_r+0x2a>
 801b076:	68a3      	ldr	r3, [r4, #8]
 801b078:	3b01      	subs	r3, #1
 801b07a:	60a3      	str	r3, [r4, #8]
 801b07c:	6823      	ldr	r3, [r4, #0]
 801b07e:	1c5a      	adds	r2, r3, #1
 801b080:	6022      	str	r2, [r4, #0]
 801b082:	701e      	strb	r6, [r3, #0]
 801b084:	6962      	ldr	r2, [r4, #20]
 801b086:	1c43      	adds	r3, r0, #1
 801b088:	429a      	cmp	r2, r3
 801b08a:	d004      	beq.n	801b096 <__swbuf_r+0x6e>
 801b08c:	89a3      	ldrh	r3, [r4, #12]
 801b08e:	07db      	lsls	r3, r3, #31
 801b090:	d5e1      	bpl.n	801b056 <__swbuf_r+0x2e>
 801b092:	2e0a      	cmp	r6, #10
 801b094:	d1df      	bne.n	801b056 <__swbuf_r+0x2e>
 801b096:	4621      	mov	r1, r4
 801b098:	4628      	mov	r0, r5
 801b09a:	f7ff fa67 	bl	801a56c <_fflush_r>
 801b09e:	2800      	cmp	r0, #0
 801b0a0:	d0d9      	beq.n	801b056 <__swbuf_r+0x2e>
 801b0a2:	e7d6      	b.n	801b052 <__swbuf_r+0x2a>

0801b0a4 <__swsetup_r>:
 801b0a4:	b538      	push	{r3, r4, r5, lr}
 801b0a6:	4b29      	ldr	r3, [pc, #164]	@ (801b14c <__swsetup_r+0xa8>)
 801b0a8:	4605      	mov	r5, r0
 801b0aa:	6818      	ldr	r0, [r3, #0]
 801b0ac:	460c      	mov	r4, r1
 801b0ae:	b118      	cbz	r0, 801b0b8 <__swsetup_r+0x14>
 801b0b0:	6a03      	ldr	r3, [r0, #32]
 801b0b2:	b90b      	cbnz	r3, 801b0b8 <__swsetup_r+0x14>
 801b0b4:	f7fc fcda 	bl	8017a6c <__sinit>
 801b0b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0bc:	0719      	lsls	r1, r3, #28
 801b0be:	d422      	bmi.n	801b106 <__swsetup_r+0x62>
 801b0c0:	06da      	lsls	r2, r3, #27
 801b0c2:	d407      	bmi.n	801b0d4 <__swsetup_r+0x30>
 801b0c4:	2209      	movs	r2, #9
 801b0c6:	602a      	str	r2, [r5, #0]
 801b0c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b0cc:	81a3      	strh	r3, [r4, #12]
 801b0ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b0d2:	e033      	b.n	801b13c <__swsetup_r+0x98>
 801b0d4:	0758      	lsls	r0, r3, #29
 801b0d6:	d512      	bpl.n	801b0fe <__swsetup_r+0x5a>
 801b0d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b0da:	b141      	cbz	r1, 801b0ee <__swsetup_r+0x4a>
 801b0dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b0e0:	4299      	cmp	r1, r3
 801b0e2:	d002      	beq.n	801b0ea <__swsetup_r+0x46>
 801b0e4:	4628      	mov	r0, r5
 801b0e6:	f7fe fb8f 	bl	8019808 <_free_r>
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	6363      	str	r3, [r4, #52]	@ 0x34
 801b0ee:	89a3      	ldrh	r3, [r4, #12]
 801b0f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b0f4:	81a3      	strh	r3, [r4, #12]
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	6063      	str	r3, [r4, #4]
 801b0fa:	6923      	ldr	r3, [r4, #16]
 801b0fc:	6023      	str	r3, [r4, #0]
 801b0fe:	89a3      	ldrh	r3, [r4, #12]
 801b100:	f043 0308 	orr.w	r3, r3, #8
 801b104:	81a3      	strh	r3, [r4, #12]
 801b106:	6923      	ldr	r3, [r4, #16]
 801b108:	b94b      	cbnz	r3, 801b11e <__swsetup_r+0x7a>
 801b10a:	89a3      	ldrh	r3, [r4, #12]
 801b10c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b114:	d003      	beq.n	801b11e <__swsetup_r+0x7a>
 801b116:	4621      	mov	r1, r4
 801b118:	4628      	mov	r0, r5
 801b11a:	f000 f84c 	bl	801b1b6 <__smakebuf_r>
 801b11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b122:	f013 0201 	ands.w	r2, r3, #1
 801b126:	d00a      	beq.n	801b13e <__swsetup_r+0x9a>
 801b128:	2200      	movs	r2, #0
 801b12a:	60a2      	str	r2, [r4, #8]
 801b12c:	6962      	ldr	r2, [r4, #20]
 801b12e:	4252      	negs	r2, r2
 801b130:	61a2      	str	r2, [r4, #24]
 801b132:	6922      	ldr	r2, [r4, #16]
 801b134:	b942      	cbnz	r2, 801b148 <__swsetup_r+0xa4>
 801b136:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b13a:	d1c5      	bne.n	801b0c8 <__swsetup_r+0x24>
 801b13c:	bd38      	pop	{r3, r4, r5, pc}
 801b13e:	0799      	lsls	r1, r3, #30
 801b140:	bf58      	it	pl
 801b142:	6962      	ldrpl	r2, [r4, #20]
 801b144:	60a2      	str	r2, [r4, #8]
 801b146:	e7f4      	b.n	801b132 <__swsetup_r+0x8e>
 801b148:	2000      	movs	r0, #0
 801b14a:	e7f7      	b.n	801b13c <__swsetup_r+0x98>
 801b14c:	20000494 	.word	0x20000494

0801b150 <__ascii_wctomb>:
 801b150:	4603      	mov	r3, r0
 801b152:	4608      	mov	r0, r1
 801b154:	b141      	cbz	r1, 801b168 <__ascii_wctomb+0x18>
 801b156:	2aff      	cmp	r2, #255	@ 0xff
 801b158:	d904      	bls.n	801b164 <__ascii_wctomb+0x14>
 801b15a:	228a      	movs	r2, #138	@ 0x8a
 801b15c:	601a      	str	r2, [r3, #0]
 801b15e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b162:	4770      	bx	lr
 801b164:	700a      	strb	r2, [r1, #0]
 801b166:	2001      	movs	r0, #1
 801b168:	4770      	bx	lr

0801b16a <__swhatbuf_r>:
 801b16a:	b570      	push	{r4, r5, r6, lr}
 801b16c:	460c      	mov	r4, r1
 801b16e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b172:	2900      	cmp	r1, #0
 801b174:	b096      	sub	sp, #88	@ 0x58
 801b176:	4615      	mov	r5, r2
 801b178:	461e      	mov	r6, r3
 801b17a:	da0d      	bge.n	801b198 <__swhatbuf_r+0x2e>
 801b17c:	89a3      	ldrh	r3, [r4, #12]
 801b17e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b182:	f04f 0100 	mov.w	r1, #0
 801b186:	bf14      	ite	ne
 801b188:	2340      	movne	r3, #64	@ 0x40
 801b18a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b18e:	2000      	movs	r0, #0
 801b190:	6031      	str	r1, [r6, #0]
 801b192:	602b      	str	r3, [r5, #0]
 801b194:	b016      	add	sp, #88	@ 0x58
 801b196:	bd70      	pop	{r4, r5, r6, pc}
 801b198:	466a      	mov	r2, sp
 801b19a:	f000 f873 	bl	801b284 <_fstat_r>
 801b19e:	2800      	cmp	r0, #0
 801b1a0:	dbec      	blt.n	801b17c <__swhatbuf_r+0x12>
 801b1a2:	9901      	ldr	r1, [sp, #4]
 801b1a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b1a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b1ac:	4259      	negs	r1, r3
 801b1ae:	4159      	adcs	r1, r3
 801b1b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b1b4:	e7eb      	b.n	801b18e <__swhatbuf_r+0x24>

0801b1b6 <__smakebuf_r>:
 801b1b6:	898b      	ldrh	r3, [r1, #12]
 801b1b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b1ba:	079d      	lsls	r5, r3, #30
 801b1bc:	4606      	mov	r6, r0
 801b1be:	460c      	mov	r4, r1
 801b1c0:	d507      	bpl.n	801b1d2 <__smakebuf_r+0x1c>
 801b1c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b1c6:	6023      	str	r3, [r4, #0]
 801b1c8:	6123      	str	r3, [r4, #16]
 801b1ca:	2301      	movs	r3, #1
 801b1cc:	6163      	str	r3, [r4, #20]
 801b1ce:	b003      	add	sp, #12
 801b1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1d2:	ab01      	add	r3, sp, #4
 801b1d4:	466a      	mov	r2, sp
 801b1d6:	f7ff ffc8 	bl	801b16a <__swhatbuf_r>
 801b1da:	9f00      	ldr	r7, [sp, #0]
 801b1dc:	4605      	mov	r5, r0
 801b1de:	4639      	mov	r1, r7
 801b1e0:	4630      	mov	r0, r6
 801b1e2:	f7fb ff69 	bl	80170b8 <_malloc_r>
 801b1e6:	b948      	cbnz	r0, 801b1fc <__smakebuf_r+0x46>
 801b1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1ec:	059a      	lsls	r2, r3, #22
 801b1ee:	d4ee      	bmi.n	801b1ce <__smakebuf_r+0x18>
 801b1f0:	f023 0303 	bic.w	r3, r3, #3
 801b1f4:	f043 0302 	orr.w	r3, r3, #2
 801b1f8:	81a3      	strh	r3, [r4, #12]
 801b1fa:	e7e2      	b.n	801b1c2 <__smakebuf_r+0xc>
 801b1fc:	89a3      	ldrh	r3, [r4, #12]
 801b1fe:	6020      	str	r0, [r4, #0]
 801b200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b204:	81a3      	strh	r3, [r4, #12]
 801b206:	9b01      	ldr	r3, [sp, #4]
 801b208:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b20c:	b15b      	cbz	r3, 801b226 <__smakebuf_r+0x70>
 801b20e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b212:	4630      	mov	r0, r6
 801b214:	f000 f848 	bl	801b2a8 <_isatty_r>
 801b218:	b128      	cbz	r0, 801b226 <__smakebuf_r+0x70>
 801b21a:	89a3      	ldrh	r3, [r4, #12]
 801b21c:	f023 0303 	bic.w	r3, r3, #3
 801b220:	f043 0301 	orr.w	r3, r3, #1
 801b224:	81a3      	strh	r3, [r4, #12]
 801b226:	89a3      	ldrh	r3, [r4, #12]
 801b228:	431d      	orrs	r5, r3
 801b22a:	81a5      	strh	r5, [r4, #12]
 801b22c:	e7cf      	b.n	801b1ce <__smakebuf_r+0x18>

0801b22e <memmove>:
 801b22e:	4288      	cmp	r0, r1
 801b230:	b510      	push	{r4, lr}
 801b232:	eb01 0402 	add.w	r4, r1, r2
 801b236:	d902      	bls.n	801b23e <memmove+0x10>
 801b238:	4284      	cmp	r4, r0
 801b23a:	4623      	mov	r3, r4
 801b23c:	d807      	bhi.n	801b24e <memmove+0x20>
 801b23e:	1e43      	subs	r3, r0, #1
 801b240:	42a1      	cmp	r1, r4
 801b242:	d008      	beq.n	801b256 <memmove+0x28>
 801b244:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b248:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b24c:	e7f8      	b.n	801b240 <memmove+0x12>
 801b24e:	4402      	add	r2, r0
 801b250:	4601      	mov	r1, r0
 801b252:	428a      	cmp	r2, r1
 801b254:	d100      	bne.n	801b258 <memmove+0x2a>
 801b256:	bd10      	pop	{r4, pc}
 801b258:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b25c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b260:	e7f7      	b.n	801b252 <memmove+0x24>
	...

0801b264 <_close_r>:
 801b264:	b538      	push	{r3, r4, r5, lr}
 801b266:	4d06      	ldr	r5, [pc, #24]	@ (801b280 <_close_r+0x1c>)
 801b268:	2300      	movs	r3, #0
 801b26a:	4604      	mov	r4, r0
 801b26c:	4608      	mov	r0, r1
 801b26e:	602b      	str	r3, [r5, #0]
 801b270:	f7e9 f82e 	bl	80042d0 <_close>
 801b274:	1c43      	adds	r3, r0, #1
 801b276:	d102      	bne.n	801b27e <_close_r+0x1a>
 801b278:	682b      	ldr	r3, [r5, #0]
 801b27a:	b103      	cbz	r3, 801b27e <_close_r+0x1a>
 801b27c:	6023      	str	r3, [r4, #0]
 801b27e:	bd38      	pop	{r3, r4, r5, pc}
 801b280:	20007800 	.word	0x20007800

0801b284 <_fstat_r>:
 801b284:	b538      	push	{r3, r4, r5, lr}
 801b286:	4d07      	ldr	r5, [pc, #28]	@ (801b2a4 <_fstat_r+0x20>)
 801b288:	2300      	movs	r3, #0
 801b28a:	4604      	mov	r4, r0
 801b28c:	4608      	mov	r0, r1
 801b28e:	4611      	mov	r1, r2
 801b290:	602b      	str	r3, [r5, #0]
 801b292:	f7e9 f829 	bl	80042e8 <_fstat>
 801b296:	1c43      	adds	r3, r0, #1
 801b298:	d102      	bne.n	801b2a0 <_fstat_r+0x1c>
 801b29a:	682b      	ldr	r3, [r5, #0]
 801b29c:	b103      	cbz	r3, 801b2a0 <_fstat_r+0x1c>
 801b29e:	6023      	str	r3, [r4, #0]
 801b2a0:	bd38      	pop	{r3, r4, r5, pc}
 801b2a2:	bf00      	nop
 801b2a4:	20007800 	.word	0x20007800

0801b2a8 <_isatty_r>:
 801b2a8:	b538      	push	{r3, r4, r5, lr}
 801b2aa:	4d06      	ldr	r5, [pc, #24]	@ (801b2c4 <_isatty_r+0x1c>)
 801b2ac:	2300      	movs	r3, #0
 801b2ae:	4604      	mov	r4, r0
 801b2b0:	4608      	mov	r0, r1
 801b2b2:	602b      	str	r3, [r5, #0]
 801b2b4:	f7e9 f828 	bl	8004308 <_isatty>
 801b2b8:	1c43      	adds	r3, r0, #1
 801b2ba:	d102      	bne.n	801b2c2 <_isatty_r+0x1a>
 801b2bc:	682b      	ldr	r3, [r5, #0]
 801b2be:	b103      	cbz	r3, 801b2c2 <_isatty_r+0x1a>
 801b2c0:	6023      	str	r3, [r4, #0]
 801b2c2:	bd38      	pop	{r3, r4, r5, pc}
 801b2c4:	20007800 	.word	0x20007800

0801b2c8 <_lseek_r>:
 801b2c8:	b538      	push	{r3, r4, r5, lr}
 801b2ca:	4d07      	ldr	r5, [pc, #28]	@ (801b2e8 <_lseek_r+0x20>)
 801b2cc:	4604      	mov	r4, r0
 801b2ce:	4608      	mov	r0, r1
 801b2d0:	4611      	mov	r1, r2
 801b2d2:	2200      	movs	r2, #0
 801b2d4:	602a      	str	r2, [r5, #0]
 801b2d6:	461a      	mov	r2, r3
 801b2d8:	f7e9 f821 	bl	800431e <_lseek>
 801b2dc:	1c43      	adds	r3, r0, #1
 801b2de:	d102      	bne.n	801b2e6 <_lseek_r+0x1e>
 801b2e0:	682b      	ldr	r3, [r5, #0]
 801b2e2:	b103      	cbz	r3, 801b2e6 <_lseek_r+0x1e>
 801b2e4:	6023      	str	r3, [r4, #0]
 801b2e6:	bd38      	pop	{r3, r4, r5, pc}
 801b2e8:	20007800 	.word	0x20007800

0801b2ec <_read_r>:
 801b2ec:	b538      	push	{r3, r4, r5, lr}
 801b2ee:	4d07      	ldr	r5, [pc, #28]	@ (801b30c <_read_r+0x20>)
 801b2f0:	4604      	mov	r4, r0
 801b2f2:	4608      	mov	r0, r1
 801b2f4:	4611      	mov	r1, r2
 801b2f6:	2200      	movs	r2, #0
 801b2f8:	602a      	str	r2, [r5, #0]
 801b2fa:	461a      	mov	r2, r3
 801b2fc:	f7e8 ffaf 	bl	800425e <_read>
 801b300:	1c43      	adds	r3, r0, #1
 801b302:	d102      	bne.n	801b30a <_read_r+0x1e>
 801b304:	682b      	ldr	r3, [r5, #0]
 801b306:	b103      	cbz	r3, 801b30a <_read_r+0x1e>
 801b308:	6023      	str	r3, [r4, #0]
 801b30a:	bd38      	pop	{r3, r4, r5, pc}
 801b30c:	20007800 	.word	0x20007800

0801b310 <_write_r>:
 801b310:	b538      	push	{r3, r4, r5, lr}
 801b312:	4d07      	ldr	r5, [pc, #28]	@ (801b330 <_write_r+0x20>)
 801b314:	4604      	mov	r4, r0
 801b316:	4608      	mov	r0, r1
 801b318:	4611      	mov	r1, r2
 801b31a:	2200      	movs	r2, #0
 801b31c:	602a      	str	r2, [r5, #0]
 801b31e:	461a      	mov	r2, r3
 801b320:	f7e8 ffba 	bl	8004298 <_write>
 801b324:	1c43      	adds	r3, r0, #1
 801b326:	d102      	bne.n	801b32e <_write_r+0x1e>
 801b328:	682b      	ldr	r3, [r5, #0]
 801b32a:	b103      	cbz	r3, 801b32e <_write_r+0x1e>
 801b32c:	6023      	str	r3, [r4, #0]
 801b32e:	bd38      	pop	{r3, r4, r5, pc}
 801b330:	20007800 	.word	0x20007800

0801b334 <abort>:
 801b334:	b508      	push	{r3, lr}
 801b336:	2006      	movs	r0, #6
 801b338:	f000 f848 	bl	801b3cc <raise>
 801b33c:	2001      	movs	r0, #1
 801b33e:	f7e8 ff83 	bl	8004248 <_exit>

0801b342 <_calloc_r>:
 801b342:	b570      	push	{r4, r5, r6, lr}
 801b344:	fba1 5402 	umull	r5, r4, r1, r2
 801b348:	b93c      	cbnz	r4, 801b35a <_calloc_r+0x18>
 801b34a:	4629      	mov	r1, r5
 801b34c:	f7fb feb4 	bl	80170b8 <_malloc_r>
 801b350:	4606      	mov	r6, r0
 801b352:	b928      	cbnz	r0, 801b360 <_calloc_r+0x1e>
 801b354:	2600      	movs	r6, #0
 801b356:	4630      	mov	r0, r6
 801b358:	bd70      	pop	{r4, r5, r6, pc}
 801b35a:	220c      	movs	r2, #12
 801b35c:	6002      	str	r2, [r0, #0]
 801b35e:	e7f9      	b.n	801b354 <_calloc_r+0x12>
 801b360:	462a      	mov	r2, r5
 801b362:	4621      	mov	r1, r4
 801b364:	f7fd fb24 	bl	80189b0 <memset>
 801b368:	e7f5      	b.n	801b356 <_calloc_r+0x14>

0801b36a <_malloc_usable_size_r>:
 801b36a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b36e:	1f18      	subs	r0, r3, #4
 801b370:	2b00      	cmp	r3, #0
 801b372:	bfbc      	itt	lt
 801b374:	580b      	ldrlt	r3, [r1, r0]
 801b376:	18c0      	addlt	r0, r0, r3
 801b378:	4770      	bx	lr

0801b37a <_raise_r>:
 801b37a:	291f      	cmp	r1, #31
 801b37c:	b538      	push	{r3, r4, r5, lr}
 801b37e:	4605      	mov	r5, r0
 801b380:	460c      	mov	r4, r1
 801b382:	d904      	bls.n	801b38e <_raise_r+0x14>
 801b384:	2316      	movs	r3, #22
 801b386:	6003      	str	r3, [r0, #0]
 801b388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b38c:	bd38      	pop	{r3, r4, r5, pc}
 801b38e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b390:	b112      	cbz	r2, 801b398 <_raise_r+0x1e>
 801b392:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b396:	b94b      	cbnz	r3, 801b3ac <_raise_r+0x32>
 801b398:	4628      	mov	r0, r5
 801b39a:	f000 f831 	bl	801b400 <_getpid_r>
 801b39e:	4622      	mov	r2, r4
 801b3a0:	4601      	mov	r1, r0
 801b3a2:	4628      	mov	r0, r5
 801b3a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3a8:	f000 b818 	b.w	801b3dc <_kill_r>
 801b3ac:	2b01      	cmp	r3, #1
 801b3ae:	d00a      	beq.n	801b3c6 <_raise_r+0x4c>
 801b3b0:	1c59      	adds	r1, r3, #1
 801b3b2:	d103      	bne.n	801b3bc <_raise_r+0x42>
 801b3b4:	2316      	movs	r3, #22
 801b3b6:	6003      	str	r3, [r0, #0]
 801b3b8:	2001      	movs	r0, #1
 801b3ba:	e7e7      	b.n	801b38c <_raise_r+0x12>
 801b3bc:	2100      	movs	r1, #0
 801b3be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b3c2:	4620      	mov	r0, r4
 801b3c4:	4798      	blx	r3
 801b3c6:	2000      	movs	r0, #0
 801b3c8:	e7e0      	b.n	801b38c <_raise_r+0x12>
	...

0801b3cc <raise>:
 801b3cc:	4b02      	ldr	r3, [pc, #8]	@ (801b3d8 <raise+0xc>)
 801b3ce:	4601      	mov	r1, r0
 801b3d0:	6818      	ldr	r0, [r3, #0]
 801b3d2:	f7ff bfd2 	b.w	801b37a <_raise_r>
 801b3d6:	bf00      	nop
 801b3d8:	20000494 	.word	0x20000494

0801b3dc <_kill_r>:
 801b3dc:	b538      	push	{r3, r4, r5, lr}
 801b3de:	4d07      	ldr	r5, [pc, #28]	@ (801b3fc <_kill_r+0x20>)
 801b3e0:	2300      	movs	r3, #0
 801b3e2:	4604      	mov	r4, r0
 801b3e4:	4608      	mov	r0, r1
 801b3e6:	4611      	mov	r1, r2
 801b3e8:	602b      	str	r3, [r5, #0]
 801b3ea:	f7e8 ff1d 	bl	8004228 <_kill>
 801b3ee:	1c43      	adds	r3, r0, #1
 801b3f0:	d102      	bne.n	801b3f8 <_kill_r+0x1c>
 801b3f2:	682b      	ldr	r3, [r5, #0]
 801b3f4:	b103      	cbz	r3, 801b3f8 <_kill_r+0x1c>
 801b3f6:	6023      	str	r3, [r4, #0]
 801b3f8:	bd38      	pop	{r3, r4, r5, pc}
 801b3fa:	bf00      	nop
 801b3fc:	20007800 	.word	0x20007800

0801b400 <_getpid_r>:
 801b400:	f7e8 bf0a 	b.w	8004218 <_getpid>

0801b404 <round>:
 801b404:	ec51 0b10 	vmov	r0, r1, d0
 801b408:	b570      	push	{r4, r5, r6, lr}
 801b40a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801b40e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 801b412:	2a13      	cmp	r2, #19
 801b414:	460b      	mov	r3, r1
 801b416:	4605      	mov	r5, r0
 801b418:	dc1b      	bgt.n	801b452 <round+0x4e>
 801b41a:	2a00      	cmp	r2, #0
 801b41c:	da0b      	bge.n	801b436 <round+0x32>
 801b41e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801b422:	3201      	adds	r2, #1
 801b424:	bf04      	itt	eq
 801b426:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 801b42a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 801b42e:	2200      	movs	r2, #0
 801b430:	4619      	mov	r1, r3
 801b432:	4610      	mov	r0, r2
 801b434:	e015      	b.n	801b462 <round+0x5e>
 801b436:	4c15      	ldr	r4, [pc, #84]	@ (801b48c <round+0x88>)
 801b438:	4114      	asrs	r4, r2
 801b43a:	ea04 0601 	and.w	r6, r4, r1
 801b43e:	4306      	orrs	r6, r0
 801b440:	d00f      	beq.n	801b462 <round+0x5e>
 801b442:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 801b446:	fa41 f202 	asr.w	r2, r1, r2
 801b44a:	4413      	add	r3, r2
 801b44c:	ea23 0304 	bic.w	r3, r3, r4
 801b450:	e7ed      	b.n	801b42e <round+0x2a>
 801b452:	2a33      	cmp	r2, #51	@ 0x33
 801b454:	dd08      	ble.n	801b468 <round+0x64>
 801b456:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801b45a:	d102      	bne.n	801b462 <round+0x5e>
 801b45c:	4602      	mov	r2, r0
 801b45e:	f7e7 f947 	bl	80026f0 <__adddf3>
 801b462:	ec41 0b10 	vmov	d0, r0, r1
 801b466:	bd70      	pop	{r4, r5, r6, pc}
 801b468:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 801b46c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801b470:	40f4      	lsrs	r4, r6
 801b472:	4204      	tst	r4, r0
 801b474:	d0f5      	beq.n	801b462 <round+0x5e>
 801b476:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 801b47a:	2201      	movs	r2, #1
 801b47c:	408a      	lsls	r2, r1
 801b47e:	1952      	adds	r2, r2, r5
 801b480:	bf28      	it	cs
 801b482:	3301      	addcs	r3, #1
 801b484:	ea22 0204 	bic.w	r2, r2, r4
 801b488:	e7d2      	b.n	801b430 <round+0x2c>
 801b48a:	bf00      	nop
 801b48c:	000fffff 	.word	0x000fffff

0801b490 <_init>:
 801b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b492:	bf00      	nop
 801b494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b496:	bc08      	pop	{r3}
 801b498:	469e      	mov	lr, r3
 801b49a:	4770      	bx	lr

0801b49c <_fini>:
 801b49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b49e:	bf00      	nop
 801b4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b4a2:	bc08      	pop	{r3}
 801b4a4:	469e      	mov	lr, r3
 801b4a6:	4770      	bx	lr
