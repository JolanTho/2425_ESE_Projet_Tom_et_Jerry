
Tom_n_Jerry_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba60  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800bc40  0800bc40  0000cc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bee8  0800bee8  0000d07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bee8  0800bee8  0000cee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bef0  0800bef0  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bef0  0800bef0  0000cef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bef4  0800bef4  0000cef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800bef8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015fc  2000007c  0800bf74  0000d07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001678  0800bf74  0000d678  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029f67  00000000  00000000  0000d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000683d  00000000  00000000  00037017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f8  00000000  00000000  0003d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b74  00000000  00000000  0003fc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c104  00000000  00000000  000417c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f8a5  00000000  00000000  0006d8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104dbd  00000000  00000000  0009d16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000bea  00000000  00000000  001a1f2a  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  000000b8  00000000  00000000  001a2b14  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000008  00000000  00000000  001a2bcc  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000a030  00000000  00000000  001a2bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000008c  00000000  00000000  001acc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bc28 	.word	0x0800bc28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000080 	.word	0x20000080
 800021c:	0800bc28 	.word	0x0800bc28

08000220 <USBPD_CAD_Init>:
 8000220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000224:	2600      	movs	r6, #0
 8000226:	2803      	cmp	r0, #3
 8000228:	4681      	mov	r9, r0
 800022a:	460c      	mov	r4, r1
 800022c:	4690      	mov	r8, r2
 800022e:	461f      	mov	r7, r3
 8000230:	bf28      	it	cs
 8000232:	2601      	movcs	r6, #1
 8000234:	d219      	bcs.n	800026a <USBPD_CAD_Init+0x4a>
 8000236:	b90c      	cbnz	r4, 800023c <USBPD_CAD_Init+0x1c>
 8000238:	2602      	movs	r6, #2
 800023a:	e016      	b.n	800026a <USBPD_CAD_Init+0x4a>
 800023c:	200c      	movs	r0, #12
 800023e:	f00a faf5 	bl	800a82c <malloc>
 8000242:	0005      	movs	r5, r0
 8000244:	bf08      	it	eq
 8000246:	2603      	moveq	r6, #3
 8000248:	d00f      	beq.n	800026a <USBPD_CAD_Init+0x4a>
 800024a:	210c      	movs	r1, #12
 800024c:	f00a fdcb 	bl	800ade6 <__aeabi_memclr>
 8000250:	602f      	str	r7, [r5, #0]
 8000252:	722e      	strb	r6, [r5, #8]
 8000254:	606c      	str	r4, [r5, #4]
 8000256:	464a      	mov	r2, r9
 8000258:	4939      	ldr	r1, [pc, #228]	@ (8000340 <.text_6>)
 800025a:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800025e:	463a      	mov	r2, r7
 8000260:	6863      	ldr	r3, [r4, #4]
 8000262:	4641      	mov	r1, r8
 8000264:	4648      	mov	r0, r9
 8000266:	f007 f827 	bl	80072b8 <CAD_Init>
 800026a:	4630      	mov	r0, r6
 800026c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000270 <USBPD_CAD_PortEnable>:
 8000270:	2803      	cmp	r0, #3
 8000272:	d203      	bcs.n	800027c <USBPD_CAD_PortEnable+0xc>
 8000274:	4a32      	ldr	r2, [pc, #200]	@ (8000340 <.text_6>)
 8000276:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800027a:	7201      	strb	r1, [r0, #8]
 800027c:	4770      	bx	lr

0800027e <USBPD_CAD_Process>:
 800027e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000280:	2100      	movs	r1, #0
 8000282:	f88d 1000 	strb.w	r1, [sp]
 8000286:	9101      	str	r1, [sp, #4]
 8000288:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800028c:	2600      	movs	r6, #0
 800028e:	4c2c      	ldr	r4, [pc, #176]	@ (8000340 <.text_6>)
 8000290:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000294:	2800      	cmp	r0, #0
 8000296:	d04e      	beq.n	8000336 <USBPD_CAD_Process+0xb8>
 8000298:	7a00      	ldrb	r0, [r0, #8]
 800029a:	2801      	cmp	r0, #1
 800029c:	d14b      	bne.n	8000336 <USBPD_CAD_Process+0xb8>
 800029e:	aa01      	add	r2, sp, #4
 80002a0:	4669      	mov	r1, sp
 80002a2:	b2f0      	uxtb	r0, r6
 80002a4:	f007 f986 	bl	80075b4 <CAD_StateMachine>
 80002a8:	42a8      	cmp	r0, r5
 80002aa:	bf98      	it	ls
 80002ac:	4605      	movls	r5, r0
 80002ae:	f89d 0000 	ldrb.w	r0, [sp]
 80002b2:	2801      	cmp	r0, #1
 80002b4:	d004      	beq.n	80002c0 <USBPD_CAD_Process+0x42>
 80002b6:	2802      	cmp	r0, #2
 80002b8:	bf18      	it	ne
 80002ba:	2804      	cmpne	r0, #4
 80002bc:	d012      	beq.n	80002e4 <USBPD_CAD_Process+0x66>
 80002be:	e02d      	b.n	800031c <USBPD_CAD_Process+0x9e>
 80002c0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002c4:	6801      	ldr	r1, [r0, #0]
 80002c6:	680a      	ldr	r2, [r1, #0]
 80002c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80002cc:	600a      	str	r2, [r1, #0]
 80002ce:	6801      	ldr	r1, [r0, #0]
 80002d0:	680b      	ldr	r3, [r1, #0]
 80002d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002d6:	600b      	str	r3, [r1, #0]
 80002d8:	6800      	ldr	r0, [r0, #0]
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	e01e      	b.n	8000322 <USBPD_CAD_Process+0xa4>
 80002e4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002e8:	6803      	ldr	r3, [r0, #0]
 80002ea:	9901      	ldr	r1, [sp, #4]
 80002ec:	681f      	ldr	r7, [r3, #0]
 80002ee:	f361 1787 	bfi	r7, r1, #6, #2
 80002f2:	601f      	str	r7, [r3, #0]
 80002f4:	6801      	ldr	r1, [r0, #0]
 80002f6:	680a      	ldr	r2, [r1, #0]
 80002f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80002fc:	600a      	str	r2, [r1, #0]
 80002fe:	6800      	ldr	r0, [r0, #0]
 8000300:	6801      	ldr	r1, [r0, #0]
 8000302:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000306:	2800      	cmp	r0, #0
 8000308:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800030c:	6800      	ldr	r0, [r0, #0]
 800030e:	6801      	ldr	r1, [r0, #0]
 8000310:	bf0c      	ite	eq
 8000312:	f021 0108 	biceq.w	r1, r1, #8
 8000316:	f041 0108 	orrne.w	r1, r1, #8
 800031a:	6001      	str	r1, [r0, #0]
 800031c:	f89d 0000 	ldrb.w	r0, [sp]
 8000320:	b148      	cbz	r0, 8000336 <USBPD_CAD_Process+0xb8>
 8000322:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 8000326:	685f      	ldr	r7, [r3, #4]
 8000328:	9a01      	ldr	r2, [sp, #4]
 800032a:	f89d 1000 	ldrb.w	r1, [sp]
 800032e:	f8d7 c000 	ldr.w	ip, [r7]
 8000332:	b2f0      	uxtb	r0, r6
 8000334:	47e0      	blx	ip
 8000336:	1c76      	adds	r6, r6, #1
 8000338:	2e03      	cmp	r6, #3
 800033a:	d3a9      	bcc.n	8000290 <USBPD_CAD_Process+0x12>
 800033c:	4628      	mov	r0, r5
 800033e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000340 <.text_6>:
 8000340:	20000098 	.word	0x20000098

08000344 <USBPD_CAD_AssertRd>:
 8000344:	b510      	push	{r4, lr}
 8000346:	4604      	mov	r4, r0
 8000348:	f007 ffee 	bl	8008328 <USBPDM1_DeAssertRp>
 800034c:	4620      	mov	r0, r4
 800034e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000352:	f007 bff5 	b.w	8008340 <USBPDM1_AssertRd>

08000356 <USBPD_CAD_AssertRp>:
 8000356:	b510      	push	{r4, lr}
 8000358:	4604      	mov	r4, r0
 800035a:	f008 f877 	bl	800844c <USBPDM1_DeAssertRd>
 800035e:	4620      	mov	r0, r4
 8000360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000364:	f007 bf4a 	b.w	80081fc <USBPDM1_AssertRp>

08000368 <USBPD_CAD_EnterErrorRecovery>:
 8000368:	f007 b894 	b.w	8007494 <CAD_Enter_ErrorRecovery>

0800036c <USBPD_CAD_GetMemoryConsumption>:
 800036c:	2024      	movs	r0, #36	@ 0x24
 800036e:	4770      	bx	lr

08000370 <USBPD_PE_SetTrace>:
 8000370:	0001      	movs	r1, r0
 8000372:	4906      	ldr	r1, [pc, #24]	@ (800038c <.text_5>)
 8000374:	bf08      	it	eq
 8000376:	f20f 0021 	addweq	r0, pc, #33	@ 0x21
 800037a:	6008      	str	r0, [r1, #0]
 800037c:	4770      	bx	lr

0800037e <USBPD_PE_CheckLIB>:
 800037e:	4601      	mov	r1, r0
 8000380:	2000      	movs	r0, #0
 8000382:	4a03      	ldr	r2, [pc, #12]	@ (8000390 <.text_6>)
 8000384:	4291      	cmp	r1, r2
 8000386:	bf08      	it	eq
 8000388:	2001      	moveq	r0, #1
 800038a:	4770      	bx	lr

0800038c <.text_5>:
 800038c:	20000000 	.word	0x20000000

08000390 <.text_6>:
 8000390:	00410100 	.word	0x00410100

08000394 <USBPD_PE_GetMemoryConsumption>:
 8000394:	f7ff bfea 	b.w	800036c <USBPD_CAD_GetMemoryConsumption>

08000398 <PE_Trace_Empty>:
 8000398:	4770      	bx	lr

0800039a <__aeabi_memset>:
 800039a:	b470      	push	{r4, r5, r6}
 800039c:	0784      	lsls	r4, r0, #30
 800039e:	d046      	beq.n	800042e <__aeabi_memset+0x94>
 80003a0:	1e4c      	subs	r4, r1, #1
 80003a2:	2900      	cmp	r1, #0
 80003a4:	d041      	beq.n	800042a <__aeabi_memset+0x90>
 80003a6:	b2d5      	uxtb	r5, r2
 80003a8:	4603      	mov	r3, r0
 80003aa:	e002      	b.n	80003b2 <__aeabi_memset+0x18>
 80003ac:	1e61      	subs	r1, r4, #1
 80003ae:	b3e4      	cbz	r4, 800042a <__aeabi_memset+0x90>
 80003b0:	460c      	mov	r4, r1
 80003b2:	f803 5b01 	strb.w	r5, [r3], #1
 80003b6:	0799      	lsls	r1, r3, #30
 80003b8:	d1f8      	bne.n	80003ac <__aeabi_memset+0x12>
 80003ba:	2c03      	cmp	r4, #3
 80003bc:	d92e      	bls.n	800041c <__aeabi_memset+0x82>
 80003be:	b2d5      	uxtb	r5, r2
 80003c0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80003c4:	2c0f      	cmp	r4, #15
 80003c6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80003ca:	d919      	bls.n	8000400 <__aeabi_memset+0x66>
 80003cc:	4626      	mov	r6, r4
 80003ce:	f103 0110 	add.w	r1, r3, #16
 80003d2:	3e10      	subs	r6, #16
 80003d4:	2e0f      	cmp	r6, #15
 80003d6:	f841 5c10 	str.w	r5, [r1, #-16]
 80003da:	f841 5c0c 	str.w	r5, [r1, #-12]
 80003de:	f841 5c08 	str.w	r5, [r1, #-8]
 80003e2:	f841 5c04 	str.w	r5, [r1, #-4]
 80003e6:	f101 0110 	add.w	r1, r1, #16
 80003ea:	d8f2      	bhi.n	80003d2 <__aeabi_memset+0x38>
 80003ec:	f1a4 0110 	sub.w	r1, r4, #16
 80003f0:	f021 010f 	bic.w	r1, r1, #15
 80003f4:	f004 040f 	and.w	r4, r4, #15
 80003f8:	3110      	adds	r1, #16
 80003fa:	2c03      	cmp	r4, #3
 80003fc:	440b      	add	r3, r1
 80003fe:	d90d      	bls.n	800041c <__aeabi_memset+0x82>
 8000400:	461e      	mov	r6, r3
 8000402:	4621      	mov	r1, r4
 8000404:	3904      	subs	r1, #4
 8000406:	2903      	cmp	r1, #3
 8000408:	f846 5b04 	str.w	r5, [r6], #4
 800040c:	d8fa      	bhi.n	8000404 <__aeabi_memset+0x6a>
 800040e:	1f21      	subs	r1, r4, #4
 8000410:	f021 0103 	bic.w	r1, r1, #3
 8000414:	3104      	adds	r1, #4
 8000416:	440b      	add	r3, r1
 8000418:	f004 0403 	and.w	r4, r4, #3
 800041c:	b12c      	cbz	r4, 800042a <__aeabi_memset+0x90>
 800041e:	b2d2      	uxtb	r2, r2
 8000420:	441c      	add	r4, r3
 8000422:	f803 2b01 	strb.w	r2, [r3], #1
 8000426:	42a3      	cmp	r3, r4
 8000428:	d1fb      	bne.n	8000422 <__aeabi_memset+0x88>
 800042a:	bc70      	pop	{r4, r5, r6}
 800042c:	4770      	bx	lr
 800042e:	460c      	mov	r4, r1
 8000430:	4603      	mov	r3, r0
 8000432:	e7c2      	b.n	80003ba <__aeabi_memset+0x20>
	...

08000440 <memchr>:
 8000440:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000444:	2a10      	cmp	r2, #16
 8000446:	db2b      	blt.n	80004a0 <memchr+0x60>
 8000448:	f010 0f07 	tst.w	r0, #7
 800044c:	d008      	beq.n	8000460 <memchr+0x20>
 800044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000452:	3a01      	subs	r2, #1
 8000454:	428b      	cmp	r3, r1
 8000456:	d02d      	beq.n	80004b4 <memchr+0x74>
 8000458:	f010 0f07 	tst.w	r0, #7
 800045c:	b342      	cbz	r2, 80004b0 <memchr+0x70>
 800045e:	d1f6      	bne.n	800044e <memchr+0xe>
 8000460:	b4f0      	push	{r4, r5, r6, r7}
 8000462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800046a:	f022 0407 	bic.w	r4, r2, #7
 800046e:	f07f 0700 	mvns.w	r7, #0
 8000472:	2300      	movs	r3, #0
 8000474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000478:	3c08      	subs	r4, #8
 800047a:	ea85 0501 	eor.w	r5, r5, r1
 800047e:	ea86 0601 	eor.w	r6, r6, r1
 8000482:	fa85 f547 	uadd8	r5, r5, r7
 8000486:	faa3 f587 	sel	r5, r3, r7
 800048a:	fa86 f647 	uadd8	r6, r6, r7
 800048e:	faa5 f687 	sel	r6, r5, r7
 8000492:	b98e      	cbnz	r6, 80004b8 <memchr+0x78>
 8000494:	d1ee      	bne.n	8000474 <memchr+0x34>
 8000496:	bcf0      	pop	{r4, r5, r6, r7}
 8000498:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800049c:	f002 0207 	and.w	r2, r2, #7
 80004a0:	b132      	cbz	r2, 80004b0 <memchr+0x70>
 80004a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004a6:	3a01      	subs	r2, #1
 80004a8:	ea83 0301 	eor.w	r3, r3, r1
 80004ac:	b113      	cbz	r3, 80004b4 <memchr+0x74>
 80004ae:	d1f8      	bne.n	80004a2 <memchr+0x62>
 80004b0:	2000      	movs	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4770      	bx	lr
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	bf06      	itte	eq
 80004bc:	4635      	moveq	r5, r6
 80004be:	3803      	subeq	r0, #3
 80004c0:	3807      	subne	r0, #7
 80004c2:	f015 0f01 	tst.w	r5, #1
 80004c6:	d107      	bne.n	80004d8 <memchr+0x98>
 80004c8:	3001      	adds	r0, #1
 80004ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80004ce:	bf02      	ittt	eq
 80004d0:	3001      	addeq	r0, #1
 80004d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80004d6:	3001      	addeq	r0, #1
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	3801      	subs	r0, #1
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <__aeabi_uldivmod>:
 80004e0:	b953      	cbnz	r3, 80004f8 <__aeabi_uldivmod+0x18>
 80004e2:	b94a      	cbnz	r2, 80004f8 <__aeabi_uldivmod+0x18>
 80004e4:	2900      	cmp	r1, #0
 80004e6:	bf08      	it	eq
 80004e8:	2800      	cmpeq	r0, #0
 80004ea:	bf1c      	itt	ne
 80004ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80004f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80004f4:	f000 b96a 	b.w	80007cc <__aeabi_idiv0>
 80004f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000500:	f000 f806 	bl	8000510 <__udivmoddi4>
 8000504:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800050c:	b004      	add	sp, #16
 800050e:	4770      	bx	lr

08000510 <__udivmoddi4>:
 8000510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000514:	9d08      	ldr	r5, [sp, #32]
 8000516:	460c      	mov	r4, r1
 8000518:	2b00      	cmp	r3, #0
 800051a:	d14e      	bne.n	80005ba <__udivmoddi4+0xaa>
 800051c:	4694      	mov	ip, r2
 800051e:	458c      	cmp	ip, r1
 8000520:	4686      	mov	lr, r0
 8000522:	fab2 f282 	clz	r2, r2
 8000526:	d962      	bls.n	80005ee <__udivmoddi4+0xde>
 8000528:	b14a      	cbz	r2, 800053e <__udivmoddi4+0x2e>
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	4091      	lsls	r1, r2
 8000530:	fa20 f303 	lsr.w	r3, r0, r3
 8000534:	fa0c fc02 	lsl.w	ip, ip, r2
 8000538:	4319      	orrs	r1, r3
 800053a:	fa00 fe02 	lsl.w	lr, r0, r2
 800053e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000542:	fa1f f68c 	uxth.w	r6, ip
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800054e:	fb07 1114 	mls	r1, r7, r4, r1
 8000552:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000556:	fb04 f106 	mul.w	r1, r4, r6
 800055a:	4299      	cmp	r1, r3
 800055c:	d90a      	bls.n	8000574 <__udivmoddi4+0x64>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000566:	f080 8112 	bcs.w	800078e <__udivmoddi4+0x27e>
 800056a:	4299      	cmp	r1, r3
 800056c:	f240 810f 	bls.w	800078e <__udivmoddi4+0x27e>
 8000570:	3c02      	subs	r4, #2
 8000572:	4463      	add	r3, ip
 8000574:	1a59      	subs	r1, r3, r1
 8000576:	fa1f f38e 	uxth.w	r3, lr
 800057a:	fbb1 f0f7 	udiv	r0, r1, r7
 800057e:	fb07 1110 	mls	r1, r7, r0, r1
 8000582:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000586:	fb00 f606 	mul.w	r6, r0, r6
 800058a:	429e      	cmp	r6, r3
 800058c:	d90a      	bls.n	80005a4 <__udivmoddi4+0x94>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000596:	f080 80fc 	bcs.w	8000792 <__udivmoddi4+0x282>
 800059a:	429e      	cmp	r6, r3
 800059c:	f240 80f9 	bls.w	8000792 <__udivmoddi4+0x282>
 80005a0:	4463      	add	r3, ip
 80005a2:	3802      	subs	r0, #2
 80005a4:	1b9b      	subs	r3, r3, r6
 80005a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80005aa:	2100      	movs	r1, #0
 80005ac:	b11d      	cbz	r5, 80005b6 <__udivmoddi4+0xa6>
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	2200      	movs	r2, #0
 80005b2:	e9c5 3200 	strd	r3, r2, [r5]
 80005b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d905      	bls.n	80005ca <__udivmoddi4+0xba>
 80005be:	b10d      	cbz	r5, 80005c4 <__udivmoddi4+0xb4>
 80005c0:	e9c5 0100 	strd	r0, r1, [r5]
 80005c4:	2100      	movs	r1, #0
 80005c6:	4608      	mov	r0, r1
 80005c8:	e7f5      	b.n	80005b6 <__udivmoddi4+0xa6>
 80005ca:	fab3 f183 	clz	r1, r3
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d146      	bne.n	8000660 <__udivmoddi4+0x150>
 80005d2:	42a3      	cmp	r3, r4
 80005d4:	d302      	bcc.n	80005dc <__udivmoddi4+0xcc>
 80005d6:	4290      	cmp	r0, r2
 80005d8:	f0c0 80f0 	bcc.w	80007bc <__udivmoddi4+0x2ac>
 80005dc:	1a86      	subs	r6, r0, r2
 80005de:	eb64 0303 	sbc.w	r3, r4, r3
 80005e2:	2001      	movs	r0, #1
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	d0e6      	beq.n	80005b6 <__udivmoddi4+0xa6>
 80005e8:	e9c5 6300 	strd	r6, r3, [r5]
 80005ec:	e7e3      	b.n	80005b6 <__udivmoddi4+0xa6>
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	f040 8090 	bne.w	8000714 <__udivmoddi4+0x204>
 80005f4:	eba1 040c 	sub.w	r4, r1, ip
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa1f f78c 	uxth.w	r7, ip
 8000600:	2101      	movs	r1, #1
 8000602:	fbb4 f6f8 	udiv	r6, r4, r8
 8000606:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800060a:	fb08 4416 	mls	r4, r8, r6, r4
 800060e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000612:	fb07 f006 	mul.w	r0, r7, r6
 8000616:	4298      	cmp	r0, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x11c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000622:	d202      	bcs.n	800062a <__udivmoddi4+0x11a>
 8000624:	4298      	cmp	r0, r3
 8000626:	f200 80cd 	bhi.w	80007c4 <__udivmoddi4+0x2b4>
 800062a:	4626      	mov	r6, r4
 800062c:	1a1c      	subs	r4, r3, r0
 800062e:	fa1f f38e 	uxth.w	r3, lr
 8000632:	fbb4 f0f8 	udiv	r0, r4, r8
 8000636:	fb08 4410 	mls	r4, r8, r0, r4
 800063a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800063e:	fb00 f707 	mul.w	r7, r0, r7
 8000642:	429f      	cmp	r7, r3
 8000644:	d908      	bls.n	8000658 <__udivmoddi4+0x148>
 8000646:	eb1c 0303 	adds.w	r3, ip, r3
 800064a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800064e:	d202      	bcs.n	8000656 <__udivmoddi4+0x146>
 8000650:	429f      	cmp	r7, r3
 8000652:	f200 80b0 	bhi.w	80007b6 <__udivmoddi4+0x2a6>
 8000656:	4620      	mov	r0, r4
 8000658:	1bdb      	subs	r3, r3, r7
 800065a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800065e:	e7a5      	b.n	80005ac <__udivmoddi4+0x9c>
 8000660:	f1c1 0620 	rsb	r6, r1, #32
 8000664:	408b      	lsls	r3, r1
 8000666:	fa22 f706 	lsr.w	r7, r2, r6
 800066a:	431f      	orrs	r7, r3
 800066c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000670:	fa04 f301 	lsl.w	r3, r4, r1
 8000674:	ea43 030c 	orr.w	r3, r3, ip
 8000678:	40f4      	lsrs	r4, r6
 800067a:	fa00 f801 	lsl.w	r8, r0, r1
 800067e:	0c38      	lsrs	r0, r7, #16
 8000680:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000684:	fbb4 fef0 	udiv	lr, r4, r0
 8000688:	fa1f fc87 	uxth.w	ip, r7
 800068c:	fb00 441e 	mls	r4, r0, lr, r4
 8000690:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000694:	fb0e f90c 	mul.w	r9, lr, ip
 8000698:	45a1      	cmp	r9, r4
 800069a:	fa02 f201 	lsl.w	r2, r2, r1
 800069e:	d90a      	bls.n	80006b6 <__udivmoddi4+0x1a6>
 80006a0:	193c      	adds	r4, r7, r4
 80006a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80006a6:	f080 8084 	bcs.w	80007b2 <__udivmoddi4+0x2a2>
 80006aa:	45a1      	cmp	r9, r4
 80006ac:	f240 8081 	bls.w	80007b2 <__udivmoddi4+0x2a2>
 80006b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80006b4:	443c      	add	r4, r7
 80006b6:	eba4 0409 	sub.w	r4, r4, r9
 80006ba:	fa1f f983 	uxth.w	r9, r3
 80006be:	fbb4 f3f0 	udiv	r3, r4, r0
 80006c2:	fb00 4413 	mls	r4, r0, r3, r4
 80006c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80006ce:	45a4      	cmp	ip, r4
 80006d0:	d907      	bls.n	80006e2 <__udivmoddi4+0x1d2>
 80006d2:	193c      	adds	r4, r7, r4
 80006d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80006d8:	d267      	bcs.n	80007aa <__udivmoddi4+0x29a>
 80006da:	45a4      	cmp	ip, r4
 80006dc:	d965      	bls.n	80007aa <__udivmoddi4+0x29a>
 80006de:	3b02      	subs	r3, #2
 80006e0:	443c      	add	r4, r7
 80006e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80006e6:	fba0 9302 	umull	r9, r3, r0, r2
 80006ea:	eba4 040c 	sub.w	r4, r4, ip
 80006ee:	429c      	cmp	r4, r3
 80006f0:	46ce      	mov	lr, r9
 80006f2:	469c      	mov	ip, r3
 80006f4:	d351      	bcc.n	800079a <__udivmoddi4+0x28a>
 80006f6:	d04e      	beq.n	8000796 <__udivmoddi4+0x286>
 80006f8:	b155      	cbz	r5, 8000710 <__udivmoddi4+0x200>
 80006fa:	ebb8 030e 	subs.w	r3, r8, lr
 80006fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000702:	fa04 f606 	lsl.w	r6, r4, r6
 8000706:	40cb      	lsrs	r3, r1
 8000708:	431e      	orrs	r6, r3
 800070a:	40cc      	lsrs	r4, r1
 800070c:	e9c5 6400 	strd	r6, r4, [r5]
 8000710:	2100      	movs	r1, #0
 8000712:	e750      	b.n	80005b6 <__udivmoddi4+0xa6>
 8000714:	f1c2 0320 	rsb	r3, r2, #32
 8000718:	fa20 f103 	lsr.w	r1, r0, r3
 800071c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000720:	fa24 f303 	lsr.w	r3, r4, r3
 8000724:	4094      	lsls	r4, r2
 8000726:	430c      	orrs	r4, r1
 8000728:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800072c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000730:	fa1f f78c 	uxth.w	r7, ip
 8000734:	fbb3 f0f8 	udiv	r0, r3, r8
 8000738:	fb08 3110 	mls	r1, r8, r0, r3
 800073c:	0c23      	lsrs	r3, r4, #16
 800073e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000742:	fb00 f107 	mul.w	r1, r0, r7
 8000746:	4299      	cmp	r1, r3
 8000748:	d908      	bls.n	800075c <__udivmoddi4+0x24c>
 800074a:	eb1c 0303 	adds.w	r3, ip, r3
 800074e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000752:	d22c      	bcs.n	80007ae <__udivmoddi4+0x29e>
 8000754:	4299      	cmp	r1, r3
 8000756:	d92a      	bls.n	80007ae <__udivmoddi4+0x29e>
 8000758:	3802      	subs	r0, #2
 800075a:	4463      	add	r3, ip
 800075c:	1a5b      	subs	r3, r3, r1
 800075e:	b2a4      	uxth	r4, r4
 8000760:	fbb3 f1f8 	udiv	r1, r3, r8
 8000764:	fb08 3311 	mls	r3, r8, r1, r3
 8000768:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800076c:	fb01 f307 	mul.w	r3, r1, r7
 8000770:	42a3      	cmp	r3, r4
 8000772:	d908      	bls.n	8000786 <__udivmoddi4+0x276>
 8000774:	eb1c 0404 	adds.w	r4, ip, r4
 8000778:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800077c:	d213      	bcs.n	80007a6 <__udivmoddi4+0x296>
 800077e:	42a3      	cmp	r3, r4
 8000780:	d911      	bls.n	80007a6 <__udivmoddi4+0x296>
 8000782:	3902      	subs	r1, #2
 8000784:	4464      	add	r4, ip
 8000786:	1ae4      	subs	r4, r4, r3
 8000788:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800078c:	e739      	b.n	8000602 <__udivmoddi4+0xf2>
 800078e:	4604      	mov	r4, r0
 8000790:	e6f0      	b.n	8000574 <__udivmoddi4+0x64>
 8000792:	4608      	mov	r0, r1
 8000794:	e706      	b.n	80005a4 <__udivmoddi4+0x94>
 8000796:	45c8      	cmp	r8, r9
 8000798:	d2ae      	bcs.n	80006f8 <__udivmoddi4+0x1e8>
 800079a:	ebb9 0e02 	subs.w	lr, r9, r2
 800079e:	eb63 0c07 	sbc.w	ip, r3, r7
 80007a2:	3801      	subs	r0, #1
 80007a4:	e7a8      	b.n	80006f8 <__udivmoddi4+0x1e8>
 80007a6:	4631      	mov	r1, r6
 80007a8:	e7ed      	b.n	8000786 <__udivmoddi4+0x276>
 80007aa:	4603      	mov	r3, r0
 80007ac:	e799      	b.n	80006e2 <__udivmoddi4+0x1d2>
 80007ae:	4630      	mov	r0, r6
 80007b0:	e7d4      	b.n	800075c <__udivmoddi4+0x24c>
 80007b2:	46d6      	mov	lr, sl
 80007b4:	e77f      	b.n	80006b6 <__udivmoddi4+0x1a6>
 80007b6:	4463      	add	r3, ip
 80007b8:	3802      	subs	r0, #2
 80007ba:	e74d      	b.n	8000658 <__udivmoddi4+0x148>
 80007bc:	4606      	mov	r6, r0
 80007be:	4623      	mov	r3, r4
 80007c0:	4608      	mov	r0, r1
 80007c2:	e70f      	b.n	80005e4 <__udivmoddi4+0xd4>
 80007c4:	3e02      	subs	r6, #2
 80007c6:	4463      	add	r3, ip
 80007c8:	e730      	b.n	800062c <__udivmoddi4+0x11c>
 80007ca:	bf00      	nop

080007cc <__aeabi_idiv0>:
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2220      	movs	r2, #32
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f00a fa67 	bl	800acb0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <MX_ADC2_Init+0xc0>)
 80007e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000894 <MX_ADC2_Init+0xc4>)
 80007e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007e8:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <MX_ADC2_Init+0xc0>)
 80007ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80007ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007f0:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <MX_ADC2_Init+0xc0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	4b26      	ldr	r3, [pc, #152]	@ (8000890 <MX_ADC2_Init+0xc0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80007fc:	4b24      	ldr	r3, [pc, #144]	@ (8000890 <MX_ADC2_Init+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000802:	4b23      	ldr	r3, [pc, #140]	@ (8000890 <MX_ADC2_Init+0xc0>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000808:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <MX_ADC2_Init+0xc0>)
 800080a:	2204      	movs	r2, #4
 800080c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800080e:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <MX_ADC2_Init+0xc0>)
 8000810:	2200      	movs	r2, #0
 8000812:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000814:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <MX_ADC2_Init+0xc0>)
 8000816:	2200      	movs	r2, #0
 8000818:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800081a:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <MX_ADC2_Init+0xc0>)
 800081c:	2201      	movs	r2, #1
 800081e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <MX_ADC2_Init+0xc0>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000828:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <MX_ADC2_Init+0xc0>)
 800082a:	2200      	movs	r2, #0
 800082c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <MX_ADC2_Init+0xc0>)
 8000830:	2200      	movs	r2, #0
 8000832:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_ADC2_Init+0xc0>)
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_ADC2_Init+0xc0>)
 800083e:	2200      	movs	r2, #0
 8000840:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_ADC2_Init+0xc0>)
 8000844:	2200      	movs	r2, #0
 8000846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800084a:	4811      	ldr	r0, [pc, #68]	@ (8000890 <MX_ADC2_Init+0xc0>)
 800084c:	f001 fea8 	bl	80025a0 <HAL_ADC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000856:	f000 fc63 	bl	8001120 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800085a:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_ADC2_Init+0xc8>)
 800085c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085e:	2306      	movs	r3, #6
 8000860:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000866:	237f      	movs	r3, #127	@ 0x7f
 8000868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2304      	movs	r3, #4
 800086c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	@ (8000890 <MX_ADC2_Init+0xc0>)
 8000878:	f002 f816 	bl	80028a8 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000882:	f000 fc4d 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000a4 	.word	0x200000a4
 8000894:	50000100 	.word	0x50000100
 8000898:	0c900008 	.word	0x0c900008

0800089c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09a      	sub	sp, #104	@ 0x68
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	2244      	movs	r2, #68	@ 0x44
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f00a f9f7 	bl	800acb0 <memset>
  if(adcHandle->Instance==ADC2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000940 <HAL_ADC_MspInit+0xa4>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d134      	bne.n	8000936 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 ff45 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80008e8:	f000 fc1a 	bl	8001120 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ec:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <HAL_ADC_MspInit+0xa8>)
 80008ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f0:	4a14      	ldr	r2, [pc, #80]	@ (8000944 <HAL_ADC_MspInit+0xa8>)
 80008f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_ADC_MspInit+0xa8>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <HAL_ADC_MspInit+0xa8>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000908:	4a0e      	ldr	r2, [pc, #56]	@ (8000944 <HAL_ADC_MspInit+0xa8>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <HAL_ADC_MspInit+0xa8>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = ASSERV_I1_Pin|ASSERV_I2_Pin;
 800091c:	23c0      	movs	r3, #192	@ 0xc0
 800091e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000920:	2303      	movs	r3, #3
 8000922:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800092c:	4619      	mov	r1, r3
 800092e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000932:	f002 fe63 	bl	80035fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000936:	bf00      	nop
 8000938:	3768      	adds	r7, #104	@ 0x68
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	50000100 	.word	0x50000100
 8000944:	40021000 	.word	0x40021000

08000948 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000948:	b5b0      	push	{r4, r5, r7, lr}
 800094a:	b08a      	sub	sp, #40	@ 0x28
 800094c:	af02      	add	r7, sp, #8
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800094e:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <MX_FREERTOS_Init+0x74>)
 8000950:	f107 0408 	add.w	r4, r7, #8
 8000954:	461d      	mov	r5, r3
 8000956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095a:	682b      	ldr	r3, [r5, #0]
 800095c:	6023      	str	r3, [r4, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f007 fe1e 	bl	80085a6 <osThreadCreate>
 800096a:	4603      	mov	r3, r0
 800096c:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <MX_FREERTOS_Init+0x78>)
 800096e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
#define STACK_SIZE 1000
#define DELAY_1 4
#define DELAY_2 4
	BaseType_t xReturned;
	TaskHandle_t xShellHandle = NULL;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
	TaskHandle_t xEdgeDetectionHandle = NULL;
 8000974:	2300      	movs	r3, #0
 8000976:	603b      	str	r3, [r7, #0]


	xReturned = xTaskCreate(
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	2301      	movs	r3, #1
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2304      	movs	r3, #4
 8000982:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000986:	490f      	ldr	r1, [pc, #60]	@ (80009c4 <MX_FREERTOS_Init+0x7c>)
 8000988:	480f      	ldr	r0, [pc, #60]	@ (80009c8 <MX_FREERTOS_Init+0x80>)
 800098a:	f008 f99b 	bl	8008cc4 <xTaskCreate>
 800098e:	61f8      	str	r0, [r7, #28]
			"Shell_Task", /* Text name for the task. */
			STACK_SIZE, /* Stack size in words, not bytes. */
			(void *) DELAY_1, /* Parameter passed into the task. */
			1,/* Priority at which the task is created. */
			&xShellHandle ); /* Used to pass out the created task's handle. */
	xReturned = xTaskCreate(
 8000990:	463b      	mov	r3, r7
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	2301      	movs	r3, #1
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2304      	movs	r3, #4
 800099a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800099e:	490b      	ldr	r1, [pc, #44]	@ (80009cc <MX_FREERTOS_Init+0x84>)
 80009a0:	480b      	ldr	r0, [pc, #44]	@ (80009d0 <MX_FREERTOS_Init+0x88>)
 80009a2:	f008 f98f 	bl	8008cc4 <xTaskCreate>
 80009a6:	61f8      	str	r0, [r7, #28]
			"EdgeDetection_Task", /* Text name for the task. */
			STACK_SIZE, /* Stack size in words, not bytes. */
			(void *) DELAY_2, /* Parameter passed into the task. */
			1,/* Priority at which the task is created. */
			&xEdgeDetectionHandle ); /* Used to pass out the created task's handle. */
	if (xReturned){
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_FREERTOS_Init+0x6a>
		Error_Handler();
 80009ae:	f000 fbb7 	bl	8001120 <Error_Handler>
	}
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bdb0      	pop	{r4, r5, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	0800bc6c 	.word	0x0800bc6c
 80009c0:	20000110 	.word	0x20000110
 80009c4:	0800bc40 	.word	0x0800bc40
 80009c8:	080009e9 	.word	0x080009e9
 80009cc:	0800bc4c 	.word	0x0800bc4c
 80009d0:	08000a21 	.word	0x08000a21

080009d4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */

	/* USER CODE END StartDefaultTask */
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <shell>:

/*Si erreur de compilation ici, il faut include le path du driver dans les propiété du projet
* Project->Properties->C/C++ Build->Settings->MCU/MPU GCC Compiler->Include paths
* -> dans la section "include paths" ajouter "../shell"
*/
void shell(void * pvParameters){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	shell_init();
 80009f0:	f009 fd92 	bl	800a518 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 80009f4:	4a06      	ldr	r2, [pc, #24]	@ (8000a10 <shell+0x28>)
 80009f6:	4907      	ldr	r1, [pc, #28]	@ (8000a14 <shell+0x2c>)
 80009f8:	2066      	movs	r0, #102	@ 0x66
 80009fa:	f009 fdaf 	bl	800a55c <shell_add>
	shell_add('a', addition, "Une fonction sommeuse");
 80009fe:	4a06      	ldr	r2, [pc, #24]	@ (8000a18 <shell+0x30>)
 8000a00:	4906      	ldr	r1, [pc, #24]	@ (8000a1c <shell+0x34>)
 8000a02:	2061      	movs	r0, #97	@ 0x61
 8000a04:	f009 fdaa 	bl	800a55c <shell_add>
	for(;;){
		shell_run();
 8000a08:	f009 fe54 	bl	800a6b4 <shell_run>
 8000a0c:	e7fc      	b.n	8000a08 <shell+0x20>
 8000a0e:	bf00      	nop
 8000a10:	0800bc80 	.word	0x0800bc80
 8000a14:	0800a789 	.word	0x0800a789
 8000a18:	0800bc98 	.word	0x0800bc98
 8000a1c:	0800a7c9 	.word	0x0800a7c9

08000a20 <edgedetection>:
	}
}
void edgedetection(void * pvParameters){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	@ 0x30
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	2230      	movs	r2, #48	@ 0x30
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f00a f935 	bl	800acb0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_DAC1_Init+0x6c>)
 8000a48:	4a16      	ldr	r2, [pc, #88]	@ (8000aa4 <MX_DAC1_Init+0x70>)
 8000a4a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a4c:	4814      	ldr	r0, [pc, #80]	@ (8000aa0 <MX_DAC1_Init+0x6c>)
 8000a4e:	f002 fbfb 	bl	8003248 <HAL_DAC_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a58:	f000 fb62 	bl	8001120 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <MX_DAC1_Init+0x6c>)
 8000a88:	f002 fc00 	bl	800328c <HAL_DAC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000a92:	f000 fb45 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3730      	adds	r7, #48	@ 0x30
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000114 	.word	0x20000114
 8000aa4:	50000800 	.word	0x50000800

08000aa8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a15      	ldr	r2, [pc, #84]	@ (8000b1c <HAL_DAC_MspInit+0x74>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d124      	bne.n	8000b14 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_DAC_MspInit+0x78>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	4a14      	ldr	r2, [pc, #80]	@ (8000b20 <HAL_DAC_MspInit+0x78>)
 8000ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_DAC_MspInit+0x78>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <HAL_DAC_MspInit+0x78>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b20 <HAL_DAC_MspInit+0x78>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <HAL_DAC_MspInit+0x78>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC__Pin;
 8000afa:	2310      	movs	r3, #16
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afe:	2303      	movs	r3, #3
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC__GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b10:	f002 fd74 	bl	80035fc <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	@ 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	50000800 	.word	0x50000800
 8000b20:	40021000 	.word	0x40021000

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4907      	ldr	r1, [pc, #28]	@ (8000b78 <__NVIC_EnableIRQ+0x38>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	@ (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	@ (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	@ 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	@ 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <MX_DMA_Init+0x80>)
 8000c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c42:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb8 <MX_DMA_Init+0x80>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <MX_DMA_Init+0x80>)
 8000c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c56:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <MX_DMA_Init+0x80>)
 8000c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c5a:	4a17      	ldr	r2, [pc, #92]	@ (8000cb8 <MX_DMA_Init+0x80>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <MX_DMA_Init+0x80>)
 8000c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000c6e:	f7ff ff59 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2200      	movs	r2, #0
 8000c76:	2105      	movs	r1, #5
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ffa9 	bl	8000bd0 <NVIC_EncodePriority>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4619      	mov	r1, r3
 8000c82:	200b      	movs	r0, #11
 8000c84:	f7ff ff7a 	bl	8000b7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c88:	200b      	movs	r0, #11
 8000c8a:	f7ff ff59 	bl	8000b40 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000c8e:	f7ff ff49 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2200      	movs	r2, #0
 8000c96:	2105      	movs	r1, #5
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff99 	bl	8000bd0 <NVIC_EncodePriority>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	200c      	movs	r0, #12
 8000ca4:	f7ff ff6a 	bl	8000b7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ca8:	200c      	movs	r0, #12
 8000caa:	f7ff ff49 	bl	8000b40 <__NVIC_EnableIRQ>

}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000

08000cbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b28      	ldr	r3, [pc, #160]	@ (8000d74 <MX_GPIO_Init+0xb8>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	4a27      	ldr	r2, [pc, #156]	@ (8000d74 <MX_GPIO_Init+0xb8>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cde:	4b25      	ldr	r3, [pc, #148]	@ (8000d74 <MX_GPIO_Init+0xb8>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cea:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <MX_GPIO_Init+0xb8>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	4a21      	ldr	r2, [pc, #132]	@ (8000d74 <MX_GPIO_Init+0xb8>)
 8000cf0:	f043 0320 	orr.w	r3, r3, #32
 8000cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <MX_GPIO_Init+0xb8>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	f003 0320 	and.w	r3, r3, #32
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <MX_GPIO_Init+0xb8>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	4a1b      	ldr	r2, [pc, #108]	@ (8000d74 <MX_GPIO_Init+0xb8>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <MX_GPIO_Init+0xb8>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <MX_GPIO_Init+0xb8>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	4a15      	ldr	r2, [pc, #84]	@ (8000d74 <MX_GPIO_Init+0xb8>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_GPIO_Init+0xb8>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_INITIAL_STATE_Pin|BUTTON_START_ROBOT_Pin;
 8000d32:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	480b      	ldr	r0, [pc, #44]	@ (8000d78 <MX_GPIO_Init+0xbc>)
 8000d4a:	f002 fc57 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOUSTACHE_4_Pin|MOUSTACHE_1_Pin;
 8000d4e:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d54:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <MX_GPIO_Init+0xc0>)
 8000d66:	f002 fc49 	bl	80035fc <HAL_GPIO_Init>

}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	@ 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000
 8000d78:	48000800 	.word	0x48000800
 8000d7c:	48000400 	.word	0x48000400

08000d80 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	@ (8000df8 <MX_I2C1_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dfc <MX_I2C1_Init+0x7c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dba:	480e      	ldr	r0, [pc, #56]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000dbc:	f002 fda0 	bl	8003900 <HAL_I2C_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dc6:	f000 f9ab 	bl	8001120 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4809      	ldr	r0, [pc, #36]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000dce:	f002 fe32 	bl	8003a36 <HAL_I2CEx_ConfigAnalogFilter>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd8:	f000 f9a2 	bl	8001120 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000de0:	f002 fe74 	bl	8003acc <HAL_I2CEx_ConfigDigitalFilter>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 f999 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000128 	.word	0x20000128
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	00503d58 	.word	0x00503d58

08000e00 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <MX_I2C3_Init+0x74>)
 8000e06:	4a1c      	ldr	r2, [pc, #112]	@ (8000e78 <MX_I2C3_Init+0x78>)
 8000e08:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <MX_I2C3_Init+0x74>)
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <MX_I2C3_Init+0x7c>)
 8000e0e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e10:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <MX_I2C3_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e16:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <MX_I2C3_Init+0x74>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <MX_I2C3_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e22:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <MX_I2C3_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e28:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <MX_I2C3_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <MX_I2C3_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <MX_I2C3_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e3a:	480e      	ldr	r0, [pc, #56]	@ (8000e74 <MX_I2C3_Init+0x74>)
 8000e3c:	f002 fd60 	bl	8003900 <HAL_I2C_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e46:	f000 f96b 	bl	8001120 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4809      	ldr	r0, [pc, #36]	@ (8000e74 <MX_I2C3_Init+0x74>)
 8000e4e:	f002 fdf2 	bl	8003a36 <HAL_I2CEx_ConfigAnalogFilter>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e58:	f000 f962 	bl	8001120 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <MX_I2C3_Init+0x74>)
 8000e60:	f002 fe34 	bl	8003acc <HAL_I2CEx_ConfigDigitalFilter>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e6a:	f000 f959 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000017c 	.word	0x2000017c
 8000e78:	40007800 	.word	0x40007800
 8000e7c:	00503d58 	.word	0x00503d58

08000e80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09e      	sub	sp, #120	@ 0x78
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e98:	f107 0320 	add.w	r3, r7, #32
 8000e9c:	2244      	movs	r2, #68	@ 0x44
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f009 ff05 	bl	800acb0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a5c      	ldr	r2, [pc, #368]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d155      	bne.n	8000f5c <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000eb0:	2340      	movs	r3, #64	@ 0x40
 8000eb2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb8:	f107 0320 	add.w	r3, r7, #32
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f003 fc55 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ec8:	f000 f92a 	bl	8001120 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b54      	ldr	r3, [pc, #336]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed0:	4a53      	ldr	r2, [pc, #332]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed8:	4b51      	ldr	r3, [pc, #324]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee4:	4b4e      	ldr	r3, [pc, #312]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee8:	4a4d      	ldr	r2, [pc, #308]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin;
 8000efc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f00:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f02:	2312      	movs	r3, #18
 8000f04:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1c:	f002 fb6e 	bl	80035fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C_IMU_SDA_Pin;
 8000f20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f24:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f26:	2312      	movs	r3, #18
 8000f28:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f32:	2304      	movs	r3, #4
 8000f34:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4839      	ldr	r0, [pc, #228]	@ (8001024 <HAL_I2C_MspInit+0x1a4>)
 8000f3e:	f002 fb5d 	bl	80035fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f42:	4b37      	ldr	r3, [pc, #220]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f46:	4a36      	ldr	r2, [pc, #216]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000f48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f4e:	4b34      	ldr	r3, [pc, #208]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f5a:	e05a      	b.n	8001012 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a31      	ldr	r2, [pc, #196]	@ (8001028 <HAL_I2C_MspInit+0x1a8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d155      	bne.n	8001012 <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000f66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f6a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 fbf9 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8000f80:	f000 f8ce 	bl	8001120 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b26      	ldr	r3, [pc, #152]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f88:	4a25      	ldr	r2, [pc, #148]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f90:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9c:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_MAIN_SCL_Pin;
 8000fb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fba:	2312      	movs	r3, #18
 8000fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_MAIN_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd4:	f002 fb12 	bl	80035fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C_MAIN_SDA_Pin;
 8000fd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fdc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fde:	2312      	movs	r3, #18
 8000fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000fea:	2308      	movs	r3, #8
 8000fec:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_MAIN_SDA_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480d      	ldr	r0, [pc, #52]	@ (800102c <HAL_I2C_MspInit+0x1ac>)
 8000ff6:	f002 fb01 	bl	80035fc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffe:	4a08      	ldr	r2, [pc, #32]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8001000:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001004:	6593      	str	r3, [r2, #88]	@ 0x58
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
}
 8001012:	bf00      	nop
 8001014:	3778      	adds	r7, #120	@ 0x78
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40005400 	.word	0x40005400
 8001020:	40021000 	.word	0x40021000
 8001024:	48000400 	.word	0x48000400
 8001028:	40007800 	.word	0x40007800
 800102c:	48000800 	.word	0x48000800

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f001 f885 	bl	8002142 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f820 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f7ff fe3e 	bl	8000cbc <MX_GPIO_Init>
  MX_DMA_Init();
 8001040:	f7ff fdfa 	bl	8000c38 <MX_DMA_Init>
  MX_ADC2_Init();
 8001044:	f7ff fbc4 	bl	80007d0 <MX_ADC2_Init>
  MX_DAC1_Init();
 8001048:	f7ff fcf4 	bl	8000a34 <MX_DAC1_Init>
  MX_I2C1_Init();
 800104c:	f7ff fe98 	bl	8000d80 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001050:	f7ff fed6 	bl	8000e00 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001054:	f000 f9ee 	bl	8001434 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001058:	f000 fa74 	bl	8001544 <MX_TIM3_Init>
  MX_TIM4_Init();
 800105c:	f000 fafc 	bl	8001658 <MX_TIM4_Init>
  MX_UCPD1_Init();
 8001060:	f000 fe68 	bl	8001d34 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8001064:	f000 fef6 	bl	8001e54 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001068:	f000 ff40 	bl	8001eec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 800106c:	f009 f8ac 	bl	800a1c8 <MX_USBPD_Init>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001070:	f7ff fc6a 	bl	8000948 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001074:	f007 fa90 	bl	8008598 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <main+0x48>

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	@ 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	2238      	movs	r2, #56	@ 0x38
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f009 fe10 	bl	800acb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010a2:	f002 fd5f 	bl	8003b64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b0:	2340      	movs	r3, #64	@ 0x40
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b8:	f107 0318 	add.w	r3, r7, #24
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 fdf5 	bl	8003cac <HAL_RCC_OscConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80010c8:	f000 f82a 	bl	8001120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010cc:	230f      	movs	r3, #15
 80010ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010d0:	2301      	movs	r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 f8f3 	bl	80042d0 <HAL_RCC_ClockConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80010f0:	f000 f816 	bl	8001120 <Error_Handler>
  }
}
 80010f4:	bf00      	nop
 80010f6:	3750      	adds	r7, #80	@ 0x50
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a04      	ldr	r2, [pc, #16]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800110e:	f001 f831 	bl	8002174 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40014800 	.word	0x40014800

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <Error_Handler+0x8>

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <HAL_MspInit+0x4c>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001136:	4a10      	ldr	r2, [pc, #64]	@ (8001178 <HAL_MspInit+0x4c>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6613      	str	r3, [r2, #96]	@ 0x60
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <HAL_MspInit+0x4c>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <HAL_MspInit+0x4c>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <HAL_MspInit+0x4c>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001154:	6593      	str	r3, [r2, #88]	@ 0x58
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <HAL_MspInit+0x4c>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	210f      	movs	r1, #15
 8001166:	f06f 0001 	mvn.w	r0, #1
 800116a:	f002 f845 	bl	80031f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	@ 0x30
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800118c:	4b2c      	ldr	r3, [pc, #176]	@ (8001240 <HAL_InitTick+0xc4>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001190:	4a2b      	ldr	r2, [pc, #172]	@ (8001240 <HAL_InitTick+0xc4>)
 8001192:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001196:	6613      	str	r3, [r2, #96]	@ 0x60
 8001198:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <HAL_InitTick+0xc4>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a4:	f107 020c 	add.w	r2, r7, #12
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 fa64 	bl	800467c <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011b4:	f003 fa4c 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 80011b8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011bc:	4a21      	ldr	r2, [pc, #132]	@ (8001244 <HAL_InitTick+0xc8>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	0c9b      	lsrs	r3, r3, #18
 80011c4:	3b01      	subs	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80011c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <HAL_InitTick+0xcc>)
 80011ca:	4a20      	ldr	r2, [pc, #128]	@ (800124c <HAL_InitTick+0xd0>)
 80011cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <HAL_InitTick+0xcc>)
 80011d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011d4:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80011d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <HAL_InitTick+0xcc>)
 80011d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011da:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <HAL_InitTick+0xcc>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <HAL_InitTick+0xcc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 80011e8:	4817      	ldr	r0, [pc, #92]	@ (8001248 <HAL_InitTick+0xcc>)
 80011ea:	f003 fcaf 	bl	8004b4c <HAL_TIM_Base_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80011f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d11b      	bne.n	8001234 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80011fc:	4812      	ldr	r0, [pc, #72]	@ (8001248 <HAL_InitTick+0xcc>)
 80011fe:	f003 fd07 	bl	8004c10 <HAL_TIM_Base_Start_IT>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001208:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800120c:	2b00      	cmp	r3, #0
 800120e:	d111      	bne.n	8001234 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001210:	201a      	movs	r0, #26
 8001212:	f002 f80b 	bl	800322c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d808      	bhi.n	800122e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	201a      	movs	r0, #26
 8001222:	f001 ffe9 	bl	80031f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <HAL_InitTick+0xd4>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	e002      	b.n	8001234 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001234:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001238:	4618      	mov	r0, r3
 800123a:	3730      	adds	r7, #48	@ 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	431bde83 	.word	0x431bde83
 8001248:	200001d0 	.word	0x200001d0
 800124c:	40014800 	.word	0x40014800
 8001250:	20000008 	.word	0x20000008

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <NMI_Handler+0x4>

0800125c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <MemManage_Handler+0x4>

0800126c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <UsageFault_Handler+0x4>

0800127c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80012ac:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80012ae:	f003 fe20 	bl	8004ef2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200001d0 	.word	0x200001d0

080012bc <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */

  /* USER CODE END UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 80012c0:	f006 fd14 	bl	8007cec <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e00a      	b.n	80012f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012da:	f3af 8000 	nop.w
 80012de:	4601      	mov	r1, r0
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	60ba      	str	r2, [r7, #8]
 80012e6:	b2ca      	uxtb	r2, r1
 80012e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbf0      	blt.n	80012da <_read+0x12>
  }

  return len;
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e009      	b.n	8001328 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	dbf1      	blt.n	8001314 <_write+0x12>
  }
  return len;
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_close>:

int _close(int file)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001362:	605a      	str	r2, [r3, #4]
  return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_isatty>:

int _isatty(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ac:	4a14      	ldr	r2, [pc, #80]	@ (8001400 <_sbrk+0x5c>)
 80013ae:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <_sbrk+0x60>)
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b8:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <_sbrk+0x64>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	@ (800140c <_sbrk+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d4:	f009 fcda 	bl	800ad8c <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	220c      	movs	r2, #12
 80013dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e2:	e009      	b.n	80013f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e4:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <_sbrk+0x64>)
 80013f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20008000 	.word	0x20008000
 8001404:	00000400 	.word	0x00000400
 8001408:	2000021c 	.word	0x2000021c
 800140c:	20001678 	.word	0x20001678

08001410 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b094      	sub	sp, #80	@ 0x50
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800143a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800143e:	2224      	movs	r2, #36	@ 0x24
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f009 fc34 	bl	800acb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
 8001462:	615a      	str	r2, [r3, #20]
 8001464:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001466:	4b36      	ldr	r3, [pc, #216]	@ (8001540 <MX_TIM2_Init+0x10c>)
 8001468:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800146c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800146e:	4b34      	ldr	r3, [pc, #208]	@ (8001540 <MX_TIM2_Init+0x10c>)
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001474:	4b32      	ldr	r3, [pc, #200]	@ (8001540 <MX_TIM2_Init+0x10c>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800147a:	4b31      	ldr	r3, [pc, #196]	@ (8001540 <MX_TIM2_Init+0x10c>)
 800147c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001480:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001482:	4b2f      	ldr	r3, [pc, #188]	@ (8001540 <MX_TIM2_Init+0x10c>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001488:	4b2d      	ldr	r3, [pc, #180]	@ (8001540 <MX_TIM2_Init+0x10c>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800148e:	482c      	ldr	r0, [pc, #176]	@ (8001540 <MX_TIM2_Init+0x10c>)
 8001490:	f003 fc28 	bl	8004ce4 <HAL_TIM_PWM_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800149a:	f7ff fe41 	bl	8001120 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800149e:	2301      	movs	r3, #1
 80014a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014a2:	2300      	movs	r3, #0
 80014a4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014a6:	2301      	movs	r3, #1
 80014a8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC1Filter = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014b2:	2300      	movs	r3, #0
 80014b4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014b6:	2301      	movs	r3, #1
 80014b8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.IC2Filter = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014c6:	4619      	mov	r1, r3
 80014c8:	481d      	ldr	r0, [pc, #116]	@ (8001540 <MX_TIM2_Init+0x10c>)
 80014ca:	f003 fc62 	bl	8004d92 <HAL_TIM_Encoder_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80014d4:	f7ff fe24 	bl	8001120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	4619      	mov	r1, r3
 80014e6:	4816      	ldr	r0, [pc, #88]	@ (8001540 <MX_TIM2_Init+0x10c>)
 80014e8:	f004 fb20 	bl	8005b2c <HAL_TIMEx_MasterConfigSynchronization>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80014f2:	f7ff fe15 	bl	8001120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f6:	2360      	movs	r3, #96	@ 0x60
 80014f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2208      	movs	r2, #8
 800150a:	4619      	mov	r1, r3
 800150c:	480c      	ldr	r0, [pc, #48]	@ (8001540 <MX_TIM2_Init+0x10c>)
 800150e:	f003 fe3f 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001518:	f7ff fe02 	bl	8001120 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	220c      	movs	r2, #12
 8001520:	4619      	mov	r1, r3
 8001522:	4807      	ldr	r0, [pc, #28]	@ (8001540 <MX_TIM2_Init+0x10c>)
 8001524:	f003 fe34 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 800152e:	f7ff fdf7 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001532:	4803      	ldr	r0, [pc, #12]	@ (8001540 <MX_TIM2_Init+0x10c>)
 8001534:	f000 f98e 	bl	8001854 <HAL_TIM_MspPostInit>

}
 8001538:	bf00      	nop
 800153a:	3750      	adds	r7, #80	@ 0x50
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000220 	.word	0x20000220

08001544 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b094      	sub	sp, #80	@ 0x50
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800154a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800154e:	2224      	movs	r2, #36	@ 0x24
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f009 fbac 	bl	800acb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001576:	4b36      	ldr	r3, [pc, #216]	@ (8001650 <MX_TIM3_Init+0x10c>)
 8001578:	4a36      	ldr	r2, [pc, #216]	@ (8001654 <MX_TIM3_Init+0x110>)
 800157a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800157c:	4b34      	ldr	r3, [pc, #208]	@ (8001650 <MX_TIM3_Init+0x10c>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b33      	ldr	r3, [pc, #204]	@ (8001650 <MX_TIM3_Init+0x10c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001588:	4b31      	ldr	r3, [pc, #196]	@ (8001650 <MX_TIM3_Init+0x10c>)
 800158a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800158e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b2f      	ldr	r3, [pc, #188]	@ (8001650 <MX_TIM3_Init+0x10c>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <MX_TIM3_Init+0x10c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800159c:	482c      	ldr	r0, [pc, #176]	@ (8001650 <MX_TIM3_Init+0x10c>)
 800159e:	f003 fba1 	bl	8004ce4 <HAL_TIM_PWM_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015a8:	f7ff fdba 	bl	8001120 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015b4:	2301      	movs	r3, #1
 80015b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC1Filter = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015c0:	2300      	movs	r3, #0
 80015c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015c4:	2301      	movs	r3, #1
 80015c6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.IC2Filter = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015d4:	4619      	mov	r1, r3
 80015d6:	481e      	ldr	r0, [pc, #120]	@ (8001650 <MX_TIM3_Init+0x10c>)
 80015d8:	f003 fbdb 	bl	8004d92 <HAL_TIM_Encoder_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80015e2:	f7ff fd9d 	bl	8001120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	4619      	mov	r1, r3
 80015f4:	4816      	ldr	r0, [pc, #88]	@ (8001650 <MX_TIM3_Init+0x10c>)
 80015f6:	f004 fa99 	bl	8005b2c <HAL_TIMEx_MasterConfigSynchronization>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001600:	f7ff fd8e 	bl	8001120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001604:	2360      	movs	r3, #96	@ 0x60
 8001606:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	2208      	movs	r2, #8
 8001618:	4619      	mov	r1, r3
 800161a:	480d      	ldr	r0, [pc, #52]	@ (8001650 <MX_TIM3_Init+0x10c>)
 800161c:	f003 fdb8 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001626:	f7ff fd7b 	bl	8001120 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	220c      	movs	r2, #12
 800162e:	4619      	mov	r1, r3
 8001630:	4807      	ldr	r0, [pc, #28]	@ (8001650 <MX_TIM3_Init+0x10c>)
 8001632:	f003 fdad 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 800163c:	f7ff fd70 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001640:	4803      	ldr	r0, [pc, #12]	@ (8001650 <MX_TIM3_Init+0x10c>)
 8001642:	f000 f907 	bl	8001854 <HAL_TIM_MspPostInit>

}
 8001646:	bf00      	nop
 8001648:	3750      	adds	r7, #80	@ 0x50
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000026c 	.word	0x2000026c
 8001654:	40000400 	.word	0x40000400

08001658 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166a:	463b      	mov	r3, r7
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
 8001678:	615a      	str	r2, [r3, #20]
 800167a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800167c:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <MX_TIM4_Init+0xac>)
 800167e:	4a22      	ldr	r2, [pc, #136]	@ (8001708 <MX_TIM4_Init+0xb0>)
 8001680:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <MX_TIM4_Init+0xac>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <MX_TIM4_Init+0xac>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800168e:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <MX_TIM4_Init+0xac>)
 8001690:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001694:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <MX_TIM4_Init+0xac>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <MX_TIM4_Init+0xac>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016a2:	4818      	ldr	r0, [pc, #96]	@ (8001704 <MX_TIM4_Init+0xac>)
 80016a4:	f003 fb1e 	bl	8004ce4 <HAL_TIM_PWM_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80016ae:	f7ff fd37 	bl	8001120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	4619      	mov	r1, r3
 80016c0:	4810      	ldr	r0, [pc, #64]	@ (8001704 <MX_TIM4_Init+0xac>)
 80016c2:	f004 fa33 	bl	8005b2c <HAL_TIMEx_MasterConfigSynchronization>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80016cc:	f7ff fd28 	bl	8001120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d0:	2360      	movs	r3, #96	@ 0x60
 80016d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4807      	ldr	r0, [pc, #28]	@ (8001704 <MX_TIM4_Init+0xac>)
 80016e8:	f003 fd52 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80016f2:	f7ff fd15 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016f6:	4803      	ldr	r0, [pc, #12]	@ (8001704 <MX_TIM4_Init+0xac>)
 80016f8:	f000 f8ac 	bl	8001854 <HAL_TIM_MspPostInit>

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	@ 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200002b8 	.word	0x200002b8
 8001708:	40000800 	.word	0x40000800

0800170c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08e      	sub	sp, #56	@ 0x38
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800172c:	d129      	bne.n	8001782 <HAL_TIM_PWM_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172e:	4b44      	ldr	r3, [pc, #272]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001732:	4a43      	ldr	r2, [pc, #268]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6593      	str	r3, [r2, #88]	@ 0x58
 800173a:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	623b      	str	r3, [r7, #32]
 8001744:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b3e      	ldr	r3, [pc, #248]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	4a3d      	ldr	r2, [pc, #244]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001752:	4b3b      	ldr	r3, [pc, #236]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1B_Pin|ENCODER_1A_Pin;
 800175e:	2303      	movs	r3, #3
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800176e:	2301      	movs	r3, #1
 8001770:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177c:	f001 ff3e 	bl	80035fc <HAL_GPIO_Init>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001780:	e05a      	b.n	8001838 <HAL_TIM_PWM_MspInit+0x12c>
  else if(tim_pwmHandle->Instance==TIM3)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2f      	ldr	r2, [pc, #188]	@ (8001844 <HAL_TIM_PWM_MspInit+0x138>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d144      	bne.n	8001816 <HAL_TIM_PWM_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800178c:	4b2c      	ldr	r3, [pc, #176]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001790:	4a2b      	ldr	r2, [pc, #172]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	6593      	str	r3, [r2, #88]	@ 0x58
 8001798:	4b29      	ldr	r3, [pc, #164]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a4:	4b26      	ldr	r3, [pc, #152]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 80017a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a8:	4a25      	ldr	r2, [pc, #148]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b0:	4b23      	ldr	r3, [pc, #140]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_2A_Pin;
 80017d4:	2340      	movs	r3, #64	@ 0x40
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017e4:	2302      	movs	r3, #2
 80017e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ENCODER_2A_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4816      	ldr	r0, [pc, #88]	@ (8001848 <HAL_TIM_PWM_MspInit+0x13c>)
 80017f0:	f001 ff04 	bl	80035fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_2B_Pin;
 80017f4:	2320      	movs	r3, #32
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001804:	2302      	movs	r3, #2
 8001806:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ENCODER_2B_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800180c:	4619      	mov	r1, r3
 800180e:	480f      	ldr	r0, [pc, #60]	@ (800184c <HAL_TIM_PWM_MspInit+0x140>)
 8001810:	f001 fef4 	bl	80035fc <HAL_GPIO_Init>
}
 8001814:	e010      	b.n	8001838 <HAL_TIM_PWM_MspInit+0x12c>
  else if(tim_pwmHandle->Instance==TIM4)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <HAL_TIM_PWM_MspInit+0x144>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d10b      	bne.n	8001838 <HAL_TIM_PWM_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001820:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001824:	4a06      	ldr	r2, [pc, #24]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6593      	str	r3, [r2, #88]	@ 0x58
 800182c:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <HAL_TIM_PWM_MspInit+0x134>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	bf00      	nop
 800183a:	3738      	adds	r7, #56	@ 0x38
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	40000400 	.word	0x40000400
 8001848:	48000800 	.word	0x48000800
 800184c:	48000400 	.word	0x48000400
 8001850:	40000800 	.word	0x40000800

08001854 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	@ 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001874:	d11d      	bne.n	80018b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	4b33      	ldr	r3, [pc, #204]	@ (8001944 <HAL_TIM_MspPostInit+0xf0>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187a:	4a32      	ldr	r2, [pc, #200]	@ (8001944 <HAL_TIM_MspPostInit+0xf0>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001882:	4b30      	ldr	r3, [pc, #192]	@ (8001944 <HAL_TIM_MspPostInit+0xf0>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = DRIVER_REV1_Pin|DRIVER_FWD1_Pin;
 800188e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018a0:	2301      	movs	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4827      	ldr	r0, [pc, #156]	@ (8001948 <HAL_TIM_MspPostInit+0xf4>)
 80018ac:	f001 fea6 	bl	80035fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018b0:	e044      	b.n	800193c <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM3)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a25      	ldr	r2, [pc, #148]	@ (800194c <HAL_TIM_MspPostInit+0xf8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d11c      	bne.n	80018f6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <HAL_TIM_MspPostInit+0xf0>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c0:	4a20      	ldr	r2, [pc, #128]	@ (8001944 <HAL_TIM_MspPostInit+0xf0>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <HAL_TIM_MspPostInit+0xf0>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRIVER_FWD2_Pin|DRIVER_REV2_Pin;
 80018d4:	2303      	movs	r3, #3
 80018d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e4:	2302      	movs	r3, #2
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	4816      	ldr	r0, [pc, #88]	@ (8001948 <HAL_TIM_MspPostInit+0xf4>)
 80018f0:	f001 fe84 	bl	80035fc <HAL_GPIO_Init>
}
 80018f4:	e022      	b.n	800193c <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM4)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a15      	ldr	r2, [pc, #84]	@ (8001950 <HAL_TIM_MspPostInit+0xfc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d11d      	bne.n	800193c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <HAL_TIM_MspPostInit+0xf0>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001904:	4a0f      	ldr	r2, [pc, #60]	@ (8001944 <HAL_TIM_MspPostInit+0xf0>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800190c:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <HAL_TIM_MspPostInit+0xf0>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_M_CTR_Pin;
 8001918:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800192a:	230a      	movs	r3, #10
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LIDAR_M_CTR_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001938:	f001 fe60 	bl	80035fc <HAL_GPIO_Init>
}
 800193c:	bf00      	nop
 800193e:	3728      	adds	r7, #40	@ 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40021000 	.word	0x40021000
 8001948:	48000400 	.word	0x48000400
 800194c:	40000400 	.word	0x40000400
 8001950:	40000800 	.word	0x40000800

08001954 <__NVIC_GetPriorityGrouping>:
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001958:	4b04      	ldr	r3, [pc, #16]	@ (800196c <__NVIC_GetPriorityGrouping+0x18>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	f003 0307 	and.w	r3, r3, #7
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_EnableIRQ>:
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db0b      	blt.n	800199a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4907      	ldr	r1, [pc, #28]	@ (80019a8 <__NVIC_EnableIRQ+0x38>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	2001      	movs	r0, #1
 8001992:	fa00 f202 	lsl.w	r2, r0, r2
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100

080019ac <__NVIC_SetPriority>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	@ (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	@ (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	@ 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	@ 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a74:	4907      	ldr	r1, [pc, #28]	@ (8001a94 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	40021000 	.word	0x40021000

08001a98 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001aa2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aa4:	4907      	ldr	r1, [pc, #28]	@ (8001ac4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001aae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8001b14 <LL_DMA_SetDataTransferDirection+0x4c>)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	4413      	add	r3, r2
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001aec:	f023 0310 	bic.w	r3, r3, #16
 8001af0:	4908      	ldr	r1, [pc, #32]	@ (8001b14 <LL_DMA_SetDataTransferDirection+0x4c>)
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	440a      	add	r2, r1
 8001af6:	7812      	ldrb	r2, [r2, #0]
 8001af8:	4611      	mov	r1, r2
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	440a      	add	r2, r1
 8001afe:	4611      	mov	r1, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001b06:	bf00      	nop
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	0800bd7c 	.word	0x0800bd7c

08001b18 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8001b28:	4a0d      	ldr	r2, [pc, #52]	@ (8001b60 <LL_DMA_SetMode+0x48>)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	4413      	add	r3, r2
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 0220 	bic.w	r2, r3, #32
 8001b3c:	4908      	ldr	r1, [pc, #32]	@ (8001b60 <LL_DMA_SetMode+0x48>)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	440b      	add	r3, r1
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	440b      	add	r3, r1
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001b52:	bf00      	nop
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	0800bd7c 	.word	0x0800bd7c

08001b64 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <LL_DMA_SetPeriphIncMode+0x48>)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	4413      	add	r3, r2
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001b88:	4908      	ldr	r1, [pc, #32]	@ (8001bac <LL_DMA_SetPeriphIncMode+0x48>)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	440b      	add	r3, r1
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	440b      	add	r3, r1
 8001b96:	4619      	mov	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001b9e:	bf00      	nop
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	0800bd7c 	.word	0x0800bd7c

08001bb0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <LL_DMA_SetMemoryIncMode+0x48>)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	4413      	add	r3, r2
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bd4:	4908      	ldr	r1, [pc, #32]	@ (8001bf8 <LL_DMA_SetMemoryIncMode+0x48>)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	440b      	add	r3, r1
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	440b      	add	r3, r1
 8001be2:	4619      	mov	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8001bea:	bf00      	nop
 8001bec:	371c      	adds	r7, #28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	0800bd7c 	.word	0x0800bd7c

08001bfc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <LL_DMA_SetPeriphSize+0x48>)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	4413      	add	r3, r2
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001c20:	4908      	ldr	r1, [pc, #32]	@ (8001c44 <LL_DMA_SetPeriphSize+0x48>)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	440b      	add	r3, r1
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	440b      	add	r3, r1
 8001c2e:	4619      	mov	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8001c36:	bf00      	nop
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	0800bd7c 	.word	0x0800bd7c

08001c48 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8001c58:	4a0d      	ldr	r2, [pc, #52]	@ (8001c90 <LL_DMA_SetMemorySize+0x48>)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	4413      	add	r3, r2
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001c6c:	4908      	ldr	r1, [pc, #32]	@ (8001c90 <LL_DMA_SetMemorySize+0x48>)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	440b      	add	r3, r1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	440b      	add	r3, r1
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001c82:	bf00      	nop
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	0800bd7c 	.word	0x0800bd7c

08001c94 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001cb8:	4908      	ldr	r1, [pc, #32]	@ (8001cdc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	440b      	add	r3, r1
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	440b      	add	r3, r1
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001cce:	bf00      	nop
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	0800bd7c 	.word	0x0800bd7c

08001ce0 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	0a9b      	lsrs	r3, r3, #10
 8001cf0:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8001cf4:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001d08:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001d1e:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
 8001d48:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001d4a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d4e:	f7ff fea3 	bl	8001a98 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7ff fe88 	bl	8001a68 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001d58:	2310      	movs	r3, #16
 8001d5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	463b      	mov	r3, r7
 8001d66:	4619      	mov	r1, r3
 8001d68:	4838      	ldr	r0, [pc, #224]	@ (8001e4c <MX_UCPD1_Init+0x118>)
 8001d6a:	f005 f886 	bl	8006e7a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001d6e:	2340      	movs	r3, #64	@ 0x40
 8001d70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001d72:	2303      	movs	r3, #3
 8001d74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4833      	ldr	r0, [pc, #204]	@ (8001e4c <MX_UCPD1_Init+0x118>)
 8001d80:	f005 f87b 	bl	8006e7a <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8001d84:	2272      	movs	r2, #114	@ 0x72
 8001d86:	2100      	movs	r1, #0
 8001d88:	4831      	ldr	r0, [pc, #196]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001d8a:	f7ff ffa9 	bl	8001ce0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	482f      	ldr	r0, [pc, #188]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001d94:	f7ff fe98 	bl	8001ac8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	482c      	ldr	r0, [pc, #176]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001d9e:	f7ff ff79 	bl	8001c94 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	482a      	ldr	r0, [pc, #168]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001da8:	f7ff feb6 	bl	8001b18 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2100      	movs	r1, #0
 8001db0:	4827      	ldr	r0, [pc, #156]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001db2:	f7ff fed7 	bl	8001b64 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001db6:	2280      	movs	r2, #128	@ 0x80
 8001db8:	2100      	movs	r1, #0
 8001dba:	4825      	ldr	r0, [pc, #148]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001dbc:	f7ff fef8 	bl	8001bb0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4822      	ldr	r0, [pc, #136]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001dc6:	f7ff ff19 	bl	8001bfc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4820      	ldr	r0, [pc, #128]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001dd0:	f7ff ff3a 	bl	8001c48 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8001dd4:	2273      	movs	r2, #115	@ 0x73
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	481d      	ldr	r0, [pc, #116]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001dda:	f7ff ff81 	bl	8001ce0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001dde:	2210      	movs	r2, #16
 8001de0:	2101      	movs	r1, #1
 8001de2:	481b      	ldr	r0, [pc, #108]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001de4:	f7ff fe70 	bl	8001ac8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2101      	movs	r1, #1
 8001dec:	4818      	ldr	r0, [pc, #96]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001dee:	f7ff ff51 	bl	8001c94 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2101      	movs	r1, #1
 8001df6:	4816      	ldr	r0, [pc, #88]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001df8:	f7ff fe8e 	bl	8001b18 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2101      	movs	r1, #1
 8001e00:	4813      	ldr	r0, [pc, #76]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001e02:	f7ff feaf 	bl	8001b64 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8001e06:	2280      	movs	r2, #128	@ 0x80
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4811      	ldr	r0, [pc, #68]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001e0c:	f7ff fed0 	bl	8001bb0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2101      	movs	r1, #1
 8001e14:	480e      	ldr	r0, [pc, #56]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001e16:	f7ff fef1 	bl	8001bfc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	480c      	ldr	r0, [pc, #48]	@ (8001e50 <MX_UCPD1_Init+0x11c>)
 8001e20:	f7ff ff12 	bl	8001c48 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001e24:	f7ff fd96 	bl	8001954 <__NVIC_GetPriorityGrouping>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2105      	movs	r1, #5
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fde6 	bl	8001a00 <NVIC_EncodePriority>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4619      	mov	r1, r3
 8001e38:	203f      	movs	r0, #63	@ 0x3f
 8001e3a:	f7ff fdb7 	bl	80019ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 8001e3e:	203f      	movs	r0, #63	@ 0x3f
 8001e40:	f7ff fd96 	bl	8001970 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	48000400 	.word	0x48000400
 8001e50:	40020000 	.word	0x40020000

08001e54 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e58:	4b22      	ldr	r3, [pc, #136]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e5a:	4a23      	ldr	r2, [pc, #140]	@ (8001ee8 <MX_USART1_UART_Init+0x94>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e90:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e96:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e9c:	4811      	ldr	r0, [pc, #68]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e9e:	f003 ff0d 	bl	8005cbc <HAL_UART_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ea8:	f7ff f93a 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eac:	2100      	movs	r1, #0
 8001eae:	480d      	ldr	r0, [pc, #52]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001eb0:	f004 fdce 	bl	8006a50 <HAL_UARTEx_SetTxFifoThreshold>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001eba:	f7ff f931 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4808      	ldr	r0, [pc, #32]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001ec2:	f004 fe03 	bl	8006acc <HAL_UARTEx_SetRxFifoThreshold>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ecc:	f7ff f928 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ed0:	4804      	ldr	r0, [pc, #16]	@ (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001ed2:	f004 fd84 	bl	80069de <HAL_UARTEx_DisableFifoMode>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001edc:	f7ff f920 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000304 	.word	0x20000304
 8001ee8:	40013800 	.word	0x40013800

08001eec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef0:	4b22      	ldr	r3, [pc, #136]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001ef2:	4a23      	ldr	r2, [pc, #140]	@ (8001f80 <MX_USART2_UART_Init+0x94>)
 8001ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ef6:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001ef8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001efe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001f12:	220c      	movs	r2, #12
 8001f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f16:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f1c:	4b17      	ldr	r3, [pc, #92]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f28:	4b14      	ldr	r3, [pc, #80]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f2e:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f34:	4811      	ldr	r0, [pc, #68]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001f36:	f003 fec1 	bl	8005cbc <HAL_UART_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f40:	f7ff f8ee 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f44:	2100      	movs	r1, #0
 8001f46:	480d      	ldr	r0, [pc, #52]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001f48:	f004 fd82 	bl	8006a50 <HAL_UARTEx_SetTxFifoThreshold>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f52:	f7ff f8e5 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f56:	2100      	movs	r1, #0
 8001f58:	4808      	ldr	r0, [pc, #32]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001f5a:	f004 fdb7 	bl	8006acc <HAL_UARTEx_SetRxFifoThreshold>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f64:	f7ff f8dc 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f68:	4804      	ldr	r0, [pc, #16]	@ (8001f7c <MX_USART2_UART_Init+0x90>)
 8001f6a:	f004 fd38 	bl	80069de <HAL_UARTEx_DisableFifoMode>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f74:	f7ff f8d4 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000398 	.word	0x20000398
 8001f80:	40004400 	.word	0x40004400

08001f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b09e      	sub	sp, #120	@ 0x78
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f9c:	f107 0320 	add.w	r3, r7, #32
 8001fa0:	2244      	movs	r2, #68	@ 0x44
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f008 fe83 	bl	800acb0 <memset>
  if(uartHandle->Instance==USART1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a4b      	ldr	r2, [pc, #300]	@ (80020dc <HAL_UART_MspInit+0x158>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d152      	bne.n	800205a <HAL_UART_MspInit+0xd6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f002 fbd3 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fcc:	f7ff f8a8 	bl	8001120 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fd0:	4b43      	ldr	r3, [pc, #268]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd4:	4a42      	ldr	r2, [pc, #264]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 8001fd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fda:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fdc:	4b40      	ldr	r3, [pc, #256]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 8001fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 8001fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fec:	4a3c      	ldr	r2, [pc, #240]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002000:	4b37      	ldr	r3, [pc, #220]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002004:	4a36      	ldr	r2, [pc, #216]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 8002006:	f043 0302 	orr.w	r3, r3, #2
 800200a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200c:	4b34      	ldr	r3, [pc, #208]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002018:	2310      	movs	r3, #16
 800201a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002028:	2307      	movs	r3, #7
 800202a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002030:	4619      	mov	r1, r3
 8002032:	482c      	ldr	r0, [pc, #176]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 8002034:	f001 fae2 	bl	80035fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002048:	2307      	movs	r3, #7
 800204a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800204c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002050:	4619      	mov	r1, r3
 8002052:	4825      	ldr	r0, [pc, #148]	@ (80020e8 <HAL_UART_MspInit+0x164>)
 8002054:	f001 fad2 	bl	80035fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002058:	e03b      	b.n	80020d2 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a23      	ldr	r2, [pc, #140]	@ (80020ec <HAL_UART_MspInit+0x168>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d136      	bne.n	80020d2 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002064:	2302      	movs	r3, #2
 8002066:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002068:	2300      	movs	r3, #0
 800206a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800206c:	f107 0320 	add.w	r3, r7, #32
 8002070:	4618      	mov	r0, r3
 8002072:	f002 fb7b 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 800207c:	f7ff f850 	bl	8001120 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002080:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002084:	4a16      	ldr	r2, [pc, #88]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 8002086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800208a:	6593      	str	r3, [r2, #88]	@ 0x58
 800208c:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209c:	4a10      	ldr	r2, [pc, #64]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a4:	4b0e      	ldr	r3, [pc, #56]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RXnTX_STM_Pin|LIDAR_TXnRX_STM_Pin;
 80020b0:	230c      	movs	r3, #12
 80020b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020c0:	2307      	movs	r3, #7
 80020c2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020c8:	4619      	mov	r1, r3
 80020ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ce:	f001 fa95 	bl	80035fc <HAL_GPIO_Init>
}
 80020d2:	bf00      	nop
 80020d4:	3778      	adds	r7, #120	@ 0x78
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40013800 	.word	0x40013800
 80020e0:	40021000 	.word	0x40021000
 80020e4:	48000800 	.word	0x48000800
 80020e8:	48000400 	.word	0x48000400
 80020ec:	40004400 	.word	0x40004400

080020f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020f0:	480d      	ldr	r0, [pc, #52]	@ (8002128 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f4:	f7ff f98c 	bl	8001410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f8:	480c      	ldr	r0, [pc, #48]	@ (800212c <LoopForever+0x6>)
  ldr r1, =_edata
 80020fa:	490d      	ldr	r1, [pc, #52]	@ (8002130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002134 <LoopForever+0xe>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002110:	4c0a      	ldr	r4, [pc, #40]	@ (800213c <LoopForever+0x16>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800211e:	f008 fe3b 	bl	800ad98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002122:	f7fe ff85 	bl	8001030 <main>

08002126 <LoopForever>:

LoopForever:
    b LoopForever
 8002126:	e7fe      	b.n	8002126 <LoopForever>
  ldr   r0, =_estack
 8002128:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800212c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002130:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002134:	0800bef8 	.word	0x0800bef8
  ldr r2, =_sbss
 8002138:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800213c:	20001678 	.word	0x20001678

08002140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC1_2_IRQHandler>

08002142 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f001 f848 	bl	80031e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002152:	200f      	movs	r0, #15
 8002154:	f7ff f812 	bl	800117c <HAL_InitTick>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	71fb      	strb	r3, [r7, #7]
 8002162:	e001      	b.n	8002168 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002164:	f7fe ffe2 	bl	800112c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002168:	79fb      	ldrb	r3, [r7, #7]

}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <HAL_IncTick+0x1c>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_IncTick+0x20>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4413      	add	r3, r2
 8002182:	4a03      	ldr	r2, [pc, #12]	@ (8002190 <HAL_IncTick+0x1c>)
 8002184:	6013      	str	r3, [r2, #0]
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	2000042c 	.word	0x2000042c
 8002194:	2000000c 	.word	0x2000000c

08002198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return uwTick;
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <HAL_GetTick+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	2000042c 	.word	0x2000042c

080021b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff ffee 	bl	8002198 <HAL_GetTick>
 80021bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021c8:	d004      	beq.n	80021d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ca:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <HAL_Delay+0x40>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021d4:	bf00      	nop
 80021d6:	f7ff ffdf 	bl	8002198 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d8f7      	bhi.n	80021d6 <HAL_Delay+0x26>
  {
  }
}
 80021e6:	bf00      	nop
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2000000c 	.word	0x2000000c

080021f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	609a      	str	r2, [r3, #8]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	609a      	str	r2, [r3, #8]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3360      	adds	r3, #96	@ 0x60
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <LL_ADC_SetOffset+0x44>)
 800227e:	4013      	ands	r3, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	4313      	orrs	r3, r2
 800228c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002294:	bf00      	nop
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	03fff000 	.word	0x03fff000

080022a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3360      	adds	r3, #96	@ 0x60
 80022b2:	461a      	mov	r2, r3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3360      	adds	r3, #96	@ 0x60
 80022e0:	461a      	mov	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022fa:	bf00      	nop
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002306:	b480      	push	{r7}
 8002308:	b087      	sub	sp, #28
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3360      	adds	r3, #96	@ 0x60
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	431a      	orrs	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002330:	bf00      	nop
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3360      	adds	r3, #96	@ 0x60
 800234c:	461a      	mov	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	431a      	orrs	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002366:	bf00      	nop
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	615a      	str	r2, [r3, #20]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3330      	adds	r3, #48	@ 0x30
 80023a8:	461a      	mov	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	4413      	add	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	211f      	movs	r1, #31
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	401a      	ands	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	0e9b      	lsrs	r3, r3, #26
 80023d0:	f003 011f 	and.w	r1, r3, #31
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	431a      	orrs	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023e4:	bf00      	nop
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3314      	adds	r3, #20
 8002400:	461a      	mov	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	0e5b      	lsrs	r3, r3, #25
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	4413      	add	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	0d1b      	lsrs	r3, r3, #20
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	2107      	movs	r1, #7
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	401a      	ands	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	0d1b      	lsrs	r3, r3, #20
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	431a      	orrs	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800243a:	bf00      	nop
 800243c:	371c      	adds	r7, #28
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002460:	43db      	mvns	r3, r3
 8002462:	401a      	ands	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f003 0318 	and.w	r3, r3, #24
 800246a:	4908      	ldr	r1, [pc, #32]	@ (800248c <LL_ADC_SetChannelSingleDiff+0x44>)
 800246c:	40d9      	lsrs	r1, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	400b      	ands	r3, r1
 8002472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002476:	431a      	orrs	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	0007ffff 	.word	0x0007ffff

08002490 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80024a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6093      	str	r3, [r2, #8]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024c8:	d101      	bne.n	80024ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002514:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002518:	d101      	bne.n	800251e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <LL_ADC_IsEnabled+0x18>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <LL_ADC_IsEnabled+0x1a>
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b04      	cmp	r3, #4
 8002564:	d101      	bne.n	800256a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b08      	cmp	r3, #8
 800258a:	d101      	bne.n	8002590 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b089      	sub	sp, #36	@ 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e167      	b.n	800288a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7fe f967 	bl	800089c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff67 	bl	80024b4 <LL_ADC_IsDeepPowerDownEnabled>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff4d 	bl	8002490 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ff82 	bl	8002504 <LL_ADC_IsInternalRegulatorEnabled>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d115      	bne.n	8002632 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff ff66 	bl	80024dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002610:	4ba0      	ldr	r3, [pc, #640]	@ (8002894 <HAL_ADC_Init+0x2f4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	4aa0      	ldr	r2, [pc, #640]	@ (8002898 <HAL_ADC_Init+0x2f8>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	099b      	lsrs	r3, r3, #6
 800261e:	3301      	adds	r3, #1
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002624:	e002      	b.n	800262c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3b01      	subs	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f9      	bne.n	8002626 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff64 	bl	8002504 <LL_ADC_IsInternalRegulatorEnabled>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10d      	bne.n	800265e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff75 	bl	8002552 <LL_ADC_REG_IsConversionOngoing>
 8002668:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 8100 	bne.w	8002878 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 80fc 	bne.w	8002878 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002684:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002688:	f043 0202 	orr.w	r2, r3, #2
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff49 	bl	800252c <LL_ADC_IsEnabled>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d111      	bne.n	80026c4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80026a4:	f7ff ff42 	bl	800252c <LL_ADC_IsEnabled>
 80026a8:	4604      	mov	r4, r0
 80026aa:	487c      	ldr	r0, [pc, #496]	@ (800289c <HAL_ADC_Init+0x2fc>)
 80026ac:	f7ff ff3e 	bl	800252c <LL_ADC_IsEnabled>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4323      	orrs	r3, r4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4619      	mov	r1, r3
 80026be:	4878      	ldr	r0, [pc, #480]	@ (80028a0 <HAL_ADC_Init+0x300>)
 80026c0:	f7ff fd98 	bl	80021f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7f5b      	ldrb	r3, [r3, #29]
 80026c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d106      	bne.n	8002700 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	3b01      	subs	r3, #1
 80026f8:	045b      	lsls	r3, r3, #17
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	4b60      	ldr	r3, [pc, #384]	@ (80028a4 <HAL_ADC_Init+0x304>)
 8002724:	4013      	ands	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	69b9      	ldr	r1, [r7, #24]
 800272c:	430b      	orrs	r3, r1
 800272e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ff14 	bl	8002578 <LL_ADC_INJ_IsConversionOngoing>
 8002750:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d16d      	bne.n	8002834 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d16a      	bne.n	8002834 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002762:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800276a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800277a:	f023 0302 	bic.w	r3, r3, #2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	430b      	orrs	r3, r1
 8002786:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d017      	beq.n	80027c0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800279e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027a8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6911      	ldr	r1, [r2, #16]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80027be:	e013      	b.n	80027e8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80027ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027e4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d118      	bne.n	8002824 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027fc:	f023 0304 	bic.w	r3, r3, #4
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002808:	4311      	orrs	r1, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800280e:	4311      	orrs	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002814:	430a      	orrs	r2, r1
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	611a      	str	r2, [r3, #16]
 8002822:	e007      	b.n	8002834 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10c      	bne.n	8002856 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f023 010f 	bic.w	r1, r3, #15
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	1e5a      	subs	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30
 8002854:	e007      	b.n	8002866 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 020f 	bic.w	r2, r2, #15
 8002864:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286a:	f023 0303 	bic.w	r3, r3, #3
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002876:	e007      	b.n	8002888 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287c:	f043 0210 	orr.w	r2, r3, #16
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002888:	7ffb      	ldrb	r3, [r7, #31]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3724      	adds	r7, #36	@ 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}
 8002892:	bf00      	nop
 8002894:	20000004 	.word	0x20000004
 8002898:	053e2d63 	.word	0x053e2d63
 800289c:	50000100 	.word	0x50000100
 80028a0:	50000300 	.word	0x50000300
 80028a4:	fff04007 	.word	0xfff04007

080028a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b0b6      	sub	sp, #216	@ 0xd8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x22>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e3c8      	b.n	800305c <HAL_ADC_ConfigChannel+0x7b4>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fe3b 	bl	8002552 <LL_ADC_REG_IsConversionOngoing>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 83ad 	bne.w	800303e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	f7ff fd51 	bl	8002398 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fe29 	bl	8002552 <LL_ADC_REG_IsConversionOngoing>
 8002900:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fe35 	bl	8002578 <LL_ADC_INJ_IsConversionOngoing>
 800290e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002912:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 81d9 	bne.w	8002cce <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800291c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002920:	2b00      	cmp	r3, #0
 8002922:	f040 81d4 	bne.w	8002cce <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800292e:	d10f      	bne.n	8002950 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2200      	movs	r2, #0
 800293a:	4619      	mov	r1, r3
 800293c:	f7ff fd58 	bl	80023f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fd12 	bl	8002372 <LL_ADC_SetSamplingTimeCommonConfig>
 800294e:	e00e      	b.n	800296e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	6819      	ldr	r1, [r3, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	461a      	mov	r2, r3
 800295e:	f7ff fd47 	bl	80023f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fd02 	bl	8002372 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	08db      	lsrs	r3, r3, #3
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d022      	beq.n	80029d6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6919      	ldr	r1, [r3, #16]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80029a0:	f7ff fc5c 	bl	800225c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6919      	ldr	r1, [r3, #16]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f7ff fca8 	bl	8002306 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d102      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x124>
 80029c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029ca:	e000      	b.n	80029ce <HAL_ADC_ConfigChannel+0x126>
 80029cc:	2300      	movs	r3, #0
 80029ce:	461a      	mov	r2, r3
 80029d0:	f7ff fcb4 	bl	800233c <LL_ADC_SetOffsetSaturation>
 80029d4:	e17b      	b.n	8002cce <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fc61 	bl	80022a4 <LL_ADC_GetOffsetChannel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x15a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fc56 	bl	80022a4 <LL_ADC_GetOffsetChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	e01e      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x198>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fc4b 	bl	80022a4 <LL_ADC_GetOffsetChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002a30:	2320      	movs	r3, #32
 8002a32:	e004      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002a34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x1b0>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0e9b      	lsrs	r3, r3, #26
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	e018      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x1e2>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002a6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002a74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	e004      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002a80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d106      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fc1a 	bl	80022d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fbfe 	bl	80022a4 <LL_ADC_GetOffsetChannel>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x220>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fbf3 	bl	80022a4 <LL_ADC_GetOffsetChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	f003 021f 	and.w	r2, r3, #31
 8002ac6:	e01e      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x25e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2101      	movs	r1, #1
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fbe8 	bl	80022a4 <LL_ADC_GetOffsetChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002aea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002aee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002af6:	2320      	movs	r3, #32
 8002af8:	e004      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002afa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d105      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x276>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0e9b      	lsrs	r3, r3, #26
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	e018      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x2a8>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002b32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002b3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002b42:	2320      	movs	r3, #32
 8002b44:	e004      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002b46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d106      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fbb7 	bl	80022d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2102      	movs	r1, #2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fb9b 	bl	80022a4 <LL_ADC_GetOffsetChannel>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x2e6>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fb90 	bl	80022a4 <LL_ADC_GetOffsetChannel>
 8002b84:	4603      	mov	r3, r0
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	e01e      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x324>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2102      	movs	r1, #2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fb85 	bl	80022a4 <LL_ADC_GetOffsetChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002bb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	e004      	b.n	8002bca <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002bc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x33c>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	e016      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x36a>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002bf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002c04:	2320      	movs	r3, #32
 8002c06:	e004      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d106      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fb56 	bl	80022d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2103      	movs	r1, #3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fb3a 	bl	80022a4 <LL_ADC_GetOffsetChannel>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x3a8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2103      	movs	r1, #3
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fb2f 	bl	80022a4 <LL_ADC_GetOffsetChannel>
 8002c46:	4603      	mov	r3, r0
 8002c48:	0e9b      	lsrs	r3, r3, #26
 8002c4a:	f003 021f 	and.w	r2, r3, #31
 8002c4e:	e017      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x3d8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2103      	movs	r1, #3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fb24 	bl	80022a4 <LL_ADC_GetOffsetChannel>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002c6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002c72:	2320      	movs	r3, #32
 8002c74:	e003      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002c76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x3f0>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0e9b      	lsrs	r3, r3, #26
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	e011      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x414>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002ca6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ca8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	e003      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002cb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d106      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2103      	movs	r1, #3
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fb01 	bl	80022d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fc2a 	bl	800252c <LL_ADC_IsEnabled>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f040 8140 	bne.w	8002f60 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6819      	ldr	r1, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	461a      	mov	r2, r3
 8002cee:	f7ff fbab 	bl	8002448 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	4a8f      	ldr	r2, [pc, #572]	@ (8002f34 <HAL_ADC_ConfigChannel+0x68c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	f040 8131 	bne.w	8002f60 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10b      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x47e>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	0e9b      	lsrs	r3, r3, #26
 8002d14:	3301      	adds	r3, #1
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	2b09      	cmp	r3, #9
 8002d1c:	bf94      	ite	ls
 8002d1e:	2301      	movls	r3, #1
 8002d20:	2300      	movhi	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	e019      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x4b2>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002d34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d36:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002d38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002d3e:	2320      	movs	r3, #32
 8002d40:	e003      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002d42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	2b09      	cmp	r3, #9
 8002d52:	bf94      	ite	ls
 8002d54:	2301      	movls	r3, #1
 8002d56:	2300      	movhi	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d079      	beq.n	8002e52 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d107      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x4d2>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0e9b      	lsrs	r3, r3, #26
 8002d70:	3301      	adds	r3, #1
 8002d72:	069b      	lsls	r3, r3, #26
 8002d74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d78:	e015      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x4fe>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d8a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002d92:	2320      	movs	r3, #32
 8002d94:	e003      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	069b      	lsls	r3, r3, #26
 8002da2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x51e>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	0e9b      	lsrs	r3, r3, #26
 8002db8:	3301      	adds	r3, #1
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	e017      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x54e>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002dde:	2320      	movs	r3, #32
 8002de0:	e003      	b.n	8002dea <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	3301      	adds	r3, #1
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2101      	movs	r1, #1
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	ea42 0103 	orr.w	r1, r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10a      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x574>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	0e9b      	lsrs	r3, r3, #26
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f003 021f 	and.w	r2, r3, #31
 8002e12:	4613      	mov	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	051b      	lsls	r3, r3, #20
 8002e1a:	e018      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x5a6>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002e34:	2320      	movs	r3, #32
 8002e36:	e003      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	3301      	adds	r3, #1
 8002e42:	f003 021f 	and.w	r2, r3, #31
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	e081      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d107      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x5c6>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	0e9b      	lsrs	r3, r3, #26
 8002e64:	3301      	adds	r3, #1
 8002e66:	069b      	lsls	r3, r3, #26
 8002e68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e6c:	e015      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x5f2>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002e86:	2320      	movs	r3, #32
 8002e88:	e003      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8c:	fab3 f383 	clz	r3, r3
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	069b      	lsls	r3, r3, #26
 8002e96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x612>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	0e9b      	lsrs	r3, r3, #26
 8002eac:	3301      	adds	r3, #1
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	e017      	b.n	8002eea <HAL_ADC_ConfigChannel+0x642>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	61fb      	str	r3, [r7, #28]
  return result;
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	e003      	b.n	8002ede <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	ea42 0103 	orr.w	r1, r2, r3
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10d      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x66e>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	0e9b      	lsrs	r3, r3, #26
 8002f00:	3301      	adds	r3, #1
 8002f02:	f003 021f 	and.w	r2, r3, #31
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3b1e      	subs	r3, #30
 8002f0e:	051b      	lsls	r3, r3, #20
 8002f10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f14:	e01e      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x6ac>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	613b      	str	r3, [r7, #16]
  return result;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002f2e:	2320      	movs	r3, #32
 8002f30:	e006      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x698>
 8002f32:	bf00      	nop
 8002f34:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	f003 021f 	and.w	r2, r3, #31
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3b1e      	subs	r3, #30
 8002f4e:	051b      	lsls	r3, r3, #20
 8002f50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f54:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f7ff fa48 	bl	80023f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b3f      	ldr	r3, [pc, #252]	@ (8003064 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d071      	beq.n	8003050 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f6c:	483e      	ldr	r0, [pc, #248]	@ (8003068 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f6e:	f7ff f967 	bl	8002240 <LL_ADC_GetCommonPathInternalCh>
 8002f72:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a3c      	ldr	r2, [pc, #240]	@ (800306c <HAL_ADC_ConfigChannel+0x7c4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d004      	beq.n	8002f8a <HAL_ADC_ConfigChannel+0x6e2>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a3a      	ldr	r2, [pc, #232]	@ (8003070 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d127      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d121      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f9e:	d157      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fa4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fa8:	4619      	mov	r1, r3
 8002faa:	482f      	ldr	r0, [pc, #188]	@ (8003068 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fac:	f7ff f935 	bl	800221a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fb0:	4b30      	ldr	r3, [pc, #192]	@ (8003074 <HAL_ADC_ConfigChannel+0x7cc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	4a30      	ldr	r2, [pc, #192]	@ (8003078 <HAL_ADC_ConfigChannel+0x7d0>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fca:	e002      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f9      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fd8:	e03a      	b.n	8003050 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a27      	ldr	r2, [pc, #156]	@ (800307c <HAL_ADC_ConfigChannel+0x7d4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d113      	bne.n	800300c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fe8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10d      	bne.n	800300c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a22      	ldr	r2, [pc, #136]	@ (8003080 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d02a      	beq.n	8003050 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ffe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003002:	4619      	mov	r1, r3
 8003004:	4818      	ldr	r0, [pc, #96]	@ (8003068 <HAL_ADC_ConfigChannel+0x7c0>)
 8003006:	f7ff f908 	bl	800221a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800300a:	e021      	b.n	8003050 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1c      	ldr	r2, [pc, #112]	@ (8003084 <HAL_ADC_ConfigChannel+0x7dc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d11c      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800301a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d116      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a16      	ldr	r2, [pc, #88]	@ (8003080 <HAL_ADC_ConfigChannel+0x7d8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d011      	beq.n	8003050 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800302c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003030:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003034:	4619      	mov	r1, r3
 8003036:	480c      	ldr	r0, [pc, #48]	@ (8003068 <HAL_ADC_ConfigChannel+0x7c0>)
 8003038:	f7ff f8ef 	bl	800221a <LL_ADC_SetCommonPathInternalCh>
 800303c:	e008      	b.n	8003050 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003042:	f043 0220 	orr.w	r2, r3, #32
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003058:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800305c:	4618      	mov	r0, r3
 800305e:	37d8      	adds	r7, #216	@ 0xd8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	80080000 	.word	0x80080000
 8003068:	50000300 	.word	0x50000300
 800306c:	c3210000 	.word	0xc3210000
 8003070:	90c00010 	.word	0x90c00010
 8003074:	20000004 	.word	0x20000004
 8003078:	053e2d63 	.word	0x053e2d63
 800307c:	c7520000 	.word	0xc7520000
 8003080:	50000100 	.word	0x50000100
 8003084:	cb840000 	.word	0xcb840000

08003088 <__NVIC_SetPriorityGrouping>:
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003098:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030a4:	4013      	ands	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ba:	4a04      	ldr	r2, [pc, #16]	@ (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	60d3      	str	r3, [r2, #12]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_GetPriorityGrouping>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d4:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <__NVIC_GetPriorityGrouping+0x18>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	f003 0307 	and.w	r3, r3, #7
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_EnableIRQ>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	db0b      	blt.n	8003116 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4907      	ldr	r1, [pc, #28]	@ (8003124 <__NVIC_EnableIRQ+0x38>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	2001      	movs	r0, #1
 800310e:	fa00 f202 	lsl.w	r2, r0, r2
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000e100 	.word	0xe000e100

08003128 <__NVIC_SetPriority>:
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003138:	2b00      	cmp	r3, #0
 800313a:	db0a      	blt.n	8003152 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	490c      	ldr	r1, [pc, #48]	@ (8003174 <__NVIC_SetPriority+0x4c>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	440b      	add	r3, r1
 800314c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003150:	e00a      	b.n	8003168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4908      	ldr	r1, [pc, #32]	@ (8003178 <__NVIC_SetPriority+0x50>)
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	3b04      	subs	r3, #4
 8003160:	0112      	lsls	r2, r2, #4
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	440b      	add	r3, r1
 8003166:	761a      	strb	r2, [r3, #24]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000e100 	.word	0xe000e100
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <NVIC_EncodePriority>:
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	@ 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f1c3 0307 	rsb	r3, r3, #7
 8003196:	2b04      	cmp	r3, #4
 8003198:	bf28      	it	cs
 800319a:	2304      	movcs	r3, #4
 800319c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d902      	bls.n	80031ac <NVIC_EncodePriority+0x30>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3b03      	subs	r3, #3
 80031aa:	e000      	b.n	80031ae <NVIC_EncodePriority+0x32>
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	401a      	ands	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	43d9      	mvns	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	4313      	orrs	r3, r2
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ff4c 	bl	8003088 <__NVIC_SetPriorityGrouping>
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003206:	f7ff ff63 	bl	80030d0 <__NVIC_GetPriorityGrouping>
 800320a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	6978      	ldr	r0, [r7, #20]
 8003212:	f7ff ffb3 	bl	800317c <NVIC_EncodePriority>
 8003216:	4602      	mov	r2, r0
 8003218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ff82 	bl	8003128 <__NVIC_SetPriority>
}
 8003224:	bf00      	nop
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff ff56 	bl	80030ec <__NVIC_EnableIRQ>
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e014      	b.n	8003284 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	791b      	ldrb	r3, [r3, #4]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fc1c 	bl	8000aa8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	@ 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_DAC_ConfigChannel+0x1c>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e19e      	b.n	80035ea <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	795b      	ldrb	r3, [r3, #5]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_DAC_ConfigChannel+0x2c>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e198      	b.n	80035ea <HAL_DAC_ConfigChannel+0x35e>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2202      	movs	r2, #2
 80032c2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d17a      	bne.n	80033c2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80032cc:	f7fe ff64 	bl	8002198 <HAL_GetTick>
 80032d0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d13d      	bne.n	8003354 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032d8:	e018      	b.n	800330c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032da:	f7fe ff5d 	bl	8002198 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d911      	bls.n	800330c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f043 0208 	orr.w	r2, r3, #8
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2203      	movs	r2, #3
 8003306:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e16e      	b.n	80035ea <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003312:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1df      	bne.n	80032da <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003322:	641a      	str	r2, [r3, #64]	@ 0x40
 8003324:	e020      	b.n	8003368 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003326:	f7fe ff37 	bl	8002198 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d90f      	bls.n	8003354 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333a:	2b00      	cmp	r3, #0
 800333c:	da0a      	bge.n	8003354 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f043 0208 	orr.w	r2, r3, #8
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2203      	movs	r2, #3
 800334e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e14a      	b.n	80035ea <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335a:	2b00      	cmp	r3, #0
 800335c:	dbe3      	blt.n	8003326 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003366:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003378:	fa01 f303 	lsl.w	r3, r1, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	ea02 0103 	and.w	r1, r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	409a      	lsls	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	21ff      	movs	r1, #255	@ 0xff
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	ea02 0103 	and.w	r1, r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	409a      	lsls	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d11d      	bne.n	8003406 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	221f      	movs	r2, #31
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e2:	4013      	ands	r3, r2
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033fa:	4313      	orrs	r3, r2
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003404:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2207      	movs	r2, #7
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800341e:	4013      	ands	r3, r2
 8003420:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d102      	bne.n	8003430 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800342a:	2300      	movs	r3, #0
 800342c:	623b      	str	r3, [r7, #32]
 800342e:	e00f      	b.n	8003450 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d102      	bne.n	800343e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003438:	2301      	movs	r3, #1
 800343a:	623b      	str	r3, [r7, #32]
 800343c:	e008      	b.n	8003450 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003446:	2301      	movs	r3, #1
 8003448:	623b      	str	r3, [r7, #32]
 800344a:	e001      	b.n	8003450 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800344c:	2300      	movs	r3, #0
 800344e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	6a3a      	ldr	r2, [r7, #32]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003472:	4013      	ands	r3, r2
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	791b      	ldrb	r3, [r3, #4]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d102      	bne.n	8003484 <HAL_DAC_ConfigChannel+0x1f8>
 800347e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003482:	e000      	b.n	8003486 <HAL_DAC_ConfigChannel+0x1fa>
 8003484:	2300      	movs	r3, #0
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349e:	4013      	ands	r3, r2
 80034a0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	795b      	ldrb	r3, [r3, #5]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <HAL_DAC_ConfigChannel+0x224>
 80034aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034ae:	e000      	b.n	80034b2 <HAL_DAC_ConfigChannel+0x226>
 80034b0:	2300      	movs	r3, #0
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80034b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ba:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d114      	bne.n	80034f2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80034c8:	f001 f8a0 	bl	800460c <HAL_RCC_GetHCLKFreq>
 80034cc:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4a48      	ldr	r2, [pc, #288]	@ (80035f4 <HAL_DAC_ConfigChannel+0x368>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d904      	bls.n	80034e0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034de:	e00f      	b.n	8003500 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4a45      	ldr	r2, [pc, #276]	@ (80035f8 <HAL_DAC_ConfigChannel+0x36c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d90a      	bls.n	80034fe <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f0:	e006      	b.n	8003500 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f8:	4313      	orrs	r3, r2
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80034fc:	e000      	b.n	8003500 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80034fe:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800350e:	4313      	orrs	r3, r2
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003518:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6819      	ldr	r1, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43da      	mvns	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	400a      	ands	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003552:	4013      	ands	r3, r2
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800356a:	4313      	orrs	r3, r2
 800356c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003574:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6819      	ldr	r1, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	22c0      	movs	r2, #192	@ 0xc0
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43da      	mvns	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	400a      	ands	r2, r1
 8003590:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	089b      	lsrs	r3, r3, #2
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	089b      	lsrs	r3, r3, #2
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80035c0:	fa01 f303 	lsl.w	r3, r1, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	ea02 0103 	and.w	r1, r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	409a      	lsls	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80035e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3728      	adds	r7, #40	@ 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	09896800 	.word	0x09896800
 80035f8:	04c4b400 	.word	0x04c4b400

080035fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800360a:	e15a      	b.n	80038c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	2101      	movs	r1, #1
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	4013      	ands	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 814c 	beq.w	80038bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b01      	cmp	r3, #1
 800362e:	d005      	beq.n	800363c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003638:	2b02      	cmp	r3, #2
 800363a:	d130      	bne.n	800369e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	2203      	movs	r2, #3
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003672:	2201      	movs	r2, #1
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f003 0201 	and.w	r2, r3, #1
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d017      	beq.n	80036da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	2203      	movs	r2, #3
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d123      	bne.n	800372e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	08da      	lsrs	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3208      	adds	r2, #8
 80036ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	220f      	movs	r2, #15
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	08da      	lsrs	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3208      	adds	r2, #8
 8003728:	6939      	ldr	r1, [r7, #16]
 800372a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	2203      	movs	r2, #3
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0203 	and.w	r2, r3, #3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 80a6 	beq.w	80038bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003770:	4b5b      	ldr	r3, [pc, #364]	@ (80038e0 <HAL_GPIO_Init+0x2e4>)
 8003772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003774:	4a5a      	ldr	r2, [pc, #360]	@ (80038e0 <HAL_GPIO_Init+0x2e4>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6613      	str	r3, [r2, #96]	@ 0x60
 800377c:	4b58      	ldr	r3, [pc, #352]	@ (80038e0 <HAL_GPIO_Init+0x2e4>)
 800377e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003788:	4a56      	ldr	r2, [pc, #344]	@ (80038e4 <HAL_GPIO_Init+0x2e8>)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	089b      	lsrs	r3, r3, #2
 800378e:	3302      	adds	r3, #2
 8003790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003794:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	220f      	movs	r2, #15
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4013      	ands	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80037b2:	d01f      	beq.n	80037f4 <HAL_GPIO_Init+0x1f8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a4c      	ldr	r2, [pc, #304]	@ (80038e8 <HAL_GPIO_Init+0x2ec>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d019      	beq.n	80037f0 <HAL_GPIO_Init+0x1f4>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a4b      	ldr	r2, [pc, #300]	@ (80038ec <HAL_GPIO_Init+0x2f0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d013      	beq.n	80037ec <HAL_GPIO_Init+0x1f0>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a4a      	ldr	r2, [pc, #296]	@ (80038f0 <HAL_GPIO_Init+0x2f4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00d      	beq.n	80037e8 <HAL_GPIO_Init+0x1ec>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a49      	ldr	r2, [pc, #292]	@ (80038f4 <HAL_GPIO_Init+0x2f8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d007      	beq.n	80037e4 <HAL_GPIO_Init+0x1e8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a48      	ldr	r2, [pc, #288]	@ (80038f8 <HAL_GPIO_Init+0x2fc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d101      	bne.n	80037e0 <HAL_GPIO_Init+0x1e4>
 80037dc:	2305      	movs	r3, #5
 80037de:	e00a      	b.n	80037f6 <HAL_GPIO_Init+0x1fa>
 80037e0:	2306      	movs	r3, #6
 80037e2:	e008      	b.n	80037f6 <HAL_GPIO_Init+0x1fa>
 80037e4:	2304      	movs	r3, #4
 80037e6:	e006      	b.n	80037f6 <HAL_GPIO_Init+0x1fa>
 80037e8:	2303      	movs	r3, #3
 80037ea:	e004      	b.n	80037f6 <HAL_GPIO_Init+0x1fa>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e002      	b.n	80037f6 <HAL_GPIO_Init+0x1fa>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_GPIO_Init+0x1fa>
 80037f4:	2300      	movs	r3, #0
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	f002 0203 	and.w	r2, r2, #3
 80037fc:	0092      	lsls	r2, r2, #2
 80037fe:	4093      	lsls	r3, r2
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003806:	4937      	ldr	r1, [pc, #220]	@ (80038e4 <HAL_GPIO_Init+0x2e8>)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	3302      	adds	r3, #2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003814:	4b39      	ldr	r3, [pc, #228]	@ (80038fc <HAL_GPIO_Init+0x300>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	43db      	mvns	r3, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003838:	4a30      	ldr	r2, [pc, #192]	@ (80038fc <HAL_GPIO_Init+0x300>)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800383e:	4b2f      	ldr	r3, [pc, #188]	@ (80038fc <HAL_GPIO_Init+0x300>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	43db      	mvns	r3, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003862:	4a26      	ldr	r2, [pc, #152]	@ (80038fc <HAL_GPIO_Init+0x300>)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003868:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <HAL_GPIO_Init+0x300>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	43db      	mvns	r3, r3
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4013      	ands	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800388c:	4a1b      	ldr	r2, [pc, #108]	@ (80038fc <HAL_GPIO_Init+0x300>)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003892:	4b1a      	ldr	r3, [pc, #104]	@ (80038fc <HAL_GPIO_Init+0x300>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	43db      	mvns	r3, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038b6:	4a11      	ldr	r2, [pc, #68]	@ (80038fc <HAL_GPIO_Init+0x300>)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3301      	adds	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f47f ae9d 	bne.w	800360c <HAL_GPIO_Init+0x10>
  }
}
 80038d2:	bf00      	nop
 80038d4:	bf00      	nop
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40010000 	.word	0x40010000
 80038e8:	48000400 	.word	0x48000400
 80038ec:	48000800 	.word	0x48000800
 80038f0:	48000c00 	.word	0x48000c00
 80038f4:	48001000 	.word	0x48001000
 80038f8:	48001400 	.word	0x48001400
 80038fc:	40010400 	.word	0x40010400

08003900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e08d      	b.n	8003a2e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd faaa 	bl	8000e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	@ 0x24
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003950:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003960:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d107      	bne.n	800397a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	e006      	b.n	8003988 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003986:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d108      	bne.n	80039a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	e007      	b.n	80039b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69d9      	ldr	r1, [r3, #28]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1a      	ldr	r2, [r3, #32]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d138      	bne.n	8003abe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e032      	b.n	8003ac0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2224      	movs	r2, #36	@ 0x24
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a88:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6819      	ldr	r1, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0201 	orr.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e000      	b.n	8003ac0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003abe:	2302      	movs	r3, #2
  }
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d139      	bne.n	8003b56 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e033      	b.n	8003b58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	@ 0x24
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
  }
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d141      	bne.n	8003bf6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b72:	4b4b      	ldr	r3, [pc, #300]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7e:	d131      	bne.n	8003be4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b80:	4b47      	ldr	r3, [pc, #284]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b86:	4a46      	ldr	r2, [pc, #280]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b90:	4b43      	ldr	r3, [pc, #268]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b98:	4a41      	ldr	r2, [pc, #260]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ba0:	4b40      	ldr	r3, [pc, #256]	@ (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2232      	movs	r2, #50	@ 0x32
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	4a3f      	ldr	r2, [pc, #252]	@ (8003ca8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	0c9b      	lsrs	r3, r3, #18
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bb6:	e002      	b.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bbe:	4b38      	ldr	r3, [pc, #224]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bca:	d102      	bne.n	8003bd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f2      	bne.n	8003bb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bd2:	4b33      	ldr	r3, [pc, #204]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bde:	d158      	bne.n	8003c92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e057      	b.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003be4:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bea:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003bf4:	e04d      	b.n	8003c92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bfc:	d141      	bne.n	8003c82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bfe:	4b28      	ldr	r3, [pc, #160]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c0a:	d131      	bne.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c0c:	4b24      	ldr	r3, [pc, #144]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c12:	4a23      	ldr	r2, [pc, #140]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c24:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2232      	movs	r2, #50	@ 0x32
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	4a1c      	ldr	r2, [pc, #112]	@ (8003ca8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	0c9b      	lsrs	r3, r3, #18
 8003c3e:	3301      	adds	r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c42:	e002      	b.n	8003c4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c56:	d102      	bne.n	8003c5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f2      	bne.n	8003c44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c6a:	d112      	bne.n	8003c92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e011      	b.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c80:	e007      	b.n	8003c92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c82:	4b07      	ldr	r3, [pc, #28]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	20000004 	.word	0x20000004
 8003ca8:	431bde83 	.word	0x431bde83

08003cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e2fe      	b.n	80042bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d075      	beq.n	8003db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cca:	4b97      	ldr	r3, [pc, #604]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd4:	4b94      	ldr	r3, [pc, #592]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b0c      	cmp	r3, #12
 8003ce2:	d102      	bne.n	8003cea <HAL_RCC_OscConfig+0x3e>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d002      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x44>
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d10b      	bne.n	8003d08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf0:	4b8d      	ldr	r3, [pc, #564]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d05b      	beq.n	8003db4 <HAL_RCC_OscConfig+0x108>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d157      	bne.n	8003db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e2d9      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d10:	d106      	bne.n	8003d20 <HAL_RCC_OscConfig+0x74>
 8003d12:	4b85      	ldr	r3, [pc, #532]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a84      	ldr	r2, [pc, #528]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e01d      	b.n	8003d5c <HAL_RCC_OscConfig+0xb0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x98>
 8003d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b7c      	ldr	r3, [pc, #496]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a7b      	ldr	r2, [pc, #492]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e00b      	b.n	8003d5c <HAL_RCC_OscConfig+0xb0>
 8003d44:	4b78      	ldr	r3, [pc, #480]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a77      	ldr	r2, [pc, #476]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	4b75      	ldr	r3, [pc, #468]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a74      	ldr	r2, [pc, #464]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d013      	beq.n	8003d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fe fa18 	bl	8002198 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fe fa14 	bl	8002198 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	@ 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e29e      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0xc0>
 8003d8a:	e014      	b.n	8003db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fe fa04 	bl	8002198 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d94:	f7fe fa00 	bl	8002198 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b64      	cmp	r3, #100	@ 0x64
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e28a      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003da6:	4b60      	ldr	r3, [pc, #384]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0xe8>
 8003db2:	e000      	b.n	8003db6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d075      	beq.n	8003eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc2:	4b59      	ldr	r3, [pc, #356]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dcc:	4b56      	ldr	r3, [pc, #344]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	d102      	bne.n	8003de2 <HAL_RCC_OscConfig+0x136>
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d002      	beq.n	8003de8 <HAL_RCC_OscConfig+0x13c>
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d11f      	bne.n	8003e28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003de8:	4b4f      	ldr	r3, [pc, #316]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_RCC_OscConfig+0x154>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e25d      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e00:	4b49      	ldr	r3, [pc, #292]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	061b      	lsls	r3, r3, #24
 8003e0e:	4946      	ldr	r1, [pc, #280]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e14:	4b45      	ldr	r3, [pc, #276]	@ (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fd f9af 	bl	800117c <HAL_InitTick>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d043      	beq.n	8003eac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e249      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d023      	beq.n	8003e78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e30:	4b3d      	ldr	r3, [pc, #244]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a3c      	ldr	r2, [pc, #240]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fe f9ac 	bl	8002198 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e44:	f7fe f9a8 	bl	8002198 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e232      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e56:	4b34      	ldr	r3, [pc, #208]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e62:	4b31      	ldr	r3, [pc, #196]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	061b      	lsls	r3, r3, #24
 8003e70:	492d      	ldr	r1, [pc, #180]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
 8003e76:	e01a      	b.n	8003eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e78:	4b2b      	ldr	r3, [pc, #172]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fe f988 	bl	8002198 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8c:	f7fe f984 	bl	8002198 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e20e      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e9e:	4b22      	ldr	r3, [pc, #136]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x1e0>
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d041      	beq.n	8003f3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01c      	beq.n	8003efc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec2:	4b19      	ldr	r3, [pc, #100]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ec8:	4a17      	ldr	r2, [pc, #92]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fe f961 	bl	8002198 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eda:	f7fe f95d 	bl	8002198 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e1e7      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eec:	4b0e      	ldr	r3, [pc, #56]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ef      	beq.n	8003eda <HAL_RCC_OscConfig+0x22e>
 8003efa:	e020      	b.n	8003f3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efc:	4b0a      	ldr	r3, [pc, #40]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f02:	4a09      	ldr	r2, [pc, #36]	@ (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fe f944 	bl	8002198 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f12:	e00d      	b.n	8003f30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f14:	f7fe f940 	bl	8002198 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d906      	bls.n	8003f30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e1ca      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
 8003f26:	bf00      	nop
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f30:	4b8c      	ldr	r3, [pc, #560]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ea      	bne.n	8003f14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80a6 	beq.w	8004098 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f50:	4b84      	ldr	r3, [pc, #528]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_OscConfig+0x2b4>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x2b6>
 8003f60:	2300      	movs	r3, #0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f66:	4b7f      	ldr	r3, [pc, #508]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f70:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f72:	4b7c      	ldr	r3, [pc, #496]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f82:	4b79      	ldr	r3, [pc, #484]	@ (8004168 <HAL_RCC_OscConfig+0x4bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d118      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f8e:	4b76      	ldr	r3, [pc, #472]	@ (8004168 <HAL_RCC_OscConfig+0x4bc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a75      	ldr	r2, [pc, #468]	@ (8004168 <HAL_RCC_OscConfig+0x4bc>)
 8003f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9a:	f7fe f8fd 	bl	8002198 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa2:	f7fe f8f9 	bl	8002198 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e183      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8004168 <HAL_RCC_OscConfig+0x4bc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d108      	bne.n	8003fda <HAL_RCC_OscConfig+0x32e>
 8003fc8:	4b66      	ldr	r3, [pc, #408]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fce:	4a65      	ldr	r2, [pc, #404]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fd8:	e024      	b.n	8004024 <HAL_RCC_OscConfig+0x378>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d110      	bne.n	8004004 <HAL_RCC_OscConfig+0x358>
 8003fe2:	4b60      	ldr	r3, [pc, #384]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe8:	4a5e      	ldr	r2, [pc, #376]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003fea:	f043 0304 	orr.w	r3, r3, #4
 8003fee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff8:	4a5a      	ldr	r2, [pc, #360]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004002:	e00f      	b.n	8004024 <HAL_RCC_OscConfig+0x378>
 8004004:	4b57      	ldr	r3, [pc, #348]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400a:	4a56      	ldr	r2, [pc, #344]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004014:	4b53      	ldr	r3, [pc, #332]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401a:	4a52      	ldr	r2, [pc, #328]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d016      	beq.n	800405a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fe f8b4 	bl	8002198 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004032:	e00a      	b.n	800404a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004034:	f7fe f8b0 	bl	8002198 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e138      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404a:	4b46      	ldr	r3, [pc, #280]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0ed      	beq.n	8004034 <HAL_RCC_OscConfig+0x388>
 8004058:	e015      	b.n	8004086 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fe f89d 	bl	8002198 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004060:	e00a      	b.n	8004078 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004062:	f7fe f899 	bl	8002198 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e121      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004078:	4b3a      	ldr	r3, [pc, #232]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1ed      	bne.n	8004062 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004086:	7ffb      	ldrb	r3, [r7, #31]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408c:	4b35      	ldr	r3, [pc, #212]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004090:	4a34      	ldr	r2, [pc, #208]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004096:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d03c      	beq.n	800411e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01c      	beq.n	80040e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fe f86c 	bl	8002198 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040c4:	f7fe f868 	bl	8002198 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e0f2      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040d6:	4b23      	ldr	r3, [pc, #140]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ef      	beq.n	80040c4 <HAL_RCC_OscConfig+0x418>
 80040e4:	e01b      	b.n	800411e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f6:	f7fe f84f 	bl	8002198 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040fe:	f7fe f84b 	bl	8002198 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e0d5      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004110:	4b14      	ldr	r3, [pc, #80]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004112:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ef      	bne.n	80040fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80c9 	beq.w	80042ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004128:	4b0e      	ldr	r3, [pc, #56]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b0c      	cmp	r3, #12
 8004132:	f000 8083 	beq.w	800423c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d15e      	bne.n	80041fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b09      	ldr	r3, [pc, #36]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a08      	ldr	r2, [pc, #32]	@ (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004144:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fe f825 	bl	8002198 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004150:	e00c      	b.n	800416c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004152:	f7fe f821 	bl	8002198 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d905      	bls.n	800416c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e0ab      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
 8004164:	40021000 	.word	0x40021000
 8004168:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416c:	4b55      	ldr	r3, [pc, #340]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1ec      	bne.n	8004152 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004178:	4b52      	ldr	r3, [pc, #328]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	4b52      	ldr	r3, [pc, #328]	@ (80042c8 <HAL_RCC_OscConfig+0x61c>)
 800417e:	4013      	ands	r3, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6a11      	ldr	r1, [r2, #32]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004188:	3a01      	subs	r2, #1
 800418a:	0112      	lsls	r2, r2, #4
 800418c:	4311      	orrs	r1, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004192:	0212      	lsls	r2, r2, #8
 8004194:	4311      	orrs	r1, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800419a:	0852      	lsrs	r2, r2, #1
 800419c:	3a01      	subs	r2, #1
 800419e:	0552      	lsls	r2, r2, #21
 80041a0:	4311      	orrs	r1, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041a6:	0852      	lsrs	r2, r2, #1
 80041a8:	3a01      	subs	r2, #1
 80041aa:	0652      	lsls	r2, r2, #25
 80041ac:	4311      	orrs	r1, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80041b2:	06d2      	lsls	r2, r2, #27
 80041b4:	430a      	orrs	r2, r1
 80041b6:	4943      	ldr	r1, [pc, #268]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041bc:	4b41      	ldr	r3, [pc, #260]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a40      	ldr	r2, [pc, #256]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041c8:	4b3e      	ldr	r3, [pc, #248]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a3d      	ldr	r2, [pc, #244]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fd ffe0 	bl	8002198 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fd ffdc 	bl	8002198 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e066      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ee:	4b35      	ldr	r3, [pc, #212]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x530>
 80041fa:	e05e      	b.n	80042ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fc:	4b31      	ldr	r3, [pc, #196]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a30      	ldr	r2, [pc, #192]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 8004202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fd ffc6 	bl	8002198 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fd ffc2 	bl	8002198 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e04c      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004222:	4b28      	ldr	r3, [pc, #160]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800422e:	4b25      	ldr	r3, [pc, #148]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	4924      	ldr	r1, [pc, #144]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 8004234:	4b25      	ldr	r3, [pc, #148]	@ (80042cc <HAL_RCC_OscConfig+0x620>)
 8004236:	4013      	ands	r3, r2
 8004238:	60cb      	str	r3, [r1, #12]
 800423a:	e03e      	b.n	80042ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e039      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004248:	4b1e      	ldr	r3, [pc, #120]	@ (80042c4 <HAL_RCC_OscConfig+0x618>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0203 	and.w	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	429a      	cmp	r2, r3
 800425a:	d12c      	bne.n	80042b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	3b01      	subs	r3, #1
 8004268:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d123      	bne.n	80042b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004278:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d11b      	bne.n	80042b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004288:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d113      	bne.n	80042b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	3b01      	subs	r3, #1
 800429c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d109      	bne.n	80042b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	3b01      	subs	r3, #1
 80042b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3720      	adds	r7, #32
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40021000 	.word	0x40021000
 80042c8:	019f800c 	.word	0x019f800c
 80042cc:	feeefffc 	.word	0xfeeefffc

080042d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e11e      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e8:	4b91      	ldr	r3, [pc, #580]	@ (8004530 <HAL_RCC_ClockConfig+0x260>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d910      	bls.n	8004318 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f6:	4b8e      	ldr	r3, [pc, #568]	@ (8004530 <HAL_RCC_ClockConfig+0x260>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f023 020f 	bic.w	r2, r3, #15
 80042fe:	498c      	ldr	r1, [pc, #560]	@ (8004530 <HAL_RCC_ClockConfig+0x260>)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004306:	4b8a      	ldr	r3, [pc, #552]	@ (8004530 <HAL_RCC_ClockConfig+0x260>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e106      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d073      	beq.n	800440c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d129      	bne.n	8004380 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432c:	4b81      	ldr	r3, [pc, #516]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0f4      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800433c:	f000 f9d0 	bl	80046e0 <RCC_GetSysClockFreqFromPLLSource>
 8004340:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4a7c      	ldr	r2, [pc, #496]	@ (8004538 <HAL_RCC_ClockConfig+0x268>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d93f      	bls.n	80043ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800434a:	4b7a      	ldr	r3, [pc, #488]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800435e:	2b00      	cmp	r3, #0
 8004360:	d033      	beq.n	80043ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004366:	2b00      	cmp	r3, #0
 8004368:	d12f      	bne.n	80043ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800436a:	4b72      	ldr	r3, [pc, #456]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004372:	4a70      	ldr	r2, [pc, #448]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004378:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800437a:	2380      	movs	r3, #128	@ 0x80
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e024      	b.n	80043ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d107      	bne.n	8004398 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004388:	4b6a      	ldr	r3, [pc, #424]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d109      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0c6      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004398:	4b66      	ldr	r3, [pc, #408]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0be      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043a8:	f000 f8ce 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4a61      	ldr	r2, [pc, #388]	@ (8004538 <HAL_RCC_ClockConfig+0x268>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d909      	bls.n	80043ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043b6:	4b5f      	ldr	r3, [pc, #380]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043be:	4a5d      	ldr	r2, [pc, #372]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80043c6:	2380      	movs	r3, #128	@ 0x80
 80043c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043ca:	4b5a      	ldr	r3, [pc, #360]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f023 0203 	bic.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4957      	ldr	r1, [pc, #348]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043dc:	f7fd fedc 	bl	8002198 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e4:	f7fd fed8 	bl	8002198 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e095      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	4b4e      	ldr	r3, [pc, #312]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 020c 	and.w	r2, r3, #12
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	429a      	cmp	r2, r3
 800440a:	d1eb      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d023      	beq.n	8004460 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004424:	4b43      	ldr	r3, [pc, #268]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a42      	ldr	r2, [pc, #264]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 800442a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800442e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800443c:	4b3d      	ldr	r3, [pc, #244]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004444:	4a3b      	ldr	r2, [pc, #236]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004446:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800444a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800444c:	4b39      	ldr	r3, [pc, #228]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	4936      	ldr	r1, [pc, #216]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
 800445e:	e008      	b.n	8004472 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b80      	cmp	r3, #128	@ 0x80
 8004464:	d105      	bne.n	8004472 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004466:	4b33      	ldr	r3, [pc, #204]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	4a32      	ldr	r2, [pc, #200]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 800446c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004470:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004472:	4b2f      	ldr	r3, [pc, #188]	@ (8004530 <HAL_RCC_ClockConfig+0x260>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d21d      	bcs.n	80044bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004480:	4b2b      	ldr	r3, [pc, #172]	@ (8004530 <HAL_RCC_ClockConfig+0x260>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 020f 	bic.w	r2, r3, #15
 8004488:	4929      	ldr	r1, [pc, #164]	@ (8004530 <HAL_RCC_ClockConfig+0x260>)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004490:	f7fd fe82 	bl	8002198 <HAL_GetTick>
 8004494:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004496:	e00a      	b.n	80044ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004498:	f7fd fe7e 	bl	8002198 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e03b      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b20      	ldr	r3, [pc, #128]	@ (8004530 <HAL_RCC_ClockConfig+0x260>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d1ed      	bne.n	8004498 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4917      	ldr	r1, [pc, #92]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044e6:	4b13      	ldr	r3, [pc, #76]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	490f      	ldr	r1, [pc, #60]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044fa:	f000 f825 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 80044fe:	4602      	mov	r2, r0
 8004500:	4b0c      	ldr	r3, [pc, #48]	@ (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	490c      	ldr	r1, [pc, #48]	@ (800453c <HAL_RCC_ClockConfig+0x26c>)
 800450c:	5ccb      	ldrb	r3, [r1, r3]
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	4a0a      	ldr	r2, [pc, #40]	@ (8004540 <HAL_RCC_ClockConfig+0x270>)
 8004518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800451a:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <HAL_RCC_ClockConfig+0x274>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fc fe2c 	bl	800117c <HAL_InitTick>
 8004524:	4603      	mov	r3, r0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40022000 	.word	0x40022000
 8004534:	40021000 	.word	0x40021000
 8004538:	04c4b400 	.word	0x04c4b400
 800453c:	0800bd64 	.word	0x0800bd64
 8004540:	20000004 	.word	0x20000004
 8004544:	20000008 	.word	0x20000008

08004548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800454e:	4b2c      	ldr	r3, [pc, #176]	@ (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b04      	cmp	r3, #4
 8004558:	d102      	bne.n	8004560 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800455a:	4b2a      	ldr	r3, [pc, #168]	@ (8004604 <HAL_RCC_GetSysClockFreq+0xbc>)
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	e047      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004560:	4b27      	ldr	r3, [pc, #156]	@ (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b08      	cmp	r3, #8
 800456a:	d102      	bne.n	8004572 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800456c:	4b26      	ldr	r3, [pc, #152]	@ (8004608 <HAL_RCC_GetSysClockFreq+0xc0>)
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	e03e      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004572:	4b23      	ldr	r3, [pc, #140]	@ (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d136      	bne.n	80045ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800457e:	4b20      	ldr	r3, [pc, #128]	@ (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004588:	4b1d      	ldr	r3, [pc, #116]	@ (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	3301      	adds	r3, #1
 8004594:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d10c      	bne.n	80045b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800459c:	4a1a      	ldr	r2, [pc, #104]	@ (8004608 <HAL_RCC_GetSysClockFreq+0xc0>)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	4a16      	ldr	r2, [pc, #88]	@ (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a6:	68d2      	ldr	r2, [r2, #12]
 80045a8:	0a12      	lsrs	r2, r2, #8
 80045aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	617b      	str	r3, [r7, #20]
      break;
 80045b4:	e00c      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045b6:	4a13      	ldr	r2, [pc, #76]	@ (8004604 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80045be:	4a10      	ldr	r2, [pc, #64]	@ (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c0:	68d2      	ldr	r2, [r2, #12]
 80045c2:	0a12      	lsrs	r2, r2, #8
 80045c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045c8:	fb02 f303 	mul.w	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]
      break;
 80045ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	0e5b      	lsrs	r3, r3, #25
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	3301      	adds	r3, #1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	e001      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80045f0:	693b      	ldr	r3, [r7, #16]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000
 8004604:	00f42400 	.word	0x00f42400
 8004608:	007a1200 	.word	0x007a1200

0800460c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	@ (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000004 	.word	0x20000004

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004628:	f7ff fff0 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4904      	ldr	r1, [pc, #16]	@ (800464c <HAL_RCC_GetPCLK1Freq+0x28>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40021000 	.word	0x40021000
 800464c:	0800bd74 	.word	0x0800bd74

08004650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004654:	f7ff ffda 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b06      	ldr	r3, [pc, #24]	@ (8004674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0adb      	lsrs	r3, r3, #11
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4904      	ldr	r1, [pc, #16]	@ (8004678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004670:	4618      	mov	r0, r3
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	0800bd74 	.word	0x0800bd74

0800467c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	220f      	movs	r2, #15
 800468a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800468c:	4b12      	ldr	r3, [pc, #72]	@ (80046d8 <HAL_RCC_GetClockConfig+0x5c>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0203 	and.w	r2, r3, #3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004698:	4b0f      	ldr	r3, [pc, #60]	@ (80046d8 <HAL_RCC_GetClockConfig+0x5c>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80046a4:	4b0c      	ldr	r3, [pc, #48]	@ (80046d8 <HAL_RCC_GetClockConfig+0x5c>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80046b0:	4b09      	ldr	r3, [pc, #36]	@ (80046d8 <HAL_RCC_GetClockConfig+0x5c>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	08db      	lsrs	r3, r3, #3
 80046b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80046be:	4b07      	ldr	r3, [pc, #28]	@ (80046dc <HAL_RCC_GetClockConfig+0x60>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 020f 	and.w	r2, r3, #15
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	601a      	str	r2, [r3, #0]
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40022000 	.word	0x40022000

080046e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	3301      	adds	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d10c      	bne.n	800471e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004704:	4a17      	ldr	r2, [pc, #92]	@ (8004764 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	4a14      	ldr	r2, [pc, #80]	@ (8004760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800470e:	68d2      	ldr	r2, [r2, #12]
 8004710:	0a12      	lsrs	r2, r2, #8
 8004712:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004716:	fb02 f303 	mul.w	r3, r2, r3
 800471a:	617b      	str	r3, [r7, #20]
    break;
 800471c:	e00c      	b.n	8004738 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800471e:	4a12      	ldr	r2, [pc, #72]	@ (8004768 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	fbb2 f3f3 	udiv	r3, r2, r3
 8004726:	4a0e      	ldr	r2, [pc, #56]	@ (8004760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004728:	68d2      	ldr	r2, [r2, #12]
 800472a:	0a12      	lsrs	r2, r2, #8
 800472c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004730:	fb02 f303 	mul.w	r3, r2, r3
 8004734:	617b      	str	r3, [r7, #20]
    break;
 8004736:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004738:	4b09      	ldr	r3, [pc, #36]	@ (8004760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	0e5b      	lsrs	r3, r3, #25
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	3301      	adds	r3, #1
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004752:	687b      	ldr	r3, [r7, #4]
}
 8004754:	4618      	mov	r0, r3
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	40021000 	.word	0x40021000
 8004764:	007a1200 	.word	0x007a1200
 8004768:	00f42400 	.word	0x00f42400

0800476c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004774:	2300      	movs	r3, #0
 8004776:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004778:	2300      	movs	r3, #0
 800477a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8098 	beq.w	80048ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800478a:	2300      	movs	r3, #0
 800478c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800478e:	4b43      	ldr	r3, [pc, #268]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10d      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479a:	4b40      	ldr	r3, [pc, #256]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800479c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479e:	4a3f      	ldr	r2, [pc, #252]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047a6:	4b3d      	ldr	r3, [pc, #244]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ae:	60bb      	str	r3, [r7, #8]
 80047b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047b2:	2301      	movs	r3, #1
 80047b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047b6:	4b3a      	ldr	r3, [pc, #232]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a39      	ldr	r2, [pc, #228]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047c2:	f7fd fce9 	bl	8002198 <HAL_GetTick>
 80047c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047c8:	e009      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fd fce5 	bl	8002198 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d902      	bls.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	74fb      	strb	r3, [r7, #19]
        break;
 80047dc:	e005      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047de:	4b30      	ldr	r3, [pc, #192]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0ef      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80047ea:	7cfb      	ldrb	r3, [r7, #19]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d159      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047f0:	4b2a      	ldr	r3, [pc, #168]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01e      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	429a      	cmp	r2, r3
 800480a:	d019      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800480c:	4b23      	ldr	r3, [pc, #140]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004816:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004818:	4b20      	ldr	r3, [pc, #128]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481e:	4a1f      	ldr	r2, [pc, #124]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004828:	4b1c      	ldr	r3, [pc, #112]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482e:	4a1b      	ldr	r2, [pc, #108]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004830:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004838:	4a18      	ldr	r2, [pc, #96]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d016      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fd fca5 	bl	8002198 <HAL_GetTick>
 800484e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004850:	e00b      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fd fca1 	bl	8002198 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d902      	bls.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	74fb      	strb	r3, [r7, #19]
            break;
 8004868:	e006      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486a:	4b0c      	ldr	r3, [pc, #48]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0ec      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10b      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800487e:	4b07      	ldr	r3, [pc, #28]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004884:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488c:	4903      	ldr	r1, [pc, #12]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004894:	e008      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	74bb      	strb	r3, [r7, #18]
 800489a:	e005      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800489c:	40021000 	.word	0x40021000
 80048a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a4:	7cfb      	ldrb	r3, [r7, #19]
 80048a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048a8:	7c7b      	ldrb	r3, [r7, #17]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d105      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ae:	4ba6      	ldr	r3, [pc, #664]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b2:	4aa5      	ldr	r2, [pc, #660]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048c6:	4ba0      	ldr	r3, [pc, #640]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048cc:	f023 0203 	bic.w	r2, r3, #3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	499c      	ldr	r1, [pc, #624]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048e8:	4b97      	ldr	r3, [pc, #604]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ee:	f023 020c 	bic.w	r2, r3, #12
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	4994      	ldr	r1, [pc, #592]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800490a:	4b8f      	ldr	r3, [pc, #572]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004910:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	498b      	ldr	r1, [pc, #556]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800492c:	4b86      	ldr	r3, [pc, #536]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004932:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	4983      	ldr	r1, [pc, #524]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800494e:	4b7e      	ldr	r3, [pc, #504]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004954:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	497a      	ldr	r1, [pc, #488]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004970:	4b75      	ldr	r3, [pc, #468]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004976:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	4972      	ldr	r1, [pc, #456]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004992:	4b6d      	ldr	r3, [pc, #436]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004998:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	4969      	ldr	r1, [pc, #420]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049b4:	4b64      	ldr	r3, [pc, #400]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	4961      	ldr	r1, [pc, #388]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e4:	4958      	ldr	r1, [pc, #352]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d015      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049f8:	4b53      	ldr	r3, [pc, #332]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a06:	4950      	ldr	r1, [pc, #320]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a16:	d105      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a18:	4b4b      	ldr	r3, [pc, #300]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a22:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d015      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a30:	4b45      	ldr	r3, [pc, #276]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3e:	4942      	ldr	r1, [pc, #264]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a4e:	d105      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a50:	4b3d      	ldr	r3, [pc, #244]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4a3c      	ldr	r2, [pc, #240]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a5a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d015      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a68:	4b37      	ldr	r3, [pc, #220]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a76:	4934      	ldr	r1, [pc, #208]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a86:	d105      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a88:	4b2f      	ldr	r3, [pc, #188]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d015      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aa0:	4b29      	ldr	r3, [pc, #164]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aae:	4926      	ldr	r1, [pc, #152]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004abe:	d105      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ac0:	4b21      	ldr	r3, [pc, #132]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4a20      	ldr	r2, [pc, #128]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d015      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ade:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae6:	4918      	ldr	r1, [pc, #96]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004af6:	d105      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af8:	4b13      	ldr	r3, [pc, #76]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a12      	ldr	r2, [pc, #72]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d015      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b10:	4b0d      	ldr	r3, [pc, #52]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b1e:	490a      	ldr	r1, [pc, #40]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b2e:	d105      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b30:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4a04      	ldr	r2, [pc, #16]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000

08004b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e049      	b.n	8004bf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f841 	bl	8004bfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	f000 fc3c 	bl	8005408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d001      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e04a      	b.n	8004cbe <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a21      	ldr	r2, [pc, #132]	@ (8004ccc <HAL_TIM_Base_Start_IT+0xbc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d018      	beq.n	8004c7c <HAL_TIM_Base_Start_IT+0x6c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c52:	d013      	beq.n	8004c7c <HAL_TIM_Base_Start_IT+0x6c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00e      	beq.n	8004c7c <HAL_TIM_Base_Start_IT+0x6c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d009      	beq.n	8004c7c <HAL_TIM_Base_Start_IT+0x6c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004cd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <HAL_TIM_Base_Start_IT+0x6c>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a19      	ldr	r2, [pc, #100]	@ (8004cdc <HAL_TIM_Base_Start_IT+0xcc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d115      	bne.n	8004ca8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	4b17      	ldr	r3, [pc, #92]	@ (8004ce0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b06      	cmp	r3, #6
 8004c8c:	d015      	beq.n	8004cba <HAL_TIM_Base_Start_IT+0xaa>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c94:	d011      	beq.n	8004cba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0201 	orr.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca6:	e008      	b.n	8004cba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	e000      	b.n	8004cbc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40012c00 	.word	0x40012c00
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40013400 	.word	0x40013400
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	00010007 	.word	0x00010007

08004ce4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e049      	b.n	8004d8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc fcfe 	bl	800170c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4619      	mov	r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	f000 fb70 	bl	8005408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b086      	sub	sp, #24
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e097      	b.n	8004ed6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f88f 	bl	8004ede <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004dd6:	f023 0307 	bic.w	r3, r3, #7
 8004dda:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3304      	adds	r3, #4
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f000 fb0e 	bl	8005408 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e14:	f023 0303 	bic.w	r3, r3, #3
 8004e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	021b      	lsls	r3, r3, #8
 8004e24:	4313      	orrs	r3, r2
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004e32:	f023 030c 	bic.w	r3, r3, #12
 8004e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	011a      	lsls	r2, r3, #4
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	031b      	lsls	r3, r3, #12
 8004e62:	4313      	orrs	r3, r2
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004e70:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004e78:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	4313      	orrs	r3, r2
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d020      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01b      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f06f 0202 	mvn.w	r2, #2
 8004f26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fa45 	bl	80053cc <HAL_TIM_IC_CaptureCallback>
 8004f42:	e005      	b.n	8004f50 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fa37 	bl	80053b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fa48 	bl	80053e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d020      	beq.n	8004fa2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01b      	beq.n	8004fa2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f06f 0204 	mvn.w	r2, #4
 8004f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fa1f 	bl	80053cc <HAL_TIM_IC_CaptureCallback>
 8004f8e:	e005      	b.n	8004f9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fa11 	bl	80053b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fa22 	bl	80053e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d020      	beq.n	8004fee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d01b      	beq.n	8004fee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f06f 0208 	mvn.w	r2, #8
 8004fbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f9f9 	bl	80053cc <HAL_TIM_IC_CaptureCallback>
 8004fda:	e005      	b.n	8004fe8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f9eb 	bl	80053b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f9fc 	bl	80053e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d020      	beq.n	800503a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01b      	beq.n	800503a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f06f 0210 	mvn.w	r2, #16
 800500a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2208      	movs	r2, #8
 8005010:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f9d3 	bl	80053cc <HAL_TIM_IC_CaptureCallback>
 8005026:	e005      	b.n	8005034 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f9c5 	bl	80053b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f9d6 	bl	80053e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00c      	beq.n	800505e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f06f 0201 	mvn.w	r2, #1
 8005056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fc f84f 	bl	80010fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	d104      	bne.n	8005072 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00c      	beq.n	800508c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fddc 	bl	8005c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00c      	beq.n	80050b0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d007      	beq.n	80050b0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80050a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fdd4 	bl	8005c58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00c      	beq.n	80050d4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f990 	bl	80053f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00c      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0220 	mvn.w	r2, #32
 80050f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fd9c 	bl	8005c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00c      	beq.n	800511c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fda8 	bl	8005c6c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00c      	beq.n	8005140 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d007      	beq.n	8005140 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fda0 	bl	8005c80 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00c      	beq.n	8005164 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800515c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fd98 	bl	8005c94 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fd90 	bl	8005ca8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e0ff      	b.n	80053ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b14      	cmp	r3, #20
 80051ba:	f200 80f0 	bhi.w	800539e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051be:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	08005219 	.word	0x08005219
 80051c8:	0800539f 	.word	0x0800539f
 80051cc:	0800539f 	.word	0x0800539f
 80051d0:	0800539f 	.word	0x0800539f
 80051d4:	08005259 	.word	0x08005259
 80051d8:	0800539f 	.word	0x0800539f
 80051dc:	0800539f 	.word	0x0800539f
 80051e0:	0800539f 	.word	0x0800539f
 80051e4:	0800529b 	.word	0x0800529b
 80051e8:	0800539f 	.word	0x0800539f
 80051ec:	0800539f 	.word	0x0800539f
 80051f0:	0800539f 	.word	0x0800539f
 80051f4:	080052db 	.word	0x080052db
 80051f8:	0800539f 	.word	0x0800539f
 80051fc:	0800539f 	.word	0x0800539f
 8005200:	0800539f 	.word	0x0800539f
 8005204:	0800531d 	.word	0x0800531d
 8005208:	0800539f 	.word	0x0800539f
 800520c:	0800539f 	.word	0x0800539f
 8005210:	0800539f 	.word	0x0800539f
 8005214:	0800535d 	.word	0x0800535d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f98e 	bl	8005540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0208 	orr.w	r2, r2, #8
 8005232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0204 	bic.w	r2, r2, #4
 8005242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6999      	ldr	r1, [r3, #24]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	619a      	str	r2, [r3, #24]
      break;
 8005256:	e0a5      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 f9fe 	bl	8005660 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6999      	ldr	r1, [r3, #24]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	021a      	lsls	r2, r3, #8
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	619a      	str	r2, [r3, #24]
      break;
 8005298:	e084      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fa67 	bl	8005774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0208 	orr.w	r2, r2, #8
 80052b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0204 	bic.w	r2, r2, #4
 80052c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69d9      	ldr	r1, [r3, #28]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	61da      	str	r2, [r3, #28]
      break;
 80052d8:	e064      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 facf 	bl	8005884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69d9      	ldr	r1, [r3, #28]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	021a      	lsls	r2, r3, #8
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	61da      	str	r2, [r3, #28]
      break;
 800531a:	e043      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fb38 	bl	8005998 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0208 	orr.w	r2, r2, #8
 8005336:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0204 	bic.w	r2, r2, #4
 8005346:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800535a:	e023      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fb7c 	bl	8005a60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005376:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005386:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	021a      	lsls	r2, r3, #8
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800539c:	e002      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	75fb      	strb	r3, [r7, #23]
      break;
 80053a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop

080053b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a42      	ldr	r2, [pc, #264]	@ (8005524 <TIM_Base_SetConfig+0x11c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00f      	beq.n	8005440 <TIM_Base_SetConfig+0x38>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005426:	d00b      	beq.n	8005440 <TIM_Base_SetConfig+0x38>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a3f      	ldr	r2, [pc, #252]	@ (8005528 <TIM_Base_SetConfig+0x120>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d007      	beq.n	8005440 <TIM_Base_SetConfig+0x38>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a3e      	ldr	r2, [pc, #248]	@ (800552c <TIM_Base_SetConfig+0x124>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_Base_SetConfig+0x38>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a3d      	ldr	r2, [pc, #244]	@ (8005530 <TIM_Base_SetConfig+0x128>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d108      	bne.n	8005452 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a33      	ldr	r2, [pc, #204]	@ (8005524 <TIM_Base_SetConfig+0x11c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01b      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005460:	d017      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a30      	ldr	r2, [pc, #192]	@ (8005528 <TIM_Base_SetConfig+0x120>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a2f      	ldr	r2, [pc, #188]	@ (800552c <TIM_Base_SetConfig+0x124>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00f      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a2e      	ldr	r2, [pc, #184]	@ (8005530 <TIM_Base_SetConfig+0x128>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a2d      	ldr	r2, [pc, #180]	@ (8005534 <TIM_Base_SetConfig+0x12c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a2c      	ldr	r2, [pc, #176]	@ (8005538 <TIM_Base_SetConfig+0x130>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2b      	ldr	r2, [pc, #172]	@ (800553c <TIM_Base_SetConfig+0x134>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a16      	ldr	r2, [pc, #88]	@ (8005524 <TIM_Base_SetConfig+0x11c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00f      	beq.n	80054f0 <TIM_Base_SetConfig+0xe8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a17      	ldr	r2, [pc, #92]	@ (8005530 <TIM_Base_SetConfig+0x128>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00b      	beq.n	80054f0 <TIM_Base_SetConfig+0xe8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a16      	ldr	r2, [pc, #88]	@ (8005534 <TIM_Base_SetConfig+0x12c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <TIM_Base_SetConfig+0xe8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a15      	ldr	r2, [pc, #84]	@ (8005538 <TIM_Base_SetConfig+0x130>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_Base_SetConfig+0xe8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a14      	ldr	r2, [pc, #80]	@ (800553c <TIM_Base_SetConfig+0x134>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d103      	bne.n	80054f8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	691a      	ldr	r2, [r3, #16]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b01      	cmp	r3, #1
 8005508:	d105      	bne.n	8005516 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f023 0201 	bic.w	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	611a      	str	r2, [r3, #16]
  }
}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40013400 	.word	0x40013400
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400
 800553c:	40014800 	.word	0x40014800

08005540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f023 0201 	bic.w	r2, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800556e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0303 	bic.w	r3, r3, #3
 800557a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f023 0302 	bic.w	r3, r3, #2
 800558c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a2c      	ldr	r2, [pc, #176]	@ (800564c <TIM_OC1_SetConfig+0x10c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00f      	beq.n	80055c0 <TIM_OC1_SetConfig+0x80>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005650 <TIM_OC1_SetConfig+0x110>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00b      	beq.n	80055c0 <TIM_OC1_SetConfig+0x80>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005654 <TIM_OC1_SetConfig+0x114>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d007      	beq.n	80055c0 <TIM_OC1_SetConfig+0x80>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a29      	ldr	r2, [pc, #164]	@ (8005658 <TIM_OC1_SetConfig+0x118>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_OC1_SetConfig+0x80>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a28      	ldr	r2, [pc, #160]	@ (800565c <TIM_OC1_SetConfig+0x11c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d10c      	bne.n	80055da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0308 	bic.w	r3, r3, #8
 80055c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f023 0304 	bic.w	r3, r3, #4
 80055d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a1b      	ldr	r2, [pc, #108]	@ (800564c <TIM_OC1_SetConfig+0x10c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00f      	beq.n	8005602 <TIM_OC1_SetConfig+0xc2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005650 <TIM_OC1_SetConfig+0x110>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00b      	beq.n	8005602 <TIM_OC1_SetConfig+0xc2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a19      	ldr	r2, [pc, #100]	@ (8005654 <TIM_OC1_SetConfig+0x114>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d007      	beq.n	8005602 <TIM_OC1_SetConfig+0xc2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a18      	ldr	r2, [pc, #96]	@ (8005658 <TIM_OC1_SetConfig+0x118>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d003      	beq.n	8005602 <TIM_OC1_SetConfig+0xc2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a17      	ldr	r2, [pc, #92]	@ (800565c <TIM_OC1_SetConfig+0x11c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d111      	bne.n	8005626 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	621a      	str	r2, [r3, #32]
}
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40013400 	.word	0x40013400
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400
 800565c:	40014800 	.word	0x40014800

08005660 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f023 0210 	bic.w	r2, r3, #16
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800568e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800569a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0320 	bic.w	r3, r3, #32
 80056ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a28      	ldr	r2, [pc, #160]	@ (8005760 <TIM_OC2_SetConfig+0x100>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC2_SetConfig+0x6c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a27      	ldr	r2, [pc, #156]	@ (8005764 <TIM_OC2_SetConfig+0x104>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d10d      	bne.n	80056e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005760 <TIM_OC2_SetConfig+0x100>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00f      	beq.n	8005710 <TIM_OC2_SetConfig+0xb0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005764 <TIM_OC2_SetConfig+0x104>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00b      	beq.n	8005710 <TIM_OC2_SetConfig+0xb0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005768 <TIM_OC2_SetConfig+0x108>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d007      	beq.n	8005710 <TIM_OC2_SetConfig+0xb0>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a1a      	ldr	r2, [pc, #104]	@ (800576c <TIM_OC2_SetConfig+0x10c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_OC2_SetConfig+0xb0>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a19      	ldr	r2, [pc, #100]	@ (8005770 <TIM_OC2_SetConfig+0x110>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d113      	bne.n	8005738 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005716:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800571e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40013400 	.word	0x40013400
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400
 8005770:	40014800 	.word	0x40014800

08005774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	021b      	lsls	r3, r3, #8
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a27      	ldr	r2, [pc, #156]	@ (8005870 <TIM_OC3_SetConfig+0xfc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d003      	beq.n	80057de <TIM_OC3_SetConfig+0x6a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a26      	ldr	r2, [pc, #152]	@ (8005874 <TIM_OC3_SetConfig+0x100>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d10d      	bne.n	80057fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005870 <TIM_OC3_SetConfig+0xfc>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00f      	beq.n	8005822 <TIM_OC3_SetConfig+0xae>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a1b      	ldr	r2, [pc, #108]	@ (8005874 <TIM_OC3_SetConfig+0x100>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00b      	beq.n	8005822 <TIM_OC3_SetConfig+0xae>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a1a      	ldr	r2, [pc, #104]	@ (8005878 <TIM_OC3_SetConfig+0x104>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d007      	beq.n	8005822 <TIM_OC3_SetConfig+0xae>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a19      	ldr	r2, [pc, #100]	@ (800587c <TIM_OC3_SetConfig+0x108>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d003      	beq.n	8005822 <TIM_OC3_SetConfig+0xae>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a18      	ldr	r2, [pc, #96]	@ (8005880 <TIM_OC3_SetConfig+0x10c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d113      	bne.n	800584a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	621a      	str	r2, [r3, #32]
}
 8005864:	bf00      	nop
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40012c00 	.word	0x40012c00
 8005874:	40013400 	.word	0x40013400
 8005878:	40014000 	.word	0x40014000
 800587c:	40014400 	.word	0x40014400
 8005880:	40014800 	.word	0x40014800

08005884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	031b      	lsls	r3, r3, #12
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a28      	ldr	r2, [pc, #160]	@ (8005984 <TIM_OC4_SetConfig+0x100>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_OC4_SetConfig+0x6c>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a27      	ldr	r2, [pc, #156]	@ (8005988 <TIM_OC4_SetConfig+0x104>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10d      	bne.n	800590c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	031b      	lsls	r3, r3, #12
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800590a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a1d      	ldr	r2, [pc, #116]	@ (8005984 <TIM_OC4_SetConfig+0x100>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00f      	beq.n	8005934 <TIM_OC4_SetConfig+0xb0>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a1c      	ldr	r2, [pc, #112]	@ (8005988 <TIM_OC4_SetConfig+0x104>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00b      	beq.n	8005934 <TIM_OC4_SetConfig+0xb0>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1b      	ldr	r2, [pc, #108]	@ (800598c <TIM_OC4_SetConfig+0x108>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d007      	beq.n	8005934 <TIM_OC4_SetConfig+0xb0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a1a      	ldr	r2, [pc, #104]	@ (8005990 <TIM_OC4_SetConfig+0x10c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_OC4_SetConfig+0xb0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a19      	ldr	r2, [pc, #100]	@ (8005994 <TIM_OC4_SetConfig+0x110>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d113      	bne.n	800595c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800593a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005942:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	019b      	lsls	r3, r3, #6
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	019b      	lsls	r3, r3, #6
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40012c00 	.word	0x40012c00
 8005988:	40013400 	.word	0x40013400
 800598c:	40014000 	.word	0x40014000
 8005990:	40014400 	.word	0x40014400
 8005994:	40014800 	.word	0x40014800

08005998 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80059dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a17      	ldr	r2, [pc, #92]	@ (8005a4c <TIM_OC5_SetConfig+0xb4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00f      	beq.n	8005a12 <TIM_OC5_SetConfig+0x7a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a16      	ldr	r2, [pc, #88]	@ (8005a50 <TIM_OC5_SetConfig+0xb8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00b      	beq.n	8005a12 <TIM_OC5_SetConfig+0x7a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a15      	ldr	r2, [pc, #84]	@ (8005a54 <TIM_OC5_SetConfig+0xbc>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d007      	beq.n	8005a12 <TIM_OC5_SetConfig+0x7a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a14      	ldr	r2, [pc, #80]	@ (8005a58 <TIM_OC5_SetConfig+0xc0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d003      	beq.n	8005a12 <TIM_OC5_SetConfig+0x7a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a13      	ldr	r2, [pc, #76]	@ (8005a5c <TIM_OC5_SetConfig+0xc4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d109      	bne.n	8005a26 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	621a      	str	r2, [r3, #32]
}
 8005a40:	bf00      	nop
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	40012c00 	.word	0x40012c00
 8005a50:	40013400 	.word	0x40013400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800

08005a60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	051b      	lsls	r3, r3, #20
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a18      	ldr	r2, [pc, #96]	@ (8005b18 <TIM_OC6_SetConfig+0xb8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00f      	beq.n	8005adc <TIM_OC6_SetConfig+0x7c>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a17      	ldr	r2, [pc, #92]	@ (8005b1c <TIM_OC6_SetConfig+0xbc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00b      	beq.n	8005adc <TIM_OC6_SetConfig+0x7c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a16      	ldr	r2, [pc, #88]	@ (8005b20 <TIM_OC6_SetConfig+0xc0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d007      	beq.n	8005adc <TIM_OC6_SetConfig+0x7c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a15      	ldr	r2, [pc, #84]	@ (8005b24 <TIM_OC6_SetConfig+0xc4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_OC6_SetConfig+0x7c>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a14      	ldr	r2, [pc, #80]	@ (8005b28 <TIM_OC6_SetConfig+0xc8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d109      	bne.n	8005af0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	029b      	lsls	r3, r3, #10
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	621a      	str	r2, [r3, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40012c00 	.word	0x40012c00
 8005b1c:	40013400 	.word	0x40013400
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40014400 	.word	0x40014400
 8005b28:	40014800 	.word	0x40014800

08005b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e065      	b.n	8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a2c      	ldr	r2, [pc, #176]	@ (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d004      	beq.n	8005b78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a2b      	ldr	r2, [pc, #172]	@ (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d108      	bne.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005b90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1b      	ldr	r2, [pc, #108]	@ (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d018      	beq.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bba:	d013      	beq.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a18      	ldr	r2, [pc, #96]	@ (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00e      	beq.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a17      	ldr	r2, [pc, #92]	@ (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d009      	beq.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a12      	ldr	r2, [pc, #72]	@ (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d004      	beq.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a13      	ldr	r2, [pc, #76]	@ (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d10c      	bne.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	40012c00 	.word	0x40012c00
 8005c20:	40013400 	.word	0x40013400
 8005c24:	40000400 	.word	0x40000400
 8005c28:	40000800 	.word	0x40000800
 8005c2c:	40014000 	.word	0x40014000

08005c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e042      	b.n	8005d54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d106      	bne.n	8005ce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7fc f94f 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2224      	movs	r2, #36	@ 0x24
 8005cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fc4a 	bl	80065a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f97b 	bl	8006008 <UART_SetConfig>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e01b      	b.n	8005d54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fcc9 	bl	80066e4 <UART_CheckIdleState>
 8005d52:	4603      	mov	r3, r0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	@ 0x28
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d17b      	bne.n	8005e6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <HAL_UART_Transmit+0x26>
 8005d7c:	88fb      	ldrh	r3, [r7, #6]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e074      	b.n	8005e70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2221      	movs	r2, #33	@ 0x21
 8005d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d96:	f7fc f9ff 	bl	8002198 <HAL_GetTick>
 8005d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	88fa      	ldrh	r2, [r7, #6]
 8005da8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005db4:	d108      	bne.n	8005dc8 <HAL_UART_Transmit+0x6c>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d104      	bne.n	8005dc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	e003      	b.n	8005dd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dd0:	e030      	b.n	8005e34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2180      	movs	r1, #128	@ 0x80
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fd2b 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d005      	beq.n	8005df4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e03d      	b.n	8005e70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10b      	bne.n	8005e12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	3302      	adds	r3, #2
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	e007      	b.n	8005e22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	781a      	ldrb	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1c8      	bne.n	8005dd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2200      	movs	r2, #0
 8005e48:	2140      	movs	r1, #64	@ 0x40
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fcf4 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e006      	b.n	8005e70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e000      	b.n	8005e70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005e6e:	2302      	movs	r3, #2
  }
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	@ 0x28
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	4613      	mov	r3, r2
 8005e86:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	f040 80b5 	bne.w	8005ffe <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_UART_Receive+0x28>
 8005e9a:	88fb      	ldrh	r3, [r7, #6]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0ad      	b.n	8006000 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2222      	movs	r2, #34	@ 0x22
 8005eb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eba:	f7fc f96d 	bl	8002198 <HAL_GetTick>
 8005ebe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	88fa      	ldrh	r2, [r7, #6]
 8005ec4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	88fa      	ldrh	r2, [r7, #6]
 8005ecc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed8:	d10e      	bne.n	8005ef8 <HAL_UART_Receive+0x80>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d105      	bne.n	8005eee <HAL_UART_Receive+0x76>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005eec:	e02d      	b.n	8005f4a <HAL_UART_Receive+0xd2>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	22ff      	movs	r2, #255	@ 0xff
 8005ef2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005ef6:	e028      	b.n	8005f4a <HAL_UART_Receive+0xd2>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10d      	bne.n	8005f1c <HAL_UART_Receive+0xa4>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d104      	bne.n	8005f12 <HAL_UART_Receive+0x9a>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	22ff      	movs	r2, #255	@ 0xff
 8005f0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f10:	e01b      	b.n	8005f4a <HAL_UART_Receive+0xd2>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	227f      	movs	r2, #127	@ 0x7f
 8005f16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f1a:	e016      	b.n	8005f4a <HAL_UART_Receive+0xd2>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f24:	d10d      	bne.n	8005f42 <HAL_UART_Receive+0xca>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d104      	bne.n	8005f38 <HAL_UART_Receive+0xc0>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	227f      	movs	r2, #127	@ 0x7f
 8005f32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f36:	e008      	b.n	8005f4a <HAL_UART_Receive+0xd2>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	223f      	movs	r2, #63	@ 0x3f
 8005f3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f40:	e003      	b.n	8005f4a <HAL_UART_Receive+0xd2>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005f50:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5a:	d108      	bne.n	8005f6e <HAL_UART_Receive+0xf6>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d104      	bne.n	8005f6e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005f64:	2300      	movs	r3, #0
 8005f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	61bb      	str	r3, [r7, #24]
 8005f6c:	e003      	b.n	8005f76 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005f76:	e036      	b.n	8005fe6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2120      	movs	r1, #32
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 fc58 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e032      	b.n	8006000 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10c      	bne.n	8005fba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	8a7b      	ldrh	r3, [r7, #18]
 8005faa:	4013      	ands	r3, r2
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	3302      	adds	r3, #2
 8005fb6:	61bb      	str	r3, [r7, #24]
 8005fb8:	e00c      	b.n	8005fd4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	8a7b      	ldrh	r3, [r7, #18]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1c2      	bne.n	8005f78 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e000      	b.n	8006000 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005ffe:	2302      	movs	r3, #2
  }
}
 8006000:	4618      	mov	r0, r3
 8006002:	3720      	adds	r7, #32
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800600c:	b08c      	sub	sp, #48	@ 0x30
 800600e:	af00      	add	r7, sp, #0
 8006010:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	431a      	orrs	r2, r3
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	431a      	orrs	r2, r3
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	4313      	orrs	r3, r2
 800602e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4bab      	ldr	r3, [pc, #684]	@ (80062e4 <UART_SetConfig+0x2dc>)
 8006038:	4013      	ands	r3, r2
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006040:	430b      	orrs	r3, r1
 8006042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4aa0      	ldr	r2, [pc, #640]	@ (80062e8 <UART_SetConfig+0x2e0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d004      	beq.n	8006074 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006070:	4313      	orrs	r3, r2
 8006072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800607e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006088:	430b      	orrs	r3, r1
 800608a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006092:	f023 010f 	bic.w	r1, r3, #15
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a91      	ldr	r2, [pc, #580]	@ (80062ec <UART_SetConfig+0x2e4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d125      	bne.n	80060f8 <UART_SetConfig+0xf0>
 80060ac:	4b90      	ldr	r3, [pc, #576]	@ (80062f0 <UART_SetConfig+0x2e8>)
 80060ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d81a      	bhi.n	80060f0 <UART_SetConfig+0xe8>
 80060ba:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <UART_SetConfig+0xb8>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060d1 	.word	0x080060d1
 80060c4:	080060e1 	.word	0x080060e1
 80060c8:	080060d9 	.word	0x080060d9
 80060cc:	080060e9 	.word	0x080060e9
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060d6:	e0d6      	b.n	8006286 <UART_SetConfig+0x27e>
 80060d8:	2302      	movs	r3, #2
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060de:	e0d2      	b.n	8006286 <UART_SetConfig+0x27e>
 80060e0:	2304      	movs	r3, #4
 80060e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060e6:	e0ce      	b.n	8006286 <UART_SetConfig+0x27e>
 80060e8:	2308      	movs	r3, #8
 80060ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ee:	e0ca      	b.n	8006286 <UART_SetConfig+0x27e>
 80060f0:	2310      	movs	r3, #16
 80060f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060f6:	e0c6      	b.n	8006286 <UART_SetConfig+0x27e>
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a7d      	ldr	r2, [pc, #500]	@ (80062f4 <UART_SetConfig+0x2ec>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d138      	bne.n	8006174 <UART_SetConfig+0x16c>
 8006102:	4b7b      	ldr	r3, [pc, #492]	@ (80062f0 <UART_SetConfig+0x2e8>)
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006108:	f003 030c 	and.w	r3, r3, #12
 800610c:	2b0c      	cmp	r3, #12
 800610e:	d82d      	bhi.n	800616c <UART_SetConfig+0x164>
 8006110:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <UART_SetConfig+0x110>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	0800614d 	.word	0x0800614d
 800611c:	0800616d 	.word	0x0800616d
 8006120:	0800616d 	.word	0x0800616d
 8006124:	0800616d 	.word	0x0800616d
 8006128:	0800615d 	.word	0x0800615d
 800612c:	0800616d 	.word	0x0800616d
 8006130:	0800616d 	.word	0x0800616d
 8006134:	0800616d 	.word	0x0800616d
 8006138:	08006155 	.word	0x08006155
 800613c:	0800616d 	.word	0x0800616d
 8006140:	0800616d 	.word	0x0800616d
 8006144:	0800616d 	.word	0x0800616d
 8006148:	08006165 	.word	0x08006165
 800614c:	2300      	movs	r3, #0
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006152:	e098      	b.n	8006286 <UART_SetConfig+0x27e>
 8006154:	2302      	movs	r3, #2
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800615a:	e094      	b.n	8006286 <UART_SetConfig+0x27e>
 800615c:	2304      	movs	r3, #4
 800615e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006162:	e090      	b.n	8006286 <UART_SetConfig+0x27e>
 8006164:	2308      	movs	r3, #8
 8006166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800616a:	e08c      	b.n	8006286 <UART_SetConfig+0x27e>
 800616c:	2310      	movs	r3, #16
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006172:	e088      	b.n	8006286 <UART_SetConfig+0x27e>
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a5f      	ldr	r2, [pc, #380]	@ (80062f8 <UART_SetConfig+0x2f0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d125      	bne.n	80061ca <UART_SetConfig+0x1c2>
 800617e:	4b5c      	ldr	r3, [pc, #368]	@ (80062f0 <UART_SetConfig+0x2e8>)
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006184:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006188:	2b30      	cmp	r3, #48	@ 0x30
 800618a:	d016      	beq.n	80061ba <UART_SetConfig+0x1b2>
 800618c:	2b30      	cmp	r3, #48	@ 0x30
 800618e:	d818      	bhi.n	80061c2 <UART_SetConfig+0x1ba>
 8006190:	2b20      	cmp	r3, #32
 8006192:	d00a      	beq.n	80061aa <UART_SetConfig+0x1a2>
 8006194:	2b20      	cmp	r3, #32
 8006196:	d814      	bhi.n	80061c2 <UART_SetConfig+0x1ba>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <UART_SetConfig+0x19a>
 800619c:	2b10      	cmp	r3, #16
 800619e:	d008      	beq.n	80061b2 <UART_SetConfig+0x1aa>
 80061a0:	e00f      	b.n	80061c2 <UART_SetConfig+0x1ba>
 80061a2:	2300      	movs	r3, #0
 80061a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a8:	e06d      	b.n	8006286 <UART_SetConfig+0x27e>
 80061aa:	2302      	movs	r3, #2
 80061ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b0:	e069      	b.n	8006286 <UART_SetConfig+0x27e>
 80061b2:	2304      	movs	r3, #4
 80061b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b8:	e065      	b.n	8006286 <UART_SetConfig+0x27e>
 80061ba:	2308      	movs	r3, #8
 80061bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c0:	e061      	b.n	8006286 <UART_SetConfig+0x27e>
 80061c2:	2310      	movs	r3, #16
 80061c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c8:	e05d      	b.n	8006286 <UART_SetConfig+0x27e>
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a4b      	ldr	r2, [pc, #300]	@ (80062fc <UART_SetConfig+0x2f4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d125      	bne.n	8006220 <UART_SetConfig+0x218>
 80061d4:	4b46      	ldr	r3, [pc, #280]	@ (80062f0 <UART_SetConfig+0x2e8>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061de:	2bc0      	cmp	r3, #192	@ 0xc0
 80061e0:	d016      	beq.n	8006210 <UART_SetConfig+0x208>
 80061e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061e4:	d818      	bhi.n	8006218 <UART_SetConfig+0x210>
 80061e6:	2b80      	cmp	r3, #128	@ 0x80
 80061e8:	d00a      	beq.n	8006200 <UART_SetConfig+0x1f8>
 80061ea:	2b80      	cmp	r3, #128	@ 0x80
 80061ec:	d814      	bhi.n	8006218 <UART_SetConfig+0x210>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <UART_SetConfig+0x1f0>
 80061f2:	2b40      	cmp	r3, #64	@ 0x40
 80061f4:	d008      	beq.n	8006208 <UART_SetConfig+0x200>
 80061f6:	e00f      	b.n	8006218 <UART_SetConfig+0x210>
 80061f8:	2300      	movs	r3, #0
 80061fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061fe:	e042      	b.n	8006286 <UART_SetConfig+0x27e>
 8006200:	2302      	movs	r3, #2
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006206:	e03e      	b.n	8006286 <UART_SetConfig+0x27e>
 8006208:	2304      	movs	r3, #4
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800620e:	e03a      	b.n	8006286 <UART_SetConfig+0x27e>
 8006210:	2308      	movs	r3, #8
 8006212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006216:	e036      	b.n	8006286 <UART_SetConfig+0x27e>
 8006218:	2310      	movs	r3, #16
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621e:	e032      	b.n	8006286 <UART_SetConfig+0x27e>
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a30      	ldr	r2, [pc, #192]	@ (80062e8 <UART_SetConfig+0x2e0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d12a      	bne.n	8006280 <UART_SetConfig+0x278>
 800622a:	4b31      	ldr	r3, [pc, #196]	@ (80062f0 <UART_SetConfig+0x2e8>)
 800622c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006230:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006234:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006238:	d01a      	beq.n	8006270 <UART_SetConfig+0x268>
 800623a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800623e:	d81b      	bhi.n	8006278 <UART_SetConfig+0x270>
 8006240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006244:	d00c      	beq.n	8006260 <UART_SetConfig+0x258>
 8006246:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800624a:	d815      	bhi.n	8006278 <UART_SetConfig+0x270>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <UART_SetConfig+0x250>
 8006250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006254:	d008      	beq.n	8006268 <UART_SetConfig+0x260>
 8006256:	e00f      	b.n	8006278 <UART_SetConfig+0x270>
 8006258:	2300      	movs	r3, #0
 800625a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625e:	e012      	b.n	8006286 <UART_SetConfig+0x27e>
 8006260:	2302      	movs	r3, #2
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006266:	e00e      	b.n	8006286 <UART_SetConfig+0x27e>
 8006268:	2304      	movs	r3, #4
 800626a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800626e:	e00a      	b.n	8006286 <UART_SetConfig+0x27e>
 8006270:	2308      	movs	r3, #8
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006276:	e006      	b.n	8006286 <UART_SetConfig+0x27e>
 8006278:	2310      	movs	r3, #16
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800627e:	e002      	b.n	8006286 <UART_SetConfig+0x27e>
 8006280:	2310      	movs	r3, #16
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a17      	ldr	r2, [pc, #92]	@ (80062e8 <UART_SetConfig+0x2e0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	f040 80a8 	bne.w	80063e2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006292:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006296:	2b08      	cmp	r3, #8
 8006298:	d834      	bhi.n	8006304 <UART_SetConfig+0x2fc>
 800629a:	a201      	add	r2, pc, #4	@ (adr r2, 80062a0 <UART_SetConfig+0x298>)
 800629c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a0:	080062c5 	.word	0x080062c5
 80062a4:	08006305 	.word	0x08006305
 80062a8:	080062cd 	.word	0x080062cd
 80062ac:	08006305 	.word	0x08006305
 80062b0:	080062d3 	.word	0x080062d3
 80062b4:	08006305 	.word	0x08006305
 80062b8:	08006305 	.word	0x08006305
 80062bc:	08006305 	.word	0x08006305
 80062c0:	080062db 	.word	0x080062db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c4:	f7fe f9ae 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 80062c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062ca:	e021      	b.n	8006310 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <UART_SetConfig+0x2f8>)
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062d0:	e01e      	b.n	8006310 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062d2:	f7fe f939 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 80062d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062d8:	e01a      	b.n	8006310 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062e0:	e016      	b.n	8006310 <UART_SetConfig+0x308>
 80062e2:	bf00      	nop
 80062e4:	cfff69f3 	.word	0xcfff69f3
 80062e8:	40008000 	.word	0x40008000
 80062ec:	40013800 	.word	0x40013800
 80062f0:	40021000 	.word	0x40021000
 80062f4:	40004400 	.word	0x40004400
 80062f8:	40004800 	.word	0x40004800
 80062fc:	40004c00 	.word	0x40004c00
 8006300:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800630e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 812a 	beq.w	800656c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631c:	4a9e      	ldr	r2, [pc, #632]	@ (8006598 <UART_SetConfig+0x590>)
 800631e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006322:	461a      	mov	r2, r3
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	fbb3 f3f2 	udiv	r3, r3, r2
 800632a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	4413      	add	r3, r2
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	429a      	cmp	r2, r3
 800633a:	d305      	bcc.n	8006348 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	429a      	cmp	r2, r3
 8006346:	d903      	bls.n	8006350 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800634e:	e10d      	b.n	800656c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	2200      	movs	r2, #0
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	60fa      	str	r2, [r7, #12]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635c:	4a8e      	ldr	r2, [pc, #568]	@ (8006598 <UART_SetConfig+0x590>)
 800635e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006362:	b29b      	uxth	r3, r3
 8006364:	2200      	movs	r2, #0
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	607a      	str	r2, [r7, #4]
 800636a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800636e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006372:	f7fa f8b5 	bl	80004e0 <__aeabi_uldivmod>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4610      	mov	r0, r2
 800637c:	4619      	mov	r1, r3
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	020b      	lsls	r3, r1, #8
 8006388:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800638c:	0202      	lsls	r2, r0, #8
 800638e:	6979      	ldr	r1, [r7, #20]
 8006390:	6849      	ldr	r1, [r1, #4]
 8006392:	0849      	lsrs	r1, r1, #1
 8006394:	2000      	movs	r0, #0
 8006396:	460c      	mov	r4, r1
 8006398:	4605      	mov	r5, r0
 800639a:	eb12 0804 	adds.w	r8, r2, r4
 800639e:	eb43 0905 	adc.w	r9, r3, r5
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	469a      	mov	sl, r3
 80063aa:	4693      	mov	fp, r2
 80063ac:	4652      	mov	r2, sl
 80063ae:	465b      	mov	r3, fp
 80063b0:	4640      	mov	r0, r8
 80063b2:	4649      	mov	r1, r9
 80063b4:	f7fa f894 	bl	80004e0 <__aeabi_uldivmod>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4613      	mov	r3, r2
 80063be:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063c6:	d308      	bcc.n	80063da <UART_SetConfig+0x3d2>
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ce:	d204      	bcs.n	80063da <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6a3a      	ldr	r2, [r7, #32]
 80063d6:	60da      	str	r2, [r3, #12]
 80063d8:	e0c8      	b.n	800656c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063e0:	e0c4      	b.n	800656c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ea:	d167      	bne.n	80064bc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80063ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d828      	bhi.n	8006446 <UART_SetConfig+0x43e>
 80063f4:	a201      	add	r2, pc, #4	@ (adr r2, 80063fc <UART_SetConfig+0x3f4>)
 80063f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fa:	bf00      	nop
 80063fc:	08006421 	.word	0x08006421
 8006400:	08006429 	.word	0x08006429
 8006404:	08006431 	.word	0x08006431
 8006408:	08006447 	.word	0x08006447
 800640c:	08006437 	.word	0x08006437
 8006410:	08006447 	.word	0x08006447
 8006414:	08006447 	.word	0x08006447
 8006418:	08006447 	.word	0x08006447
 800641c:	0800643f 	.word	0x0800643f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006420:	f7fe f900 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8006424:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006426:	e014      	b.n	8006452 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006428:	f7fe f912 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 800642c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800642e:	e010      	b.n	8006452 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006430:	4b5a      	ldr	r3, [pc, #360]	@ (800659c <UART_SetConfig+0x594>)
 8006432:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006434:	e00d      	b.n	8006452 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006436:	f7fe f887 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 800643a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800643c:	e009      	b.n	8006452 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006442:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006444:	e005      	b.n	8006452 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006450:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8089 	beq.w	800656c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645e:	4a4e      	ldr	r2, [pc, #312]	@ (8006598 <UART_SetConfig+0x590>)
 8006460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006464:	461a      	mov	r2, r3
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	fbb3 f3f2 	udiv	r3, r3, r2
 800646c:	005a      	lsls	r2, r3, #1
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	085b      	lsrs	r3, r3, #1
 8006474:	441a      	add	r2, r3
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	fbb2 f3f3 	udiv	r3, r2, r3
 800647e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	2b0f      	cmp	r3, #15
 8006484:	d916      	bls.n	80064b4 <UART_SetConfig+0x4ac>
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800648c:	d212      	bcs.n	80064b4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f023 030f 	bic.w	r3, r3, #15
 8006496:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	085b      	lsrs	r3, r3, #1
 800649c:	b29b      	uxth	r3, r3
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	8bfb      	ldrh	r3, [r7, #30]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	8bfa      	ldrh	r2, [r7, #30]
 80064b0:	60da      	str	r2, [r3, #12]
 80064b2:	e05b      	b.n	800656c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064ba:	e057      	b.n	800656c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d828      	bhi.n	8006516 <UART_SetConfig+0x50e>
 80064c4:	a201      	add	r2, pc, #4	@ (adr r2, 80064cc <UART_SetConfig+0x4c4>)
 80064c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ca:	bf00      	nop
 80064cc:	080064f1 	.word	0x080064f1
 80064d0:	080064f9 	.word	0x080064f9
 80064d4:	08006501 	.word	0x08006501
 80064d8:	08006517 	.word	0x08006517
 80064dc:	08006507 	.word	0x08006507
 80064e0:	08006517 	.word	0x08006517
 80064e4:	08006517 	.word	0x08006517
 80064e8:	08006517 	.word	0x08006517
 80064ec:	0800650f 	.word	0x0800650f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f0:	f7fe f898 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 80064f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064f6:	e014      	b.n	8006522 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f8:	f7fe f8aa 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 80064fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064fe:	e010      	b.n	8006522 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006500:	4b26      	ldr	r3, [pc, #152]	@ (800659c <UART_SetConfig+0x594>)
 8006502:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006504:	e00d      	b.n	8006522 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006506:	f7fe f81f 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 800650a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800650c:	e009      	b.n	8006522 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006512:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006514:	e005      	b.n	8006522 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006520:	bf00      	nop
    }

    if (pclk != 0U)
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	2b00      	cmp	r3, #0
 8006526:	d021      	beq.n	800656c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652c:	4a1a      	ldr	r2, [pc, #104]	@ (8006598 <UART_SetConfig+0x590>)
 800652e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006532:	461a      	mov	r2, r3
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006536:	fbb3 f2f2 	udiv	r2, r3, r2
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	085b      	lsrs	r3, r3, #1
 8006540:	441a      	add	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	fbb2 f3f3 	udiv	r3, r2, r3
 800654a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	2b0f      	cmp	r3, #15
 8006550:	d909      	bls.n	8006566 <UART_SetConfig+0x55e>
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006558:	d205      	bcs.n	8006566 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	b29a      	uxth	r2, r3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60da      	str	r2, [r3, #12]
 8006564:	e002      	b.n	800656c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2201      	movs	r2, #1
 8006570:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2201      	movs	r2, #1
 8006578:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2200      	movs	r2, #0
 8006580:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2200      	movs	r2, #0
 8006586:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006588:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800658c:	4618      	mov	r0, r3
 800658e:	3730      	adds	r7, #48	@ 0x30
 8006590:	46bd      	mov	sp, r7
 8006592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006596:	bf00      	nop
 8006598:	0800bd84 	.word	0x0800bd84
 800659c:	00f42400 	.word	0x00f42400

080065a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01a      	beq.n	80066b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800669a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800669e:	d10a      	bne.n	80066b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	605a      	str	r2, [r3, #4]
  }
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b098      	sub	sp, #96	@ 0x60
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066f4:	f7fb fd50 	bl	8002198 <HAL_GetTick>
 80066f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b08      	cmp	r3, #8
 8006706:	d12f      	bne.n	8006768 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006708:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006710:	2200      	movs	r2, #0
 8006712:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f88e 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d022      	beq.n	8006768 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006732:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006736:	653b      	str	r3, [r7, #80]	@ 0x50
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006740:	647b      	str	r3, [r7, #68]	@ 0x44
 8006742:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800674e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e6      	bne.n	8006722 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2220      	movs	r2, #32
 8006758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e063      	b.n	8006830 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	2b04      	cmp	r3, #4
 8006774:	d149      	bne.n	800680a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006776:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800677e:	2200      	movs	r2, #0
 8006780:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f857 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d03c      	beq.n	800680a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	623b      	str	r3, [r7, #32]
   return(result);
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80067b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e6      	bne.n	8006790 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067e2:	61fa      	str	r2, [r7, #28]
 80067e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	69b9      	ldr	r1, [r7, #24]
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	617b      	str	r3, [r7, #20]
   return(result);
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e5      	bne.n	80067c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e012      	b.n	8006830 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2220      	movs	r2, #32
 800680e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3758      	adds	r7, #88	@ 0x58
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	4613      	mov	r3, r2
 8006846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006848:	e04f      	b.n	80068ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006850:	d04b      	beq.n	80068ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006852:	f7fb fca1 	bl	8002198 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	429a      	cmp	r2, r3
 8006860:	d302      	bcc.n	8006868 <UART_WaitOnFlagUntilTimeout+0x30>
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e04e      	b.n	800690a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	d037      	beq.n	80068ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b80      	cmp	r3, #128	@ 0x80
 800687e:	d034      	beq.n	80068ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b40      	cmp	r3, #64	@ 0x40
 8006884:	d031      	beq.n	80068ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	f003 0308 	and.w	r3, r3, #8
 8006890:	2b08      	cmp	r3, #8
 8006892:	d110      	bne.n	80068b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2208      	movs	r2, #8
 800689a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f838 	bl	8006912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2208      	movs	r2, #8
 80068a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e029      	b.n	800690a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068c4:	d111      	bne.n	80068ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 f81e 	bl	8006912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2220      	movs	r2, #32
 80068da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e00f      	b.n	800690a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4013      	ands	r3, r2
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	bf0c      	ite	eq
 80068fa:	2301      	moveq	r3, #1
 80068fc:	2300      	movne	r3, #0
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	429a      	cmp	r2, r3
 8006906:	d0a0      	beq.n	800684a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006912:	b480      	push	{r7}
 8006914:	b095      	sub	sp, #84	@ 0x54
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800692e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006938:	643b      	str	r3, [r7, #64]	@ 0x40
 800693a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800693e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e6      	bne.n	800691a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3308      	adds	r3, #8
 8006952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	61fb      	str	r3, [r7, #28]
   return(result);
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006962:	f023 0301 	bic.w	r3, r3, #1
 8006966:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3308      	adds	r3, #8
 800696e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006970:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006972:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006978:	e841 2300 	strex	r3, r2, [r1]
 800697c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1e3      	bne.n	800694c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006988:	2b01      	cmp	r3, #1
 800698a:	d118      	bne.n	80069be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	60bb      	str	r3, [r7, #8]
   return(result);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f023 0310 	bic.w	r3, r3, #16
 80069a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6979      	ldr	r1, [r7, #20]
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	613b      	str	r3, [r7, #16]
   return(result);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e6      	bne.n	800698c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80069d2:	bf00      	nop
 80069d4:	3754      	adds	r7, #84	@ 0x54
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069de:	b480      	push	{r7}
 80069e0:	b085      	sub	sp, #20
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e027      	b.n	8006a44 <HAL_UARTEx_DisableFifoMode+0x66>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2224      	movs	r2, #36	@ 0x24
 8006a00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0201 	bic.w	r2, r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e02d      	b.n	8006ac4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2224      	movs	r2, #36	@ 0x24
 8006a74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0201 	bic.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f84f 	bl	8006b48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e02d      	b.n	8006b40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2224      	movs	r2, #36	@ 0x24
 8006af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0201 	bic.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f811 	bl	8006b48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d108      	bne.n	8006b6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b68:	e031      	b.n	8006bce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b6a:	2308      	movs	r3, #8
 8006b6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b6e:	2308      	movs	r3, #8
 8006b70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	0e5b      	lsrs	r3, r3, #25
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	0f5b      	lsrs	r3, r3, #29
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b92:	7bbb      	ldrb	r3, [r7, #14]
 8006b94:	7b3a      	ldrb	r2, [r7, #12]
 8006b96:	4911      	ldr	r1, [pc, #68]	@ (8006bdc <UARTEx_SetNbDataToProcess+0x94>)
 8006b98:	5c8a      	ldrb	r2, [r1, r2]
 8006b9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b9e:	7b3a      	ldrb	r2, [r7, #12]
 8006ba0:	490f      	ldr	r1, [pc, #60]	@ (8006be0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ba2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ba4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	7b7a      	ldrb	r2, [r7, #13]
 8006bb4:	4909      	ldr	r1, [pc, #36]	@ (8006bdc <UARTEx_SetNbDataToProcess+0x94>)
 8006bb6:	5c8a      	ldrb	r2, [r1, r2]
 8006bb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bbc:	7b7a      	ldrb	r2, [r7, #13]
 8006bbe:	4908      	ldr	r1, [pc, #32]	@ (8006be0 <UARTEx_SetNbDataToProcess+0x98>)
 8006bc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006bce:	bf00      	nop
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	0800bd9c 	.word	0x0800bd9c
 8006be0:	0800bda4 	.word	0x0800bda4

08006be4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b08b      	sub	sp, #44	@ 0x2c
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	fa93 f3a3 	rbit	r3, r3
 8006bfe:	613b      	str	r3, [r7, #16]
  return result;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006c0a:	2320      	movs	r3, #32
 8006c0c:	e003      	b.n	8006c16 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	fab3 f383 	clz	r3, r3
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	2103      	movs	r1, #3
 8006c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1e:	43db      	mvns	r3, r3
 8006c20:	401a      	ands	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	fa93 f3a3 	rbit	r3, r3
 8006c2c:	61fb      	str	r3, [r7, #28]
  return result;
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006c38:	2320      	movs	r3, #32
 8006c3a:	e003      	b.n	8006c44 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3e:	fab3 f383 	clz	r3, r3
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	fa01 f303 	lsl.w	r3, r1, r3
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	601a      	str	r2, [r3, #0]
}
 8006c52:	bf00      	nop
 8006c54:	372c      	adds	r7, #44	@ 0x2c
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	43db      	mvns	r3, r3
 8006c72:	401a      	ands	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	605a      	str	r2, [r3, #4]
}
 8006c82:	bf00      	nop
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b08b      	sub	sp, #44	@ 0x2c
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	fa93 f3a3 	rbit	r3, r3
 8006ca8:	613b      	str	r3, [r7, #16]
  return result;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006cb4:	2320      	movs	r3, #32
 8006cb6:	e003      	b.n	8006cc0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	fab3 f383 	clz	r3, r3
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	2103      	movs	r1, #3
 8006cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	401a      	ands	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	fa93 f3a3 	rbit	r3, r3
 8006cd6:	61fb      	str	r3, [r7, #28]
  return result;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006ce2:	2320      	movs	r3, #32
 8006ce4:	e003      	b.n	8006cee <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	fab3 f383 	clz	r3, r3
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006cfc:	bf00      	nop
 8006cfe:	372c      	adds	r7, #44	@ 0x2c
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b08b      	sub	sp, #44	@ 0x2c
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	fa93 f3a3 	rbit	r3, r3
 8006d22:	613b      	str	r3, [r7, #16]
  return result;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006d2e:	2320      	movs	r3, #32
 8006d30:	e003      	b.n	8006d3a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	fab3 f383 	clz	r3, r3
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	2103      	movs	r1, #3
 8006d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d42:	43db      	mvns	r3, r3
 8006d44:	401a      	ands	r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	fa93 f3a3 	rbit	r3, r3
 8006d50:	61fb      	str	r3, [r7, #28]
  return result;
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006d5c:	2320      	movs	r3, #32
 8006d5e:	e003      	b.n	8006d68 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d62:	fab3 f383 	clz	r3, r3
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d70:	431a      	orrs	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	60da      	str	r2, [r3, #12]
}
 8006d76:	bf00      	nop
 8006d78:	372c      	adds	r7, #44	@ 0x2c
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b08b      	sub	sp, #44	@ 0x2c
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1a      	ldr	r2, [r3, #32]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	fa93 f3a3 	rbit	r3, r3
 8006d9c:	613b      	str	r3, [r7, #16]
  return result;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006da8:	2320      	movs	r3, #32
 8006daa:	e003      	b.n	8006db4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	fab3 f383 	clz	r3, r3
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	210f      	movs	r1, #15
 8006db8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	401a      	ands	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	fa93 f3a3 	rbit	r3, r3
 8006dca:	61fb      	str	r3, [r7, #28]
  return result;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006dd6:	2320      	movs	r3, #32
 8006dd8:	e003      	b.n	8006de2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	fab3 f383 	clz	r3, r3
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dea:	431a      	orrs	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006df0:	bf00      	nop
 8006df2:	372c      	adds	r7, #44	@ 0x2c
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b08b      	sub	sp, #44	@ 0x2c
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	0a1b      	lsrs	r3, r3, #8
 8006e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	fa93 f3a3 	rbit	r3, r3
 8006e18:	613b      	str	r3, [r7, #16]
  return result;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006e24:	2320      	movs	r3, #32
 8006e26:	e003      	b.n	8006e30 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	fab3 f383 	clz	r3, r3
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	210f      	movs	r1, #15
 8006e34:	fa01 f303 	lsl.w	r3, r1, r3
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	0a1b      	lsrs	r3, r3, #8
 8006e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	fa93 f3a3 	rbit	r3, r3
 8006e48:	61fb      	str	r3, [r7, #28]
  return result;
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006e54:	2320      	movs	r3, #32
 8006e56:	e003      	b.n	8006e60 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5a:	fab3 f383 	clz	r3, r3
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	fa01 f303 	lsl.w	r3, r1, r3
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006e6e:	bf00      	nop
 8006e70:	372c      	adds	r7, #44	@ 0x2c
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b088      	sub	sp, #32
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	fa93 f3a3 	rbit	r3, r3
 8006e90:	60fb      	str	r3, [r7, #12]
  return result;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <LL_GPIO_Init+0x26>
    return 32U;
 8006e9c:	2320      	movs	r3, #32
 8006e9e:	e003      	b.n	8006ea8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	fab3 f383 	clz	r3, r3
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006eaa:	e048      	b.n	8006f3e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb8:	4013      	ands	r3, r2
 8006eba:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d03a      	beq.n	8006f38 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d003      	beq.n	8006ed2 <LL_GPIO_Init+0x58>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d10e      	bne.n	8006ef0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	69b9      	ldr	r1, [r7, #24]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff fed7 	bl	8006c8e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	6819      	ldr	r1, [r3, #0]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff feb7 	bl	8006c5e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	69b9      	ldr	r1, [r7, #24]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff ff05 	bl	8006d08 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d111      	bne.n	8006f2a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	2bff      	cmp	r3, #255	@ 0xff
 8006f0a:	d807      	bhi.n	8006f1c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	461a      	mov	r2, r3
 8006f12:	69b9      	ldr	r1, [r7, #24]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff ff34 	bl	8006d82 <LL_GPIO_SetAFPin_0_7>
 8006f1a:	e006      	b.n	8006f2a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	461a      	mov	r2, r3
 8006f22:	69b9      	ldr	r1, [r7, #24]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff ff69 	bl	8006dfc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	69b9      	ldr	r1, [r7, #24]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff fe56 	bl	8006be4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1af      	bne.n	8006eac <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3720      	adds	r7, #32
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	601a      	str	r2, [r3, #0]
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
	...

08006f78 <LL_APB1_GRP2_EnableClock>:
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006f80:	4b08      	ldr	r3, [pc, #32]	@ (8006fa4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8006f82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f84:	4907      	ldr	r1, [pc, #28]	@ (8006fa4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006f8c:	4b05      	ldr	r3, [pc, #20]	@ (8006fa4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8006f8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4013      	ands	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f96:	68fb      	ldr	r3, [r7, #12]
}
 8006f98:	bf00      	nop
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	40021000 	.word	0x40021000

08006fa8 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, const LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a11      	ldr	r2, [pc, #68]	@ (8006ffc <LL_UCPD_Init+0x54>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d103      	bne.n	8006fc2 <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8006fba:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006fbe:	f7ff ffdb 	bl	8006f78 <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff ffc7 	bl	8006f56 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8007000 <LL_UCPD_Init+0x58>)
 8006fce:	4013      	ands	r3, r2
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	6811      	ldr	r1, [r2, #0]
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	6852      	ldr	r2, [r2, #4]
 8006fd8:	02d2      	lsls	r2, r2, #11
 8006fda:	4311      	orrs	r1, r2
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	6892      	ldr	r2, [r2, #8]
 8006fe0:	0192      	lsls	r2, r2, #6
 8006fe2:	4311      	orrs	r1, r2
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	68d2      	ldr	r2, [r2, #12]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	4000a000 	.word	0x4000a000
 8007000:	fff10000 	.word	0xfff10000

08007004 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007012:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2207      	movs	r2, #7
 8007018:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2210      	movs	r2, #16
 800701e:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	220d      	movs	r2, #13
 8007024:	60da      	str	r2, [r3, #12]
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
	...

08007034 <__NVIC_EnableIRQ>:
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800703e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007042:	2b00      	cmp	r3, #0
 8007044:	db0b      	blt.n	800705e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	f003 021f 	and.w	r2, r3, #31
 800704c:	4907      	ldr	r1, [pc, #28]	@ (800706c <__NVIC_EnableIRQ+0x38>)
 800704e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007052:	095b      	lsrs	r3, r3, #5
 8007054:	2001      	movs	r0, #1
 8007056:	fa00 f202 	lsl.w	r2, r0, r2
 800705a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	e000e100 	.word	0xe000e100

08007070 <__NVIC_SetPriority>:
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	6039      	str	r1, [r7, #0]
 800707a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800707c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007080:	2b00      	cmp	r3, #0
 8007082:	db0a      	blt.n	800709a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	b2da      	uxtb	r2, r3
 8007088:	490c      	ldr	r1, [pc, #48]	@ (80070bc <__NVIC_SetPriority+0x4c>)
 800708a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800708e:	0112      	lsls	r2, r2, #4
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	440b      	add	r3, r1
 8007094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007098:	e00a      	b.n	80070b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	b2da      	uxtb	r2, r3
 800709e:	4908      	ldr	r1, [pc, #32]	@ (80070c0 <__NVIC_SetPriority+0x50>)
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	3b04      	subs	r3, #4
 80070a8:	0112      	lsls	r2, r2, #4
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	440b      	add	r3, r1
 80070ae:	761a      	strb	r2, [r3, #24]
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	e000e100 	.word	0xe000e100
 80070c0:	e000ed00 	.word	0xe000ed00

080070c4 <LL_AHB2_GRP1_EnableClock>:
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80070cc:	4b08      	ldr	r3, [pc, #32]	@ (80070f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80070ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070d0:	4907      	ldr	r1, [pc, #28]	@ (80070f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80070d8:	4b05      	ldr	r3, [pc, #20]	@ (80070f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80070da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4013      	ands	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80070e2:	68fb      	ldr	r3, [r7, #12]
}
 80070e4:	bf00      	nop
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	40021000 	.word	0x40021000

080070f4 <LL_GPIO_SetPinMode>:
{
 80070f4:	b480      	push	{r7}
 80070f6:	b08b      	sub	sp, #44	@ 0x2c
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	fa93 f3a3 	rbit	r3, r3
 800710e:	613b      	str	r3, [r7, #16]
  return result;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800711a:	2320      	movs	r3, #32
 800711c:	e003      	b.n	8007126 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	fab3 f383 	clz	r3, r3
 8007124:	b2db      	uxtb	r3, r3
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	2103      	movs	r1, #3
 800712a:	fa01 f303 	lsl.w	r3, r1, r3
 800712e:	43db      	mvns	r3, r3
 8007130:	401a      	ands	r2, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	fa93 f3a3 	rbit	r3, r3
 800713c:	61fb      	str	r3, [r7, #28]
  return result;
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007148:	2320      	movs	r3, #32
 800714a:	e003      	b.n	8007154 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714e:	fab3 f383 	clz	r3, r3
 8007152:	b2db      	uxtb	r3, r3
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	fa01 f303 	lsl.w	r3, r1, r3
 800715c:	431a      	orrs	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	601a      	str	r2, [r3, #0]
}
 8007162:	bf00      	nop
 8007164:	372c      	adds	r7, #44	@ 0x2c
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <LL_GPIO_SetPinPull>:
{
 800716e:	b480      	push	{r7}
 8007170:	b08b      	sub	sp, #44	@ 0x2c
 8007172:	af00      	add	r7, sp, #0
 8007174:	60f8      	str	r0, [r7, #12]
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	fa93 f3a3 	rbit	r3, r3
 8007188:	613b      	str	r3, [r7, #16]
  return result;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007194:	2320      	movs	r3, #32
 8007196:	e003      	b.n	80071a0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	fab3 f383 	clz	r3, r3
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	005b      	lsls	r3, r3, #1
 80071a2:	2103      	movs	r1, #3
 80071a4:	fa01 f303 	lsl.w	r3, r1, r3
 80071a8:	43db      	mvns	r3, r3
 80071aa:	401a      	ands	r2, r3
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	fa93 f3a3 	rbit	r3, r3
 80071b6:	61fb      	str	r3, [r7, #28]
  return result;
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80071c2:	2320      	movs	r3, #32
 80071c4:	e003      	b.n	80071ce <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	fab3 f383 	clz	r3, r3
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	fa01 f303 	lsl.w	r3, r1, r3
 80071d6:	431a      	orrs	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	60da      	str	r2, [r3, #12]
}
 80071dc:	bf00      	nop
 80071de:	372c      	adds	r7, #44	@ 0x2c
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <LL_UCPD_Enable>:
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800721a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	431a      	orrs	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	601a      	str	r2, [r3, #0]
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60da      	str	r2, [r3, #12]
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	611a      	str	r2, [r3, #16]
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	611a      	str	r2, [r3, #16]
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800729c:	4b05      	ldr	r3, [pc, #20]	@ (80072b4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	4a04      	ldr	r2, [pc, #16]	@ (80072b4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80072a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80072a6:	6093      	str	r3, [r2, #8]
}
 80072a8:	bf00      	nop
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	40007000 	.word	0x40007000

080072b8 <CAD_Init>:
  * @param  pParams       Pointer on PD parameters based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 80072b8:	b590      	push	{r4, r7, lr}
 80072ba:	b08b      	sub	sp, #44	@ 0x2c
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	607a      	str	r2, [r7, #4]
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	4603      	mov	r3, r0
 80072c6:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80072c8:	7bfa      	ldrb	r2, [r7, #15]
 80072ca:	4613      	mov	r3, r2
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4a6c      	ldr	r2, [pc, #432]	@ (8007484 <CAD_Init+0x1cc>)
 80072d4:	4413      	add	r3, r2
 80072d6:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 80072d8:	7bfa      	ldrb	r2, [r7, #15]
 80072da:	496b      	ldr	r1, [pc, #428]	@ (8007488 <CAD_Init+0x1d0>)
 80072dc:	4613      	mov	r3, r2
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	1a9b      	subs	r3, r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	3310      	adds	r3, #16
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 80072ec:	7bfa      	ldrb	r2, [r7, #15]
 80072ee:	4966      	ldr	r1, [pc, #408]	@ (8007488 <CAD_Init+0x1d0>)
 80072f0:	4613      	mov	r3, r2
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	330c      	adds	r3, #12
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8007300:	7bfa      	ldrb	r2, [r7, #15]
 8007302:	4961      	ldr	r1, [pc, #388]	@ (8007488 <CAD_Init+0x1d0>)
 8007304:	4613      	mov	r3, r2
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	1a9b      	subs	r3, r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	440b      	add	r3, r1
 800730e:	330c      	adds	r3, #12
 8007310:	6819      	ldr	r1, [r3, #0]
 8007312:	7bfa      	ldrb	r2, [r7, #15]
 8007314:	485c      	ldr	r0, [pc, #368]	@ (8007488 <CAD_Init+0x1d0>)
 8007316:	4613      	mov	r3, r2
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4403      	add	r3, r0
 8007320:	3310      	adds	r3, #16
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	780b      	ldrb	r3, [r1, #0]
 8007326:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800732a:	b2d9      	uxtb	r1, r3
 800732c:	7893      	ldrb	r3, [r2, #2]
 800732e:	f361 0301 	bfi	r3, r1, #0, #2
 8007332:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 8007334:	7bfa      	ldrb	r2, [r7, #15]
 8007336:	4954      	ldr	r1, [pc, #336]	@ (8007488 <CAD_Init+0x1d0>)
 8007338:	4613      	mov	r3, r2
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	1a9b      	subs	r3, r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	440b      	add	r3, r1
 8007342:	3310      	adds	r3, #16
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	7893      	ldrb	r3, [r2, #2]
 8007348:	f36f 0383 	bfc	r3, #2, #2
 800734c:	7093      	strb	r3, [r2, #2]

  /* Reset handle */
  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800734e:	220c      	movs	r2, #12
 8007350:	2100      	movs	r1, #0
 8007352:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007354:	f003 fcac 	bl	800acb0 <memset>

  /* Register CAD wake up callback */
  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 8007358:	7bfa      	ldrb	r2, [r7, #15]
 800735a:	494b      	ldr	r1, [pc, #300]	@ (8007488 <CAD_Init+0x1d0>)
 800735c:	4613      	mov	r3, r2
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	1a9b      	subs	r3, r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	332c      	adds	r3, #44	@ 0x2c
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800736c:	7bfc      	ldrb	r4, [r7, #15]
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	4618      	mov	r0, r3
 8007372:	f000 fbed 	bl	8007b50 <USBPD_HW_GetUSPDInstance>
 8007376:	4602      	mov	r2, r0
 8007378:	4943      	ldr	r1, [pc, #268]	@ (8007488 <CAD_Init+0x1d0>)
 800737a:	4623      	mov	r3, r4
 800737c:	011b      	lsls	r3, r3, #4
 800737e:	1b1b      	subs	r3, r3, r4
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	440b      	add	r3, r1
 8007384:	601a      	str	r2, [r3, #0]

  /* Initialize UCPD */
  LL_UCPD_StructInit(&settings);
 8007386:	f107 0314 	add.w	r3, r7, #20
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff fe3a 	bl	8007004 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 8007390:	7bfa      	ldrb	r2, [r7, #15]
 8007392:	493d      	ldr	r1, [pc, #244]	@ (8007488 <CAD_Init+0x1d0>)
 8007394:	4613      	mov	r3, r2
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	1a9b      	subs	r3, r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f107 0214 	add.w	r2, r7, #20
 80073a4:	4611      	mov	r1, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff fdfe 	bl	8006fa8 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 80073ac:	7bfa      	ldrb	r2, [r7, #15]
 80073ae:	4936      	ldr	r1, [pc, #216]	@ (8007488 <CAD_Init+0x1d0>)
 80073b0:	4613      	mov	r3, r2
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	1a9b      	subs	r3, r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff ff21 	bl	8007208 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80073c6:	7bfa      	ldrb	r2, [r7, #15]
 80073c8:	492f      	ldr	r1, [pc, #188]	@ (8007488 <CAD_Init+0x1d0>)
 80073ca:	4613      	mov	r3, r2
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	1a9b      	subs	r3, r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	440b      	add	r3, r1
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff ff29 	bl	8007232 <LL_UCPD_SetccEnable>
#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */

  /* Disable dead battery */
  LL_PWR_DisableUCPDDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 80073e0:	f7ff ff5a 	bl	8007298 <LL_PWR_DisableUCPDDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 80073e4:	2002      	movs	r0, #2
 80073e6:	f7ff fe6d 	bl	80070c4 <LL_AHB2_GRP1_EnableClock>

  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 80073ea:	2203      	movs	r2, #3
 80073ec:	2140      	movs	r1, #64	@ 0x40
 80073ee:	4827      	ldr	r0, [pc, #156]	@ (800748c <CAD_Init+0x1d4>)
 80073f0:	f7ff fe80 	bl	80070f4 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 80073f4:	2203      	movs	r2, #3
 80073f6:	2110      	movs	r1, #16
 80073f8:	4824      	ldr	r0, [pc, #144]	@ (800748c <CAD_Init+0x1d4>)
 80073fa:	f7ff fe7b 	bl	80070f4 <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 80073fe:	2200      	movs	r2, #0
 8007400:	2140      	movs	r1, #64	@ 0x40
 8007402:	4822      	ldr	r0, [pc, #136]	@ (800748c <CAD_Init+0x1d4>)
 8007404:	f7ff feb3 	bl	800716e <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8007408:	2200      	movs	r2, #0
 800740a:	2110      	movs	r1, #16
 800740c:	481f      	ldr	r0, [pc, #124]	@ (800748c <CAD_Init+0x1d4>)
 800740e:	f7ff feae 	bl	800716e <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	4618      	mov	r0, r3
 8007416:	f002 ffc3 	bl	800a3a0 <BSP_USBPD_PWR_Init>
  /* Register VBUS detect callback */
  BSP_USBPD_PWR_RegisterVBUSDetectCallback(PortNum, CAD_HW_IF_VBUSDetectCallback);
#endif /* TCPP0203_SUPPORT */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800741a:	7bfa      	ldrb	r2, [r7, #15]
 800741c:	491a      	ldr	r1, [pc, #104]	@ (8007488 <CAD_Init+0x1d0>)
 800741e:	4613      	mov	r3, r2
 8007420:	011b      	lsls	r3, r3, #4
 8007422:	1a9b      	subs	r3, r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff fedc 	bl	80071e8 <LL_UCPD_Enable>

#if defined(_SRC) || defined(_DRP)
  /* Initialize usbpd interrupt */
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 8007430:	7bfa      	ldrb	r2, [r7, #15]
 8007432:	4915      	ldr	r1, [pc, #84]	@ (8007488 <CAD_Init+0x1d0>)
 8007434:	4613      	mov	r3, r2
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	1a9b      	subs	r3, r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	440b      	add	r3, r1
 800743e:	3310      	adds	r3, #16
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <CAD_Init+0x19e>
  {
    USBPDM1_AssertRp(PortNum);
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fed3 	bl	80081fc <USBPDM1_AssertRp>
    }
  }
#else  /* USBPDCORE_LIB_NO_PD */
#if defined(_SRC)
  /* If default role is source */
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].settings->PE_DefaultRole)
 8007456:	7bfa      	ldrb	r2, [r7, #15]
 8007458:	490b      	ldr	r1, [pc, #44]	@ (8007488 <CAD_Init+0x1d0>)
 800745a:	4613      	mov	r3, r2
 800745c:	011b      	lsls	r3, r3, #4
 800745e:	1a9b      	subs	r3, r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	440b      	add	r3, r1
 8007464:	330c      	adds	r3, #12
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <CAD_Init+0x1c2>
  {
    /* Set current state machine to SRC state machine */
    _handle->CAD_PtrStateMachine = CAD_StateMachine_SRC;
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	4a06      	ldr	r2, [pc, #24]	@ (8007490 <CAD_Init+0x1d8>)
 8007478:	609a      	str	r2, [r3, #8]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 800747a:	bf00      	nop
 800747c:	372c      	adds	r7, #44	@ 0x2c
 800747e:	46bd      	mov	sp, r7
 8007480:	bd90      	pop	{r4, r7, pc}
 8007482:	bf00      	nop
 8007484:	20000430 	.word	0x20000430
 8007488:	20000440 	.word	0x20000440
 800748c:	48000400 	.word	0x48000400
 8007490:	080074e1 	.word	0x080074e1

08007494 <CAD_Enter_ErrorRecovery>:
  * @brief  Function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	71fb      	strb	r3, [r7, #7]
  /* Remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 ffdf 	bl	8008464 <USBPDM1_EnterErrorRecovery>
  /* Set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 80074a6:	79fa      	ldrb	r2, [r7, #7]
 80074a8:	490b      	ldr	r1, [pc, #44]	@ (80074d8 <CAD_Enter_ErrorRecovery+0x44>)
 80074aa:	4613      	mov	r3, r2
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	18ca      	adds	r2, r1, r3
 80074b4:	7813      	ldrb	r3, [r2, #0]
 80074b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ba:	7013      	strb	r3, [r2, #0]
  /* Wake up CAD task */
  Ports[PortNum].USBPD_CAD_WakeUp();
 80074bc:	79fa      	ldrb	r2, [r7, #7]
 80074be:	4907      	ldr	r1, [pc, #28]	@ (80074dc <CAD_Enter_ErrorRecovery+0x48>)
 80074c0:	4613      	mov	r3, r2
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	332c      	adds	r3, #44	@ 0x2c
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4798      	blx	r3
}
 80074d0:	bf00      	nop
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20000430 	.word	0x20000430
 80074dc:	20000440 	.word	0x20000440

080074e0 <CAD_StateMachine_SRC>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
uint32_t CAD_StateMachine_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80074ee:	7bfa      	ldrb	r2, [r7, #15]
 80074f0:	4613      	mov	r3, r2
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4a2d      	ldr	r2, [pc, #180]	@ (80075b0 <CAD_StateMachine_SRC+0xd0>)
 80074fa:	4413      	add	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80074fe:	2302      	movs	r3, #2
 8007500:	617b      	str	r3, [r7, #20]

  /*Check CAD STATE*/
  switch (_handle->cstate)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800750a:	b2db      	uxtb	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	2b0a      	cmp	r3, #10
 8007510:	d847      	bhi.n	80075a2 <CAD_StateMachine_SRC+0xc2>
 8007512:	a201      	add	r2, pc, #4	@ (adr r2, 8007518 <CAD_StateMachine_SRC+0x38>)
 8007514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007518:	08007567 	.word	0x08007567
 800751c:	08007573 	.word	0x08007573
 8007520:	08007593 	.word	0x08007593
 8007524:	08007583 	.word	0x08007583
 8007528:	08007593 	.word	0x08007593
 800752c:	080075a3 	.word	0x080075a3
 8007530:	080075a3 	.word	0x080075a3
 8007534:	080075a3 	.word	0x080075a3
 8007538:	08007567 	.word	0x08007567
 800753c:	080075a3 	.word	0x080075a3
 8007540:	08007545 	.word	0x08007545
#if defined(_VCONN_SUPPORT)
      /* DeInitialize Vconn management */
      (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
      /* DeInitialise VBUS power */
      (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	4618      	mov	r0, r3
 8007548:	f002 ff50 	bl	800a3ec <BSP_USBPD_PWR_VBUSDeInit>
      /* Reset the resistor */
      USBPDM1_AssertRp(PortNum);
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fe54 	bl	80081fc <USBPDM1_AssertRp>
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	7853      	ldrb	r3, [r2, #1]
 8007558:	2101      	movs	r1, #1
 800755a:	f361 0345 	bfi	r3, r1, #1, #5
 800755e:	7053      	strb	r3, [r2, #1]
      _timing = 0;
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]
      break;
 8007564:	e01e      	b.n	80075a4 <CAD_StateMachine_SRC+0xc4>
    }

    case USBPD_CAD_STATE_SWITCH_TO_SNK :
    case USBPD_CAD_STATE_DETACHED:
    {
      _timing = ManageStateDetached_SRC(PortNum);
 8007566:	7bfb      	ldrb	r3, [r7, #15]
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f8e5 	bl	8007738 <ManageStateDetached_SRC>
 800756e:	6178      	str	r0, [r7, #20]
      break;
 8007570:	e018      	b.n	80075a4 <CAD_StateMachine_SRC+0xc4>
    }

    case USBPD_CAD_STATE_ATTACHED_WAIT:
    {
      _timing = ManageStateAttachedWait_SRC(PortNum, pEvent, pCCXX);
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	68b9      	ldr	r1, [r7, #8]
 8007578:	4618      	mov	r0, r3
 800757a:	f000 f933 	bl	80077e4 <ManageStateAttachedWait_SRC>
 800757e:	6178      	str	r0, [r7, #20]
      break;
 8007580:	e010      	b.n	80075a4 <CAD_StateMachine_SRC+0xc4>
    }
#endif /* _ACCESSORY_SRC */

    case USBPD_CAD_STATE_EMC :
    {
      _timing = ManageStateEMC(PortNum, pEvent, pCCXX);
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	4618      	mov	r0, r3
 800758a:	f000 fa07 	bl	800799c <ManageStateEMC>
 800758e:	6178      	str	r0, [r7, #20]
      break;
 8007590:	e008      	b.n	80075a4 <CAD_StateMachine_SRC+0xc4>

    /*CAD electronic cable with Sink ATTACHED*/
    case USBPD_CAD_STATE_ATTEMC:
    case USBPD_CAD_STATE_ATTACHED:
    {
      _timing = ManageStateAttached_SRC(PortNum, pEvent, pCCXX);
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	68b9      	ldr	r1, [r7, #8]
 8007598:	4618      	mov	r0, r3
 800759a:	f000 fa49 	bl	8007a30 <ManageStateAttached_SRC>
 800759e:	6178      	str	r0, [r7, #20]
      break;
 80075a0:	e000      	b.n	80075a4 <CAD_StateMachine_SRC+0xc4>
    }

    default :
    {
      break;
 80075a2:	bf00      	nop
    }
  }

  return _timing;
 80075a4:	697b      	ldr	r3, [r7, #20]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000430 	.word	0x20000430

080075b4 <CAD_StateMachine>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80075c2:	7bfa      	ldrb	r2, [r7, #15]
 80075c4:	4613      	mov	r3, r2
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4a1f      	ldr	r2, [pc, #124]	@ (800764c <CAD_StateMachine+0x98>)
 80075ce:	4413      	add	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80075d2:	2302      	movs	r3, #2
 80075d4:	617b      	str	r3, [r7, #20]

  /* Set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]

  switch (_handle->cstate)
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	785b      	ldrb	r3, [r3, #1]
 80075e0:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d123      	bne.n	8007632 <CAD_StateMachine+0x7e>
  {
    case USBPD_CAD_STATE_RESET:
    {
#ifndef _LOW_POWER
      /* Enable TypeCEvents Interrupts */
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 80075ea:	7bfa      	ldrb	r2, [r7, #15]
 80075ec:	4918      	ldr	r1, [pc, #96]	@ (8007650 <CAD_StateMachine+0x9c>)
 80075ee:	4613      	mov	r3, r2
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	1a9b      	subs	r3, r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fe2c 	bl	8007258 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 8007600:	7bfa      	ldrb	r2, [r7, #15]
 8007602:	4913      	ldr	r1, [pc, #76]	@ (8007650 <CAD_StateMachine+0x9c>)
 8007604:	4613      	mov	r3, r2
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	1a9b      	subs	r3, r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	440b      	add	r3, r1
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f7ff fe31 	bl	8007278 <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER */

      /* Enable IRQ */
      UCPD_INSTANCE0_ENABLEIRQ;
 8007616:	2104      	movs	r1, #4
 8007618:	203f      	movs	r0, #63	@ 0x3f
 800761a:	f7ff fd29 	bl	8007070 <__NVIC_SetPriority>
 800761e:	203f      	movs	r0, #63	@ 0x3f
 8007620:	f7ff fd08 	bl	8007034 <__NVIC_EnableIRQ>
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	7853      	ldrb	r3, [r2, #1]
 8007628:	2101      	movs	r1, #1
 800762a:	f361 0345 	bfi	r3, r1, #1, #5
 800762e:	7053      	strb	r3, [r2, #1]
      break;
 8007630:	e007      	b.n	8007642 <CAD_StateMachine+0x8e>
    }

    default:
    {
      /* Call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	7bf8      	ldrb	r0, [r7, #15]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	4798      	blx	r3
 800763e:	6178      	str	r0, [r7, #20]
      break;
 8007640:	bf00      	nop
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 8007642:	697b      	ldr	r3, [r7, #20]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	20000430 	.word	0x20000430
 8007650:	20000440 	.word	0x20000440

08007654 <CAD_Check_HW_SRC>:
  * @brief  Check CCx HW condition
  * @param  PortNum Port
  * @retval none
  */
void CAD_Check_HW_SRC(uint8_t PortNum)
{
 8007654:	b4b0      	push	{r4, r5, r7}
 8007656:	b093      	sub	sp, #76	@ 0x4c
 8007658:	af00      	add	r7, sp, #0
 800765a:	4603      	mov	r3, r0
 800765c:	71fb      	strb	r3, [r7, #7]
#if !defined(_RTOS)
  uint32_t CC1_value_temp;
  uint32_t CC2_value_temp;
#endif /* !_RTOS */
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800765e:	79fa      	ldrb	r2, [r7, #7]
 8007660:	4613      	mov	r3, r2
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	4413      	add	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4a2f      	ldr	r2, [pc, #188]	@ (8007728 <CAD_Check_HW_SRC+0xd4>)
 800766a:	4413      	add	r3, r2
 800766c:	647b      	str	r3, [r7, #68]	@ 0x44
  CC2_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800766e:	79fa      	ldrb	r2, [r7, #7]
 8007670:	492e      	ldr	r1, [pc, #184]	@ (800772c <CAD_Check_HW_SRC+0xd8>)
 8007672:	4613      	mov	r3, r2
 8007674:	011b      	lsls	r3, r3, #4
 8007676:	1a9b      	subs	r3, r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	0c1b      	lsrs	r3, r3, #16
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	643b      	str	r3, [r7, #64]	@ 0x40
  CC2_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;
 8007688:	79fa      	ldrb	r2, [r7, #7]
 800768a:	4928      	ldr	r1, [pc, #160]	@ (800772c <CAD_Check_HW_SRC+0xd8>)
 800768c:	4613      	mov	r3, r2
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	1a9b      	subs	r3, r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	440b      	add	r3, r1
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	0c9b      	lsrs	r3, r3, #18
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  {
    return;
  }
#endif /* !_RTOS */

  const CCxPin_TypeDef table_cc[] =
 80076a2:	4b23      	ldr	r3, [pc, #140]	@ (8007730 <CAD_Check_HW_SRC+0xdc>)
 80076a4:	f107 0418 	add.w	r4, r7, #24
 80076a8:	461d      	mov	r5, r3
 80076aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076b2:	682b      	ldr	r3, [r5, #0]
 80076b4:	6023      	str	r3, [r4, #0]
    CCNONE,  CC2,       CC2,
    CC1,     CCNONE,   CC1,
    CC1,     CC2,       CCNONE
  };

  const CAD_HW_Condition_TypeDef table_CurrentHWcondition[] =
 80076b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007734 <CAD_Check_HW_SRC+0xe0>)
 80076b8:	f107 030c 	add.w	r3, r7, #12
 80076bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80076be:	c303      	stmia	r3!, {r0, r1}
 80076c0:	701a      	strb	r2, [r3, #0]
    HW_AudioAdapter_Attachment,  HW_PwrCable_Sink_Attachment, HW_PwrCable_NoSink_Attachment,
    HW_PwrCable_Sink_Attachment,         HW_Debug_Attachment,                 HW_Attachment,
    HW_PwrCable_NoSink_Attachment,             HW_Attachment,                 HW_Detachment
  };

  if (CC1_value * 3 + CC2_value < 9)
 80076c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076c4:	4613      	mov	r3, r2
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	441a      	add	r2, r3
 80076ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076cc:	4413      	add	r3, r2
 80076ce:	2b08      	cmp	r3, #8
 80076d0:	d824      	bhi.n	800771c <CAD_Check_HW_SRC+0xc8>
  {
    _handle->cc  = table_cc[CC1_value * 3 + CC2_value];
 80076d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076d4:	4613      	mov	r3, r2
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	441a      	add	r2, r3
 80076da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	3348      	adds	r3, #72	@ 0x48
 80076e2:	443b      	add	r3, r7
 80076e4:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	b2d9      	uxtb	r1, r3
 80076ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076f0:	7813      	ldrb	r3, [r2, #0]
 80076f2:	f361 0301 	bfi	r3, r1, #0, #2
 80076f6:	7013      	strb	r3, [r2, #0]
    _handle->CurrentHWcondition     = table_CurrentHWcondition[CC1_value * 3 + CC2_value];
 80076f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076fa:	4613      	mov	r3, r2
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	441a      	add	r2, r3
 8007700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007702:	4413      	add	r3, r2
 8007704:	3348      	adds	r3, #72	@ 0x48
 8007706:	443b      	add	r3, r7
 8007708:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	b2d9      	uxtb	r1, r3
 8007712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007714:	7813      	ldrb	r3, [r2, #0]
 8007716:	f361 0384 	bfi	r3, r1, #2, #3
 800771a:	7013      	strb	r3, [r2, #0]
  }
}
 800771c:	bf00      	nop
 800771e:	374c      	adds	r7, #76	@ 0x4c
 8007720:	46bd      	mov	sp, r7
 8007722:	bcb0      	pop	{r4, r5, r7}
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	20000430 	.word	0x20000430
 800772c:	20000440 	.word	0x20000440
 8007730:	0800bcb0 	.word	0x0800bcb0
 8007734:	0800bcd4 	.word	0x0800bcd4

08007738 <ManageStateDetached_SRC>:
  * @brief  Manage the detached state for source role
  * @param  PortNum Port
  * @retval Timeout value
  */
static uint32_t ManageStateDetached_SRC(uint8_t PortNum)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8007742:	79fa      	ldrb	r2, [r7, #7]
 8007744:	4613      	mov	r3, r2
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4a24      	ldr	r2, [pc, #144]	@ (80077e0 <ManageStateDetached_SRC+0xa8>)
 800774e:	4413      	add	r3, r2
 8007750:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8007752:	2302      	movs	r3, #2
 8007754:	60fb      	str	r3, [r7, #12]

  if (_handle->CAD_ResistorUpdateflag == USBPD_TRUE)
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	785b      	ldrb	r3, [r3, #1]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <ManageStateDetached_SRC+0x44>
  {
    /* Update the resistor value */
    USBPDM1_AssertRp(PortNum);
 8007764:	79fb      	ldrb	r3, [r7, #7]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fd48 	bl	80081fc <USBPDM1_AssertRp>
    _handle->CAD_ResistorUpdateflag = USBPD_FALSE;
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	7853      	ldrb	r3, [r2, #1]
 8007770:	f36f 0300 	bfc	r3, #0, #1
 8007774:	7053      	strb	r3, [r2, #1]

    /* Let time to internal state machine update */
    HAL_Delay(1);
 8007776:	2001      	movs	r0, #1
 8007778:	f7fa fd1a 	bl	80021b0 <HAL_Delay>
  }

  CAD_Check_HW_SRC(PortNum);
 800777c:	79fb      	ldrb	r3, [r7, #7]
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff ff68 	bl	8007654 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	f003 031c 	and.w	r3, r3, #28
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d103      	bne.n	800779a <ManageStateDetached_SRC+0x62>
  {
#if defined(_LOW_POWER)
    /* Value returned for a SRC */
    _timing = CAD_DETACH_POLLING;
#else
    _timing = CAD_INFINITE_TIME;
 8007792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e01c      	b.n	80077d4 <ManageStateDetached_SRC+0x9c>
#endif /* _LOW_POWER */
  }
  else
  {
    if (_handle->CurrentHWcondition == HW_PwrCable_NoSink_Attachment)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	f003 031c 	and.w	r3, r3, #28
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b08      	cmp	r3, #8
 80077a6:	d106      	bne.n	80077b6 <ManageStateDetached_SRC+0x7e>
    {
      _handle->cstate = USBPD_CAD_STATE_EMC;
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	7853      	ldrb	r3, [r2, #1]
 80077ac:	2104      	movs	r1, #4
 80077ae:	f361 0345 	bfi	r3, r1, #1, #5
 80077b2:	7053      	strb	r3, [r2, #1]
 80077b4:	e00e      	b.n	80077d4 <ManageStateDetached_SRC+0x9c>
    }
    else
    {
      /* Get the time of this event */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 80077b6:	f7fa fcef 	bl	8002198 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	605a      	str	r2, [r3, #4]
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	7853      	ldrb	r3, [r2, #1]
 80077c4:	2102      	movs	r1, #2
 80077c6:	f361 0345 	bfi	r3, r1, #1, #5
 80077ca:	7053      	strb	r3, [r2, #1]

      BSP_USBPD_PWR_VBUSInit(PortNum);
 80077cc:	79fb      	ldrb	r3, [r7, #7]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f002 fdf9 	bl	800a3c6 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 80077d4:	68fb      	ldr	r3, [r7, #12]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000430 	.word	0x20000430

080077e4 <ManageStateAttachedWait_SRC>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttachedWait_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80077f2:	7bfa      	ldrb	r2, [r7, #15]
 80077f4:	4613      	mov	r3, r2
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	4413      	add	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4a66      	ldr	r2, [pc, #408]	@ (8007998 <ManageStateAttachedWait_SRC+0x1b4>)
 80077fe:	4413      	add	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8007802:	2302      	movs	r3, #2
 8007804:	61fb      	str	r3, [r7, #28]

  /* Evaluate elapsed time in Attach_Wait state */
  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8007806:	f7fa fcc7 	bl	8002198 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SRC(PortNum);
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff ff1c 	bl	8007654 <CAD_Check_HW_SRC>

  if ((_handle->CurrentHWcondition != HW_Detachment) && (_handle->CurrentHWcondition != HW_PwrCable_NoSink_Attachment))
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	f003 031c 	and.w	r3, r3, #28
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 8086 	beq.w	8007938 <ManageStateAttachedWait_SRC+0x154>
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	f003 031c 	and.w	r3, r3, #28
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b08      	cmp	r3, #8
 8007838:	d07e      	beq.n	8007938 <ManageStateAttachedWait_SRC+0x154>
  {
    if (USBPD_FALSE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_BELOWVSAFE0V))
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	2100      	movs	r1, #0
 800783e:	4618      	mov	r0, r3
 8007840:	f002 fd72 	bl	800a328 <USBPD_PWR_IF_GetVBUSStatus>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <ManageStateAttachedWait_SRC+0x74>
    {
      /* Reset the timing because VBUS threshold not yet reach */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800784a:	f7fa fca5 	bl	8002198 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	605a      	str	r2, [r3, #4]
      return CAD_TCCDEBOUNCE_THRESHOLD;
 8007854:	2378      	movs	r3, #120	@ 0x78
 8007856:	e09b      	b.n	8007990 <ManageStateAttachedWait_SRC+0x1ac>
    }

    /* Check tCCDebounce */
    if (CAD_tDebounce > CAD_TCCDEBOUNCE_THRESHOLD)
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2b78      	cmp	r3, #120	@ 0x78
 800785c:	d966      	bls.n	800792c <ManageStateAttachedWait_SRC+0x148>
    {
      switch (_handle->CurrentHWcondition)
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b03      	cmp	r3, #3
 800786a:	d023      	beq.n	80078b4 <ManageStateAttachedWait_SRC+0xd0>
 800786c:	2b03      	cmp	r3, #3
 800786e:	dc4c      	bgt.n	800790a <ManageStateAttachedWait_SRC+0x126>
 8007870:	2b01      	cmp	r3, #1
 8007872:	d002      	beq.n	800787a <ManageStateAttachedWait_SRC+0x96>
 8007874:	2b02      	cmp	r3, #2
 8007876:	d032      	beq.n	80078de <ManageStateAttachedWait_SRC+0xfa>
 8007878:	e047      	b.n	800790a <ManageStateAttachedWait_SRC+0x126>
      {
        case HW_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007882:	b2db      	uxtb	r3, r3
 8007884:	461a      	mov	r2, r3
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	4611      	mov	r1, r2
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fe18 	bl	80084c0 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	7853      	ldrb	r3, [r2, #1]
 8007894:	2103      	movs	r1, #3
 8007896:	f361 0345 	bfi	r3, r1, #1, #5
 800789a:	7053      	strb	r3, [r2, #1]
          *pEvent = USBPD_CAD_EVENT_ATTACHED;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2202      	movs	r2, #2
 80078a0:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	461a      	mov	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	601a      	str	r2, [r3, #0]
          break;
 80078b2:	e031      	b.n	8007918 <ManageStateAttachedWait_SRC+0x134>

        case HW_PwrCable_Sink_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	461a      	mov	r2, r3
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	4611      	mov	r1, r2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 fdfb 	bl	80084c0 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTEMC;
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	7853      	ldrb	r3, [r2, #1]
 80078ce:	2105      	movs	r1, #5
 80078d0:	f361 0345 	bfi	r3, r1, #1, #5
 80078d4:	7053      	strb	r3, [r2, #1]
          *pEvent = USBPD_CAD_EVENT_ATTEMC;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2204      	movs	r2, #4
 80078da:	701a      	strb	r2, [r3, #0]
          break;
 80078dc:	e01c      	b.n	8007918 <ManageStateAttachedWait_SRC+0x134>

        case HW_PwrCable_NoSink_Attachment:
          BSP_USBPD_PWR_VBUSDeInit(PortNum);
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f002 fd83 	bl	800a3ec <BSP_USBPD_PWR_VBUSDeInit>
          _handle->cstate = USBPD_CAD_STATE_EMC;
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	7853      	ldrb	r3, [r2, #1]
 80078ea:	2104      	movs	r1, #4
 80078ec:	f361 0345 	bfi	r3, r1, #1, #5
 80078f0:	7053      	strb	r3, [r2, #1]
          *pEvent = USBPD_CAD_EVENT_EMC;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2203      	movs	r2, #3
 80078f6:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007900:	b2db      	uxtb	r3, r3
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]
          break;
 8007908:	e006      	b.n	8007918 <ManageStateAttachedWait_SRC+0x134>
#endif /* _ACCESSORY_SRC */

        case HW_Detachment:
        default:
#if !defined(_ACCESSORY_SRC)
          _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	7853      	ldrb	r3, [r2, #1]
 800790e:	210b      	movs	r1, #11
 8007910:	f361 0345 	bfi	r3, r1, #1, #5
 8007914:	7053      	strb	r3, [r2, #1]
#endif /* _ACCESSORY_SRC */
          break;
 8007916:	bf00      	nop
      } /* End of switch */
      *pCCXX = _handle->cc;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007920:	b2db      	uxtb	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	601a      	str	r2, [r3, #0]
      _timing = CAD_DEFAULT_TIME;
 8007928:	2302      	movs	r3, #2
 800792a:	61fb      	str	r3, [r7, #28]
    }
    /* Reset the flag for CAD_tDebounce */
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	7813      	ldrb	r3, [r2, #0]
 8007930:	f36f 1345 	bfc	r3, #5, #1
 8007934:	7013      	strb	r3, [r2, #0]
 8007936:	e02a      	b.n	800798e <ManageStateAttachedWait_SRC+0x1aa>
  }
  else /* CAD_HW_Condition[PortNum] = HW_Detachment */
  {
    /* Start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10c      	bne.n	8007960 <ManageStateAttachedWait_SRC+0x17c>
    {
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 8007946:	f7fa fc27 	bl	8002198 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	7813      	ldrb	r3, [r2, #0]
 8007954:	f043 0320 	orr.w	r3, r3, #32
 8007958:	7013      	strb	r3, [r2, #0]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 800795a:	2302      	movs	r3, #2
 800795c:	61fb      	str	r3, [r7, #28]
 800795e:	e016      	b.n	800798e <ManageStateAttachedWait_SRC+0x1aa>
    }
    else /* CAD_tDebounce already running */
    {
      /* Evaluate CAD_tDebounce */
      CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8007960:	f7fa fc1a 	bl	8002198 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d90c      	bls.n	800798e <ManageStateAttachedWait_SRC+0x1aa>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	7813      	ldrb	r3, [r2, #0]
 8007978:	f36f 1345 	bfc	r3, #5, #1
 800797c:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	7853      	ldrb	r3, [r2, #1]
 8007982:	210b      	movs	r1, #11
 8007984:	f361 0345 	bfi	r3, r1, #1, #5
 8007988:	7053      	strb	r3, [r2, #1]
        _timing = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return _timing;
 800798e:	69fb      	ldr	r3, [r7, #28]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3720      	adds	r7, #32
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	20000430 	.word	0x20000430

0800799c <ManageStateEMC>:
#endif /* _DRP || _SRC || (_ACCESSORY && _SNK) */

#if defined(_DRP) || defined(_SRC)
static uint32_t ManageStateEMC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	73fb      	strb	r3, [r7, #15]
  uint32_t _timing = CAD_INFINITE_TIME;
 80079aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079ae:	617b      	str	r3, [r7, #20]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80079b0:	7bfa      	ldrb	r2, [r7, #15]
 80079b2:	4613      	mov	r3, r2
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4a1c      	ldr	r2, [pc, #112]	@ (8007a2c <ManageStateEMC+0x90>)
 80079bc:	4413      	add	r3, r2
 80079be:	613b      	str	r3, [r7, #16]

  CAD_Check_HW_SRC(PortNum);
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff fe46 	bl	8007654 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  switch (_handle->CurrentHWcondition)
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d00f      	beq.n	80079f6 <ManageStateEMC+0x5a>
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	dc20      	bgt.n	8007a1c <ManageStateEMC+0x80>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <ManageStateEMC+0x48>
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d009      	beq.n	80079f6 <ManageStateEMC+0x5a>
 80079e2:	e01b      	b.n	8007a1c <ManageStateEMC+0x80>
  {
    case HW_Detachment :
      _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	7853      	ldrb	r3, [r2, #1]
 80079e8:	2109      	movs	r1, #9
 80079ea:	f361 0345 	bfi	r3, r1, #1, #5
 80079ee:	7053      	strb	r3, [r2, #1]
      _timing = 1;
 80079f0:	2301      	movs	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
      break;
 80079f4:	e015      	b.n	8007a22 <ManageStateEMC+0x86>
    case HW_PwrCable_Sink_Attachment:
    case HW_Attachment :
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	7853      	ldrb	r3, [r2, #1]
 80079fa:	2102      	movs	r1, #2
 80079fc:	f361 0345 	bfi	r3, r1, #1, #5
 8007a00:	7053      	strb	r3, [r2, #1]
      _handle->CAD_tDebounce_start = HAL_GetTick() - 5u;  /* This is only to check cable presence */
 8007a02:	f7fa fbc9 	bl	8002198 <HAL_GetTick>
 8007a06:	4603      	mov	r3, r0
 8007a08:	1f5a      	subs	r2, r3, #5
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	605a      	str	r2, [r3, #4]
      BSP_USBPD_PWR_VBUSInit(PortNum);
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f002 fcd8 	bl	800a3c6 <BSP_USBPD_PWR_VBUSInit>
      _timing = CAD_DEFAULT_TIME;
 8007a16:	2302      	movs	r3, #2
 8007a18:	617b      	str	r3, [r7, #20]
      break;
 8007a1a:	e002      	b.n	8007a22 <ManageStateEMC+0x86>
          _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
        }
        _timing = 0;
      }
#else
      _timing = CAD_DEFAULT_TIME;
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	617b      	str	r3, [r7, #20]
#endif /* _DRP */
      break;
 8007a20:	bf00      	nop
  }
  return _timing;
 8007a22:	697b      	ldr	r3, [r7, #20]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	20000430 	.word	0x20000430

08007a30 <ManageStateAttached_SRC>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttached_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	@ 0x28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	4603      	mov	r3, r0
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	73fb      	strb	r3, [r7, #15]
  for (int32_t index = 0; index < CAD_DELAY_READ_CC_STATUS; index++)
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8007a3e:	7bfa      	ldrb	r2, [r7, #15]
 8007a40:	4613      	mov	r3, r2
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4a3f      	ldr	r2, [pc, #252]	@ (8007b48 <ManageStateAttached_SRC+0x118>)
 8007a4a:	4413      	add	r3, r2
 8007a4c:	623b      	str	r3, [r7, #32]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8007a4e:	2302      	movs	r3, #2
 8007a50:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 8007a52:	7bfa      	ldrb	r2, [r7, #15]
 8007a54:	493d      	ldr	r1, [pc, #244]	@ (8007b4c <ManageStateAttached_SRC+0x11c>)
 8007a56:	4613      	mov	r3, r2
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	1a9b      	subs	r3, r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	440b      	add	r3, r1
 8007a60:	3334      	adds	r3, #52	@ 0x34
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d10b      	bne.n	8007a80 <ManageStateAttached_SRC+0x50>
 8007a68:	7bfa      	ldrb	r2, [r7, #15]
 8007a6a:	4938      	ldr	r1, [pc, #224]	@ (8007b4c <ManageStateAttached_SRC+0x11c>)
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	1a9b      	subs	r3, r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a7e:	e00a      	b.n	8007a96 <ManageStateAttached_SRC+0x66>
                  (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8007a80:	7bfa      	ldrb	r2, [r7, #15]
 8007a82:	4932      	ldr	r1, [pc, #200]	@ (8007b4c <ManageStateAttached_SRC+0x11c>)
 8007a84:	4613      	mov	r3, r2
 8007a86:	011b      	lsls	r3, r3, #4
 8007a88:	1a9b      	subs	r3, r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	440b      	add	r3, r1
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 8007a92:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007a96:	61fb      	str	r3, [r7, #28]
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SRC_CC1_VRD : LL_UCPD_SRC_CC2_VRD;
 8007a98:	7bfa      	ldrb	r2, [r7, #15]
 8007a9a:	492c      	ldr	r1, [pc, #176]	@ (8007b4c <ManageStateAttached_SRC+0x11c>)
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	011b      	lsls	r3, r3, #4
 8007aa0:	1a9b      	subs	r3, r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	440b      	add	r3, r1
 8007aa6:	3334      	adds	r3, #52	@ 0x34
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d102      	bne.n	8007ab4 <ManageStateAttached_SRC+0x84>
 8007aae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007ab2:	e001      	b.n	8007ab8 <ManageStateAttached_SRC+0x88>
 8007ab4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007ab8:	61bb      	str	r3, [r7, #24]

  /* Check if CC lines is opened or switch to debug accessory */
  if (comp != ccx)
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d035      	beq.n	8007b2e <ManageStateAttached_SRC+0xfe>
  {
    /* Start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	f003 0320 	and.w	r3, r3, #32
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10c      	bne.n	8007aea <ManageStateAttached_SRC+0xba>
    {
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 8007ad0:	6a3a      	ldr	r2, [r7, #32]
 8007ad2:	7813      	ldrb	r3, [r2, #0]
 8007ad4:	f043 0320 	orr.w	r3, r3, #32
 8007ad8:	7013      	strb	r3, [r2, #0]
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 8007ada:	f7fa fb5d 	bl	8002198 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	605a      	str	r2, [r3, #4]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ae8:	e029      	b.n	8007b3e <ManageStateAttached_SRC+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* Evaluate CAD_tDebounce */
      uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8007aea:	f7fa fb55 	bl	8002198 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d91f      	bls.n	8007b3e <ManageStateAttached_SRC+0x10e>
      {
        HW_SignalDetachment(PortNum);
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 fcf5 	bl	80084f0 <HW_SignalDetachment>
        if (USBPD_TRUE == Ports[PortNum].settings->CAD_RoleToggle)
        {
          USBPDM1_AssertRd(PortNum);
        }
#endif /* _DRP */
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8007b06:	6a3a      	ldr	r2, [r7, #32]
 8007b08:	7813      	ldrb	r3, [r2, #0]
 8007b0a:	f36f 1345 	bfc	r3, #5, #1
 8007b0e:	7013      	strb	r3, [r2, #0]
        /* Move inside state DETACH to avoid wrong VCONN level*/
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 8007b10:	6a3a      	ldr	r2, [r7, #32]
 8007b12:	7853      	ldrb	r3, [r2, #1]
 8007b14:	210b      	movs	r1, #11
 8007b16:	f361 0345 	bfi	r3, r1, #1, #5
 8007b1a:	7053      	strb	r3, [r2, #1]
        *pEvent                     = USBPD_CAD_EVENT_DETACHED;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	701a      	strb	r2, [r3, #0]
        *pCCXX                      = CCNONE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]
        _timing                     = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b2c:	e007      	b.n	8007b3e <ManageStateAttached_SRC+0x10e>
    }
  }
  else
  {
    /* Reset tPDDebounce flag*/
    _handle->CAD_tDebounce_flag   = USBPD_FALSE;
 8007b2e:	6a3a      	ldr	r2, [r7, #32]
 8007b30:	7813      	ldrb	r3, [r2, #0]
 8007b32:	f36f 1345 	bfc	r3, #5, #1
 8007b36:	7013      	strb	r3, [r2, #0]
#if  defined(_LOW_POWER)
    _timing = CAD_VBUS_POLLING_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 8007b38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b3c:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* _LOW_POWER */
  }

  return _timing;
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3728      	adds	r7, #40	@ 0x28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	20000430 	.word	0x20000430
 8007b4c:	20000440 	.word	0x20000440

08007b50 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 8007b5a:	4b03      	ldr	r3, [pc, #12]	@ (8007b68 <USBPD_HW_GetUSPDInstance+0x18>)
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	4000a000 	.word	0x4000a000

08007b6c <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	619a      	str	r2, [r3, #24]
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	619a      	str	r2, [r3, #24]
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	619a      	str	r2, [r3, #24]
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	619a      	str	r2, [r3, #24]
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	619a      	str	r2, [r3, #24]
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	619a      	str	r2, [r3, #24]
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	619a      	str	r2, [r3, #24]
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f043 0220 	orr.w	r2, r3, #32
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	619a      	str	r2, [r3, #24]
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	f043 0210 	orr.w	r2, r3, #16
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	619a      	str	r2, [r3, #24]
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	f043 0208 	orr.w	r2, r3, #8
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	619a      	str	r2, [r3, #24]
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	f043 0204 	orr.w	r2, r3, #4
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	619a      	str	r2, [r3, #24]
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	f043 0202 	orr.w	r2, r3, #2
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	619a      	str	r2, [r3, #24]
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	f000 f803 	bl	8007cfc <PORTx_IRQHandler>
}
 8007cf6:	bf00      	nop
 8007cf8:	bd80      	pop	{r7, pc}
	...

08007cfc <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 8007d06:	79fa      	ldrb	r2, [r7, #7]
 8007d08:	4998      	ldr	r1, [pc, #608]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	440b      	add	r3, r1
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	691a      	ldr	r2, [r3, #16]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	4013      	ands	r3, r2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 81ca 	beq.w	80080c0 <PORTx_IRQHandler+0x3c4>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d035      	beq.n	8007da2 <PORTx_IRQHandler+0xa6>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff ffc8 	bl	8007ccc <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8007d3c:	79fa      	ldrb	r2, [r7, #7]
 8007d3e:	498b      	ldr	r1, [pc, #556]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007d40:	4613      	mov	r3, r2
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	1a9b      	subs	r3, r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	440b      	add	r3, r1
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6819      	ldr	r1, [r3, #0]
 8007d50:	79fa      	ldrb	r2, [r7, #7]
 8007d52:	4886      	ldr	r0, [pc, #536]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007d54:	4613      	mov	r3, r2
 8007d56:	011b      	lsls	r3, r3, #4
 8007d58:	1a9b      	subs	r3, r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4403      	add	r3, r0
 8007d5e:	3304      	adds	r3, #4
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f021 0201 	bic.w	r2, r1, #1
 8007d66:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8007d68:	bf00      	nop
 8007d6a:	79fa      	ldrb	r2, [r7, #7]
 8007d6c:	497f      	ldr	r1, [pc, #508]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007d6e:	4613      	mov	r3, r2
 8007d70:	011b      	lsls	r3, r3, #4
 8007d72:	1a9b      	subs	r3, r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	440b      	add	r3, r1
 8007d78:	3304      	adds	r3, #4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d0f1      	beq.n	8007d6a <PORTx_IRQHandler+0x6e>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8007d86:	79fa      	ldrb	r2, [r7, #7]
 8007d88:	4978      	ldr	r1, [pc, #480]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	1a9b      	subs	r3, r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	3314      	adds	r3, #20
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	79fa      	ldrb	r2, [r7, #7]
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4798      	blx	r3
      return;
 8007da0:	e18e      	b.n	80080c0 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d035      	beq.n	8007e18 <PORTx_IRQHandler+0x11c>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff ff7d 	bl	8007cac <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8007db2:	79fa      	ldrb	r2, [r7, #7]
 8007db4:	496d      	ldr	r1, [pc, #436]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007db6:	4613      	mov	r3, r2
 8007db8:	011b      	lsls	r3, r3, #4
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6819      	ldr	r1, [r3, #0]
 8007dc6:	79fa      	ldrb	r2, [r7, #7]
 8007dc8:	4868      	ldr	r0, [pc, #416]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007dca:	4613      	mov	r3, r2
 8007dcc:	011b      	lsls	r3, r3, #4
 8007dce:	1a9b      	subs	r3, r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4403      	add	r3, r0
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f021 0201 	bic.w	r2, r1, #1
 8007ddc:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8007dde:	bf00      	nop
 8007de0:	79fa      	ldrb	r2, [r7, #7]
 8007de2:	4962      	ldr	r1, [pc, #392]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007de4:	4613      	mov	r3, r2
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	1a9b      	subs	r3, r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	440b      	add	r3, r1
 8007dee:	3304      	adds	r3, #4
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d0f1      	beq.n	8007de0 <PORTx_IRQHandler+0xe4>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8007dfc:	79fa      	ldrb	r2, [r7, #7]
 8007dfe:	495b      	ldr	r1, [pc, #364]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007e00:	4613      	mov	r3, r2
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	1a9b      	subs	r3, r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	440b      	add	r3, r1
 8007e0a:	3314      	adds	r3, #20
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	79fa      	ldrb	r2, [r7, #7]
 8007e10:	2100      	movs	r1, #0
 8007e12:	4610      	mov	r0, r2
 8007e14:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 8007e16:	e153      	b.n	80080c0 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d035      	beq.n	8007e8e <PORTx_IRQHandler+0x192>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f7ff ff32 	bl	8007c8c <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8007e28:	79fa      	ldrb	r2, [r7, #7]
 8007e2a:	4950      	ldr	r1, [pc, #320]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	440b      	add	r3, r1
 8007e36:	3304      	adds	r3, #4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6819      	ldr	r1, [r3, #0]
 8007e3c:	79fa      	ldrb	r2, [r7, #7]
 8007e3e:	484b      	ldr	r0, [pc, #300]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007e40:	4613      	mov	r3, r2
 8007e42:	011b      	lsls	r3, r3, #4
 8007e44:	1a9b      	subs	r3, r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4403      	add	r3, r0
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f021 0201 	bic.w	r2, r1, #1
 8007e52:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8007e54:	bf00      	nop
 8007e56:	79fa      	ldrb	r2, [r7, #7]
 8007e58:	4944      	ldr	r1, [pc, #272]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	011b      	lsls	r3, r3, #4
 8007e5e:	1a9b      	subs	r3, r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	440b      	add	r3, r1
 8007e64:	3304      	adds	r3, #4
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d0f1      	beq.n	8007e56 <PORTx_IRQHandler+0x15a>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 8007e72:	79fa      	ldrb	r2, [r7, #7]
 8007e74:	493d      	ldr	r1, [pc, #244]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007e76:	4613      	mov	r3, r2
 8007e78:	011b      	lsls	r3, r3, #4
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	440b      	add	r3, r1
 8007e80:	3314      	adds	r3, #20
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	79fa      	ldrb	r2, [r7, #7]
 8007e86:	2102      	movs	r1, #2
 8007e88:	4610      	mov	r0, r2
 8007e8a:	4798      	blx	r3
      return;
 8007e8c:	e118      	b.n	80080c0 <PORTx_IRQHandler+0x3c4>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f003 0310 	and.w	r3, r3, #16
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <PORTx_IRQHandler+0x1a4>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff fee7 	bl	8007c6c <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8007e9e:	e10f      	b.n	80080c0 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d010      	beq.n	8007ecc <PORTx_IRQHandler+0x1d0>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f7ff fece 	bl	8007c4c <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8007eb0:	79fa      	ldrb	r2, [r7, #7]
 8007eb2:	492e      	ldr	r1, [pc, #184]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	011b      	lsls	r3, r3, #4
 8007eb8:	1a9b      	subs	r3, r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	440b      	add	r3, r1
 8007ebe:	3324      	adds	r3, #36	@ 0x24
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	79fa      	ldrb	r2, [r7, #7]
 8007ec4:	2105      	movs	r1, #5
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	4798      	blx	r3
      return;
 8007eca:	e0f9      	b.n	80080c0 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <PORTx_IRQHandler+0x1e2>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f7ff fea8 	bl	8007c2c <LL_UCPD_ClearFlag_TxUND>
      return;
 8007edc:	e0f0      	b.n	80080c0 <PORTx_IRQHandler+0x3c4>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d01e      	beq.n	8007f26 <PORTx_IRQHandler+0x22a>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eec:	2b05      	cmp	r3, #5
 8007eee:	d10c      	bne.n	8007f0a <PORTx_IRQHandler+0x20e>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8007ef0:	79fa      	ldrb	r2, [r7, #7]
 8007ef2:	491e      	ldr	r1, [pc, #120]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	011b      	lsls	r3, r3, #4
 8007ef8:	1a9b      	subs	r3, r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	440b      	add	r3, r1
 8007efe:	331c      	adds	r3, #28
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	79fa      	ldrb	r2, [r7, #7]
 8007f04:	2106      	movs	r1, #6
 8007f06:	4610      	mov	r0, r2
 8007f08:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f7ff fe7e 	bl	8007c0c <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 8007f10:	79fa      	ldrb	r2, [r7, #7]
 8007f12:	4916      	ldr	r1, [pc, #88]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007f14:	4613      	mov	r3, r2
 8007f16:	011b      	lsls	r3, r3, #4
 8007f18:	1a9b      	subs	r3, r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	3338      	adds	r3, #56	@ 0x38
 8007f20:	2201      	movs	r2, #1
 8007f22:	701a      	strb	r2, [r3, #0]
      return;
 8007f24:	e0cc      	b.n	80080c0 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d010      	beq.n	8007f52 <PORTx_IRQHandler+0x256>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8007f30:	79fa      	ldrb	r2, [r7, #7]
 8007f32:	490e      	ldr	r1, [pc, #56]	@ (8007f6c <PORTx_IRQHandler+0x270>)
 8007f34:	4613      	mov	r3, r2
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	1a9b      	subs	r3, r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	331c      	adds	r3, #28
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	79fa      	ldrb	r2, [r7, #7]
 8007f44:	2105      	movs	r1, #5
 8007f46:	4610      	mov	r0, r2
 8007f48:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff fe4e 	bl	8007bec <LL_UCPD_ClearFlag_RxHRST>
      return;
 8007f50:	e0b6      	b.n	80080c0 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <PORTx_IRQHandler+0x278>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag = 1;
 8007f5c:	4b04      	ldr	r3, [pc, #16]	@ (8007f70 <PORTx_IRQHandler+0x274>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f7ff fe32 	bl	8007bcc <LL_UCPD_ClearFlag_RxOvr>
      return;
 8007f68:	e0aa      	b.n	80080c0 <PORTx_IRQHandler+0x3c4>
 8007f6a:	bf00      	nop
 8007f6c:	20000440 	.word	0x20000440
 8007f70:	2000043c 	.word	0x2000043c
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 8085 	beq.w	800808a <PORTx_IRQHandler+0x38e>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 8007f80:	79fa      	ldrb	r2, [r7, #7]
 8007f82:	4951      	ldr	r1, [pc, #324]	@ (80080c8 <PORTx_IRQHandler+0x3cc>)
 8007f84:	4613      	mov	r3, r2
 8007f86:	011b      	lsls	r3, r3, #4
 8007f88:	1a9b      	subs	r3, r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	440b      	add	r3, r1
 8007f8e:	3338      	adds	r3, #56	@ 0x38
 8007f90:	2200      	movs	r2, #0
 8007f92:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f7ff fe09 	bl	8007bac <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8007f9a:	79fa      	ldrb	r2, [r7, #7]
 8007f9c:	494a      	ldr	r1, [pc, #296]	@ (80080c8 <PORTx_IRQHandler+0x3cc>)
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	1a9b      	subs	r3, r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	3308      	adds	r3, #8
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6819      	ldr	r1, [r3, #0]
 8007fae:	79fa      	ldrb	r2, [r7, #7]
 8007fb0:	4845      	ldr	r0, [pc, #276]	@ (80080c8 <PORTx_IRQHandler+0x3cc>)
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	1a9b      	subs	r3, r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4403      	add	r3, r0
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f021 0201 	bic.w	r2, r1, #1
 8007fc4:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8007fc6:	bf00      	nop
 8007fc8:	79fa      	ldrb	r2, [r7, #7]
 8007fca:	493f      	ldr	r1, [pc, #252]	@ (80080c8 <PORTx_IRQHandler+0x3cc>)
 8007fcc:	4613      	mov	r3, r2
 8007fce:	011b      	lsls	r3, r3, #4
 8007fd0:	1a9b      	subs	r3, r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	440b      	add	r3, r1
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d0f1      	beq.n	8007fc8 <PORTx_IRQHandler+0x2cc>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8007fe4:	79fa      	ldrb	r2, [r7, #7]
 8007fe6:	4938      	ldr	r1, [pc, #224]	@ (80080c8 <PORTx_IRQHandler+0x3cc>)
 8007fe8:	4613      	mov	r3, r2
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	3330      	adds	r3, #48	@ 0x30
 8007ff4:	6818      	ldr	r0, [r3, #0]
 8007ff6:	79fa      	ldrb	r2, [r7, #7]
 8007ff8:	4933      	ldr	r1, [pc, #204]	@ (80080c8 <PORTx_IRQHandler+0x3cc>)
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	1a9b      	subs	r3, r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	440b      	add	r3, r1
 8008004:	3308      	adds	r3, #8
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4602      	mov	r2, r0
 800800a:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 800800c:	79fa      	ldrb	r2, [r7, #7]
 800800e:	492e      	ldr	r1, [pc, #184]	@ (80080c8 <PORTx_IRQHandler+0x3cc>)
 8008010:	4613      	mov	r3, r2
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	3308      	adds	r3, #8
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8008022:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8008024:	79fa      	ldrb	r2, [r7, #7]
 8008026:	4928      	ldr	r1, [pc, #160]	@ (80080c8 <PORTx_IRQHandler+0x3cc>)
 8008028:	4613      	mov	r3, r2
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	1a9b      	subs	r3, r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	3308      	adds	r3, #8
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6819      	ldr	r1, [r3, #0]
 8008038:	79fa      	ldrb	r2, [r7, #7]
 800803a:	4823      	ldr	r0, [pc, #140]	@ (80080c8 <PORTx_IRQHandler+0x3cc>)
 800803c:	4613      	mov	r3, r2
 800803e:	011b      	lsls	r3, r3, #4
 8008040:	1a9b      	subs	r3, r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4403      	add	r3, r0
 8008046:	3308      	adds	r3, #8
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f041 0201 	orr.w	r2, r1, #1
 800804e:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d113      	bne.n	8008082 <PORTx_IRQHandler+0x386>
 800805a:	4b1c      	ldr	r3, [pc, #112]	@ (80080cc <PORTx_IRQHandler+0x3d0>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10f      	bne.n	8008082 <PORTx_IRQHandler+0x386>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 8008062:	79fa      	ldrb	r2, [r7, #7]
 8008064:	4918      	ldr	r1, [pc, #96]	@ (80080c8 <PORTx_IRQHandler+0x3cc>)
 8008066:	4613      	mov	r3, r2
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	1a9b      	subs	r3, r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	440b      	add	r3, r1
 8008070:	3320      	adds	r3, #32
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008078:	f002 0107 	and.w	r1, r2, #7
 800807c:	79fa      	ldrb	r2, [r7, #7]
 800807e:	4610      	mov	r0, r2
 8008080:	4798      	blx	r3
      }
      ovrflag = 0;
 8008082:	4b12      	ldr	r3, [pc, #72]	@ (80080cc <PORTx_IRQHandler+0x3d0>)
 8008084:	2200      	movs	r2, #0
 8008086:	701a      	strb	r2, [r3, #0]
      return;
 8008088:	e01a      	b.n	80080c0 <PORTx_IRQHandler+0x3c4>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d104      	bne.n	800809e <PORTx_IRQHandler+0x3a2>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d010      	beq.n	80080c0 <PORTx_IRQHandler+0x3c4>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f7ff fd74 	bl	8007b8c <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f7ff fd61 	bl	8007b6c <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 80080aa:	79fa      	ldrb	r2, [r7, #7]
 80080ac:	4906      	ldr	r1, [pc, #24]	@ (80080c8 <PORTx_IRQHandler+0x3cc>)
 80080ae:	4613      	mov	r3, r2
 80080b0:	011b      	lsls	r3, r3, #4
 80080b2:	1a9b      	subs	r3, r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	440b      	add	r3, r1
 80080b8:	332c      	adds	r3, #44	@ 0x2c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 80080be:	bf00      	nop
        }
      }
    }
#endif /* _FRS */
  }
}
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20000440 	.word	0x20000440
 80080cc:	2000043c 	.word	0x2000043c

080080d0 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	60da      	str	r2, [r3, #12]
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	60da      	str	r2, [r3, #12]
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	60da      	str	r2, [r3, #12]
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	60da      	str	r2, [r3, #12]
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <LL_UCPD_SetccEnable>:
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	431a      	orrs	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	60da      	str	r2, [r3, #12]
}
 800816a:	bf00      	nop
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <LL_UCPD_SetSNKRole>:
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	60da      	str	r2, [r3, #12]
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <LL_UCPD_SetSRCRole>:
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	60da      	str	r2, [r3, #12]
}
 80081aa:	bf00      	nop
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <LL_UCPD_SetRpResistor>:
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	431a      	orrs	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	60da      	str	r2, [r3, #12]
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <LL_UCPD_RxDisable>:
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f023 0220 	bic.w	r2, r3, #32
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	60da      	str	r2, [r3, #12]
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <USBPDM1_AssertRp>:
  * @brief  Assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRp(uint8_t PortNum)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	4603      	mov	r3, r0
 8008204:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 8008206:	79fa      	ldrb	r2, [r7, #7]
 8008208:	4946      	ldr	r1, [pc, #280]	@ (8008324 <USBPDM1_AssertRp+0x128>)
 800820a:	4613      	mov	r3, r2
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	1a9b      	subs	r3, r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	440b      	add	r3, r1
 8008214:	3310      	adds	r3, #16
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	789b      	ldrb	r3, [r3, #2]
 800821a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b02      	cmp	r3, #2
 8008222:	d021      	beq.n	8008268 <USBPDM1_AssertRp+0x6c>
 8008224:	2b02      	cmp	r3, #2
 8008226:	dc2d      	bgt.n	8008284 <USBPDM1_AssertRp+0x88>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <USBPDM1_AssertRp+0x36>
 800822c:	2b01      	cmp	r3, #1
 800822e:	d00d      	beq.n	800824c <USBPDM1_AssertRp+0x50>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8008230:	e028      	b.n	8008284 <USBPDM1_AssertRp+0x88>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8008232:	79fa      	ldrb	r2, [r7, #7]
 8008234:	493b      	ldr	r1, [pc, #236]	@ (8008324 <USBPDM1_AssertRp+0x128>)
 8008236:	4613      	mov	r3, r2
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	440b      	add	r3, r1
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2180      	movs	r1, #128	@ 0x80
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff ffb6 	bl	80081b6 <LL_UCPD_SetRpResistor>
      break;
 800824a:	e01c      	b.n	8008286 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800824c:	79fa      	ldrb	r2, [r7, #7]
 800824e:	4935      	ldr	r1, [pc, #212]	@ (8008324 <USBPDM1_AssertRp+0x128>)
 8008250:	4613      	mov	r3, r2
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	1a9b      	subs	r3, r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	440b      	add	r3, r1
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008260:	4618      	mov	r0, r3
 8008262:	f7ff ffa8 	bl	80081b6 <LL_UCPD_SetRpResistor>
      break;
 8008266:	e00e      	b.n	8008286 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8008268:	79fa      	ldrb	r2, [r7, #7]
 800826a:	492e      	ldr	r1, [pc, #184]	@ (8008324 <USBPDM1_AssertRp+0x128>)
 800826c:	4613      	mov	r3, r2
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	1a9b      	subs	r3, r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	440b      	add	r3, r1
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff ff9a 	bl	80081b6 <LL_UCPD_SetRpResistor>
      break;
 8008282:	e000      	b.n	8008286 <USBPDM1_AssertRp+0x8a>
      break;
 8008284:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8008286:	79fa      	ldrb	r2, [r7, #7]
 8008288:	4926      	ldr	r1, [pc, #152]	@ (8008324 <USBPDM1_AssertRp+0x128>)
 800828a:	4613      	mov	r3, r2
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	1a9b      	subs	r3, r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	440b      	add	r3, r1
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2100      	movs	r1, #0
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff ff59 	bl	8008150 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800829e:	79fa      	ldrb	r2, [r7, #7]
 80082a0:	4920      	ldr	r1, [pc, #128]	@ (8008324 <USBPDM1_AssertRp+0x128>)
 80082a2:	4613      	mov	r3, r2
 80082a4:	011b      	lsls	r3, r3, #4
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	440b      	add	r3, r1
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7ff ff71 	bl	8008196 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 80082b4:	79fa      	ldrb	r2, [r7, #7]
 80082b6:	491b      	ldr	r1, [pc, #108]	@ (8008324 <USBPDM1_AssertRp+0x128>)
 80082b8:	4613      	mov	r3, r2
 80082ba:	011b      	lsls	r3, r3, #4
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	440b      	add	r3, r1
 80082c2:	3334      	adds	r3, #52	@ 0x34
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10d      	bne.n	80082e6 <USBPDM1_AssertRp+0xea>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80082ca:	79fa      	ldrb	r2, [r7, #7]
 80082cc:	4915      	ldr	r1, [pc, #84]	@ (8008324 <USBPDM1_AssertRp+0x128>)
 80082ce:	4613      	mov	r3, r2
 80082d0:	011b      	lsls	r3, r3, #4
 80082d2:	1a9b      	subs	r3, r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	440b      	add	r3, r1
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff ff36 	bl	8008150 <LL_UCPD_SetccEnable>
  }

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 80082e4:	e01a      	b.n	800831c <USBPDM1_AssertRp+0x120>
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80082e6:	79fa      	ldrb	r2, [r7, #7]
 80082e8:	490e      	ldr	r1, [pc, #56]	@ (8008324 <USBPDM1_AssertRp+0x128>)
 80082ea:	4613      	mov	r3, r2
 80082ec:	011b      	lsls	r3, r3, #4
 80082ee:	1a9b      	subs	r3, r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	440b      	add	r3, r1
 80082f4:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 80082f6:	79fa      	ldrb	r2, [r7, #7]
 80082f8:	490a      	ldr	r1, [pc, #40]	@ (8008324 <USBPDM1_AssertRp+0x128>)
 80082fa:	4613      	mov	r3, r2
 80082fc:	011b      	lsls	r3, r3, #4
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	440b      	add	r3, r1
 8008304:	3334      	adds	r3, #52	@ 0x34
 8008306:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8008308:	2b01      	cmp	r3, #1
 800830a:	d102      	bne.n	8008312 <USBPDM1_AssertRp+0x116>
 800830c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008310:	e001      	b.n	8008316 <USBPDM1_AssertRp+0x11a>
 8008312:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008316:	4619      	mov	r1, r3
 8008318:	f7ff ff1a 	bl	8008150 <LL_UCPD_SetccEnable>
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20000440 	.word	0x20000440

08008328 <USBPDM1_DeAssertRp>:
  * @brief  De-assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
	...

08008340 <USBPDM1_AssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRd(uint8_t PortNum)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	4603      	mov	r3, r0
 8008348:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 800834a:	79fa      	ldrb	r2, [r7, #7]
 800834c:	493e      	ldr	r1, [pc, #248]	@ (8008448 <USBPDM1_AssertRd+0x108>)
 800834e:	4613      	mov	r3, r2
 8008350:	011b      	lsls	r3, r3, #4
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	440b      	add	r3, r1
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff fec8 	bl	80080f0 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8008360:	79fa      	ldrb	r2, [r7, #7]
 8008362:	4939      	ldr	r1, [pc, #228]	@ (8008448 <USBPDM1_AssertRd+0x108>)
 8008364:	4613      	mov	r3, r2
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	1a9b      	subs	r3, r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4618      	mov	r0, r3
 8008372:	f7ff fedd 	bl	8008130 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8008376:	79fa      	ldrb	r2, [r7, #7]
 8008378:	4933      	ldr	r1, [pc, #204]	@ (8008448 <USBPDM1_AssertRd+0x108>)
 800837a:	4613      	mov	r3, r2
 800837c:	011b      	lsls	r3, r3, #4
 800837e:	1a9b      	subs	r3, r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2100      	movs	r1, #0
 8008388:	4618      	mov	r0, r3
 800838a:	f7ff fee1 	bl	8008150 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 800838e:	79fa      	ldrb	r2, [r7, #7]
 8008390:	492d      	ldr	r1, [pc, #180]	@ (8008448 <USBPDM1_AssertRd+0x108>)
 8008392:	4613      	mov	r3, r2
 8008394:	011b      	lsls	r3, r3, #4
 8008396:	1a9b      	subs	r3, r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	440b      	add	r3, r1
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff fee9 	bl	8008176 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 80083a4:	79fa      	ldrb	r2, [r7, #7]
 80083a6:	4928      	ldr	r1, [pc, #160]	@ (8008448 <USBPDM1_AssertRd+0x108>)
 80083a8:	4613      	mov	r3, r2
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	1a9b      	subs	r3, r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	440b      	add	r3, r1
 80083b2:	3334      	adds	r3, #52	@ 0x34
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10d      	bne.n	80083d6 <USBPDM1_AssertRd+0x96>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80083ba:	79fa      	ldrb	r2, [r7, #7]
 80083bc:	4922      	ldr	r1, [pc, #136]	@ (8008448 <USBPDM1_AssertRd+0x108>)
 80083be:	4613      	mov	r3, r2
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	1a9b      	subs	r3, r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	440b      	add	r3, r1
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff febe 	bl	8008150 <LL_UCPD_SetccEnable>
 80083d4:	e01a      	b.n	800840c <USBPDM1_AssertRd+0xcc>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80083d6:	79fa      	ldrb	r2, [r7, #7]
 80083d8:	491b      	ldr	r1, [pc, #108]	@ (8008448 <USBPDM1_AssertRd+0x108>)
 80083da:	4613      	mov	r3, r2
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	1a9b      	subs	r3, r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 80083e6:	79fa      	ldrb	r2, [r7, #7]
 80083e8:	4917      	ldr	r1, [pc, #92]	@ (8008448 <USBPDM1_AssertRd+0x108>)
 80083ea:	4613      	mov	r3, r2
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	1a9b      	subs	r3, r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	440b      	add	r3, r1
 80083f4:	3334      	adds	r3, #52	@ 0x34
 80083f6:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d102      	bne.n	8008402 <USBPDM1_AssertRd+0xc2>
 80083fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008400:	e001      	b.n	8008406 <USBPDM1_AssertRd+0xc6>
 8008402:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008406:	4619      	mov	r1, r3
 8008408:	f7ff fea2 	bl	8008150 <LL_UCPD_SetccEnable>
  }

  HAL_Delay(1);
 800840c:	2001      	movs	r0, #1
 800840e:	f7f9 fecf 	bl	80021b0 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8008412:	79fa      	ldrb	r2, [r7, #7]
 8008414:	490c      	ldr	r1, [pc, #48]	@ (8008448 <USBPDM1_AssertRd+0x108>)
 8008416:	4613      	mov	r3, r2
 8008418:	011b      	lsls	r3, r3, #4
 800841a:	1a9b      	subs	r3, r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	440b      	add	r3, r1
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff fe54 	bl	80080d0 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8008428:	79fa      	ldrb	r2, [r7, #7]
 800842a:	4907      	ldr	r1, [pc, #28]	@ (8008448 <USBPDM1_AssertRd+0x108>)
 800842c:	4613      	mov	r3, r2
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	1a9b      	subs	r3, r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4618      	mov	r0, r3
 800843a:	f7ff fe69 	bl	8008110 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 800843e:	bf00      	nop
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20000440 	.word	0x20000440

0800844c <USBPDM1_DeAssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval none
  */
void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
	...

08008464 <USBPDM1_EnterErrorRecovery>:
  * @brief  Enter error recovery
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	4603      	mov	r3, r0
 800846c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800846e:	79fa      	ldrb	r2, [r7, #7]
 8008470:	4912      	ldr	r1, [pc, #72]	@ (80084bc <USBPDM1_EnterErrorRecovery+0x58>)
 8008472:	4613      	mov	r3, r2
 8008474:	011b      	lsls	r3, r3, #4
 8008476:	1a9b      	subs	r3, r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	440b      	add	r3, r1
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4618      	mov	r0, r3
 8008480:	f7ff fe89 	bl	8008196 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8008484:	79fa      	ldrb	r2, [r7, #7]
 8008486:	490d      	ldr	r1, [pc, #52]	@ (80084bc <USBPDM1_EnterErrorRecovery+0x58>)
 8008488:	4613      	mov	r3, r2
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	1a9b      	subs	r3, r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	440b      	add	r3, r1
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2100      	movs	r1, #0
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff fe8d 	bl	80081b6 <LL_UCPD_SetRpResistor>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800849c:	79fa      	ldrb	r2, [r7, #7]
 800849e:	4907      	ldr	r1, [pc, #28]	@ (80084bc <USBPDM1_EnterErrorRecovery+0x58>)
 80084a0:	4613      	mov	r3, r2
 80084a2:	011b      	lsls	r3, r3, #4
 80084a4:	1a9b      	subs	r3, r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	440b      	add	r3, r1
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7ff fe95 	bl	80081dc <LL_UCPD_RxDisable>
  {
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
  }
#endif /* USBPDCORE_LIB_NO_PD */
}
 80084b2:	bf00      	nop
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000440 	.word	0x20000440

080084c0 <HW_SignalAttachement>:
{
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
}

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	6039      	str	r1, [r7, #0]
 80084ca:	71fb      	strb	r3, [r7, #7]

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 80084cc:	79fa      	ldrb	r2, [r7, #7]
 80084ce:	4907      	ldr	r1, [pc, #28]	@ (80084ec <HW_SignalAttachement+0x2c>)
 80084d0:	4613      	mov	r3, r2
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	1a9b      	subs	r3, r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	440b      	add	r3, r1
 80084da:	3334      	adds	r3, #52	@ 0x34
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	601a      	str	r2, [r3, #0]
  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	20000440 	.word	0x20000440

080084f0 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	71fb      	strb	r3, [r7, #7]
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
  }

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 80084fa:	79fa      	ldrb	r2, [r7, #7]
 80084fc:	4907      	ldr	r1, [pc, #28]	@ (800851c <HW_SignalDetachment+0x2c>)
 80084fe:	4613      	mov	r3, r2
 8008500:	011b      	lsls	r3, r3, #4
 8008502:	1a9b      	subs	r3, r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	440b      	add	r3, r1
 8008508:	3334      	adds	r3, #52	@ 0x34
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	20000440 	.word	0x20000440

08008520 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	f107 020c 	add.w	r2, r7, #12
 8008530:	4611      	mov	r1, r2
 8008532:	4618      	mov	r0, r3
 8008534:	f001 ff6e 	bl	800a414 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	b29b      	uxth	r3, r3
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008556:	2b84      	cmp	r3, #132	@ 0x84
 8008558:	d005      	beq.n	8008566 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800855a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4413      	add	r3, r2
 8008562:	3303      	adds	r3, #3
 8008564:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008566:	68fb      	ldr	r3, [r7, #12]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800857a:	f3ef 8305 	mrs	r3, IPSR
 800857e:	607b      	str	r3, [r7, #4]
  return(result);
 8008580:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008582:	2b00      	cmp	r3, #0
 8008584:	bf14      	ite	ne
 8008586:	2301      	movne	r3, #1
 8008588:	2300      	moveq	r3, #0
 800858a:	b2db      	uxtb	r3, r3
}
 800858c:	4618      	mov	r0, r3
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800859c:	f000 fcde 	bl	8008f5c <vTaskStartScheduler>
  
  return osOK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80085a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085a8:	b087      	sub	sp, #28
 80085aa:	af02      	add	r7, sp, #8
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685c      	ldr	r4, [r3, #4]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085bc:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff ffbd 	bl	8008544 <makeFreeRtosPriority>
 80085ca:	4602      	mov	r2, r0
 80085cc:	f107 030c 	add.w	r3, r7, #12
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	9200      	str	r2, [sp, #0]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	4632      	mov	r2, r6
 80085d8:	4629      	mov	r1, r5
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 fb72 	bl	8008cc4 <xTaskCreate>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d001      	beq.n	80085ea <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	e000      	b.n	80085ec <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80085ea:	68fb      	ldr	r3, [r7, #12]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085f4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008600:	2300      	movs	r3, #0
 8008602:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <osMessagePut+0x1e>
    ticks = 1;
 800860e:	2301      	movs	r3, #1
 8008610:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008612:	f7ff ffaf 	bl	8008574 <inHandlerMode>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d018      	beq.n	800864e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800861c:	f107 0210 	add.w	r2, r7, #16
 8008620:	f107 0108 	add.w	r1, r7, #8
 8008624:	2300      	movs	r3, #0
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 f9da 	bl	80089e0 <xQueueGenericSendFromISR>
 800862c:	4603      	mov	r3, r0
 800862e:	2b01      	cmp	r3, #1
 8008630:	d001      	beq.n	8008636 <osMessagePut+0x42>
      return osErrorOS;
 8008632:	23ff      	movs	r3, #255	@ 0xff
 8008634:	e018      	b.n	8008668 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d014      	beq.n	8008666 <osMessagePut+0x72>
 800863c:	4b0c      	ldr	r3, [pc, #48]	@ (8008670 <osMessagePut+0x7c>)
 800863e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	e00b      	b.n	8008666 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800864e:	f107 0108 	add.w	r1, r7, #8
 8008652:	2300      	movs	r3, #0
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 f8c0 	bl	80087dc <xQueueGenericSend>
 800865c:	4603      	mov	r3, r0
 800865e:	2b01      	cmp	r3, #1
 8008660:	d001      	beq.n	8008666 <osMessagePut+0x72>
      return osErrorOS;
 8008662:	23ff      	movs	r3, #255	@ 0xff
 8008664:	e000      	b.n	8008668 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	e000ed04 	.word	0xe000ed04

08008674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f103 0208 	add.w	r2, r3, #8
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800868c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f103 0208 	add.w	r2, r3, #8
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f103 0208 	add.w	r2, r3, #8
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086c2:	bf00      	nop
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	601a      	str	r2, [r3, #0]
}
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008716:	b480      	push	{r7}
 8008718:	b085      	sub	sp, #20
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800872c:	d103      	bne.n	8008736 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	e00c      	b.n	8008750 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3308      	adds	r3, #8
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	e002      	b.n	8008744 <vListInsert+0x2e>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	429a      	cmp	r2, r3
 800874e:	d2f6      	bcs.n	800873e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	601a      	str	r2, [r3, #0]
}
 800877c:	bf00      	nop
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	6892      	ldr	r2, [r2, #8]
 800879e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	6852      	ldr	r2, [r2, #4]
 80087a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d103      	bne.n	80087bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	689a      	ldr	r2, [r3, #8]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	1e5a      	subs	r2, r3, #1
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08e      	sub	sp, #56	@ 0x38
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087ea:	2300      	movs	r3, #0
 80087ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80087f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10b      	bne.n	8008810 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800880a:	bf00      	nop
 800880c:	bf00      	nop
 800880e:	e7fd      	b.n	800880c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d103      	bne.n	800881e <xQueueGenericSend+0x42>
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <xQueueGenericSend+0x46>
 800881e:	2301      	movs	r3, #1
 8008820:	e000      	b.n	8008824 <xQueueGenericSend+0x48>
 8008822:	2300      	movs	r3, #0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10b      	bne.n	8008840 <xQueueGenericSend+0x64>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800883a:	bf00      	nop
 800883c:	bf00      	nop
 800883e:	e7fd      	b.n	800883c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d103      	bne.n	800884e <xQueueGenericSend+0x72>
 8008846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800884a:	2b01      	cmp	r3, #1
 800884c:	d101      	bne.n	8008852 <xQueueGenericSend+0x76>
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <xQueueGenericSend+0x78>
 8008852:	2300      	movs	r3, #0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10b      	bne.n	8008870 <xQueueGenericSend+0x94>
	__asm volatile
 8008858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	623b      	str	r3, [r7, #32]
}
 800886a:	bf00      	nop
 800886c:	bf00      	nop
 800886e:	e7fd      	b.n	800886c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008870:	f000 ff5c 	bl	800972c <xTaskGetSchedulerState>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d102      	bne.n	8008880 <xQueueGenericSend+0xa4>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <xQueueGenericSend+0xa8>
 8008880:	2301      	movs	r3, #1
 8008882:	e000      	b.n	8008886 <xQueueGenericSend+0xaa>
 8008884:	2300      	movs	r3, #0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10b      	bne.n	80088a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	61fb      	str	r3, [r7, #28]
}
 800889c:	bf00      	nop
 800889e:	bf00      	nop
 80088a0:	e7fd      	b.n	800889e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088a2:	f001 f981 	bl	8009ba8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d302      	bcc.n	80088b8 <xQueueGenericSend+0xdc>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d129      	bne.n	800890c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	68b9      	ldr	r1, [r7, #8]
 80088bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088be:	f000 f92d 	bl	8008b1c <prvCopyDataToQueue>
 80088c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d010      	beq.n	80088ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	3324      	adds	r3, #36	@ 0x24
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 fd85 	bl	80093e0 <xTaskRemoveFromEventList>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d013      	beq.n	8008904 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088dc:	4b3f      	ldr	r3, [pc, #252]	@ (80089dc <xQueueGenericSend+0x200>)
 80088de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	e00a      	b.n	8008904 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d007      	beq.n	8008904 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088f4:	4b39      	ldr	r3, [pc, #228]	@ (80089dc <xQueueGenericSend+0x200>)
 80088f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008904:	f001 f982 	bl	8009c0c <vPortExitCritical>
				return pdPASS;
 8008908:	2301      	movs	r3, #1
 800890a:	e063      	b.n	80089d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d103      	bne.n	800891a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008912:	f001 f97b 	bl	8009c0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008916:	2300      	movs	r3, #0
 8008918:	e05c      	b.n	80089d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800891a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800891c:	2b00      	cmp	r3, #0
 800891e:	d106      	bne.n	800892e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008920:	f107 0314 	add.w	r3, r7, #20
 8008924:	4618      	mov	r0, r3
 8008926:	f000 fdbf 	bl	80094a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800892a:	2301      	movs	r3, #1
 800892c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800892e:	f001 f96d 	bl	8009c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008932:	f000 fb65 	bl	8009000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008936:	f001 f937 	bl	8009ba8 <vPortEnterCritical>
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008940:	b25b      	sxtb	r3, r3
 8008942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008946:	d103      	bne.n	8008950 <xQueueGenericSend+0x174>
 8008948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008952:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008956:	b25b      	sxtb	r3, r3
 8008958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800895c:	d103      	bne.n	8008966 <xQueueGenericSend+0x18a>
 800895e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008966:	f001 f951 	bl	8009c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800896a:	1d3a      	adds	r2, r7, #4
 800896c:	f107 0314 	add.w	r3, r7, #20
 8008970:	4611      	mov	r1, r2
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fdae 	bl	80094d4 <xTaskCheckForTimeOut>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d124      	bne.n	80089c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800897e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008980:	f000 f988 	bl	8008c94 <prvIsQueueFull>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d018      	beq.n	80089bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800898a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898c:	3310      	adds	r3, #16
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	4611      	mov	r1, r2
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fcfe 	bl	8009394 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008998:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800899a:	f000 f929 	bl	8008bf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800899e:	f000 fb3d 	bl	800901c <xTaskResumeAll>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f47f af7c 	bne.w	80088a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80089aa:	4b0c      	ldr	r3, [pc, #48]	@ (80089dc <xQueueGenericSend+0x200>)
 80089ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	e772      	b.n	80088a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089be:	f000 f917 	bl	8008bf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089c2:	f000 fb2b 	bl	800901c <xTaskResumeAll>
 80089c6:	e76c      	b.n	80088a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089ca:	f000 f911 	bl	8008bf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089ce:	f000 fb25 	bl	800901c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3738      	adds	r7, #56	@ 0x38
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	e000ed04 	.word	0xe000ed04

080089e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b090      	sub	sp, #64	@ 0x40
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80089f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10b      	bne.n	8008a10 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a0a:	bf00      	nop
 8008a0c:	bf00      	nop
 8008a0e:	e7fd      	b.n	8008a0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d103      	bne.n	8008a1e <xQueueGenericSendFromISR+0x3e>
 8008a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <xQueueGenericSendFromISR+0x42>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e000      	b.n	8008a24 <xQueueGenericSendFromISR+0x44>
 8008a22:	2300      	movs	r3, #0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10b      	bne.n	8008a40 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a3a:	bf00      	nop
 8008a3c:	bf00      	nop
 8008a3e:	e7fd      	b.n	8008a3c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d103      	bne.n	8008a4e <xQueueGenericSendFromISR+0x6e>
 8008a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d101      	bne.n	8008a52 <xQueueGenericSendFromISR+0x72>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e000      	b.n	8008a54 <xQueueGenericSendFromISR+0x74>
 8008a52:	2300      	movs	r3, #0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10b      	bne.n	8008a70 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	623b      	str	r3, [r7, #32]
}
 8008a6a:	bf00      	nop
 8008a6c:	bf00      	nop
 8008a6e:	e7fd      	b.n	8008a6c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a70:	f001 f97a 	bl	8009d68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a74:	f3ef 8211 	mrs	r2, BASEPRI
 8008a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	61fa      	str	r2, [r7, #28]
 8008a8a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a8e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d302      	bcc.n	8008aa2 <xQueueGenericSendFromISR+0xc2>
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d12f      	bne.n	8008b02 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008aa8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	68b9      	ldr	r1, [r7, #8]
 8008ab6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ab8:	f000 f830 	bl	8008b1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008abc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ac4:	d112      	bne.n	8008aec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d016      	beq.n	8008afc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad0:	3324      	adds	r3, #36	@ 0x24
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 fc84 	bl	80093e0 <xTaskRemoveFromEventList>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00e      	beq.n	8008afc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	e007      	b.n	8008afc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008aec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008af0:	3301      	adds	r3, #1
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	b25a      	sxtb	r2, r3
 8008af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008afc:	2301      	movs	r3, #1
 8008afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008b00:	e001      	b.n	8008b06 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b08:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3740      	adds	r7, #64	@ 0x40
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10d      	bne.n	8008b56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d14d      	bne.n	8008bde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fe0e 	bl	8009768 <xTaskPriorityDisinherit>
 8008b4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	609a      	str	r2, [r3, #8]
 8008b54:	e043      	b.n	8008bde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d119      	bne.n	8008b90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6858      	ldr	r0, [r3, #4]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b64:	461a      	mov	r2, r3
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	f002 f940 	bl	800adec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b74:	441a      	add	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d32b      	bcc.n	8008bde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	605a      	str	r2, [r3, #4]
 8008b8e:	e026      	b.n	8008bde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	68d8      	ldr	r0, [r3, #12]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b98:	461a      	mov	r2, r3
 8008b9a:	68b9      	ldr	r1, [r7, #8]
 8008b9c:	f002 f926 	bl	800adec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	68da      	ldr	r2, [r3, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba8:	425b      	negs	r3, r3
 8008baa:	441a      	add	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d207      	bcs.n	8008bcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc4:	425b      	negs	r3, r3
 8008bc6:	441a      	add	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d105      	bne.n	8008bde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008be6:	697b      	ldr	r3, [r7, #20]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008bf8:	f000 ffd6 	bl	8009ba8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c04:	e011      	b.n	8008c2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d012      	beq.n	8008c34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3324      	adds	r3, #36	@ 0x24
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fbe4 	bl	80093e0 <xTaskRemoveFromEventList>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c1e:	f000 fcbd 	bl	800959c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dce9      	bgt.n	8008c06 <prvUnlockQueue+0x16>
 8008c32:	e000      	b.n	8008c36 <prvUnlockQueue+0x46>
					break;
 8008c34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	22ff      	movs	r2, #255	@ 0xff
 8008c3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008c3e:	f000 ffe5 	bl	8009c0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c42:	f000 ffb1 	bl	8009ba8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c4e:	e011      	b.n	8008c74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d012      	beq.n	8008c7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3310      	adds	r3, #16
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 fbbf 	bl	80093e0 <xTaskRemoveFromEventList>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d001      	beq.n	8008c6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c68:	f000 fc98 	bl	800959c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	dce9      	bgt.n	8008c50 <prvUnlockQueue+0x60>
 8008c7c:	e000      	b.n	8008c80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	22ff      	movs	r2, #255	@ 0xff
 8008c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008c88:	f000 ffc0 	bl	8009c0c <vPortExitCritical>
}
 8008c8c:	bf00      	nop
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c9c:	f000 ff84 	bl	8009ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d102      	bne.n	8008cb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008cac:	2301      	movs	r3, #1
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	e001      	b.n	8008cb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cb6:	f000 ffa9 	bl	8009c0c <vPortExitCritical>

	return xReturn;
 8008cba:	68fb      	ldr	r3, [r7, #12]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08c      	sub	sp, #48	@ 0x30
 8008cc8:	af04      	add	r7, sp, #16
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cd4:	88fb      	ldrh	r3, [r7, #6]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f001 f887 	bl	8009dec <pvPortMalloc>
 8008cde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00e      	beq.n	8008d04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ce6:	20a0      	movs	r0, #160	@ 0xa0
 8008ce8:	f001 f880 	bl	8009dec <pvPortMalloc>
 8008cec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cfa:	e005      	b.n	8008d08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cfc:	6978      	ldr	r0, [r7, #20]
 8008cfe:	f001 f943 	bl	8009f88 <vPortFree>
 8008d02:	e001      	b.n	8008d08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d04:	2300      	movs	r3, #0
 8008d06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d013      	beq.n	8008d36 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d0e:	88fa      	ldrh	r2, [r7, #6]
 8008d10:	2300      	movs	r3, #0
 8008d12:	9303      	str	r3, [sp, #12]
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	9302      	str	r3, [sp, #8]
 8008d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1a:	9301      	str	r3, [sp, #4]
 8008d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	68b9      	ldr	r1, [r7, #8]
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 f80f 	bl	8008d48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d2a:	69f8      	ldr	r0, [r7, #28]
 8008d2c:	f000 f8ac 	bl	8008e88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d30:	2301      	movs	r3, #1
 8008d32:	61bb      	str	r3, [r7, #24]
 8008d34:	e002      	b.n	8008d3c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d3c:	69bb      	ldr	r3, [r7, #24]
	}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3720      	adds	r7, #32
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d60:	3b01      	subs	r3, #1
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	f023 0307 	bic.w	r3, r3, #7
 8008d6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00b      	beq.n	8008d92 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	617b      	str	r3, [r7, #20]
}
 8008d8c:	bf00      	nop
 8008d8e:	bf00      	nop
 8008d90:	e7fd      	b.n	8008d8e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d01f      	beq.n	8008dd8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61fb      	str	r3, [r7, #28]
 8008d9c:	e012      	b.n	8008dc4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	7819      	ldrb	r1, [r3, #0]
 8008da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	4413      	add	r3, r2
 8008dac:	3334      	adds	r3, #52	@ 0x34
 8008dae:	460a      	mov	r2, r1
 8008db0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	4413      	add	r3, r2
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d006      	beq.n	8008dcc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	61fb      	str	r3, [r7, #28]
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	2b0f      	cmp	r3, #15
 8008dc8:	d9e9      	bls.n	8008d9e <prvInitialiseNewTask+0x56>
 8008dca:	e000      	b.n	8008dce <prvInitialiseNewTask+0x86>
			{
				break;
 8008dcc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008dd6:	e003      	b.n	8008de0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de2:	2b06      	cmp	r3, #6
 8008de4:	d901      	bls.n	8008dea <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008de6:	2306      	movs	r3, #6
 8008de8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008df4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	2200      	movs	r2, #0
 8008dfa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	3304      	adds	r3, #4
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff fc57 	bl	80086b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e08:	3318      	adds	r3, #24
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fc52 	bl	80086b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e18:	f1c3 0207 	rsb	r2, r3, #7
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e24:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e38:	334c      	adds	r3, #76	@ 0x4c
 8008e3a:	224c      	movs	r2, #76	@ 0x4c
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f001 ff36 	bl	800acb0 <memset>
 8008e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e46:	4a0d      	ldr	r2, [pc, #52]	@ (8008e7c <prvInitialiseNewTask+0x134>)
 8008e48:	651a      	str	r2, [r3, #80]	@ 0x50
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8008e80 <prvInitialiseNewTask+0x138>)
 8008e4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e52:	4a0c      	ldr	r2, [pc, #48]	@ (8008e84 <prvInitialiseNewTask+0x13c>)
 8008e54:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	68f9      	ldr	r1, [r7, #12]
 8008e5a:	69b8      	ldr	r0, [r7, #24]
 8008e5c:	f000 fd72 	bl	8009944 <pxPortInitialiseStack>
 8008e60:	4602      	mov	r2, r0
 8008e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e72:	bf00      	nop
 8008e74:	3720      	adds	r7, #32
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20001534 	.word	0x20001534
 8008e80:	2000159c 	.word	0x2000159c
 8008e84:	20001604 	.word	0x20001604

08008e88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e90:	f000 fe8a 	bl	8009ba8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e94:	4b2a      	ldr	r3, [pc, #168]	@ (8008f40 <prvAddNewTaskToReadyList+0xb8>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	4a29      	ldr	r2, [pc, #164]	@ (8008f40 <prvAddNewTaskToReadyList+0xb8>)
 8008e9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e9e:	4b29      	ldr	r3, [pc, #164]	@ (8008f44 <prvAddNewTaskToReadyList+0xbc>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d109      	bne.n	8008eba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ea6:	4a27      	ldr	r2, [pc, #156]	@ (8008f44 <prvAddNewTaskToReadyList+0xbc>)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008eac:	4b24      	ldr	r3, [pc, #144]	@ (8008f40 <prvAddNewTaskToReadyList+0xb8>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d110      	bne.n	8008ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008eb4:	f000 fb96 	bl	80095e4 <prvInitialiseTaskLists>
 8008eb8:	e00d      	b.n	8008ed6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008eba:	4b23      	ldr	r3, [pc, #140]	@ (8008f48 <prvAddNewTaskToReadyList+0xc0>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d109      	bne.n	8008ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ec2:	4b20      	ldr	r3, [pc, #128]	@ (8008f44 <prvAddNewTaskToReadyList+0xbc>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d802      	bhi.n	8008ed6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8008f44 <prvAddNewTaskToReadyList+0xbc>)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8008f4c <prvAddNewTaskToReadyList+0xc4>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3301      	adds	r3, #1
 8008edc:	4a1b      	ldr	r2, [pc, #108]	@ (8008f4c <prvAddNewTaskToReadyList+0xc4>)
 8008ede:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	409a      	lsls	r2, r3
 8008ee8:	4b19      	ldr	r3, [pc, #100]	@ (8008f50 <prvAddNewTaskToReadyList+0xc8>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	4a18      	ldr	r2, [pc, #96]	@ (8008f50 <prvAddNewTaskToReadyList+0xc8>)
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4a15      	ldr	r2, [pc, #84]	@ (8008f54 <prvAddNewTaskToReadyList+0xcc>)
 8008f00:	441a      	add	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	3304      	adds	r3, #4
 8008f06:	4619      	mov	r1, r3
 8008f08:	4610      	mov	r0, r2
 8008f0a:	f7ff fbe0 	bl	80086ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f0e:	f000 fe7d 	bl	8009c0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f12:	4b0d      	ldr	r3, [pc, #52]	@ (8008f48 <prvAddNewTaskToReadyList+0xc0>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00e      	beq.n	8008f38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f44 <prvAddNewTaskToReadyList+0xbc>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d207      	bcs.n	8008f38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f28:	4b0b      	ldr	r3, [pc, #44]	@ (8008f58 <prvAddNewTaskToReadyList+0xd0>)
 8008f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f2e:	601a      	str	r2, [r3, #0]
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f38:	bf00      	nop
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	2000057c 	.word	0x2000057c
 8008f44:	2000047c 	.word	0x2000047c
 8008f48:	20000588 	.word	0x20000588
 8008f4c:	20000598 	.word	0x20000598
 8008f50:	20000584 	.word	0x20000584
 8008f54:	20000480 	.word	0x20000480
 8008f58:	e000ed04 	.word	0xe000ed04

08008f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008f62:	4b1f      	ldr	r3, [pc, #124]	@ (8008fe0 <vTaskStartScheduler+0x84>)
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	2300      	movs	r3, #0
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	2280      	movs	r2, #128	@ 0x80
 8008f6e:	491d      	ldr	r1, [pc, #116]	@ (8008fe4 <vTaskStartScheduler+0x88>)
 8008f70:	481d      	ldr	r0, [pc, #116]	@ (8008fe8 <vTaskStartScheduler+0x8c>)
 8008f72:	f7ff fea7 	bl	8008cc4 <xTaskCreate>
 8008f76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d11b      	bne.n	8008fb6 <vTaskStartScheduler+0x5a>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	60bb      	str	r3, [r7, #8]
}
 8008f90:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f92:	4b16      	ldr	r3, [pc, #88]	@ (8008fec <vTaskStartScheduler+0x90>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	334c      	adds	r3, #76	@ 0x4c
 8008f98:	4a15      	ldr	r2, [pc, #84]	@ (8008ff0 <vTaskStartScheduler+0x94>)
 8008f9a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f9c:	4b15      	ldr	r3, [pc, #84]	@ (8008ff4 <vTaskStartScheduler+0x98>)
 8008f9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fa2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fa4:	4b14      	ldr	r3, [pc, #80]	@ (8008ff8 <vTaskStartScheduler+0x9c>)
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008faa:	4b14      	ldr	r3, [pc, #80]	@ (8008ffc <vTaskStartScheduler+0xa0>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fb0:	f000 fd56 	bl	8009a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fb4:	e00f      	b.n	8008fd6 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fbc:	d10b      	bne.n	8008fd6 <vTaskStartScheduler+0x7a>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	607b      	str	r3, [r7, #4]
}
 8008fd0:	bf00      	nop
 8008fd2:	bf00      	nop
 8008fd4:	e7fd      	b.n	8008fd2 <vTaskStartScheduler+0x76>
}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	200005a0 	.word	0x200005a0
 8008fe4:	0800bce0 	.word	0x0800bce0
 8008fe8:	080095b5 	.word	0x080095b5
 8008fec:	2000047c 	.word	0x2000047c
 8008ff0:	2000002c 	.word	0x2000002c
 8008ff4:	2000059c 	.word	0x2000059c
 8008ff8:	20000588 	.word	0x20000588
 8008ffc:	20000580 	.word	0x20000580

08009000 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009000:	b480      	push	{r7}
 8009002:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009004:	4b04      	ldr	r3, [pc, #16]	@ (8009018 <vTaskSuspendAll+0x18>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3301      	adds	r3, #1
 800900a:	4a03      	ldr	r2, [pc, #12]	@ (8009018 <vTaskSuspendAll+0x18>)
 800900c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800900e:	bf00      	nop
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	200005a4 	.word	0x200005a4

0800901c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009026:	2300      	movs	r3, #0
 8009028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800902a:	4b42      	ldr	r3, [pc, #264]	@ (8009134 <xTaskResumeAll+0x118>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10b      	bne.n	800904a <xTaskResumeAll+0x2e>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	603b      	str	r3, [r7, #0]
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop
 8009048:	e7fd      	b.n	8009046 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800904a:	f000 fdad 	bl	8009ba8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800904e:	4b39      	ldr	r3, [pc, #228]	@ (8009134 <xTaskResumeAll+0x118>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3b01      	subs	r3, #1
 8009054:	4a37      	ldr	r2, [pc, #220]	@ (8009134 <xTaskResumeAll+0x118>)
 8009056:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009058:	4b36      	ldr	r3, [pc, #216]	@ (8009134 <xTaskResumeAll+0x118>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d161      	bne.n	8009124 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009060:	4b35      	ldr	r3, [pc, #212]	@ (8009138 <xTaskResumeAll+0x11c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d05d      	beq.n	8009124 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009068:	e02e      	b.n	80090c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906a:	4b34      	ldr	r3, [pc, #208]	@ (800913c <xTaskResumeAll+0x120>)
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3318      	adds	r3, #24
 8009076:	4618      	mov	r0, r3
 8009078:	f7ff fb86 	bl	8008788 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	3304      	adds	r3, #4
 8009080:	4618      	mov	r0, r3
 8009082:	f7ff fb81 	bl	8008788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908a:	2201      	movs	r2, #1
 800908c:	409a      	lsls	r2, r3
 800908e:	4b2c      	ldr	r3, [pc, #176]	@ (8009140 <xTaskResumeAll+0x124>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4313      	orrs	r3, r2
 8009094:	4a2a      	ldr	r2, [pc, #168]	@ (8009140 <xTaskResumeAll+0x124>)
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4a27      	ldr	r2, [pc, #156]	@ (8009144 <xTaskResumeAll+0x128>)
 80090a6:	441a      	add	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3304      	adds	r3, #4
 80090ac:	4619      	mov	r1, r3
 80090ae:	4610      	mov	r0, r2
 80090b0:	f7ff fb0d 	bl	80086ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090b8:	4b23      	ldr	r3, [pc, #140]	@ (8009148 <xTaskResumeAll+0x12c>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090be:	429a      	cmp	r2, r3
 80090c0:	d302      	bcc.n	80090c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80090c2:	4b22      	ldr	r3, [pc, #136]	@ (800914c <xTaskResumeAll+0x130>)
 80090c4:	2201      	movs	r2, #1
 80090c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090c8:	4b1c      	ldr	r3, [pc, #112]	@ (800913c <xTaskResumeAll+0x120>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1cc      	bne.n	800906a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090d6:	f000 fb09 	bl	80096ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090da:	4b1d      	ldr	r3, [pc, #116]	@ (8009150 <xTaskResumeAll+0x134>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d010      	beq.n	8009108 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090e6:	f000 f837 	bl	8009158 <xTaskIncrementTick>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80090f0:	4b16      	ldr	r3, [pc, #88]	@ (800914c <xTaskResumeAll+0x130>)
 80090f2:	2201      	movs	r2, #1
 80090f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1f1      	bne.n	80090e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009102:	4b13      	ldr	r3, [pc, #76]	@ (8009150 <xTaskResumeAll+0x134>)
 8009104:	2200      	movs	r2, #0
 8009106:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009108:	4b10      	ldr	r3, [pc, #64]	@ (800914c <xTaskResumeAll+0x130>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d009      	beq.n	8009124 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009110:	2301      	movs	r3, #1
 8009112:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009114:	4b0f      	ldr	r3, [pc, #60]	@ (8009154 <xTaskResumeAll+0x138>)
 8009116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009124:	f000 fd72 	bl	8009c0c <vPortExitCritical>

	return xAlreadyYielded;
 8009128:	68bb      	ldr	r3, [r7, #8]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	200005a4 	.word	0x200005a4
 8009138:	2000057c 	.word	0x2000057c
 800913c:	2000053c 	.word	0x2000053c
 8009140:	20000584 	.word	0x20000584
 8009144:	20000480 	.word	0x20000480
 8009148:	2000047c 	.word	0x2000047c
 800914c:	20000590 	.word	0x20000590
 8009150:	2000058c 	.word	0x2000058c
 8009154:	e000ed04 	.word	0xe000ed04

08009158 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800915e:	2300      	movs	r3, #0
 8009160:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009162:	4b4f      	ldr	r3, [pc, #316]	@ (80092a0 <xTaskIncrementTick+0x148>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	f040 808f 	bne.w	800928a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800916c:	4b4d      	ldr	r3, [pc, #308]	@ (80092a4 <xTaskIncrementTick+0x14c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3301      	adds	r3, #1
 8009172:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009174:	4a4b      	ldr	r2, [pc, #300]	@ (80092a4 <xTaskIncrementTick+0x14c>)
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d121      	bne.n	80091c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009180:	4b49      	ldr	r3, [pc, #292]	@ (80092a8 <xTaskIncrementTick+0x150>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00b      	beq.n	80091a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	603b      	str	r3, [r7, #0]
}
 800919c:	bf00      	nop
 800919e:	bf00      	nop
 80091a0:	e7fd      	b.n	800919e <xTaskIncrementTick+0x46>
 80091a2:	4b41      	ldr	r3, [pc, #260]	@ (80092a8 <xTaskIncrementTick+0x150>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	4b40      	ldr	r3, [pc, #256]	@ (80092ac <xTaskIncrementTick+0x154>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a3e      	ldr	r2, [pc, #248]	@ (80092a8 <xTaskIncrementTick+0x150>)
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	4a3e      	ldr	r2, [pc, #248]	@ (80092ac <xTaskIncrementTick+0x154>)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	4b3e      	ldr	r3, [pc, #248]	@ (80092b0 <xTaskIncrementTick+0x158>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3301      	adds	r3, #1
 80091bc:	4a3c      	ldr	r2, [pc, #240]	@ (80092b0 <xTaskIncrementTick+0x158>)
 80091be:	6013      	str	r3, [r2, #0]
 80091c0:	f000 fa94 	bl	80096ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091c4:	4b3b      	ldr	r3, [pc, #236]	@ (80092b4 <xTaskIncrementTick+0x15c>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d348      	bcc.n	8009260 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091ce:	4b36      	ldr	r3, [pc, #216]	@ (80092a8 <xTaskIncrementTick+0x150>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d104      	bne.n	80091e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091d8:	4b36      	ldr	r3, [pc, #216]	@ (80092b4 <xTaskIncrementTick+0x15c>)
 80091da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091de:	601a      	str	r2, [r3, #0]
					break;
 80091e0:	e03e      	b.n	8009260 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e2:	4b31      	ldr	r3, [pc, #196]	@ (80092a8 <xTaskIncrementTick+0x150>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d203      	bcs.n	8009202 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091fa:	4a2e      	ldr	r2, [pc, #184]	@ (80092b4 <xTaskIncrementTick+0x15c>)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009200:	e02e      	b.n	8009260 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	3304      	adds	r3, #4
 8009206:	4618      	mov	r0, r3
 8009208:	f7ff fabe 	bl	8008788 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009210:	2b00      	cmp	r3, #0
 8009212:	d004      	beq.n	800921e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	3318      	adds	r3, #24
 8009218:	4618      	mov	r0, r3
 800921a:	f7ff fab5 	bl	8008788 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009222:	2201      	movs	r2, #1
 8009224:	409a      	lsls	r2, r3
 8009226:	4b24      	ldr	r3, [pc, #144]	@ (80092b8 <xTaskIncrementTick+0x160>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4313      	orrs	r3, r2
 800922c:	4a22      	ldr	r2, [pc, #136]	@ (80092b8 <xTaskIncrementTick+0x160>)
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4a1f      	ldr	r2, [pc, #124]	@ (80092bc <xTaskIncrementTick+0x164>)
 800923e:	441a      	add	r2, r3
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	3304      	adds	r3, #4
 8009244:	4619      	mov	r1, r3
 8009246:	4610      	mov	r0, r2
 8009248:	f7ff fa41 	bl	80086ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009250:	4b1b      	ldr	r3, [pc, #108]	@ (80092c0 <xTaskIncrementTick+0x168>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009256:	429a      	cmp	r2, r3
 8009258:	d3b9      	bcc.n	80091ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800925a:	2301      	movs	r3, #1
 800925c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800925e:	e7b6      	b.n	80091ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009260:	4b17      	ldr	r3, [pc, #92]	@ (80092c0 <xTaskIncrementTick+0x168>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009266:	4915      	ldr	r1, [pc, #84]	@ (80092bc <xTaskIncrementTick+0x164>)
 8009268:	4613      	mov	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	440b      	add	r3, r1
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d901      	bls.n	800927c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009278:	2301      	movs	r3, #1
 800927a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800927c:	4b11      	ldr	r3, [pc, #68]	@ (80092c4 <xTaskIncrementTick+0x16c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d007      	beq.n	8009294 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009284:	2301      	movs	r3, #1
 8009286:	617b      	str	r3, [r7, #20]
 8009288:	e004      	b.n	8009294 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800928a:	4b0f      	ldr	r3, [pc, #60]	@ (80092c8 <xTaskIncrementTick+0x170>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3301      	adds	r3, #1
 8009290:	4a0d      	ldr	r2, [pc, #52]	@ (80092c8 <xTaskIncrementTick+0x170>)
 8009292:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009294:	697b      	ldr	r3, [r7, #20]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	200005a4 	.word	0x200005a4
 80092a4:	20000580 	.word	0x20000580
 80092a8:	20000534 	.word	0x20000534
 80092ac:	20000538 	.word	0x20000538
 80092b0:	20000594 	.word	0x20000594
 80092b4:	2000059c 	.word	0x2000059c
 80092b8:	20000584 	.word	0x20000584
 80092bc:	20000480 	.word	0x20000480
 80092c0:	2000047c 	.word	0x2000047c
 80092c4:	20000590 	.word	0x20000590
 80092c8:	2000058c 	.word	0x2000058c

080092cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092d2:	4b2a      	ldr	r3, [pc, #168]	@ (800937c <vTaskSwitchContext+0xb0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092da:	4b29      	ldr	r3, [pc, #164]	@ (8009380 <vTaskSwitchContext+0xb4>)
 80092dc:	2201      	movs	r2, #1
 80092de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092e0:	e045      	b.n	800936e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80092e2:	4b27      	ldr	r3, [pc, #156]	@ (8009380 <vTaskSwitchContext+0xb4>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092e8:	4b26      	ldr	r3, [pc, #152]	@ (8009384 <vTaskSwitchContext+0xb8>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	fab3 f383 	clz	r3, r3
 80092f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80092f6:	7afb      	ldrb	r3, [r7, #11]
 80092f8:	f1c3 031f 	rsb	r3, r3, #31
 80092fc:	617b      	str	r3, [r7, #20]
 80092fe:	4922      	ldr	r1, [pc, #136]	@ (8009388 <vTaskSwitchContext+0xbc>)
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	4613      	mov	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	440b      	add	r3, r1
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10b      	bne.n	800932a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	607b      	str	r3, [r7, #4]
}
 8009324:	bf00      	nop
 8009326:	bf00      	nop
 8009328:	e7fd      	b.n	8009326 <vTaskSwitchContext+0x5a>
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	4613      	mov	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4a14      	ldr	r2, [pc, #80]	@ (8009388 <vTaskSwitchContext+0xbc>)
 8009336:	4413      	add	r3, r2
 8009338:	613b      	str	r3, [r7, #16]
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	605a      	str	r2, [r3, #4]
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	3308      	adds	r3, #8
 800934c:	429a      	cmp	r2, r3
 800934e:	d104      	bne.n	800935a <vTaskSwitchContext+0x8e>
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	605a      	str	r2, [r3, #4]
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	4a0a      	ldr	r2, [pc, #40]	@ (800938c <vTaskSwitchContext+0xc0>)
 8009362:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009364:	4b09      	ldr	r3, [pc, #36]	@ (800938c <vTaskSwitchContext+0xc0>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	334c      	adds	r3, #76	@ 0x4c
 800936a:	4a09      	ldr	r2, [pc, #36]	@ (8009390 <vTaskSwitchContext+0xc4>)
 800936c:	6013      	str	r3, [r2, #0]
}
 800936e:	bf00      	nop
 8009370:	371c      	adds	r7, #28
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	200005a4 	.word	0x200005a4
 8009380:	20000590 	.word	0x20000590
 8009384:	20000584 	.word	0x20000584
 8009388:	20000480 	.word	0x20000480
 800938c:	2000047c 	.word	0x2000047c
 8009390:	2000002c 	.word	0x2000002c

08009394 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10b      	bne.n	80093bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	60fb      	str	r3, [r7, #12]
}
 80093b6:	bf00      	nop
 80093b8:	bf00      	nop
 80093ba:	e7fd      	b.n	80093b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093bc:	4b07      	ldr	r3, [pc, #28]	@ (80093dc <vTaskPlaceOnEventList+0x48>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3318      	adds	r3, #24
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff f9a6 	bl	8008716 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093ca:	2101      	movs	r1, #1
 80093cc:	6838      	ldr	r0, [r7, #0]
 80093ce:	f000 fa53 	bl	8009878 <prvAddCurrentTaskToDelayedList>
}
 80093d2:	bf00      	nop
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	2000047c 	.word	0x2000047c

080093e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10b      	bne.n	800940e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	60fb      	str	r3, [r7, #12]
}
 8009408:	bf00      	nop
 800940a:	bf00      	nop
 800940c:	e7fd      	b.n	800940a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	3318      	adds	r3, #24
 8009412:	4618      	mov	r0, r3
 8009414:	f7ff f9b8 	bl	8008788 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009418:	4b1d      	ldr	r3, [pc, #116]	@ (8009490 <xTaskRemoveFromEventList+0xb0>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d11c      	bne.n	800945a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	3304      	adds	r3, #4
 8009424:	4618      	mov	r0, r3
 8009426:	f7ff f9af 	bl	8008788 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942e:	2201      	movs	r2, #1
 8009430:	409a      	lsls	r2, r3
 8009432:	4b18      	ldr	r3, [pc, #96]	@ (8009494 <xTaskRemoveFromEventList+0xb4>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4313      	orrs	r3, r2
 8009438:	4a16      	ldr	r2, [pc, #88]	@ (8009494 <xTaskRemoveFromEventList+0xb4>)
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009440:	4613      	mov	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4413      	add	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4a13      	ldr	r2, [pc, #76]	@ (8009498 <xTaskRemoveFromEventList+0xb8>)
 800944a:	441a      	add	r2, r3
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	3304      	adds	r3, #4
 8009450:	4619      	mov	r1, r3
 8009452:	4610      	mov	r0, r2
 8009454:	f7ff f93b 	bl	80086ce <vListInsertEnd>
 8009458:	e005      	b.n	8009466 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	3318      	adds	r3, #24
 800945e:	4619      	mov	r1, r3
 8009460:	480e      	ldr	r0, [pc, #56]	@ (800949c <xTaskRemoveFromEventList+0xbc>)
 8009462:	f7ff f934 	bl	80086ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946a:	4b0d      	ldr	r3, [pc, #52]	@ (80094a0 <xTaskRemoveFromEventList+0xc0>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009470:	429a      	cmp	r2, r3
 8009472:	d905      	bls.n	8009480 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009474:	2301      	movs	r3, #1
 8009476:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009478:	4b0a      	ldr	r3, [pc, #40]	@ (80094a4 <xTaskRemoveFromEventList+0xc4>)
 800947a:	2201      	movs	r2, #1
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	e001      	b.n	8009484 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009480:	2300      	movs	r3, #0
 8009482:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009484:	697b      	ldr	r3, [r7, #20]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	200005a4 	.word	0x200005a4
 8009494:	20000584 	.word	0x20000584
 8009498:	20000480 	.word	0x20000480
 800949c:	2000053c 	.word	0x2000053c
 80094a0:	2000047c 	.word	0x2000047c
 80094a4:	20000590 	.word	0x20000590

080094a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094b0:	4b06      	ldr	r3, [pc, #24]	@ (80094cc <vTaskInternalSetTimeOutState+0x24>)
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094b8:	4b05      	ldr	r3, [pc, #20]	@ (80094d0 <vTaskInternalSetTimeOutState+0x28>)
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	605a      	str	r2, [r3, #4]
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	20000594 	.word	0x20000594
 80094d0:	20000580 	.word	0x20000580

080094d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b088      	sub	sp, #32
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10b      	bne.n	80094fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	613b      	str	r3, [r7, #16]
}
 80094f6:	bf00      	nop
 80094f8:	bf00      	nop
 80094fa:	e7fd      	b.n	80094f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10b      	bne.n	800951a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	60fb      	str	r3, [r7, #12]
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop
 8009518:	e7fd      	b.n	8009516 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800951a:	f000 fb45 	bl	8009ba8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800951e:	4b1d      	ldr	r3, [pc, #116]	@ (8009594 <xTaskCheckForTimeOut+0xc0>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009536:	d102      	bne.n	800953e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009538:	2300      	movs	r3, #0
 800953a:	61fb      	str	r3, [r7, #28]
 800953c:	e023      	b.n	8009586 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	4b15      	ldr	r3, [pc, #84]	@ (8009598 <xTaskCheckForTimeOut+0xc4>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	d007      	beq.n	800955a <xTaskCheckForTimeOut+0x86>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	69ba      	ldr	r2, [r7, #24]
 8009550:	429a      	cmp	r2, r3
 8009552:	d302      	bcc.n	800955a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	61fb      	str	r3, [r7, #28]
 8009558:	e015      	b.n	8009586 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	429a      	cmp	r2, r3
 8009562:	d20b      	bcs.n	800957c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	1ad2      	subs	r2, r2, r3
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7ff ff99 	bl	80094a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009576:	2300      	movs	r3, #0
 8009578:	61fb      	str	r3, [r7, #28]
 800957a:	e004      	b.n	8009586 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009582:	2301      	movs	r3, #1
 8009584:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009586:	f000 fb41 	bl	8009c0c <vPortExitCritical>

	return xReturn;
 800958a:	69fb      	ldr	r3, [r7, #28]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3720      	adds	r7, #32
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20000580 	.word	0x20000580
 8009598:	20000594 	.word	0x20000594

0800959c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800959c:	b480      	push	{r7}
 800959e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80095a0:	4b03      	ldr	r3, [pc, #12]	@ (80095b0 <vTaskMissedYield+0x14>)
 80095a2:	2201      	movs	r2, #1
 80095a4:	601a      	str	r2, [r3, #0]
}
 80095a6:	bf00      	nop
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	20000590 	.word	0x20000590

080095b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095bc:	f000 f852 	bl	8009664 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095c0:	4b06      	ldr	r3, [pc, #24]	@ (80095dc <prvIdleTask+0x28>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d9f9      	bls.n	80095bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80095c8:	4b05      	ldr	r3, [pc, #20]	@ (80095e0 <prvIdleTask+0x2c>)
 80095ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095d8:	e7f0      	b.n	80095bc <prvIdleTask+0x8>
 80095da:	bf00      	nop
 80095dc:	20000480 	.word	0x20000480
 80095e0:	e000ed04 	.word	0xe000ed04

080095e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095ea:	2300      	movs	r3, #0
 80095ec:	607b      	str	r3, [r7, #4]
 80095ee:	e00c      	b.n	800960a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4a12      	ldr	r2, [pc, #72]	@ (8009644 <prvInitialiseTaskLists+0x60>)
 80095fc:	4413      	add	r3, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff f838 	bl	8008674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3301      	adds	r3, #1
 8009608:	607b      	str	r3, [r7, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b06      	cmp	r3, #6
 800960e:	d9ef      	bls.n	80095f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009610:	480d      	ldr	r0, [pc, #52]	@ (8009648 <prvInitialiseTaskLists+0x64>)
 8009612:	f7ff f82f 	bl	8008674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009616:	480d      	ldr	r0, [pc, #52]	@ (800964c <prvInitialiseTaskLists+0x68>)
 8009618:	f7ff f82c 	bl	8008674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800961c:	480c      	ldr	r0, [pc, #48]	@ (8009650 <prvInitialiseTaskLists+0x6c>)
 800961e:	f7ff f829 	bl	8008674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009622:	480c      	ldr	r0, [pc, #48]	@ (8009654 <prvInitialiseTaskLists+0x70>)
 8009624:	f7ff f826 	bl	8008674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009628:	480b      	ldr	r0, [pc, #44]	@ (8009658 <prvInitialiseTaskLists+0x74>)
 800962a:	f7ff f823 	bl	8008674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800962e:	4b0b      	ldr	r3, [pc, #44]	@ (800965c <prvInitialiseTaskLists+0x78>)
 8009630:	4a05      	ldr	r2, [pc, #20]	@ (8009648 <prvInitialiseTaskLists+0x64>)
 8009632:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009634:	4b0a      	ldr	r3, [pc, #40]	@ (8009660 <prvInitialiseTaskLists+0x7c>)
 8009636:	4a05      	ldr	r2, [pc, #20]	@ (800964c <prvInitialiseTaskLists+0x68>)
 8009638:	601a      	str	r2, [r3, #0]
}
 800963a:	bf00      	nop
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000480 	.word	0x20000480
 8009648:	2000050c 	.word	0x2000050c
 800964c:	20000520 	.word	0x20000520
 8009650:	2000053c 	.word	0x2000053c
 8009654:	20000550 	.word	0x20000550
 8009658:	20000568 	.word	0x20000568
 800965c:	20000534 	.word	0x20000534
 8009660:	20000538 	.word	0x20000538

08009664 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800966a:	e019      	b.n	80096a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800966c:	f000 fa9c 	bl	8009ba8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009670:	4b10      	ldr	r3, [pc, #64]	@ (80096b4 <prvCheckTasksWaitingTermination+0x50>)
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3304      	adds	r3, #4
 800967c:	4618      	mov	r0, r3
 800967e:	f7ff f883 	bl	8008788 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009682:	4b0d      	ldr	r3, [pc, #52]	@ (80096b8 <prvCheckTasksWaitingTermination+0x54>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3b01      	subs	r3, #1
 8009688:	4a0b      	ldr	r2, [pc, #44]	@ (80096b8 <prvCheckTasksWaitingTermination+0x54>)
 800968a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800968c:	4b0b      	ldr	r3, [pc, #44]	@ (80096bc <prvCheckTasksWaitingTermination+0x58>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3b01      	subs	r3, #1
 8009692:	4a0a      	ldr	r2, [pc, #40]	@ (80096bc <prvCheckTasksWaitingTermination+0x58>)
 8009694:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009696:	f000 fab9 	bl	8009c0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f810 	bl	80096c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096a0:	4b06      	ldr	r3, [pc, #24]	@ (80096bc <prvCheckTasksWaitingTermination+0x58>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e1      	bne.n	800966c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80096a8:	bf00      	nop
 80096aa:	bf00      	nop
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20000550 	.word	0x20000550
 80096b8:	2000057c 	.word	0x2000057c
 80096bc:	20000564 	.word	0x20000564

080096c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	334c      	adds	r3, #76	@ 0x4c
 80096cc:	4618      	mov	r0, r3
 80096ce:	f001 faf7 	bl	800acc0 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fc56 	bl	8009f88 <vPortFree>
			vPortFree( pxTCB );
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fc53 	bl	8009f88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096e2:	bf00      	nop
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009724 <prvResetNextTaskUnblockTime+0x38>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d104      	bne.n	8009706 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009728 <prvResetNextTaskUnblockTime+0x3c>)
 80096fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009702:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009704:	e008      	b.n	8009718 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009706:	4b07      	ldr	r3, [pc, #28]	@ (8009724 <prvResetNextTaskUnblockTime+0x38>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	4a04      	ldr	r2, [pc, #16]	@ (8009728 <prvResetNextTaskUnblockTime+0x3c>)
 8009716:	6013      	str	r3, [r2, #0]
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	20000534 	.word	0x20000534
 8009728:	2000059c 	.word	0x2000059c

0800972c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009732:	4b0b      	ldr	r3, [pc, #44]	@ (8009760 <xTaskGetSchedulerState+0x34>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d102      	bne.n	8009740 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800973a:	2301      	movs	r3, #1
 800973c:	607b      	str	r3, [r7, #4]
 800973e:	e008      	b.n	8009752 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009740:	4b08      	ldr	r3, [pc, #32]	@ (8009764 <xTaskGetSchedulerState+0x38>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d102      	bne.n	800974e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009748:	2302      	movs	r3, #2
 800974a:	607b      	str	r3, [r7, #4]
 800974c:	e001      	b.n	8009752 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800974e:	2300      	movs	r3, #0
 8009750:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009752:	687b      	ldr	r3, [r7, #4]
	}
 8009754:	4618      	mov	r0, r3
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	20000588 	.word	0x20000588
 8009764:	200005a4 	.word	0x200005a4

08009768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009774:	2300      	movs	r3, #0
 8009776:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d070      	beq.n	8009860 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800977e:	4b3b      	ldr	r3, [pc, #236]	@ (800986c <xTaskPriorityDisinherit+0x104>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	429a      	cmp	r2, r3
 8009786:	d00b      	beq.n	80097a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	60fb      	str	r3, [r7, #12]
}
 800979a:	bf00      	nop
 800979c:	bf00      	nop
 800979e:	e7fd      	b.n	800979c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10b      	bne.n	80097c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80097a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	60bb      	str	r3, [r7, #8]
}
 80097ba:	bf00      	nop
 80097bc:	bf00      	nop
 80097be:	e7fd      	b.n	80097bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097c4:	1e5a      	subs	r2, r3, #1
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d044      	beq.n	8009860 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d140      	bne.n	8009860 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	3304      	adds	r3, #4
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fe ffd0 	bl	8008788 <uxListRemove>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d115      	bne.n	800981a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097f2:	491f      	ldr	r1, [pc, #124]	@ (8009870 <xTaskPriorityDisinherit+0x108>)
 80097f4:	4613      	mov	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	440b      	add	r3, r1
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10a      	bne.n	800981a <xTaskPriorityDisinherit+0xb2>
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009808:	2201      	movs	r2, #1
 800980a:	fa02 f303 	lsl.w	r3, r2, r3
 800980e:	43da      	mvns	r2, r3
 8009810:	4b18      	ldr	r3, [pc, #96]	@ (8009874 <xTaskPriorityDisinherit+0x10c>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4013      	ands	r3, r2
 8009816:	4a17      	ldr	r2, [pc, #92]	@ (8009874 <xTaskPriorityDisinherit+0x10c>)
 8009818:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009826:	f1c3 0207 	rsb	r2, r3, #7
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009832:	2201      	movs	r2, #1
 8009834:	409a      	lsls	r2, r3
 8009836:	4b0f      	ldr	r3, [pc, #60]	@ (8009874 <xTaskPriorityDisinherit+0x10c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4313      	orrs	r3, r2
 800983c:	4a0d      	ldr	r2, [pc, #52]	@ (8009874 <xTaskPriorityDisinherit+0x10c>)
 800983e:	6013      	str	r3, [r2, #0]
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009844:	4613      	mov	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4a08      	ldr	r2, [pc, #32]	@ (8009870 <xTaskPriorityDisinherit+0x108>)
 800984e:	441a      	add	r2, r3
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	3304      	adds	r3, #4
 8009854:	4619      	mov	r1, r3
 8009856:	4610      	mov	r0, r2
 8009858:	f7fe ff39 	bl	80086ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800985c:	2301      	movs	r3, #1
 800985e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009860:	697b      	ldr	r3, [r7, #20]
	}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	2000047c 	.word	0x2000047c
 8009870:	20000480 	.word	0x20000480
 8009874:	20000584 	.word	0x20000584

08009878 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009882:	4b29      	ldr	r3, [pc, #164]	@ (8009928 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009888:	4b28      	ldr	r3, [pc, #160]	@ (800992c <prvAddCurrentTaskToDelayedList+0xb4>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3304      	adds	r3, #4
 800988e:	4618      	mov	r0, r3
 8009890:	f7fe ff7a 	bl	8008788 <uxListRemove>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10b      	bne.n	80098b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800989a:	4b24      	ldr	r3, [pc, #144]	@ (800992c <prvAddCurrentTaskToDelayedList+0xb4>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a0:	2201      	movs	r2, #1
 80098a2:	fa02 f303 	lsl.w	r3, r2, r3
 80098a6:	43da      	mvns	r2, r3
 80098a8:	4b21      	ldr	r3, [pc, #132]	@ (8009930 <prvAddCurrentTaskToDelayedList+0xb8>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4013      	ands	r3, r2
 80098ae:	4a20      	ldr	r2, [pc, #128]	@ (8009930 <prvAddCurrentTaskToDelayedList+0xb8>)
 80098b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098b8:	d10a      	bne.n	80098d0 <prvAddCurrentTaskToDelayedList+0x58>
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d007      	beq.n	80098d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098c0:	4b1a      	ldr	r3, [pc, #104]	@ (800992c <prvAddCurrentTaskToDelayedList+0xb4>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3304      	adds	r3, #4
 80098c6:	4619      	mov	r1, r3
 80098c8:	481a      	ldr	r0, [pc, #104]	@ (8009934 <prvAddCurrentTaskToDelayedList+0xbc>)
 80098ca:	f7fe ff00 	bl	80086ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098ce:	e026      	b.n	800991e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4413      	add	r3, r2
 80098d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098d8:	4b14      	ldr	r3, [pc, #80]	@ (800992c <prvAddCurrentTaskToDelayedList+0xb4>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d209      	bcs.n	80098fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098e8:	4b13      	ldr	r3, [pc, #76]	@ (8009938 <prvAddCurrentTaskToDelayedList+0xc0>)
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	4b0f      	ldr	r3, [pc, #60]	@ (800992c <prvAddCurrentTaskToDelayedList+0xb4>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3304      	adds	r3, #4
 80098f2:	4619      	mov	r1, r3
 80098f4:	4610      	mov	r0, r2
 80098f6:	f7fe ff0e 	bl	8008716 <vListInsert>
}
 80098fa:	e010      	b.n	800991e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098fc:	4b0f      	ldr	r3, [pc, #60]	@ (800993c <prvAddCurrentTaskToDelayedList+0xc4>)
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	4b0a      	ldr	r3, [pc, #40]	@ (800992c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3304      	adds	r3, #4
 8009906:	4619      	mov	r1, r3
 8009908:	4610      	mov	r0, r2
 800990a:	f7fe ff04 	bl	8008716 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800990e:	4b0c      	ldr	r3, [pc, #48]	@ (8009940 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	429a      	cmp	r2, r3
 8009916:	d202      	bcs.n	800991e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009918:	4a09      	ldr	r2, [pc, #36]	@ (8009940 <prvAddCurrentTaskToDelayedList+0xc8>)
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	6013      	str	r3, [r2, #0]
}
 800991e:	bf00      	nop
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20000580 	.word	0x20000580
 800992c:	2000047c 	.word	0x2000047c
 8009930:	20000584 	.word	0x20000584
 8009934:	20000568 	.word	0x20000568
 8009938:	20000538 	.word	0x20000538
 800993c:	20000534 	.word	0x20000534
 8009940:	2000059c 	.word	0x2000059c

08009944 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	3b04      	subs	r3, #4
 8009954:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800995c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3b04      	subs	r3, #4
 8009962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	f023 0201 	bic.w	r2, r3, #1
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3b04      	subs	r3, #4
 8009972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009974:	4a0c      	ldr	r2, [pc, #48]	@ (80099a8 <pxPortInitialiseStack+0x64>)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	3b14      	subs	r3, #20
 800997e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3b04      	subs	r3, #4
 800998a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f06f 0202 	mvn.w	r2, #2
 8009992:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	3b20      	subs	r3, #32
 8009998:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800999a:	68fb      	ldr	r3, [r7, #12]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	080099ad 	.word	0x080099ad

080099ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099b6:	4b13      	ldr	r3, [pc, #76]	@ (8009a04 <prvTaskExitError+0x58>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099be:	d00b      	beq.n	80099d8 <prvTaskExitError+0x2c>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	60fb      	str	r3, [r7, #12]
}
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
 80099d6:	e7fd      	b.n	80099d4 <prvTaskExitError+0x28>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	60bb      	str	r3, [r7, #8]
}
 80099ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099ec:	bf00      	nop
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d0fc      	beq.n	80099ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	20000010 	.word	0x20000010
	...

08009a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a10:	4b07      	ldr	r3, [pc, #28]	@ (8009a30 <pxCurrentTCBConst2>)
 8009a12:	6819      	ldr	r1, [r3, #0]
 8009a14:	6808      	ldr	r0, [r1, #0]
 8009a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1a:	f380 8809 	msr	PSP, r0
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f04f 0000 	mov.w	r0, #0
 8009a26:	f380 8811 	msr	BASEPRI, r0
 8009a2a:	4770      	bx	lr
 8009a2c:	f3af 8000 	nop.w

08009a30 <pxCurrentTCBConst2>:
 8009a30:	2000047c 	.word	0x2000047c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a34:	bf00      	nop
 8009a36:	bf00      	nop

08009a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a38:	4808      	ldr	r0, [pc, #32]	@ (8009a5c <prvPortStartFirstTask+0x24>)
 8009a3a:	6800      	ldr	r0, [r0, #0]
 8009a3c:	6800      	ldr	r0, [r0, #0]
 8009a3e:	f380 8808 	msr	MSP, r0
 8009a42:	f04f 0000 	mov.w	r0, #0
 8009a46:	f380 8814 	msr	CONTROL, r0
 8009a4a:	b662      	cpsie	i
 8009a4c:	b661      	cpsie	f
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	df00      	svc	0
 8009a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a5a:	bf00      	nop
 8009a5c:	e000ed08 	.word	0xe000ed08

08009a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a66:	4b47      	ldr	r3, [pc, #284]	@ (8009b84 <xPortStartScheduler+0x124>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a47      	ldr	r2, [pc, #284]	@ (8009b88 <xPortStartScheduler+0x128>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d10b      	bne.n	8009a88 <xPortStartScheduler+0x28>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	613b      	str	r3, [r7, #16]
}
 8009a82:	bf00      	nop
 8009a84:	bf00      	nop
 8009a86:	e7fd      	b.n	8009a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a88:	4b3e      	ldr	r3, [pc, #248]	@ (8009b84 <xPortStartScheduler+0x124>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8009b8c <xPortStartScheduler+0x12c>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d10b      	bne.n	8009aaa <xPortStartScheduler+0x4a>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	60fb      	str	r3, [r7, #12]
}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop
 8009aa8:	e7fd      	b.n	8009aa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009aaa:	4b39      	ldr	r3, [pc, #228]	@ (8009b90 <xPortStartScheduler+0x130>)
 8009aac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	22ff      	movs	r2, #255	@ 0xff
 8009aba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ac4:	78fb      	ldrb	r3, [r7, #3]
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009acc:	b2da      	uxtb	r2, r3
 8009ace:	4b31      	ldr	r3, [pc, #196]	@ (8009b94 <xPortStartScheduler+0x134>)
 8009ad0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ad2:	4b31      	ldr	r3, [pc, #196]	@ (8009b98 <xPortStartScheduler+0x138>)
 8009ad4:	2207      	movs	r2, #7
 8009ad6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ad8:	e009      	b.n	8009aee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009ada:	4b2f      	ldr	r3, [pc, #188]	@ (8009b98 <xPortStartScheduler+0x138>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8009b98 <xPortStartScheduler+0x138>)
 8009ae2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ae4:	78fb      	ldrb	r3, [r7, #3]
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009aee:	78fb      	ldrb	r3, [r7, #3]
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009af6:	2b80      	cmp	r3, #128	@ 0x80
 8009af8:	d0ef      	beq.n	8009ada <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009afa:	4b27      	ldr	r3, [pc, #156]	@ (8009b98 <xPortStartScheduler+0x138>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f1c3 0307 	rsb	r3, r3, #7
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	d00b      	beq.n	8009b1e <xPortStartScheduler+0xbe>
	__asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	60bb      	str	r3, [r7, #8]
}
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	e7fd      	b.n	8009b1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8009b98 <xPortStartScheduler+0x138>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	4a1c      	ldr	r2, [pc, #112]	@ (8009b98 <xPortStartScheduler+0x138>)
 8009b26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b28:	4b1b      	ldr	r3, [pc, #108]	@ (8009b98 <xPortStartScheduler+0x138>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b30:	4a19      	ldr	r2, [pc, #100]	@ (8009b98 <xPortStartScheduler+0x138>)
 8009b32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b3c:	4b17      	ldr	r3, [pc, #92]	@ (8009b9c <xPortStartScheduler+0x13c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a16      	ldr	r2, [pc, #88]	@ (8009b9c <xPortStartScheduler+0x13c>)
 8009b42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009b46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b48:	4b14      	ldr	r3, [pc, #80]	@ (8009b9c <xPortStartScheduler+0x13c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a13      	ldr	r2, [pc, #76]	@ (8009b9c <xPortStartScheduler+0x13c>)
 8009b4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009b52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b54:	f000 f8da 	bl	8009d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b58:	4b11      	ldr	r3, [pc, #68]	@ (8009ba0 <xPortStartScheduler+0x140>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b5e:	f000 f8f9 	bl	8009d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b62:	4b10      	ldr	r3, [pc, #64]	@ (8009ba4 <xPortStartScheduler+0x144>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a0f      	ldr	r2, [pc, #60]	@ (8009ba4 <xPortStartScheduler+0x144>)
 8009b68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009b6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b6e:	f7ff ff63 	bl	8009a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b72:	f7ff fbab 	bl	80092cc <vTaskSwitchContext>
	prvTaskExitError();
 8009b76:	f7ff ff19 	bl	80099ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3718      	adds	r7, #24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	e000ed00 	.word	0xe000ed00
 8009b88:	410fc271 	.word	0x410fc271
 8009b8c:	410fc270 	.word	0x410fc270
 8009b90:	e000e400 	.word	0xe000e400
 8009b94:	200005a8 	.word	0x200005a8
 8009b98:	200005ac 	.word	0x200005ac
 8009b9c:	e000ed20 	.word	0xe000ed20
 8009ba0:	20000010 	.word	0x20000010
 8009ba4:	e000ef34 	.word	0xe000ef34

08009ba8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
	__asm volatile
 8009bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	607b      	str	r3, [r7, #4]
}
 8009bc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009bc2:	4b10      	ldr	r3, [pc, #64]	@ (8009c04 <vPortEnterCritical+0x5c>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8009c04 <vPortEnterCritical+0x5c>)
 8009bca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8009c04 <vPortEnterCritical+0x5c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d110      	bne.n	8009bf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8009c08 <vPortEnterCritical+0x60>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00b      	beq.n	8009bf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	603b      	str	r3, [r7, #0]
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	e7fd      	b.n	8009bf2 <vPortEnterCritical+0x4a>
	}
}
 8009bf6:	bf00      	nop
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	20000010 	.word	0x20000010
 8009c08:	e000ed04 	.word	0xe000ed04

08009c0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c12:	4b12      	ldr	r3, [pc, #72]	@ (8009c5c <vPortExitCritical+0x50>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10b      	bne.n	8009c32 <vPortExitCritical+0x26>
	__asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	607b      	str	r3, [r7, #4]
}
 8009c2c:	bf00      	nop
 8009c2e:	bf00      	nop
 8009c30:	e7fd      	b.n	8009c2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c32:	4b0a      	ldr	r3, [pc, #40]	@ (8009c5c <vPortExitCritical+0x50>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	4a08      	ldr	r2, [pc, #32]	@ (8009c5c <vPortExitCritical+0x50>)
 8009c3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c3c:	4b07      	ldr	r3, [pc, #28]	@ (8009c5c <vPortExitCritical+0x50>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <vPortExitCritical+0x44>
 8009c44:	2300      	movs	r3, #0
 8009c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f383 8811 	msr	BASEPRI, r3
}
 8009c4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	20000010 	.word	0x20000010

08009c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c60:	f3ef 8009 	mrs	r0, PSP
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	4b15      	ldr	r3, [pc, #84]	@ (8009cc0 <pxCurrentTCBConst>)
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	f01e 0f10 	tst.w	lr, #16
 8009c70:	bf08      	it	eq
 8009c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7a:	6010      	str	r0, [r2, #0]
 8009c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009c84:	f380 8811 	msr	BASEPRI, r0
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f7ff fb1c 	bl	80092cc <vTaskSwitchContext>
 8009c94:	f04f 0000 	mov.w	r0, #0
 8009c98:	f380 8811 	msr	BASEPRI, r0
 8009c9c:	bc09      	pop	{r0, r3}
 8009c9e:	6819      	ldr	r1, [r3, #0]
 8009ca0:	6808      	ldr	r0, [r1, #0]
 8009ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca6:	f01e 0f10 	tst.w	lr, #16
 8009caa:	bf08      	it	eq
 8009cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cb0:	f380 8809 	msr	PSP, r0
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	f3af 8000 	nop.w

08009cc0 <pxCurrentTCBConst>:
 8009cc0:	2000047c 	.word	0x2000047c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop

08009cc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8009cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	607b      	str	r3, [r7, #4]
}
 8009ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ce2:	f7ff fa39 	bl	8009158 <xTaskIncrementTick>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d003      	beq.n	8009cf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cec:	4b06      	ldr	r3, [pc, #24]	@ (8009d08 <SysTick_Handler+0x40>)
 8009cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	f383 8811 	msr	BASEPRI, r3
}
 8009cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d00:	bf00      	nop
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	e000ed04 	.word	0xe000ed04

08009d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d10:	4b0b      	ldr	r3, [pc, #44]	@ (8009d40 <vPortSetupTimerInterrupt+0x34>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d16:	4b0b      	ldr	r3, [pc, #44]	@ (8009d44 <vPortSetupTimerInterrupt+0x38>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d48 <vPortSetupTimerInterrupt+0x3c>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a0a      	ldr	r2, [pc, #40]	@ (8009d4c <vPortSetupTimerInterrupt+0x40>)
 8009d22:	fba2 2303 	umull	r2, r3, r2, r3
 8009d26:	099b      	lsrs	r3, r3, #6
 8009d28:	4a09      	ldr	r2, [pc, #36]	@ (8009d50 <vPortSetupTimerInterrupt+0x44>)
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d2e:	4b04      	ldr	r3, [pc, #16]	@ (8009d40 <vPortSetupTimerInterrupt+0x34>)
 8009d30:	2207      	movs	r2, #7
 8009d32:	601a      	str	r2, [r3, #0]
}
 8009d34:	bf00      	nop
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	e000e010 	.word	0xe000e010
 8009d44:	e000e018 	.word	0xe000e018
 8009d48:	20000004 	.word	0x20000004
 8009d4c:	10624dd3 	.word	0x10624dd3
 8009d50:	e000e014 	.word	0xe000e014

08009d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009d64 <vPortEnableVFP+0x10>
 8009d58:	6801      	ldr	r1, [r0, #0]
 8009d5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009d5e:	6001      	str	r1, [r0, #0]
 8009d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d62:	bf00      	nop
 8009d64:	e000ed88 	.word	0xe000ed88

08009d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d6e:	f3ef 8305 	mrs	r3, IPSR
 8009d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2b0f      	cmp	r3, #15
 8009d78:	d915      	bls.n	8009da6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d7a:	4a18      	ldr	r2, [pc, #96]	@ (8009ddc <vPortValidateInterruptPriority+0x74>)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4413      	add	r3, r2
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d84:	4b16      	ldr	r3, [pc, #88]	@ (8009de0 <vPortValidateInterruptPriority+0x78>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	7afa      	ldrb	r2, [r7, #11]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d20b      	bcs.n	8009da6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	607b      	str	r3, [r7, #4]
}
 8009da0:	bf00      	nop
 8009da2:	bf00      	nop
 8009da4:	e7fd      	b.n	8009da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009da6:	4b0f      	ldr	r3, [pc, #60]	@ (8009de4 <vPortValidateInterruptPriority+0x7c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009dae:	4b0e      	ldr	r3, [pc, #56]	@ (8009de8 <vPortValidateInterruptPriority+0x80>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d90b      	bls.n	8009dce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	603b      	str	r3, [r7, #0]
}
 8009dc8:	bf00      	nop
 8009dca:	bf00      	nop
 8009dcc:	e7fd      	b.n	8009dca <vPortValidateInterruptPriority+0x62>
	}
 8009dce:	bf00      	nop
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	e000e3f0 	.word	0xe000e3f0
 8009de0:	200005a8 	.word	0x200005a8
 8009de4:	e000ed0c 	.word	0xe000ed0c
 8009de8:	200005ac 	.word	0x200005ac

08009dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08a      	sub	sp, #40	@ 0x28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009df4:	2300      	movs	r3, #0
 8009df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009df8:	f7ff f902 	bl	8009000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8009f70 <pvPortMalloc+0x184>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e04:	f000 f924 	bl	800a050 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e08:	4b5a      	ldr	r3, [pc, #360]	@ (8009f74 <pvPortMalloc+0x188>)
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4013      	ands	r3, r2
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f040 8095 	bne.w	8009f40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d01e      	beq.n	8009e5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009e1c:	2208      	movs	r2, #8
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4413      	add	r3, r2
 8009e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f003 0307 	and.w	r3, r3, #7
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d015      	beq.n	8009e5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f023 0307 	bic.w	r3, r3, #7
 8009e34:	3308      	adds	r3, #8
 8009e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f003 0307 	and.w	r3, r3, #7
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00b      	beq.n	8009e5a <pvPortMalloc+0x6e>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	617b      	str	r3, [r7, #20]
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop
 8009e58:	e7fd      	b.n	8009e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d06f      	beq.n	8009f40 <pvPortMalloc+0x154>
 8009e60:	4b45      	ldr	r3, [pc, #276]	@ (8009f78 <pvPortMalloc+0x18c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d86a      	bhi.n	8009f40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e6a:	4b44      	ldr	r3, [pc, #272]	@ (8009f7c <pvPortMalloc+0x190>)
 8009e6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e6e:	4b43      	ldr	r3, [pc, #268]	@ (8009f7c <pvPortMalloc+0x190>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e74:	e004      	b.n	8009e80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d903      	bls.n	8009e92 <pvPortMalloc+0xa6>
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1f1      	bne.n	8009e76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e92:	4b37      	ldr	r3, [pc, #220]	@ (8009f70 <pvPortMalloc+0x184>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d051      	beq.n	8009f40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2208      	movs	r2, #8
 8009ea2:	4413      	add	r3, r2
 8009ea4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb0:	685a      	ldr	r2, [r3, #4]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	1ad2      	subs	r2, r2, r3
 8009eb6:	2308      	movs	r3, #8
 8009eb8:	005b      	lsls	r3, r3, #1
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d920      	bls.n	8009f00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	f003 0307 	and.w	r3, r3, #7
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00b      	beq.n	8009ee8 <pvPortMalloc+0xfc>
	__asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	613b      	str	r3, [r7, #16]
}
 8009ee2:	bf00      	nop
 8009ee4:	bf00      	nop
 8009ee6:	e7fd      	b.n	8009ee4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	1ad2      	subs	r2, r2, r3
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009efa:	69b8      	ldr	r0, [r7, #24]
 8009efc:	f000 f90a 	bl	800a114 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f00:	4b1d      	ldr	r3, [pc, #116]	@ (8009f78 <pvPortMalloc+0x18c>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009f78 <pvPortMalloc+0x18c>)
 8009f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8009f78 <pvPortMalloc+0x18c>)
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	4b1b      	ldr	r3, [pc, #108]	@ (8009f80 <pvPortMalloc+0x194>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d203      	bcs.n	8009f22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f1a:	4b17      	ldr	r3, [pc, #92]	@ (8009f78 <pvPortMalloc+0x18c>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a18      	ldr	r2, [pc, #96]	@ (8009f80 <pvPortMalloc+0x194>)
 8009f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f24:	685a      	ldr	r2, [r3, #4]
 8009f26:	4b13      	ldr	r3, [pc, #76]	@ (8009f74 <pvPortMalloc+0x188>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009f36:	4b13      	ldr	r3, [pc, #76]	@ (8009f84 <pvPortMalloc+0x198>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	4a11      	ldr	r2, [pc, #68]	@ (8009f84 <pvPortMalloc+0x198>)
 8009f3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f40:	f7ff f86c 	bl	800901c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	f003 0307 	and.w	r3, r3, #7
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00b      	beq.n	8009f66 <pvPortMalloc+0x17a>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	60fb      	str	r3, [r7, #12]
}
 8009f60:	bf00      	nop
 8009f62:	bf00      	nop
 8009f64:	e7fd      	b.n	8009f62 <pvPortMalloc+0x176>
	return pvReturn;
 8009f66:	69fb      	ldr	r3, [r7, #28]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3728      	adds	r7, #40	@ 0x28
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	200011b8 	.word	0x200011b8
 8009f74:	200011cc 	.word	0x200011cc
 8009f78:	200011bc 	.word	0x200011bc
 8009f7c:	200011b0 	.word	0x200011b0
 8009f80:	200011c0 	.word	0x200011c0
 8009f84:	200011c4 	.word	0x200011c4

08009f88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d04f      	beq.n	800a03a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f9a:	2308      	movs	r3, #8
 8009f9c:	425b      	negs	r3, r3
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	4b25      	ldr	r3, [pc, #148]	@ (800a044 <vPortFree+0xbc>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d10b      	bne.n	8009fce <vPortFree+0x46>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	60fb      	str	r3, [r7, #12]
}
 8009fc8:	bf00      	nop
 8009fca:	bf00      	nop
 8009fcc:	e7fd      	b.n	8009fca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00b      	beq.n	8009fee <vPortFree+0x66>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	60bb      	str	r3, [r7, #8]
}
 8009fe8:	bf00      	nop
 8009fea:	bf00      	nop
 8009fec:	e7fd      	b.n	8009fea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	4b14      	ldr	r3, [pc, #80]	@ (800a044 <vPortFree+0xbc>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d01e      	beq.n	800a03a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d11a      	bne.n	800a03a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	685a      	ldr	r2, [r3, #4]
 800a008:	4b0e      	ldr	r3, [pc, #56]	@ (800a044 <vPortFree+0xbc>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	43db      	mvns	r3, r3
 800a00e:	401a      	ands	r2, r3
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a014:	f7fe fff4 	bl	8009000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	4b0a      	ldr	r3, [pc, #40]	@ (800a048 <vPortFree+0xc0>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4413      	add	r3, r2
 800a022:	4a09      	ldr	r2, [pc, #36]	@ (800a048 <vPortFree+0xc0>)
 800a024:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a026:	6938      	ldr	r0, [r7, #16]
 800a028:	f000 f874 	bl	800a114 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a02c:	4b07      	ldr	r3, [pc, #28]	@ (800a04c <vPortFree+0xc4>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	3301      	adds	r3, #1
 800a032:	4a06      	ldr	r2, [pc, #24]	@ (800a04c <vPortFree+0xc4>)
 800a034:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a036:	f7fe fff1 	bl	800901c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a03a:	bf00      	nop
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	200011cc 	.word	0x200011cc
 800a048:	200011bc 	.word	0x200011bc
 800a04c:	200011c8 	.word	0x200011c8

0800a050 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a056:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a05a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a05c:	4b27      	ldr	r3, [pc, #156]	@ (800a0fc <prvHeapInit+0xac>)
 800a05e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f003 0307 	and.w	r3, r3, #7
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00c      	beq.n	800a084 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3307      	adds	r3, #7
 800a06e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f023 0307 	bic.w	r3, r3, #7
 800a076:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	4a1f      	ldr	r2, [pc, #124]	@ (800a0fc <prvHeapInit+0xac>)
 800a080:	4413      	add	r3, r2
 800a082:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a088:	4a1d      	ldr	r2, [pc, #116]	@ (800a100 <prvHeapInit+0xb0>)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a08e:	4b1c      	ldr	r3, [pc, #112]	@ (800a100 <prvHeapInit+0xb0>)
 800a090:	2200      	movs	r2, #0
 800a092:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	4413      	add	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a09c:	2208      	movs	r2, #8
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	1a9b      	subs	r3, r3, r2
 800a0a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f023 0307 	bic.w	r3, r3, #7
 800a0aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4a15      	ldr	r2, [pc, #84]	@ (800a104 <prvHeapInit+0xb4>)
 800a0b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0b2:	4b14      	ldr	r3, [pc, #80]	@ (800a104 <prvHeapInit+0xb4>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0ba:	4b12      	ldr	r3, [pc, #72]	@ (800a104 <prvHeapInit+0xb4>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	1ad2      	subs	r2, r2, r3
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a104 <prvHeapInit+0xb4>)
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	4a0a      	ldr	r2, [pc, #40]	@ (800a108 <prvHeapInit+0xb8>)
 800a0de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	4a09      	ldr	r2, [pc, #36]	@ (800a10c <prvHeapInit+0xbc>)
 800a0e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0e8:	4b09      	ldr	r3, [pc, #36]	@ (800a110 <prvHeapInit+0xc0>)
 800a0ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a0ee:	601a      	str	r2, [r3, #0]
}
 800a0f0:	bf00      	nop
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	200005b0 	.word	0x200005b0
 800a100:	200011b0 	.word	0x200011b0
 800a104:	200011b8 	.word	0x200011b8
 800a108:	200011c0 	.word	0x200011c0
 800a10c:	200011bc 	.word	0x200011bc
 800a110:	200011cc 	.word	0x200011cc

0800a114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a11c:	4b28      	ldr	r3, [pc, #160]	@ (800a1c0 <prvInsertBlockIntoFreeList+0xac>)
 800a11e:	60fb      	str	r3, [r7, #12]
 800a120:	e002      	b.n	800a128 <prvInsertBlockIntoFreeList+0x14>
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d8f7      	bhi.n	800a122 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	4413      	add	r3, r2
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	429a      	cmp	r2, r3
 800a142:	d108      	bne.n	800a156 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	441a      	add	r2, r3
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	441a      	add	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d118      	bne.n	800a19c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	4b15      	ldr	r3, [pc, #84]	@ (800a1c4 <prvInsertBlockIntoFreeList+0xb0>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	429a      	cmp	r2, r3
 800a174:	d00d      	beq.n	800a192 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	441a      	add	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	601a      	str	r2, [r3, #0]
 800a190:	e008      	b.n	800a1a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a192:	4b0c      	ldr	r3, [pc, #48]	@ (800a1c4 <prvInsertBlockIntoFreeList+0xb0>)
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	e003      	b.n	800a1a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d002      	beq.n	800a1b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1b2:	bf00      	nop
 800a1b4:	3714      	adds	r7, #20
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	200011b0 	.word	0x200011b0
 800a1c4:	200011b8 	.word	0x200011b8

0800a1c8 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 800a1cc:	f000 f810 	bl	800a1f0 <USBPD_DPM_InitCore>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <MX_USBPD_Init+0x12>
  {
    while(1);
 800a1d6:	bf00      	nop
 800a1d8:	e7fd      	b.n	800a1d6 <MX_USBPD_Init+0xe>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 800a1da:	f000 f83f 	bl	800a25c <USBPD_DPM_InitOS>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <MX_USBPD_Init+0x20>
  {
    while(1);
 800a1e4:	bf00      	nop
 800a1e6:	e7fd      	b.n	800a1e4 <MX_USBPD_Init+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
 800a1e8:	b662      	cpsie	i
}
 800a1ea:	bf00      	nop
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 800a1ec:	bf00      	nop
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	71fb      	strb	r3, [r7, #7]

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 800a1fa:	4814      	ldr	r0, [pc, #80]	@ (800a24c <USBPD_DPM_InitCore+0x5c>)
 800a1fc:	f7f6 f8bf 	bl	800037e <USBPD_PE_CheckLIB>
 800a200:	4603      	mov	r3, r0
 800a202:	2b01      	cmp	r3, #1
 800a204:	d001      	beq.n	800a20a <USBPD_DPM_InitCore+0x1a>
  {
    return USBPD_ERROR;
 800a206:	2302      	movs	r3, #2
 800a208:	e01c      	b.n	800a244 <USBPD_DPM_InitCore+0x54>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 800a20a:	f7f6 f8c3 	bl	8000394 <USBPD_PE_GetMemoryConsumption>
 800a20e:	6038      	str	r0, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  DPM_Params[USBPD_PORT_0].PE_PowerRole     = DPM_Settings[USBPD_PORT_0].PE_DefaultRole;
 800a210:	4b0f      	ldr	r3, [pc, #60]	@ (800a250 <USBPD_DPM_InitCore+0x60>)
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a218:	b2d9      	uxtb	r1, r3
 800a21a:	4a0e      	ldr	r2, [pc, #56]	@ (800a254 <USBPD_DPM_InitCore+0x64>)
 800a21c:	7813      	ldrb	r3, [r2, #0]
 800a21e:	f361 0382 	bfi	r3, r1, #2, #1
 800a222:	7013      	strb	r3, [r2, #0]

  {
    static const USBPD_CAD_Callbacks CAD_cbs = { USBPD_DPM_CADCallback, USBPD_DPM_CADTaskWakeUp };
  /* Init CAD */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(USBPD_PORT_0, &CAD_cbs, (USBPD_SettingsTypeDef *)&DPM_Settings[USBPD_PORT_0],
 800a224:	4b0b      	ldr	r3, [pc, #44]	@ (800a254 <USBPD_DPM_InitCore+0x64>)
 800a226:	4a0a      	ldr	r2, [pc, #40]	@ (800a250 <USBPD_DPM_InitCore+0x60>)
 800a228:	490b      	ldr	r1, [pc, #44]	@ (800a258 <USBPD_DPM_InitCore+0x68>)
 800a22a:	2000      	movs	r0, #0
 800a22c:	f7f5 fff8 	bl	8000220 <USBPD_CAD_Init>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <USBPD_DPM_InitCore+0x4a>
 800a236:	2302      	movs	r3, #2
 800a238:	e004      	b.n	800a244 <USBPD_DPM_InitCore+0x54>
                                           &DPM_Params[USBPD_PORT_0]));

  /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(USBPD_PORT_0, USBPD_CAD_ENABLE);
 800a23a:	2101      	movs	r1, #1
 800a23c:	2000      	movs	r0, #0
 800a23e:	f7f6 f817 	bl	8000270 <USBPD_CAD_PortEnable>
  }
  return _retr;
 800a242:	79fb      	ldrb	r3, [r7, #7]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	00410100 	.word	0x00410100
 800a250:	20000014 	.word	0x20000014
 800a254:	200011d4 	.word	0x200011d4
 800a258:	0800bdac 	.word	0x0800bdac

0800a25c <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 800a25c:	b480      	push	{r7}
 800a25e:	af00      	add	r7, sp, #0

  return USBPD_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
 800a270:	4b04      	ldr	r3, [pc, #16]	@ (800a284 <USBPD_DPM_CADTaskWakeUp+0x18>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2200      	movs	r2, #0
 800a276:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fe f9ba 	bl	80085f4 <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 800a280:	bf00      	nop
 800a282:	bd80      	pop	{r7, pc}
 800a284:	200011d0 	.word	0x200011d0

0800a288 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	4603      	mov	r3, r0
 800a290:	603a      	str	r2, [r7, #0]
 800a292:	71fb      	strb	r3, [r7, #7]
 800a294:	460b      	mov	r3, r1
 800a296:	71bb      	strb	r3, [r7, #6]
#ifdef _TRACE
  USBPD_TRACE_Add(USBPD_TRACE_CADEVENT, PortNum, (uint8_t)State, NULL, 0);
#endif /* _TRACE */

  switch (State)
 800a298:	79bb      	ldrb	r3, [r7, #6]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	2b03      	cmp	r3, #3
 800a29e:	d82d      	bhi.n	800a2fc <USBPD_DPM_CADCallback+0x74>
 800a2a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a8 <USBPD_DPM_CADCallback+0x20>)
 800a2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a6:	bf00      	nop
 800a2a8:	0800a2df 	.word	0x0800a2df
 800a2ac:	0800a2b9 	.word	0x0800a2b9
 800a2b0:	0800a2df 	.word	0x0800a2df
 800a2b4:	0800a2b9 	.word	0x0800a2b9
  {
  case USBPD_CAD_EVENT_ATTEMC :
  case USBPD_CAD_EVENT_ATTACHED :
    {
      DPM_Params[PortNum].ActiveCCIs = Cc;
 800a2b8:	79fa      	ldrb	r2, [r7, #7]
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	f003 0303 	and.w	r3, r3, #3
 800a2c0:	b2d8      	uxtb	r0, r3
 800a2c2:	4911      	ldr	r1, [pc, #68]	@ (800a308 <USBPD_DPM_CADCallback+0x80>)
 800a2c4:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 800a2c8:	f360 1387 	bfi	r3, r0, #6, #2
 800a2cc:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      USBPD_DPM_UserCableDetection(PortNum, State);
 800a2d0:	79ba      	ldrb	r2, [r7, #6]
 800a2d2:	79fb      	ldrb	r3, [r7, #7]
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 f818 	bl	800a30c <USBPD_DPM_UserCableDetection>
      break;
 800a2dc:	e00f      	b.n	800a2fe <USBPD_DPM_CADCallback+0x76>
    }
  case USBPD_CAD_EVENT_DETACHED :
  case USBPD_CAD_EVENT_EMC :
    {
      USBPD_DPM_UserCableDetection(PortNum, State);
 800a2de:	79ba      	ldrb	r2, [r7, #6]
 800a2e0:	79fb      	ldrb	r3, [r7, #7]
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 f811 	bl	800a30c <USBPD_DPM_UserCableDetection>
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 800a2ea:	79fa      	ldrb	r2, [r7, #7]
 800a2ec:	4906      	ldr	r1, [pc, #24]	@ (800a308 <USBPD_DPM_CADCallback+0x80>)
 800a2ee:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 800a2f2:	f36f 1387 	bfc	r3, #6, #2
 800a2f6:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      break;
 800a2fa:	e000      	b.n	800a2fe <USBPD_DPM_CADCallback+0x76>
    }
  default :
    /* nothing to do */
    break;
 800a2fc:	bf00      	nop
  }
}
 800a2fe:	bf00      	nop
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	200011d4 	.word	0x200011d4

0800a30c <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	460a      	mov	r2, r1
 800a316:	71fb      	strb	r3, [r7, #7]
 800a318:	4613      	mov	r3, r2
 800a31a:	71bb      	strb	r3, [r7, #6]
      // }
      // break;
    // }
  // }
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	4603      	mov	r3, r0
 800a330:	460a      	mov	r2, r1
 800a332:	71fb      	strb	r3, [r7, #7]
 800a334:	4613      	mov	r3, r2
 800a336:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 800a338:	2300      	movs	r3, #0
 800a33a:	73fb      	strb	r3, [r7, #15]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 800a33c:	79fb      	ldrb	r3, [r7, #7]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe f8ee 	bl	8008520 <HW_IF_PWR_GetVoltage>
 800a344:	4603      	mov	r3, r0
 800a346:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 800a348:	79bb      	ldrb	r3, [r7, #6]
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d015      	beq.n	800a37a <USBPD_PWR_IF_GetVBUSStatus+0x52>
 800a34e:	2b02      	cmp	r3, #2
 800a350:	dc1a      	bgt.n	800a388 <USBPD_PWR_IF_GetVBUSStatus+0x60>
 800a352:	2b00      	cmp	r3, #0
 800a354:	d002      	beq.n	800a35c <USBPD_PWR_IF_GetVBUSStatus+0x34>
 800a356:	2b01      	cmp	r3, #1
 800a358:	d008      	beq.n	800a36c <USBPD_PWR_IF_GetVBUSStatus+0x44>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 800a35a:	e015      	b.n	800a388 <USBPD_PWR_IF_GetVBUSStatus+0x60>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f240 22ed 	movw	r2, #749	@ 0x2ed
 800a362:	4293      	cmp	r3, r2
 800a364:	d812      	bhi.n	800a38c <USBPD_PWR_IF_GetVBUSStatus+0x64>
 800a366:	2301      	movs	r3, #1
 800a368:	73fb      	strb	r3, [r7, #15]
    break;
 800a36a:	e00f      	b.n	800a38c <USBPD_PWR_IF_GetVBUSStatus+0x64>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 800a372:	d30d      	bcc.n	800a390 <USBPD_PWR_IF_GetVBUSStatus+0x68>
 800a374:	2301      	movs	r3, #1
 800a376:	73fb      	strb	r3, [r7, #15]
    break;
 800a378:	e00a      	b.n	800a390 <USBPD_PWR_IF_GetVBUSStatus+0x68>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 800a380:	d208      	bcs.n	800a394 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
 800a382:	2301      	movs	r3, #1
 800a384:	73fb      	strb	r3, [r7, #15]
    break;
 800a386:	e005      	b.n	800a394 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
    break;
 800a388:	bf00      	nop
 800a38a:	e004      	b.n	800a396 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 800a38c:	bf00      	nop
 800a38e:	e002      	b.n	800a396 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 800a390:	bf00      	nop
 800a392:	e000      	b.n	800a396 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 800a394:	bf00      	nop
  }
  return _status;
 800a396:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <BSP_USBPD_PWR_Init>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a3b2:	f06f 0301 	mvn.w	r3, #1
 800a3b6:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b085      	sub	sp, #20
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a3d8:	f06f 0301 	mvn.w	r3, #1
 800a3dc:	60fb      	str	r3, [r7, #12]
  else
  {
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 800a3de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800a3f4:	f06f 030a 	mvn.w	r3, #10
 800a3f8:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a400:	f06f 0301 	mvn.w	r3, #1
 800a404:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800a406:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid       */
  int32_t ret;
  uint32_t val = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	60bb      	str	r3, [r7, #8]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d102      	bne.n	800a42e <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d103      	bne.n	800a436 <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a42e:	f06f 0301 	mvn.w	r3, #1
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	e002      	b.n	800a43c <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800a436:	f06f 030a 	mvn.w	r3, #10
 800a43a:	60fb      	str	r3, [r7, #12]
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  }
  *pVoltage = val;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	601a      	str	r2, [r3, #0]
  return ret;
 800a442:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 800a444:	4618      	mov	r0, r3
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <uart_read>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[SHELL_FUNC_LIST_MAX_SIZE];

static char print_buffer[BUFFER_SIZE];

static char uart_read() {
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, HAL_MAX_DELAY);
 800a456:	1df9      	adds	r1, r7, #7
 800a458:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a45c:	2201      	movs	r2, #1
 800a45e:	4804      	ldr	r0, [pc, #16]	@ (800a470 <uart_read+0x20>)
 800a460:	f7fb fd0a 	bl	8005e78 <HAL_UART_Receive>

	return c;
 800a464:	79fb      	ldrb	r3, [r7, #7]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	20000398 	.word	0x20000398

0800a474 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 800a480:	887a      	ldrh	r2, [r7, #2]
 800a482:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a486:	6879      	ldr	r1, [r7, #4]
 800a488:	4803      	ldr	r0, [pc, #12]	@ (800a498 <uart_write+0x24>)
 800a48a:	f7fb fc67 	bl	8005d5c <HAL_UART_Transmit>
	return size;
 800a48e:	887b      	ldrh	r3, [r7, #2]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	20000398 	.word	0x20000398

0800a49c <sh_help>:

static int sh_help(int argc, char ** argv) {
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af02      	add	r7, sp, #8
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	e022      	b.n	800a4f2 <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 800a4ac:	4916      	ldr	r1, [pc, #88]	@ (800a508 <sh_help+0x6c>)
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	005b      	lsls	r3, r3, #1
 800a4b4:	4413      	add	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	440b      	add	r3, r1
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	4912      	ldr	r1, [pc, #72]	@ (800a508 <sh_help+0x6c>)
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	4413      	add	r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	440b      	add	r3, r1
 800a4cc:	3308      	adds	r3, #8
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	4a0d      	ldr	r2, [pc, #52]	@ (800a50c <sh_help+0x70>)
 800a4d6:	2128      	movs	r1, #40	@ 0x28
 800a4d8:	480d      	ldr	r0, [pc, #52]	@ (800a510 <sh_help+0x74>)
 800a4da:	f000 fa51 	bl	800a980 <sniprintf>
 800a4de:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	480a      	ldr	r0, [pc, #40]	@ (800a510 <sh_help+0x74>)
 800a4e8:	f7ff ffc4 	bl	800a474 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	60fb      	str	r3, [r7, #12]
 800a4f2:	4b08      	ldr	r3, [pc, #32]	@ (800a514 <sh_help+0x78>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	dbd7      	blt.n	800a4ac <sh_help+0x10>
	}

	return 0;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	200011dc 	.word	0x200011dc
 800a50c:	0800bce8 	.word	0x0800bce8
 800a510:	200014dc 	.word	0x200014dc
 800a514:	200011d8 	.word	0x200011d8

0800a518 <shell_init>:

void shell_init() {
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
	int size = 0;
 800a51e:	2300      	movs	r3, #0
 800a520:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800a522:	4a0a      	ldr	r2, [pc, #40]	@ (800a54c <shell_init+0x34>)
 800a524:	2128      	movs	r1, #40	@ 0x28
 800a526:	480a      	ldr	r0, [pc, #40]	@ (800a550 <shell_init+0x38>)
 800a528:	f000 fa2a 	bl	800a980 <sniprintf>
 800a52c:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	b29b      	uxth	r3, r3
 800a532:	4619      	mov	r1, r3
 800a534:	4806      	ldr	r0, [pc, #24]	@ (800a550 <shell_init+0x38>)
 800a536:	f7ff ff9d 	bl	800a474 <uart_write>

	shell_add('h', sh_help, "Help");
 800a53a:	4a06      	ldr	r2, [pc, #24]	@ (800a554 <shell_init+0x3c>)
 800a53c:	4906      	ldr	r1, [pc, #24]	@ (800a558 <shell_init+0x40>)
 800a53e:	2068      	movs	r0, #104	@ 0x68
 800a540:	f000 f80c 	bl	800a55c <shell_add>
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	0800bcf4 	.word	0x0800bcf4
 800a550:	200014dc 	.word	0x200014dc
 800a554:	0800bd1c 	.word	0x0800bd1c
 800a558:	0800a49d 	.word	0x0800a49d

0800a55c <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 800a56a:	4b19      	ldr	r3, [pc, #100]	@ (800a5d0 <shell_add+0x74>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b3f      	cmp	r3, #63	@ 0x3f
 800a570:	dc26      	bgt.n	800a5c0 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 800a572:	4b17      	ldr	r3, [pc, #92]	@ (800a5d0 <shell_add+0x74>)
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	4917      	ldr	r1, [pc, #92]	@ (800a5d4 <shell_add+0x78>)
 800a578:	4613      	mov	r3, r2
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	4413      	add	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	440b      	add	r3, r1
 800a582:	7bfa      	ldrb	r2, [r7, #15]
 800a584:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 800a586:	4b12      	ldr	r3, [pc, #72]	@ (800a5d0 <shell_add+0x74>)
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	4912      	ldr	r1, [pc, #72]	@ (800a5d4 <shell_add+0x78>)
 800a58c:	4613      	mov	r3, r2
 800a58e:	005b      	lsls	r3, r3, #1
 800a590:	4413      	add	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	440b      	add	r3, r1
 800a596:	3304      	adds	r3, #4
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 800a59c:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d0 <shell_add+0x74>)
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	490c      	ldr	r1, [pc, #48]	@ (800a5d4 <shell_add+0x78>)
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	005b      	lsls	r3, r3, #1
 800a5a6:	4413      	add	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	440b      	add	r3, r1
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 800a5b2:	4b07      	ldr	r3, [pc, #28]	@ (800a5d0 <shell_add+0x74>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	4a05      	ldr	r2, [pc, #20]	@ (800a5d0 <shell_add+0x74>)
 800a5ba:	6013      	str	r3, [r2, #0]
		return 0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	e001      	b.n	800a5c4 <shell_add+0x68>
	}

	return -1;
 800a5c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	200011d8 	.word	0x200011d8
 800a5d4:	200011dc 	.word	0x200011dc

0800a5d8 <shell_exec>:

static int shell_exec(char * buf) {
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b090      	sub	sp, #64	@ 0x40
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5ec:	e040      	b.n	800a670 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 800a5ee:	492d      	ldr	r1, [pc, #180]	@ (800a6a4 <shell_exec+0xcc>)
 800a5f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	005b      	lsls	r3, r3, #1
 800a5f6:	4413      	add	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	440b      	add	r3, r1
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800a602:	429a      	cmp	r2, r3
 800a604:	d131      	bne.n	800a66a <shell_exec+0x92>
			argc = 1;
 800a606:	2301      	movs	r3, #1
 800a608:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	637b      	str	r3, [r7, #52]	@ 0x34
 800a612:	e013      	b.n	800a63c <shell_exec+0x64>
				if(*p == ' ') {
 800a614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	2b20      	cmp	r3, #32
 800a61a:	d10c      	bne.n	800a636 <shell_exec+0x5e>
					*p = '\0';
 800a61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a61e:	2200      	movs	r2, #0
 800a620:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800a622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a624:	1c5a      	adds	r2, r3, #1
 800a626:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a628:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a62a:	3201      	adds	r2, #1
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	3340      	adds	r3, #64	@ 0x40
 800a630:	443b      	add	r3, r7
 800a632:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800a636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a638:	3301      	adds	r3, #1
 800a63a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a63c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <shell_exec+0x72>
 800a644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a646:	2b07      	cmp	r3, #7
 800a648:	dde4      	ble.n	800a614 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 800a64a:	4916      	ldr	r1, [pc, #88]	@ (800a6a4 <shell_exec+0xcc>)
 800a64c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a64e:	4613      	mov	r3, r2
 800a650:	005b      	lsls	r3, r3, #1
 800a652:	4413      	add	r3, r2
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	440b      	add	r3, r1
 800a658:	3304      	adds	r3, #4
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f107 020c 	add.w	r2, r7, #12
 800a660:	4611      	mov	r1, r2
 800a662:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a664:	4798      	blx	r3
 800a666:	4603      	mov	r3, r0
 800a668:	e017      	b.n	800a69a <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800a66a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a66c:	3301      	adds	r3, #1
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a670:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a8 <shell_exec+0xd0>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a676:	429a      	cmp	r2, r3
 800a678:	dbb9      	blt.n	800a5ee <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 800a67a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a67e:	4a0b      	ldr	r2, [pc, #44]	@ (800a6ac <shell_exec+0xd4>)
 800a680:	2128      	movs	r1, #40	@ 0x28
 800a682:	480b      	ldr	r0, [pc, #44]	@ (800a6b0 <shell_exec+0xd8>)
 800a684:	f000 f97c 	bl	800a980 <sniprintf>
 800a688:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 800a68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	4619      	mov	r1, r3
 800a690:	4807      	ldr	r0, [pc, #28]	@ (800a6b0 <shell_exec+0xd8>)
 800a692:	f7ff feef 	bl	800a474 <uart_write>
	return -1;
 800a696:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3740      	adds	r7, #64	@ 0x40
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	200011dc 	.word	0x200011dc
 800a6a8:	200011d8 	.word	0x200011d8
 800a6ac:	0800bd24 	.word	0x0800bd24
 800a6b0:	200014dc 	.word	0x200014dc

0800a6b4 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
	int reading = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 800a6c2:	2102      	movs	r1, #2
 800a6c4:	482a      	ldr	r0, [pc, #168]	@ (800a770 <shell_run+0xbc>)
 800a6c6:	f7ff fed5 	bl	800a474 <uart_write>
		reading = 1;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	60fb      	str	r3, [r7, #12]

		while(reading) {
 800a6ce:	e047      	b.n	800a760 <shell_run+0xac>
			char c = uart_read();
 800a6d0:	f7ff febe 	bl	800a450 <uart_read>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 800a6d8:	78fb      	ldrb	r3, [r7, #3]
 800a6da:	2b08      	cmp	r3, #8
 800a6dc:	d025      	beq.n	800a72a <shell_run+0x76>
 800a6de:	2b0d      	cmp	r3, #13
 800a6e0:	d12e      	bne.n	800a740 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 800a6e2:	4a24      	ldr	r2, [pc, #144]	@ (800a774 <shell_run+0xc0>)
 800a6e4:	2128      	movs	r1, #40	@ 0x28
 800a6e6:	4824      	ldr	r0, [pc, #144]	@ (800a778 <shell_run+0xc4>)
 800a6e8:	f000 f94a 	bl	800a980 <sniprintf>
 800a6ec:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4820      	ldr	r0, [pc, #128]	@ (800a778 <shell_run+0xc4>)
 800a6f6:	f7ff febd 	bl	800a474 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	1c5a      	adds	r2, r3, #1
 800a6fe:	60ba      	str	r2, [r7, #8]
 800a700:	4a1e      	ldr	r2, [pc, #120]	@ (800a77c <shell_run+0xc8>)
 800a702:	2100      	movs	r1, #0
 800a704:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 800a706:	4b1d      	ldr	r3, [pc, #116]	@ (800a77c <shell_run+0xc8>)
 800a708:	4a1d      	ldr	r2, [pc, #116]	@ (800a780 <shell_run+0xcc>)
 800a70a:	2128      	movs	r1, #40	@ 0x28
 800a70c:	481a      	ldr	r0, [pc, #104]	@ (800a778 <shell_run+0xc4>)
 800a70e:	f000 f937 	bl	800a980 <sniprintf>
 800a712:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	b29b      	uxth	r3, r3
 800a718:	4619      	mov	r1, r3
 800a71a:	4817      	ldr	r0, [pc, #92]	@ (800a778 <shell_run+0xc4>)
 800a71c:	f7ff feaa 	bl	800a474 <uart_write>
				reading = 0;        //exit read loop
 800a720:	2300      	movs	r3, #0
 800a722:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 800a724:	2300      	movs	r3, #0
 800a726:	60bb      	str	r3, [r7, #8]
				break;
 800a728:	e01a      	b.n	800a760 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	dd16      	ble.n	800a75e <shell_run+0xaa>
					pos--;          //remove it in buffer
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	3b01      	subs	r3, #1
 800a734:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 800a736:	2103      	movs	r1, #3
 800a738:	4812      	ldr	r0, [pc, #72]	@ (800a784 <shell_run+0xd0>)
 800a73a:	f7ff fe9b 	bl	800a474 <uart_write>
				}
				break;
 800a73e:	e00e      	b.n	800a75e <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2b27      	cmp	r3, #39	@ 0x27
 800a744:	dc0c      	bgt.n	800a760 <shell_run+0xac>
					uart_write(&c, 1);
 800a746:	1cfb      	adds	r3, r7, #3
 800a748:	2101      	movs	r1, #1
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7ff fe92 	bl	800a474 <uart_write>
					cmd_buffer[pos++] = c; //store
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	1c5a      	adds	r2, r3, #1
 800a754:	60ba      	str	r2, [r7, #8]
 800a756:	78f9      	ldrb	r1, [r7, #3]
 800a758:	4a08      	ldr	r2, [pc, #32]	@ (800a77c <shell_run+0xc8>)
 800a75a:	54d1      	strb	r1, [r2, r3]
 800a75c:	e000      	b.n	800a760 <shell_run+0xac>
				break;
 800a75e:	bf00      	nop
		while(reading) {
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1b4      	bne.n	800a6d0 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 800a766:	4805      	ldr	r0, [pc, #20]	@ (800a77c <shell_run+0xc8>)
 800a768:	f7ff ff36 	bl	800a5d8 <shell_exec>
		uart_write(prompt, 2);
 800a76c:	e7a9      	b.n	800a6c2 <shell_run+0xe>
 800a76e:	bf00      	nop
 800a770:	2000001c 	.word	0x2000001c
 800a774:	0800bd3c 	.word	0x0800bd3c
 800a778:	200014dc 	.word	0x200014dc
 800a77c:	20001504 	.word	0x20001504
 800a780:	0800bd40 	.word	0x0800bd40
 800a784:	20000018 	.word	0x20000018

0800a788 <fonction>:
#include "shell.h"
#include "stdio.h"
#include "stdlib.h"

int fonction(int argc, char ** argv)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
	for (int i = 1; i<argc; i++){
 800a792:	2301      	movs	r3, #1
 800a794:	60fb      	str	r3, [r7, #12]
 800a796:	e00c      	b.n	800a7b2 <fonction+0x2a>
		printf("argv[%d]: %s\r\n",i, argv[i]);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	4413      	add	r3, r2
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	68f9      	ldr	r1, [r7, #12]
 800a7a6:	4807      	ldr	r0, [pc, #28]	@ (800a7c4 <fonction+0x3c>)
 800a7a8:	f000 fa70 	bl	800ac8c <iprintf>
	for (int i = 1; i<argc; i++){
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	60fb      	str	r3, [r7, #12]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	dbee      	blt.n	800a798 <fonction+0x10>
	}
	return 0;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	0800bd48 	.word	0x0800bd48

0800a7c8 <addition>:

int addition(int argc, char ** argv){
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
	uint32_t sum = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60fb      	str	r3, [r7, #12]
	if (argc<=1){
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	dc01      	bgt.n	800a7e0 <addition+0x18>
		return 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	e01b      	b.n	800a818 <addition+0x50>
	}
	for (int i = 1; i<argc; i++){
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	60bb      	str	r3, [r7, #8]
 800a7e4:	e00f      	b.n	800a806 <addition+0x3e>
		sum = sum+atoi(argv[i]);
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 f817 	bl	800a824 <atoi>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i<argc; i++){
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	3301      	adds	r3, #1
 800a804:	60bb      	str	r3, [r7, #8]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	dbeb      	blt.n	800a7e6 <addition+0x1e>
	}
	printf("++ >%lu\r\n",sum);
 800a80e:	68f9      	ldr	r1, [r7, #12]
 800a810:	4803      	ldr	r0, [pc, #12]	@ (800a820 <addition+0x58>)
 800a812:	f000 fa3b 	bl	800ac8c <iprintf>
	return 0;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	0800bd58 	.word	0x0800bd58

0800a824 <atoi>:
 800a824:	220a      	movs	r2, #10
 800a826:	2100      	movs	r1, #0
 800a828:	f000 ba08 	b.w	800ac3c <strtol>

0800a82c <malloc>:
 800a82c:	4b02      	ldr	r3, [pc, #8]	@ (800a838 <malloc+0xc>)
 800a82e:	4601      	mov	r1, r0
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	f000 b825 	b.w	800a880 <_malloc_r>
 800a836:	bf00      	nop
 800a838:	2000002c 	.word	0x2000002c

0800a83c <sbrk_aligned>:
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	4e0f      	ldr	r6, [pc, #60]	@ (800a87c <sbrk_aligned+0x40>)
 800a840:	460c      	mov	r4, r1
 800a842:	6831      	ldr	r1, [r6, #0]
 800a844:	4605      	mov	r5, r0
 800a846:	b911      	cbnz	r1, 800a84e <sbrk_aligned+0x12>
 800a848:	f000 fa90 	bl	800ad6c <_sbrk_r>
 800a84c:	6030      	str	r0, [r6, #0]
 800a84e:	4621      	mov	r1, r4
 800a850:	4628      	mov	r0, r5
 800a852:	f000 fa8b 	bl	800ad6c <_sbrk_r>
 800a856:	1c43      	adds	r3, r0, #1
 800a858:	d103      	bne.n	800a862 <sbrk_aligned+0x26>
 800a85a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a85e:	4620      	mov	r0, r4
 800a860:	bd70      	pop	{r4, r5, r6, pc}
 800a862:	1cc4      	adds	r4, r0, #3
 800a864:	f024 0403 	bic.w	r4, r4, #3
 800a868:	42a0      	cmp	r0, r4
 800a86a:	d0f8      	beq.n	800a85e <sbrk_aligned+0x22>
 800a86c:	1a21      	subs	r1, r4, r0
 800a86e:	4628      	mov	r0, r5
 800a870:	f000 fa7c 	bl	800ad6c <_sbrk_r>
 800a874:	3001      	adds	r0, #1
 800a876:	d1f2      	bne.n	800a85e <sbrk_aligned+0x22>
 800a878:	e7ef      	b.n	800a85a <sbrk_aligned+0x1e>
 800a87a:	bf00      	nop
 800a87c:	2000152c 	.word	0x2000152c

0800a880 <_malloc_r>:
 800a880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a884:	1ccd      	adds	r5, r1, #3
 800a886:	f025 0503 	bic.w	r5, r5, #3
 800a88a:	3508      	adds	r5, #8
 800a88c:	2d0c      	cmp	r5, #12
 800a88e:	bf38      	it	cc
 800a890:	250c      	movcc	r5, #12
 800a892:	2d00      	cmp	r5, #0
 800a894:	4606      	mov	r6, r0
 800a896:	db01      	blt.n	800a89c <_malloc_r+0x1c>
 800a898:	42a9      	cmp	r1, r5
 800a89a:	d904      	bls.n	800a8a6 <_malloc_r+0x26>
 800a89c:	230c      	movs	r3, #12
 800a89e:	6033      	str	r3, [r6, #0]
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a97c <_malloc_r+0xfc>
 800a8aa:	f000 f89d 	bl	800a9e8 <__malloc_lock>
 800a8ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a8b2:	461c      	mov	r4, r3
 800a8b4:	bb44      	cbnz	r4, 800a908 <_malloc_r+0x88>
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f7ff ffbf 	bl	800a83c <sbrk_aligned>
 800a8be:	1c43      	adds	r3, r0, #1
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	d158      	bne.n	800a976 <_malloc_r+0xf6>
 800a8c4:	f8d8 4000 	ldr.w	r4, [r8]
 800a8c8:	4627      	mov	r7, r4
 800a8ca:	2f00      	cmp	r7, #0
 800a8cc:	d143      	bne.n	800a956 <_malloc_r+0xd6>
 800a8ce:	2c00      	cmp	r4, #0
 800a8d0:	d04b      	beq.n	800a96a <_malloc_r+0xea>
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	eb04 0903 	add.w	r9, r4, r3
 800a8dc:	f000 fa46 	bl	800ad6c <_sbrk_r>
 800a8e0:	4581      	cmp	r9, r0
 800a8e2:	d142      	bne.n	800a96a <_malloc_r+0xea>
 800a8e4:	6821      	ldr	r1, [r4, #0]
 800a8e6:	1a6d      	subs	r5, r5, r1
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	f7ff ffa6 	bl	800a83c <sbrk_aligned>
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	d03a      	beq.n	800a96a <_malloc_r+0xea>
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	442b      	add	r3, r5
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	f8d8 3000 	ldr.w	r3, [r8]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	bb62      	cbnz	r2, 800a95c <_malloc_r+0xdc>
 800a902:	f8c8 7000 	str.w	r7, [r8]
 800a906:	e00f      	b.n	800a928 <_malloc_r+0xa8>
 800a908:	6822      	ldr	r2, [r4, #0]
 800a90a:	1b52      	subs	r2, r2, r5
 800a90c:	d420      	bmi.n	800a950 <_malloc_r+0xd0>
 800a90e:	2a0b      	cmp	r2, #11
 800a910:	d917      	bls.n	800a942 <_malloc_r+0xc2>
 800a912:	1961      	adds	r1, r4, r5
 800a914:	42a3      	cmp	r3, r4
 800a916:	6025      	str	r5, [r4, #0]
 800a918:	bf18      	it	ne
 800a91a:	6059      	strne	r1, [r3, #4]
 800a91c:	6863      	ldr	r3, [r4, #4]
 800a91e:	bf08      	it	eq
 800a920:	f8c8 1000 	streq.w	r1, [r8]
 800a924:	5162      	str	r2, [r4, r5]
 800a926:	604b      	str	r3, [r1, #4]
 800a928:	4630      	mov	r0, r6
 800a92a:	f000 f863 	bl	800a9f4 <__malloc_unlock>
 800a92e:	f104 000b 	add.w	r0, r4, #11
 800a932:	1d23      	adds	r3, r4, #4
 800a934:	f020 0007 	bic.w	r0, r0, #7
 800a938:	1ac2      	subs	r2, r0, r3
 800a93a:	bf1c      	itt	ne
 800a93c:	1a1b      	subne	r3, r3, r0
 800a93e:	50a3      	strne	r3, [r4, r2]
 800a940:	e7af      	b.n	800a8a2 <_malloc_r+0x22>
 800a942:	6862      	ldr	r2, [r4, #4]
 800a944:	42a3      	cmp	r3, r4
 800a946:	bf0c      	ite	eq
 800a948:	f8c8 2000 	streq.w	r2, [r8]
 800a94c:	605a      	strne	r2, [r3, #4]
 800a94e:	e7eb      	b.n	800a928 <_malloc_r+0xa8>
 800a950:	4623      	mov	r3, r4
 800a952:	6864      	ldr	r4, [r4, #4]
 800a954:	e7ae      	b.n	800a8b4 <_malloc_r+0x34>
 800a956:	463c      	mov	r4, r7
 800a958:	687f      	ldr	r7, [r7, #4]
 800a95a:	e7b6      	b.n	800a8ca <_malloc_r+0x4a>
 800a95c:	461a      	mov	r2, r3
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	42a3      	cmp	r3, r4
 800a962:	d1fb      	bne.n	800a95c <_malloc_r+0xdc>
 800a964:	2300      	movs	r3, #0
 800a966:	6053      	str	r3, [r2, #4]
 800a968:	e7de      	b.n	800a928 <_malloc_r+0xa8>
 800a96a:	230c      	movs	r3, #12
 800a96c:	6033      	str	r3, [r6, #0]
 800a96e:	4630      	mov	r0, r6
 800a970:	f000 f840 	bl	800a9f4 <__malloc_unlock>
 800a974:	e794      	b.n	800a8a0 <_malloc_r+0x20>
 800a976:	6005      	str	r5, [r0, #0]
 800a978:	e7d6      	b.n	800a928 <_malloc_r+0xa8>
 800a97a:	bf00      	nop
 800a97c:	20001530 	.word	0x20001530

0800a980 <sniprintf>:
 800a980:	b40c      	push	{r2, r3}
 800a982:	b530      	push	{r4, r5, lr}
 800a984:	4b17      	ldr	r3, [pc, #92]	@ (800a9e4 <sniprintf+0x64>)
 800a986:	1e0c      	subs	r4, r1, #0
 800a988:	681d      	ldr	r5, [r3, #0]
 800a98a:	b09d      	sub	sp, #116	@ 0x74
 800a98c:	da08      	bge.n	800a9a0 <sniprintf+0x20>
 800a98e:	238b      	movs	r3, #139	@ 0x8b
 800a990:	602b      	str	r3, [r5, #0]
 800a992:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a996:	b01d      	add	sp, #116	@ 0x74
 800a998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a99c:	b002      	add	sp, #8
 800a99e:	4770      	bx	lr
 800a9a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a9a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a9a8:	bf14      	ite	ne
 800a9aa:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a9ae:	4623      	moveq	r3, r4
 800a9b0:	9304      	str	r3, [sp, #16]
 800a9b2:	9307      	str	r3, [sp, #28]
 800a9b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a9b8:	9002      	str	r0, [sp, #8]
 800a9ba:	9006      	str	r0, [sp, #24]
 800a9bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a9c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a9c2:	ab21      	add	r3, sp, #132	@ 0x84
 800a9c4:	a902      	add	r1, sp, #8
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	9301      	str	r3, [sp, #4]
 800a9ca:	f000 fac3 	bl	800af54 <_svfiprintf_r>
 800a9ce:	1c43      	adds	r3, r0, #1
 800a9d0:	bfbc      	itt	lt
 800a9d2:	238b      	movlt	r3, #139	@ 0x8b
 800a9d4:	602b      	strlt	r3, [r5, #0]
 800a9d6:	2c00      	cmp	r4, #0
 800a9d8:	d0dd      	beq.n	800a996 <sniprintf+0x16>
 800a9da:	9b02      	ldr	r3, [sp, #8]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	701a      	strb	r2, [r3, #0]
 800a9e0:	e7d9      	b.n	800a996 <sniprintf+0x16>
 800a9e2:	bf00      	nop
 800a9e4:	2000002c 	.word	0x2000002c

0800a9e8 <__malloc_lock>:
 800a9e8:	4801      	ldr	r0, [pc, #4]	@ (800a9f0 <__malloc_lock+0x8>)
 800a9ea:	f000 b9fa 	b.w	800ade2 <__retarget_lock_acquire_recursive>
 800a9ee:	bf00      	nop
 800a9f0:	20001674 	.word	0x20001674

0800a9f4 <__malloc_unlock>:
 800a9f4:	4801      	ldr	r0, [pc, #4]	@ (800a9fc <__malloc_unlock+0x8>)
 800a9f6:	f000 b9f5 	b.w	800ade4 <__retarget_lock_release_recursive>
 800a9fa:	bf00      	nop
 800a9fc:	20001674 	.word	0x20001674

0800aa00 <std>:
 800aa00:	2300      	movs	r3, #0
 800aa02:	b510      	push	{r4, lr}
 800aa04:	4604      	mov	r4, r0
 800aa06:	e9c0 3300 	strd	r3, r3, [r0]
 800aa0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa0e:	6083      	str	r3, [r0, #8]
 800aa10:	8181      	strh	r1, [r0, #12]
 800aa12:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa14:	81c2      	strh	r2, [r0, #14]
 800aa16:	6183      	str	r3, [r0, #24]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	2208      	movs	r2, #8
 800aa1c:	305c      	adds	r0, #92	@ 0x5c
 800aa1e:	f000 f947 	bl	800acb0 <memset>
 800aa22:	4b0d      	ldr	r3, [pc, #52]	@ (800aa58 <std+0x58>)
 800aa24:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa26:	4b0d      	ldr	r3, [pc, #52]	@ (800aa5c <std+0x5c>)
 800aa28:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa2a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa60 <std+0x60>)
 800aa2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa2e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa64 <std+0x64>)
 800aa30:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa32:	4b0d      	ldr	r3, [pc, #52]	@ (800aa68 <std+0x68>)
 800aa34:	6224      	str	r4, [r4, #32]
 800aa36:	429c      	cmp	r4, r3
 800aa38:	d006      	beq.n	800aa48 <std+0x48>
 800aa3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa3e:	4294      	cmp	r4, r2
 800aa40:	d002      	beq.n	800aa48 <std+0x48>
 800aa42:	33d0      	adds	r3, #208	@ 0xd0
 800aa44:	429c      	cmp	r4, r3
 800aa46:	d105      	bne.n	800aa54 <std+0x54>
 800aa48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa50:	f000 b9c6 	b.w	800ade0 <__retarget_lock_init_recursive>
 800aa54:	bd10      	pop	{r4, pc}
 800aa56:	bf00      	nop
 800aa58:	0800b845 	.word	0x0800b845
 800aa5c:	0800b867 	.word	0x0800b867
 800aa60:	0800b89f 	.word	0x0800b89f
 800aa64:	0800b8c3 	.word	0x0800b8c3
 800aa68:	20001534 	.word	0x20001534

0800aa6c <stdio_exit_handler>:
 800aa6c:	4a02      	ldr	r2, [pc, #8]	@ (800aa78 <stdio_exit_handler+0xc>)
 800aa6e:	4903      	ldr	r1, [pc, #12]	@ (800aa7c <stdio_exit_handler+0x10>)
 800aa70:	4803      	ldr	r0, [pc, #12]	@ (800aa80 <stdio_exit_handler+0x14>)
 800aa72:	f000 b8ed 	b.w	800ac50 <_fwalk_sglue>
 800aa76:	bf00      	nop
 800aa78:	20000020 	.word	0x20000020
 800aa7c:	0800b7f5 	.word	0x0800b7f5
 800aa80:	20000030 	.word	0x20000030

0800aa84 <cleanup_stdio>:
 800aa84:	6841      	ldr	r1, [r0, #4]
 800aa86:	4b0c      	ldr	r3, [pc, #48]	@ (800aab8 <cleanup_stdio+0x34>)
 800aa88:	4299      	cmp	r1, r3
 800aa8a:	b510      	push	{r4, lr}
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	d001      	beq.n	800aa94 <cleanup_stdio+0x10>
 800aa90:	f000 feb0 	bl	800b7f4 <_fflush_r>
 800aa94:	68a1      	ldr	r1, [r4, #8]
 800aa96:	4b09      	ldr	r3, [pc, #36]	@ (800aabc <cleanup_stdio+0x38>)
 800aa98:	4299      	cmp	r1, r3
 800aa9a:	d002      	beq.n	800aaa2 <cleanup_stdio+0x1e>
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f000 fea9 	bl	800b7f4 <_fflush_r>
 800aaa2:	68e1      	ldr	r1, [r4, #12]
 800aaa4:	4b06      	ldr	r3, [pc, #24]	@ (800aac0 <cleanup_stdio+0x3c>)
 800aaa6:	4299      	cmp	r1, r3
 800aaa8:	d004      	beq.n	800aab4 <cleanup_stdio+0x30>
 800aaaa:	4620      	mov	r0, r4
 800aaac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aab0:	f000 bea0 	b.w	800b7f4 <_fflush_r>
 800aab4:	bd10      	pop	{r4, pc}
 800aab6:	bf00      	nop
 800aab8:	20001534 	.word	0x20001534
 800aabc:	2000159c 	.word	0x2000159c
 800aac0:	20001604 	.word	0x20001604

0800aac4 <global_stdio_init.part.0>:
 800aac4:	b510      	push	{r4, lr}
 800aac6:	4b0b      	ldr	r3, [pc, #44]	@ (800aaf4 <global_stdio_init.part.0+0x30>)
 800aac8:	4c0b      	ldr	r4, [pc, #44]	@ (800aaf8 <global_stdio_init.part.0+0x34>)
 800aaca:	4a0c      	ldr	r2, [pc, #48]	@ (800aafc <global_stdio_init.part.0+0x38>)
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	4620      	mov	r0, r4
 800aad0:	2200      	movs	r2, #0
 800aad2:	2104      	movs	r1, #4
 800aad4:	f7ff ff94 	bl	800aa00 <std>
 800aad8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aadc:	2201      	movs	r2, #1
 800aade:	2109      	movs	r1, #9
 800aae0:	f7ff ff8e 	bl	800aa00 <std>
 800aae4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aae8:	2202      	movs	r2, #2
 800aaea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaee:	2112      	movs	r1, #18
 800aaf0:	f7ff bf86 	b.w	800aa00 <std>
 800aaf4:	2000166c 	.word	0x2000166c
 800aaf8:	20001534 	.word	0x20001534
 800aafc:	0800aa6d 	.word	0x0800aa6d

0800ab00 <__sfp_lock_acquire>:
 800ab00:	4801      	ldr	r0, [pc, #4]	@ (800ab08 <__sfp_lock_acquire+0x8>)
 800ab02:	f000 b96e 	b.w	800ade2 <__retarget_lock_acquire_recursive>
 800ab06:	bf00      	nop
 800ab08:	20001675 	.word	0x20001675

0800ab0c <__sfp_lock_release>:
 800ab0c:	4801      	ldr	r0, [pc, #4]	@ (800ab14 <__sfp_lock_release+0x8>)
 800ab0e:	f000 b969 	b.w	800ade4 <__retarget_lock_release_recursive>
 800ab12:	bf00      	nop
 800ab14:	20001675 	.word	0x20001675

0800ab18 <__sinit>:
 800ab18:	b510      	push	{r4, lr}
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	f7ff fff0 	bl	800ab00 <__sfp_lock_acquire>
 800ab20:	6a23      	ldr	r3, [r4, #32]
 800ab22:	b11b      	cbz	r3, 800ab2c <__sinit+0x14>
 800ab24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab28:	f7ff bff0 	b.w	800ab0c <__sfp_lock_release>
 800ab2c:	4b04      	ldr	r3, [pc, #16]	@ (800ab40 <__sinit+0x28>)
 800ab2e:	6223      	str	r3, [r4, #32]
 800ab30:	4b04      	ldr	r3, [pc, #16]	@ (800ab44 <__sinit+0x2c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1f5      	bne.n	800ab24 <__sinit+0xc>
 800ab38:	f7ff ffc4 	bl	800aac4 <global_stdio_init.part.0>
 800ab3c:	e7f2      	b.n	800ab24 <__sinit+0xc>
 800ab3e:	bf00      	nop
 800ab40:	0800aa85 	.word	0x0800aa85
 800ab44:	2000166c 	.word	0x2000166c

0800ab48 <_strtol_l.constprop.0>:
 800ab48:	2b24      	cmp	r3, #36	@ 0x24
 800ab4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab4e:	4686      	mov	lr, r0
 800ab50:	4690      	mov	r8, r2
 800ab52:	d801      	bhi.n	800ab58 <_strtol_l.constprop.0+0x10>
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d106      	bne.n	800ab66 <_strtol_l.constprop.0+0x1e>
 800ab58:	f000 f918 	bl	800ad8c <__errno>
 800ab5c:	2316      	movs	r3, #22
 800ab5e:	6003      	str	r3, [r0, #0]
 800ab60:	2000      	movs	r0, #0
 800ab62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab66:	4834      	ldr	r0, [pc, #208]	@ (800ac38 <_strtol_l.constprop.0+0xf0>)
 800ab68:	460d      	mov	r5, r1
 800ab6a:	462a      	mov	r2, r5
 800ab6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab70:	5d06      	ldrb	r6, [r0, r4]
 800ab72:	f016 0608 	ands.w	r6, r6, #8
 800ab76:	d1f8      	bne.n	800ab6a <_strtol_l.constprop.0+0x22>
 800ab78:	2c2d      	cmp	r4, #45	@ 0x2d
 800ab7a:	d12d      	bne.n	800abd8 <_strtol_l.constprop.0+0x90>
 800ab7c:	782c      	ldrb	r4, [r5, #0]
 800ab7e:	2601      	movs	r6, #1
 800ab80:	1c95      	adds	r5, r2, #2
 800ab82:	f033 0210 	bics.w	r2, r3, #16
 800ab86:	d109      	bne.n	800ab9c <_strtol_l.constprop.0+0x54>
 800ab88:	2c30      	cmp	r4, #48	@ 0x30
 800ab8a:	d12a      	bne.n	800abe2 <_strtol_l.constprop.0+0x9a>
 800ab8c:	782a      	ldrb	r2, [r5, #0]
 800ab8e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab92:	2a58      	cmp	r2, #88	@ 0x58
 800ab94:	d125      	bne.n	800abe2 <_strtol_l.constprop.0+0x9a>
 800ab96:	786c      	ldrb	r4, [r5, #1]
 800ab98:	2310      	movs	r3, #16
 800ab9a:	3502      	adds	r5, #2
 800ab9c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aba0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800aba4:	2200      	movs	r2, #0
 800aba6:	fbbc f9f3 	udiv	r9, ip, r3
 800abaa:	4610      	mov	r0, r2
 800abac:	fb03 ca19 	mls	sl, r3, r9, ip
 800abb0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800abb4:	2f09      	cmp	r7, #9
 800abb6:	d81b      	bhi.n	800abf0 <_strtol_l.constprop.0+0xa8>
 800abb8:	463c      	mov	r4, r7
 800abba:	42a3      	cmp	r3, r4
 800abbc:	dd27      	ble.n	800ac0e <_strtol_l.constprop.0+0xc6>
 800abbe:	1c57      	adds	r7, r2, #1
 800abc0:	d007      	beq.n	800abd2 <_strtol_l.constprop.0+0x8a>
 800abc2:	4581      	cmp	r9, r0
 800abc4:	d320      	bcc.n	800ac08 <_strtol_l.constprop.0+0xc0>
 800abc6:	d101      	bne.n	800abcc <_strtol_l.constprop.0+0x84>
 800abc8:	45a2      	cmp	sl, r4
 800abca:	db1d      	blt.n	800ac08 <_strtol_l.constprop.0+0xc0>
 800abcc:	fb00 4003 	mla	r0, r0, r3, r4
 800abd0:	2201      	movs	r2, #1
 800abd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abd6:	e7eb      	b.n	800abb0 <_strtol_l.constprop.0+0x68>
 800abd8:	2c2b      	cmp	r4, #43	@ 0x2b
 800abda:	bf04      	itt	eq
 800abdc:	782c      	ldrbeq	r4, [r5, #0]
 800abde:	1c95      	addeq	r5, r2, #2
 800abe0:	e7cf      	b.n	800ab82 <_strtol_l.constprop.0+0x3a>
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1da      	bne.n	800ab9c <_strtol_l.constprop.0+0x54>
 800abe6:	2c30      	cmp	r4, #48	@ 0x30
 800abe8:	bf0c      	ite	eq
 800abea:	2308      	moveq	r3, #8
 800abec:	230a      	movne	r3, #10
 800abee:	e7d5      	b.n	800ab9c <_strtol_l.constprop.0+0x54>
 800abf0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800abf4:	2f19      	cmp	r7, #25
 800abf6:	d801      	bhi.n	800abfc <_strtol_l.constprop.0+0xb4>
 800abf8:	3c37      	subs	r4, #55	@ 0x37
 800abfa:	e7de      	b.n	800abba <_strtol_l.constprop.0+0x72>
 800abfc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ac00:	2f19      	cmp	r7, #25
 800ac02:	d804      	bhi.n	800ac0e <_strtol_l.constprop.0+0xc6>
 800ac04:	3c57      	subs	r4, #87	@ 0x57
 800ac06:	e7d8      	b.n	800abba <_strtol_l.constprop.0+0x72>
 800ac08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac0c:	e7e1      	b.n	800abd2 <_strtol_l.constprop.0+0x8a>
 800ac0e:	1c53      	adds	r3, r2, #1
 800ac10:	d108      	bne.n	800ac24 <_strtol_l.constprop.0+0xdc>
 800ac12:	2322      	movs	r3, #34	@ 0x22
 800ac14:	f8ce 3000 	str.w	r3, [lr]
 800ac18:	4660      	mov	r0, ip
 800ac1a:	f1b8 0f00 	cmp.w	r8, #0
 800ac1e:	d0a0      	beq.n	800ab62 <_strtol_l.constprop.0+0x1a>
 800ac20:	1e69      	subs	r1, r5, #1
 800ac22:	e006      	b.n	800ac32 <_strtol_l.constprop.0+0xea>
 800ac24:	b106      	cbz	r6, 800ac28 <_strtol_l.constprop.0+0xe0>
 800ac26:	4240      	negs	r0, r0
 800ac28:	f1b8 0f00 	cmp.w	r8, #0
 800ac2c:	d099      	beq.n	800ab62 <_strtol_l.constprop.0+0x1a>
 800ac2e:	2a00      	cmp	r2, #0
 800ac30:	d1f6      	bne.n	800ac20 <_strtol_l.constprop.0+0xd8>
 800ac32:	f8c8 1000 	str.w	r1, [r8]
 800ac36:	e794      	b.n	800ab62 <_strtol_l.constprop.0+0x1a>
 800ac38:	0800bdb5 	.word	0x0800bdb5

0800ac3c <strtol>:
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	460a      	mov	r2, r1
 800ac40:	4601      	mov	r1, r0
 800ac42:	4802      	ldr	r0, [pc, #8]	@ (800ac4c <strtol+0x10>)
 800ac44:	6800      	ldr	r0, [r0, #0]
 800ac46:	f7ff bf7f 	b.w	800ab48 <_strtol_l.constprop.0>
 800ac4a:	bf00      	nop
 800ac4c:	2000002c 	.word	0x2000002c

0800ac50 <_fwalk_sglue>:
 800ac50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac54:	4607      	mov	r7, r0
 800ac56:	4688      	mov	r8, r1
 800ac58:	4614      	mov	r4, r2
 800ac5a:	2600      	movs	r6, #0
 800ac5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac60:	f1b9 0901 	subs.w	r9, r9, #1
 800ac64:	d505      	bpl.n	800ac72 <_fwalk_sglue+0x22>
 800ac66:	6824      	ldr	r4, [r4, #0]
 800ac68:	2c00      	cmp	r4, #0
 800ac6a:	d1f7      	bne.n	800ac5c <_fwalk_sglue+0xc>
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac72:	89ab      	ldrh	r3, [r5, #12]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d907      	bls.n	800ac88 <_fwalk_sglue+0x38>
 800ac78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	d003      	beq.n	800ac88 <_fwalk_sglue+0x38>
 800ac80:	4629      	mov	r1, r5
 800ac82:	4638      	mov	r0, r7
 800ac84:	47c0      	blx	r8
 800ac86:	4306      	orrs	r6, r0
 800ac88:	3568      	adds	r5, #104	@ 0x68
 800ac8a:	e7e9      	b.n	800ac60 <_fwalk_sglue+0x10>

0800ac8c <iprintf>:
 800ac8c:	b40f      	push	{r0, r1, r2, r3}
 800ac8e:	b507      	push	{r0, r1, r2, lr}
 800ac90:	4906      	ldr	r1, [pc, #24]	@ (800acac <iprintf+0x20>)
 800ac92:	ab04      	add	r3, sp, #16
 800ac94:	6808      	ldr	r0, [r1, #0]
 800ac96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac9a:	6881      	ldr	r1, [r0, #8]
 800ac9c:	9301      	str	r3, [sp, #4]
 800ac9e:	f000 fa7f 	bl	800b1a0 <_vfiprintf_r>
 800aca2:	b003      	add	sp, #12
 800aca4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aca8:	b004      	add	sp, #16
 800acaa:	4770      	bx	lr
 800acac:	2000002c 	.word	0x2000002c

0800acb0 <memset>:
 800acb0:	4402      	add	r2, r0
 800acb2:	4603      	mov	r3, r0
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d100      	bne.n	800acba <memset+0xa>
 800acb8:	4770      	bx	lr
 800acba:	f803 1b01 	strb.w	r1, [r3], #1
 800acbe:	e7f9      	b.n	800acb4 <memset+0x4>

0800acc0 <_reclaim_reent>:
 800acc0:	4b29      	ldr	r3, [pc, #164]	@ (800ad68 <_reclaim_reent+0xa8>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4283      	cmp	r3, r0
 800acc6:	b570      	push	{r4, r5, r6, lr}
 800acc8:	4604      	mov	r4, r0
 800acca:	d04b      	beq.n	800ad64 <_reclaim_reent+0xa4>
 800accc:	69c3      	ldr	r3, [r0, #28]
 800acce:	b1ab      	cbz	r3, 800acfc <_reclaim_reent+0x3c>
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	b16b      	cbz	r3, 800acf0 <_reclaim_reent+0x30>
 800acd4:	2500      	movs	r5, #0
 800acd6:	69e3      	ldr	r3, [r4, #28]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	5959      	ldr	r1, [r3, r5]
 800acdc:	2900      	cmp	r1, #0
 800acde:	d13b      	bne.n	800ad58 <_reclaim_reent+0x98>
 800ace0:	3504      	adds	r5, #4
 800ace2:	2d80      	cmp	r5, #128	@ 0x80
 800ace4:	d1f7      	bne.n	800acd6 <_reclaim_reent+0x16>
 800ace6:	69e3      	ldr	r3, [r4, #28]
 800ace8:	4620      	mov	r0, r4
 800acea:	68d9      	ldr	r1, [r3, #12]
 800acec:	f000 f88c 	bl	800ae08 <_free_r>
 800acf0:	69e3      	ldr	r3, [r4, #28]
 800acf2:	6819      	ldr	r1, [r3, #0]
 800acf4:	b111      	cbz	r1, 800acfc <_reclaim_reent+0x3c>
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 f886 	bl	800ae08 <_free_r>
 800acfc:	6961      	ldr	r1, [r4, #20]
 800acfe:	b111      	cbz	r1, 800ad06 <_reclaim_reent+0x46>
 800ad00:	4620      	mov	r0, r4
 800ad02:	f000 f881 	bl	800ae08 <_free_r>
 800ad06:	69e1      	ldr	r1, [r4, #28]
 800ad08:	b111      	cbz	r1, 800ad10 <_reclaim_reent+0x50>
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f000 f87c 	bl	800ae08 <_free_r>
 800ad10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ad12:	b111      	cbz	r1, 800ad1a <_reclaim_reent+0x5a>
 800ad14:	4620      	mov	r0, r4
 800ad16:	f000 f877 	bl	800ae08 <_free_r>
 800ad1a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad1c:	b111      	cbz	r1, 800ad24 <_reclaim_reent+0x64>
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 f872 	bl	800ae08 <_free_r>
 800ad24:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ad26:	b111      	cbz	r1, 800ad2e <_reclaim_reent+0x6e>
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f000 f86d 	bl	800ae08 <_free_r>
 800ad2e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ad30:	b111      	cbz	r1, 800ad38 <_reclaim_reent+0x78>
 800ad32:	4620      	mov	r0, r4
 800ad34:	f000 f868 	bl	800ae08 <_free_r>
 800ad38:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ad3a:	b111      	cbz	r1, 800ad42 <_reclaim_reent+0x82>
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f000 f863 	bl	800ae08 <_free_r>
 800ad42:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ad44:	b111      	cbz	r1, 800ad4c <_reclaim_reent+0x8c>
 800ad46:	4620      	mov	r0, r4
 800ad48:	f000 f85e 	bl	800ae08 <_free_r>
 800ad4c:	6a23      	ldr	r3, [r4, #32]
 800ad4e:	b14b      	cbz	r3, 800ad64 <_reclaim_reent+0xa4>
 800ad50:	4620      	mov	r0, r4
 800ad52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad56:	4718      	bx	r3
 800ad58:	680e      	ldr	r6, [r1, #0]
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 f854 	bl	800ae08 <_free_r>
 800ad60:	4631      	mov	r1, r6
 800ad62:	e7bb      	b.n	800acdc <_reclaim_reent+0x1c>
 800ad64:	bd70      	pop	{r4, r5, r6, pc}
 800ad66:	bf00      	nop
 800ad68:	2000002c 	.word	0x2000002c

0800ad6c <_sbrk_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d06      	ldr	r5, [pc, #24]	@ (800ad88 <_sbrk_r+0x1c>)
 800ad70:	2300      	movs	r3, #0
 800ad72:	4604      	mov	r4, r0
 800ad74:	4608      	mov	r0, r1
 800ad76:	602b      	str	r3, [r5, #0]
 800ad78:	f7f6 fb14 	bl	80013a4 <_sbrk>
 800ad7c:	1c43      	adds	r3, r0, #1
 800ad7e:	d102      	bne.n	800ad86 <_sbrk_r+0x1a>
 800ad80:	682b      	ldr	r3, [r5, #0]
 800ad82:	b103      	cbz	r3, 800ad86 <_sbrk_r+0x1a>
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	bd38      	pop	{r3, r4, r5, pc}
 800ad88:	20001670 	.word	0x20001670

0800ad8c <__errno>:
 800ad8c:	4b01      	ldr	r3, [pc, #4]	@ (800ad94 <__errno+0x8>)
 800ad8e:	6818      	ldr	r0, [r3, #0]
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	2000002c 	.word	0x2000002c

0800ad98 <__libc_init_array>:
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	4d0d      	ldr	r5, [pc, #52]	@ (800add0 <__libc_init_array+0x38>)
 800ad9c:	4c0d      	ldr	r4, [pc, #52]	@ (800add4 <__libc_init_array+0x3c>)
 800ad9e:	1b64      	subs	r4, r4, r5
 800ada0:	10a4      	asrs	r4, r4, #2
 800ada2:	2600      	movs	r6, #0
 800ada4:	42a6      	cmp	r6, r4
 800ada6:	d109      	bne.n	800adbc <__libc_init_array+0x24>
 800ada8:	4d0b      	ldr	r5, [pc, #44]	@ (800add8 <__libc_init_array+0x40>)
 800adaa:	4c0c      	ldr	r4, [pc, #48]	@ (800addc <__libc_init_array+0x44>)
 800adac:	f000 ff3c 	bl	800bc28 <_init>
 800adb0:	1b64      	subs	r4, r4, r5
 800adb2:	10a4      	asrs	r4, r4, #2
 800adb4:	2600      	movs	r6, #0
 800adb6:	42a6      	cmp	r6, r4
 800adb8:	d105      	bne.n	800adc6 <__libc_init_array+0x2e>
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800adc0:	4798      	blx	r3
 800adc2:	3601      	adds	r6, #1
 800adc4:	e7ee      	b.n	800ada4 <__libc_init_array+0xc>
 800adc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800adca:	4798      	blx	r3
 800adcc:	3601      	adds	r6, #1
 800adce:	e7f2      	b.n	800adb6 <__libc_init_array+0x1e>
 800add0:	0800bef0 	.word	0x0800bef0
 800add4:	0800bef0 	.word	0x0800bef0
 800add8:	0800bef0 	.word	0x0800bef0
 800addc:	0800bef4 	.word	0x0800bef4

0800ade0 <__retarget_lock_init_recursive>:
 800ade0:	4770      	bx	lr

0800ade2 <__retarget_lock_acquire_recursive>:
 800ade2:	4770      	bx	lr

0800ade4 <__retarget_lock_release_recursive>:
 800ade4:	4770      	bx	lr

0800ade6 <__aeabi_memclr>:
 800ade6:	2200      	movs	r2, #0
 800ade8:	f7f5 bad7 	b.w	800039a <__aeabi_memset>

0800adec <memcpy>:
 800adec:	440a      	add	r2, r1
 800adee:	4291      	cmp	r1, r2
 800adf0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800adf4:	d100      	bne.n	800adf8 <memcpy+0xc>
 800adf6:	4770      	bx	lr
 800adf8:	b510      	push	{r4, lr}
 800adfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae02:	4291      	cmp	r1, r2
 800ae04:	d1f9      	bne.n	800adfa <memcpy+0xe>
 800ae06:	bd10      	pop	{r4, pc}

0800ae08 <_free_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	2900      	cmp	r1, #0
 800ae0e:	d041      	beq.n	800ae94 <_free_r+0x8c>
 800ae10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae14:	1f0c      	subs	r4, r1, #4
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	bfb8      	it	lt
 800ae1a:	18e4      	addlt	r4, r4, r3
 800ae1c:	f7ff fde4 	bl	800a9e8 <__malloc_lock>
 800ae20:	4a1d      	ldr	r2, [pc, #116]	@ (800ae98 <_free_r+0x90>)
 800ae22:	6813      	ldr	r3, [r2, #0]
 800ae24:	b933      	cbnz	r3, 800ae34 <_free_r+0x2c>
 800ae26:	6063      	str	r3, [r4, #4]
 800ae28:	6014      	str	r4, [r2, #0]
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae30:	f7ff bde0 	b.w	800a9f4 <__malloc_unlock>
 800ae34:	42a3      	cmp	r3, r4
 800ae36:	d908      	bls.n	800ae4a <_free_r+0x42>
 800ae38:	6820      	ldr	r0, [r4, #0]
 800ae3a:	1821      	adds	r1, r4, r0
 800ae3c:	428b      	cmp	r3, r1
 800ae3e:	bf01      	itttt	eq
 800ae40:	6819      	ldreq	r1, [r3, #0]
 800ae42:	685b      	ldreq	r3, [r3, #4]
 800ae44:	1809      	addeq	r1, r1, r0
 800ae46:	6021      	streq	r1, [r4, #0]
 800ae48:	e7ed      	b.n	800ae26 <_free_r+0x1e>
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	b10b      	cbz	r3, 800ae54 <_free_r+0x4c>
 800ae50:	42a3      	cmp	r3, r4
 800ae52:	d9fa      	bls.n	800ae4a <_free_r+0x42>
 800ae54:	6811      	ldr	r1, [r2, #0]
 800ae56:	1850      	adds	r0, r2, r1
 800ae58:	42a0      	cmp	r0, r4
 800ae5a:	d10b      	bne.n	800ae74 <_free_r+0x6c>
 800ae5c:	6820      	ldr	r0, [r4, #0]
 800ae5e:	4401      	add	r1, r0
 800ae60:	1850      	adds	r0, r2, r1
 800ae62:	4283      	cmp	r3, r0
 800ae64:	6011      	str	r1, [r2, #0]
 800ae66:	d1e0      	bne.n	800ae2a <_free_r+0x22>
 800ae68:	6818      	ldr	r0, [r3, #0]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	6053      	str	r3, [r2, #4]
 800ae6e:	4408      	add	r0, r1
 800ae70:	6010      	str	r0, [r2, #0]
 800ae72:	e7da      	b.n	800ae2a <_free_r+0x22>
 800ae74:	d902      	bls.n	800ae7c <_free_r+0x74>
 800ae76:	230c      	movs	r3, #12
 800ae78:	602b      	str	r3, [r5, #0]
 800ae7a:	e7d6      	b.n	800ae2a <_free_r+0x22>
 800ae7c:	6820      	ldr	r0, [r4, #0]
 800ae7e:	1821      	adds	r1, r4, r0
 800ae80:	428b      	cmp	r3, r1
 800ae82:	bf04      	itt	eq
 800ae84:	6819      	ldreq	r1, [r3, #0]
 800ae86:	685b      	ldreq	r3, [r3, #4]
 800ae88:	6063      	str	r3, [r4, #4]
 800ae8a:	bf04      	itt	eq
 800ae8c:	1809      	addeq	r1, r1, r0
 800ae8e:	6021      	streq	r1, [r4, #0]
 800ae90:	6054      	str	r4, [r2, #4]
 800ae92:	e7ca      	b.n	800ae2a <_free_r+0x22>
 800ae94:	bd38      	pop	{r3, r4, r5, pc}
 800ae96:	bf00      	nop
 800ae98:	20001530 	.word	0x20001530

0800ae9c <__ssputs_r>:
 800ae9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aea0:	688e      	ldr	r6, [r1, #8]
 800aea2:	461f      	mov	r7, r3
 800aea4:	42be      	cmp	r6, r7
 800aea6:	680b      	ldr	r3, [r1, #0]
 800aea8:	4682      	mov	sl, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	4690      	mov	r8, r2
 800aeae:	d82d      	bhi.n	800af0c <__ssputs_r+0x70>
 800aeb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aeb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aeb8:	d026      	beq.n	800af08 <__ssputs_r+0x6c>
 800aeba:	6965      	ldr	r5, [r4, #20]
 800aebc:	6909      	ldr	r1, [r1, #16]
 800aebe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aec2:	eba3 0901 	sub.w	r9, r3, r1
 800aec6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeca:	1c7b      	adds	r3, r7, #1
 800aecc:	444b      	add	r3, r9
 800aece:	106d      	asrs	r5, r5, #1
 800aed0:	429d      	cmp	r5, r3
 800aed2:	bf38      	it	cc
 800aed4:	461d      	movcc	r5, r3
 800aed6:	0553      	lsls	r3, r2, #21
 800aed8:	d527      	bpl.n	800af2a <__ssputs_r+0x8e>
 800aeda:	4629      	mov	r1, r5
 800aedc:	f7ff fcd0 	bl	800a880 <_malloc_r>
 800aee0:	4606      	mov	r6, r0
 800aee2:	b360      	cbz	r0, 800af3e <__ssputs_r+0xa2>
 800aee4:	6921      	ldr	r1, [r4, #16]
 800aee6:	464a      	mov	r2, r9
 800aee8:	f7ff ff80 	bl	800adec <memcpy>
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aef6:	81a3      	strh	r3, [r4, #12]
 800aef8:	6126      	str	r6, [r4, #16]
 800aefa:	6165      	str	r5, [r4, #20]
 800aefc:	444e      	add	r6, r9
 800aefe:	eba5 0509 	sub.w	r5, r5, r9
 800af02:	6026      	str	r6, [r4, #0]
 800af04:	60a5      	str	r5, [r4, #8]
 800af06:	463e      	mov	r6, r7
 800af08:	42be      	cmp	r6, r7
 800af0a:	d900      	bls.n	800af0e <__ssputs_r+0x72>
 800af0c:	463e      	mov	r6, r7
 800af0e:	6820      	ldr	r0, [r4, #0]
 800af10:	4632      	mov	r2, r6
 800af12:	4641      	mov	r1, r8
 800af14:	f000 fdfe 	bl	800bb14 <memmove>
 800af18:	68a3      	ldr	r3, [r4, #8]
 800af1a:	1b9b      	subs	r3, r3, r6
 800af1c:	60a3      	str	r3, [r4, #8]
 800af1e:	6823      	ldr	r3, [r4, #0]
 800af20:	4433      	add	r3, r6
 800af22:	6023      	str	r3, [r4, #0]
 800af24:	2000      	movs	r0, #0
 800af26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af2a:	462a      	mov	r2, r5
 800af2c:	f000 fccd 	bl	800b8ca <_realloc_r>
 800af30:	4606      	mov	r6, r0
 800af32:	2800      	cmp	r0, #0
 800af34:	d1e0      	bne.n	800aef8 <__ssputs_r+0x5c>
 800af36:	6921      	ldr	r1, [r4, #16]
 800af38:	4650      	mov	r0, sl
 800af3a:	f7ff ff65 	bl	800ae08 <_free_r>
 800af3e:	230c      	movs	r3, #12
 800af40:	f8ca 3000 	str.w	r3, [sl]
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af4a:	81a3      	strh	r3, [r4, #12]
 800af4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af50:	e7e9      	b.n	800af26 <__ssputs_r+0x8a>
	...

0800af54 <_svfiprintf_r>:
 800af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af58:	4698      	mov	r8, r3
 800af5a:	898b      	ldrh	r3, [r1, #12]
 800af5c:	061b      	lsls	r3, r3, #24
 800af5e:	b09d      	sub	sp, #116	@ 0x74
 800af60:	4607      	mov	r7, r0
 800af62:	460d      	mov	r5, r1
 800af64:	4614      	mov	r4, r2
 800af66:	d510      	bpl.n	800af8a <_svfiprintf_r+0x36>
 800af68:	690b      	ldr	r3, [r1, #16]
 800af6a:	b973      	cbnz	r3, 800af8a <_svfiprintf_r+0x36>
 800af6c:	2140      	movs	r1, #64	@ 0x40
 800af6e:	f7ff fc87 	bl	800a880 <_malloc_r>
 800af72:	6028      	str	r0, [r5, #0]
 800af74:	6128      	str	r0, [r5, #16]
 800af76:	b930      	cbnz	r0, 800af86 <_svfiprintf_r+0x32>
 800af78:	230c      	movs	r3, #12
 800af7a:	603b      	str	r3, [r7, #0]
 800af7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af80:	b01d      	add	sp, #116	@ 0x74
 800af82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af86:	2340      	movs	r3, #64	@ 0x40
 800af88:	616b      	str	r3, [r5, #20]
 800af8a:	2300      	movs	r3, #0
 800af8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af8e:	2320      	movs	r3, #32
 800af90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af94:	f8cd 800c 	str.w	r8, [sp, #12]
 800af98:	2330      	movs	r3, #48	@ 0x30
 800af9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b138 <_svfiprintf_r+0x1e4>
 800af9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afa2:	f04f 0901 	mov.w	r9, #1
 800afa6:	4623      	mov	r3, r4
 800afa8:	469a      	mov	sl, r3
 800afaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afae:	b10a      	cbz	r2, 800afb4 <_svfiprintf_r+0x60>
 800afb0:	2a25      	cmp	r2, #37	@ 0x25
 800afb2:	d1f9      	bne.n	800afa8 <_svfiprintf_r+0x54>
 800afb4:	ebba 0b04 	subs.w	fp, sl, r4
 800afb8:	d00b      	beq.n	800afd2 <_svfiprintf_r+0x7e>
 800afba:	465b      	mov	r3, fp
 800afbc:	4622      	mov	r2, r4
 800afbe:	4629      	mov	r1, r5
 800afc0:	4638      	mov	r0, r7
 800afc2:	f7ff ff6b 	bl	800ae9c <__ssputs_r>
 800afc6:	3001      	adds	r0, #1
 800afc8:	f000 80a7 	beq.w	800b11a <_svfiprintf_r+0x1c6>
 800afcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afce:	445a      	add	r2, fp
 800afd0:	9209      	str	r2, [sp, #36]	@ 0x24
 800afd2:	f89a 3000 	ldrb.w	r3, [sl]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f000 809f 	beq.w	800b11a <_svfiprintf_r+0x1c6>
 800afdc:	2300      	movs	r3, #0
 800afde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afe6:	f10a 0a01 	add.w	sl, sl, #1
 800afea:	9304      	str	r3, [sp, #16]
 800afec:	9307      	str	r3, [sp, #28]
 800afee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aff2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aff4:	4654      	mov	r4, sl
 800aff6:	2205      	movs	r2, #5
 800aff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800affc:	484e      	ldr	r0, [pc, #312]	@ (800b138 <_svfiprintf_r+0x1e4>)
 800affe:	f7f5 fa1f 	bl	8000440 <memchr>
 800b002:	9a04      	ldr	r2, [sp, #16]
 800b004:	b9d8      	cbnz	r0, 800b03e <_svfiprintf_r+0xea>
 800b006:	06d0      	lsls	r0, r2, #27
 800b008:	bf44      	itt	mi
 800b00a:	2320      	movmi	r3, #32
 800b00c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b010:	0711      	lsls	r1, r2, #28
 800b012:	bf44      	itt	mi
 800b014:	232b      	movmi	r3, #43	@ 0x2b
 800b016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b01a:	f89a 3000 	ldrb.w	r3, [sl]
 800b01e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b020:	d015      	beq.n	800b04e <_svfiprintf_r+0xfa>
 800b022:	9a07      	ldr	r2, [sp, #28]
 800b024:	4654      	mov	r4, sl
 800b026:	2000      	movs	r0, #0
 800b028:	f04f 0c0a 	mov.w	ip, #10
 800b02c:	4621      	mov	r1, r4
 800b02e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b032:	3b30      	subs	r3, #48	@ 0x30
 800b034:	2b09      	cmp	r3, #9
 800b036:	d94b      	bls.n	800b0d0 <_svfiprintf_r+0x17c>
 800b038:	b1b0      	cbz	r0, 800b068 <_svfiprintf_r+0x114>
 800b03a:	9207      	str	r2, [sp, #28]
 800b03c:	e014      	b.n	800b068 <_svfiprintf_r+0x114>
 800b03e:	eba0 0308 	sub.w	r3, r0, r8
 800b042:	fa09 f303 	lsl.w	r3, r9, r3
 800b046:	4313      	orrs	r3, r2
 800b048:	9304      	str	r3, [sp, #16]
 800b04a:	46a2      	mov	sl, r4
 800b04c:	e7d2      	b.n	800aff4 <_svfiprintf_r+0xa0>
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	1d19      	adds	r1, r3, #4
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	9103      	str	r1, [sp, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	bfbb      	ittet	lt
 800b05a:	425b      	neglt	r3, r3
 800b05c:	f042 0202 	orrlt.w	r2, r2, #2
 800b060:	9307      	strge	r3, [sp, #28]
 800b062:	9307      	strlt	r3, [sp, #28]
 800b064:	bfb8      	it	lt
 800b066:	9204      	strlt	r2, [sp, #16]
 800b068:	7823      	ldrb	r3, [r4, #0]
 800b06a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b06c:	d10a      	bne.n	800b084 <_svfiprintf_r+0x130>
 800b06e:	7863      	ldrb	r3, [r4, #1]
 800b070:	2b2a      	cmp	r3, #42	@ 0x2a
 800b072:	d132      	bne.n	800b0da <_svfiprintf_r+0x186>
 800b074:	9b03      	ldr	r3, [sp, #12]
 800b076:	1d1a      	adds	r2, r3, #4
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	9203      	str	r2, [sp, #12]
 800b07c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b080:	3402      	adds	r4, #2
 800b082:	9305      	str	r3, [sp, #20]
 800b084:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b148 <_svfiprintf_r+0x1f4>
 800b088:	7821      	ldrb	r1, [r4, #0]
 800b08a:	2203      	movs	r2, #3
 800b08c:	4650      	mov	r0, sl
 800b08e:	f7f5 f9d7 	bl	8000440 <memchr>
 800b092:	b138      	cbz	r0, 800b0a4 <_svfiprintf_r+0x150>
 800b094:	9b04      	ldr	r3, [sp, #16]
 800b096:	eba0 000a 	sub.w	r0, r0, sl
 800b09a:	2240      	movs	r2, #64	@ 0x40
 800b09c:	4082      	lsls	r2, r0
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	3401      	adds	r4, #1
 800b0a2:	9304      	str	r3, [sp, #16]
 800b0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a8:	4824      	ldr	r0, [pc, #144]	@ (800b13c <_svfiprintf_r+0x1e8>)
 800b0aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0ae:	2206      	movs	r2, #6
 800b0b0:	f7f5 f9c6 	bl	8000440 <memchr>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d036      	beq.n	800b126 <_svfiprintf_r+0x1d2>
 800b0b8:	4b21      	ldr	r3, [pc, #132]	@ (800b140 <_svfiprintf_r+0x1ec>)
 800b0ba:	bb1b      	cbnz	r3, 800b104 <_svfiprintf_r+0x1b0>
 800b0bc:	9b03      	ldr	r3, [sp, #12]
 800b0be:	3307      	adds	r3, #7
 800b0c0:	f023 0307 	bic.w	r3, r3, #7
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	9303      	str	r3, [sp, #12]
 800b0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ca:	4433      	add	r3, r6
 800b0cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0ce:	e76a      	b.n	800afa6 <_svfiprintf_r+0x52>
 800b0d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0d4:	460c      	mov	r4, r1
 800b0d6:	2001      	movs	r0, #1
 800b0d8:	e7a8      	b.n	800b02c <_svfiprintf_r+0xd8>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	3401      	adds	r4, #1
 800b0de:	9305      	str	r3, [sp, #20]
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	f04f 0c0a 	mov.w	ip, #10
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ec:	3a30      	subs	r2, #48	@ 0x30
 800b0ee:	2a09      	cmp	r2, #9
 800b0f0:	d903      	bls.n	800b0fa <_svfiprintf_r+0x1a6>
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d0c6      	beq.n	800b084 <_svfiprintf_r+0x130>
 800b0f6:	9105      	str	r1, [sp, #20]
 800b0f8:	e7c4      	b.n	800b084 <_svfiprintf_r+0x130>
 800b0fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0fe:	4604      	mov	r4, r0
 800b100:	2301      	movs	r3, #1
 800b102:	e7f0      	b.n	800b0e6 <_svfiprintf_r+0x192>
 800b104:	ab03      	add	r3, sp, #12
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	462a      	mov	r2, r5
 800b10a:	4b0e      	ldr	r3, [pc, #56]	@ (800b144 <_svfiprintf_r+0x1f0>)
 800b10c:	a904      	add	r1, sp, #16
 800b10e:	4638      	mov	r0, r7
 800b110:	f3af 8000 	nop.w
 800b114:	1c42      	adds	r2, r0, #1
 800b116:	4606      	mov	r6, r0
 800b118:	d1d6      	bne.n	800b0c8 <_svfiprintf_r+0x174>
 800b11a:	89ab      	ldrh	r3, [r5, #12]
 800b11c:	065b      	lsls	r3, r3, #25
 800b11e:	f53f af2d 	bmi.w	800af7c <_svfiprintf_r+0x28>
 800b122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b124:	e72c      	b.n	800af80 <_svfiprintf_r+0x2c>
 800b126:	ab03      	add	r3, sp, #12
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	462a      	mov	r2, r5
 800b12c:	4b05      	ldr	r3, [pc, #20]	@ (800b144 <_svfiprintf_r+0x1f0>)
 800b12e:	a904      	add	r1, sp, #16
 800b130:	4638      	mov	r0, r7
 800b132:	f000 f9bb 	bl	800b4ac <_printf_i>
 800b136:	e7ed      	b.n	800b114 <_svfiprintf_r+0x1c0>
 800b138:	0800beb5 	.word	0x0800beb5
 800b13c:	0800bebf 	.word	0x0800bebf
 800b140:	00000000 	.word	0x00000000
 800b144:	0800ae9d 	.word	0x0800ae9d
 800b148:	0800bebb 	.word	0x0800bebb

0800b14c <__sfputc_r>:
 800b14c:	6893      	ldr	r3, [r2, #8]
 800b14e:	3b01      	subs	r3, #1
 800b150:	2b00      	cmp	r3, #0
 800b152:	b410      	push	{r4}
 800b154:	6093      	str	r3, [r2, #8]
 800b156:	da08      	bge.n	800b16a <__sfputc_r+0x1e>
 800b158:	6994      	ldr	r4, [r2, #24]
 800b15a:	42a3      	cmp	r3, r4
 800b15c:	db01      	blt.n	800b162 <__sfputc_r+0x16>
 800b15e:	290a      	cmp	r1, #10
 800b160:	d103      	bne.n	800b16a <__sfputc_r+0x1e>
 800b162:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b166:	f000 bbde 	b.w	800b926 <__swbuf_r>
 800b16a:	6813      	ldr	r3, [r2, #0]
 800b16c:	1c58      	adds	r0, r3, #1
 800b16e:	6010      	str	r0, [r2, #0]
 800b170:	7019      	strb	r1, [r3, #0]
 800b172:	4608      	mov	r0, r1
 800b174:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <__sfputs_r>:
 800b17a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17c:	4606      	mov	r6, r0
 800b17e:	460f      	mov	r7, r1
 800b180:	4614      	mov	r4, r2
 800b182:	18d5      	adds	r5, r2, r3
 800b184:	42ac      	cmp	r4, r5
 800b186:	d101      	bne.n	800b18c <__sfputs_r+0x12>
 800b188:	2000      	movs	r0, #0
 800b18a:	e007      	b.n	800b19c <__sfputs_r+0x22>
 800b18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b190:	463a      	mov	r2, r7
 800b192:	4630      	mov	r0, r6
 800b194:	f7ff ffda 	bl	800b14c <__sfputc_r>
 800b198:	1c43      	adds	r3, r0, #1
 800b19a:	d1f3      	bne.n	800b184 <__sfputs_r+0xa>
 800b19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1a0 <_vfiprintf_r>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	460d      	mov	r5, r1
 800b1a6:	b09d      	sub	sp, #116	@ 0x74
 800b1a8:	4614      	mov	r4, r2
 800b1aa:	4698      	mov	r8, r3
 800b1ac:	4606      	mov	r6, r0
 800b1ae:	b118      	cbz	r0, 800b1b8 <_vfiprintf_r+0x18>
 800b1b0:	6a03      	ldr	r3, [r0, #32]
 800b1b2:	b90b      	cbnz	r3, 800b1b8 <_vfiprintf_r+0x18>
 800b1b4:	f7ff fcb0 	bl	800ab18 <__sinit>
 800b1b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1ba:	07d9      	lsls	r1, r3, #31
 800b1bc:	d405      	bmi.n	800b1ca <_vfiprintf_r+0x2a>
 800b1be:	89ab      	ldrh	r3, [r5, #12]
 800b1c0:	059a      	lsls	r2, r3, #22
 800b1c2:	d402      	bmi.n	800b1ca <_vfiprintf_r+0x2a>
 800b1c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1c6:	f7ff fe0c 	bl	800ade2 <__retarget_lock_acquire_recursive>
 800b1ca:	89ab      	ldrh	r3, [r5, #12]
 800b1cc:	071b      	lsls	r3, r3, #28
 800b1ce:	d501      	bpl.n	800b1d4 <_vfiprintf_r+0x34>
 800b1d0:	692b      	ldr	r3, [r5, #16]
 800b1d2:	b99b      	cbnz	r3, 800b1fc <_vfiprintf_r+0x5c>
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f000 fbe4 	bl	800b9a4 <__swsetup_r>
 800b1dc:	b170      	cbz	r0, 800b1fc <_vfiprintf_r+0x5c>
 800b1de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1e0:	07dc      	lsls	r4, r3, #31
 800b1e2:	d504      	bpl.n	800b1ee <_vfiprintf_r+0x4e>
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1e8:	b01d      	add	sp, #116	@ 0x74
 800b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ee:	89ab      	ldrh	r3, [r5, #12]
 800b1f0:	0598      	lsls	r0, r3, #22
 800b1f2:	d4f7      	bmi.n	800b1e4 <_vfiprintf_r+0x44>
 800b1f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1f6:	f7ff fdf5 	bl	800ade4 <__retarget_lock_release_recursive>
 800b1fa:	e7f3      	b.n	800b1e4 <_vfiprintf_r+0x44>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800b200:	2320      	movs	r3, #32
 800b202:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b206:	f8cd 800c 	str.w	r8, [sp, #12]
 800b20a:	2330      	movs	r3, #48	@ 0x30
 800b20c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3bc <_vfiprintf_r+0x21c>
 800b210:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b214:	f04f 0901 	mov.w	r9, #1
 800b218:	4623      	mov	r3, r4
 800b21a:	469a      	mov	sl, r3
 800b21c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b220:	b10a      	cbz	r2, 800b226 <_vfiprintf_r+0x86>
 800b222:	2a25      	cmp	r2, #37	@ 0x25
 800b224:	d1f9      	bne.n	800b21a <_vfiprintf_r+0x7a>
 800b226:	ebba 0b04 	subs.w	fp, sl, r4
 800b22a:	d00b      	beq.n	800b244 <_vfiprintf_r+0xa4>
 800b22c:	465b      	mov	r3, fp
 800b22e:	4622      	mov	r2, r4
 800b230:	4629      	mov	r1, r5
 800b232:	4630      	mov	r0, r6
 800b234:	f7ff ffa1 	bl	800b17a <__sfputs_r>
 800b238:	3001      	adds	r0, #1
 800b23a:	f000 80a7 	beq.w	800b38c <_vfiprintf_r+0x1ec>
 800b23e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b240:	445a      	add	r2, fp
 800b242:	9209      	str	r2, [sp, #36]	@ 0x24
 800b244:	f89a 3000 	ldrb.w	r3, [sl]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f000 809f 	beq.w	800b38c <_vfiprintf_r+0x1ec>
 800b24e:	2300      	movs	r3, #0
 800b250:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b258:	f10a 0a01 	add.w	sl, sl, #1
 800b25c:	9304      	str	r3, [sp, #16]
 800b25e:	9307      	str	r3, [sp, #28]
 800b260:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b264:	931a      	str	r3, [sp, #104]	@ 0x68
 800b266:	4654      	mov	r4, sl
 800b268:	2205      	movs	r2, #5
 800b26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b26e:	4853      	ldr	r0, [pc, #332]	@ (800b3bc <_vfiprintf_r+0x21c>)
 800b270:	f7f5 f8e6 	bl	8000440 <memchr>
 800b274:	9a04      	ldr	r2, [sp, #16]
 800b276:	b9d8      	cbnz	r0, 800b2b0 <_vfiprintf_r+0x110>
 800b278:	06d1      	lsls	r1, r2, #27
 800b27a:	bf44      	itt	mi
 800b27c:	2320      	movmi	r3, #32
 800b27e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b282:	0713      	lsls	r3, r2, #28
 800b284:	bf44      	itt	mi
 800b286:	232b      	movmi	r3, #43	@ 0x2b
 800b288:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b28c:	f89a 3000 	ldrb.w	r3, [sl]
 800b290:	2b2a      	cmp	r3, #42	@ 0x2a
 800b292:	d015      	beq.n	800b2c0 <_vfiprintf_r+0x120>
 800b294:	9a07      	ldr	r2, [sp, #28]
 800b296:	4654      	mov	r4, sl
 800b298:	2000      	movs	r0, #0
 800b29a:	f04f 0c0a 	mov.w	ip, #10
 800b29e:	4621      	mov	r1, r4
 800b2a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2a4:	3b30      	subs	r3, #48	@ 0x30
 800b2a6:	2b09      	cmp	r3, #9
 800b2a8:	d94b      	bls.n	800b342 <_vfiprintf_r+0x1a2>
 800b2aa:	b1b0      	cbz	r0, 800b2da <_vfiprintf_r+0x13a>
 800b2ac:	9207      	str	r2, [sp, #28]
 800b2ae:	e014      	b.n	800b2da <_vfiprintf_r+0x13a>
 800b2b0:	eba0 0308 	sub.w	r3, r0, r8
 800b2b4:	fa09 f303 	lsl.w	r3, r9, r3
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	9304      	str	r3, [sp, #16]
 800b2bc:	46a2      	mov	sl, r4
 800b2be:	e7d2      	b.n	800b266 <_vfiprintf_r+0xc6>
 800b2c0:	9b03      	ldr	r3, [sp, #12]
 800b2c2:	1d19      	adds	r1, r3, #4
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	9103      	str	r1, [sp, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	bfbb      	ittet	lt
 800b2cc:	425b      	neglt	r3, r3
 800b2ce:	f042 0202 	orrlt.w	r2, r2, #2
 800b2d2:	9307      	strge	r3, [sp, #28]
 800b2d4:	9307      	strlt	r3, [sp, #28]
 800b2d6:	bfb8      	it	lt
 800b2d8:	9204      	strlt	r2, [sp, #16]
 800b2da:	7823      	ldrb	r3, [r4, #0]
 800b2dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2de:	d10a      	bne.n	800b2f6 <_vfiprintf_r+0x156>
 800b2e0:	7863      	ldrb	r3, [r4, #1]
 800b2e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2e4:	d132      	bne.n	800b34c <_vfiprintf_r+0x1ac>
 800b2e6:	9b03      	ldr	r3, [sp, #12]
 800b2e8:	1d1a      	adds	r2, r3, #4
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	9203      	str	r2, [sp, #12]
 800b2ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2f2:	3402      	adds	r4, #2
 800b2f4:	9305      	str	r3, [sp, #20]
 800b2f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3cc <_vfiprintf_r+0x22c>
 800b2fa:	7821      	ldrb	r1, [r4, #0]
 800b2fc:	2203      	movs	r2, #3
 800b2fe:	4650      	mov	r0, sl
 800b300:	f7f5 f89e 	bl	8000440 <memchr>
 800b304:	b138      	cbz	r0, 800b316 <_vfiprintf_r+0x176>
 800b306:	9b04      	ldr	r3, [sp, #16]
 800b308:	eba0 000a 	sub.w	r0, r0, sl
 800b30c:	2240      	movs	r2, #64	@ 0x40
 800b30e:	4082      	lsls	r2, r0
 800b310:	4313      	orrs	r3, r2
 800b312:	3401      	adds	r4, #1
 800b314:	9304      	str	r3, [sp, #16]
 800b316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b31a:	4829      	ldr	r0, [pc, #164]	@ (800b3c0 <_vfiprintf_r+0x220>)
 800b31c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b320:	2206      	movs	r2, #6
 800b322:	f7f5 f88d 	bl	8000440 <memchr>
 800b326:	2800      	cmp	r0, #0
 800b328:	d03f      	beq.n	800b3aa <_vfiprintf_r+0x20a>
 800b32a:	4b26      	ldr	r3, [pc, #152]	@ (800b3c4 <_vfiprintf_r+0x224>)
 800b32c:	bb1b      	cbnz	r3, 800b376 <_vfiprintf_r+0x1d6>
 800b32e:	9b03      	ldr	r3, [sp, #12]
 800b330:	3307      	adds	r3, #7
 800b332:	f023 0307 	bic.w	r3, r3, #7
 800b336:	3308      	adds	r3, #8
 800b338:	9303      	str	r3, [sp, #12]
 800b33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b33c:	443b      	add	r3, r7
 800b33e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b340:	e76a      	b.n	800b218 <_vfiprintf_r+0x78>
 800b342:	fb0c 3202 	mla	r2, ip, r2, r3
 800b346:	460c      	mov	r4, r1
 800b348:	2001      	movs	r0, #1
 800b34a:	e7a8      	b.n	800b29e <_vfiprintf_r+0xfe>
 800b34c:	2300      	movs	r3, #0
 800b34e:	3401      	adds	r4, #1
 800b350:	9305      	str	r3, [sp, #20]
 800b352:	4619      	mov	r1, r3
 800b354:	f04f 0c0a 	mov.w	ip, #10
 800b358:	4620      	mov	r0, r4
 800b35a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b35e:	3a30      	subs	r2, #48	@ 0x30
 800b360:	2a09      	cmp	r2, #9
 800b362:	d903      	bls.n	800b36c <_vfiprintf_r+0x1cc>
 800b364:	2b00      	cmp	r3, #0
 800b366:	d0c6      	beq.n	800b2f6 <_vfiprintf_r+0x156>
 800b368:	9105      	str	r1, [sp, #20]
 800b36a:	e7c4      	b.n	800b2f6 <_vfiprintf_r+0x156>
 800b36c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b370:	4604      	mov	r4, r0
 800b372:	2301      	movs	r3, #1
 800b374:	e7f0      	b.n	800b358 <_vfiprintf_r+0x1b8>
 800b376:	ab03      	add	r3, sp, #12
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	462a      	mov	r2, r5
 800b37c:	4b12      	ldr	r3, [pc, #72]	@ (800b3c8 <_vfiprintf_r+0x228>)
 800b37e:	a904      	add	r1, sp, #16
 800b380:	4630      	mov	r0, r6
 800b382:	f3af 8000 	nop.w
 800b386:	4607      	mov	r7, r0
 800b388:	1c78      	adds	r0, r7, #1
 800b38a:	d1d6      	bne.n	800b33a <_vfiprintf_r+0x19a>
 800b38c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b38e:	07d9      	lsls	r1, r3, #31
 800b390:	d405      	bmi.n	800b39e <_vfiprintf_r+0x1fe>
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	059a      	lsls	r2, r3, #22
 800b396:	d402      	bmi.n	800b39e <_vfiprintf_r+0x1fe>
 800b398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b39a:	f7ff fd23 	bl	800ade4 <__retarget_lock_release_recursive>
 800b39e:	89ab      	ldrh	r3, [r5, #12]
 800b3a0:	065b      	lsls	r3, r3, #25
 800b3a2:	f53f af1f 	bmi.w	800b1e4 <_vfiprintf_r+0x44>
 800b3a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3a8:	e71e      	b.n	800b1e8 <_vfiprintf_r+0x48>
 800b3aa:	ab03      	add	r3, sp, #12
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	462a      	mov	r2, r5
 800b3b0:	4b05      	ldr	r3, [pc, #20]	@ (800b3c8 <_vfiprintf_r+0x228>)
 800b3b2:	a904      	add	r1, sp, #16
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	f000 f879 	bl	800b4ac <_printf_i>
 800b3ba:	e7e4      	b.n	800b386 <_vfiprintf_r+0x1e6>
 800b3bc:	0800beb5 	.word	0x0800beb5
 800b3c0:	0800bebf 	.word	0x0800bebf
 800b3c4:	00000000 	.word	0x00000000
 800b3c8:	0800b17b 	.word	0x0800b17b
 800b3cc:	0800bebb 	.word	0x0800bebb

0800b3d0 <_printf_common>:
 800b3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d4:	4616      	mov	r6, r2
 800b3d6:	4698      	mov	r8, r3
 800b3d8:	688a      	ldr	r2, [r1, #8]
 800b3da:	690b      	ldr	r3, [r1, #16]
 800b3dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	bfb8      	it	lt
 800b3e4:	4613      	movlt	r3, r2
 800b3e6:	6033      	str	r3, [r6, #0]
 800b3e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	b10a      	cbz	r2, 800b3f6 <_printf_common+0x26>
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	6033      	str	r3, [r6, #0]
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	0699      	lsls	r1, r3, #26
 800b3fa:	bf42      	ittt	mi
 800b3fc:	6833      	ldrmi	r3, [r6, #0]
 800b3fe:	3302      	addmi	r3, #2
 800b400:	6033      	strmi	r3, [r6, #0]
 800b402:	6825      	ldr	r5, [r4, #0]
 800b404:	f015 0506 	ands.w	r5, r5, #6
 800b408:	d106      	bne.n	800b418 <_printf_common+0x48>
 800b40a:	f104 0a19 	add.w	sl, r4, #25
 800b40e:	68e3      	ldr	r3, [r4, #12]
 800b410:	6832      	ldr	r2, [r6, #0]
 800b412:	1a9b      	subs	r3, r3, r2
 800b414:	42ab      	cmp	r3, r5
 800b416:	dc26      	bgt.n	800b466 <_printf_common+0x96>
 800b418:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b41c:	6822      	ldr	r2, [r4, #0]
 800b41e:	3b00      	subs	r3, #0
 800b420:	bf18      	it	ne
 800b422:	2301      	movne	r3, #1
 800b424:	0692      	lsls	r2, r2, #26
 800b426:	d42b      	bmi.n	800b480 <_printf_common+0xb0>
 800b428:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b42c:	4641      	mov	r1, r8
 800b42e:	4638      	mov	r0, r7
 800b430:	47c8      	blx	r9
 800b432:	3001      	adds	r0, #1
 800b434:	d01e      	beq.n	800b474 <_printf_common+0xa4>
 800b436:	6823      	ldr	r3, [r4, #0]
 800b438:	6922      	ldr	r2, [r4, #16]
 800b43a:	f003 0306 	and.w	r3, r3, #6
 800b43e:	2b04      	cmp	r3, #4
 800b440:	bf02      	ittt	eq
 800b442:	68e5      	ldreq	r5, [r4, #12]
 800b444:	6833      	ldreq	r3, [r6, #0]
 800b446:	1aed      	subeq	r5, r5, r3
 800b448:	68a3      	ldr	r3, [r4, #8]
 800b44a:	bf0c      	ite	eq
 800b44c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b450:	2500      	movne	r5, #0
 800b452:	4293      	cmp	r3, r2
 800b454:	bfc4      	itt	gt
 800b456:	1a9b      	subgt	r3, r3, r2
 800b458:	18ed      	addgt	r5, r5, r3
 800b45a:	2600      	movs	r6, #0
 800b45c:	341a      	adds	r4, #26
 800b45e:	42b5      	cmp	r5, r6
 800b460:	d11a      	bne.n	800b498 <_printf_common+0xc8>
 800b462:	2000      	movs	r0, #0
 800b464:	e008      	b.n	800b478 <_printf_common+0xa8>
 800b466:	2301      	movs	r3, #1
 800b468:	4652      	mov	r2, sl
 800b46a:	4641      	mov	r1, r8
 800b46c:	4638      	mov	r0, r7
 800b46e:	47c8      	blx	r9
 800b470:	3001      	adds	r0, #1
 800b472:	d103      	bne.n	800b47c <_printf_common+0xac>
 800b474:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b47c:	3501      	adds	r5, #1
 800b47e:	e7c6      	b.n	800b40e <_printf_common+0x3e>
 800b480:	18e1      	adds	r1, r4, r3
 800b482:	1c5a      	adds	r2, r3, #1
 800b484:	2030      	movs	r0, #48	@ 0x30
 800b486:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b48a:	4422      	add	r2, r4
 800b48c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b490:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b494:	3302      	adds	r3, #2
 800b496:	e7c7      	b.n	800b428 <_printf_common+0x58>
 800b498:	2301      	movs	r3, #1
 800b49a:	4622      	mov	r2, r4
 800b49c:	4641      	mov	r1, r8
 800b49e:	4638      	mov	r0, r7
 800b4a0:	47c8      	blx	r9
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	d0e6      	beq.n	800b474 <_printf_common+0xa4>
 800b4a6:	3601      	adds	r6, #1
 800b4a8:	e7d9      	b.n	800b45e <_printf_common+0x8e>
	...

0800b4ac <_printf_i>:
 800b4ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b0:	7e0f      	ldrb	r7, [r1, #24]
 800b4b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b4b4:	2f78      	cmp	r7, #120	@ 0x78
 800b4b6:	4691      	mov	r9, r2
 800b4b8:	4680      	mov	r8, r0
 800b4ba:	460c      	mov	r4, r1
 800b4bc:	469a      	mov	sl, r3
 800b4be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b4c2:	d807      	bhi.n	800b4d4 <_printf_i+0x28>
 800b4c4:	2f62      	cmp	r7, #98	@ 0x62
 800b4c6:	d80a      	bhi.n	800b4de <_printf_i+0x32>
 800b4c8:	2f00      	cmp	r7, #0
 800b4ca:	f000 80d2 	beq.w	800b672 <_printf_i+0x1c6>
 800b4ce:	2f58      	cmp	r7, #88	@ 0x58
 800b4d0:	f000 80b9 	beq.w	800b646 <_printf_i+0x19a>
 800b4d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b4dc:	e03a      	b.n	800b554 <_printf_i+0xa8>
 800b4de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4e2:	2b15      	cmp	r3, #21
 800b4e4:	d8f6      	bhi.n	800b4d4 <_printf_i+0x28>
 800b4e6:	a101      	add	r1, pc, #4	@ (adr r1, 800b4ec <_printf_i+0x40>)
 800b4e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4ec:	0800b545 	.word	0x0800b545
 800b4f0:	0800b559 	.word	0x0800b559
 800b4f4:	0800b4d5 	.word	0x0800b4d5
 800b4f8:	0800b4d5 	.word	0x0800b4d5
 800b4fc:	0800b4d5 	.word	0x0800b4d5
 800b500:	0800b4d5 	.word	0x0800b4d5
 800b504:	0800b559 	.word	0x0800b559
 800b508:	0800b4d5 	.word	0x0800b4d5
 800b50c:	0800b4d5 	.word	0x0800b4d5
 800b510:	0800b4d5 	.word	0x0800b4d5
 800b514:	0800b4d5 	.word	0x0800b4d5
 800b518:	0800b659 	.word	0x0800b659
 800b51c:	0800b583 	.word	0x0800b583
 800b520:	0800b613 	.word	0x0800b613
 800b524:	0800b4d5 	.word	0x0800b4d5
 800b528:	0800b4d5 	.word	0x0800b4d5
 800b52c:	0800b67b 	.word	0x0800b67b
 800b530:	0800b4d5 	.word	0x0800b4d5
 800b534:	0800b583 	.word	0x0800b583
 800b538:	0800b4d5 	.word	0x0800b4d5
 800b53c:	0800b4d5 	.word	0x0800b4d5
 800b540:	0800b61b 	.word	0x0800b61b
 800b544:	6833      	ldr	r3, [r6, #0]
 800b546:	1d1a      	adds	r2, r3, #4
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	6032      	str	r2, [r6, #0]
 800b54c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b550:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b554:	2301      	movs	r3, #1
 800b556:	e09d      	b.n	800b694 <_printf_i+0x1e8>
 800b558:	6833      	ldr	r3, [r6, #0]
 800b55a:	6820      	ldr	r0, [r4, #0]
 800b55c:	1d19      	adds	r1, r3, #4
 800b55e:	6031      	str	r1, [r6, #0]
 800b560:	0606      	lsls	r6, r0, #24
 800b562:	d501      	bpl.n	800b568 <_printf_i+0xbc>
 800b564:	681d      	ldr	r5, [r3, #0]
 800b566:	e003      	b.n	800b570 <_printf_i+0xc4>
 800b568:	0645      	lsls	r5, r0, #25
 800b56a:	d5fb      	bpl.n	800b564 <_printf_i+0xb8>
 800b56c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b570:	2d00      	cmp	r5, #0
 800b572:	da03      	bge.n	800b57c <_printf_i+0xd0>
 800b574:	232d      	movs	r3, #45	@ 0x2d
 800b576:	426d      	negs	r5, r5
 800b578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b57c:	4859      	ldr	r0, [pc, #356]	@ (800b6e4 <_printf_i+0x238>)
 800b57e:	230a      	movs	r3, #10
 800b580:	e011      	b.n	800b5a6 <_printf_i+0xfa>
 800b582:	6821      	ldr	r1, [r4, #0]
 800b584:	6833      	ldr	r3, [r6, #0]
 800b586:	0608      	lsls	r0, r1, #24
 800b588:	f853 5b04 	ldr.w	r5, [r3], #4
 800b58c:	d402      	bmi.n	800b594 <_printf_i+0xe8>
 800b58e:	0649      	lsls	r1, r1, #25
 800b590:	bf48      	it	mi
 800b592:	b2ad      	uxthmi	r5, r5
 800b594:	2f6f      	cmp	r7, #111	@ 0x6f
 800b596:	4853      	ldr	r0, [pc, #332]	@ (800b6e4 <_printf_i+0x238>)
 800b598:	6033      	str	r3, [r6, #0]
 800b59a:	bf14      	ite	ne
 800b59c:	230a      	movne	r3, #10
 800b59e:	2308      	moveq	r3, #8
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b5a6:	6866      	ldr	r6, [r4, #4]
 800b5a8:	60a6      	str	r6, [r4, #8]
 800b5aa:	2e00      	cmp	r6, #0
 800b5ac:	bfa2      	ittt	ge
 800b5ae:	6821      	ldrge	r1, [r4, #0]
 800b5b0:	f021 0104 	bicge.w	r1, r1, #4
 800b5b4:	6021      	strge	r1, [r4, #0]
 800b5b6:	b90d      	cbnz	r5, 800b5bc <_printf_i+0x110>
 800b5b8:	2e00      	cmp	r6, #0
 800b5ba:	d04b      	beq.n	800b654 <_printf_i+0x1a8>
 800b5bc:	4616      	mov	r6, r2
 800b5be:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5c2:	fb03 5711 	mls	r7, r3, r1, r5
 800b5c6:	5dc7      	ldrb	r7, [r0, r7]
 800b5c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5cc:	462f      	mov	r7, r5
 800b5ce:	42bb      	cmp	r3, r7
 800b5d0:	460d      	mov	r5, r1
 800b5d2:	d9f4      	bls.n	800b5be <_printf_i+0x112>
 800b5d4:	2b08      	cmp	r3, #8
 800b5d6:	d10b      	bne.n	800b5f0 <_printf_i+0x144>
 800b5d8:	6823      	ldr	r3, [r4, #0]
 800b5da:	07df      	lsls	r7, r3, #31
 800b5dc:	d508      	bpl.n	800b5f0 <_printf_i+0x144>
 800b5de:	6923      	ldr	r3, [r4, #16]
 800b5e0:	6861      	ldr	r1, [r4, #4]
 800b5e2:	4299      	cmp	r1, r3
 800b5e4:	bfde      	ittt	le
 800b5e6:	2330      	movle	r3, #48	@ 0x30
 800b5e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b5f0:	1b92      	subs	r2, r2, r6
 800b5f2:	6122      	str	r2, [r4, #16]
 800b5f4:	f8cd a000 	str.w	sl, [sp]
 800b5f8:	464b      	mov	r3, r9
 800b5fa:	aa03      	add	r2, sp, #12
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	4640      	mov	r0, r8
 800b600:	f7ff fee6 	bl	800b3d0 <_printf_common>
 800b604:	3001      	adds	r0, #1
 800b606:	d14a      	bne.n	800b69e <_printf_i+0x1f2>
 800b608:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b60c:	b004      	add	sp, #16
 800b60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	f043 0320 	orr.w	r3, r3, #32
 800b618:	6023      	str	r3, [r4, #0]
 800b61a:	4833      	ldr	r0, [pc, #204]	@ (800b6e8 <_printf_i+0x23c>)
 800b61c:	2778      	movs	r7, #120	@ 0x78
 800b61e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	6831      	ldr	r1, [r6, #0]
 800b626:	061f      	lsls	r7, r3, #24
 800b628:	f851 5b04 	ldr.w	r5, [r1], #4
 800b62c:	d402      	bmi.n	800b634 <_printf_i+0x188>
 800b62e:	065f      	lsls	r7, r3, #25
 800b630:	bf48      	it	mi
 800b632:	b2ad      	uxthmi	r5, r5
 800b634:	6031      	str	r1, [r6, #0]
 800b636:	07d9      	lsls	r1, r3, #31
 800b638:	bf44      	itt	mi
 800b63a:	f043 0320 	orrmi.w	r3, r3, #32
 800b63e:	6023      	strmi	r3, [r4, #0]
 800b640:	b11d      	cbz	r5, 800b64a <_printf_i+0x19e>
 800b642:	2310      	movs	r3, #16
 800b644:	e7ac      	b.n	800b5a0 <_printf_i+0xf4>
 800b646:	4827      	ldr	r0, [pc, #156]	@ (800b6e4 <_printf_i+0x238>)
 800b648:	e7e9      	b.n	800b61e <_printf_i+0x172>
 800b64a:	6823      	ldr	r3, [r4, #0]
 800b64c:	f023 0320 	bic.w	r3, r3, #32
 800b650:	6023      	str	r3, [r4, #0]
 800b652:	e7f6      	b.n	800b642 <_printf_i+0x196>
 800b654:	4616      	mov	r6, r2
 800b656:	e7bd      	b.n	800b5d4 <_printf_i+0x128>
 800b658:	6833      	ldr	r3, [r6, #0]
 800b65a:	6825      	ldr	r5, [r4, #0]
 800b65c:	6961      	ldr	r1, [r4, #20]
 800b65e:	1d18      	adds	r0, r3, #4
 800b660:	6030      	str	r0, [r6, #0]
 800b662:	062e      	lsls	r6, r5, #24
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	d501      	bpl.n	800b66c <_printf_i+0x1c0>
 800b668:	6019      	str	r1, [r3, #0]
 800b66a:	e002      	b.n	800b672 <_printf_i+0x1c6>
 800b66c:	0668      	lsls	r0, r5, #25
 800b66e:	d5fb      	bpl.n	800b668 <_printf_i+0x1bc>
 800b670:	8019      	strh	r1, [r3, #0]
 800b672:	2300      	movs	r3, #0
 800b674:	6123      	str	r3, [r4, #16]
 800b676:	4616      	mov	r6, r2
 800b678:	e7bc      	b.n	800b5f4 <_printf_i+0x148>
 800b67a:	6833      	ldr	r3, [r6, #0]
 800b67c:	1d1a      	adds	r2, r3, #4
 800b67e:	6032      	str	r2, [r6, #0]
 800b680:	681e      	ldr	r6, [r3, #0]
 800b682:	6862      	ldr	r2, [r4, #4]
 800b684:	2100      	movs	r1, #0
 800b686:	4630      	mov	r0, r6
 800b688:	f7f4 feda 	bl	8000440 <memchr>
 800b68c:	b108      	cbz	r0, 800b692 <_printf_i+0x1e6>
 800b68e:	1b80      	subs	r0, r0, r6
 800b690:	6060      	str	r0, [r4, #4]
 800b692:	6863      	ldr	r3, [r4, #4]
 800b694:	6123      	str	r3, [r4, #16]
 800b696:	2300      	movs	r3, #0
 800b698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b69c:	e7aa      	b.n	800b5f4 <_printf_i+0x148>
 800b69e:	6923      	ldr	r3, [r4, #16]
 800b6a0:	4632      	mov	r2, r6
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	47d0      	blx	sl
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	d0ad      	beq.n	800b608 <_printf_i+0x15c>
 800b6ac:	6823      	ldr	r3, [r4, #0]
 800b6ae:	079b      	lsls	r3, r3, #30
 800b6b0:	d413      	bmi.n	800b6da <_printf_i+0x22e>
 800b6b2:	68e0      	ldr	r0, [r4, #12]
 800b6b4:	9b03      	ldr	r3, [sp, #12]
 800b6b6:	4298      	cmp	r0, r3
 800b6b8:	bfb8      	it	lt
 800b6ba:	4618      	movlt	r0, r3
 800b6bc:	e7a6      	b.n	800b60c <_printf_i+0x160>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	4632      	mov	r2, r6
 800b6c2:	4649      	mov	r1, r9
 800b6c4:	4640      	mov	r0, r8
 800b6c6:	47d0      	blx	sl
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	d09d      	beq.n	800b608 <_printf_i+0x15c>
 800b6cc:	3501      	adds	r5, #1
 800b6ce:	68e3      	ldr	r3, [r4, #12]
 800b6d0:	9903      	ldr	r1, [sp, #12]
 800b6d2:	1a5b      	subs	r3, r3, r1
 800b6d4:	42ab      	cmp	r3, r5
 800b6d6:	dcf2      	bgt.n	800b6be <_printf_i+0x212>
 800b6d8:	e7eb      	b.n	800b6b2 <_printf_i+0x206>
 800b6da:	2500      	movs	r5, #0
 800b6dc:	f104 0619 	add.w	r6, r4, #25
 800b6e0:	e7f5      	b.n	800b6ce <_printf_i+0x222>
 800b6e2:	bf00      	nop
 800b6e4:	0800bec6 	.word	0x0800bec6
 800b6e8:	0800bed7 	.word	0x0800bed7

0800b6ec <__sflush_r>:
 800b6ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f4:	0716      	lsls	r6, r2, #28
 800b6f6:	4605      	mov	r5, r0
 800b6f8:	460c      	mov	r4, r1
 800b6fa:	d454      	bmi.n	800b7a6 <__sflush_r+0xba>
 800b6fc:	684b      	ldr	r3, [r1, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	dc02      	bgt.n	800b708 <__sflush_r+0x1c>
 800b702:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b704:	2b00      	cmp	r3, #0
 800b706:	dd48      	ble.n	800b79a <__sflush_r+0xae>
 800b708:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b70a:	2e00      	cmp	r6, #0
 800b70c:	d045      	beq.n	800b79a <__sflush_r+0xae>
 800b70e:	2300      	movs	r3, #0
 800b710:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b714:	682f      	ldr	r7, [r5, #0]
 800b716:	6a21      	ldr	r1, [r4, #32]
 800b718:	602b      	str	r3, [r5, #0]
 800b71a:	d030      	beq.n	800b77e <__sflush_r+0x92>
 800b71c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b71e:	89a3      	ldrh	r3, [r4, #12]
 800b720:	0759      	lsls	r1, r3, #29
 800b722:	d505      	bpl.n	800b730 <__sflush_r+0x44>
 800b724:	6863      	ldr	r3, [r4, #4]
 800b726:	1ad2      	subs	r2, r2, r3
 800b728:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b72a:	b10b      	cbz	r3, 800b730 <__sflush_r+0x44>
 800b72c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b72e:	1ad2      	subs	r2, r2, r3
 800b730:	2300      	movs	r3, #0
 800b732:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b734:	6a21      	ldr	r1, [r4, #32]
 800b736:	4628      	mov	r0, r5
 800b738:	47b0      	blx	r6
 800b73a:	1c43      	adds	r3, r0, #1
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	d106      	bne.n	800b74e <__sflush_r+0x62>
 800b740:	6829      	ldr	r1, [r5, #0]
 800b742:	291d      	cmp	r1, #29
 800b744:	d82b      	bhi.n	800b79e <__sflush_r+0xb2>
 800b746:	4a2a      	ldr	r2, [pc, #168]	@ (800b7f0 <__sflush_r+0x104>)
 800b748:	410a      	asrs	r2, r1
 800b74a:	07d6      	lsls	r6, r2, #31
 800b74c:	d427      	bmi.n	800b79e <__sflush_r+0xb2>
 800b74e:	2200      	movs	r2, #0
 800b750:	6062      	str	r2, [r4, #4]
 800b752:	04d9      	lsls	r1, r3, #19
 800b754:	6922      	ldr	r2, [r4, #16]
 800b756:	6022      	str	r2, [r4, #0]
 800b758:	d504      	bpl.n	800b764 <__sflush_r+0x78>
 800b75a:	1c42      	adds	r2, r0, #1
 800b75c:	d101      	bne.n	800b762 <__sflush_r+0x76>
 800b75e:	682b      	ldr	r3, [r5, #0]
 800b760:	b903      	cbnz	r3, 800b764 <__sflush_r+0x78>
 800b762:	6560      	str	r0, [r4, #84]	@ 0x54
 800b764:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b766:	602f      	str	r7, [r5, #0]
 800b768:	b1b9      	cbz	r1, 800b79a <__sflush_r+0xae>
 800b76a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b76e:	4299      	cmp	r1, r3
 800b770:	d002      	beq.n	800b778 <__sflush_r+0x8c>
 800b772:	4628      	mov	r0, r5
 800b774:	f7ff fb48 	bl	800ae08 <_free_r>
 800b778:	2300      	movs	r3, #0
 800b77a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b77c:	e00d      	b.n	800b79a <__sflush_r+0xae>
 800b77e:	2301      	movs	r3, #1
 800b780:	4628      	mov	r0, r5
 800b782:	47b0      	blx	r6
 800b784:	4602      	mov	r2, r0
 800b786:	1c50      	adds	r0, r2, #1
 800b788:	d1c9      	bne.n	800b71e <__sflush_r+0x32>
 800b78a:	682b      	ldr	r3, [r5, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d0c6      	beq.n	800b71e <__sflush_r+0x32>
 800b790:	2b1d      	cmp	r3, #29
 800b792:	d001      	beq.n	800b798 <__sflush_r+0xac>
 800b794:	2b16      	cmp	r3, #22
 800b796:	d11e      	bne.n	800b7d6 <__sflush_r+0xea>
 800b798:	602f      	str	r7, [r5, #0]
 800b79a:	2000      	movs	r0, #0
 800b79c:	e022      	b.n	800b7e4 <__sflush_r+0xf8>
 800b79e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7a2:	b21b      	sxth	r3, r3
 800b7a4:	e01b      	b.n	800b7de <__sflush_r+0xf2>
 800b7a6:	690f      	ldr	r7, [r1, #16]
 800b7a8:	2f00      	cmp	r7, #0
 800b7aa:	d0f6      	beq.n	800b79a <__sflush_r+0xae>
 800b7ac:	0793      	lsls	r3, r2, #30
 800b7ae:	680e      	ldr	r6, [r1, #0]
 800b7b0:	bf08      	it	eq
 800b7b2:	694b      	ldreq	r3, [r1, #20]
 800b7b4:	600f      	str	r7, [r1, #0]
 800b7b6:	bf18      	it	ne
 800b7b8:	2300      	movne	r3, #0
 800b7ba:	eba6 0807 	sub.w	r8, r6, r7
 800b7be:	608b      	str	r3, [r1, #8]
 800b7c0:	f1b8 0f00 	cmp.w	r8, #0
 800b7c4:	dde9      	ble.n	800b79a <__sflush_r+0xae>
 800b7c6:	6a21      	ldr	r1, [r4, #32]
 800b7c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b7ca:	4643      	mov	r3, r8
 800b7cc:	463a      	mov	r2, r7
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	47b0      	blx	r6
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	dc08      	bgt.n	800b7e8 <__sflush_r+0xfc>
 800b7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7de:	81a3      	strh	r3, [r4, #12]
 800b7e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7e8:	4407      	add	r7, r0
 800b7ea:	eba8 0800 	sub.w	r8, r8, r0
 800b7ee:	e7e7      	b.n	800b7c0 <__sflush_r+0xd4>
 800b7f0:	dfbffffe 	.word	0xdfbffffe

0800b7f4 <_fflush_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	690b      	ldr	r3, [r1, #16]
 800b7f8:	4605      	mov	r5, r0
 800b7fa:	460c      	mov	r4, r1
 800b7fc:	b913      	cbnz	r3, 800b804 <_fflush_r+0x10>
 800b7fe:	2500      	movs	r5, #0
 800b800:	4628      	mov	r0, r5
 800b802:	bd38      	pop	{r3, r4, r5, pc}
 800b804:	b118      	cbz	r0, 800b80e <_fflush_r+0x1a>
 800b806:	6a03      	ldr	r3, [r0, #32]
 800b808:	b90b      	cbnz	r3, 800b80e <_fflush_r+0x1a>
 800b80a:	f7ff f985 	bl	800ab18 <__sinit>
 800b80e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d0f3      	beq.n	800b7fe <_fflush_r+0xa>
 800b816:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b818:	07d0      	lsls	r0, r2, #31
 800b81a:	d404      	bmi.n	800b826 <_fflush_r+0x32>
 800b81c:	0599      	lsls	r1, r3, #22
 800b81e:	d402      	bmi.n	800b826 <_fflush_r+0x32>
 800b820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b822:	f7ff fade 	bl	800ade2 <__retarget_lock_acquire_recursive>
 800b826:	4628      	mov	r0, r5
 800b828:	4621      	mov	r1, r4
 800b82a:	f7ff ff5f 	bl	800b6ec <__sflush_r>
 800b82e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b830:	07da      	lsls	r2, r3, #31
 800b832:	4605      	mov	r5, r0
 800b834:	d4e4      	bmi.n	800b800 <_fflush_r+0xc>
 800b836:	89a3      	ldrh	r3, [r4, #12]
 800b838:	059b      	lsls	r3, r3, #22
 800b83a:	d4e1      	bmi.n	800b800 <_fflush_r+0xc>
 800b83c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b83e:	f7ff fad1 	bl	800ade4 <__retarget_lock_release_recursive>
 800b842:	e7dd      	b.n	800b800 <_fflush_r+0xc>

0800b844 <__sread>:
 800b844:	b510      	push	{r4, lr}
 800b846:	460c      	mov	r4, r1
 800b848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b84c:	f000 f9c0 	bl	800bbd0 <_read_r>
 800b850:	2800      	cmp	r0, #0
 800b852:	bfab      	itete	ge
 800b854:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b856:	89a3      	ldrhlt	r3, [r4, #12]
 800b858:	181b      	addge	r3, r3, r0
 800b85a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b85e:	bfac      	ite	ge
 800b860:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b862:	81a3      	strhlt	r3, [r4, #12]
 800b864:	bd10      	pop	{r4, pc}

0800b866 <__swrite>:
 800b866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b86a:	461f      	mov	r7, r3
 800b86c:	898b      	ldrh	r3, [r1, #12]
 800b86e:	05db      	lsls	r3, r3, #23
 800b870:	4605      	mov	r5, r0
 800b872:	460c      	mov	r4, r1
 800b874:	4616      	mov	r6, r2
 800b876:	d505      	bpl.n	800b884 <__swrite+0x1e>
 800b878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b87c:	2302      	movs	r3, #2
 800b87e:	2200      	movs	r2, #0
 800b880:	f000 f994 	bl	800bbac <_lseek_r>
 800b884:	89a3      	ldrh	r3, [r4, #12]
 800b886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b88a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b88e:	81a3      	strh	r3, [r4, #12]
 800b890:	4632      	mov	r2, r6
 800b892:	463b      	mov	r3, r7
 800b894:	4628      	mov	r0, r5
 800b896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b89a:	f000 b9ab 	b.w	800bbf4 <_write_r>

0800b89e <__sseek>:
 800b89e:	b510      	push	{r4, lr}
 800b8a0:	460c      	mov	r4, r1
 800b8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a6:	f000 f981 	bl	800bbac <_lseek_r>
 800b8aa:	1c43      	adds	r3, r0, #1
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	bf15      	itete	ne
 800b8b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b8b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b8b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b8ba:	81a3      	strheq	r3, [r4, #12]
 800b8bc:	bf18      	it	ne
 800b8be:	81a3      	strhne	r3, [r4, #12]
 800b8c0:	bd10      	pop	{r4, pc}

0800b8c2 <__sclose>:
 800b8c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8c6:	f000 b93f 	b.w	800bb48 <_close_r>

0800b8ca <_realloc_r>:
 800b8ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ce:	4680      	mov	r8, r0
 800b8d0:	4615      	mov	r5, r2
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	b921      	cbnz	r1, 800b8e0 <_realloc_r+0x16>
 800b8d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8da:	4611      	mov	r1, r2
 800b8dc:	f7fe bfd0 	b.w	800a880 <_malloc_r>
 800b8e0:	b92a      	cbnz	r2, 800b8ee <_realloc_r+0x24>
 800b8e2:	f7ff fa91 	bl	800ae08 <_free_r>
 800b8e6:	2400      	movs	r4, #0
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ee:	f000 f993 	bl	800bc18 <_malloc_usable_size_r>
 800b8f2:	4285      	cmp	r5, r0
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	d802      	bhi.n	800b8fe <_realloc_r+0x34>
 800b8f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b8fc:	d8f4      	bhi.n	800b8e8 <_realloc_r+0x1e>
 800b8fe:	4629      	mov	r1, r5
 800b900:	4640      	mov	r0, r8
 800b902:	f7fe ffbd 	bl	800a880 <_malloc_r>
 800b906:	4607      	mov	r7, r0
 800b908:	2800      	cmp	r0, #0
 800b90a:	d0ec      	beq.n	800b8e6 <_realloc_r+0x1c>
 800b90c:	42b5      	cmp	r5, r6
 800b90e:	462a      	mov	r2, r5
 800b910:	4621      	mov	r1, r4
 800b912:	bf28      	it	cs
 800b914:	4632      	movcs	r2, r6
 800b916:	f7ff fa69 	bl	800adec <memcpy>
 800b91a:	4621      	mov	r1, r4
 800b91c:	4640      	mov	r0, r8
 800b91e:	f7ff fa73 	bl	800ae08 <_free_r>
 800b922:	463c      	mov	r4, r7
 800b924:	e7e0      	b.n	800b8e8 <_realloc_r+0x1e>

0800b926 <__swbuf_r>:
 800b926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b928:	460e      	mov	r6, r1
 800b92a:	4614      	mov	r4, r2
 800b92c:	4605      	mov	r5, r0
 800b92e:	b118      	cbz	r0, 800b938 <__swbuf_r+0x12>
 800b930:	6a03      	ldr	r3, [r0, #32]
 800b932:	b90b      	cbnz	r3, 800b938 <__swbuf_r+0x12>
 800b934:	f7ff f8f0 	bl	800ab18 <__sinit>
 800b938:	69a3      	ldr	r3, [r4, #24]
 800b93a:	60a3      	str	r3, [r4, #8]
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	071a      	lsls	r2, r3, #28
 800b940:	d501      	bpl.n	800b946 <__swbuf_r+0x20>
 800b942:	6923      	ldr	r3, [r4, #16]
 800b944:	b943      	cbnz	r3, 800b958 <__swbuf_r+0x32>
 800b946:	4621      	mov	r1, r4
 800b948:	4628      	mov	r0, r5
 800b94a:	f000 f82b 	bl	800b9a4 <__swsetup_r>
 800b94e:	b118      	cbz	r0, 800b958 <__swbuf_r+0x32>
 800b950:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b954:	4638      	mov	r0, r7
 800b956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b958:	6823      	ldr	r3, [r4, #0]
 800b95a:	6922      	ldr	r2, [r4, #16]
 800b95c:	1a98      	subs	r0, r3, r2
 800b95e:	6963      	ldr	r3, [r4, #20]
 800b960:	b2f6      	uxtb	r6, r6
 800b962:	4283      	cmp	r3, r0
 800b964:	4637      	mov	r7, r6
 800b966:	dc05      	bgt.n	800b974 <__swbuf_r+0x4e>
 800b968:	4621      	mov	r1, r4
 800b96a:	4628      	mov	r0, r5
 800b96c:	f7ff ff42 	bl	800b7f4 <_fflush_r>
 800b970:	2800      	cmp	r0, #0
 800b972:	d1ed      	bne.n	800b950 <__swbuf_r+0x2a>
 800b974:	68a3      	ldr	r3, [r4, #8]
 800b976:	3b01      	subs	r3, #1
 800b978:	60a3      	str	r3, [r4, #8]
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	1c5a      	adds	r2, r3, #1
 800b97e:	6022      	str	r2, [r4, #0]
 800b980:	701e      	strb	r6, [r3, #0]
 800b982:	6962      	ldr	r2, [r4, #20]
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	429a      	cmp	r2, r3
 800b988:	d004      	beq.n	800b994 <__swbuf_r+0x6e>
 800b98a:	89a3      	ldrh	r3, [r4, #12]
 800b98c:	07db      	lsls	r3, r3, #31
 800b98e:	d5e1      	bpl.n	800b954 <__swbuf_r+0x2e>
 800b990:	2e0a      	cmp	r6, #10
 800b992:	d1df      	bne.n	800b954 <__swbuf_r+0x2e>
 800b994:	4621      	mov	r1, r4
 800b996:	4628      	mov	r0, r5
 800b998:	f7ff ff2c 	bl	800b7f4 <_fflush_r>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d0d9      	beq.n	800b954 <__swbuf_r+0x2e>
 800b9a0:	e7d6      	b.n	800b950 <__swbuf_r+0x2a>
	...

0800b9a4 <__swsetup_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4b29      	ldr	r3, [pc, #164]	@ (800ba4c <__swsetup_r+0xa8>)
 800b9a8:	4605      	mov	r5, r0
 800b9aa:	6818      	ldr	r0, [r3, #0]
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	b118      	cbz	r0, 800b9b8 <__swsetup_r+0x14>
 800b9b0:	6a03      	ldr	r3, [r0, #32]
 800b9b2:	b90b      	cbnz	r3, 800b9b8 <__swsetup_r+0x14>
 800b9b4:	f7ff f8b0 	bl	800ab18 <__sinit>
 800b9b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9bc:	0719      	lsls	r1, r3, #28
 800b9be:	d422      	bmi.n	800ba06 <__swsetup_r+0x62>
 800b9c0:	06da      	lsls	r2, r3, #27
 800b9c2:	d407      	bmi.n	800b9d4 <__swsetup_r+0x30>
 800b9c4:	2209      	movs	r2, #9
 800b9c6:	602a      	str	r2, [r5, #0]
 800b9c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9cc:	81a3      	strh	r3, [r4, #12]
 800b9ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9d2:	e033      	b.n	800ba3c <__swsetup_r+0x98>
 800b9d4:	0758      	lsls	r0, r3, #29
 800b9d6:	d512      	bpl.n	800b9fe <__swsetup_r+0x5a>
 800b9d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9da:	b141      	cbz	r1, 800b9ee <__swsetup_r+0x4a>
 800b9dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9e0:	4299      	cmp	r1, r3
 800b9e2:	d002      	beq.n	800b9ea <__swsetup_r+0x46>
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	f7ff fa0f 	bl	800ae08 <_free_r>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9ee:	89a3      	ldrh	r3, [r4, #12]
 800b9f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9f4:	81a3      	strh	r3, [r4, #12]
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	6063      	str	r3, [r4, #4]
 800b9fa:	6923      	ldr	r3, [r4, #16]
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	89a3      	ldrh	r3, [r4, #12]
 800ba00:	f043 0308 	orr.w	r3, r3, #8
 800ba04:	81a3      	strh	r3, [r4, #12]
 800ba06:	6923      	ldr	r3, [r4, #16]
 800ba08:	b94b      	cbnz	r3, 800ba1e <__swsetup_r+0x7a>
 800ba0a:	89a3      	ldrh	r3, [r4, #12]
 800ba0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba14:	d003      	beq.n	800ba1e <__swsetup_r+0x7a>
 800ba16:	4621      	mov	r1, r4
 800ba18:	4628      	mov	r0, r5
 800ba1a:	f000 f83f 	bl	800ba9c <__smakebuf_r>
 800ba1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba22:	f013 0201 	ands.w	r2, r3, #1
 800ba26:	d00a      	beq.n	800ba3e <__swsetup_r+0x9a>
 800ba28:	2200      	movs	r2, #0
 800ba2a:	60a2      	str	r2, [r4, #8]
 800ba2c:	6962      	ldr	r2, [r4, #20]
 800ba2e:	4252      	negs	r2, r2
 800ba30:	61a2      	str	r2, [r4, #24]
 800ba32:	6922      	ldr	r2, [r4, #16]
 800ba34:	b942      	cbnz	r2, 800ba48 <__swsetup_r+0xa4>
 800ba36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba3a:	d1c5      	bne.n	800b9c8 <__swsetup_r+0x24>
 800ba3c:	bd38      	pop	{r3, r4, r5, pc}
 800ba3e:	0799      	lsls	r1, r3, #30
 800ba40:	bf58      	it	pl
 800ba42:	6962      	ldrpl	r2, [r4, #20]
 800ba44:	60a2      	str	r2, [r4, #8]
 800ba46:	e7f4      	b.n	800ba32 <__swsetup_r+0x8e>
 800ba48:	2000      	movs	r0, #0
 800ba4a:	e7f7      	b.n	800ba3c <__swsetup_r+0x98>
 800ba4c:	2000002c 	.word	0x2000002c

0800ba50 <__swhatbuf_r>:
 800ba50:	b570      	push	{r4, r5, r6, lr}
 800ba52:	460c      	mov	r4, r1
 800ba54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba58:	2900      	cmp	r1, #0
 800ba5a:	b096      	sub	sp, #88	@ 0x58
 800ba5c:	4615      	mov	r5, r2
 800ba5e:	461e      	mov	r6, r3
 800ba60:	da0d      	bge.n	800ba7e <__swhatbuf_r+0x2e>
 800ba62:	89a3      	ldrh	r3, [r4, #12]
 800ba64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba68:	f04f 0100 	mov.w	r1, #0
 800ba6c:	bf14      	ite	ne
 800ba6e:	2340      	movne	r3, #64	@ 0x40
 800ba70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba74:	2000      	movs	r0, #0
 800ba76:	6031      	str	r1, [r6, #0]
 800ba78:	602b      	str	r3, [r5, #0]
 800ba7a:	b016      	add	sp, #88	@ 0x58
 800ba7c:	bd70      	pop	{r4, r5, r6, pc}
 800ba7e:	466a      	mov	r2, sp
 800ba80:	f000 f872 	bl	800bb68 <_fstat_r>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	dbec      	blt.n	800ba62 <__swhatbuf_r+0x12>
 800ba88:	9901      	ldr	r1, [sp, #4]
 800ba8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba92:	4259      	negs	r1, r3
 800ba94:	4159      	adcs	r1, r3
 800ba96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba9a:	e7eb      	b.n	800ba74 <__swhatbuf_r+0x24>

0800ba9c <__smakebuf_r>:
 800ba9c:	898b      	ldrh	r3, [r1, #12]
 800ba9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baa0:	079d      	lsls	r5, r3, #30
 800baa2:	4606      	mov	r6, r0
 800baa4:	460c      	mov	r4, r1
 800baa6:	d507      	bpl.n	800bab8 <__smakebuf_r+0x1c>
 800baa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	6123      	str	r3, [r4, #16]
 800bab0:	2301      	movs	r3, #1
 800bab2:	6163      	str	r3, [r4, #20]
 800bab4:	b003      	add	sp, #12
 800bab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bab8:	ab01      	add	r3, sp, #4
 800baba:	466a      	mov	r2, sp
 800babc:	f7ff ffc8 	bl	800ba50 <__swhatbuf_r>
 800bac0:	9f00      	ldr	r7, [sp, #0]
 800bac2:	4605      	mov	r5, r0
 800bac4:	4639      	mov	r1, r7
 800bac6:	4630      	mov	r0, r6
 800bac8:	f7fe feda 	bl	800a880 <_malloc_r>
 800bacc:	b948      	cbnz	r0, 800bae2 <__smakebuf_r+0x46>
 800bace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bad2:	059a      	lsls	r2, r3, #22
 800bad4:	d4ee      	bmi.n	800bab4 <__smakebuf_r+0x18>
 800bad6:	f023 0303 	bic.w	r3, r3, #3
 800bada:	f043 0302 	orr.w	r3, r3, #2
 800bade:	81a3      	strh	r3, [r4, #12]
 800bae0:	e7e2      	b.n	800baa8 <__smakebuf_r+0xc>
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	6020      	str	r0, [r4, #0]
 800bae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baea:	81a3      	strh	r3, [r4, #12]
 800baec:	9b01      	ldr	r3, [sp, #4]
 800baee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800baf2:	b15b      	cbz	r3, 800bb0c <__smakebuf_r+0x70>
 800baf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baf8:	4630      	mov	r0, r6
 800bafa:	f000 f847 	bl	800bb8c <_isatty_r>
 800bafe:	b128      	cbz	r0, 800bb0c <__smakebuf_r+0x70>
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	f023 0303 	bic.w	r3, r3, #3
 800bb06:	f043 0301 	orr.w	r3, r3, #1
 800bb0a:	81a3      	strh	r3, [r4, #12]
 800bb0c:	89a3      	ldrh	r3, [r4, #12]
 800bb0e:	431d      	orrs	r5, r3
 800bb10:	81a5      	strh	r5, [r4, #12]
 800bb12:	e7cf      	b.n	800bab4 <__smakebuf_r+0x18>

0800bb14 <memmove>:
 800bb14:	4288      	cmp	r0, r1
 800bb16:	b510      	push	{r4, lr}
 800bb18:	eb01 0402 	add.w	r4, r1, r2
 800bb1c:	d902      	bls.n	800bb24 <memmove+0x10>
 800bb1e:	4284      	cmp	r4, r0
 800bb20:	4623      	mov	r3, r4
 800bb22:	d807      	bhi.n	800bb34 <memmove+0x20>
 800bb24:	1e43      	subs	r3, r0, #1
 800bb26:	42a1      	cmp	r1, r4
 800bb28:	d008      	beq.n	800bb3c <memmove+0x28>
 800bb2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb32:	e7f8      	b.n	800bb26 <memmove+0x12>
 800bb34:	4402      	add	r2, r0
 800bb36:	4601      	mov	r1, r0
 800bb38:	428a      	cmp	r2, r1
 800bb3a:	d100      	bne.n	800bb3e <memmove+0x2a>
 800bb3c:	bd10      	pop	{r4, pc}
 800bb3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb46:	e7f7      	b.n	800bb38 <memmove+0x24>

0800bb48 <_close_r>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	4d06      	ldr	r5, [pc, #24]	@ (800bb64 <_close_r+0x1c>)
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	4604      	mov	r4, r0
 800bb50:	4608      	mov	r0, r1
 800bb52:	602b      	str	r3, [r5, #0]
 800bb54:	f7f5 fbf1 	bl	800133a <_close>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d102      	bne.n	800bb62 <_close_r+0x1a>
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	b103      	cbz	r3, 800bb62 <_close_r+0x1a>
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	20001670 	.word	0x20001670

0800bb68 <_fstat_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4d07      	ldr	r5, [pc, #28]	@ (800bb88 <_fstat_r+0x20>)
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	4604      	mov	r4, r0
 800bb70:	4608      	mov	r0, r1
 800bb72:	4611      	mov	r1, r2
 800bb74:	602b      	str	r3, [r5, #0]
 800bb76:	f7f5 fbec 	bl	8001352 <_fstat>
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	d102      	bne.n	800bb84 <_fstat_r+0x1c>
 800bb7e:	682b      	ldr	r3, [r5, #0]
 800bb80:	b103      	cbz	r3, 800bb84 <_fstat_r+0x1c>
 800bb82:	6023      	str	r3, [r4, #0]
 800bb84:	bd38      	pop	{r3, r4, r5, pc}
 800bb86:	bf00      	nop
 800bb88:	20001670 	.word	0x20001670

0800bb8c <_isatty_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4d06      	ldr	r5, [pc, #24]	@ (800bba8 <_isatty_r+0x1c>)
 800bb90:	2300      	movs	r3, #0
 800bb92:	4604      	mov	r4, r0
 800bb94:	4608      	mov	r0, r1
 800bb96:	602b      	str	r3, [r5, #0]
 800bb98:	f7f5 fbeb 	bl	8001372 <_isatty>
 800bb9c:	1c43      	adds	r3, r0, #1
 800bb9e:	d102      	bne.n	800bba6 <_isatty_r+0x1a>
 800bba0:	682b      	ldr	r3, [r5, #0]
 800bba2:	b103      	cbz	r3, 800bba6 <_isatty_r+0x1a>
 800bba4:	6023      	str	r3, [r4, #0]
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	20001670 	.word	0x20001670

0800bbac <_lseek_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4d07      	ldr	r5, [pc, #28]	@ (800bbcc <_lseek_r+0x20>)
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	4608      	mov	r0, r1
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	602a      	str	r2, [r5, #0]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	f7f5 fbe4 	bl	8001388 <_lseek>
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	d102      	bne.n	800bbca <_lseek_r+0x1e>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	b103      	cbz	r3, 800bbca <_lseek_r+0x1e>
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	20001670 	.word	0x20001670

0800bbd0 <_read_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	4d07      	ldr	r5, [pc, #28]	@ (800bbf0 <_read_r+0x20>)
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	4608      	mov	r0, r1
 800bbd8:	4611      	mov	r1, r2
 800bbda:	2200      	movs	r2, #0
 800bbdc:	602a      	str	r2, [r5, #0]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	f7f5 fb72 	bl	80012c8 <_read>
 800bbe4:	1c43      	adds	r3, r0, #1
 800bbe6:	d102      	bne.n	800bbee <_read_r+0x1e>
 800bbe8:	682b      	ldr	r3, [r5, #0]
 800bbea:	b103      	cbz	r3, 800bbee <_read_r+0x1e>
 800bbec:	6023      	str	r3, [r4, #0]
 800bbee:	bd38      	pop	{r3, r4, r5, pc}
 800bbf0:	20001670 	.word	0x20001670

0800bbf4 <_write_r>:
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	4d07      	ldr	r5, [pc, #28]	@ (800bc14 <_write_r+0x20>)
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	4608      	mov	r0, r1
 800bbfc:	4611      	mov	r1, r2
 800bbfe:	2200      	movs	r2, #0
 800bc00:	602a      	str	r2, [r5, #0]
 800bc02:	461a      	mov	r2, r3
 800bc04:	f7f5 fb7d 	bl	8001302 <_write>
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	d102      	bne.n	800bc12 <_write_r+0x1e>
 800bc0c:	682b      	ldr	r3, [r5, #0]
 800bc0e:	b103      	cbz	r3, 800bc12 <_write_r+0x1e>
 800bc10:	6023      	str	r3, [r4, #0]
 800bc12:	bd38      	pop	{r3, r4, r5, pc}
 800bc14:	20001670 	.word	0x20001670

0800bc18 <_malloc_usable_size_r>:
 800bc18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc1c:	1f18      	subs	r0, r3, #4
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	bfbc      	itt	lt
 800bc22:	580b      	ldrlt	r3, [r1, r0]
 800bc24:	18c0      	addlt	r0, r0, r3
 800bc26:	4770      	bx	lr

0800bc28 <_init>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	bf00      	nop
 800bc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc2e:	bc08      	pop	{r3}
 800bc30:	469e      	mov	lr, r3
 800bc32:	4770      	bx	lr

0800bc34 <_fini>:
 800bc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc36:	bf00      	nop
 800bc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc3a:	bc08      	pop	{r3}
 800bc3c:	469e      	mov	lr, r3
 800bc3e:	4770      	bx	lr
