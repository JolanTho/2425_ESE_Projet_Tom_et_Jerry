
Tom_n_Jerry_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b3e8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001298  0801b5c8  0801b5c8  0001c5c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c860  0801c860  0001e4e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801c860  0801c860  0001d860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c868  0801c868  0001e4e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c868  0801c868  0001d868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c86c  0801c86c  0001d86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004e4  20000000  0801c870  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007450  200004e4  0801cd54  0001e4e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20007934  0801cd54  0001e934  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  0001e4e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c3a2  00000000  00000000  0001e518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008fb6  00000000  00000000  0005a8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e08  00000000  00000000  00063870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002316  00000000  00000000  00066678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003073d  00000000  00000000  0006898e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e907  00000000  00000000  000990cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b8cb  00000000  00000000  000d79d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000023e5  00000000  00000000  001e329d  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  00000228  00000000  00000000  001e5682  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000018  00000000  00000000  001e58ac  2**2
                  CONTENTS, READONLY
 22 .iar.debug_frame 00000224  00000000  00000000  001e58c4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e39c  00000000  00000000  001e5ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000097  00000000  00000000  001f3e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200004e4 	.word	0x200004e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801b5b0 	.word	0x0801b5b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200004e8 	.word	0x200004e8
 800021c:	0801b5b0 	.word	0x0801b5b0

08000220 <USBPD_CAD_Init>:
 8000220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000224:	2600      	movs	r6, #0
 8000226:	2803      	cmp	r0, #3
 8000228:	4681      	mov	r9, r0
 800022a:	460c      	mov	r4, r1
 800022c:	4690      	mov	r8, r2
 800022e:	461f      	mov	r7, r3
 8000230:	bf28      	it	cs
 8000232:	2601      	movcs	r6, #1
 8000234:	d219      	bcs.n	800026a <USBPD_CAD_Init+0x4a>
 8000236:	b90c      	cbnz	r4, 800023c <USBPD_CAD_Init+0x1c>
 8000238:	2602      	movs	r6, #2
 800023a:	e016      	b.n	800026a <USBPD_CAD_Init+0x4a>
 800023c:	200c      	movs	r0, #12
 800023e:	f016 ffa1 	bl	8017184 <malloc>
 8000242:	0005      	movs	r5, r0
 8000244:	bf08      	it	eq
 8000246:	2603      	moveq	r6, #3
 8000248:	d00f      	beq.n	800026a <USBPD_CAD_Init+0x4a>
 800024a:	210c      	movs	r1, #12
 800024c:	f018 fcdf 	bl	8018c0e <__aeabi_memclr>
 8000250:	602f      	str	r7, [r5, #0]
 8000252:	722e      	strb	r6, [r5, #8]
 8000254:	606c      	str	r4, [r5, #4]
 8000256:	464a      	mov	r2, r9
 8000258:	4940      	ldr	r1, [pc, #256]	@ (800035c <.text_6>)
 800025a:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800025e:	463a      	mov	r2, r7
 8000260:	6863      	ldr	r3, [r4, #4]
 8000262:	4641      	mov	r1, r8
 8000264:	4648      	mov	r0, r9
 8000266:	f010 f83b 	bl	80102e0 <CAD_Init>
 800026a:	4630      	mov	r0, r6
 800026c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000270 <USBPD_CAD_PortEnable>:
 8000270:	2803      	cmp	r0, #3
 8000272:	d203      	bcs.n	800027c <USBPD_CAD_PortEnable+0xc>
 8000274:	4a39      	ldr	r2, [pc, #228]	@ (800035c <.text_6>)
 8000276:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800027a:	7201      	strb	r1, [r0, #8]
 800027c:	4770      	bx	lr

0800027e <USBPD_CAD_Process>:
 800027e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000280:	2100      	movs	r1, #0
 8000282:	f88d 1000 	strb.w	r1, [sp]
 8000286:	9101      	str	r1, [sp, #4]
 8000288:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800028c:	2600      	movs	r6, #0
 800028e:	4c33      	ldr	r4, [pc, #204]	@ (800035c <.text_6>)
 8000290:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000294:	2800      	cmp	r0, #0
 8000296:	d05c      	beq.n	8000352 <USBPD_CAD_Process+0xd4>
 8000298:	7a00      	ldrb	r0, [r0, #8]
 800029a:	2801      	cmp	r0, #1
 800029c:	d159      	bne.n	8000352 <USBPD_CAD_Process+0xd4>
 800029e:	aa01      	add	r2, sp, #4
 80002a0:	4669      	mov	r1, sp
 80002a2:	b2f0      	uxtb	r0, r6
 80002a4:	f010 f962 	bl	801056c <CAD_StateMachine>
 80002a8:	42a8      	cmp	r0, r5
 80002aa:	bf98      	it	ls
 80002ac:	4605      	movls	r5, r0
 80002ae:	f89d 0000 	ldrb.w	r0, [sp]
 80002b2:	2801      	cmp	r0, #1
 80002b4:	d004      	beq.n	80002c0 <USBPD_CAD_Process+0x42>
 80002b6:	2802      	cmp	r0, #2
 80002b8:	bf18      	it	ne
 80002ba:	2804      	cmpne	r0, #4
 80002bc:	d012      	beq.n	80002e4 <USBPD_CAD_Process+0x66>
 80002be:	e031      	b.n	8000324 <USBPD_CAD_Process+0xa6>
 80002c0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002c4:	6801      	ldr	r1, [r0, #0]
 80002c6:	680a      	ldr	r2, [r1, #0]
 80002c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80002cc:	600a      	str	r2, [r1, #0]
 80002ce:	6801      	ldr	r1, [r0, #0]
 80002d0:	680b      	ldr	r3, [r1, #0]
 80002d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002d6:	600b      	str	r3, [r1, #0]
 80002d8:	6800      	ldr	r0, [r0, #0]
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	e022      	b.n	800032a <USBPD_CAD_Process+0xac>
 80002e4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002e8:	6803      	ldr	r3, [r0, #0]
 80002ea:	9901      	ldr	r1, [sp, #4]
 80002ec:	681f      	ldr	r7, [r3, #0]
 80002ee:	f361 1787 	bfi	r7, r1, #6, #2
 80002f2:	601f      	str	r7, [r3, #0]
 80002f4:	6801      	ldr	r1, [r0, #0]
 80002f6:	680a      	ldr	r2, [r1, #0]
 80002f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80002fc:	600a      	str	r2, [r1, #0]
 80002fe:	6800      	ldr	r0, [r0, #0]
 8000300:	6801      	ldr	r1, [r0, #0]
 8000302:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000306:	2800      	cmp	r0, #0
 8000308:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800030c:	6800      	ldr	r0, [r0, #0]
 800030e:	6801      	ldr	r1, [r0, #0]
 8000310:	bf0c      	ite	eq
 8000312:	f021 0108 	biceq.w	r1, r1, #8
 8000316:	f041 0108 	orrne.w	r1, r1, #8
 800031a:	6001      	str	r1, [r0, #0]
 800031c:	b2f0      	uxtb	r0, r6
 800031e:	2168      	movs	r1, #104	@ 0x68
 8000320:	f000 f8af 	bl	8000482 <USBPD_PE_Notification>
 8000324:	f89d 0000 	ldrb.w	r0, [sp]
 8000328:	b198      	cbz	r0, 8000352 <USBPD_CAD_Process+0xd4>
 800032a:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 800032e:	685f      	ldr	r7, [r3, #4]
 8000330:	9a01      	ldr	r2, [sp, #4]
 8000332:	f89d 1000 	ldrb.w	r1, [sp]
 8000336:	f8d7 c000 	ldr.w	ip, [r7]
 800033a:	b2f0      	uxtb	r0, r6
 800033c:	47e0      	blx	ip
 800033e:	f89d 0000 	ldrb.w	r0, [sp]
 8000342:	2801      	cmp	r0, #1
 8000344:	bf18      	it	ne
 8000346:	2803      	cmpne	r0, #3
 8000348:	d103      	bne.n	8000352 <USBPD_CAD_Process+0xd4>
 800034a:	2169      	movs	r1, #105	@ 0x69
 800034c:	b2f0      	uxtb	r0, r6
 800034e:	f000 f898 	bl	8000482 <USBPD_PE_Notification>
 8000352:	1c76      	adds	r6, r6, #1
 8000354:	2e03      	cmp	r6, #3
 8000356:	d39b      	bcc.n	8000290 <USBPD_CAD_Process+0x12>
 8000358:	4628      	mov	r0, r5
 800035a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800035c <.text_6>:
 800035c:	20000500 	.word	0x20000500

08000360 <USBPD_CAD_AssertRd>:
 8000360:	b510      	push	{r4, lr}
 8000362:	4604      	mov	r4, r0
 8000364:	f011 fc42 	bl	8011bec <USBPDM1_DeAssertRp>
 8000368:	4620      	mov	r0, r4
 800036a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800036e:	f011 bc49 	b.w	8011c04 <USBPDM1_AssertRd>

08000372 <USBPD_CAD_AssertRp>:
 8000372:	b510      	push	{r4, lr}
 8000374:	4604      	mov	r4, r0
 8000376:	f011 fccb 	bl	8011d10 <USBPDM1_DeAssertRd>
 800037a:	4620      	mov	r0, r4
 800037c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000380:	f011 bb9e 	b.w	8011ac0 <USBPDM1_AssertRp>

08000384 <USBPD_CAD_EnterErrorRecovery>:
 8000384:	f010 b88e 	b.w	80104a4 <CAD_Enter_ErrorRecovery>

08000388 <USBPD_CAD_GetMemoryConsumption>:
 8000388:	2024      	movs	r0, #36	@ 0x24
 800038a:	4770      	bx	lr

0800038c <USBPD_PE_Init>:
 800038c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000390:	461f      	mov	r7, r3
 8000392:	4606      	mov	r6, r0
 8000394:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000396:	460d      	mov	r5, r1
 8000398:	4690      	mov	r8, r2
 800039a:	b908      	cbnz	r0, 80003a0 <USBPD_PE_Init+0x14>
 800039c:	2718      	movs	r7, #24
 800039e:	e02d      	b.n	80003fc <USBPD_PE_Init+0x70>
 80003a0:	2e03      	cmp	r6, #3
 80003a2:	bf28      	it	cs
 80003a4:	2717      	movcs	r7, #23
 80003a6:	d229      	bcs.n	80003fc <USBPD_PE_Init+0x70>
 80003a8:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 80003ac:	f016 feea 	bl	8017184 <malloc>
 80003b0:	0004      	movs	r4, r0
 80003b2:	bf08      	it	eq
 80003b4:	2716      	moveq	r7, #22
 80003b6:	d021      	beq.n	80003fc <USBPD_PE_Init+0x70>
 80003b8:	f44f 712a 	mov.w	r1, #680	@ 0x2a8
 80003bc:	f018 fc27 	bl	8018c0e <__aeabi_memclr>
 80003c0:	f8df 0930 	ldr.w	r0, [pc, #2352]	@ 8000cf4 <.text_46>
 80003c4:	4631      	mov	r1, r6
 80003c6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 80003ca:	6025      	str	r5, [r4, #0]
 80003cc:	f8c4 8004 	str.w	r8, [r4, #4]
 80003d0:	7326      	strb	r6, [r4, #12]
 80003d2:	60a7      	str	r7, [r4, #8]
 80003d4:	f504 7329 	add.w	r3, r4, #676	@ 0x2a4
 80003d8:	f104 029c 	add.w	r2, r4, #156	@ 0x9c
 80003dc:	4629      	mov	r1, r5
 80003de:	4630      	mov	r0, r6
 80003e0:	f001 fb9c 	bl	8001b1c <USBPD_PRL_Init>
 80003e4:	0007      	movs	r7, r0
 80003e6:	d109      	bne.n	80003fc <USBPD_PE_Init+0x70>
 80003e8:	f000 fa23 	bl	8000832 <.text_27>
 80003ec:	2200      	movs	r2, #0
 80003ee:	792b      	ldrb	r3, [r5, #4]
 80003f0:	f003 0303 	and.w	r3, r3, #3
 80003f4:	2100      	movs	r1, #0
 80003f6:	4630      	mov	r0, r6
 80003f8:	f001 fbbb 	bl	8001b72 <USBPD_PRL_SetHeader>
 80003fc:	4638      	mov	r0, r7
 80003fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000402 <USBPD_PE_TimerCounter>:
 8000402:	f8df 18f0 	ldr.w	r1, [pc, #2288]	@ 8000cf4 <.text_46>
 8000406:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800040a:	8b41      	ldrh	r1, [r0, #26]
 800040c:	044a      	lsls	r2, r1, #17
 800040e:	d002      	beq.n	8000416 <USBPD_PE_TimerCounter+0x14>
 8000410:	8b41      	ldrh	r1, [r0, #26]
 8000412:	1e4a      	subs	r2, r1, #1
 8000414:	8342      	strh	r2, [r0, #26]
 8000416:	8b81      	ldrh	r1, [r0, #28]
 8000418:	044a      	lsls	r2, r1, #17
 800041a:	d002      	beq.n	8000422 <USBPD_PE_TimerCounter+0x20>
 800041c:	8b81      	ldrh	r1, [r0, #28]
 800041e:	1e4a      	subs	r2, r1, #1
 8000420:	8382      	strh	r2, [r0, #28]
 8000422:	4770      	bx	lr

08000424 <USBPD_PE_TimerCounteUpdate>:
 8000424:	b538      	push	{r3, r4, r5, lr}
 8000426:	460c      	mov	r4, r1
 8000428:	f8df 18c8 	ldr.w	r1, [pc, #2248]	@ 8000cf4 <.text_46>
 800042c:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8000430:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8000434:	da0f      	bge.n	8000456 <USBPD_PE_TimerCounteUpdate+0x32>
 8000436:	8b68      	ldrh	r0, [r5, #26]
 8000438:	0441      	lsls	r1, r0, #17
 800043a:	d004      	beq.n	8000446 <USBPD_PE_TimerCounteUpdate+0x22>
 800043c:	8b68      	ldrh	r0, [r5, #26]
 800043e:	4621      	mov	r1, r4
 8000440:	f000 fc13 	bl	8000c6a <PE_UpdateTimer>
 8000444:	8368      	strh	r0, [r5, #26]
 8000446:	8ba8      	ldrh	r0, [r5, #28]
 8000448:	0441      	lsls	r1, r0, #17
 800044a:	d004      	beq.n	8000456 <USBPD_PE_TimerCounteUpdate+0x32>
 800044c:	8ba8      	ldrh	r0, [r5, #28]
 800044e:	4621      	mov	r1, r4
 8000450:	f000 fc0b 	bl	8000c6a <PE_UpdateTimer>
 8000454:	83a8      	strh	r0, [r5, #28]
 8000456:	bd31      	pop	{r0, r4, r5, pc}

08000458 <USBPD_PE_IsCableConnected>:
 8000458:	f8df 2898 	ldr.w	r2, [pc, #2200]	@ 8000cf4 <.text_46>
 800045c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000460:	6842      	ldr	r2, [r0, #4]
 8000462:	6813      	ldr	r3, [r2, #0]
 8000464:	f361 330c 	bfi	r3, r1, #12, #1
 8000468:	6013      	str	r3, [r2, #0]
 800046a:	2248      	movs	r2, #72	@ 0x48
 800046c:	7342      	strb	r2, [r0, #13]
 800046e:	4770      	bx	lr

08000470 <USBPD_PE_StateMachine_Reset>:
 8000470:	f8df 2880 	ldr.w	r2, [pc, #2176]	@ 8000cf4 <.text_46>
 8000474:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000478:	2148      	movs	r1, #72	@ 0x48
 800047a:	7341      	strb	r1, [r0, #13]
 800047c:	4770      	bx	lr

0800047e <USBPD_PE_StateMachine_Stop>:
 800047e:	f001 be26 	b.w	80020ce <USBPD_PRL_Stop>

08000482 <USBPD_PE_Notification>:
 8000482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000484:	2803      	cmp	r0, #3
 8000486:	4604      	mov	r4, r0
 8000488:	460d      	mov	r5, r1
 800048a:	d214      	bcs.n	80004b6 <__iar_annotation$$tailcall+0x2>
 800048c:	2600      	movs	r6, #0
 800048e:	9600      	str	r6, [sp, #0]
 8000490:	2300      	movs	r3, #0
 8000492:	f8df 7864 	ldr.w	r7, [pc, #2148]	@ 8000cf8 <.text_47>
 8000496:	683e      	ldr	r6, [r7, #0]
 8000498:	462a      	mov	r2, r5
 800049a:	4621      	mov	r1, r4
 800049c:	2009      	movs	r0, #9
 800049e:	47b0      	blx	r6
 80004a0:	f8df 2850 	ldr.w	r2, [pc, #2128]	@ 8000cf4 <.text_46>
 80004a4:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	68d3      	ldr	r3, [r2, #12]
 80004ac:	4629      	mov	r1, r5
 80004ae:	4620      	mov	r0, r4
 80004b0:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}

080004b4 <__iar_annotation$$tailcall>:
 80004b4:	4718      	bx	r3
 80004b6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080004b8 <USBPD_PE_Request_HardReset>:
 80004b8:	b580      	push	{r7, lr}
 80004ba:	f8df 1838 	ldr.w	r1, [pc, #2104]	@ 8000cf4 <.text_46>
 80004be:	4602      	mov	r2, r0
 80004c0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80004c4:	230f      	movs	r3, #15
 80004c6:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
 80004ca:	6889      	ldr	r1, [r1, #8]
 80004cc:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80004ce:	4790      	blx	r2
 80004d0:	2000      	movs	r0, #0
 80004d2:	bd02      	pop	{r1, pc}

080004d4 <USBPD_PE_Request_CableReset>:
 80004d4:	2010      	movs	r0, #16
 80004d6:	4770      	bx	lr

080004d8 <USBPD_PE_Request_CtrlMessage>:
 80004d8:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 80004dc:	4680      	mov	r8, r0
 80004de:	460e      	mov	r6, r1
 80004e0:	f8df 0810 	ldr.w	r0, [pc, #2064]	@ 8000cf4 <.text_46>
 80004e4:	b093      	sub	sp, #76	@ 0x4c
 80004e6:	4641      	mov	r1, r8
 80004e8:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80004ec:	f8df 180c 	ldr.w	r1, [pc, #2060]	@ 8000cfc <.text_48>
 80004f0:	4617      	mov	r7, r2
 80004f2:	4668      	mov	r0, sp
 80004f4:	224c      	movs	r2, #76	@ 0x4c
 80004f6:	f018 fb9b 	bl	8018c30 <__aeabi_memcpy>
 80004fa:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 80004fe:	2400      	movs	r4, #0
 8000500:	7808      	ldrb	r0, [r1, #0]
 8000502:	b920      	cbnz	r0, 800050e <USBPD_PE_Request_CtrlMessage+0x36>
 8000504:	6868      	ldr	r0, [r5, #4]
 8000506:	6802      	ldr	r2, [r0, #0]
 8000508:	f3c2 3000 	ubfx	r0, r2, #12, #1
 800050c:	b908      	cbnz	r0, 8000512 <USBPD_PE_Request_CtrlMessage+0x3a>
 800050e:	2403      	movs	r4, #3
 8000510:	e03f      	b.n	8000592 <USBPD_PE_Request_CtrlMessage+0xba>
 8000512:	686a      	ldr	r2, [r5, #4]
 8000514:	6828      	ldr	r0, [r5, #0]
 8000516:	6813      	ldr	r3, [r2, #0]
 8000518:	6840      	ldr	r0, [r0, #4]
 800051a:	f3c3 2202 	ubfx	r2, r3, #8, #3
 800051e:	686b      	ldr	r3, [r5, #4]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	f003 0303 	and.w	r3, r3, #3
 8000526:	08c0      	lsrs	r0, r0, #3
 8000528:	2a03      	cmp	r2, #3
 800052a:	bf0c      	ite	eq
 800052c:	2208      	moveq	r2, #8
 800052e:	2200      	movne	r2, #0
 8000530:	2b02      	cmp	r3, #2
 8000532:	f000 0001 	and.w	r0, r0, #1
 8000536:	bf0c      	ite	eq
 8000538:	2340      	moveq	r3, #64	@ 0x40
 800053a:	2300      	movne	r3, #0
 800053c:	4310      	orrs	r0, r2
 800053e:	4318      	orrs	r0, r3
 8000540:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8000544:	f040 0012 	orr.w	r0, r0, #18
 8000548:	07c3      	lsls	r3, r0, #31
 800054a:	f81d 3002 	ldrb.w	r3, [sp, r2]
 800054e:	bf48      	it	mi
 8000550:	f040 0020 	orrmi.w	r0, r0, #32
 8000554:	4018      	ands	r0, r3
 8000556:	4298      	cmp	r0, r3
 8000558:	bf18      	it	ne
 800055a:	2402      	movne	r4, #2
 800055c:	d119      	bne.n	8000592 <USBPD_PE_Request_CtrlMessage+0xba>
 800055e:	2e0d      	cmp	r6, #13
 8000560:	704c      	strb	r4, [r1, #1]
 8000562:	f105 0078 	add.w	r0, r5, #120	@ 0x78
 8000566:	d007      	beq.n	8000578 <USBPD_PE_Request_CtrlMessage+0xa0>
 8000568:	2e16      	cmp	r6, #22
 800056a:	d002      	beq.n	8000572 <USBPD_PE_Request_CtrlMessage+0x9a>
 800056c:	2e18      	cmp	r6, #24
 800056e:	d003      	beq.n	8000578 <USBPD_PE_Request_CtrlMessage+0xa0>
 8000570:	e003      	b.n	800057a <USBPD_PE_Request_CtrlMessage+0xa2>
 8000572:	2316      	movs	r3, #22
 8000574:	7003      	strb	r3, [r0, #0]
 8000576:	e000      	b.n	800057a <USBPD_PE_Request_CtrlMessage+0xa2>
 8000578:	704f      	strb	r7, [r1, #1]
 800057a:	eb0d 0302 	add.w	r3, sp, r2
 800057e:	785e      	ldrb	r6, [r3, #1]
 8000580:	7046      	strb	r6, [r0, #1]
 8000582:	eb0d 0002 	add.w	r0, sp, r2
 8000586:	7882      	ldrb	r2, [r0, #2]
 8000588:	700a      	strb	r2, [r1, #0]
 800058a:	4640      	mov	r0, r8
 800058c:	68a9      	ldr	r1, [r5, #8]
 800058e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8000590:	4790      	blx	r2
 8000592:	4620      	mov	r0, r4
 8000594:	b014      	add	sp, #80	@ 0x50
 8000596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800059a <USBPD_PE_Request_DataMessage>:
 800059a:	b510      	push	{r4, lr}
 800059c:	f8df 2754 	ldr.w	r2, [pc, #1876]	@ 8000cf4 <.text_46>
 80005a0:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80005a4:	f103 042a 	add.w	r4, r3, #42	@ 0x2a
 80005a8:	2002      	movs	r0, #2
 80005aa:	7822      	ldrb	r2, [r4, #0]
 80005ac:	b922      	cbnz	r2, 80005b8 <USBPD_PE_Request_DataMessage+0x1e>
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	6813      	ldr	r3, [r2, #0]
 80005b2:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80005b6:	b90a      	cbnz	r2, 80005bc <USBPD_PE_Request_DataMessage+0x22>
 80005b8:	2003      	movs	r0, #3
 80005ba:	bd10      	pop	{r4, pc}
 80005bc:	1f89      	subs	r1, r1, #6
 80005be:	2200      	movs	r2, #0
 80005c0:	2901      	cmp	r1, #1
 80005c2:	7062      	strb	r2, [r4, #1]
 80005c4:	bf88      	it	hi
 80005c6:	2010      	movhi	r0, #16
 80005c8:	bd10      	pop	{r4, pc}

080005ca <USBPD_PE_Send_Request>:
 80005ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005cc:	f8df 3724 	ldr.w	r3, [pc, #1828]	@ 8000cf4 <.text_46>
 80005d0:	4604      	mov	r4, r0
 80005d2:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80005d6:	f105 062a 	add.w	r6, r5, #42	@ 0x2a
 80005da:	2402      	movs	r4, #2
 80005dc:	7833      	ldrb	r3, [r6, #0]
 80005de:	b923      	cbnz	r3, 80005ea <USBPD_PE_Send_Request+0x20>
 80005e0:	686b      	ldr	r3, [r5, #4]
 80005e2:	681f      	ldr	r7, [r3, #0]
 80005e4:	f3c7 3300 	ubfx	r3, r7, #12, #1
 80005e8:	b90b      	cbnz	r3, 80005ee <USBPD_PE_Send_Request+0x24>
 80005ea:	2403      	movs	r4, #3
 80005ec:	e010      	b.n	8000610 <USBPD_PE_Send_Request+0x46>
 80005ee:	f3c7 2302 	ubfx	r3, r7, #8, #3
 80005f2:	2b03      	cmp	r3, #3
 80005f4:	d10c      	bne.n	8000610 <USBPD_PE_Send_Request+0x46>
 80005f6:	2345      	movs	r3, #69	@ 0x45
 80005f8:	7033      	strb	r3, [r6, #0]
 80005fa:	6169      	str	r1, [r5, #20]
 80005fc:	2400      	movs	r4, #0
 80005fe:	6929      	ldr	r1, [r5, #16]
 8000600:	f362 01c4 	bfi	r1, r2, #3, #2
 8000604:	6129      	str	r1, [r5, #16]
 8000606:	2200      	movs	r2, #0
 8000608:	7072      	strb	r2, [r6, #1]
 800060a:	68a9      	ldr	r1, [r5, #8]
 800060c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800060e:	4790      	blx	r2
 8000610:	4620      	mov	r0, r4
 8000612:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08000614 <PE_Send_RESET>:
 8000614:	b538      	push	{r3, r4, r5, lr}
 8000616:	4604      	mov	r4, r0
 8000618:	460d      	mov	r5, r1
 800061a:	2d05      	cmp	r5, #5
 800061c:	7b20      	ldrb	r0, [r4, #12]
 800061e:	bf0c      	ite	eq
 8000620:	211f      	moveq	r1, #31
 8000622:	215e      	movne	r1, #94	@ 0x5e
 8000624:	f7ff ff2d 	bl	8000482 <USBPD_PE_Notification>
 8000628:	7b20      	ldrb	r0, [r4, #12]
 800062a:	4629      	mov	r1, r5
 800062c:	f001 fcf5 	bl	800201a <USBPD_PRL_ResetRequestProcess>
 8000630:	f3ef 8010 	mrs	r0, PRIMASK
 8000634:	b672      	cpsid	i
 8000636:	2100      	movs	r1, #0
 8000638:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 800063c:	f380 8810 	msr	PRIMASK, r0
 8000640:	bd31      	pop	{r0, r4, r5, pc}

08000642 <PE_Get_SpecRevision>:
 8000642:	f8df 16b0 	ldr.w	r1, [pc, #1712]	@ 8000cf4 <.text_46>
 8000646:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800064a:	6841      	ldr	r1, [r0, #4]
 800064c:	7808      	ldrb	r0, [r1, #0]
 800064e:	f000 0003 	and.w	r0, r0, #3
 8000652:	4770      	bx	lr

08000654 <PE_Get_RxEvent>:
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	2114      	movs	r1, #20
 8000658:	f3ef 8410 	mrs	r4, PRIMASK
 800065c:	b672      	cpsid	i
 800065e:	f100 0528 	add.w	r5, r0, #40	@ 0x28
 8000662:	7b2a      	ldrb	r2, [r5, #12]
 8000664:	b33a      	cbz	r2, 80006b6 <PE_Get_RxEvent+0x62>
 8000666:	f100 0370 	add.w	r3, r0, #112	@ 0x70
 800066a:	5c9e      	ldrb	r6, [r3, r2]
 800066c:	0677      	lsls	r7, r6, #25
 800066e:	bf58      	it	pl
 8000670:	2103      	movpl	r1, #3
 8000672:	d520      	bpl.n	80006b6 <PE_Get_RxEvent+0x62>
 8000674:	231e      	movs	r3, #30
 8000676:	435a      	muls	r2, r3
 8000678:	4402      	add	r2, r0
 800067a:	f102 0617 	add.w	r6, r2, #23
 800067e:	60ae      	str	r6, [r5, #8]
 8000680:	7833      	ldrb	r3, [r6, #0]
 8000682:	7872      	ldrb	r2, [r6, #1]
 8000684:	eb03 2602 	add.w	r6, r3, r2, lsl #8
 8000688:	7b2a      	ldrb	r2, [r5, #12]
 800068a:	80ae      	strh	r6, [r5, #4]
 800068c:	3070      	adds	r0, #112	@ 0x70
 800068e:	5c83      	ldrb	r3, [r0, r2]
 8000690:	f003 031f 	and.w	r3, r3, #31
 8000694:	2b01      	cmp	r3, #1
 8000696:	d004      	beq.n	80006a2 <PE_Get_RxEvent+0x4e>
 8000698:	2b02      	cmp	r3, #2
 800069a:	d005      	beq.n	80006a8 <PE_Get_RxEvent+0x54>
 800069c:	2b04      	cmp	r3, #4
 800069e:	d007      	beq.n	80006b0 <PE_Get_RxEvent+0x5c>
 80006a0:	e009      	b.n	80006b6 <PE_Get_RxEvent+0x62>
 80006a2:	2111      	movs	r1, #17
 80006a4:	2000      	movs	r0, #0
 80006a6:	e005      	b.n	80006b4 <PE_Get_RxEvent+0x60>
 80006a8:	2201      	movs	r2, #1
 80006aa:	2112      	movs	r1, #18
 80006ac:	702a      	strb	r2, [r5, #0]
 80006ae:	e002      	b.n	80006b6 <PE_Get_RxEvent+0x62>
 80006b0:	2113      	movs	r1, #19
 80006b2:	2002      	movs	r0, #2
 80006b4:	7028      	strb	r0, [r5, #0]
 80006b6:	f384 8810 	msr	PRIMASK, r4
 80006ba:	4608      	mov	r0, r1
 80006bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006be <PE_Clear_RxEvent>:
 80006be:	b538      	push	{r3, r4, r5, lr}
 80006c0:	4601      	mov	r1, r0
 80006c2:	f3ef 8210 	mrs	r2, PRIMASK
 80006c6:	b672      	cpsid	i
 80006c8:	f891 0034 	ldrb.w	r0, [r1, #52]	@ 0x34
 80006cc:	b1c0      	cbz	r0, 8000700 <PE_Clear_RxEvent+0x42>
 80006ce:	1e40      	subs	r0, r0, #1
 80006d0:	b2c0      	uxtb	r0, r0
 80006d2:	f101 0471 	add.w	r4, r1, #113	@ 0x71
 80006d6:	2300      	movs	r3, #0
 80006d8:	5423      	strb	r3, [r4, r0]
 80006da:	1e40      	subs	r0, r0, #1
 80006dc:	4180      	sbcs	r0, r0
 80006de:	0fc0      	lsrs	r0, r0, #31
 80006e0:	f101 0371 	add.w	r3, r1, #113	@ 0x71
 80006e4:	5c1c      	ldrb	r4, [r3, r0]
 80006e6:	0665      	lsls	r5, r4, #25
 80006e8:	d507      	bpl.n	80006fa <PE_Clear_RxEvent+0x3c>
 80006ea:	1c40      	adds	r0, r0, #1
 80006ec:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 80006f0:	f382 8810 	msr	PRIMASK, r2
 80006f4:	7b08      	ldrb	r0, [r1, #12]
 80006f6:	6889      	ldr	r1, [r1, #8]
 80006f8:	e072      	b.n	80007e0 <.text_24>
 80006fa:	2000      	movs	r0, #0
 80006fc:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 8000700:	f382 8810 	msr	PRIMASK, r2
 8000704:	bd31      	pop	{r0, r4, r5, pc}

08000706 <PE_PRL_Control_RxEvent>:
 8000706:	f8df 15ec 	ldr.w	r1, [pc, #1516]	@ 8000cf4 <.text_46>
 800070a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800070e:	2000      	movs	r0, #0
 8000710:	f3ef 8210 	mrs	r2, PRIMASK
 8000714:	b672      	cpsid	i
 8000716:	f891 1034 	ldrb.w	r1, [r1, #52]	@ 0x34
 800071a:	b101      	cbz	r1, 800071e <PE_PRL_Control_RxEvent+0x18>
 800071c:	2001      	movs	r0, #1
 800071e:	f382 8810 	msr	PRIMASK, r2
 8000722:	4770      	bx	lr

08000724 <PE_Check_AMSConflict>:
 8000724:	b538      	push	{r3, r4, r5, lr}
 8000726:	4604      	mov	r4, r0
 8000728:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 800072c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800072e:	2500      	movs	r5, #0
 8000730:	4001      	ands	r1, r0
 8000732:	290d      	cmp	r1, #13
 8000734:	d102      	bne.n	800073c <PE_Check_AMSConflict+0x18>
 8000736:	2110      	movs	r1, #16
 8000738:	7361      	strb	r1, [r4, #13]
 800073a:	e02a      	b.n	8000792 <PE_Check_AMSConflict+0x6e>
 800073c:	7e20      	ldrb	r0, [r4, #24]
 800073e:	b188      	cbz	r0, 8000764 <PE_Check_AMSConflict+0x40>
 8000740:	1e40      	subs	r0, r0, #1
 8000742:	2801      	cmp	r0, #1
 8000744:	d914      	bls.n	8000770 <PE_Check_AMSConflict+0x4c>
 8000746:	1e80      	subs	r0, r0, #2
 8000748:	d014      	beq.n	8000774 <PE_Check_AMSConflict+0x50>
 800074a:	1e40      	subs	r0, r0, #1
 800074c:	d021      	beq.n	8000792 <PE_Check_AMSConflict+0x6e>
 800074e:	1e40      	subs	r0, r0, #1
 8000750:	2809      	cmp	r0, #9
 8000752:	bf84      	itt	hi
 8000754:	380b      	subhi	r0, #11
 8000756:	2801      	cmphi	r0, #1
 8000758:	d90a      	bls.n	8000770 <PE_Check_AMSConflict+0x4c>
 800075a:	1e80      	subs	r0, r0, #2
 800075c:	d005      	beq.n	800076a <PE_Check_AMSConflict+0x46>
 800075e:	384d      	subs	r0, #77	@ 0x4d
 8000760:	d006      	beq.n	8000770 <PE_Check_AMSConflict+0x4c>
 8000762:	e00a      	b.n	800077a <PE_Check_AMSConflict+0x56>
 8000764:	2203      	movs	r2, #3
 8000766:	7362      	strb	r2, [r4, #13]
 8000768:	e014      	b.n	8000794 <PE_Check_AMSConflict+0x70>
 800076a:	200f      	movs	r0, #15
 800076c:	7360      	strb	r0, [r4, #13]
 800076e:	e011      	b.n	8000794 <PE_Check_AMSConflict+0x70>
 8000770:	2011      	movs	r0, #17
 8000772:	e000      	b.n	8000776 <PE_Check_AMSConflict+0x52>
 8000774:	200f      	movs	r0, #15
 8000776:	7360      	strb	r0, [r4, #13]
 8000778:	e00b      	b.n	8000792 <PE_Check_AMSConflict+0x6e>
 800077a:	7b20      	ldrb	r0, [r4, #12]
 800077c:	215c      	movs	r1, #92	@ 0x5c
 800077e:	f7ff fe80 	bl	8000482 <USBPD_PE_Notification>
 8000782:	2103      	movs	r1, #3
 8000784:	6860      	ldr	r0, [r4, #4]
 8000786:	7361      	strb	r1, [r4, #13]
 8000788:	6801      	ldr	r1, [r0, #0]
 800078a:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800078e:	2803      	cmp	r0, #3
 8000790:	d000      	beq.n	8000794 <PE_Check_AMSConflict+0x70>
 8000792:	2515      	movs	r5, #21
 8000794:	4628      	mov	r0, r5
 8000796:	bd32      	pop	{r1, r4, r5, pc}

08000798 <PE_PRL_ResetReceived>:
 8000798:	b538      	push	{r3, r4, r5, lr}
 800079a:	4604      	mov	r4, r0
 800079c:	f8df 0554 	ldr.w	r0, [pc, #1364]	@ 8000cf4 <.text_46>
 80007a0:	4622      	mov	r2, r4
 80007a2:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 80007a6:	2905      	cmp	r1, #5
 80007a8:	d114      	bne.n	80007d4 <PE_PRL_ResetReceived+0x3c>
 80007aa:	6868      	ldr	r0, [r5, #4]
 80007ac:	6801      	ldr	r1, [r0, #0]
 80007ae:	f021 0110 	bic.w	r1, r1, #16
 80007b2:	6001      	str	r1, [r0, #0]
 80007b4:	2001      	movs	r0, #1
 80007b6:	6929      	ldr	r1, [r5, #16]
 80007b8:	f360 214a 	bfi	r1, r0, #9, #2
 80007bc:	f105 002a 	add.w	r0, r5, #42	@ 0x2a
 80007c0:	6129      	str	r1, [r5, #16]
 80007c2:	2214      	movs	r2, #20
 80007c4:	2300      	movs	r3, #0
 80007c6:	7002      	strb	r2, [r0, #0]
 80007c8:	7283      	strb	r3, [r0, #10]
 80007ca:	211e      	movs	r1, #30
 80007cc:	7b28      	ldrb	r0, [r5, #12]
 80007ce:	f7ff fe58 	bl	8000482 <USBPD_PE_Notification>
 80007d2:	e003      	b.n	80007dc <PE_PRL_ResetReceived+0x44>
 80007d4:	6928      	ldr	r0, [r5, #16]
 80007d6:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 80007da:	6128      	str	r0, [r5, #16]
 80007dc:	4620      	mov	r0, r4
 80007de:	68a9      	ldr	r1, [r5, #8]

080007e0 <.text_24>:
 80007e0:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80007e2:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}

080007e6 <__iar_annotation$$tailcall>:
 80007e6:	4710      	bx	r2

080007e8 <PE_PRL_BistCompleted>:
 80007e8:	4770      	bx	lr

080007ea <PE_Reset_HardReset>:
 80007ea:	b510      	push	{r4, lr}
 80007ec:	4604      	mov	r4, r0
 80007ee:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 80007f2:	b118      	cbz	r0, 80007fc <PE_Reset_HardReset+0x12>
 80007f4:	7b20      	ldrb	r0, [r4, #12]
 80007f6:	215b      	movs	r1, #91	@ 0x5b
 80007f8:	f7ff fe43 	bl	8000482 <USBPD_PE_Notification>
 80007fc:	4620      	mov	r0, r4
 80007fe:	f000 f81e 	bl	800083e <PE_Reset_ZI>
 8000802:	6820      	ldr	r0, [r4, #0]
 8000804:	7903      	ldrb	r3, [r0, #4]
 8000806:	7b20      	ldrb	r0, [r4, #12]
 8000808:	f003 0303 	and.w	r3, r3, #3
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	f001 f9af 	bl	8001b72 <USBPD_PRL_SetHeader>
 8000814:	f000 f80d 	bl	8000832 <.text_27>
 8000818:	0889      	lsrs	r1, r1, #2
 800081a:	6822      	ldr	r2, [r4, #0]
 800081c:	7912      	ldrb	r2, [r2, #4]
 800081e:	f002 0203 	and.w	r2, r2, #3
 8000822:	ea42 0181 	orr.w	r1, r2, r1, lsl #2
 8000826:	6001      	str	r1, [r0, #0]
 8000828:	7b20      	ldrb	r0, [r4, #12]
 800082a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800082e:	f001 bc33 	b.w	8002098 <USBPD_PRL_Reset>

08000832 <.text_27>:
 8000832:	6860      	ldr	r0, [r4, #4]
 8000834:	6801      	ldr	r1, [r0, #0]
 8000836:	f021 0108 	bic.w	r1, r1, #8
 800083a:	6001      	str	r1, [r0, #0]
 800083c:	4770      	bx	lr

0800083e <PE_Reset_ZI>:
 800083e:	b538      	push	{r3, r4, r5, lr}
 8000840:	4604      	mov	r4, r0
 8000842:	2000      	movs	r0, #0
 8000844:	9000      	str	r0, [sp, #0]
 8000846:	2100      	movs	r1, #0
 8000848:	6860      	ldr	r0, [r4, #4]
 800084a:	6802      	ldr	r2, [r0, #0]
 800084c:	f022 0210 	bic.w	r2, r2, #16
 8000850:	6002      	str	r2, [r0, #0]
 8000852:	4620      	mov	r0, r4
 8000854:	f000 fa1b 	bl	8000c8e <PE_SetPowerNegotiation>
 8000858:	216c      	movs	r1, #108	@ 0x6c
 800085a:	f104 0010 	add.w	r0, r4, #16
 800085e:	f018 f9d6 	bl	8018c0e <__aeabi_memclr>
 8000862:	7b20      	ldrb	r0, [r4, #12]
 8000864:	68a4      	ldr	r4, [r4, #8]
 8000866:	69a5      	ldr	r5, [r4, #24]
 8000868:	2304      	movs	r3, #4
 800086a:	466a      	mov	r2, sp
 800086c:	2102      	movs	r1, #2
 800086e:	47a8      	blx	r5
 8000870:	bd31      	pop	{r0, r4, r5, pc}

08000872 <PE_Reset_Counter>:
 8000872:	2102      	movs	r1, #2
 8000874:	307c      	adds	r0, #124	@ 0x7c
 8000876:	f018 b9ca 	b.w	8018c0e <__aeabi_memclr>

0800087a <PE_ExtRevisionInteroperability>:
 800087a:	b538      	push	{r3, r4, r5, lr}
 800087c:	f8df 3474 	ldr.w	r3, [pc, #1140]	@ 8000cf4 <.text_46>
 8000880:	4602      	mov	r2, r0
 8000882:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000886:	6865      	ldr	r5, [r4, #4]
 8000888:	682c      	ldr	r4, [r5, #0]
 800088a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800088e:	f004 0503 	and.w	r5, r4, #3
 8000892:	42a9      	cmp	r1, r5
 8000894:	bfa8      	it	ge
 8000896:	4629      	movge	r1, r5
 8000898:	f361 0401 	bfi	r4, r1, #0, #2
 800089c:	6851      	ldr	r1, [r2, #4]
 800089e:	600c      	str	r4, [r1, #0]
 80008a0:	6851      	ldr	r1, [r2, #4]
 80008a2:	680b      	ldr	r3, [r1, #0]
 80008a4:	f003 0403 	and.w	r4, r3, #3
 80008a8:	2c01      	cmp	r4, #1
 80008aa:	bf0c      	ite	eq
 80008ac:	2400      	moveq	r4, #0
 80008ae:	2420      	movne	r4, #32
 80008b0:	f023 0320 	bic.w	r3, r3, #32
 80008b4:	4323      	orrs	r3, r4
 80008b6:	600b      	str	r3, [r1, #0]
 80008b8:	6852      	ldr	r2, [r2, #4]
 80008ba:	7811      	ldrb	r1, [r2, #0]
 80008bc:	e8bd 4034 	ldmia.w	sp!, {r2, r4, r5, lr}
 80008c0:	f001 0103 	and.w	r1, r1, #3
 80008c4:	f001 b97f 	b.w	8001bc6 <USBPD_PRL_SetHeaderSpecification>

080008c8 <PE_PRL_FastRoleSwapReception>:
 80008c8:	f8df 1428 	ldr.w	r1, [pc, #1064]	@ 8000cf4 <.text_46>
 80008cc:	4602      	mov	r2, r0
 80008ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80008d2:	7e0a      	ldrb	r2, [r1, #24]
 80008d4:	2a09      	cmp	r2, #9
 80008d6:	d00b      	beq.n	80008f0 <__iar_annotation$$tailcall+0x2>
 80008d8:	684a      	ldr	r2, [r1, #4]
 80008da:	6813      	ldr	r3, [r2, #0]
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	690a      	ldr	r2, [r1, #16]
 80008e4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80008e8:	610a      	str	r2, [r1, #16]
 80008ea:	6889      	ldr	r1, [r1, #8]
 80008ec:	6a8a      	ldr	r2, [r1, #40]	@ 0x28

080008ee <__iar_annotation$$tailcall>:
 80008ee:	4710      	bx	r2
 80008f0:	4770      	bx	lr

080008f2 <PE_PRL_PostReceiveEvent>:
 80008f2:	b570      	push	{r4, r5, r6, lr}
 80008f4:	f8df 23fc 	ldr.w	r2, [pc, #1020]	@ 8000cf4 <.text_46>
 80008f8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80008fc:	2000      	movs	r0, #0
 80008fe:	2400      	movs	r4, #0
 8000900:	191a      	adds	r2, r3, r4
 8000902:	f892 2071 	ldrb.w	r2, [r2, #113]	@ 0x71
 8000906:	b122      	cbz	r2, 8000912 <PE_PRL_PostReceiveEvent+0x20>
 8000908:	1c64      	adds	r4, r4, #1
 800090a:	b2e4      	uxtb	r4, r4
 800090c:	2c01      	cmp	r4, #1
 800090e:	d9f7      	bls.n	8000900 <PE_PRL_PostReceiveEvent+0xe>
 8000910:	bd70      	pop	{r4, r5, r6, pc}
 8000912:	191a      	adds	r2, r3, r4
 8000914:	2020      	movs	r0, #32
 8000916:	191d      	adds	r5, r3, r4
 8000918:	f882 0071 	strb.w	r0, [r2, #113]	@ 0x71
 800091c:	2001      	movs	r0, #1
 800091e:	f895 6071 	ldrb.w	r6, [r5, #113]	@ 0x71
 8000922:	fa00 f101 	lsl.w	r1, r0, r1
 8000926:	1918      	adds	r0, r3, r4
 8000928:	4331      	orrs	r1, r6
 800092a:	f880 1071 	strb.w	r1, [r0, #113]	@ 0x71
 800092e:	2001      	movs	r0, #1
 8000930:	bd70      	pop	{r4, r5, r6, pc}

08000932 <PE_PRL_PostReceiveEventError>:
 8000932:	f8df 13c0 	ldr.w	r1, [pc, #960]	@ 8000cf4 <.text_46>
 8000936:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800093a:	2100      	movs	r1, #0
 800093c:	b2ca      	uxtb	r2, r1
 800093e:	4402      	add	r2, r0
 8000940:	f892 3071 	ldrb.w	r3, [r2, #113]	@ 0x71
 8000944:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000948:	2b20      	cmp	r3, #32
 800094a:	d004      	beq.n	8000956 <PE_PRL_PostReceiveEventError+0x24>
 800094c:	1c49      	adds	r1, r1, #1
 800094e:	b2ca      	uxtb	r2, r1
 8000950:	2a02      	cmp	r2, #2
 8000952:	d3f3      	bcc.n	800093c <PE_PRL_PostReceiveEventError+0xa>
 8000954:	4770      	bx	lr
 8000956:	2000      	movs	r0, #0
 8000958:	f882 0071 	strb.w	r0, [r2, #113]	@ 0x71
 800095c:	4770      	bx	lr

0800095e <PE_PRL_PostReceiveEventCopy>:
 800095e:	b510      	push	{r4, lr}
 8000960:	f8df 2390 	ldr.w	r2, [pc, #912]	@ 8000cf4 <.text_46>
 8000964:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000968:	2200      	movs	r2, #0
 800096a:	b2d3      	uxtb	r3, r2
 800096c:	18c4      	adds	r4, r0, r3
 800096e:	f894 4071 	ldrb.w	r4, [r4, #113]	@ 0x71
 8000972:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8000976:	2c20      	cmp	r4, #32
 8000978:	d004      	beq.n	8000984 <PE_PRL_PostReceiveEventCopy+0x26>
 800097a:	1c52      	adds	r2, r2, #1
 800097c:	b2d3      	uxtb	r3, r2
 800097e:	2b02      	cmp	r3, #2
 8000980:	d3f3      	bcc.n	800096a <PE_PRL_PostReceiveEventCopy+0xc>
 8000982:	bd10      	pop	{r4, pc}
 8000984:	221e      	movs	r2, #30
 8000986:	fb12 f303 	smulbb	r3, r2, r3
 800098a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800098e:	4403      	add	r3, r0
 8000990:	f103 0035 	add.w	r0, r3, #53	@ 0x35
 8000994:	f018 b94c 	b.w	8018c30 <__aeabi_memcpy>

08000998 <PE_PRL_PostReceiveEventComplete>:
 8000998:	b538      	push	{r3, r4, r5, lr}
 800099a:	f8df 1358 	ldr.w	r1, [pc, #856]	@ 8000cf4 <.text_46>
 800099e:	4602      	mov	r2, r0
 80009a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009a4:	2100      	movs	r1, #0
 80009a6:	1854      	adds	r4, r2, r1
 80009a8:	1c4b      	adds	r3, r1, #1
 80009aa:	f894 5071 	ldrb.w	r5, [r4, #113]	@ 0x71
 80009ae:	f005 0560 	and.w	r5, r5, #96	@ 0x60
 80009b2:	2d20      	cmp	r5, #32
 80009b4:	d003      	beq.n	80009be <PE_PRL_PostReceiveEventComplete+0x26>
 80009b6:	b2d9      	uxtb	r1, r3
 80009b8:	2902      	cmp	r1, #2
 80009ba:	d3f4      	bcc.n	80009a6 <PE_PRL_PostReceiveEventComplete+0xe>
 80009bc:	bd31      	pop	{r0, r4, r5, pc}
 80009be:	f894 4071 	ldrb.w	r4, [r4, #113]	@ 0x71
 80009c2:	1855      	adds	r5, r2, r1
 80009c4:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 80009c8:	f885 4071 	strb.w	r4, [r5, #113]	@ 0x71
 80009cc:	f892 1034 	ldrb.w	r1, [r2, #52]	@ 0x34
 80009d0:	b909      	cbnz	r1, 80009d6 <PE_PRL_PostReceiveEventComplete+0x3e>
 80009d2:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
 80009d6:	6891      	ldr	r1, [r2, #8]
 80009d8:	e702      	b.n	80007e0 <.text_24>

080009da <PE_SubStateMachine_Generic>:
 80009da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009de:	b08c      	sub	sp, #48	@ 0x30
 80009e0:	4604      	mov	r4, r0
 80009e2:	2000      	movs	r0, #0
 80009e4:	9003      	str	r0, [sp, #12]
 80009e6:	2502      	movs	r5, #2
 80009e8:	7b60      	ldrb	r0, [r4, #13]
 80009ea:	2801      	cmp	r0, #1
 80009ec:	460e      	mov	r6, r1
 80009ee:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 80009f2:	f248 081b 	movw	r8, #32795	@ 0x801b
 80009f6:	f000 80eb 	beq.w	8000bd0 <PE_SubStateMachine_Generic+0x1f6>
 80009fa:	2818      	cmp	r0, #24
 80009fc:	d01b      	beq.n	8000a36 <PE_SubStateMachine_Generic+0x5c>
 80009fe:	2819      	cmp	r0, #25
 8000a00:	d022      	beq.n	8000a48 <PE_SubStateMachine_Generic+0x6e>
 8000a02:	281d      	cmp	r0, #29
 8000a04:	d05f      	beq.n	8000ac6 <PE_SubStateMachine_Generic+0xec>
 8000a06:	2827      	cmp	r0, #39	@ 0x27
 8000a08:	d079      	beq.n	8000afe <PE_SubStateMachine_Generic+0x124>
 8000a0a:	2828      	cmp	r0, #40	@ 0x28
 8000a0c:	f000 8084 	beq.w	8000b18 <PE_SubStateMachine_Generic+0x13e>
 8000a10:	2829      	cmp	r0, #41	@ 0x29
 8000a12:	f000 808b 	beq.w	8000b2c <PE_SubStateMachine_Generic+0x152>
 8000a16:	284b      	cmp	r0, #75	@ 0x4b
 8000a18:	f000 8090 	beq.w	8000b3c <PE_SubStateMachine_Generic+0x162>
 8000a1c:	2864      	cmp	r0, #100	@ 0x64
 8000a1e:	f000 80de 	beq.w	8000bde <PE_SubStateMachine_Generic+0x204>
 8000a22:	2867      	cmp	r0, #103	@ 0x67
 8000a24:	f000 809d 	beq.w	8000b62 <PE_SubStateMachine_Generic+0x188>
 8000a28:	2868      	cmp	r0, #104	@ 0x68
 8000a2a:	f000 80a8 	beq.w	8000b7e <PE_SubStateMachine_Generic+0x1a4>
 8000a2e:	2874      	cmp	r0, #116	@ 0x74
 8000a30:	f000 80fb 	beq.w	8000c2a <PE_SubStateMachine_Generic+0x250>
 8000a34:	e100      	b.n	8000c38 <PE_SubStateMachine_Generic+0x25e>
 8000a36:	9500      	str	r5, [sp, #0]
 8000a38:	2319      	movs	r3, #25
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	f000 f902 	bl	8000c44 <.text_37>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d168      	bne.n	8000b16 <PE_SubStateMachine_Generic+0x13c>
 8000a44:	2007      	movs	r0, #7
 8000a46:	e095      	b.n	8000b74 <PE_SubStateMachine_Generic+0x19a>
 8000a48:	7830      	ldrb	r0, [r6, #0]
 8000a4a:	2811      	cmp	r0, #17
 8000a4c:	d137      	bne.n	8000abe <PE_SubStateMachine_Generic+0xe4>
 8000a4e:	88b9      	ldrh	r1, [r7, #4]
 8000a50:	0bc8      	lsrs	r0, r1, #15
 8000a52:	d11e      	bne.n	8000a92 <PE_SubStateMachine_Generic+0xb8>
 8000a54:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000a58:	b1d8      	cbz	r0, 8000a92 <PE_SubStateMachine_Generic+0xb8>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	f000 011f 	and.w	r1, r0, #31
 8000a60:	2904      	cmp	r1, #4
 8000a62:	d116      	bne.n	8000a92 <PE_SubStateMachine_Generic+0xb8>
 8000a64:	68a5      	ldr	r5, [r4, #8]
 8000a66:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8000a6a:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8000a6e:	68b8      	ldr	r0, [r7, #8]
 8000a70:	1c82      	adds	r2, r0, #2
 8000a72:	7b20      	ldrb	r0, [r4, #12]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	2105      	movs	r1, #5
 8000a78:	47e0      	blx	ip
 8000a7a:	7830      	ldrb	r0, [r6, #0]
 8000a7c:	2814      	cmp	r0, #20
 8000a7e:	d001      	beq.n	8000a84 <PE_SubStateMachine_Generic+0xaa>
 8000a80:	f000 f8e8 	bl	8000c54 <.text_39>
 8000a84:	2003      	movs	r0, #3
 8000a86:	7360      	strb	r0, [r4, #13]
 8000a88:	2107      	movs	r1, #7
 8000a8a:	7b20      	ldrb	r0, [r4, #12]
 8000a8c:	f7ff fcf9 	bl	8000482 <USBPD_PE_Notification>
 8000a90:	2500      	movs	r5, #0
 8000a92:	88b8      	ldrh	r0, [r7, #4]
 8000a94:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8000a98:	d111      	bne.n	8000abe <PE_SubStateMachine_Generic+0xe4>
 8000a9a:	f000 001f 	and.w	r0, r0, #31
 8000a9e:	2804      	cmp	r0, #4
 8000aa0:	bf18      	it	ne
 8000aa2:	2810      	cmpne	r0, #16
 8000aa4:	d10b      	bne.n	8000abe <PE_SubStateMachine_Generic+0xe4>
 8000aa6:	7830      	ldrb	r0, [r6, #0]
 8000aa8:	2814      	cmp	r0, #20
 8000aaa:	d001      	beq.n	8000ab0 <PE_SubStateMachine_Generic+0xd6>
 8000aac:	f000 f8d2 	bl	8000c54 <.text_39>
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	7360      	strb	r0, [r4, #13]
 8000ab4:	2108      	movs	r1, #8
 8000ab6:	7b20      	ldrb	r0, [r4, #12]
 8000ab8:	f7ff fce3 	bl	8000482 <USBPD_PE_Notification>
 8000abc:	2500      	movs	r5, #0
 8000abe:	f000 f8c5 	bl	8000c4c <.text_38>
 8000ac2:	d128      	bne.n	8000b16 <PE_SubStateMachine_Generic+0x13c>
 8000ac4:	e0b4      	b.n	8000c30 <PE_SubStateMachine_Generic+0x256>
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	9104      	str	r1, [sp, #16]
 8000aca:	ab04      	add	r3, sp, #16
 8000acc:	68a6      	ldr	r6, [r4, #8]
 8000ace:	7b20      	ldrb	r0, [r4, #12]
 8000ad0:	6977      	ldr	r7, [r6, #20]
 8000ad2:	aa05      	add	r2, sp, #20
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	47b8      	blx	r7
 8000ad8:	9804      	ldr	r0, [sp, #16]
 8000ada:	2104      	movs	r1, #4
 8000adc:	f000 f8fa 	bl	8000cd4 <PE_CheckDataSizeFromGetDataInfo>
 8000ae0:	b108      	cbz	r0, 8000ae6 <PE_SubStateMachine_Generic+0x10c>
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	e0a9      	b.n	8000c3a <PE_SubStateMachine_Generic+0x260>
 8000ae6:	9a04      	ldr	r2, [sp, #16]
 8000ae8:	f000 f8b8 	bl	8000c5c <.text_40>
 8000aec:	ab05      	add	r3, sp, #20
 8000aee:	2204      	movs	r2, #4
 8000af0:	4620      	mov	r0, r4
 8000af2:	f000 f95e 	bl	8000db2 <PE_Send_DataMessage>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d10d      	bne.n	8000b16 <PE_SubStateMachine_Generic+0x13c>
 8000afa:	210a      	movs	r1, #10
 8000afc:	e091      	b.n	8000c22 <PE_SubStateMachine_Generic+0x248>
 8000afe:	2012      	movs	r0, #18
 8000b00:	7620      	strb	r0, [r4, #24]
 8000b02:	2105      	movs	r1, #5
 8000b04:	7b20      	ldrb	r0, [r4, #12]
 8000b06:	f001 faba 	bl	800207e <USBDPD_PRL_BistCarrierEyeMode>
 8000b0a:	2028      	movs	r0, #40	@ 0x28
 8000b0c:	7360      	strb	r0, [r4, #13]
 8000b0e:	f248 012d 	movw	r1, #32813	@ 0x802d
 8000b12:	8361      	strh	r1, [r4, #26]
 8000b14:	252d      	movs	r5, #45	@ 0x2d
 8000b16:	e091      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b18:	f000 f898 	bl	8000c4c <.text_38>
 8000b1c:	d1fb      	bne.n	8000b16 <PE_SubStateMachine_Generic+0x13c>
 8000b1e:	7b20      	ldrb	r0, [r4, #12]
 8000b20:	2105      	movs	r1, #5
 8000b22:	f001 fab2 	bl	800208a <USBDPD_PRL_BistCarrierEyeModeExit>
 8000b26:	2000      	movs	r0, #0
 8000b28:	8360      	strh	r0, [r4, #26]
 8000b2a:	e081      	b.n	8000c30 <PE_SubStateMachine_Generic+0x256>
 8000b2c:	7831      	ldrb	r1, [r6, #0]
 8000b2e:	2914      	cmp	r1, #20
 8000b30:	d003      	beq.n	8000b3a <PE_SubStateMachine_Generic+0x160>
 8000b32:	2014      	movs	r0, #20
 8000b34:	7030      	strb	r0, [r6, #0]
 8000b36:	f000 f88f 	bl	8000c58 <.text_39+0x4>
 8000b3a:	e07f      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b3c:	68a6      	ldr	r6, [r4, #8]
 8000b3e:	7b20      	ldrb	r0, [r4, #12]
 8000b40:	6977      	ldr	r7, [r6, #20]
 8000b42:	ab03      	add	r3, sp, #12
 8000b44:	aa04      	add	r2, sp, #16
 8000b46:	2114      	movs	r1, #20
 8000b48:	47b8      	blx	r7
 8000b4a:	9803      	ldr	r0, [sp, #12]
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d073      	beq.n	8000c38 <PE_SubStateMachine_Generic+0x25e>
 8000b50:	9a03      	ldr	r2, [sp, #12]
 8000b52:	f000 f883 	bl	8000c5c <.text_40>
 8000b56:	ab04      	add	r3, sp, #16
 8000b58:	220c      	movs	r2, #12
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f000 f929 	bl	8000db2 <PE_Send_DataMessage>
 8000b60:	e06c      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b62:	9500      	str	r5, [sp, #0]
 8000b64:	2368      	movs	r3, #104	@ 0x68
 8000b66:	7879      	ldrb	r1, [r7, #1]
 8000b68:	2218      	movs	r2, #24
 8000b6a:	f000 f86c 	bl	8000c46 <.text_37+0x2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d164      	bne.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b72:	200f      	movs	r0, #15
 8000b74:	7620      	strb	r0, [r4, #24]
 8000b76:	f8a4 801a 	strh.w	r8, [r4, #26]
 8000b7a:	251b      	movs	r5, #27
 8000b7c:	e05e      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b7e:	7830      	ldrb	r0, [r6, #0]
 8000b80:	2814      	cmp	r0, #20
 8000b82:	d020      	beq.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000b84:	7839      	ldrb	r1, [r7, #0]
 8000b86:	7878      	ldrb	r0, [r7, #1]
 8000b88:	4281      	cmp	r1, r0
 8000b8a:	d11c      	bne.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000b8c:	88b9      	ldrh	r1, [r7, #4]
 8000b8e:	0bc8      	lsrs	r0, r1, #15
 8000b90:	d119      	bne.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000b92:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000b96:	b1b0      	cbz	r0, 8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000b98:	7938      	ldrb	r0, [r7, #4]
 8000b9a:	f000 001f 	and.w	r0, r0, #31
 8000b9e:	280c      	cmp	r0, #12
 8000ba0:	d111      	bne.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000ba2:	68b8      	ldr	r0, [r7, #8]
 8000ba4:	68a5      	ldr	r5, [r4, #8]
 8000ba6:	69af      	ldr	r7, [r5, #24]
 8000ba8:	1c82      	adds	r2, r0, #2
 8000baa:	7b20      	ldrb	r0, [r4, #12]
 8000bac:	2304      	movs	r3, #4
 8000bae:	2114      	movs	r1, #20
 8000bb0:	47b8      	blx	r7
 8000bb2:	2003      	movs	r0, #3
 8000bb4:	7360      	strb	r0, [r4, #13]
 8000bb6:	2500      	movs	r5, #0
 8000bb8:	7831      	ldrb	r1, [r6, #0]
 8000bba:	2914      	cmp	r1, #20
 8000bbc:	d003      	beq.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000bbe:	2014      	movs	r0, #20
 8000bc0:	7030      	strb	r0, [r6, #0]
 8000bc2:	f000 f849 	bl	8000c58 <.text_39+0x4>
 8000bc6:	f000 f841 	bl	8000c4c <.text_38>
 8000bca:	d137      	bne.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000bcc:	2111      	movs	r1, #17
 8000bce:	e030      	b.n	8000c32 <PE_SubStateMachine_Generic+0x258>
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	9000      	str	r0, [sp, #0]
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	2210      	movs	r2, #16
 8000bd8:	f000 f834 	bl	8000c44 <.text_37>
 8000bdc:	e02e      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000bde:	68a6      	ldr	r6, [r4, #8]
 8000be0:	7b20      	ldrb	r0, [r4, #12]
 8000be2:	6977      	ldr	r7, [r6, #20]
 8000be4:	ab03      	add	r3, sp, #12
 8000be6:	f104 0282 	add.w	r2, r4, #130	@ 0x82
 8000bea:	2113      	movs	r1, #19
 8000bec:	47b8      	blx	r7
 8000bee:	9803      	ldr	r0, [sp, #12]
 8000bf0:	2118      	movs	r1, #24
 8000bf2:	f000 f86f 	bl	8000cd4 <PE_CheckDataSizeFromGetDataInfo>
 8000bf6:	b9f8      	cbnz	r0, 8000c38 <PE_SubStateMachine_Generic+0x25e>
 8000bf8:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	7041      	strb	r1, [r0, #1]
 8000c00:	7001      	strb	r1, [r0, #0]
 8000c02:	2000      	movs	r0, #0
 8000c04:	9a03      	ldr	r2, [sp, #12]
 8000c06:	9002      	str	r0, [sp, #8]
 8000c08:	1d12      	adds	r2, r2, #4
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	b292      	uxth	r2, r2
 8000c0e:	9101      	str	r1, [sp, #4]
 8000c10:	9200      	str	r2, [sp, #0]
 8000c12:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8000c16:	220f      	movs	r2, #15
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f000 f960 	bl	8000ee0 <PE_Send_ExtendedMessage>
 8000c20:	2161      	movs	r1, #97	@ 0x61
 8000c22:	7b20      	ldrb	r0, [r4, #12]
 8000c24:	f7ff fc2d 	bl	8000482 <USBPD_PE_Notification>
 8000c28:	e008      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000c2a:	f000 f80f 	bl	8000c4c <.text_38>
 8000c2e:	d105      	bne.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000c30:	2103      	movs	r1, #3
 8000c32:	7361      	strb	r1, [r4, #13]
 8000c34:	2500      	movs	r5, #0
 8000c36:	e001      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000c38:	2001      	movs	r0, #1
 8000c3a:	7360      	strb	r0, [r4, #13]
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	b00c      	add	sp, #48	@ 0x30
 8000c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c44 <.text_37>:
 8000c44:	2100      	movs	r1, #0
 8000c46:	4620      	mov	r0, r4
 8000c48:	f000 b886 	b.w	8000d58 <PE_Send_CtrlMessage>

08000c4c <.text_38>:
 8000c4c:	8b60      	ldrh	r0, [r4, #26]
 8000c4e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8000c52:	4770      	bx	lr

08000c54 <.text_39>:
 8000c54:	2114      	movs	r1, #20
 8000c56:	7031      	strb	r1, [r6, #0]
 8000c58:	4620      	mov	r0, r4
 8000c5a:	e530      	b.n	80006be <PE_Clear_RxEvent>

08000c5c <.text_40>:
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	0892      	lsrs	r2, r2, #2
 8000c60:	2100      	movs	r1, #0
 8000c62:	9001      	str	r0, [sp, #4]
 8000c64:	9200      	str	r2, [sp, #0]
 8000c66:	9102      	str	r1, [sp, #8]
 8000c68:	4770      	bx	lr

08000c6a <PE_UpdateTimer>:
 8000c6a:	b510      	push	{r4, lr}
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f3c2 040e 	ubfx	r4, r2, #0, #15
 8000c72:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000c76:	42a1      	cmp	r1, r4
 8000c78:	bfb8      	it	lt
 8000c7a:	1a50      	sublt	r0, r2, r1
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	bd10      	pop	{r4, pc}

08000c80 <PE_CallHardResetCallback>:
 8000c80:	6883      	ldr	r3, [r0, #8]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	7b00      	ldrbne	r0, [r0, #12]

08000c8a <__iar_annotation$$tailcall>:
 8000c8a:	4718      	bxne	r3
 8000c8c:	4770      	bx	lr

08000c8e <PE_SetPowerNegotiation>:
 8000c8e:	6842      	ldr	r2, [r0, #4]
 8000c90:	6813      	ldr	r3, [r2, #0]
 8000c92:	f3c3 2202 	ubfx	r2, r3, #8, #3
 8000c96:	4291      	cmp	r1, r2
 8000c98:	d007      	beq.n	8000caa <PE_SetPowerNegotiation+0x1c>
 8000c9a:	6842      	ldr	r2, [r0, #4]
 8000c9c:	f361 230a 	bfi	r3, r1, #8, #3
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	215a      	movs	r1, #90	@ 0x5a
 8000ca4:	7b00      	ldrb	r0, [r0, #12]
 8000ca6:	f7ff bbec 	b.w	8000482 <USBPD_PE_Notification>
 8000caa:	4770      	bx	lr

08000cac <PE_SetPowerNegociation>:
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	6860      	ldr	r0, [r4, #4]
 8000cb4:	6802      	ldr	r2, [r0, #0]
 8000cb6:	f3c2 2002 	ubfx	r0, r2, #8, #3
 8000cba:	4285      	cmp	r5, r0
 8000cbc:	d003      	beq.n	8000cc6 <PE_SetPowerNegociation+0x1a>
 8000cbe:	7b20      	ldrb	r0, [r4, #12]
 8000cc0:	215a      	movs	r1, #90	@ 0x5a
 8000cc2:	f7ff fbde 	bl	8000482 <USBPD_PE_Notification>
 8000cc6:	6860      	ldr	r0, [r4, #4]
 8000cc8:	6801      	ldr	r1, [r0, #0]
 8000cca:	f365 210a 	bfi	r1, r5, #8, #3
 8000cce:	6001      	str	r1, [r0, #0]
 8000cd0:	bd31      	pop	{r0, r4, r5, pc}
	...

08000cd4 <PE_CheckDataSizeFromGetDataInfo>:
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	d208      	bcs.n	8000cee <PE_CheckDataSizeFromGetDataInfo+0x1a>
 8000cdc:	2018      	movs	r0, #24
 8000cde:	4c06      	ldr	r4, [pc, #24]	@ (8000cf8 <.text_47>)
 8000ce0:	a307      	add	r3, pc, #28	@ (adr r3, 8000d00 <.text_49>)
 8000ce2:	6825      	ldr	r5, [r4, #0]
 8000ce4:	9000      	str	r0, [sp, #0]
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2006      	movs	r0, #6
 8000cea:	47a8      	blx	r5
 8000cec:	2202      	movs	r2, #2
 8000cee:	4610      	mov	r0, r2
 8000cf0:	bd32      	pop	{r1, r4, r5, pc}
	...

08000cf4 <.text_46>:
 8000cf4:	2000050c 	.word	0x2000050c

08000cf8 <.text_47>:
 8000cf8:	20000000 	.word	0x20000000

08000cfc <.text_48>:
 8000cfc:	0801c284 	.word	0x0801c284

08000d00 <.text_49>:
 8000d00:	61746144 	.word	0x61746144
 8000d04:	7a695320 	.word	0x7a695320
 8000d08:	73692065 	.word	0x73692065
 8000d0c:	746f6e20 	.word	0x746f6e20
 8000d10:	726f6320 	.word	0x726f6320
 8000d14:	74636572 	.word	0x74636572
 8000d18:	00          	.byte	0x00
 8000d19:	00          	.byte	0x00
	...

08000d1c <USBPD_PE_SetTrace>:
 8000d1c:	0001      	movs	r1, r0
 8000d1e:	4906      	ldr	r1, [pc, #24]	@ (8000d38 <.text_5>)
 8000d20:	bf08      	it	eq
 8000d22:	f20f 0031 	addweq	r0, pc, #49	@ 0x31
 8000d26:	6008      	str	r0, [r1, #0]
 8000d28:	4770      	bx	lr

08000d2a <USBPD_PE_CheckLIB>:
 8000d2a:	4601      	mov	r1, r0
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	4a03      	ldr	r2, [pc, #12]	@ (8000d3c <.text_6>)
 8000d30:	4291      	cmp	r1, r2
 8000d32:	bf08      	it	eq
 8000d34:	2001      	moveq	r0, #1
 8000d36:	4770      	bx	lr

08000d38 <.text_5>:
 8000d38:	20000000 	.word	0x20000000

08000d3c <.text_6>:
 8000d3c:	30410004 	.word	0x30410004

08000d40 <USBPD_PE_GetMemoryConsumption>:
 8000d40:	b510      	push	{r4, lr}
 8000d42:	f000 ff14 	bl	8001b6e <USBPD_PRL_GetMemoryConsumption>
 8000d46:	4604      	mov	r4, r0
 8000d48:	f7ff fb1e 	bl	8000388 <USBPD_CAD_GetMemoryConsumption>
 8000d4c:	1904      	adds	r4, r0, r4
 8000d4e:	f504 60ff 	add.w	r0, r4, #2040	@ 0x7f8
 8000d52:	bd10      	pop	{r4, pc}

08000d54 <PE_Trace_Empty>:
 8000d54:	4770      	bx	lr
	...

08000d58 <PE_Send_CtrlMessage>:
 8000d58:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8000d5c:	9c08      	ldr	r4, [sp, #32]
 8000d5e:	4606      	mov	r6, r0
 8000d60:	4688      	mov	r8, r1
 8000d62:	4617      	mov	r7, r2
 8000d64:	461d      	mov	r5, r3
 8000d66:	f000 f81f 	bl	8000da8 <.text_3>
 8000d6a:	b190      	cbz	r0, 8000d92 <PE_Send_CtrlMessage+0x3a>
 8000d6c:	9401      	str	r4, [sp, #4]
 8000d6e:	2002      	movs	r0, #2
 8000d70:	9000      	str	r0, [sp, #0]
 8000d72:	f106 037e 	add.w	r3, r6, #126	@ 0x7e
 8000d76:	7b30      	ldrb	r0, [r6, #12]
 8000d78:	463a      	mov	r2, r7
 8000d7a:	4641      	mov	r1, r8
 8000d7c:	f000 ff2c 	bl	8001bd8 <USBPD_PRL_SendMessage>
 8000d80:	2803      	cmp	r0, #3
 8000d82:	d0f0      	beq.n	8000d66 <PE_Send_CtrlMessage+0xe>
 8000d84:	2810      	cmp	r0, #16
 8000d86:	d00d      	beq.n	8000da4 <PE_Send_CtrlMessage+0x4c>
 8000d88:	2f0d      	cmp	r7, #13
 8000d8a:	bf0c      	ite	eq
 8000d8c:	2201      	moveq	r2, #1
 8000d8e:	2200      	movne	r2, #0
 8000d90:	e002      	b.n	8000d98 <PE_Send_CtrlMessage+0x40>
 8000d92:	7370      	strb	r0, [r6, #13]
 8000d94:	2010      	movs	r0, #16
 8000d96:	e005      	b.n	8000da4 <PE_Send_CtrlMessage+0x4c>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	9500      	str	r5, [sp, #0]
 8000d9c:	4641      	mov	r1, r8
 8000d9e:	4630      	mov	r0, r6
 8000da0:	f000 fa6c 	bl	800127c <PE_CheckSendMessageStatus>
 8000da4:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08000da8 <.text_3>:
 8000da8:	6870      	ldr	r0, [r6, #4]
 8000daa:	6801      	ldr	r1, [r0, #0]
 8000dac:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8000db0:	4770      	bx	lr

08000db2 <PE_Send_DataMessage>:
 8000db2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000db4:	4604      	mov	r4, r0
 8000db6:	9f08      	ldr	r7, [sp, #32]
 8000db8:	460d      	mov	r5, r1
 8000dba:	4616      	mov	r6, r2
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	e010      	b.n	8000de2 <PE_Send_DataMessage+0x30>
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8000dc6:	f8d3 c000 	ldr.w	ip, [r3]
 8000dca:	440a      	add	r2, r1
 8000dcc:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8000dd0:	1c49      	adds	r1, r1, #1
 8000dd2:	fa2c fc0e 	lsr.w	ip, ip, lr
 8000dd6:	2904      	cmp	r1, #4
 8000dd8:	f882 c080 	strb.w	ip, [r2, #128]	@ 0x80
 8000ddc:	d3f1      	bcc.n	8000dc2 <PE_Send_DataMessage+0x10>
 8000dde:	1d1b      	adds	r3, r3, #4
 8000de0:	1c40      	adds	r0, r0, #1
 8000de2:	42b8      	cmp	r0, r7
 8000de4:	d3ec      	bcc.n	8000dc0 <PE_Send_DataMessage+0xe>
 8000de6:	6860      	ldr	r0, [r4, #4]
 8000de8:	f7ff ffdf 	bl	8000daa <.text_3+0x2>
 8000dec:	b1d8      	cbz	r0, 8000e26 <PE_Send_DataMessage+0x74>
 8000dee:	f89d 0028 	ldrb.w	r0, [sp, #40]	@ 0x28
 8000df2:	9001      	str	r0, [sp, #4]
 8000df4:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8000df8:	00b8      	lsls	r0, r7, #2
 8000dfa:	1c80      	adds	r0, r0, #2
 8000dfc:	b280      	uxth	r0, r0
 8000dfe:	9000      	str	r0, [sp, #0]
 8000e00:	4632      	mov	r2, r6
 8000e02:	7b20      	ldrb	r0, [r4, #12]
 8000e04:	4629      	mov	r1, r5
 8000e06:	f000 fee7 	bl	8001bd8 <USBPD_PRL_SendMessage>
 8000e0a:	2803      	cmp	r0, #3
 8000e0c:	d0eb      	beq.n	8000de6 <PE_Send_DataMessage+0x34>
 8000e0e:	2810      	cmp	r0, #16
 8000e10:	d008      	beq.n	8000e24 <PE_Send_DataMessage+0x72>
 8000e12:	f89d 1024 	ldrb.w	r1, [sp, #36]	@ 0x24
 8000e16:	9100      	str	r1, [sp, #0]
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f000 fa2c 	bl	800127c <PE_CheckSendMessageStatus>
 8000e24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000e26:	2010      	movs	r0, #16
 8000e28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000e2a <PE_Check_ExtendedMessage>:
 8000e2a:	b570      	push	{r4, r5, r6, lr}
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8000e30:	7881      	ldrb	r1, [r0, #2]
 8000e32:	78c0      	ldrb	r0, [r0, #3]
 8000e34:	eb01 2200 	add.w	r2, r1, r0, lsl #8
 8000e38:	f104 0174 	add.w	r1, r4, #116	@ 0x74
 8000e3c:	800a      	strh	r2, [r1, #0]
 8000e3e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8000e42:	f000 001f 	and.w	r0, r0, #31
 8000e46:	7088      	strb	r0, [r1, #2]
 8000e48:	f3c2 20c3 	ubfx	r0, r2, #11, #4
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	bf1e      	ittt	ne
 8000e50:	f3c2 2080 	ubfxne	r0, r2, #10, #1
 8000e54:	2800      	cmpne	r0, #0
 8000e56:	2034      	movne	r0, #52	@ 0x34
 8000e58:	d13d      	bne.n	8000ed6 <PE_Check_ExtendedMessage+0xac>
 8000e5a:	0410      	lsls	r0, r2, #16
 8000e5c:	0fc0      	lsrs	r0, r0, #31
 8000e5e:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8000e62:	d10d      	bne.n	8000e80 <PE_Check_ExtendedMessage+0x56>
 8000e64:	f8a4 32a4 	strh.w	r3, [r4, #676]	@ 0x2a4
 8000e68:	f8b4 22a4 	ldrh.w	r2, [r4, #676]	@ 0x2a4
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	d21c      	bcs.n	8000eaa <PE_Check_ExtendedMessage+0x80>
 8000e70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e72:	4403      	add	r3, r0
 8000e74:	1825      	adds	r5, r4, r0
 8000e76:	791a      	ldrb	r2, [r3, #4]
 8000e78:	f885 209c 	strb.w	r2, [r5, #156]	@ 0x9c
 8000e7c:	1c40      	adds	r0, r0, #1
 8000e7e:	e7f3      	b.n	8000e68 <PE_Check_ExtendedMessage+0x3e>
 8000e80:	f412 4ff8 	tst.w	r2, #31744	@ 0x7c00
 8000e84:	d106      	bne.n	8000e94 <PE_Check_ExtendedMessage+0x6a>
 8000e86:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 8000e88:	f3c0 3002 	ubfx	r0, r0, #12, #3
 8000e8c:	2807      	cmp	r0, #7
 8000e8e:	bf28      	it	cs
 8000e90:	2b1b      	cmpcs	r3, #27
 8000e92:	d30a      	bcc.n	8000eaa <PE_Check_ExtendedMessage+0x80>
 8000e94:	f3c2 2080 	ubfx	r0, r2, #10, #1
 8000e98:	b938      	cbnz	r0, 8000eaa <PE_Check_ExtendedMessage+0x80>
 8000e9a:	f8b4 02a4 	ldrh.w	r0, [r4, #676]	@ 0x2a4
 8000e9e:	4298      	cmp	r0, r3
 8000ea0:	d203      	bcs.n	8000eaa <PE_Check_ExtendedMessage+0x80>
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	8361      	strh	r1, [r4, #26]
 8000ea6:	2037      	movs	r0, #55	@ 0x37
 8000ea8:	e015      	b.n	8000ed6 <PE_Check_ExtendedMessage+0xac>
 8000eaa:	7e20      	ldrb	r0, [r4, #24]
 8000eac:	b1a8      	cbz	r0, 8000eda <PE_Check_ExtendedMessage+0xb0>
 8000eae:	7888      	ldrb	r0, [r1, #2]
 8000eb0:	280f      	cmp	r0, #15
 8000eb2:	d10f      	bne.n	8000ed4 <PE_Check_ExtendedMessage+0xaa>
 8000eb4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8000eb6:	68a5      	ldr	r5, [r4, #8]
 8000eb8:	69ae      	ldr	r6, [r5, #24]
 8000eba:	1d02      	adds	r2, r0, #4
 8000ebc:	7b20      	ldrb	r0, [r4, #12]
 8000ebe:	2318      	movs	r3, #24
 8000ec0:	2113      	movs	r1, #19
 8000ec2:	47b0      	blx	r6
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	7360      	strb	r0, [r4, #13]
 8000ec8:	2162      	movs	r1, #98	@ 0x62
 8000eca:	7b20      	ldrb	r0, [r4, #12]
 8000ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000ed0:	f7ff bad7 	b.w	8000482 <USBPD_PE_Notification>
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	7360      	strb	r0, [r4, #13]
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
 8000eda:	2101      	movs	r1, #1
 8000edc:	7361      	strb	r1, [r4, #13]
 8000ede:	bd70      	pop	{r4, r5, r6, pc}

08000ee0 <PE_Send_ExtendedMessage>:
 8000ee0:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8000ee4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8000ee6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8000ee8:	4606      	mov	r6, r0
 8000eea:	460f      	mov	r7, r1
 8000eec:	4690      	mov	r8, r2
 8000eee:	4699      	mov	r9, r3
 8000ef0:	f7ff ff5a 	bl	8000da8 <.text_3>
 8000ef4:	b1b8      	cbz	r0, 8000f26 <PE_Send_ExtendedMessage+0x46>
 8000ef6:	9501      	str	r5, [sp, #4]
 8000ef8:	9400      	str	r4, [sp, #0]
 8000efa:	464b      	mov	r3, r9
 8000efc:	7b30      	ldrb	r0, [r6, #12]
 8000efe:	f048 0280 	orr.w	r2, r8, #128	@ 0x80
 8000f02:	4639      	mov	r1, r7
 8000f04:	f000 fe68 	bl	8001bd8 <USBPD_PRL_SendMessage>
 8000f08:	2803      	cmp	r0, #3
 8000f0a:	d0f1      	beq.n	8000ef0 <PE_Send_ExtendedMessage+0x10>
 8000f0c:	2810      	cmp	r0, #16
 8000f0e:	d008      	beq.n	8000f22 <PE_Send_ExtendedMessage+0x42>
 8000f10:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 8000f14:	9100      	str	r1, [sp, #0]
 8000f16:	4603      	mov	r3, r0
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4639      	mov	r1, r7
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f000 f9ad 	bl	800127c <PE_CheckSendMessageStatus>
 8000f22:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8000f26:	2011      	movs	r0, #17
 8000f28:	7370      	strb	r0, [r6, #13]
 8000f2a:	2010      	movs	r0, #16
 8000f2c:	e7f9      	b.n	8000f22 <PE_Send_ExtendedMessage+0x42>

08000f2e <PE_SubStateMachine_ExtendedMessages>:
 8000f2e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000f32:	2602      	movs	r6, #2
 8000f34:	4604      	mov	r4, r0
 8000f36:	f104 0182 	add.w	r1, r4, #130	@ 0x82
 8000f3a:	7b63      	ldrb	r3, [r4, #13]
 8000f3c:	2b31      	cmp	r3, #49	@ 0x31
 8000f3e:	f504 72d0 	add.w	r2, r4, #416	@ 0x1a0
 8000f42:	f104 0574 	add.w	r5, r4, #116	@ 0x74
 8000f46:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8000f4a:	f504 7729 	add.w	r7, r4, #676	@ 0x2a4
 8000f4e:	f248 001b 	movw	r0, #32795	@ 0x801b
 8000f52:	d010      	beq.n	8000f76 <PE_SubStateMachine_ExtendedMessages+0x48>
 8000f54:	2b33      	cmp	r3, #51	@ 0x33
 8000f56:	d004      	beq.n	8000f62 <PE_SubStateMachine_ExtendedMessages+0x34>
 8000f58:	2b34      	cmp	r3, #52	@ 0x34
 8000f5a:	d03a      	beq.n	8000fd2 <PE_SubStateMachine_ExtendedMessages+0xa4>
 8000f5c:	2b35      	cmp	r3, #53	@ 0x35
 8000f5e:	d066      	beq.n	800102e <PE_SubStateMachine_ExtendedMessages+0x100>
 8000f60:	2b36      	cmp	r3, #54	@ 0x36
 8000f62:	d07b      	beq.n	800105c <PE_SubStateMachine_ExtendedMessages+0x12e>
 8000f64:	2b37      	cmp	r3, #55	@ 0x37
 8000f66:	d07d      	beq.n	8001064 <PE_SubStateMachine_ExtendedMessages+0x136>
 8000f68:	2b38      	cmp	r3, #56	@ 0x38
 8000f6a:	bf01      	itttt	eq
 8000f6c:	2003      	moveq	r0, #3
 8000f6e:	7360      	strbeq	r0, [r4, #13]
 8000f70:	2600      	moveq	r6, #0
 8000f72:	803e      	strheq	r6, [r7, #0]
 8000f74:	e0a5      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 8000f76:	2300      	movs	r3, #0
 8000f78:	803b      	strh	r3, [r7, #0]
 8000f7a:	736b      	strb	r3, [r5, #13]
 8000f7c:	732b      	strb	r3, [r5, #12]
 8000f7e:	8878      	ldrh	r0, [r7, #2]
 8000f80:	281a      	cmp	r0, #26
 8000f82:	4618      	mov	r0, r3
 8000f84:	d906      	bls.n	8000f94 <PE_SubStateMachine_ExtendedMessages+0x66>
 8000f86:	f000 f8a0 	bl	80010ca <.text_8>
 8000f8a:	281a      	cmp	r0, #26
 8000f8c:	d3fb      	bcc.n	8000f86 <PE_SubStateMachine_ExtendedMessages+0x58>
 8000f8e:	e005      	b.n	8000f9c <PE_SubStateMachine_ExtendedMessages+0x6e>
 8000f90:	f000 f89b 	bl	80010ca <.text_8>
 8000f94:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8000f98:	4560      	cmp	r0, ip
 8000f9a:	d3f9      	bcc.n	8000f90 <PE_SubStateMachine_ExtendedMessages+0x62>
 8000f9c:	6920      	ldr	r0, [r4, #16]
 8000f9e:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	bf1a      	itte	ne
 8000fa6:	2302      	movne	r3, #2
 8000fa8:	2033      	movne	r0, #51	@ 0x33
 8000faa:	2003      	moveq	r0, #3
 8000fac:	9001      	str	r0, [sp, #4]
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8000fb4:	8878      	ldrh	r0, [r7, #2]
 8000fb6:	1d00      	adds	r0, r0, #4
 8000fb8:	b280      	uxth	r0, r0
 8000fba:	9000      	str	r0, [sp, #0]
 8000fbc:	78ea      	ldrb	r2, [r5, #3]
 8000fbe:	f898 1003 	ldrb.w	r1, [r8, #3]
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f7ff ff8c 	bl	8000ee0 <PE_Send_ExtendedMessage>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	d17a      	bne.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 8000fcc:	7968      	ldrb	r0, [r5, #5]
 8000fce:	7620      	strb	r0, [r4, #24]
 8000fd0:	e077      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 8000fd2:	882b      	ldrh	r3, [r5, #0]
 8000fd4:	887e      	ldrh	r6, [r7, #2]
 8000fd6:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 8000fda:	201a      	movs	r0, #26
 8000fdc:	4343      	muls	r3, r0
 8000fde:	42b3      	cmp	r3, r6
 8000fe0:	da04      	bge.n	8000fec <PE_SubStateMachine_ExtendedMessages+0xbe>
 8000fe2:	8828      	ldrh	r0, [r5, #0]
 8000fe4:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 8000fe8:	280a      	cmp	r0, #10
 8000fea:	d301      	bcc.n	8000ff0 <PE_SubStateMachine_ExtendedMessages+0xc2>
 8000fec:	2003      	movs	r0, #3
 8000fee:	e01b      	b.n	8001028 <PE_SubStateMachine_ExtendedMessages+0xfa>
 8000ff0:	1af0      	subs	r0, r6, r3
 8000ff2:	281a      	cmp	r0, #26
 8000ff4:	bf3a      	itte	cc
 8000ff6:	1af6      	subcc	r6, r6, r3
 8000ff8:	b2f6      	uxtbcc	r6, r6
 8000ffa:	261a      	movcs	r6, #26
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	e006      	b.n	800100e <PE_SubStateMachine_ExtendedMessages+0xe0>
 8001000:	eb00 0803 	add.w	r8, r0, r3
 8001004:	f812 8008 	ldrb.w	r8, [r2, r8]
 8001008:	f801 8000 	strb.w	r8, [r1, r0]
 800100c:	1c40      	adds	r0, r0, #1
 800100e:	42b0      	cmp	r0, r6
 8001010:	d3f6      	bcc.n	8001000 <PE_SubStateMachine_ExtendedMessages+0xd2>
 8001012:	8829      	ldrh	r1, [r5, #0]
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	7b20      	ldrb	r0, [r4, #12]
 8001018:	0ac9      	lsrs	r1, r1, #11
 800101a:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 800101e:	f001 010f 	and.w	r1, r1, #15
 8001022:	f001 fa44 	bl	80024ae <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001026:	2035      	movs	r0, #53	@ 0x35
 8001028:	7360      	strb	r0, [r4, #13]
 800102a:	2600      	movs	r6, #0
 800102c:	e049      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 800102e:	6920      	ldr	r0, [r4, #16]
 8001030:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8001034:	2800      	cmp	r0, #0
 8001036:	bf14      	ite	ne
 8001038:	2036      	movne	r0, #54	@ 0x36
 800103a:	2003      	moveq	r0, #3
 800103c:	2100      	movs	r1, #0
 800103e:	9001      	str	r0, [sp, #4]
 8001040:	9102      	str	r1, [sp, #8]
 8001042:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8001046:	8878      	ldrh	r0, [r7, #2]
 8001048:	9000      	str	r0, [sp, #0]
 800104a:	78ea      	ldrb	r2, [r5, #3]
 800104c:	f898 1000 	ldrb.w	r1, [r8]
 8001050:	4620      	mov	r0, r4
 8001052:	f7ff ff45 	bl	8000ee0 <PE_Send_ExtendedMessage>
 8001056:	2000      	movs	r0, #0
 8001058:	8038      	strh	r0, [r7, #0]
 800105a:	e032      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 800105c:	8360      	strh	r0, [r4, #26]
 800105e:	261b      	movs	r6, #27
 8001060:	2039      	movs	r0, #57	@ 0x39
 8001062:	e004      	b.n	800106e <PE_SubStateMachine_ExtendedMessages+0x140>
 8001064:	8b61      	ldrh	r1, [r4, #26]
 8001066:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800106a:	d102      	bne.n	8001072 <PE_SubStateMachine_ExtendedMessages+0x144>
 800106c:	200f      	movs	r0, #15
 800106e:	7360      	strb	r0, [r4, #13]
 8001070:	e027      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 8001072:	8360      	strh	r0, [r4, #26]
 8001074:	f104 017e 	add.w	r1, r4, #126	@ 0x7e
 8001078:	7b20      	ldrb	r0, [r4, #12]
 800107a:	f001 fa3c 	bl	80024f6 <USBPD_PRL_PrepareChunkRequest>
 800107e:	261b      	movs	r6, #27
 8001080:	6860      	ldr	r0, [r4, #4]
 8001082:	f7ff fe92 	bl	8000daa <.text_3+0x2>
 8001086:	b188      	cbz	r0, 80010ac <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001088:	2000      	movs	r0, #0
 800108a:	2106      	movs	r1, #6
 800108c:	9001      	str	r0, [sp, #4]
 800108e:	9100      	str	r1, [sp, #0]
 8001090:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8001094:	78aa      	ldrb	r2, [r5, #2]
 8001096:	f898 1000 	ldrb.w	r1, [r8]
 800109a:	7b20      	ldrb	r0, [r4, #12]
 800109c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010a0:	f000 fd9a 	bl	8001bd8 <USBPD_PRL_SendMessage>
 80010a4:	2803      	cmp	r0, #3
 80010a6:	4603      	mov	r3, r0
 80010a8:	d0ea      	beq.n	8001080 <PE_SubStateMachine_ExtendedMessages+0x152>
 80010aa:	e002      	b.n	80010b2 <PE_SubStateMachine_ExtendedMessages+0x184>
 80010ac:	2011      	movs	r0, #17
 80010ae:	7360      	strb	r0, [r4, #13]
 80010b0:	2310      	movs	r3, #16
 80010b2:	2039      	movs	r0, #57	@ 0x39
 80010b4:	9000      	str	r0, [sp, #0]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f898 1000 	ldrb.w	r1, [r8]
 80010bc:	4620      	mov	r0, r4
 80010be:	f000 f8dd 	bl	800127c <PE_CheckSendMessageStatus>
 80010c2:	4630      	mov	r0, r6
 80010c4:	b004      	add	sp, #16
 80010c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080010ca <.text_8>:
 80010ca:	f812 c000 	ldrb.w	ip, [r2, r0]
 80010ce:	f801 c000 	strb.w	ip, [r1, r0]
 80010d2:	1c40      	adds	r0, r0, #1
 80010d4:	4770      	bx	lr

080010d6 <PE_ManageRXEvent>:
 80010d6:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80010da:	780a      	ldrb	r2, [r1, #0]
 80010dc:	704a      	strb	r2, [r1, #1]
 80010de:	888a      	ldrh	r2, [r1, #4]
 80010e0:	0bd1      	lsrs	r1, r2, #15
 80010e2:	bf18      	it	ne
 80010e4:	f7ff bea1 	bne.w	8000e2a <PE_Check_ExtendedMessage>
 80010e8:	f412 4f70 	tst.w	r2, #61440	@ 0xf000
 80010ec:	bf08      	it	eq
 80010ee:	f000 b801 	beq.w	80010f4 <PE_Check_ControlMessage>
 80010f2:	e05d      	b.n	80011b0 <PE_Check_DataMessage>

080010f4 <PE_Check_ControlMessage>:
 80010f4:	b510      	push	{r4, lr}
 80010f6:	4604      	mov	r4, r0
 80010f8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80010fc:	f000 001f 	and.w	r0, r0, #31
 8001100:	1e40      	subs	r0, r0, #1
 8001102:	2817      	cmp	r0, #23
 8001104:	d84b      	bhi.n	800119e <PE_Check_ControlMessage+0xaa>
 8001106:	e8df f000 	tbb	[pc, r0]
 800110a:	0c52      	.short	0x0c52
 800110c:	481c4848 	.word	0x481c4848
 8001110:	4a4a2c1e 	.word	0x4a4a2c1e
 8001114:	4a14484a 	.word	0x4a14484a
 8001118:	4a4a424a 	.word	0x4a4a424a
 800111c:	384a4a4a 	.word	0x384a4a4a
 8001120:	3e4a      	.short	0x3e4a
 8001122:	2202      	movs	r2, #2
 8001124:	7622      	strb	r2, [r4, #24]
 8001126:	212b      	movs	r1, #43	@ 0x2b
 8001128:	7b20      	ldrb	r0, [r4, #12]
 800112a:	f7ff f9aa 	bl	8000482 <USBPD_PE_Notification>
 800112e:	2198      	movs	r1, #152	@ 0x98
 8001130:	e03c      	b.n	80011ac <PE_Check_ControlMessage+0xb8>
 8001132:	2003      	movs	r0, #3
 8001134:	7620      	strb	r0, [r4, #24]
 8001136:	2132      	movs	r1, #50	@ 0x32
 8001138:	7b20      	ldrb	r0, [r4, #12]
 800113a:	f7ff f9a2 	bl	8000482 <USBPD_PE_Notification>
 800113e:	2010      	movs	r0, #16
 8001140:	e031      	b.n	80011a6 <PE_Check_ControlMessage+0xb2>
 8001142:	2133      	movs	r1, #51	@ 0x33
 8001144:	e024      	b.n	8001190 <PE_Check_ControlMessage+0x9c>
 8001146:	2006      	movs	r0, #6
 8001148:	7620      	strb	r0, [r4, #24]
 800114a:	6820      	ldr	r0, [r4, #0]
 800114c:	6841      	ldr	r1, [r0, #4]
 800114e:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001152:	2800      	cmp	r0, #0
 8001154:	d023      	beq.n	800119e <PE_Check_ControlMessage+0xaa>
 8001156:	7b20      	ldrb	r0, [r4, #12]
 8001158:	210c      	movs	r1, #12
 800115a:	f7ff f992 	bl	8000482 <USBPD_PE_Notification>
 800115e:	204c      	movs	r0, #76	@ 0x4c
 8001160:	e021      	b.n	80011a6 <PE_Check_ControlMessage+0xb2>
 8001162:	6860      	ldr	r0, [r4, #4]
 8001164:	6801      	ldr	r1, [r0, #0]
 8001166:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800116a:	2803      	cmp	r0, #3
 800116c:	d117      	bne.n	800119e <PE_Check_ControlMessage+0xaa>
 800116e:	211d      	movs	r1, #29
 8001170:	7361      	strb	r1, [r4, #13]
 8001172:	2007      	movs	r0, #7
 8001174:	7620      	strb	r0, [r4, #24]
 8001176:	2106      	movs	r1, #6
 8001178:	e00a      	b.n	8001190 <PE_Check_ControlMessage+0x9c>
 800117a:	2164      	movs	r1, #100	@ 0x64
 800117c:	7361      	strb	r1, [r4, #13]
 800117e:	205f      	movs	r0, #95	@ 0x5f
 8001180:	7620      	strb	r0, [r4, #24]
 8001182:	2160      	movs	r1, #96	@ 0x60
 8001184:	e004      	b.n	8001190 <PE_Check_ControlMessage+0x9c>
 8001186:	200f      	movs	r0, #15
 8001188:	7620      	strb	r0, [r4, #24]
 800118a:	214b      	movs	r1, #75	@ 0x4b
 800118c:	e00e      	b.n	80011ac <PE_Check_ControlMessage+0xb8>
 800118e:	2159      	movs	r1, #89	@ 0x59
 8001190:	7b20      	ldrb	r0, [r4, #12]
 8001192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001196:	f7ff b974 	b.w	8000482 <USBPD_PE_Notification>
 800119a:	2011      	movs	r0, #17
 800119c:	e003      	b.n	80011a6 <PE_Check_ControlMessage+0xb2>
 800119e:	f000 f867 	bl	8001270 <.text_12>
 80011a2:	d102      	bne.n	80011aa <PE_Check_ControlMessage+0xb6>
 80011a4:	2001      	movs	r0, #1
 80011a6:	7360      	strb	r0, [r4, #13]
 80011a8:	bd10      	pop	{r4, pc}
 80011aa:	212a      	movs	r1, #42	@ 0x2a
 80011ac:	7361      	strb	r1, [r4, #13]
 80011ae:	bd10      	pop	{r4, pc}

080011b0 <PE_Check_DataMessage>:
 80011b0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80011b2:	4604      	mov	r4, r0
 80011b4:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 80011b6:	f000 011f 	and.w	r1, r0, #31
 80011ba:	2901      	cmp	r1, #1
 80011bc:	d00a      	beq.n	80011d4 <PE_Check_DataMessage+0x24>
 80011be:	2903      	cmp	r1, #3
 80011c0:	d01a      	beq.n	80011f8 <PE_Check_DataMessage+0x48>
 80011c2:	2906      	cmp	r1, #6
 80011c4:	d04e      	beq.n	8001264 <PE_Check_DataMessage+0xb4>
 80011c6:	2907      	cmp	r1, #7
 80011c8:	d04a      	beq.n	8001260 <PE_Check_DataMessage+0xb0>
 80011ca:	290a      	cmp	r1, #10
 80011cc:	d04a      	beq.n	8001264 <PE_Check_DataMessage+0xb4>
 80011ce:	290f      	cmp	r1, #15
 80011d0:	d043      	beq.n	800125a <PE_Check_DataMessage+0xaa>
 80011d2:	e04a      	b.n	800126a <PE_Check_DataMessage+0xba>
 80011d4:	f3c0 1181 	ubfx	r1, r0, #6, #2
 80011d8:	7b20      	ldrb	r0, [r4, #12]
 80011da:	f7ff fb4e 	bl	800087a <PE_ExtRevisionInteroperability>
 80011de:	68a5      	ldr	r5, [r4, #8]
 80011e0:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 80011e2:	69ae      	ldr	r6, [r5, #24]
 80011e4:	f3c0 3302 	ubfx	r3, r0, #12, #3
 80011e8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80011ea:	1c82      	adds	r2, r0, #2
 80011ec:	7b20      	ldrb	r0, [r4, #12]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	2104      	movs	r1, #4
 80011f2:	47b0      	blx	r6
 80011f4:	2044      	movs	r0, #68	@ 0x44
 80011f6:	e039      	b.n	800126c <PE_Check_DataMessage+0xbc>
 80011f8:	2100      	movs	r1, #0
 80011fa:	9101      	str	r1, [sp, #4]
 80011fc:	9100      	str	r1, [sp, #0]
 80011fe:	466b      	mov	r3, sp
 8001200:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001202:	7881      	ldrb	r1, [r0, #2]
 8001204:	78c2      	ldrb	r2, [r0, #3]
 8001206:	68a6      	ldr	r6, [r4, #8]
 8001208:	6977      	ldr	r7, [r6, #20]
 800120a:	eb01 2502 	add.w	r5, r1, r2, lsl #8
 800120e:	7901      	ldrb	r1, [r0, #4]
 8001210:	7940      	ldrb	r0, [r0, #5]
 8001212:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8001216:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 800121a:	7b20      	ldrb	r0, [r4, #12]
 800121c:	aa01      	add	r2, sp, #4
 800121e:	2103      	movs	r1, #3
 8001220:	47b8      	blx	r7
 8001222:	9800      	ldr	r0, [sp, #0]
 8001224:	2104      	movs	r1, #4
 8001226:	f7ff fd55 	bl	8000cd4 <PE_CheckDataSizeFromGetDataInfo>
 800122a:	2800      	cmp	r0, #0
 800122c:	bf01      	itttt	eq
 800122e:	6860      	ldreq	r0, [r4, #4]
 8001230:	6801      	ldreq	r1, [r0, #0]
 8001232:	f3c1 2002 	ubfxeq	r0, r1, #8, #3
 8001236:	2803      	cmpeq	r0, #3
 8001238:	d10d      	bne.n	8001256 <PE_Check_DataMessage+0xa6>
 800123a:	9801      	ldr	r0, [sp, #4]
 800123c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001240:	4288      	cmp	r0, r1
 8001242:	d108      	bne.n	8001256 <PE_Check_DataMessage+0xa6>
 8001244:	0f2d      	lsrs	r5, r5, #28
 8001246:	2d05      	cmp	r5, #5
 8001248:	d003      	beq.n	8001252 <PE_Check_DataMessage+0xa2>
 800124a:	2d08      	cmp	r5, #8
 800124c:	d10f      	bne.n	800126e <PE_Check_DataMessage+0xbe>
 800124e:	2029      	movs	r0, #41	@ 0x29
 8001250:	e00c      	b.n	800126c <PE_Check_DataMessage+0xbc>
 8001252:	2127      	movs	r1, #39	@ 0x27
 8001254:	e007      	b.n	8001266 <PE_Check_DataMessage+0xb6>
 8001256:	2003      	movs	r0, #3
 8001258:	e008      	b.n	800126c <PE_Check_DataMessage+0xbc>
 800125a:	f000 f809 	bl	8001270 <.text_12>
 800125e:	d106      	bne.n	800126e <PE_Check_DataMessage+0xbe>
 8001260:	2001      	movs	r0, #1
 8001262:	e003      	b.n	800126c <PE_Check_DataMessage+0xbc>
 8001264:	2101      	movs	r1, #1
 8001266:	7361      	strb	r1, [r4, #13]
 8001268:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800126a:	2011      	movs	r0, #17
 800126c:	7360      	strb	r0, [r4, #13]
 800126e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001270 <.text_12>:
 8001270:	6860      	ldr	r0, [r4, #4]
 8001272:	7801      	ldrb	r1, [r0, #0]
 8001274:	f001 0103 	and.w	r1, r1, #3
 8001278:	2902      	cmp	r1, #2
 800127a:	4770      	bx	lr

0800127c <PE_CheckSendMessageStatus>:
 800127c:	b510      	push	{r4, lr}
 800127e:	2110      	movs	r1, #16
 8001280:	2b05      	cmp	r3, #5
 8001282:	d007      	beq.n	8001294 <PE_CheckSendMessageStatus+0x18>
 8001284:	2b06      	cmp	r3, #6
 8001286:	d00d      	beq.n	80012a4 <PE_CheckSendMessageStatus+0x28>
 8001288:	2b07      	cmp	r3, #7
 800128a:	d010      	beq.n	80012ae <PE_CheckSendMessageStatus+0x32>
 800128c:	2b09      	cmp	r3, #9
 800128e:	bf08      	it	eq
 8001290:	2109      	moveq	r1, #9
 8001292:	e021      	b.n	80012d8 <PE_CheckSendMessageStatus+0x5c>
 8001294:	9902      	ldr	r1, [sp, #8]
 8001296:	7341      	strb	r1, [r0, #13]
 8001298:	6901      	ldr	r1, [r0, #16]
 800129a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800129e:	6101      	str	r1, [r0, #16]
 80012a0:	2100      	movs	r1, #0
 80012a2:	e019      	b.n	80012d8 <PE_CheckSendMessageStatus+0x5c>
 80012a4:	6902      	ldr	r2, [r0, #16]
 80012a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80012aa:	6102      	str	r2, [r0, #16]
 80012ac:	e014      	b.n	80012d8 <PE_CheckSendMessageStatus+0x5c>
 80012ae:	6843      	ldr	r3, [r0, #4]
 80012b0:	681c      	ldr	r4, [r3, #0]
 80012b2:	f3c4 2302 	ubfx	r3, r4, #8, #3
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d003      	beq.n	80012c2 <PE_CheckSendMessageStatus+0x46>
 80012ba:	2a01      	cmp	r2, #1
 80012bc:	d10a      	bne.n	80012d4 <PE_CheckSendMessageStatus+0x58>
 80012be:	220f      	movs	r2, #15
 80012c0:	e009      	b.n	80012d6 <PE_CheckSendMessageStatus+0x5a>
 80012c2:	2a00      	cmp	r2, #0
 80012c4:	d1fb      	bne.n	80012be <PE_CheckSendMessageStatus+0x42>
 80012c6:	6883      	ldr	r3, [r0, #8]
 80012c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	d0f7      	beq.n	80012be <PE_CheckSendMessageStatus+0x42>
 80012ce:	2392      	movs	r3, #146	@ 0x92
 80012d0:	7343      	strb	r3, [r0, #13]
 80012d2:	e001      	b.n	80012d8 <PE_CheckSendMessageStatus+0x5c>
 80012d4:	2211      	movs	r2, #17
 80012d6:	7342      	strb	r2, [r0, #13]
 80012d8:	4608      	mov	r0, r1
 80012da:	bd10      	pop	{r4, pc}

080012dc <USBPD_PE_StateMachine_SNK>:
 80012dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012e0:	4604      	mov	r4, r0
 80012e2:	f8df 081c 	ldr.w	r0, [pc, #2076]	@ 8001b00 <.text_15>
 80012e6:	b084      	sub	sp, #16
 80012e8:	4621      	mov	r1, r4
 80012ea:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80012ee:	7b68      	ldrb	r0, [r5, #13]
 80012f0:	2848      	cmp	r0, #72	@ 0x48
 80012f2:	d12e      	bne.n	8001352 <USBPD_PE_StateMachine_SNK+0x76>
 80012f4:	4628      	mov	r0, r5
 80012f6:	f7ff faa2 	bl	800083e <PE_Reset_ZI>
 80012fa:	4628      	mov	r0, r5
 80012fc:	f7ff fab9 	bl	8000872 <PE_Reset_Counter>
 8001300:	6828      	ldr	r0, [r5, #0]
 8001302:	7903      	ldrb	r3, [r0, #4]
 8001304:	7b28      	ldrb	r0, [r5, #12]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	f000 fc30 	bl	8001b72 <USBPD_PRL_SetHeader>
 8001312:	6868      	ldr	r0, [r5, #4]
 8001314:	6801      	ldr	r1, [r0, #0]
 8001316:	f021 0108 	bic.w	r1, r1, #8
 800131a:	6001      	str	r1, [r0, #0]
 800131c:	6828      	ldr	r0, [r5, #0]
 800131e:	6841      	ldr	r1, [r0, #4]
 8001320:	6868      	ldr	r0, [r5, #4]
 8001322:	6802      	ldr	r2, [r0, #0]
 8001324:	f361 0201 	bfi	r2, r1, #0, #2
 8001328:	6002      	str	r2, [r0, #0]
 800132a:	7b28      	ldrb	r0, [r5, #12]
 800132c:	f000 feb4 	bl	8002098 <USBPD_PRL_Reset>
 8001330:	7ba9      	ldrb	r1, [r5, #14]
 8001332:	203e      	movs	r0, #62	@ 0x3e
 8001334:	293e      	cmp	r1, #62	@ 0x3e
 8001336:	7368      	strb	r0, [r5, #13]
 8001338:	d00b      	beq.n	8001352 <USBPD_PE_StateMachine_SNK+0x76>
 800133a:	73a8      	strb	r0, [r5, #14]
 800133c:	2100      	movs	r1, #0
 800133e:	9100      	str	r1, [sp, #0]
 8001340:	2300      	movs	r3, #0
 8001342:	f8df 67c0 	ldr.w	r6, [pc, #1984]	@ 8001b04 <.text_16>
 8001346:	7b29      	ldrb	r1, [r5, #12]
 8001348:	f8d6 a000 	ldr.w	sl, [r6]
 800134c:	223e      	movs	r2, #62	@ 0x3e
 800134e:	2004      	movs	r0, #4
 8001350:	47d0      	blx	sl
 8001352:	6928      	ldr	r0, [r5, #16]
 8001354:	f3c0 4080 	ubfx	r0, r0, #18, #1
 8001358:	b130      	cbz	r0, 8001368 <USBPD_PE_StateMachine_SNK+0x8c>
 800135a:	6928      	ldr	r0, [r5, #16]
 800135c:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 8001360:	6128      	str	r0, [r5, #16]
 8001362:	2164      	movs	r1, #100	@ 0x64
 8001364:	f000 fb50 	bl	8001a08 <.text_12>
 8001368:	4628      	mov	r0, r5
 800136a:	f7ff f973 	bl	8000654 <PE_Get_RxEvent>
 800136e:	2803      	cmp	r0, #3
 8001370:	f88d 000c 	strb.w	r0, [sp, #12]
 8001374:	d103      	bne.n	800137e <USBPD_PE_StateMachine_SNK+0xa2>
 8001376:	2001      	movs	r0, #1
 8001378:	b005      	add	sp, #20
 800137a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800137e:	f88d 400d 	strb.w	r4, [sp, #13]
 8001382:	f248 18f4 	movw	r8, #33268	@ 0x81f4
 8001386:	f105 0978 	add.w	r9, r5, #120	@ 0x78
 800138a:	f248 0b1b 	movw	fp, #32795	@ 0x801b
 800138e:	6868      	ldr	r0, [r5, #4]
 8001390:	6801      	ldr	r1, [r0, #0]
 8001392:	2402      	movs	r4, #2
 8001394:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001398:	2800      	cmp	r0, #0
 800139a:	f000 80ca 	beq.w	8001532 <USBPD_PE_StateMachine_SNK+0x256>
 800139e:	f105 0628 	add.w	r6, r5, #40	@ 0x28
 80013a2:	78b0      	ldrb	r0, [r6, #2]
 80013a4:	280f      	cmp	r0, #15
 80013a6:	bf18      	it	ne
 80013a8:	2814      	cmpne	r0, #20
 80013aa:	d111      	bne.n	80013d0 <USBPD_PE_StateMachine_SNK+0xf4>
 80013ac:	f000 fb0e 	bl	80019cc <.text_6+0x2>
 80013b0:	d001      	beq.n	80013b6 <USBPD_PE_StateMachine_SNK+0xda>
 80013b2:	f000 fb2c 	bl	8001a0e <.text_13>
 80013b6:	78b2      	ldrb	r2, [r6, #2]
 80013b8:	736a      	strb	r2, [r5, #13]
 80013ba:	2000      	movs	r0, #0
 80013bc:	70b0      	strb	r0, [r6, #2]
 80013be:	7ba9      	ldrb	r1, [r5, #14]
 80013c0:	4291      	cmp	r1, r2
 80013c2:	d005      	beq.n	80013d0 <USBPD_PE_StateMachine_SNK+0xf4>
 80013c4:	73aa      	strb	r2, [r5, #14]
 80013c6:	9000      	str	r0, [sp, #0]
 80013c8:	f000 fb04 	bl	80019d4 <.text_7>
 80013cc:	2004      	movs	r0, #4
 80013ce:	47e0      	blx	ip
 80013d0:	f000 faf7 	bl	80019c2 <.text_5>
 80013d4:	d119      	bne.n	800140a <USBPD_PE_StateMachine_SNK+0x12e>
 80013d6:	6868      	ldr	r0, [r5, #4]
 80013d8:	6801      	ldr	r1, [r0, #0]
 80013da:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80013de:	88b1      	ldrh	r1, [r6, #4]
 80013e0:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80013e4:	4288      	cmp	r0, r1
 80013e6:	d110      	bne.n	800140a <USBPD_PE_StateMachine_SNK+0x12e>
 80013e8:	f000 fae7 	bl	80019ba <.text_4>
 80013ec:	f000 fb12 	bl	8001a14 <.text_13+0x6>
 80013f0:	7ba9      	ldrb	r1, [r5, #14]
 80013f2:	2092      	movs	r0, #146	@ 0x92
 80013f4:	2992      	cmp	r1, #146	@ 0x92
 80013f6:	7368      	strb	r0, [r5, #13]
 80013f8:	d06c      	beq.n	80014d4 <USBPD_PE_StateMachine_SNK+0x1f8>
 80013fa:	73a8      	strb	r0, [r5, #14]
 80013fc:	2100      	movs	r1, #0
 80013fe:	9100      	str	r1, [sp, #0]
 8001400:	f000 fae8 	bl	80019d4 <.text_7>
 8001404:	2292      	movs	r2, #146	@ 0x92
 8001406:	2004      	movs	r0, #4
 8001408:	47e0      	blx	ip
 800140a:	7b68      	ldrb	r0, [r5, #13]
 800140c:	0001      	movs	r1, r0
 800140e:	f44f 7afa 	mov.w	sl, #500	@ 0x1f4
 8001412:	f24f 071f 	movw	r7, #61471	@ 0xf01f
 8001416:	f000 8090 	beq.w	800153a <USBPD_PE_StateMachine_SNK+0x25e>
 800141a:	2801      	cmp	r0, #1
 800141c:	d057      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 800141e:	2803      	cmp	r0, #3
 8001420:	bf18      	it	ne
 8001422:	2804      	cmpne	r0, #4
 8001424:	d045      	beq.n	80014b2 <USBPD_PE_StateMachine_SNK+0x1d6>
 8001426:	280f      	cmp	r0, #15
 8001428:	f000 817c 	beq.w	8001724 <USBPD_PE_StateMachine_SNK+0x448>
 800142c:	2810      	cmp	r0, #16
 800142e:	f000 81f2 	beq.w	8001816 <USBPD_PE_StateMachine_SNK+0x53a>
 8001432:	2811      	cmp	r0, #17
 8001434:	f000 81f8 	beq.w	8001828 <USBPD_PE_StateMachine_SNK+0x54c>
 8001438:	2814      	cmp	r0, #20
 800143a:	f000 8197 	beq.w	800176c <USBPD_PE_StateMachine_SNK+0x490>
 800143e:	2818      	cmp	r0, #24
 8001440:	bf18      	it	ne
 8001442:	2819      	cmpne	r0, #25
 8001444:	d043      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 8001446:	281a      	cmp	r0, #26
 8001448:	f000 8220 	beq.w	800188c <USBPD_PE_StateMachine_SNK+0x5b0>
 800144c:	281d      	cmp	r0, #29
 800144e:	bf18      	it	ne
 8001450:	2827      	cmpne	r0, #39	@ 0x27
 8001452:	d03c      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 8001454:	2828      	cmp	r0, #40	@ 0x28
 8001456:	bf18      	it	ne
 8001458:	2829      	cmpne	r0, #41	@ 0x29
 800145a:	d038      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 800145c:	282a      	cmp	r0, #42	@ 0x2a
 800145e:	f000 8236 	beq.w	80018ce <USBPD_PE_StateMachine_SNK+0x5f2>
 8001462:	282e      	cmp	r0, #46	@ 0x2e
 8001464:	f000 8248 	beq.w	80018f8 <USBPD_PE_StateMachine_SNK+0x61c>
 8001468:	2831      	cmp	r0, #49	@ 0x31
 800146a:	bf18      	it	ne
 800146c:	2833      	cmpne	r0, #51	@ 0x33
 800146e:	d007      	beq.n	8001480 <USBPD_PE_StateMachine_SNK+0x1a4>
 8001470:	2834      	cmp	r0, #52	@ 0x34
 8001472:	bf18      	it	ne
 8001474:	2835      	cmpne	r0, #53	@ 0x35
 8001476:	d003      	beq.n	8001480 <USBPD_PE_StateMachine_SNK+0x1a4>
 8001478:	2836      	cmp	r0, #54	@ 0x36
 800147a:	bf1c      	itt	ne
 800147c:	2837      	cmpne	r0, #55	@ 0x37
 800147e:	2838      	cmpne	r0, #56	@ 0x38
 8001480:	f000 826a 	beq.w	8001958 <USBPD_PE_StateMachine_SNK+0x67c>
 8001484:	2839      	cmp	r0, #57	@ 0x39
 8001486:	f000 8246 	beq.w	8001916 <USBPD_PE_StateMachine_SNK+0x63a>
 800148a:	283e      	cmp	r0, #62	@ 0x3e
 800148c:	d066      	beq.n	800155c <USBPD_PE_StateMachine_SNK+0x280>
 800148e:	2840      	cmp	r0, #64	@ 0x40
 8001490:	f000 818e 	beq.w	80017b0 <USBPD_PE_StateMachine_SNK+0x4d4>
 8001494:	2843      	cmp	r0, #67	@ 0x43
 8001496:	d07a      	beq.n	800158e <USBPD_PE_StateMachine_SNK+0x2b2>
 8001498:	2844      	cmp	r0, #68	@ 0x44
 800149a:	f000 80ae 	beq.w	80015fa <USBPD_PE_StateMachine_SNK+0x31e>
 800149e:	2845      	cmp	r0, #69	@ 0x45
 80014a0:	f000 80bb 	beq.w	800161a <USBPD_PE_StateMachine_SNK+0x33e>
 80014a4:	2846      	cmp	r0, #70	@ 0x46
 80014a6:	f000 80d3 	beq.w	8001650 <USBPD_PE_StateMachine_SNK+0x374>
 80014aa:	2847      	cmp	r0, #71	@ 0x47
 80014ac:	f000 8122 	beq.w	80016f4 <USBPD_PE_StateMachine_SNK+0x418>
 80014b0:	2849      	cmp	r0, #73	@ 0x49
 80014b2:	f000 8213 	beq.w	80018dc <USBPD_PE_StateMachine_SNK+0x600>
 80014b6:	284b      	cmp	r0, #75	@ 0x4b
 80014b8:	d009      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 80014ba:	2850      	cmp	r0, #80	@ 0x50
 80014bc:	f000 81cc 	beq.w	8001858 <USBPD_PE_StateMachine_SNK+0x57c>
 80014c0:	2864      	cmp	r0, #100	@ 0x64
 80014c2:	bf18      	it	ne
 80014c4:	2867      	cmpne	r0, #103	@ 0x67
 80014c6:	d002      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 80014c8:	2868      	cmp	r0, #104	@ 0x68
 80014ca:	bf18      	it	ne
 80014cc:	2874      	cmpne	r0, #116	@ 0x74
 80014ce:	f000 8247 	beq.w	8001960 <USBPD_PE_StateMachine_SNK+0x684>
 80014d2:	2892      	cmp	r0, #146	@ 0x92
 80014d4:	d039      	beq.n	800154a <USBPD_PE_StateMachine_SNK+0x26e>
 80014d6:	2898      	cmp	r0, #152	@ 0x98
 80014d8:	f000 81e6 	beq.w	80018a8 <USBPD_PE_StateMachine_SNK+0x5cc>
 80014dc:	289b      	cmp	r0, #155	@ 0x9b
 80014de:	f000 814d 	beq.w	800177c <USBPD_PE_StateMachine_SNK+0x4a0>
 80014e2:	7b6a      	ldrb	r2, [r5, #13]
 80014e4:	7ba8      	ldrb	r0, [r5, #14]
 80014e6:	f8df 661c 	ldr.w	r6, [pc, #1564]	@ 8001b04 <.text_16>
 80014ea:	4290      	cmp	r0, r2
 80014ec:	d008      	beq.n	8001500 <USBPD_PE_StateMachine_SNK+0x224>
 80014ee:	73aa      	strb	r2, [r5, #14]
 80014f0:	2100      	movs	r1, #0
 80014f2:	9100      	str	r1, [sp, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	7b29      	ldrb	r1, [r5, #12]
 80014f8:	f8d6 a000 	ldr.w	sl, [r6]
 80014fc:	2004      	movs	r0, #4
 80014fe:	47d0      	blx	sl
 8001500:	f000 fa64 	bl	80019cc <.text_6+0x2>
 8001504:	f000 8231 	beq.w	800196a <USBPD_PE_StateMachine_SNK+0x68e>
 8001508:	4628      	mov	r0, r5
 800150a:	f7ff f90b 	bl	8000724 <PE_Check_AMSConflict>
 800150e:	2815      	cmp	r0, #21
 8001510:	d104      	bne.n	800151c <USBPD_PE_StateMachine_SNK+0x240>
 8001512:	f000 fa5b 	bl	80019cc <.text_6+0x2>
 8001516:	d001      	beq.n	800151c <USBPD_PE_StateMachine_SNK+0x240>
 8001518:	f000 fa79 	bl	8001a0e <.text_13>
 800151c:	7b6a      	ldrb	r2, [r5, #13]
 800151e:	7ba8      	ldrb	r0, [r5, #14]
 8001520:	4290      	cmp	r0, r2
 8001522:	d004      	beq.n	800152e <USBPD_PE_StateMachine_SNK+0x252>
 8001524:	73aa      	strb	r2, [r5, #14]
 8001526:	f000 fa5b 	bl	80019e0 <.text_8>
 800152a:	2004      	movs	r0, #4
 800152c:	47a0      	blx	r4
 800152e:	2400      	movs	r4, #0
 8001530:	e237      	b.n	80019a2 <USBPD_PE_StateMachine_SNK+0x6c6>
 8001532:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001536:	4620      	mov	r0, r4
 8001538:	e71e      	b.n	8001378 <USBPD_PE_StateMachine_SNK+0x9c>
 800153a:	f000 fa57 	bl	80019ec <.text_9>
 800153e:	215f      	movs	r1, #95	@ 0x5f
 8001540:	f000 fa62 	bl	8001a08 <.text_12>
 8001544:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001548:	e7cb      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 800154a:	f000 fa4f 	bl	80019ec <.text_9>
 800154e:	68a8      	ldr	r0, [r5, #8]
 8001550:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8001552:	2900      	cmp	r1, #0
 8001554:	d0f6      	beq.n	8001544 <USBPD_PE_StateMachine_SNK+0x268>
 8001556:	7b28      	ldrb	r0, [r5, #12]
 8001558:	4788      	blx	r1
 800155a:	e7f3      	b.n	8001544 <USBPD_PE_StateMachine_SNK+0x268>
 800155c:	6868      	ldr	r0, [r5, #4]
 800155e:	6801      	ldr	r1, [r0, #0]
 8001560:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001564:	2800      	cmp	r0, #0
 8001566:	d0bc      	beq.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 8001568:	f001 0203 	and.w	r2, r1, #3
 800156c:	6868      	ldr	r0, [r5, #4]
 800156e:	2a01      	cmp	r2, #1
 8001570:	bf0c      	ite	eq
 8001572:	2200      	moveq	r2, #0
 8001574:	2220      	movne	r2, #32
 8001576:	f021 0120 	bic.w	r1, r1, #32
 800157a:	4311      	orrs	r1, r2
 800157c:	6001      	str	r1, [r0, #0]
 800157e:	2001      	movs	r0, #1
 8001580:	7628      	strb	r0, [r5, #24]
 8001582:	f8a5 801a 	strh.w	r8, [r5, #26]
 8001586:	4654      	mov	r4, sl
 8001588:	2143      	movs	r1, #67	@ 0x43
 800158a:	7369      	strb	r1, [r5, #13]
 800158c:	e7a9      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 800158e:	f000 fa18 	bl	80019c2 <.text_5>
 8001592:	d131      	bne.n	80015f8 <USBPD_PE_StateMachine_SNK+0x31c>
 8001594:	88b1      	ldrh	r1, [r6, #4]
 8001596:	0bc8      	lsrs	r0, r1, #15
 8001598:	d12a      	bne.n	80015f0 <USBPD_PE_StateMachine_SNK+0x314>
 800159a:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800159e:	b338      	cbz	r0, 80015f0 <USBPD_PE_StateMachine_SNK+0x314>
 80015a0:	4608      	mov	r0, r1
 80015a2:	f000 011f 	and.w	r1, r0, #31
 80015a6:	2901      	cmp	r1, #1
 80015a8:	d122      	bne.n	80015f0 <USBPD_PE_StateMachine_SNK+0x314>
 80015aa:	2200      	movs	r2, #0
 80015ac:	f889 2004 	strb.w	r2, [r9, #4]
 80015b0:	6929      	ldr	r1, [r5, #16]
 80015b2:	f041 0104 	orr.w	r1, r1, #4
 80015b6:	6129      	str	r1, [r5, #16]
 80015b8:	f3c0 1181 	ubfx	r1, r0, #6, #2
 80015bc:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80015c0:	f7ff f95b 	bl	800087a <PE_ExtRevisionInteroperability>
 80015c4:	88b0      	ldrh	r0, [r6, #4]
 80015c6:	f3c0 3302 	ubfx	r3, r0, #12, #3
 80015ca:	68b0      	ldr	r0, [r6, #8]
 80015cc:	68ae      	ldr	r6, [r5, #8]
 80015ce:	f8d6 a018 	ldr.w	sl, [r6, #24]
 80015d2:	1c82      	adds	r2, r0, #2
 80015d4:	7b28      	ldrb	r0, [r5, #12]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	2104      	movs	r1, #4
 80015da:	47d0      	blx	sl
 80015dc:	2001      	movs	r0, #1
 80015de:	7628      	strb	r0, [r5, #24]
 80015e0:	f000 fa04 	bl	80019ec <.text_9>
 80015e4:	2044      	movs	r0, #68	@ 0x44
 80015e6:	7368      	strb	r0, [r5, #13]
 80015e8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80015ec:	2914      	cmp	r1, #20
 80015ee:	d003      	beq.n	80015f8 <USBPD_PE_StateMachine_SNK+0x31c>
 80015f0:	f000 f9e3 	bl	80019ba <.text_4>
 80015f4:	f000 fa0e 	bl	8001a14 <.text_13+0x6>
 80015f8:	e090      	b.n	800171c <USBPD_PE_StateMachine_SNK+0x440>
 80015fa:	68ab      	ldr	r3, [r5, #8]
 80015fc:	7b28      	ldrb	r0, [r5, #12]
 80015fe:	6a1c      	ldr	r4, [r3, #32]
 8001600:	466a      	mov	r2, sp
 8001602:	f105 0114 	add.w	r1, r5, #20
 8001606:	47a0      	blx	r4
 8001608:	9800      	ldr	r0, [sp, #0]
 800160a:	6929      	ldr	r1, [r5, #16]
 800160c:	f360 01c4 	bfi	r1, r0, #3, #2
 8001610:	6129      	str	r1, [r5, #16]
 8001612:	2045      	movs	r0, #69	@ 0x45
 8001614:	7368      	strb	r0, [r5, #13]
 8001616:	2400      	movs	r4, #0
 8001618:	e763      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 800161a:	6928      	ldr	r0, [r5, #16]
 800161c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8001620:	b100      	cbz	r0, 8001624 <USBPD_PE_StateMachine_SNK+0x348>
 8001622:	2002      	movs	r0, #2
 8001624:	9002      	str	r0, [sp, #8]
 8001626:	2101      	movs	r1, #1
 8001628:	2046      	movs	r0, #70	@ 0x46
 800162a:	9001      	str	r0, [sp, #4]
 800162c:	9100      	str	r1, [sp, #0]
 800162e:	f105 0314 	add.w	r3, r5, #20
 8001632:	2202      	movs	r2, #2
 8001634:	2100      	movs	r1, #0
 8001636:	4628      	mov	r0, r5
 8001638:	f7ff fbbb 	bl	8000db2 <PE_Send_DataMessage>
 800163c:	2800      	cmp	r0, #0
 800163e:	d106      	bne.n	800164e <USBPD_PE_StateMachine_SNK+0x372>
 8001640:	6928      	ldr	r0, [r5, #16]
 8001642:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8001646:	6128      	str	r0, [r5, #16]
 8001648:	f8a5 b01a 	strh.w	fp, [r5, #26]
 800164c:	241b      	movs	r4, #27
 800164e:	e748      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 8001650:	f000 f9b7 	bl	80019c2 <.text_5>
 8001654:	bf04      	itt	eq
 8001656:	88b0      	ldrheq	r0, [r6, #4]
 8001658:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 800165c:	d144      	bne.n	80016e8 <USBPD_PE_StateMachine_SNK+0x40c>
 800165e:	f000 001f 	and.w	r0, r0, #31
 8001662:	2802      	cmp	r0, #2
 8001664:	bf18      	it	ne
 8001666:	2803      	cmpne	r0, #3
 8001668:	d019      	beq.n	800169e <USBPD_PE_StateMachine_SNK+0x3c2>
 800166a:	2804      	cmp	r0, #4
 800166c:	bf18      	it	ne
 800166e:	280c      	cmpne	r0, #12
 8001670:	d126      	bne.n	80016c0 <USBPD_PE_StateMachine_SNK+0x3e4>
 8001672:	6868      	ldr	r0, [r5, #4]
 8001674:	6801      	ldr	r1, [r0, #0]
 8001676:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800167a:	2803      	cmp	r0, #3
 800167c:	d005      	beq.n	800168a <USBPD_PE_StateMachine_SNK+0x3ae>
 800167e:	2043      	movs	r0, #67	@ 0x43
 8001680:	7368      	strb	r0, [r5, #13]
 8001682:	f8a5 801a 	strh.w	r8, [r5, #26]
 8001686:	4654      	mov	r4, sl
 8001688:	e016      	b.n	80016b8 <USBPD_PE_StateMachine_SNK+0x3dc>
 800168a:	7930      	ldrb	r0, [r6, #4]
 800168c:	f000 001f 	and.w	r0, r0, #31
 8001690:	280c      	cmp	r0, #12
 8001692:	bf0c      	ite	eq
 8001694:	2049      	moveq	r0, #73	@ 0x49
 8001696:	2003      	movne	r0, #3
 8001698:	7368      	strb	r0, [r5, #13]
 800169a:	2400      	movs	r4, #0
 800169c:	e00c      	b.n	80016b8 <USBPD_PE_StateMachine_SNK+0x3dc>
 800169e:	f8a5 801a 	strh.w	r8, [r5, #26]
 80016a2:	2104      	movs	r1, #4
 80016a4:	4628      	mov	r0, r5
 80016a6:	f7ff faf2 	bl	8000c8e <PE_SetPowerNegotiation>
 80016aa:	2047      	movs	r0, #71	@ 0x47
 80016ac:	7368      	strb	r0, [r5, #13]
 80016ae:	4654      	mov	r4, sl
 80016b0:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80016b4:	2914      	cmp	r1, #20
 80016b6:	d003      	beq.n	80016c0 <USBPD_PE_StateMachine_SNK+0x3e4>
 80016b8:	f000 f97f 	bl	80019ba <.text_4>
 80016bc:	f000 f9aa 	bl	8001a14 <.text_13+0x6>
 80016c0:	7930      	ldrb	r0, [r6, #4]
 80016c2:	f000 001f 	and.w	r0, r0, #31
 80016c6:	2802      	cmp	r0, #2
 80016c8:	d009      	beq.n	80016de <USBPD_PE_StateMachine_SNK+0x402>
 80016ca:	2803      	cmp	r0, #3
 80016cc:	d009      	beq.n	80016e2 <USBPD_PE_StateMachine_SNK+0x406>
 80016ce:	2804      	cmp	r0, #4
 80016d0:	d003      	beq.n	80016da <USBPD_PE_StateMachine_SNK+0x3fe>
 80016d2:	280c      	cmp	r0, #12
 80016d4:	d108      	bne.n	80016e8 <USBPD_PE_StateMachine_SNK+0x40c>
 80016d6:	2103      	movs	r1, #3
 80016d8:	e004      	b.n	80016e4 <USBPD_PE_StateMachine_SNK+0x408>
 80016da:	2102      	movs	r1, #2
 80016dc:	e002      	b.n	80016e4 <USBPD_PE_StateMachine_SNK+0x408>
 80016de:	2104      	movs	r1, #4
 80016e0:	e000      	b.n	80016e4 <USBPD_PE_StateMachine_SNK+0x408>
 80016e2:	2101      	movs	r1, #1
 80016e4:	f000 f990 	bl	8001a08 <.text_12>
 80016e8:	f000 f963 	bl	80019b2 <.text_3>
 80016ec:	d1af      	bne.n	800164e <USBPD_PE_StateMachine_SNK+0x372>
 80016ee:	210f      	movs	r1, #15
 80016f0:	7369      	strb	r1, [r5, #13]
 80016f2:	e790      	b.n	8001616 <USBPD_PE_StateMachine_SNK+0x33a>
 80016f4:	f000 f965 	bl	80019c2 <.text_5>
 80016f8:	bf02      	ittt	eq
 80016fa:	88b0      	ldrheq	r0, [r6, #4]
 80016fc:	4007      	andeq	r7, r0
 80016fe:	2f06      	cmpeq	r7, #6
 8001700:	d10c      	bne.n	800171c <USBPD_PE_StateMachine_SNK+0x440>
 8001702:	f000 f984 	bl	8001a0e <.text_13>
 8001706:	2103      	movs	r1, #3
 8001708:	4628      	mov	r0, r5
 800170a:	f7ff fac0 	bl	8000c8e <PE_SetPowerNegotiation>
 800170e:	7b28      	ldrb	r0, [r5, #12]
 8001710:	2110      	movs	r1, #16
 8001712:	f7fe feb6 	bl	8000482 <USBPD_PE_Notification>
 8001716:	2003      	movs	r0, #3
 8001718:	7368      	strb	r0, [r5, #13]
 800171a:	2400      	movs	r4, #0
 800171c:	f000 f949 	bl	80019b2 <.text_3>
 8001720:	d195      	bne.n	800164e <USBPD_PE_StateMachine_SNK+0x372>
 8001722:	e7e4      	b.n	80016ee <USBPD_PE_StateMachine_SNK+0x412>
 8001724:	f000 f962 	bl	80019ec <.text_9>
 8001728:	4628      	mov	r0, r5
 800172a:	2101      	movs	r1, #1
 800172c:	f7ff faaf 	bl	8000c8e <PE_SetPowerNegotiation>
 8001730:	f899 0004 	ldrb.w	r0, [r9, #4]
 8001734:	2803      	cmp	r0, #3
 8001736:	d30a      	bcc.n	800174e <USBPD_PE_StateMachine_SNK+0x472>
 8001738:	6928      	ldr	r0, [r5, #16]
 800173a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800173e:	2800      	cmp	r0, #0
 8001740:	bf1e      	ittt	ne
 8001742:	68a9      	ldrne	r1, [r5, #8]
 8001744:	6b48      	ldrne	r0, [r1, #52]	@ 0x34
 8001746:	2800      	cmpne	r0, #0
 8001748:	d15f      	bne.n	800180a <USBPD_PE_StateMachine_SNK+0x52e>
 800174a:	2100      	movs	r1, #0
 800174c:	e71d      	b.n	800158a <USBPD_PE_StateMachine_SNK+0x2ae>
 800174e:	1c40      	adds	r0, r0, #1
 8001750:	f889 0004 	strb.w	r0, [r9, #4]
 8001754:	2105      	movs	r1, #5
 8001756:	4628      	mov	r0, r5
 8001758:	f7fe ff5c 	bl	8000614 <PE_Send_RESET>
 800175c:	f248 30e8 	movw	r0, #33768	@ 0x83e8
 8001760:	8368      	strh	r0, [r5, #26]
 8001762:	2201      	movs	r2, #1
 8001764:	f000 f948 	bl	80019f8 <.text_10>
 8001768:	209b      	movs	r0, #155	@ 0x9b
 800176a:	e753      	b.n	8001614 <USBPD_PE_StateMachine_SNK+0x338>
 800176c:	2200      	movs	r2, #0
 800176e:	f000 f943 	bl	80019f8 <.text_10>
 8001772:	f248 30e8 	movw	r0, #33768	@ 0x83e8
 8001776:	8368      	strh	r0, [r5, #26]
 8001778:	219b      	movs	r1, #155	@ 0x9b
 800177a:	e7b9      	b.n	80016f0 <USBPD_PE_StateMachine_SNK+0x414>
 800177c:	68aa      	ldr	r2, [r5, #8]
 800177e:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001782:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8001784:	2100      	movs	r1, #0
 8001786:	4798      	blx	r3
 8001788:	2801      	cmp	r0, #1
 800178a:	d10d      	bne.n	80017a8 <USBPD_PE_StateMachine_SNK+0x4cc>
 800178c:	f648 00e3 	movw	r0, #35043	@ 0x88e3
 8001790:	8368      	strh	r0, [r5, #26]
 8001792:	2169      	movs	r1, #105	@ 0x69
 8001794:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001798:	f7fe fe73 	bl	8000482 <USBPD_PE_Notification>
 800179c:	2040      	movs	r0, #64	@ 0x40
 800179e:	7368      	strb	r0, [r5, #13]
 80017a0:	2113      	movs	r1, #19
 80017a2:	f000 f931 	bl	8001a08 <.text_12>
 80017a6:	2400      	movs	r4, #0
 80017a8:	f000 f903 	bl	80019b2 <.text_3>
 80017ac:	d132      	bne.n	8001814 <USBPD_PE_StateMachine_SNK+0x538>
 80017ae:	e01b      	b.n	80017e8 <USBPD_PE_StateMachine_SNK+0x50c>
 80017b0:	68aa      	ldr	r2, [r5, #8]
 80017b2:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80017b6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80017b8:	2101      	movs	r1, #1
 80017ba:	4798      	blx	r3
 80017bc:	2801      	cmp	r0, #1
 80017be:	d110      	bne.n	80017e2 <USBPD_PE_StateMachine_SNK+0x506>
 80017c0:	4628      	mov	r0, r5
 80017c2:	f7ff f812 	bl	80007ea <PE_Reset_HardReset>
 80017c6:	2205      	movs	r2, #5
 80017c8:	2100      	movs	r1, #0
 80017ca:	f000 f916 	bl	80019fa <.text_10+0x2>
 80017ce:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80017d2:	2168      	movs	r1, #104	@ 0x68
 80017d4:	f7fe fe55 	bl	8000482 <USBPD_PE_Notification>
 80017d8:	f8a5 801a 	strh.w	r8, [r5, #26]
 80017dc:	2043      	movs	r0, #67	@ 0x43
 80017de:	4654      	mov	r4, sl
 80017e0:	7368      	strb	r0, [r5, #13]
 80017e2:	f000 f8e6 	bl	80019b2 <.text_3>
 80017e6:	d115      	bne.n	8001814 <USBPD_PE_StateMachine_SNK+0x538>
 80017e8:	2206      	movs	r2, #6
 80017ea:	2100      	movs	r1, #0
 80017ec:	f000 f905 	bl	80019fa <.text_10+0x2>
 80017f0:	f899 0004 	ldrb.w	r0, [r9, #4]
 80017f4:	2803      	cmp	r0, #3
 80017f6:	d348      	bcc.n	800188a <USBPD_PE_StateMachine_SNK+0x5ae>
 80017f8:	6928      	ldr	r0, [r5, #16]
 80017fa:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80017fe:	2800      	cmp	r0, #0
 8001800:	bf1e      	ittt	ne
 8001802:	68a9      	ldrne	r1, [r5, #8]
 8001804:	6b48      	ldrne	r0, [r1, #52]	@ 0x34
 8001806:	2800      	cmpne	r0, #0
 8001808:	d001      	beq.n	800180e <USBPD_PE_StateMachine_SNK+0x532>
 800180a:	2192      	movs	r1, #146	@ 0x92
 800180c:	e770      	b.n	80016f0 <USBPD_PE_StateMachine_SNK+0x414>
 800180e:	2000      	movs	r0, #0
 8001810:	7368      	strb	r0, [r5, #13]
 8001812:	4604      	mov	r4, r0
 8001814:	e665      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 8001816:	2000      	movs	r0, #0
 8001818:	9000      	str	r0, [sp, #0]
 800181a:	2303      	movs	r3, #3
 800181c:	2203      	movs	r2, #3
 800181e:	f000 f8ef 	bl	8001a00 <.text_11>
 8001822:	2800      	cmp	r0, #0
 8001824:	d1f6      	bne.n	8001814 <USBPD_PE_StateMachine_SNK+0x538>
 8001826:	e6aa      	b.n	800157e <USBPD_PE_StateMachine_SNK+0x2a2>
 8001828:	6868      	ldr	r0, [r5, #4]
 800182a:	6801      	ldr	r1, [r0, #0]
 800182c:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001830:	2804      	cmp	r0, #4
 8001832:	d02a      	beq.n	800188a <USBPD_PE_StateMachine_SNK+0x5ae>
 8001834:	2000      	movs	r0, #0
 8001836:	9000      	str	r0, [sp, #0]
 8001838:	2350      	movs	r3, #80	@ 0x50
 800183a:	7871      	ldrb	r1, [r6, #1]
 800183c:	220d      	movs	r2, #13
 800183e:	f000 f8e0 	bl	8001a02 <.text_11+0x2>
 8001842:	2800      	cmp	r0, #0
 8001844:	d107      	bne.n	8001856 <USBPD_PE_StateMachine_SNK+0x57a>
 8001846:	2003      	movs	r0, #3
 8001848:	7628      	strb	r0, [r5, #24]
 800184a:	f8a5 b01a 	strh.w	fp, [r5, #26]
 800184e:	241b      	movs	r4, #27
 8001850:	2130      	movs	r1, #48	@ 0x30
 8001852:	f000 f8d9 	bl	8001a08 <.text_12>
 8001856:	e644      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 8001858:	f000 f8b8 	bl	80019cc <.text_6+0x2>
 800185c:	d012      	beq.n	8001884 <USBPD_PE_StateMachine_SNK+0x5a8>
 800185e:	7831      	ldrb	r1, [r6, #0]
 8001860:	7870      	ldrb	r0, [r6, #1]
 8001862:	4281      	cmp	r1, r0
 8001864:	bf02      	ittt	eq
 8001866:	88b1      	ldrheq	r1, [r6, #4]
 8001868:	400f      	andeq	r7, r1
 800186a:	2f03      	cmpeq	r7, #3
 800186c:	d10a      	bne.n	8001884 <USBPD_PE_StateMachine_SNK+0x5a8>
 800186e:	2001      	movs	r0, #1
 8001870:	7628      	strb	r0, [r5, #24]
 8001872:	f8a5 801a 	strh.w	r8, [r5, #26]
 8001876:	2143      	movs	r1, #67	@ 0x43
 8001878:	7369      	strb	r1, [r5, #13]
 800187a:	f000 f89e 	bl	80019ba <.text_4>
 800187e:	4654      	mov	r4, sl
 8001880:	f000 f8c8 	bl	8001a14 <.text_13+0x6>
 8001884:	f000 f895 	bl	80019b2 <.text_3>
 8001888:	d1e5      	bne.n	8001856 <USBPD_PE_StateMachine_SNK+0x57a>
 800188a:	e730      	b.n	80016ee <USBPD_PE_StateMachine_SNK+0x412>
 800188c:	9400      	str	r4, [sp, #0]
 800188e:	2343      	movs	r3, #67	@ 0x43
 8001890:	2207      	movs	r2, #7
 8001892:	f000 f8b5 	bl	8001a00 <.text_11>
 8001896:	2800      	cmp	r0, #0
 8001898:	d118      	bne.n	80018cc <USBPD_PE_StateMachine_SNK+0x5f0>
 800189a:	2006      	movs	r0, #6
 800189c:	7628      	strb	r0, [r5, #24]
 800189e:	f8a5 b01a 	strh.w	fp, [r5, #26]
 80018a2:	241b      	movs	r4, #27
 80018a4:	210b      	movs	r1, #11
 80018a6:	e7d4      	b.n	8001852 <USBPD_PE_StateMachine_SNK+0x576>
 80018a8:	f000 f88b 	bl	80019c2 <.text_5>
 80018ac:	bf02      	ittt	eq
 80018ae:	88b0      	ldrheq	r0, [r6, #4]
 80018b0:	4007      	andeq	r7, r0
 80018b2:	2f06      	cmpeq	r7, #6
 80018b4:	d10a      	bne.n	80018cc <USBPD_PE_StateMachine_SNK+0x5f0>
 80018b6:	7b28      	ldrb	r0, [r5, #12]
 80018b8:	212c      	movs	r1, #44	@ 0x2c
 80018ba:	f7fe fde2 	bl	8000482 <USBPD_PE_Notification>
 80018be:	2003      	movs	r0, #3
 80018c0:	7368      	strb	r0, [r5, #13]
 80018c2:	f000 f882 	bl	80019ca <.text_6>
 80018c6:	d001      	beq.n	80018cc <USBPD_PE_StateMachine_SNK+0x5f0>
 80018c8:	f000 f8a1 	bl	8001a0e <.text_13>
 80018cc:	e609      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 80018ce:	2000      	movs	r0, #0
 80018d0:	9000      	str	r0, [sp, #0]
 80018d2:	2303      	movs	r3, #3
 80018d4:	2204      	movs	r2, #4
 80018d6:	f000 f893 	bl	8001a00 <.text_11>
 80018da:	e602      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 80018dc:	2804      	cmp	r0, #4
 80018de:	d006      	beq.n	80018ee <USBPD_PE_StateMachine_SNK+0x612>
 80018e0:	2000      	movs	r0, #0
 80018e2:	7628      	strb	r0, [r5, #24]
 80018e4:	2104      	movs	r1, #4
 80018e6:	7369      	strb	r1, [r5, #13]
 80018e8:	2120      	movs	r1, #32
 80018ea:	f000 f88d 	bl	8001a08 <.text_12>
 80018ee:	a903      	add	r1, sp, #12
 80018f0:	4628      	mov	r0, r5
 80018f2:	f000 f892 	bl	8001a1a <PE_StateMachine_SNK_ReadyWait>
 80018f6:	e78c      	b.n	8001812 <USBPD_PE_StateMachine_SNK+0x536>
 80018f8:	9400      	str	r4, [sp, #0]
 80018fa:	2339      	movs	r3, #57	@ 0x39
 80018fc:	f899 2000 	ldrb.w	r2, [r9]
 8001900:	f000 f87e 	bl	8001a00 <.text_11>
 8001904:	2800      	cmp	r0, #0
 8001906:	d1e8      	bne.n	80018da <USBPD_PE_StateMachine_SNK+0x5fe>
 8001908:	f899 0001 	ldrb.w	r0, [r9, #1]
 800190c:	7628      	strb	r0, [r5, #24]
 800190e:	2144      	movs	r1, #68	@ 0x44
 8001910:	f000 f87a 	bl	8001a08 <.text_12>
 8001914:	e698      	b.n	8001648 <USBPD_PE_StateMachine_SNK+0x36c>
 8001916:	f000 f859 	bl	80019cc <.text_6+0x2>
 800191a:	d018      	beq.n	800194e <USBPD_PE_StateMachine_SNK+0x672>
 800191c:	88b0      	ldrh	r0, [r6, #4]
 800191e:	0bc0      	lsrs	r0, r0, #15
 8001920:	d009      	beq.n	8001936 <USBPD_PE_StateMachine_SNK+0x65a>
 8001922:	4628      	mov	r0, r5
 8001924:	f7ff fa81 	bl	8000e2a <PE_Check_ExtendedMessage>
 8001928:	f000 f850 	bl	80019cc <.text_6+0x2>
 800192c:	d001      	beq.n	8001932 <USBPD_PE_StateMachine_SNK+0x656>
 800192e:	f000 f86e 	bl	8001a0e <.text_13>
 8001932:	2000      	movs	r0, #0
 8001934:	8368      	strh	r0, [r5, #26]
 8001936:	88b0      	ldrh	r0, [r6, #4]
 8001938:	4007      	ands	r7, r0
 800193a:	2f10      	cmp	r7, #16
 800193c:	d107      	bne.n	800194e <USBPD_PE_StateMachine_SNK+0x672>
 800193e:	2103      	movs	r1, #3
 8001940:	7369      	strb	r1, [r5, #13]
 8001942:	f000 f842 	bl	80019ca <.text_6>
 8001946:	d001      	beq.n	800194c <USBPD_PE_StateMachine_SNK+0x670>
 8001948:	f000 f861 	bl	8001a0e <.text_13>
 800194c:	836c      	strh	r4, [r5, #26]
 800194e:	f000 f830 	bl	80019b2 <.text_3>
 8001952:	d1c2      	bne.n	80018da <USBPD_PE_StateMachine_SNK+0x5fe>
 8001954:	2103      	movs	r1, #3
 8001956:	e6cb      	b.n	80016f0 <USBPD_PE_StateMachine_SNK+0x414>
 8001958:	4628      	mov	r0, r5
 800195a:	f7ff fae8 	bl	8000f2e <PE_SubStateMachine_ExtendedMessages>
 800195e:	e758      	b.n	8001812 <USBPD_PE_StateMachine_SNK+0x536>
 8001960:	a903      	add	r1, sp, #12
 8001962:	4628      	mov	r0, r5
 8001964:	f7ff f839 	bl	80009da <PE_SubStateMachine_Generic>
 8001968:	e753      	b.n	8001812 <USBPD_PE_StateMachine_SNK+0x536>
 800196a:	6928      	ldr	r0, [r5, #16]
 800196c:	f3c0 3040 	ubfx	r0, r0, #13, #1
 8001970:	b1b8      	cbz	r0, 80019a2 <USBPD_PE_StateMachine_SNK+0x6c6>
 8001972:	6928      	ldr	r0, [r5, #16]
 8001974:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8001978:	b138      	cbz	r0, 800198a <USBPD_PE_StateMachine_SNK+0x6ae>
 800197a:	7b28      	ldrb	r0, [r5, #12]
 800197c:	215b      	movs	r1, #91	@ 0x5b
 800197e:	f7fe fd80 	bl	8000482 <USBPD_PE_Notification>
 8001982:	6928      	ldr	r0, [r5, #16]
 8001984:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 8001988:	6128      	str	r0, [r5, #16]
 800198a:	2003      	movs	r0, #3
 800198c:	7ba9      	ldrb	r1, [r5, #14]
 800198e:	7368      	strb	r0, [r5, #13]
 8001990:	2903      	cmp	r1, #3
 8001992:	d005      	beq.n	80019a0 <USBPD_PE_StateMachine_SNK+0x6c4>
 8001994:	73a8      	strb	r0, [r5, #14]
 8001996:	f000 f823 	bl	80019e0 <.text_8>
 800199a:	2203      	movs	r2, #3
 800199c:	2004      	movs	r0, #4
 800199e:	47a0      	blx	r4
 80019a0:	2401      	movs	r4, #1
 80019a2:	6928      	ldr	r0, [r5, #16]
 80019a4:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 80019a8:	2c00      	cmp	r4, #0
 80019aa:	6128      	str	r0, [r5, #16]
 80019ac:	f43f acef 	beq.w	800138e <USBPD_PE_StateMachine_SNK+0xb2>
 80019b0:	e5c1      	b.n	8001536 <USBPD_PE_StateMachine_SNK+0x25a>

080019b2 <.text_3>:
 80019b2:	8b68      	ldrh	r0, [r5, #26]
 80019b4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80019b8:	4770      	bx	lr

080019ba <.text_4>:
 80019ba:	2014      	movs	r0, #20
 80019bc:	f88d 000c 	strb.w	r0, [sp, #12]
 80019c0:	4770      	bx	lr

080019c2 <.text_5>:
 80019c2:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80019c6:	2811      	cmp	r0, #17
 80019c8:	4770      	bx	lr

080019ca <.text_6>:
 80019ca:	2400      	movs	r4, #0
 80019cc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80019d0:	2814      	cmp	r0, #20
 80019d2:	4770      	bx	lr

080019d4 <.text_7>:
 80019d4:	2300      	movs	r3, #0
 80019d6:	4f4b      	ldr	r7, [pc, #300]	@ (8001b04 <.text_16>)
 80019d8:	7b29      	ldrb	r1, [r5, #12]
 80019da:	f8d7 c000 	ldr.w	ip, [r7]
 80019de:	4770      	bx	lr

080019e0 <.text_8>:
 80019e0:	2100      	movs	r1, #0
 80019e2:	9100      	str	r1, [sp, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	7b29      	ldrb	r1, [r5, #12]
 80019e8:	6834      	ldr	r4, [r6, #0]
 80019ea:	4770      	bx	lr

080019ec <.text_9>:
 80019ec:	6868      	ldr	r0, [r5, #4]
 80019ee:	6801      	ldr	r1, [r0, #0]
 80019f0:	f021 0110 	bic.w	r1, r1, #16
 80019f4:	6001      	str	r1, [r0, #0]
 80019f6:	4770      	bx	lr

080019f8 <.text_10>:
 80019f8:	2101      	movs	r1, #1
 80019fa:	4628      	mov	r0, r5
 80019fc:	f7ff b940 	b.w	8000c80 <PE_CallHardResetCallback>

08001a00 <.text_11>:
 8001a00:	2100      	movs	r1, #0
 8001a02:	4628      	mov	r0, r5
 8001a04:	f7ff b9a8 	b.w	8000d58 <PE_Send_CtrlMessage>

08001a08 <.text_12>:
 8001a08:	7b28      	ldrb	r0, [r5, #12]
 8001a0a:	f7fe bd3a 	b.w	8000482 <USBPD_PE_Notification>

08001a0e <.text_13>:
 8001a0e:	2114      	movs	r1, #20
 8001a10:	f88d 100c 	strb.w	r1, [sp, #12]
 8001a14:	4628      	mov	r0, r5
 8001a16:	f7fe be52 	b.w	80006be <PE_Clear_RxEvent>

08001a1a <PE_StateMachine_SNK_ReadyWait>:
 8001a1a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8001a1c:	460e      	mov	r6, r1
 8001a1e:	4604      	mov	r4, r0
 8001a20:	7830      	ldrb	r0, [r6, #0]
 8001a22:	2502      	movs	r5, #2
 8001a24:	2814      	cmp	r0, #20
 8001a26:	d00b      	beq.n	8001a40 <PE_StateMachine_SNK_ReadyWait+0x26>
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7ff fb54 	bl	80010d6 <PE_ManageRXEvent>
 8001a2e:	7830      	ldrb	r0, [r6, #0]
 8001a30:	2814      	cmp	r0, #20
 8001a32:	d062      	beq.n	8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001a34:	2114      	movs	r1, #20
 8001a36:	7031      	strb	r1, [r6, #0]
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f7fe fe40 	bl	80006be <PE_Clear_RxEvent>
 8001a3e:	e05c      	b.n	8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001a40:	6920      	ldr	r0, [r4, #16]
 8001a42:	0cc0      	lsrs	r0, r0, #19
 8001a44:	d029      	beq.n	8001a9a <PE_StateMachine_SNK_ReadyWait+0x80>
 8001a46:	8ba0      	ldrh	r0, [r4, #28]
 8001a48:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001a4c:	d110      	bne.n	8001a70 <PE_StateMachine_SNK_ReadyWait+0x56>
 8001a4e:	210f      	movs	r1, #15
 8001a50:	7361      	strb	r1, [r4, #13]
 8001a52:	2000      	movs	r0, #0
 8001a54:	4d2b      	ldr	r5, [pc, #172]	@ (8001b04 <.text_16>)
 8001a56:	682e      	ldr	r6, [r5, #0]
 8001a58:	9000      	str	r0, [sp, #0]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	7b21      	ldrb	r1, [r4, #12]
 8001a5e:	2270      	movs	r2, #112	@ 0x70
 8001a60:	2009      	movs	r0, #9
 8001a62:	47b0      	blx	r6
 8001a64:	f894 007c 	ldrb.w	r0, [r4, #124]	@ 0x7c
 8001a68:	1c40      	adds	r0, r0, #1
 8001a6a:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
 8001a6e:	e03f      	b.n	8001af0 <PE_StateMachine_SNK_ReadyWait+0xd6>
 8001a70:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8001a72:	6922      	ldr	r2, [r4, #16]
 8001a74:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8001a78:	2033      	movs	r0, #51	@ 0x33
 8001a7a:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 8001a7e:	fb11 f100 	smulbb	r1, r1, r0
 8001a82:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8001a86:	83a1      	strh	r1, [r4, #28]
 8001a88:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8001a8a:	6922      	ldr	r2, [r4, #16]
 8001a8c:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8001a90:	eb01 45d2 	add.w	r5, r1, r2, lsr #19
 8001a94:	4345      	muls	r5, r0
 8001a96:	b2ad      	uxth	r5, r5
 8001a98:	e02f      	b.n	8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001a9a:	7b20      	ldrb	r0, [r4, #12]
 8001a9c:	f7fe fe33 	bl	8000706 <PE_PRL_Control_RxEvent>
 8001aa0:	f104 0629 	add.w	r6, r4, #41	@ 0x29
 8001aa4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001aa8:	bb20      	cbnz	r0, 8001af4 <PE_StateMachine_SNK_ReadyWait+0xda>
 8001aaa:	7870      	ldrb	r0, [r6, #1]
 8001aac:	b328      	cbz	r0, 8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001aae:	6860      	ldr	r0, [r4, #4]
 8001ab0:	6800      	ldr	r0, [r0, #0]
 8001ab2:	f000 0103 	and.w	r1, r0, #3
 8001ab6:	2901      	cmp	r1, #1
 8001ab8:	d008      	beq.n	8001acc <PE_StateMachine_SNK_ReadyWait+0xb2>
 8001aba:	f000 0003 	and.w	r0, r0, #3
 8001abe:	2802      	cmp	r0, #2
 8001ac0:	d118      	bne.n	8001af4 <PE_StateMachine_SNK_ReadyWait+0xda>
 8001ac2:	7b20      	ldrb	r0, [r4, #12]
 8001ac4:	f000 f886 	bl	8001bd4 <USBPD_PRL_IsResistor_SinkTxOK>
 8001ac8:	2801      	cmp	r0, #1
 8001aca:	d113      	bne.n	8001af4 <PE_StateMachine_SNK_ReadyWait+0xda>
 8001acc:	78b0      	ldrb	r0, [r6, #2]
 8001ace:	7030      	strb	r0, [r6, #0]
 8001ad0:	7870      	ldrb	r0, [r6, #1]
 8001ad2:	7360      	strb	r0, [r4, #13]
 8001ad4:	2845      	cmp	r0, #69	@ 0x45
 8001ad6:	d103      	bne.n	8001ae0 <PE_StateMachine_SNK_ReadyWait+0xc6>
 8001ad8:	6920      	ldr	r0, [r4, #16]
 8001ada:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8001ade:	6120      	str	r0, [r4, #16]
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	7070      	strb	r0, [r6, #1]
 8001ae4:	6920      	ldr	r0, [r4, #16]
 8001ae6:	6a21      	ldr	r1, [r4, #32]
 8001ae8:	6261      	str	r1, [r4, #36]	@ 0x24
 8001aea:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 8001aee:	6120      	str	r0, [r4, #16]
 8001af0:	2500      	movs	r5, #0
 8001af2:	e002      	b.n	8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001af4:	7870      	ldrb	r0, [r6, #1]
 8001af6:	b100      	cbz	r0, 8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001af8:	2502      	movs	r5, #2
 8001afa:	4628      	mov	r0, r5
 8001afc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08001b00 <.text_15>:
 8001b00:	2000050c 	.word	0x2000050c

08001b04 <.text_16>:
 8001b04:	20000000 	.word	0x20000000

08001b08 <USBPD_PRL_TimerCounter>:
 8001b08:	f8df 1a40 	ldr.w	r1, [pc, #2624]	@ 800254c <.text_37>
 8001b0c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8001b10:	78c8      	ldrb	r0, [r1, #3]
 8001b12:	b110      	cbz	r0, 8001b1a <USBPD_PRL_TimerCounter+0x12>
 8001b14:	78c8      	ldrb	r0, [r1, #3]
 8001b16:	1e42      	subs	r2, r0, #1
 8001b18:	70ca      	strb	r2, [r1, #3]
 8001b1a:	4770      	bx	lr

08001b1c <USBPD_PRL_Init>:
 8001b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b20:	4680      	mov	r8, r0
 8001b22:	460e      	mov	r6, r1
 8001b24:	4617      	mov	r7, r2
 8001b26:	461d      	mov	r5, r3
 8001b28:	2048      	movs	r0, #72	@ 0x48
 8001b2a:	f015 fb2b 	bl	8017184 <malloc>
 8001b2e:	0004      	movs	r4, r0
 8001b30:	f04f 0916 	mov.w	r9, #22
 8001b34:	d018      	beq.n	8001b68 <USBPD_PRL_Init+0x4c>
 8001b36:	2148      	movs	r1, #72	@ 0x48
 8001b38:	f017 f869 	bl	8018c0e <__aeabi_memclr>
 8001b3c:	f000 fa9a 	bl	8002074 <.text_17>
 8001b40:	f8df 0a08 	ldr.w	r0, [pc, #2568]	@ 800254c <.text_37>
 8001b44:	4641      	mov	r1, r8
 8001b46:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8001b4a:	6227      	str	r7, [r4, #32]
 8001b4c:	6265      	str	r5, [r4, #36]	@ 0x24
 8001b4e:	2001      	movs	r0, #1
 8001b50:	9000      	str	r0, [sp, #0]
 8001b52:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8001b56:	6870      	ldr	r0, [r6, #4]
 8001b58:	f60f 2110 	addw	r1, pc, #2576	@ 0xa10
 8001b5c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001b60:	4640      	mov	r0, r8
 8001b62:	f00f fad3 	bl	801110c <USBPD_PHY_Init>
 8001b66:	4681      	mov	r9, r0
 8001b68:	4648      	mov	r0, r9
 8001b6a:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08001b6e <USBPD_PRL_GetMemoryConsumption>:
 8001b6e:	20d8      	movs	r0, #216	@ 0xd8
 8001b70:	4770      	bx	lr

08001b72 <USBPD_PRL_SetHeader>:
 8001b72:	b530      	push	{r4, r5, lr}
 8001b74:	f8df 49d4 	ldr.w	r4, [pc, #2516]	@ 800254c <.text_37>
 8001b78:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8001b7c:	8a2d      	ldrh	r5, [r5, #16]
 8001b7e:	f361 2508 	bfi	r5, r1, #8, #1
 8001b82:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8001b86:	820d      	strh	r5, [r1, #16]
 8001b88:	f362 1545 	bfi	r5, r2, #5, #1
 8001b8c:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8001b90:	820d      	strh	r5, [r1, #16]
 8001b92:	f363 1587 	bfi	r5, r3, #6, #2
 8001b96:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8001b9a:	8205      	strh	r5, [r0, #16]
 8001b9c:	bd30      	pop	{r4, r5, pc}

08001b9e <USBPD_PRL_SetHeaderPowerRole>:
 8001b9e:	b510      	push	{r4, lr}
 8001ba0:	f000 f80b 	bl	8001bba <.text_9>
 8001ba4:	f361 2408 	bfi	r4, r1, #8, #1
 8001ba8:	821c      	strh	r4, [r3, #16]
 8001baa:	bd10      	pop	{r4, pc}

08001bac <USBPD_PRL_SetHeaderDataRole>:
 8001bac:	b510      	push	{r4, lr}
 8001bae:	f000 f804 	bl	8001bba <.text_9>
 8001bb2:	f361 1445 	bfi	r4, r1, #5, #1
 8001bb6:	821c      	strh	r4, [r3, #16]
 8001bb8:	bd10      	pop	{r4, pc}

08001bba <.text_9>:
 8001bba:	f8df 2990 	ldr.w	r2, [pc, #2448]	@ 800254c <.text_37>
 8001bbe:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8001bc2:	8a1c      	ldrh	r4, [r3, #16]
 8001bc4:	4770      	bx	lr

08001bc6 <USBPD_PRL_SetHeaderSpecification>:
 8001bc6:	b510      	push	{r4, lr}
 8001bc8:	f7ff fff7 	bl	8001bba <.text_9>
 8001bcc:	f361 1487 	bfi	r4, r1, #6, #2
 8001bd0:	821c      	strh	r4, [r3, #16]
 8001bd2:	bd10      	pop	{r4, pc}

08001bd4 <USBPD_PRL_IsResistor_SinkTxOK>:
 8001bd4:	f00f bb75 	b.w	80112c2 <USBPD_PHY_IsResistor_SinkTxOk>

08001bd8 <USBPD_PRL_SendMessage>:
 8001bd8:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bdc:	f8df a96c 	ldr.w	sl, [pc, #2412]	@ 800254c <.text_37>
 8001be0:	b083      	sub	sp, #12
 8001be2:	4680      	mov	r8, r0
 8001be4:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001be8:	4694      	mov	ip, r2
 8001bea:	f10c 0701 	add.w	r7, ip, #1
 8001bee:	2403      	movs	r4, #3
 8001bf0:	78f8      	ldrb	r0, [r7, #3]
 8001bf2:	b118      	cbz	r0, 8001bfc <USBPD_PRL_SendMessage+0x24>
 8001bf4:	79f8      	ldrb	r0, [r7, #7]
 8001bf6:	b908      	cbnz	r0, 8001bfc <USBPD_PRL_SendMessage+0x24>
 8001bf8:	200f      	movs	r0, #15
 8001bfa:	7110      	strb	r0, [r2, #4]
 8001bfc:	ea4f 0048 	mov.w	r0, r8, lsl #1
 8001c00:	1c40      	adds	r0, r0, #1
 8001c02:	f88d 0005 	strb.w	r0, [sp, #5]
 8001c06:	f88d 1004 	strb.w	r1, [sp, #4]
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	eb0c 0601 	add.w	r6, ip, r1
 8001c10:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8001c12:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
 8001c16:	f897 b003 	ldrb.w	fp, [r7, #3]
 8001c1a:	f1bb 0f10 	cmp.w	fp, #16
 8001c1e:	f10c 050c 	add.w	r5, ip, #12
 8001c22:	46f1      	mov	r9, lr
 8001c24:	f200 81e0 	bhi.w	8001fe8 <USBPD_PRL_SendMessage+0x410>
 8001c28:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8001c2c:	01de0011 	.word	0x01de0011
 8001c30:	01de01de 	.word	0x01de01de
 8001c34:	00490028 	.word	0x00490028
 8001c38:	00ac0038 	.word	0x00ac0038
 8001c3c:	01de01de 	.word	0x01de01de
 8001c40:	017f016a 	.word	0x017f016a
 8001c44:	01a70196 	.word	0x01a70196
 8001c48:	01da01de 	.word	0x01da01de
 8001c4c:	01c2      	.short	0x01c2
 8001c4e:	f3ef 8510 	mrs	r5, PRIMASK
 8001c52:	b672      	cpsid	i
 8001c54:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001c58:	f7fe fd55 	bl	8000706 <PE_PRL_Control_RxEvent>
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	bf04      	itt	eq
 8001c60:	7a38      	ldrbeq	r0, [r7, #8]
 8001c62:	2800      	cmpeq	r0, #0
 8001c64:	bf07      	ittee	eq
 8001c66:	21ff      	moveq	r1, #255	@ 0xff
 8001c68:	71f9      	strbeq	r1, [r7, #7]
 8001c6a:	2000      	movne	r0, #0
 8001c6c:	71f8      	strbne	r0, [r7, #7]
 8001c6e:	f385 8810 	msr	PRIMASK, r5
 8001c72:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001c76:	2106      	movs	r1, #6
 8001c78:	7101      	strb	r1, [r0, #4]
 8001c7a:	e1b8      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001c7c:	2802      	cmp	r0, #2
 8001c7e:	d10b      	bne.n	8001c98 <USBPD_PRL_SendMessage+0xc0>
 8001c80:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001c84:	f00f fb1d 	bl	80112c2 <USBPD_PHY_IsResistor_SinkTxOk>
 8001c88:	2801      	cmp	r0, #1
 8001c8a:	d103      	bne.n	8001c94 <USBPD_PRL_SendMessage+0xbc>
 8001c8c:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001c90:	2005      	movs	r0, #5
 8001c92:	e185      	b.n	8001fa0 <USBPD_PRL_SendMessage+0x3c8>
 8001c94:	2409      	movs	r4, #9
 8001c96:	e1aa      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001c98:	2006      	movs	r0, #6
 8001c9a:	e15b      	b.n	8001f54 <USBPD_PRL_SendMessage+0x37c>
 8001c9c:	f10c 0210 	add.w	r2, ip, #16
 8001ca0:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001ca4:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8001ca8:	2902      	cmp	r1, #2
 8001caa:	bf08      	it	eq
 8001cac:	2802      	cmpeq	r0, #2
 8001cae:	bf19      	ittee	ne
 8001cb0:	2005      	movne	r0, #5
 8001cb2:	f85a 1028 	ldrne.w	r1, [sl, r8, lsl #2]
 8001cb6:	2004      	moveq	r0, #4
 8001cb8:	f85a 1028 	ldreq.w	r1, [sl, r8, lsl #2]
 8001cbc:	e170      	b.n	8001fa0 <USBPD_PRL_SendMessage+0x3c8>
 8001cbe:	f10c 0010 	add.w	r0, ip, #16
 8001cc2:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001cc6:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001cca:	f10c 0310 	add.w	r3, ip, #16
 8001cce:	f362 0004 	bfi	r0, r2, #0, #5
 8001cd2:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8001cd6:	ea4f 1bd2 	mov.w	fp, r2, lsr #7
 8001cda:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8001cde:	ea40 30cb 	orr.w	r0, r0, fp, lsl #15
 8001ce2:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	7038      	strb	r0, [r7, #0]
 8001cea:	f10c 0710 	add.w	r7, ip, #16
 8001cee:	f837 3011 	ldrh.w	r3, [r7, r1, lsl #1]
 8001cf2:	0bd8      	lsrs	r0, r3, #15
 8001cf4:	d026      	beq.n	8001d44 <USBPD_PRL_SendMessage+0x16c>
 8001cf6:	9802      	ldr	r0, [sp, #8]
 8001cf8:	7883      	ldrb	r3, [r0, #2]
 8001cfa:	78c7      	ldrb	r7, [r0, #3]
 8001cfc:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8001d00:	816b      	strh	r3, [r5, #10]
 8001d02:	8968      	ldrh	r0, [r5, #10]
 8001d04:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8001d08:	b970      	cbnz	r0, 8001d28 <USBPD_PRL_SendMessage+0x150>
 8001d0a:	8968      	ldrh	r0, [r5, #10]
 8001d0c:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 8001d10:	bb18      	cbnz	r0, 8001d5a <USBPD_PRL_SendMessage+0x182>
 8001d12:	f1ae 0004 	sub.w	r0, lr, #4
 8001d16:	8228      	strh	r0, [r5, #16]
 8001d18:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001d1c:	896b      	ldrh	r3, [r5, #10]
 8001d1e:	f403 437e 	and.w	r3, r3, #65024	@ 0xfe00
 8001d22:	4318      	orrs	r0, r3
 8001d24:	8168      	strh	r0, [r5, #10]
 8001d26:	e018      	b.n	8001d5a <USBPD_PRL_SendMessage+0x182>
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f10c 0310 	add.w	r3, ip, #16
 8001d2e:	8228      	strh	r0, [r5, #16]
 8001d30:	2001      	movs	r0, #1
 8001d32:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]
 8001d36:	f360 370e 	bfi	r7, r0, #12, #3
 8001d3a:	f10c 0010 	add.w	r0, ip, #16
 8001d3e:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
 8001d42:	e00a      	b.n	8001d5a <USBPD_PRL_SendMessage+0x182>
 8001d44:	f1a9 0002 	sub.w	r0, r9, #2
 8001d48:	0880      	lsrs	r0, r0, #2
 8001d4a:	f360 330e 	bfi	r3, r0, #12, #3
 8001d4e:	f10c 0010 	add.w	r0, ip, #16
 8001d52:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8001d56:	2300      	movs	r3, #0
 8001d58:	822b      	strh	r3, [r5, #16]
 8001d5a:	2a0d      	cmp	r2, #13
 8001d5c:	bf02      	ittt	eq
 8001d5e:	f10c 0010 	addeq.w	r0, ip, #16
 8001d62:	f830 1011 	ldrheq.w	r1, [r0, r1, lsl #1]
 8001d66:	f411 4f70 	tsteq.w	r1, #61440	@ 0xf000
 8001d6a:	d107      	bne.n	8001d7c <USBPD_PRL_SendMessage+0x1a4>
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	72b0      	strb	r0, [r6, #10]
 8001d70:	220f      	movs	r2, #15
 8001d72:	2103      	movs	r1, #3
 8001d74:	f10c 0005 	add.w	r0, ip, #5
 8001d78:	f000 fc05 	bl	8002586 <__aeabi_memset>
 8001d7c:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001d80:	2007      	movs	r0, #7
 8001d82:	e10d      	b.n	8001fa0 <USBPD_PRL_SendMessage+0x3c8>
 8001d84:	f102 0310 	add.w	r3, r2, #16
 8001d88:	4677      	mov	r7, lr
 8001d8a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8001d8e:	0bc0      	lsrs	r0, r0, #15
 8001d90:	f000 8080 	beq.w	8001e94 <USBPD_PRL_SendMessage+0x2bc>
 8001d94:	8ad0      	ldrh	r0, [r2, #22]
 8001d96:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8001d9a:	82d0      	strh	r0, [r2, #22]
 8001d9c:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8001da0:	2800      	cmp	r0, #0
 8001da2:	d16c      	bne.n	8001e7e <USBPD_PRL_SendMessage+0x2a6>
 8001da4:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001da8:	8b95      	ldrh	r5, [r2, #28]
 8001daa:	8ad3      	ldrh	r3, [r2, #22]
 8001dac:	2d1b      	cmp	r5, #27
 8001dae:	d30f      	bcc.n	8001dd0 <USBPD_PRL_SendMessage+0x1f8>
 8001db0:	0bd8      	lsrs	r0, r3, #15
 8001db2:	d00d      	beq.n	8001dd0 <USBPD_PRL_SendMessage+0x1f8>
 8001db4:	f102 0310 	add.w	r3, r2, #16
 8001db8:	271e      	movs	r7, #30
 8001dba:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8001dbe:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 8001dc2:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8001dc6:	8b90      	ldrh	r0, [r2, #28]
 8001dc8:	f1a0 031a 	sub.w	r3, r0, #26
 8001dcc:	8393      	strh	r3, [r2, #28]
 8001dce:	e056      	b.n	8001e7e <USBPD_PRL_SendMessage+0x2a6>
 8001dd0:	f3c3 20c3 	ubfx	r0, r3, #11, #4
 8001dd4:	b918      	cbnz	r0, 8001dde <USBPD_PRL_SendMessage+0x206>
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f365 0008 	bfi	r0, r5, #0, #9
 8001ddc:	82d0      	strh	r0, [r2, #22]
 8001dde:	f648 70ff 	movw	r0, #36863	@ 0x8fff
 8001de2:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001de6:	f102 0310 	add.w	r3, r2, #16
 8001dea:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001dee:	4003      	ands	r3, r0
 8001df0:	f102 0010 	add.w	r0, r2, #16
 8001df4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8001df8:	8ad0      	ldrh	r0, [r2, #22]
 8001dfa:	0bc0      	lsrs	r0, r0, #15
 8001dfc:	d03b      	beq.n	8001e76 <USBPD_PRL_SendMessage+0x29e>
 8001dfe:	8b90      	ldrh	r0, [r2, #28]
 8001e00:	1c80      	adds	r0, r0, #2
 8001e02:	0880      	lsrs	r0, r0, #2
 8001e04:	0307      	lsls	r7, r0, #12
 8001e06:	f407 47e0 	and.w	r7, r7, #28672	@ 0x7000
 8001e0a:	f102 0010 	add.w	r0, r2, #16
 8001e0e:	433b      	orrs	r3, r7
 8001e10:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8001e14:	8b92      	ldrh	r2, [r2, #28]
 8001e16:	1c92      	adds	r2, r2, #2
 8001e18:	f012 0203 	ands.w	r2, r2, #3
 8001e1c:	d021      	beq.n	8001e62 <USBPD_PRL_SendMessage+0x28a>
 8001e1e:	9802      	ldr	r0, [sp, #8]
 8001e20:	2700      	movs	r7, #0
 8001e22:	e005      	b.n	8001e30 <USBPD_PRL_SendMessage+0x258>
 8001e24:	8b9b      	ldrh	r3, [r3, #28]
 8001e26:	1d05      	adds	r5, r0, #4
 8001e28:	4433      	add	r3, r6
 8001e2a:	2600      	movs	r6, #0
 8001e2c:	54ee      	strb	r6, [r5, r3]
 8001e2e:	1c7f      	adds	r7, r7, #1
 8001e30:	b2fe      	uxtb	r6, r7
 8001e32:	f1c2 0e04 	rsb	lr, r2, #4
 8001e36:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
 8001e3a:	4576      	cmp	r6, lr
 8001e3c:	d3f2      	bcc.n	8001e24 <USBPD_PRL_SendMessage+0x24c>
 8001e3e:	9002      	str	r0, [sp, #8]
 8001e40:	f648 72ff 	movw	r2, #36863	@ 0x8fff
 8001e44:	f103 0010 	add.w	r0, r3, #16
 8001e48:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001e4c:	4002      	ands	r2, r0
 8001e4e:	0b00      	lsrs	r0, r0, #12
 8001e50:	1c40      	adds	r0, r0, #1
 8001e52:	0300      	lsls	r0, r0, #12
 8001e54:	f400 40e0 	and.w	r0, r0, #28672	@ 0x7000
 8001e58:	4310      	orrs	r0, r2
 8001e5a:	f103 0210 	add.w	r2, r3, #16
 8001e5e:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8001e62:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001e66:	f100 0210 	add.w	r2, r0, #16
 8001e6a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8001e6e:	f3c3 3702 	ubfx	r7, r3, #12, #3
 8001e72:	00bf      	lsls	r7, r7, #2
 8001e74:	1cbf      	adds	r7, r7, #2
 8001e76:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	8390      	strh	r0, [r2, #28]
 8001e7e:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001e82:	8ac2      	ldrh	r2, [r0, #22]
 8001e84:	9802      	ldr	r0, [sp, #8]
 8001e86:	7082      	strb	r2, [r0, #2]
 8001e88:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001e8c:	8ad0      	ldrh	r0, [r2, #22]
 8001e8e:	9a02      	ldr	r2, [sp, #8]
 8001e90:	0a00      	lsrs	r0, r0, #8
 8001e92:	70d0      	strb	r0, [r2, #3]
 8001e94:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001e98:	f8df 56b4 	ldr.w	r5, [pc, #1716]	@ 8002550 <.text_38>
 8001e9c:	f100 020a 	add.w	r2, r0, #10
 8001ea0:	3010      	adds	r0, #16
 8001ea2:	5c53      	ldrb	r3, [r2, r1]
 8001ea4:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001ea8:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001eac:	f363 204b 	bfi	r0, r3, #9, #3
 8001eb0:	f102 0310 	add.w	r3, r2, #16
 8001eb4:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8001eb8:	9a02      	ldr	r2, [sp, #8]
 8001eba:	7010      	strb	r0, [r2, #0]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001ec2:	f100 0310 	add.w	r3, r0, #16
 8001ec6:	9802      	ldr	r0, [sp, #8]
 8001ec8:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8001ecc:	0a09      	lsrs	r1, r1, #8
 8001ece:	7041      	strb	r1, [r0, #1]
 8001ed0:	210a      	movs	r1, #10
 8001ed2:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001ed6:	8187      	strh	r7, [r0, #12]
 8001ed8:	7101      	strb	r1, [r0, #4]
 8001eda:	7382      	strb	r2, [r0, #14]
 8001edc:	b2b8      	uxth	r0, r7
 8001ede:	9000      	str	r0, [sp, #0]
 8001ee0:	f000 f893 	bl	800200a <.text_15>
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	47d0      	blx	sl
 8001ee8:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001eec:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001ef0:	f010 fc3e 	bl	8012770 <USBPD_TIM_Start>
 8001ef4:	f000 f883 	bl	8001ffe <.text_14>
 8001ef8:	b2bb      	uxth	r3, r7
 8001efa:	f00f f9aa 	bl	8011252 <USBPD_PHY_SendMessage>
 8001efe:	e076      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001f00:	f3ef 8710 	mrs	r7, PRIMASK
 8001f04:	b672      	cpsid	i
 8001f06:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001f0a:	7901      	ldrb	r1, [r0, #4]
 8001f0c:	290a      	cmp	r1, #10
 8001f0e:	d109      	bne.n	8001f24 <USBPD_PRL_SendMessage+0x34c>
 8001f10:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001f14:	f010 fc9e 	bl	8012854 <USBPD_TIM_IsExpired>
 8001f18:	2801      	cmp	r0, #1
 8001f1a:	d103      	bne.n	8001f24 <USBPD_PRL_SendMessage+0x34c>
 8001f1c:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001f20:	200d      	movs	r0, #13
 8001f22:	7108      	strb	r0, [r1, #4]
 8001f24:	f387 8810 	msr	PRIMASK, r7
 8001f28:	e061      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001f2a:	8928      	ldrh	r0, [r5, #8]
 8001f2c:	7ab1      	ldrb	r1, [r6, #10]
 8001f2e:	0a43      	lsrs	r3, r0, #9
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4299      	cmp	r1, r3
 8001f36:	bf04      	itt	eq
 8001f38:	f000 001f 	andeq.w	r0, r0, #31
 8001f3c:	2801      	cmpeq	r0, #1
 8001f3e:	d108      	bne.n	8001f52 <USBPD_PRL_SendMessage+0x37a>
 8001f40:	1c49      	adds	r1, r1, #1
 8001f42:	f001 0107 	and.w	r1, r1, #7
 8001f46:	72b1      	strb	r1, [r6, #10]
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001f4e:	7108      	strb	r0, [r1, #4]
 8001f50:	e011      	b.n	8001f76 <USBPD_PRL_SendMessage+0x39e>
 8001f52:	200d      	movs	r0, #13
 8001f54:	7110      	strb	r0, [r2, #4]
 8001f56:	e04a      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001f58:	f000 f84b 	bl	8001ff2 <.text_13>
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001f62:	7108      	strb	r0, [r1, #4]
 8001f64:	f248 71ff 	movw	r1, #34815	@ 0x87ff
 8001f68:	896a      	ldrh	r2, [r5, #10]
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	816a      	strh	r2, [r5, #10]
 8001f6e:	f64f 30ff 	movw	r0, #64511	@ 0xfbff
 8001f72:	4002      	ands	r2, r0
 8001f74:	816a      	strh	r2, [r5, #10]
 8001f76:	2405      	movs	r4, #5
 8001f78:	e039      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001f7a:	7838      	ldrb	r0, [r7, #0]
 8001f7c:	1c40      	adds	r0, r0, #1
 8001f7e:	7038      	strb	r0, [r7, #0]
 8001f80:	f10c 0010 	add.w	r0, ip, #16
 8001f84:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8001f88:	783a      	ldrb	r2, [r7, #0]
 8001f8a:	f3c1 1081 	ubfx	r0, r1, #6, #2
 8001f8e:	2801      	cmp	r0, #1
 8001f90:	bf0c      	ite	eq
 8001f92:	2003      	moveq	r0, #3
 8001f94:	2002      	movne	r0, #2
 8001f96:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001f9a:	4290      	cmp	r0, r2
 8001f9c:	d302      	bcc.n	8001fa4 <USBPD_PRL_SendMessage+0x3cc>
 8001f9e:	2010      	movs	r0, #16
 8001fa0:	7108      	strb	r0, [r1, #4]
 8001fa2:	e024      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	710a      	strb	r2, [r1, #4]
 8001fa8:	2407      	movs	r4, #7
 8001faa:	f000 f822 	bl	8001ff2 <.text_13>
 8001fae:	e01e      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001fb0:	200a      	movs	r0, #10
 8001fb2:	7110      	strb	r0, [r2, #4]
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	70a9      	strb	r1, [r5, #2]
 8001fb8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001fbc:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001fc0:	f010 fbd6 	bl	8012770 <USBPD_TIM_Start>
 8001fc4:	882b      	ldrh	r3, [r5, #0]
 8001fc6:	f000 f81a 	bl	8001ffe <.text_14>
 8001fca:	f8df 5584 	ldr.w	r5, [pc, #1412]	@ 8002550 <.text_38>
 8001fce:	f00f f940 	bl	8011252 <USBPD_PHY_SendMessage>
 8001fd2:	f000 f81a 	bl	800200a <.text_15>
 8001fd6:	f8cd 9000 	str.w	r9, [sp]
 8001fda:	2002      	movs	r0, #2
 8001fdc:	47d0      	blx	sl
 8001fde:	e006      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	7110      	strb	r0, [r2, #4]
 8001fe4:	2406      	movs	r4, #6
 8001fe6:	e002      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001fe8:	2000      	movs	r0, #0
 8001fea:	7110      	strb	r0, [r2, #4]
 8001fec:	2410      	movs	r4, #16
 8001fee:	4620      	mov	r0, r4
 8001ff0:	e1f0      	b.n	80023d4 <.text_25>

08001ff2 <.text_13>:
 8001ff2:	7ab0      	ldrb	r0, [r6, #10]
 8001ff4:	1c40      	adds	r0, r0, #1
 8001ff6:	f000 0007 	and.w	r0, r0, #7
 8001ffa:	72b0      	strb	r0, [r6, #10]
 8001ffc:	4770      	bx	lr

08001ffe <.text_14>:
 8001ffe:	9a02      	ldr	r2, [sp, #8]
 8002000:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002004:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002008:	4770      	bx	lr

0800200a <.text_15>:
 800200a:	9b02      	ldr	r3, [sp, #8]
 800200c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002010:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002014:	f8d5 a000 	ldr.w	sl, [r5]
 8002018:	4770      	bx	lr

0800201a <USBPD_PRL_ResetRequestProcess>:
 800201a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800201e:	4605      	mov	r5, r0
 8002020:	f8df 8528 	ldr.w	r8, [pc, #1320]	@ 800254c <.text_37>
 8002024:	462f      	mov	r7, r5
 8002026:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 800202a:	2000      	movs	r0, #0
 800202c:	70a0      	strb	r0, [r4, #2]
 800202e:	72a0      	strb	r0, [r4, #10]
 8002030:	460e      	mov	r6, r1
 8002032:	f000 f81f 	bl	8002074 <.text_17>
 8002036:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 800203a:	f8df 7514 	ldr.w	r7, [pc, #1300]	@ 8002550 <.text_38>
 800203e:	2200      	movs	r2, #0
 8002040:	7102      	strb	r2, [r0, #4]
 8002042:	9200      	str	r2, [sp, #0]
 8002044:	2300      	movs	r3, #0
 8002046:	f8d7 c000 	ldr.w	ip, [r7]
 800204a:	4632      	mov	r2, r6
 800204c:	4629      	mov	r1, r5
 800204e:	2002      	movs	r0, #2
 8002050:	47e0      	blx	ip
 8002052:	4628      	mov	r0, r5
 8002054:	f000 f83e 	bl	80020d4 <PRL_DisableRX>
 8002058:	4631      	mov	r1, r6
 800205a:	4628      	mov	r0, r5
 800205c:	f00f f8e6 	bl	801122c <USBPD_PHY_ResetRequest>
 8002060:	2005      	movs	r0, #5
 8002062:	70e0      	strb	r0, [r4, #3]
 8002064:	78a0      	ldrb	r0, [r4, #2]
 8002066:	2801      	cmp	r0, #1
 8002068:	bf1c      	itt	ne
 800206a:	78e0      	ldrbne	r0, [r4, #3]
 800206c:	2800      	cmpne	r0, #0
 800206e:	d1f9      	bne.n	8002064 <USBPD_PRL_ResetRequestProcess+0x4a>
 8002070:	e8bd 81f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, pc}

08002074 <.text_17>:
 8002074:	220f      	movs	r2, #15
 8002076:	2103      	movs	r1, #3
 8002078:	1d60      	adds	r0, r4, #5
 800207a:	f000 ba84 	b.w	8002586 <__aeabi_memset>

0800207e <USBDPD_PRL_BistCarrierEyeMode>:
 800207e:	2905      	cmp	r1, #5
 8002080:	bf08      	it	eq
 8002082:	f00f b8fc 	beq.w	801127e <USBPD_PHY_Send_BIST_Pattern>
 8002086:	2010      	movs	r0, #16
 8002088:	4770      	bx	lr

0800208a <USBDPD_PRL_BistCarrierEyeModeExit>:
 800208a:	2905      	cmp	r1, #5
 800208c:	bf04      	itt	eq
 800208e:	2107      	moveq	r1, #7
 8002090:	f00f b903 	beq.w	801129a <USBPD_PHY_ExitTransmit>
 8002094:	2010      	movs	r0, #16
 8002096:	4770      	bx	lr

08002098 <USBPD_PRL_Reset>:
 8002098:	b538      	push	{r3, r4, r5, lr}
 800209a:	4604      	mov	r4, r0
 800209c:	f8df 04ac 	ldr.w	r0, [pc, #1196]	@ 800254c <.text_37>
 80020a0:	4621      	mov	r1, r4
 80020a2:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80020a6:	2200      	movs	r2, #0
 80020a8:	712a      	strb	r2, [r5, #4]
 80020aa:	702a      	strb	r2, [r5, #0]
 80020ac:	70ea      	strb	r2, [r5, #3]
 80020ae:	72aa      	strb	r2, [r5, #10]
 80020b0:	2103      	movs	r1, #3
 80020b2:	220f      	movs	r2, #15
 80020b4:	1d68      	adds	r0, r5, #5
 80020b6:	f000 fa66 	bl	8002586 <__aeabi_memset>
 80020ba:	2200      	movs	r2, #0
 80020bc:	77ea      	strb	r2, [r5, #31]
 80020be:	4620      	mov	r0, r4
 80020c0:	f00f f8a9 	bl	8011216 <USBPD_PHY_Reset>
 80020c4:	4620      	mov	r0, r4
 80020c6:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 80020ca:	f00f b908 	b.w	80112de <USBPD_PHY_EnableRX>

080020ce <USBPD_PRL_Stop>:
 80020ce:	f00f b913 	b.w	80112f8 <USBPD_PHY_DisableRX>

080020d2 <USBPD_PRL_DeInit>:
 80020d2:	4770      	bx	lr

080020d4 <PRL_DisableRX>:
 80020d4:	f00f b910 	b.w	80112f8 <USBPD_PHY_DisableRX>

080020d8 <PRL_Received>:
 80020d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020dc:	4680      	mov	r8, r0
 80020de:	f8df b46c 	ldr.w	fp, [pc, #1132]	@ 800254c <.text_37>
 80020e2:	b084      	sub	sp, #16
 80020e4:	4645      	mov	r5, r8
 80020e6:	f85b 6025 	ldr.w	r6, [fp, r5, lsl #2]
 80020ea:	f8df 9464 	ldr.w	r9, [pc, #1124]	@ 8002550 <.text_38>
 80020ee:	468a      	mov	sl, r1
 80020f0:	f00f f885 	bl	80111fe <USBPD_PHY_GetMinGOODCRCTimerValue>
 80020f4:	4601      	mov	r1, r0
 80020f6:	ea4f 0048 	mov.w	r0, r8, lsl #1
 80020fa:	b2c0      	uxtb	r0, r0
 80020fc:	f010 fb38 	bl	8012770 <USBPD_TIM_Start>
 8002100:	f106 0728 	add.w	r7, r6, #40	@ 0x28
 8002104:	7838      	ldrb	r0, [r7, #0]
 8002106:	7879      	ldrb	r1, [r7, #1]
 8002108:	eb00 2401 	add.w	r4, r0, r1, lsl #8
 800210c:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8002110:	4020      	ands	r0, r4
 8002112:	2801      	cmp	r0, #1
 8002114:	d112      	bne.n	800213c <PRL_Received+0x64>
 8002116:	0069      	lsls	r1, r5, #1
 8002118:	1c49      	adds	r1, r1, #1
 800211a:	b2c8      	uxtb	r0, r1
 800211c:	f010 fb9a 	bl	8012854 <USBPD_TIM_IsExpired>
 8002120:	2801      	cmp	r0, #1
 8002122:	d03f      	beq.n	80021a4 <PRL_Received+0xcc>
 8002124:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8002128:	200b      	movs	r0, #11
 800212a:	7108      	strb	r0, [r1, #4]
 800212c:	82b4      	strh	r4, [r6, #20]
 800212e:	f000 f966 	bl	80023fe <.text_29>
 8002132:	463b      	mov	r3, r7
 8002134:	4652      	mov	r2, sl
 8002136:	4641      	mov	r1, r8
 8002138:	2001      	movs	r0, #1
 800213a:	e148      	b.n	80023ce <PRL_Received+0x2f6>
 800213c:	f20f 4044 	addw	r0, pc, #1092	@ 0x444
 8002140:	8805      	ldrh	r5, [r0, #0]
 8002142:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8002146:	2101      	movs	r1, #1
 8002148:	4020      	ands	r0, r4
 800214a:	7271      	strb	r1, [r6, #9]
 800214c:	eb06 020a 	add.w	r2, r6, sl
 8002150:	280d      	cmp	r0, #13
 8002152:	9202      	str	r2, [sp, #8]
 8002154:	d103      	bne.n	800215e <PRL_Received+0x86>
 8002156:	2100      	movs	r1, #0
 8002158:	7291      	strb	r1, [r2, #10]
 800215a:	f000 f97c 	bl	8002456 <.text_31>
 800215e:	ea5f 000a 	movs.w	r0, sl
 8002162:	d10c      	bne.n	800217e <PRL_Received+0xa6>
 8002164:	8a30      	ldrh	r0, [r6, #16]
 8002166:	f3c0 1140 	ubfx	r1, r0, #5, #1
 800216a:	f3c0 2200 	ubfx	r2, r0, #8, #1
 800216e:	f64f 60df 	movw	r0, #65247	@ 0xfedf
 8002172:	4005      	ands	r5, r0
 8002174:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
 8002178:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 800217c:	e002      	b.n	8002184 <PRL_Received+0xac>
 800217e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8002182:	4015      	ands	r5, r2
 8002184:	f24f 113f 	movw	r1, #61759	@ 0xf13f
 8002188:	400d      	ands	r5, r1
 800218a:	f404 6060 	and.w	r0, r4, #3584	@ 0xe00
 800218e:	4305      	orrs	r5, r0
 8002190:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
 8002194:	74b5      	strb	r5, [r6, #18]
 8002196:	4651      	mov	r1, sl
 8002198:	0a2d      	lsrs	r5, r5, #8
 800219a:	74f5      	strb	r5, [r6, #19]
 800219c:	4640      	mov	r0, r8
 800219e:	f7fe fba8 	bl	80008f2 <PE_PRL_PostReceiveEvent>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	f000 8116 	beq.w	80023d4 <.text_25>
 80021a8:	2001      	movs	r0, #1
 80021aa:	73b0      	strb	r0, [r6, #14]
 80021ac:	ea4f 0048 	mov.w	r0, r8, lsl #1
 80021b0:	b2c0      	uxtb	r0, r0
 80021b2:	f010 fb4f 	bl	8012854 <USBPD_TIM_IsExpired>
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d0f8      	beq.n	80021ac <PRL_Received+0xd4>
 80021ba:	2302      	movs	r3, #2
 80021bc:	f106 0212 	add.w	r2, r6, #18
 80021c0:	4651      	mov	r1, sl
 80021c2:	4640      	mov	r0, r8
 80021c4:	f00f f845 	bl	8011252 <USBPD_PHY_SendMessage>
 80021c8:	9003      	str	r0, [sp, #12]
 80021ca:	f886 a008 	strb.w	sl, [r6, #8]
 80021ce:	4639      	mov	r1, r7
 80021d0:	4640      	mov	r0, r8
 80021d2:	f7fe fbc4 	bl	800095e <PE_PRL_PostReceiveEventCopy>
 80021d6:	78b8      	ldrb	r0, [r7, #2]
 80021d8:	78f9      	ldrb	r1, [r7, #3]
 80021da:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 80021de:	f8ad 2004 	strh.w	r2, [sp, #4]
 80021e2:	0420      	lsls	r0, r4, #16
 80021e4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80021e8:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80021ec:	0bc9      	lsrs	r1, r1, #15
 80021ee:	0fc0      	lsrs	r0, r0, #31
 80021f0:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80021f4:	f8ad 1006 	strh.w	r1, [sp, #6]
 80021f8:	d004      	beq.n	8002204 <PRL_Received+0x12c>
 80021fa:	0008      	movs	r0, r1
 80021fc:	d102      	bne.n	8002204 <PRL_Received+0x12c>
 80021fe:	1d29      	adds	r1, r5, #4
 8002200:	9100      	str	r1, [sp, #0]
 8002202:	e019      	b.n	8002238 <PRL_Received+0x160>
 8002204:	7830      	ldrb	r0, [r6, #0]
 8002206:	b9a8      	cbnz	r0, 8002234 <PRL_Received+0x15c>
 8002208:	f3c4 3002 	ubfx	r0, r4, #12, #3
 800220c:	b190      	cbz	r0, 8002234 <PRL_Received+0x15c>
 800220e:	f004 001f 	and.w	r0, r4, #31
 8002212:	2803      	cmp	r0, #3
 8002214:	d10e      	bne.n	8002234 <PRL_Received+0x15c>
 8002216:	78b8      	ldrb	r0, [r7, #2]
 8002218:	78f9      	ldrb	r1, [r7, #3]
 800221a:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 800221e:	7938      	ldrb	r0, [r7, #4]
 8002220:	7979      	ldrb	r1, [r7, #5]
 8002222:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 8002226:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 800222a:	0f12      	lsrs	r2, r2, #28
 800222c:	2a08      	cmp	r2, #8
 800222e:	bf04      	itt	eq
 8002230:	2001      	moveq	r0, #1
 8002232:	7030      	strbeq	r0, [r6, #0]
 8002234:	f000 f8e3 	bl	80023fe <.text_29>
 8002238:	463b      	mov	r3, r7
 800223a:	f8d9 7000 	ldr.w	r7, [r9]
 800223e:	4652      	mov	r2, sl
 8002240:	4641      	mov	r1, r8
 8002242:	2001      	movs	r0, #1
 8002244:	47b8      	blx	r7
 8002246:	9803      	ldr	r0, [sp, #12]
 8002248:	b948      	cbnz	r0, 800225e <PRL_Received+0x186>
 800224a:	2102      	movs	r1, #2
 800224c:	9100      	str	r1, [sp, #0]
 800224e:	f106 0312 	add.w	r3, r6, #18
 8002252:	f8d9 7000 	ldr.w	r7, [r9]
 8002256:	4652      	mov	r2, sl
 8002258:	4641      	mov	r1, r8
 800225a:	2002      	movs	r0, #2
 800225c:	47b8      	blx	r7
 800225e:	9802      	ldr	r0, [sp, #8]
 8002260:	7941      	ldrb	r1, [r0, #5]
 8002262:	f3c4 2042 	ubfx	r0, r4, #9, #3
 8002266:	4281      	cmp	r1, r0
 8002268:	bf04      	itt	eq
 800226a:	9803      	ldreq	r0, [sp, #12]
 800226c:	2800      	cmpeq	r0, #0
 800226e:	f000 809e 	beq.w	80023ae <PRL_Received+0x2d6>
 8002272:	0421      	lsls	r1, r4, #16
 8002274:	9a02      	ldr	r2, [sp, #8]
 8002276:	0e49      	lsrs	r1, r1, #25
 8002278:	f001 0107 	and.w	r1, r1, #7
 800227c:	7151      	strb	r1, [r2, #5]
 800227e:	0420      	lsls	r0, r4, #16
 8002280:	8374      	strh	r4, [r6, #26]
 8002282:	0fc0      	lsrs	r0, r0, #31
 8002284:	bf1c      	itt	ne
 8002286:	f8bd 0006 	ldrhne.w	r0, [sp, #6]
 800228a:	2800      	cmpne	r0, #0
 800228c:	d06b      	beq.n	8002366 <PRL_Received+0x28e>
 800228e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002292:	8330      	strh	r0, [r6, #24]
 8002294:	201a      	movs	r0, #26
 8002296:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800229a:	f411 4ff8 	tst.w	r1, #31744	@ 0x7c00
 800229e:	d139      	bne.n	8002314 <PRL_Received+0x23c>
 80022a0:	f3c4 3102 	ubfx	r1, r4, #12, #3
 80022a4:	2907      	cmp	r1, #7
 80022a6:	d301      	bcc.n	80022ac <PRL_Received+0x1d4>
 80022a8:	2d1a      	cmp	r5, #26
 80022aa:	d81e      	bhi.n	80022ea <PRL_Received+0x212>
 80022ac:	2100      	movs	r1, #0
 80022ae:	f106 072c 	add.w	r7, r6, #44	@ 0x2c
 80022b2:	e009      	b.n	80022c8 <PRL_Received+0x1f0>
 80022b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80022b8:	6a32      	ldr	r2, [r6, #32]
 80022ba:	f817 c001 	ldrb.w	ip, [r7, r1]
 80022be:	f000 f898 	bl	80023f2 <.text_28>
 80022c2:	f802 c003 	strb.w	ip, [r2, r3]
 80022c6:	b289      	uxth	r1, r1
 80022c8:	f000 f88d 	bl	80023e6 <.text_27>
 80022cc:	d3f2      	bcc.n	80022b4 <PRL_Received+0x1dc>
 80022ce:	f3c4 3002 	ubfx	r0, r4, #12, #3
 80022d2:	0080      	lsls	r0, r0, #2
 80022d4:	1e80      	subs	r0, r0, #2
 80022d6:	42a8      	cmp	r0, r5
 80022d8:	d204      	bcs.n	80022e4 <PRL_Received+0x20c>
 80022da:	f3c4 3002 	ubfx	r0, r4, #12, #3
 80022de:	0080      	lsls	r0, r0, #2
 80022e0:	1e80      	subs	r0, r0, #2
 80022e2:	e00e      	b.n	8002302 <PRL_Received+0x22a>
 80022e4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80022e6:	8005      	strh	r5, [r0, #0]
 80022e8:	e00d      	b.n	8002306 <PRL_Received+0x22e>
 80022ea:	2101      	movs	r1, #1
 80022ec:	77f1      	strb	r1, [r6, #31]
 80022ee:	2000      	movs	r0, #0
 80022f0:	f106 012c 	add.w	r1, r6, #44	@ 0x2c
 80022f4:	6a33      	ldr	r3, [r6, #32]
 80022f6:	5c0a      	ldrb	r2, [r1, r0]
 80022f8:	541a      	strb	r2, [r3, r0]
 80022fa:	1c40      	adds	r0, r0, #1
 80022fc:	281a      	cmp	r0, #26
 80022fe:	d3f9      	bcc.n	80022f4 <PRL_Received+0x21c>
 8002300:	201a      	movs	r0, #26
 8002302:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8002304:	8008      	strh	r0, [r1, #0]
 8002306:	4651      	mov	r1, sl
 8002308:	4640      	mov	r0, r8
 800230a:	b005      	add	sp, #20
 800230c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002310:	f7fe baef 	b.w	80008f2 <PE_PRL_PostReceiveEvent>
 8002314:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8002316:	8809      	ldrh	r1, [r1, #0]
 8002318:	f240 1205 	movw	r2, #261	@ 0x105
 800231c:	f101 031a 	add.w	r3, r1, #26
 8002320:	4293      	cmp	r3, r2
 8002322:	bf3f      	itttt	cc
 8002324:	f3c4 3302 	ubfxcc	r3, r4, #12, #3
 8002328:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 800232c:	1e89      	subcc	r1, r1, #2
 800232e:	42a9      	cmpcc	r1, r5
 8002330:	d21a      	bcs.n	8002368 <PRL_Received+0x290>
 8002332:	2101      	movs	r1, #1
 8002334:	77f1      	strb	r1, [r6, #31]
 8002336:	f106 052c 	add.w	r5, r6, #44	@ 0x2c
 800233a:	2100      	movs	r1, #0
 800233c:	e007      	b.n	800234e <PRL_Received+0x276>
 800233e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002342:	6a32      	ldr	r2, [r6, #32]
 8002344:	5c6f      	ldrb	r7, [r5, r1]
 8002346:	f000 f854 	bl	80023f2 <.text_28>
 800234a:	54d7      	strb	r7, [r2, r3]
 800234c:	b289      	uxth	r1, r1
 800234e:	f000 f84a 	bl	80023e6 <.text_27>
 8002352:	d3f4      	bcc.n	800233e <PRL_Received+0x266>
 8002354:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8002356:	880a      	ldrh	r2, [r1, #0]
 8002358:	0424      	lsls	r4, r4, #16
 800235a:	0ea4      	lsrs	r4, r4, #26
 800235c:	f004 041c 	and.w	r4, r4, #28
 8002360:	1ea0      	subs	r0, r4, #2
 8002362:	1882      	adds	r2, r0, r2
 8002364:	800a      	strh	r2, [r1, #0]
 8002366:	e035      	b.n	80023d4 <.text_25>
 8002368:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800236a:	880b      	ldrh	r3, [r1, #0]
 800236c:	f000 f835 	bl	80023da <.text_26>
 8002370:	4291      	cmp	r1, r2
 8002372:	d219      	bcs.n	80023a8 <PRL_Received+0x2d0>
 8002374:	f000 f831 	bl	80023da <.text_26>
 8002378:	42a9      	cmp	r1, r5
 800237a:	d315      	bcc.n	80023a8 <PRL_Received+0x2d0>
 800237c:	2201      	movs	r2, #1
 800237e:	77f2      	strb	r2, [r6, #31]
 8002380:	2100      	movs	r1, #0
 8002382:	f106 072c 	add.w	r7, r6, #44	@ 0x2c
 8002386:	e009      	b.n	800239c <PRL_Received+0x2c4>
 8002388:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800238c:	6a32      	ldr	r2, [r6, #32]
 800238e:	f817 a001 	ldrb.w	sl, [r7, r1]
 8002392:	f000 f82e 	bl	80023f2 <.text_28>
 8002396:	f802 a003 	strb.w	sl, [r2, r3]
 800239a:	b289      	uxth	r1, r1
 800239c:	f000 f823 	bl	80023e6 <.text_27>
 80023a0:	d3f2      	bcc.n	8002388 <PRL_Received+0x2b0>
 80023a2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80023a4:	8005      	strh	r5, [r0, #0]
 80023a6:	e015      	b.n	80023d4 <.text_25>
 80023a8:	2100      	movs	r1, #0
 80023aa:	77f1      	strb	r1, [r6, #31]
 80023ac:	e012      	b.n	80023d4 <.text_25>
 80023ae:	20ff      	movs	r0, #255	@ 0xff
 80023b0:	7230      	strb	r0, [r6, #8]
 80023b2:	2100      	movs	r1, #0
 80023b4:	73b1      	strb	r1, [r6, #14]
 80023b6:	4640      	mov	r0, r8
 80023b8:	f7fe fabb 	bl	8000932 <PE_PRL_PostReceiveEventError>
 80023bc:	2000      	movs	r0, #0
 80023be:	7270      	strb	r0, [r6, #9]
 80023c0:	2117      	movs	r1, #23
 80023c2:	9100      	str	r1, [sp, #0]
 80023c4:	f05f 0200 	movs.w	r2, #0
 80023c8:	a362      	add	r3, pc, #392	@ (adr r3, 8002554 <.text_39>)
 80023ca:	4641      	mov	r1, r8
 80023cc:	2006      	movs	r0, #6
 80023ce:	f8d9 8000 	ldr.w	r8, [r9]
 80023d2:	47c0      	blx	r8

080023d4 <.text_25>:
 80023d4:	b005      	add	sp, #20
 80023d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080023da <.text_26>:
 80023da:	f3c4 3102 	ubfx	r1, r4, #12, #3
 80023de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80023e2:	1e89      	subs	r1, r1, #2
 80023e4:	4770      	bx	lr

080023e6 <.text_27>:
 80023e6:	f3c4 3202 	ubfx	r2, r4, #12, #3
 80023ea:	0092      	lsls	r2, r2, #2
 80023ec:	1e92      	subs	r2, r2, #2
 80023ee:	4291      	cmp	r1, r2
 80023f0:	4770      	bx	lr

080023f2 <.text_28>:
 80023f2:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 80023f6:	fb10 1303 	smlabb	r3, r0, r3, r1
 80023fa:	1c49      	adds	r1, r1, #1
 80023fc:	4770      	bx	lr

080023fe <.text_29>:
 80023fe:	f3c4 3002 	ubfx	r0, r4, #12, #3
 8002402:	0080      	lsls	r0, r0, #2
 8002404:	1c80      	adds	r0, r0, #2
 8002406:	9000      	str	r0, [sp, #0]
 8002408:	4770      	bx	lr

0800240a <PRL_ResetIndicate>:
 800240a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800240e:	460d      	mov	r5, r1
 8002410:	2d05      	cmp	r5, #5
 8002412:	4604      	mov	r4, r0
 8002414:	d110      	bne.n	8002438 <PRL_ResetIndicate+0x2e>
 8002416:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 800254c <.text_37>
 800241a:	4627      	mov	r7, r4
 800241c:	f858 6027 	ldr.w	r6, [r8, r7, lsl #2]
 8002420:	2000      	movs	r0, #0
 8002422:	72b0      	strb	r0, [r6, #10]
 8002424:	f000 f817 	bl	8002456 <.text_31>
 8002428:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 800242c:	2200      	movs	r2, #0
 800242e:	7102      	strb	r2, [r0, #4]
 8002430:	7032      	strb	r2, [r6, #0]
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff fe4e 	bl	80020d4 <PRL_DisableRX>
 8002438:	2000      	movs	r0, #0
 800243a:	4e45      	ldr	r6, [pc, #276]	@ (8002550 <.text_38>)
 800243c:	6837      	ldr	r7, [r6, #0]
 800243e:	9000      	str	r0, [sp, #0]
 8002440:	2300      	movs	r3, #0
 8002442:	462a      	mov	r2, r5
 8002444:	4621      	mov	r1, r4
 8002446:	2001      	movs	r0, #1
 8002448:	47b8      	blx	r7
 800244a:	4629      	mov	r1, r5
 800244c:	4620      	mov	r0, r4
 800244e:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8002452:	f7fe b9a1 	b.w	8000798 <PE_PRL_ResetReceived>

08002456 <.text_31>:
 8002456:	220f      	movs	r2, #15
 8002458:	2103      	movs	r1, #3
 800245a:	1d70      	adds	r0, r6, #5
 800245c:	f000 b893 	b.w	8002586 <__aeabi_memset>

08002460 <PRL_ResetCompleted>:
 8002460:	4a3a      	ldr	r2, [pc, #232]	@ (800254c <.text_37>)
 8002462:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002466:	2101      	movs	r1, #1
 8002468:	7081      	strb	r1, [r0, #2]
 800246a:	4770      	bx	lr

0800246c <PRL_BistCompleted>:
 800246c:	f7fe b9bc 	b.w	80007e8 <PE_PRL_BistCompleted>

08002470 <PRL_TxCompleted>:
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	4a36      	ldr	r2, [pc, #216]	@ (800254c <.text_37>)
 8002474:	4604      	mov	r4, r0
 8002476:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 800247a:	7baa      	ldrb	r2, [r5, #14]
 800247c:	2a01      	cmp	r2, #1
 800247e:	d002      	beq.n	8002486 <PRL_TxCompleted+0x16>
 8002480:	2a02      	cmp	r2, #2
 8002482:	d009      	beq.n	8002498 <PRL_TxCompleted+0x28>
 8002484:	e010      	b.n	80024a8 <PRL_TxCompleted+0x38>
 8002486:	b911      	cbnz	r1, 800248e <PRL_TxCompleted+0x1e>
 8002488:	f7fe fa86 	bl	8000998 <PE_PRL_PostReceiveEventComplete>
 800248c:	e001      	b.n	8002492 <PRL_TxCompleted+0x22>
 800248e:	f7fe fa50 	bl	8000932 <PE_PRL_PostReceiveEventError>
 8002492:	2000      	movs	r0, #0
 8002494:	7268      	strb	r0, [r5, #9]
 8002496:	e007      	b.n	80024a8 <PRL_TxCompleted+0x38>
 8002498:	f00e fea4 	bl	80111e4 <USBPD_PHY_GetRetryTimerValue>
 800249c:	0064      	lsls	r4, r4, #1
 800249e:	4601      	mov	r1, r0
 80024a0:	1c64      	adds	r4, r4, #1
 80024a2:	b2e0      	uxtb	r0, r4
 80024a4:	f010 f964 	bl	8012770 <USBPD_TIM_Start>
 80024a8:	2000      	movs	r0, #0
 80024aa:	73a8      	strb	r0, [r5, #14]
 80024ac:	bd31      	pop	{r0, r4, r5, pc}

080024ae <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80024ae:	b530      	push	{r4, r5, lr}
 80024b0:	4c26      	ldr	r4, [pc, #152]	@ (800254c <.text_37>)
 80024b2:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 80024b6:	8ae5      	ldrh	r5, [r4, #22]
 80024b8:	f248 30ff 	movw	r0, #33791	@ 0x83ff
 80024bc:	4005      	ands	r5, r0
 80024be:	8a20      	ldrh	r0, [r4, #16]
 80024c0:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
 80024c4:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 80024c8:	f405 457e 	and.w	r5, r5, #65024	@ 0xfe00
 80024cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024d0:	8220      	strh	r0, [r4, #16]
 80024d2:	432a      	orrs	r2, r5
 80024d4:	8b61      	ldrh	r1, [r4, #26]
 80024d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024da:	f361 0004 	bfi	r0, r1, #0, #5
 80024de:	82e2      	strh	r2, [r4, #22]
 80024e0:	8220      	strh	r0, [r4, #16]
 80024e2:	7018      	strb	r0, [r3, #0]
 80024e4:	8a20      	ldrh	r0, [r4, #16]
 80024e6:	0a00      	lsrs	r0, r0, #8
 80024e8:	7058      	strb	r0, [r3, #1]
 80024ea:	8ae0      	ldrh	r0, [r4, #22]
 80024ec:	7098      	strb	r0, [r3, #2]
 80024ee:	8ae1      	ldrh	r1, [r4, #22]
 80024f0:	0a09      	lsrs	r1, r1, #8
 80024f2:	70d9      	strb	r1, [r3, #3]
 80024f4:	bd30      	pop	{r4, r5, pc}

080024f6 <USBPD_PRL_PrepareChunkRequest>:
 80024f6:	b530      	push	{r4, r5, lr}
 80024f8:	4a14      	ldr	r2, [pc, #80]	@ (800254c <.text_37>)
 80024fa:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80024fe:	8adc      	ldrh	r4, [r3, #22]
 8002500:	8b1d      	ldrh	r5, [r3, #24]
 8002502:	f444 4404 	orr.w	r4, r4, #33792	@ 0x8400
 8002506:	0aed      	lsrs	r5, r5, #11
 8002508:	82dc      	strh	r4, [r3, #22]
 800250a:	1c6d      	adds	r5, r5, #1
 800250c:	02ed      	lsls	r5, r5, #11
 800250e:	f404 4406 	and.w	r4, r4, #34304	@ 0x8600
 8002512:	f405 45f0 	and.w	r5, r5, #30720	@ 0x7800
 8002516:	432c      	orrs	r4, r5
 8002518:	82dc      	strh	r4, [r3, #22]
 800251a:	8a1c      	ldrh	r4, [r3, #16]
 800251c:	8b5d      	ldrh	r5, [r3, #26]
 800251e:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 8002522:	821c      	strh	r4, [r3, #16]
 8002524:	f365 0404 	bfi	r4, r5, #0, #5
 8002528:	821c      	strh	r4, [r3, #16]
 800252a:	2400      	movs	r4, #0
 800252c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002530:	7104      	strb	r4, [r0, #4]
 8002532:	8a1a      	ldrh	r2, [r3, #16]
 8002534:	700a      	strb	r2, [r1, #0]
 8002536:	8a18      	ldrh	r0, [r3, #16]
 8002538:	0a00      	lsrs	r0, r0, #8
 800253a:	7048      	strb	r0, [r1, #1]
 800253c:	8ad8      	ldrh	r0, [r3, #22]
 800253e:	7088      	strb	r0, [r1, #2]
 8002540:	8ada      	ldrh	r2, [r3, #22]
 8002542:	710c      	strb	r4, [r1, #4]
 8002544:	0a12      	lsrs	r2, r2, #8
 8002546:	714c      	strb	r4, [r1, #5]
 8002548:	70ca      	strb	r2, [r1, #3]
 800254a:	bd30      	pop	{r4, r5, pc}

0800254c <.text_37>:
 800254c:	20000518 	.word	0x20000518

08002550 <.text_38>:
 8002550:	20000000 	.word	0x20000000

08002554 <.text_39>:
 8002554:	5f4c5250 	.word	0x5f4c5250
 8002558:	4e455645 	.word	0x4e455645
 800255c:	58525f54 	.word	0x58525f54
 8002560:	5349445f 	.word	0x5349445f
 8002564:	44524143 	.word	0x44524143
 8002568:	00004445 	.word	0x00004445

0800256c <USBPD_PRL_Init::PRL_PhyCallbacks>:
 800256c:	080020d9 0800240b 08002461 0800246d     . ...$..a$..m$..
 800257c:	08002471 00000000                       q$......

08002584 <.text_41>:
 8002584:	0001      	.short	0x0001

08002586 <__aeabi_memset>:
 8002586:	b470      	push	{r4, r5, r6}
 8002588:	0784      	lsls	r4, r0, #30
 800258a:	d046      	beq.n	800261a <__aeabi_memset+0x94>
 800258c:	1e4c      	subs	r4, r1, #1
 800258e:	2900      	cmp	r1, #0
 8002590:	d041      	beq.n	8002616 <__aeabi_memset+0x90>
 8002592:	b2d5      	uxtb	r5, r2
 8002594:	4603      	mov	r3, r0
 8002596:	e002      	b.n	800259e <__aeabi_memset+0x18>
 8002598:	1e61      	subs	r1, r4, #1
 800259a:	b3e4      	cbz	r4, 8002616 <__aeabi_memset+0x90>
 800259c:	460c      	mov	r4, r1
 800259e:	f803 5b01 	strb.w	r5, [r3], #1
 80025a2:	0799      	lsls	r1, r3, #30
 80025a4:	d1f8      	bne.n	8002598 <__aeabi_memset+0x12>
 80025a6:	2c03      	cmp	r4, #3
 80025a8:	d92e      	bls.n	8002608 <__aeabi_memset+0x82>
 80025aa:	b2d5      	uxtb	r5, r2
 80025ac:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80025b0:	2c0f      	cmp	r4, #15
 80025b2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80025b6:	d919      	bls.n	80025ec <__aeabi_memset+0x66>
 80025b8:	4626      	mov	r6, r4
 80025ba:	f103 0110 	add.w	r1, r3, #16
 80025be:	3e10      	subs	r6, #16
 80025c0:	2e0f      	cmp	r6, #15
 80025c2:	f841 5c10 	str.w	r5, [r1, #-16]
 80025c6:	f841 5c0c 	str.w	r5, [r1, #-12]
 80025ca:	f841 5c08 	str.w	r5, [r1, #-8]
 80025ce:	f841 5c04 	str.w	r5, [r1, #-4]
 80025d2:	f101 0110 	add.w	r1, r1, #16
 80025d6:	d8f2      	bhi.n	80025be <__aeabi_memset+0x38>
 80025d8:	f1a4 0110 	sub.w	r1, r4, #16
 80025dc:	f021 010f 	bic.w	r1, r1, #15
 80025e0:	f004 040f 	and.w	r4, r4, #15
 80025e4:	3110      	adds	r1, #16
 80025e6:	2c03      	cmp	r4, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	d90d      	bls.n	8002608 <__aeabi_memset+0x82>
 80025ec:	461e      	mov	r6, r3
 80025ee:	4621      	mov	r1, r4
 80025f0:	3904      	subs	r1, #4
 80025f2:	2903      	cmp	r1, #3
 80025f4:	f846 5b04 	str.w	r5, [r6], #4
 80025f8:	d8fa      	bhi.n	80025f0 <__aeabi_memset+0x6a>
 80025fa:	1f21      	subs	r1, r4, #4
 80025fc:	f021 0103 	bic.w	r1, r1, #3
 8002600:	3104      	adds	r1, #4
 8002602:	440b      	add	r3, r1
 8002604:	f004 0403 	and.w	r4, r4, #3
 8002608:	b12c      	cbz	r4, 8002616 <__aeabi_memset+0x90>
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	441c      	add	r4, r3
 800260e:	f803 2b01 	strb.w	r2, [r3], #1
 8002612:	42a3      	cmp	r3, r4
 8002614:	d1fb      	bne.n	800260e <__aeabi_memset+0x88>
 8002616:	bc70      	pop	{r4, r5, r6}
 8002618:	4770      	bx	lr
 800261a:	460c      	mov	r4, r1
 800261c:	4603      	mov	r3, r0
 800261e:	e7c2      	b.n	80025a6 <__aeabi_memset+0x20>

08002620 <memchr>:
 8002620:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8002624:	2a10      	cmp	r2, #16
 8002626:	db2b      	blt.n	8002680 <memchr+0x60>
 8002628:	f010 0f07 	tst.w	r0, #7
 800262c:	d008      	beq.n	8002640 <memchr+0x20>
 800262e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002632:	3a01      	subs	r2, #1
 8002634:	428b      	cmp	r3, r1
 8002636:	d02d      	beq.n	8002694 <memchr+0x74>
 8002638:	f010 0f07 	tst.w	r0, #7
 800263c:	b342      	cbz	r2, 8002690 <memchr+0x70>
 800263e:	d1f6      	bne.n	800262e <memchr+0xe>
 8002640:	b4f0      	push	{r4, r5, r6, r7}
 8002642:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002646:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800264a:	f022 0407 	bic.w	r4, r2, #7
 800264e:	f07f 0700 	mvns.w	r7, #0
 8002652:	2300      	movs	r3, #0
 8002654:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002658:	3c08      	subs	r4, #8
 800265a:	ea85 0501 	eor.w	r5, r5, r1
 800265e:	ea86 0601 	eor.w	r6, r6, r1
 8002662:	fa85 f547 	uadd8	r5, r5, r7
 8002666:	faa3 f587 	sel	r5, r3, r7
 800266a:	fa86 f647 	uadd8	r6, r6, r7
 800266e:	faa5 f687 	sel	r6, r5, r7
 8002672:	b98e      	cbnz	r6, 8002698 <memchr+0x78>
 8002674:	d1ee      	bne.n	8002654 <memchr+0x34>
 8002676:	bcf0      	pop	{r4, r5, r6, r7}
 8002678:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800267c:	f002 0207 	and.w	r2, r2, #7
 8002680:	b132      	cbz	r2, 8002690 <memchr+0x70>
 8002682:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002686:	3a01      	subs	r2, #1
 8002688:	ea83 0301 	eor.w	r3, r3, r1
 800268c:	b113      	cbz	r3, 8002694 <memchr+0x74>
 800268e:	d1f8      	bne.n	8002682 <memchr+0x62>
 8002690:	2000      	movs	r0, #0
 8002692:	4770      	bx	lr
 8002694:	3801      	subs	r0, #1
 8002696:	4770      	bx	lr
 8002698:	2d00      	cmp	r5, #0
 800269a:	bf06      	itte	eq
 800269c:	4635      	moveq	r5, r6
 800269e:	3803      	subeq	r0, #3
 80026a0:	3807      	subne	r0, #7
 80026a2:	f015 0f01 	tst.w	r5, #1
 80026a6:	d107      	bne.n	80026b8 <memchr+0x98>
 80026a8:	3001      	adds	r0, #1
 80026aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80026ae:	bf02      	ittt	eq
 80026b0:	3001      	addeq	r0, #1
 80026b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80026b6:	3001      	addeq	r0, #1
 80026b8:	bcf0      	pop	{r4, r5, r6, r7}
 80026ba:	3801      	subs	r0, #1
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop

080026c0 <strlen>:
 80026c0:	4603      	mov	r3, r0
 80026c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026c6:	2a00      	cmp	r2, #0
 80026c8:	d1fb      	bne.n	80026c2 <strlen+0x2>
 80026ca:	1a18      	subs	r0, r3, r0
 80026cc:	3801      	subs	r0, #1
 80026ce:	4770      	bx	lr

080026d0 <strcmp>:
 80026d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026d8:	2a01      	cmp	r2, #1
 80026da:	bf28      	it	cs
 80026dc:	429a      	cmpcs	r2, r3
 80026de:	d0f7      	beq.n	80026d0 <strcmp>
 80026e0:	1ad0      	subs	r0, r2, r3
 80026e2:	4770      	bx	lr

080026e4 <__aeabi_drsub>:
 80026e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80026e8:	e002      	b.n	80026f0 <__adddf3>
 80026ea:	bf00      	nop

080026ec <__aeabi_dsub>:
 80026ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080026f0 <__adddf3>:
 80026f0:	b530      	push	{r4, r5, lr}
 80026f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80026f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80026fa:	ea94 0f05 	teq	r4, r5
 80026fe:	bf08      	it	eq
 8002700:	ea90 0f02 	teqeq	r0, r2
 8002704:	bf1f      	itttt	ne
 8002706:	ea54 0c00 	orrsne.w	ip, r4, r0
 800270a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800270e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002712:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002716:	f000 80e2 	beq.w	80028de <__adddf3+0x1ee>
 800271a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800271e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002722:	bfb8      	it	lt
 8002724:	426d      	neglt	r5, r5
 8002726:	dd0c      	ble.n	8002742 <__adddf3+0x52>
 8002728:	442c      	add	r4, r5
 800272a:	ea80 0202 	eor.w	r2, r0, r2
 800272e:	ea81 0303 	eor.w	r3, r1, r3
 8002732:	ea82 0000 	eor.w	r0, r2, r0
 8002736:	ea83 0101 	eor.w	r1, r3, r1
 800273a:	ea80 0202 	eor.w	r2, r0, r2
 800273e:	ea81 0303 	eor.w	r3, r1, r3
 8002742:	2d36      	cmp	r5, #54	@ 0x36
 8002744:	bf88      	it	hi
 8002746:	bd30      	pophi	{r4, r5, pc}
 8002748:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800274c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002750:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8002754:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002758:	d002      	beq.n	8002760 <__adddf3+0x70>
 800275a:	4240      	negs	r0, r0
 800275c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002760:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8002764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002768:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800276c:	d002      	beq.n	8002774 <__adddf3+0x84>
 800276e:	4252      	negs	r2, r2
 8002770:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002774:	ea94 0f05 	teq	r4, r5
 8002778:	f000 80a7 	beq.w	80028ca <__adddf3+0x1da>
 800277c:	f1a4 0401 	sub.w	r4, r4, #1
 8002780:	f1d5 0e20 	rsbs	lr, r5, #32
 8002784:	db0d      	blt.n	80027a2 <__adddf3+0xb2>
 8002786:	fa02 fc0e 	lsl.w	ip, r2, lr
 800278a:	fa22 f205 	lsr.w	r2, r2, r5
 800278e:	1880      	adds	r0, r0, r2
 8002790:	f141 0100 	adc.w	r1, r1, #0
 8002794:	fa03 f20e 	lsl.w	r2, r3, lr
 8002798:	1880      	adds	r0, r0, r2
 800279a:	fa43 f305 	asr.w	r3, r3, r5
 800279e:	4159      	adcs	r1, r3
 80027a0:	e00e      	b.n	80027c0 <__adddf3+0xd0>
 80027a2:	f1a5 0520 	sub.w	r5, r5, #32
 80027a6:	f10e 0e20 	add.w	lr, lr, #32
 80027aa:	2a01      	cmp	r2, #1
 80027ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80027b0:	bf28      	it	cs
 80027b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80027b6:	fa43 f305 	asr.w	r3, r3, r5
 80027ba:	18c0      	adds	r0, r0, r3
 80027bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80027c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80027c4:	d507      	bpl.n	80027d6 <__adddf3+0xe6>
 80027c6:	f04f 0e00 	mov.w	lr, #0
 80027ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80027ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80027d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80027d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80027da:	d31b      	bcc.n	8002814 <__adddf3+0x124>
 80027dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80027e0:	d30c      	bcc.n	80027fc <__adddf3+0x10c>
 80027e2:	0849      	lsrs	r1, r1, #1
 80027e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80027e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80027ec:	f104 0401 	add.w	r4, r4, #1
 80027f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80027f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80027f8:	f080 809a 	bcs.w	8002930 <__adddf3+0x240>
 80027fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8002800:	bf08      	it	eq
 8002802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002806:	f150 0000 	adcs.w	r0, r0, #0
 800280a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800280e:	ea41 0105 	orr.w	r1, r1, r5
 8002812:	bd30      	pop	{r4, r5, pc}
 8002814:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002818:	4140      	adcs	r0, r0
 800281a:	eb41 0101 	adc.w	r1, r1, r1
 800281e:	3c01      	subs	r4, #1
 8002820:	bf28      	it	cs
 8002822:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8002826:	d2e9      	bcs.n	80027fc <__adddf3+0x10c>
 8002828:	f091 0f00 	teq	r1, #0
 800282c:	bf04      	itt	eq
 800282e:	4601      	moveq	r1, r0
 8002830:	2000      	moveq	r0, #0
 8002832:	fab1 f381 	clz	r3, r1
 8002836:	bf08      	it	eq
 8002838:	3320      	addeq	r3, #32
 800283a:	f1a3 030b 	sub.w	r3, r3, #11
 800283e:	f1b3 0220 	subs.w	r2, r3, #32
 8002842:	da0c      	bge.n	800285e <__adddf3+0x16e>
 8002844:	320c      	adds	r2, #12
 8002846:	dd08      	ble.n	800285a <__adddf3+0x16a>
 8002848:	f102 0c14 	add.w	ip, r2, #20
 800284c:	f1c2 020c 	rsb	r2, r2, #12
 8002850:	fa01 f00c 	lsl.w	r0, r1, ip
 8002854:	fa21 f102 	lsr.w	r1, r1, r2
 8002858:	e00c      	b.n	8002874 <__adddf3+0x184>
 800285a:	f102 0214 	add.w	r2, r2, #20
 800285e:	bfd8      	it	le
 8002860:	f1c2 0c20 	rsble	ip, r2, #32
 8002864:	fa01 f102 	lsl.w	r1, r1, r2
 8002868:	fa20 fc0c 	lsr.w	ip, r0, ip
 800286c:	bfdc      	itt	le
 800286e:	ea41 010c 	orrle.w	r1, r1, ip
 8002872:	4090      	lslle	r0, r2
 8002874:	1ae4      	subs	r4, r4, r3
 8002876:	bfa2      	ittt	ge
 8002878:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800287c:	4329      	orrge	r1, r5
 800287e:	bd30      	popge	{r4, r5, pc}
 8002880:	ea6f 0404 	mvn.w	r4, r4
 8002884:	3c1f      	subs	r4, #31
 8002886:	da1c      	bge.n	80028c2 <__adddf3+0x1d2>
 8002888:	340c      	adds	r4, #12
 800288a:	dc0e      	bgt.n	80028aa <__adddf3+0x1ba>
 800288c:	f104 0414 	add.w	r4, r4, #20
 8002890:	f1c4 0220 	rsb	r2, r4, #32
 8002894:	fa20 f004 	lsr.w	r0, r0, r4
 8002898:	fa01 f302 	lsl.w	r3, r1, r2
 800289c:	ea40 0003 	orr.w	r0, r0, r3
 80028a0:	fa21 f304 	lsr.w	r3, r1, r4
 80028a4:	ea45 0103 	orr.w	r1, r5, r3
 80028a8:	bd30      	pop	{r4, r5, pc}
 80028aa:	f1c4 040c 	rsb	r4, r4, #12
 80028ae:	f1c4 0220 	rsb	r2, r4, #32
 80028b2:	fa20 f002 	lsr.w	r0, r0, r2
 80028b6:	fa01 f304 	lsl.w	r3, r1, r4
 80028ba:	ea40 0003 	orr.w	r0, r0, r3
 80028be:	4629      	mov	r1, r5
 80028c0:	bd30      	pop	{r4, r5, pc}
 80028c2:	fa21 f004 	lsr.w	r0, r1, r4
 80028c6:	4629      	mov	r1, r5
 80028c8:	bd30      	pop	{r4, r5, pc}
 80028ca:	f094 0f00 	teq	r4, #0
 80028ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80028d2:	bf06      	itte	eq
 80028d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80028d8:	3401      	addeq	r4, #1
 80028da:	3d01      	subne	r5, #1
 80028dc:	e74e      	b.n	800277c <__adddf3+0x8c>
 80028de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80028e2:	bf18      	it	ne
 80028e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80028e8:	d029      	beq.n	800293e <__adddf3+0x24e>
 80028ea:	ea94 0f05 	teq	r4, r5
 80028ee:	bf08      	it	eq
 80028f0:	ea90 0f02 	teqeq	r0, r2
 80028f4:	d005      	beq.n	8002902 <__adddf3+0x212>
 80028f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80028fa:	bf04      	itt	eq
 80028fc:	4619      	moveq	r1, r3
 80028fe:	4610      	moveq	r0, r2
 8002900:	bd30      	pop	{r4, r5, pc}
 8002902:	ea91 0f03 	teq	r1, r3
 8002906:	bf1e      	ittt	ne
 8002908:	2100      	movne	r1, #0
 800290a:	2000      	movne	r0, #0
 800290c:	bd30      	popne	{r4, r5, pc}
 800290e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002912:	d105      	bne.n	8002920 <__adddf3+0x230>
 8002914:	0040      	lsls	r0, r0, #1
 8002916:	4149      	adcs	r1, r1
 8002918:	bf28      	it	cs
 800291a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800291e:	bd30      	pop	{r4, r5, pc}
 8002920:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8002924:	bf3c      	itt	cc
 8002926:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800292a:	bd30      	popcc	{r4, r5, pc}
 800292c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8002930:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8002934:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002938:	f04f 0000 	mov.w	r0, #0
 800293c:	bd30      	pop	{r4, r5, pc}
 800293e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002942:	bf1a      	itte	ne
 8002944:	4619      	movne	r1, r3
 8002946:	4610      	movne	r0, r2
 8002948:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800294c:	bf1c      	itt	ne
 800294e:	460b      	movne	r3, r1
 8002950:	4602      	movne	r2, r0
 8002952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002956:	bf06      	itte	eq
 8002958:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800295c:	ea91 0f03 	teqeq	r1, r3
 8002960:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8002964:	bd30      	pop	{r4, r5, pc}
 8002966:	bf00      	nop

08002968 <__aeabi_ui2d>:
 8002968:	f090 0f00 	teq	r0, #0
 800296c:	bf04      	itt	eq
 800296e:	2100      	moveq	r1, #0
 8002970:	4770      	bxeq	lr
 8002972:	b530      	push	{r4, r5, lr}
 8002974:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002978:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800297c:	f04f 0500 	mov.w	r5, #0
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	e750      	b.n	8002828 <__adddf3+0x138>
 8002986:	bf00      	nop

08002988 <__aeabi_i2d>:
 8002988:	f090 0f00 	teq	r0, #0
 800298c:	bf04      	itt	eq
 800298e:	2100      	moveq	r1, #0
 8002990:	4770      	bxeq	lr
 8002992:	b530      	push	{r4, r5, lr}
 8002994:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002998:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800299c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80029a0:	bf48      	it	mi
 80029a2:	4240      	negmi	r0, r0
 80029a4:	f04f 0100 	mov.w	r1, #0
 80029a8:	e73e      	b.n	8002828 <__adddf3+0x138>
 80029aa:	bf00      	nop

080029ac <__aeabi_f2d>:
 80029ac:	0042      	lsls	r2, r0, #1
 80029ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80029b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80029b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80029ba:	bf1f      	itttt	ne
 80029bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80029c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80029c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80029c8:	4770      	bxne	lr
 80029ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80029ce:	bf08      	it	eq
 80029d0:	4770      	bxeq	lr
 80029d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80029d6:	bf04      	itt	eq
 80029d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80029dc:	4770      	bxeq	lr
 80029de:	b530      	push	{r4, r5, lr}
 80029e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80029e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80029e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80029ec:	e71c      	b.n	8002828 <__adddf3+0x138>
 80029ee:	bf00      	nop

080029f0 <__aeabi_ul2d>:
 80029f0:	ea50 0201 	orrs.w	r2, r0, r1
 80029f4:	bf08      	it	eq
 80029f6:	4770      	bxeq	lr
 80029f8:	b530      	push	{r4, r5, lr}
 80029fa:	f04f 0500 	mov.w	r5, #0
 80029fe:	e00a      	b.n	8002a16 <__aeabi_l2d+0x16>

08002a00 <__aeabi_l2d>:
 8002a00:	ea50 0201 	orrs.w	r2, r0, r1
 8002a04:	bf08      	it	eq
 8002a06:	4770      	bxeq	lr
 8002a08:	b530      	push	{r4, r5, lr}
 8002a0a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8002a0e:	d502      	bpl.n	8002a16 <__aeabi_l2d+0x16>
 8002a10:	4240      	negs	r0, r0
 8002a12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002a16:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002a1a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8002a1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002a22:	f43f aed8 	beq.w	80027d6 <__adddf3+0xe6>
 8002a26:	f04f 0203 	mov.w	r2, #3
 8002a2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002a2e:	bf18      	it	ne
 8002a30:	3203      	addne	r2, #3
 8002a32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002a36:	bf18      	it	ne
 8002a38:	3203      	addne	r2, #3
 8002a3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002a3e:	f1c2 0320 	rsb	r3, r2, #32
 8002a42:	fa00 fc03 	lsl.w	ip, r0, r3
 8002a46:	fa20 f002 	lsr.w	r0, r0, r2
 8002a4a:	fa01 fe03 	lsl.w	lr, r1, r3
 8002a4e:	ea40 000e 	orr.w	r0, r0, lr
 8002a52:	fa21 f102 	lsr.w	r1, r1, r2
 8002a56:	4414      	add	r4, r2
 8002a58:	e6bd      	b.n	80027d6 <__adddf3+0xe6>
 8002a5a:	bf00      	nop

08002a5c <__aeabi_dmul>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8002a62:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8002a66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002a6a:	bf1d      	ittte	ne
 8002a6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002a70:	ea94 0f0c 	teqne	r4, ip
 8002a74:	ea95 0f0c 	teqne	r5, ip
 8002a78:	f000 f8de 	bleq	8002c38 <__aeabi_dmul+0x1dc>
 8002a7c:	442c      	add	r4, r5
 8002a7e:	ea81 0603 	eor.w	r6, r1, r3
 8002a82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002a86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002a8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002a8e:	bf18      	it	ne
 8002a90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002a94:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002a98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a9c:	d038      	beq.n	8002b10 <__aeabi_dmul+0xb4>
 8002a9e:	fba0 ce02 	umull	ip, lr, r0, r2
 8002aa2:	f04f 0500 	mov.w	r5, #0
 8002aa6:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002aaa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8002aae:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002ab2:	f04f 0600 	mov.w	r6, #0
 8002ab6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002aba:	f09c 0f00 	teq	ip, #0
 8002abe:	bf18      	it	ne
 8002ac0:	f04e 0e01 	orrne.w	lr, lr, #1
 8002ac4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8002ac8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8002acc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8002ad0:	d204      	bcs.n	8002adc <__aeabi_dmul+0x80>
 8002ad2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002ad6:	416d      	adcs	r5, r5
 8002ad8:	eb46 0606 	adc.w	r6, r6, r6
 8002adc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002ae0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002ae4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002ae8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002aec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002af0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8002af4:	bf88      	it	hi
 8002af6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8002afa:	d81e      	bhi.n	8002b3a <__aeabi_dmul+0xde>
 8002afc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8002b00:	bf08      	it	eq
 8002b02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002b06:	f150 0000 	adcs.w	r0, r0, #0
 8002b0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8002b14:	ea46 0101 	orr.w	r1, r6, r1
 8002b18:	ea40 0002 	orr.w	r0, r0, r2
 8002b1c:	ea81 0103 	eor.w	r1, r1, r3
 8002b20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002b24:	bfc2      	ittt	gt
 8002b26:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002b2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002b2e:	bd70      	popgt	{r4, r5, r6, pc}
 8002b30:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002b34:	f04f 0e00 	mov.w	lr, #0
 8002b38:	3c01      	subs	r4, #1
 8002b3a:	f300 80ab 	bgt.w	8002c94 <__aeabi_dmul+0x238>
 8002b3e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8002b42:	bfde      	ittt	le
 8002b44:	2000      	movle	r0, #0
 8002b46:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8002b4a:	bd70      	pople	{r4, r5, r6, pc}
 8002b4c:	f1c4 0400 	rsb	r4, r4, #0
 8002b50:	3c20      	subs	r4, #32
 8002b52:	da35      	bge.n	8002bc0 <__aeabi_dmul+0x164>
 8002b54:	340c      	adds	r4, #12
 8002b56:	dc1b      	bgt.n	8002b90 <__aeabi_dmul+0x134>
 8002b58:	f104 0414 	add.w	r4, r4, #20
 8002b5c:	f1c4 0520 	rsb	r5, r4, #32
 8002b60:	fa00 f305 	lsl.w	r3, r0, r5
 8002b64:	fa20 f004 	lsr.w	r0, r0, r4
 8002b68:	fa01 f205 	lsl.w	r2, r1, r5
 8002b6c:	ea40 0002 	orr.w	r0, r0, r2
 8002b70:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8002b74:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002b78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002b7c:	fa21 f604 	lsr.w	r6, r1, r4
 8002b80:	eb42 0106 	adc.w	r1, r2, r6
 8002b84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002b88:	bf08      	it	eq
 8002b8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
 8002b90:	f1c4 040c 	rsb	r4, r4, #12
 8002b94:	f1c4 0520 	rsb	r5, r4, #32
 8002b98:	fa00 f304 	lsl.w	r3, r0, r4
 8002b9c:	fa20 f005 	lsr.w	r0, r0, r5
 8002ba0:	fa01 f204 	lsl.w	r2, r1, r4
 8002ba4:	ea40 0002 	orr.w	r0, r0, r2
 8002ba8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002bb0:	f141 0100 	adc.w	r1, r1, #0
 8002bb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002bb8:	bf08      	it	eq
 8002bba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002bbe:	bd70      	pop	{r4, r5, r6, pc}
 8002bc0:	f1c4 0520 	rsb	r5, r4, #32
 8002bc4:	fa00 f205 	lsl.w	r2, r0, r5
 8002bc8:	ea4e 0e02 	orr.w	lr, lr, r2
 8002bcc:	fa20 f304 	lsr.w	r3, r0, r4
 8002bd0:	fa01 f205 	lsl.w	r2, r1, r5
 8002bd4:	ea43 0302 	orr.w	r3, r3, r2
 8002bd8:	fa21 f004 	lsr.w	r0, r1, r4
 8002bdc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002be0:	fa21 f204 	lsr.w	r2, r1, r4
 8002be4:	ea20 0002 	bic.w	r0, r0, r2
 8002be8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002bec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002bf0:	bf08      	it	eq
 8002bf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
 8002bf8:	f094 0f00 	teq	r4, #0
 8002bfc:	d10f      	bne.n	8002c1e <__aeabi_dmul+0x1c2>
 8002bfe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8002c02:	0040      	lsls	r0, r0, #1
 8002c04:	eb41 0101 	adc.w	r1, r1, r1
 8002c08:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002c0c:	bf08      	it	eq
 8002c0e:	3c01      	subeq	r4, #1
 8002c10:	d0f7      	beq.n	8002c02 <__aeabi_dmul+0x1a6>
 8002c12:	ea41 0106 	orr.w	r1, r1, r6
 8002c16:	f095 0f00 	teq	r5, #0
 8002c1a:	bf18      	it	ne
 8002c1c:	4770      	bxne	lr
 8002c1e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8002c22:	0052      	lsls	r2, r2, #1
 8002c24:	eb43 0303 	adc.w	r3, r3, r3
 8002c28:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002c2c:	bf08      	it	eq
 8002c2e:	3d01      	subeq	r5, #1
 8002c30:	d0f7      	beq.n	8002c22 <__aeabi_dmul+0x1c6>
 8002c32:	ea43 0306 	orr.w	r3, r3, r6
 8002c36:	4770      	bx	lr
 8002c38:	ea94 0f0c 	teq	r4, ip
 8002c3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002c40:	bf18      	it	ne
 8002c42:	ea95 0f0c 	teqne	r5, ip
 8002c46:	d00c      	beq.n	8002c62 <__aeabi_dmul+0x206>
 8002c48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002c4c:	bf18      	it	ne
 8002c4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002c52:	d1d1      	bne.n	8002bf8 <__aeabi_dmul+0x19c>
 8002c54:	ea81 0103 	eor.w	r1, r1, r3
 8002c58:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002c5c:	f04f 0000 	mov.w	r0, #0
 8002c60:	bd70      	pop	{r4, r5, r6, pc}
 8002c62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002c66:	bf06      	itte	eq
 8002c68:	4610      	moveq	r0, r2
 8002c6a:	4619      	moveq	r1, r3
 8002c6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002c70:	d019      	beq.n	8002ca6 <__aeabi_dmul+0x24a>
 8002c72:	ea94 0f0c 	teq	r4, ip
 8002c76:	d102      	bne.n	8002c7e <__aeabi_dmul+0x222>
 8002c78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002c7c:	d113      	bne.n	8002ca6 <__aeabi_dmul+0x24a>
 8002c7e:	ea95 0f0c 	teq	r5, ip
 8002c82:	d105      	bne.n	8002c90 <__aeabi_dmul+0x234>
 8002c84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002c88:	bf1c      	itt	ne
 8002c8a:	4610      	movne	r0, r2
 8002c8c:	4619      	movne	r1, r3
 8002c8e:	d10a      	bne.n	8002ca6 <__aeabi_dmul+0x24a>
 8002c90:	ea81 0103 	eor.w	r1, r1, r3
 8002c94:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002c98:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8002c9c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002ca0:	f04f 0000 	mov.w	r0, #0
 8002ca4:	bd70      	pop	{r4, r5, r6, pc}
 8002ca6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8002caa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8002cae:	bd70      	pop	{r4, r5, r6, pc}

08002cb0 <__aeabi_ddiv>:
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8002cb6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8002cba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002cbe:	bf1d      	ittte	ne
 8002cc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002cc4:	ea94 0f0c 	teqne	r4, ip
 8002cc8:	ea95 0f0c 	teqne	r5, ip
 8002ccc:	f000 f8a7 	bleq	8002e1e <__aeabi_ddiv+0x16e>
 8002cd0:	eba4 0405 	sub.w	r4, r4, r5
 8002cd4:	ea81 0e03 	eor.w	lr, r1, r3
 8002cd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002cdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002ce0:	f000 8088 	beq.w	8002df4 <__aeabi_ddiv+0x144>
 8002ce4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002ce8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8002cec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002cf0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002cf4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002cf8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002cfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002d00:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002d04:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8002d08:	429d      	cmp	r5, r3
 8002d0a:	bf08      	it	eq
 8002d0c:	4296      	cmpeq	r6, r2
 8002d0e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8002d12:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8002d16:	d202      	bcs.n	8002d1e <__aeabi_ddiv+0x6e>
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d1e:	1ab6      	subs	r6, r6, r2
 8002d20:	eb65 0503 	sbc.w	r5, r5, r3
 8002d24:	085b      	lsrs	r3, r3, #1
 8002d26:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d2a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002d2e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8002d32:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d3a:	bf22      	ittt	cs
 8002d3c:	1ab6      	subcs	r6, r6, r2
 8002d3e:	4675      	movcs	r5, lr
 8002d40:	ea40 000c 	orrcs.w	r0, r0, ip
 8002d44:	085b      	lsrs	r3, r3, #1
 8002d46:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d52:	bf22      	ittt	cs
 8002d54:	1ab6      	subcs	r6, r6, r2
 8002d56:	4675      	movcs	r5, lr
 8002d58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d62:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d66:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d6a:	bf22      	ittt	cs
 8002d6c:	1ab6      	subcs	r6, r6, r2
 8002d6e:	4675      	movcs	r5, lr
 8002d70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d7a:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d82:	bf22      	ittt	cs
 8002d84:	1ab6      	subcs	r6, r6, r2
 8002d86:	4675      	movcs	r5, lr
 8002d88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002d8c:	ea55 0e06 	orrs.w	lr, r5, r6
 8002d90:	d018      	beq.n	8002dc4 <__aeabi_ddiv+0x114>
 8002d92:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002d96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8002d9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8002d9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002da2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002da6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8002daa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8002dae:	d1c0      	bne.n	8002d32 <__aeabi_ddiv+0x82>
 8002db0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002db4:	d10b      	bne.n	8002dce <__aeabi_ddiv+0x11e>
 8002db6:	ea41 0100 	orr.w	r1, r1, r0
 8002dba:	f04f 0000 	mov.w	r0, #0
 8002dbe:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8002dc2:	e7b6      	b.n	8002d32 <__aeabi_ddiv+0x82>
 8002dc4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002dc8:	bf04      	itt	eq
 8002dca:	4301      	orreq	r1, r0
 8002dcc:	2000      	moveq	r0, #0
 8002dce:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8002dd2:	bf88      	it	hi
 8002dd4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8002dd8:	f63f aeaf 	bhi.w	8002b3a <__aeabi_dmul+0xde>
 8002ddc:	ebb5 0c03 	subs.w	ip, r5, r3
 8002de0:	bf04      	itt	eq
 8002de2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002de6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002dea:	f150 0000 	adcs.w	r0, r0, #0
 8002dee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002df2:	bd70      	pop	{r4, r5, r6, pc}
 8002df4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8002df8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002dfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002e00:	bfc2      	ittt	gt
 8002e02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002e06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002e0a:	bd70      	popgt	{r4, r5, r6, pc}
 8002e0c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002e10:	f04f 0e00 	mov.w	lr, #0
 8002e14:	3c01      	subs	r4, #1
 8002e16:	e690      	b.n	8002b3a <__aeabi_dmul+0xde>
 8002e18:	ea45 0e06 	orr.w	lr, r5, r6
 8002e1c:	e68d      	b.n	8002b3a <__aeabi_dmul+0xde>
 8002e1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002e22:	ea94 0f0c 	teq	r4, ip
 8002e26:	bf08      	it	eq
 8002e28:	ea95 0f0c 	teqeq	r5, ip
 8002e2c:	f43f af3b 	beq.w	8002ca6 <__aeabi_dmul+0x24a>
 8002e30:	ea94 0f0c 	teq	r4, ip
 8002e34:	d10a      	bne.n	8002e4c <__aeabi_ddiv+0x19c>
 8002e36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002e3a:	f47f af34 	bne.w	8002ca6 <__aeabi_dmul+0x24a>
 8002e3e:	ea95 0f0c 	teq	r5, ip
 8002e42:	f47f af25 	bne.w	8002c90 <__aeabi_dmul+0x234>
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	e72c      	b.n	8002ca6 <__aeabi_dmul+0x24a>
 8002e4c:	ea95 0f0c 	teq	r5, ip
 8002e50:	d106      	bne.n	8002e60 <__aeabi_ddiv+0x1b0>
 8002e52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002e56:	f43f aefd 	beq.w	8002c54 <__aeabi_dmul+0x1f8>
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	e722      	b.n	8002ca6 <__aeabi_dmul+0x24a>
 8002e60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002e64:	bf18      	it	ne
 8002e66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002e6a:	f47f aec5 	bne.w	8002bf8 <__aeabi_dmul+0x19c>
 8002e6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002e72:	f47f af0d 	bne.w	8002c90 <__aeabi_dmul+0x234>
 8002e76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002e7a:	f47f aeeb 	bne.w	8002c54 <__aeabi_dmul+0x1f8>
 8002e7e:	e712      	b.n	8002ca6 <__aeabi_dmul+0x24a>

08002e80 <__gedf2>:
 8002e80:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8002e84:	e006      	b.n	8002e94 <__cmpdf2+0x4>
 8002e86:	bf00      	nop

08002e88 <__ledf2>:
 8002e88:	f04f 0c01 	mov.w	ip, #1
 8002e8c:	e002      	b.n	8002e94 <__cmpdf2+0x4>
 8002e8e:	bf00      	nop

08002e90 <__cmpdf2>:
 8002e90:	f04f 0c01 	mov.w	ip, #1
 8002e94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002ea0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002ea4:	bf18      	it	ne
 8002ea6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8002eaa:	d01b      	beq.n	8002ee4 <__cmpdf2+0x54>
 8002eac:	b001      	add	sp, #4
 8002eae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002eb2:	bf0c      	ite	eq
 8002eb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002eb8:	ea91 0f03 	teqne	r1, r3
 8002ebc:	bf02      	ittt	eq
 8002ebe:	ea90 0f02 	teqeq	r0, r2
 8002ec2:	2000      	moveq	r0, #0
 8002ec4:	4770      	bxeq	lr
 8002ec6:	f110 0f00 	cmn.w	r0, #0
 8002eca:	ea91 0f03 	teq	r1, r3
 8002ece:	bf58      	it	pl
 8002ed0:	4299      	cmppl	r1, r3
 8002ed2:	bf08      	it	eq
 8002ed4:	4290      	cmpeq	r0, r2
 8002ed6:	bf2c      	ite	cs
 8002ed8:	17d8      	asrcs	r0, r3, #31
 8002eda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8002ede:	f040 0001 	orr.w	r0, r0, #1
 8002ee2:	4770      	bx	lr
 8002ee4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002ee8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002eec:	d102      	bne.n	8002ef4 <__cmpdf2+0x64>
 8002eee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002ef2:	d107      	bne.n	8002f04 <__cmpdf2+0x74>
 8002ef4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002ef8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002efc:	d1d6      	bne.n	8002eac <__cmpdf2+0x1c>
 8002efe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002f02:	d0d3      	beq.n	8002eac <__cmpdf2+0x1c>
 8002f04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop

08002f0c <__aeabi_cdrcmple>:
 8002f0c:	4684      	mov	ip, r0
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4662      	mov	r2, ip
 8002f12:	468c      	mov	ip, r1
 8002f14:	4619      	mov	r1, r3
 8002f16:	4663      	mov	r3, ip
 8002f18:	e000      	b.n	8002f1c <__aeabi_cdcmpeq>
 8002f1a:	bf00      	nop

08002f1c <__aeabi_cdcmpeq>:
 8002f1c:	b501      	push	{r0, lr}
 8002f1e:	f7ff ffb7 	bl	8002e90 <__cmpdf2>
 8002f22:	2800      	cmp	r0, #0
 8002f24:	bf48      	it	mi
 8002f26:	f110 0f00 	cmnmi.w	r0, #0
 8002f2a:	bd01      	pop	{r0, pc}

08002f2c <__aeabi_dcmpeq>:
 8002f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f30:	f7ff fff4 	bl	8002f1c <__aeabi_cdcmpeq>
 8002f34:	bf0c      	ite	eq
 8002f36:	2001      	moveq	r0, #1
 8002f38:	2000      	movne	r0, #0
 8002f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f3e:	bf00      	nop

08002f40 <__aeabi_dcmplt>:
 8002f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f44:	f7ff ffea 	bl	8002f1c <__aeabi_cdcmpeq>
 8002f48:	bf34      	ite	cc
 8002f4a:	2001      	movcc	r0, #1
 8002f4c:	2000      	movcs	r0, #0
 8002f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f52:	bf00      	nop

08002f54 <__aeabi_dcmple>:
 8002f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f58:	f7ff ffe0 	bl	8002f1c <__aeabi_cdcmpeq>
 8002f5c:	bf94      	ite	ls
 8002f5e:	2001      	movls	r0, #1
 8002f60:	2000      	movhi	r0, #0
 8002f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f66:	bf00      	nop

08002f68 <__aeabi_dcmpge>:
 8002f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f6c:	f7ff ffce 	bl	8002f0c <__aeabi_cdrcmple>
 8002f70:	bf94      	ite	ls
 8002f72:	2001      	movls	r0, #1
 8002f74:	2000      	movhi	r0, #0
 8002f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f7a:	bf00      	nop

08002f7c <__aeabi_dcmpgt>:
 8002f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f80:	f7ff ffc4 	bl	8002f0c <__aeabi_cdrcmple>
 8002f84:	bf34      	ite	cc
 8002f86:	2001      	movcc	r0, #1
 8002f88:	2000      	movcs	r0, #0
 8002f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f8e:	bf00      	nop

08002f90 <__aeabi_dcmpun>:
 8002f90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002f94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002f98:	d102      	bne.n	8002fa0 <__aeabi_dcmpun+0x10>
 8002f9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002f9e:	d10a      	bne.n	8002fb6 <__aeabi_dcmpun+0x26>
 8002fa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002fa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002fa8:	d102      	bne.n	8002fb0 <__aeabi_dcmpun+0x20>
 8002faa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002fae:	d102      	bne.n	8002fb6 <__aeabi_dcmpun+0x26>
 8002fb0:	f04f 0000 	mov.w	r0, #0
 8002fb4:	4770      	bx	lr
 8002fb6:	f04f 0001 	mov.w	r0, #1
 8002fba:	4770      	bx	lr

08002fbc <__aeabi_d2iz>:
 8002fbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002fc0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8002fc4:	d215      	bcs.n	8002ff2 <__aeabi_d2iz+0x36>
 8002fc6:	d511      	bpl.n	8002fec <__aeabi_d2iz+0x30>
 8002fc8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8002fcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002fd0:	d912      	bls.n	8002ff8 <__aeabi_d2iz+0x3c>
 8002fd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002fd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8002fde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8002fe2:	fa23 f002 	lsr.w	r0, r3, r2
 8002fe6:	bf18      	it	ne
 8002fe8:	4240      	negne	r0, r0
 8002fea:	4770      	bx	lr
 8002fec:	f04f 0000 	mov.w	r0, #0
 8002ff0:	4770      	bx	lr
 8002ff2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8002ff6:	d105      	bne.n	8003004 <__aeabi_d2iz+0x48>
 8002ff8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8002ffc:	bf08      	it	eq
 8002ffe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8003002:	4770      	bx	lr
 8003004:	f04f 0000 	mov.w	r0, #0
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop

0800300c <__aeabi_d2uiz>:
 800300c:	004a      	lsls	r2, r1, #1
 800300e:	d211      	bcs.n	8003034 <__aeabi_d2uiz+0x28>
 8003010:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8003014:	d211      	bcs.n	800303a <__aeabi_d2uiz+0x2e>
 8003016:	d50d      	bpl.n	8003034 <__aeabi_d2uiz+0x28>
 8003018:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800301c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003020:	d40e      	bmi.n	8003040 <__aeabi_d2uiz+0x34>
 8003022:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003026:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800302a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800302e:	fa23 f002 	lsr.w	r0, r3, r2
 8003032:	4770      	bx	lr
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	4770      	bx	lr
 800303a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800303e:	d102      	bne.n	8003046 <__aeabi_d2uiz+0x3a>
 8003040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003044:	4770      	bx	lr
 8003046:	f04f 0000 	mov.w	r0, #0
 800304a:	4770      	bx	lr

0800304c <__aeabi_d2f>:
 800304c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003050:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8003054:	bf24      	itt	cs
 8003056:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800305a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800305e:	d90d      	bls.n	800307c <__aeabi_d2f+0x30>
 8003060:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8003064:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003068:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800306c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003070:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8003074:	bf08      	it	eq
 8003076:	f020 0001 	biceq.w	r0, r0, #1
 800307a:	4770      	bx	lr
 800307c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8003080:	d121      	bne.n	80030c6 <__aeabi_d2f+0x7a>
 8003082:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8003086:	bfbc      	itt	lt
 8003088:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800308c:	4770      	bxlt	lr
 800308e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8003092:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8003096:	f1c2 0218 	rsb	r2, r2, #24
 800309a:	f1c2 0c20 	rsb	ip, r2, #32
 800309e:	fa10 f30c 	lsls.w	r3, r0, ip
 80030a2:	fa20 f002 	lsr.w	r0, r0, r2
 80030a6:	bf18      	it	ne
 80030a8:	f040 0001 	orrne.w	r0, r0, #1
 80030ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80030b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80030b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80030b8:	ea40 000c 	orr.w	r0, r0, ip
 80030bc:	fa23 f302 	lsr.w	r3, r3, r2
 80030c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030c4:	e7cc      	b.n	8003060 <__aeabi_d2f+0x14>
 80030c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80030ca:	d107      	bne.n	80030dc <__aeabi_d2f+0x90>
 80030cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80030d0:	bf1e      	ittt	ne
 80030d2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80030d6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80030da:	4770      	bxne	lr
 80030dc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80030e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80030e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop

080030ec <__aeabi_uldivmod>:
 80030ec:	b953      	cbnz	r3, 8003104 <__aeabi_uldivmod+0x18>
 80030ee:	b94a      	cbnz	r2, 8003104 <__aeabi_uldivmod+0x18>
 80030f0:	2900      	cmp	r1, #0
 80030f2:	bf08      	it	eq
 80030f4:	2800      	cmpeq	r0, #0
 80030f6:	bf1c      	itt	ne
 80030f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80030fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8003100:	f000 b9a0 	b.w	8003444 <__aeabi_idiv0>
 8003104:	f1ad 0c08 	sub.w	ip, sp, #8
 8003108:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800310c:	f000 f83c 	bl	8003188 <__udivmoddi4>
 8003110:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003118:	b004      	add	sp, #16
 800311a:	4770      	bx	lr

0800311c <__aeabi_d2lz>:
 800311c:	b538      	push	{r3, r4, r5, lr}
 800311e:	2200      	movs	r2, #0
 8003120:	2300      	movs	r3, #0
 8003122:	4604      	mov	r4, r0
 8003124:	460d      	mov	r5, r1
 8003126:	f7ff ff0b 	bl	8002f40 <__aeabi_dcmplt>
 800312a:	b928      	cbnz	r0, 8003138 <__aeabi_d2lz+0x1c>
 800312c:	4620      	mov	r0, r4
 800312e:	4629      	mov	r1, r5
 8003130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003134:	f000 b80a 	b.w	800314c <__aeabi_d2ulz>
 8003138:	4620      	mov	r0, r4
 800313a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800313e:	f000 f805 	bl	800314c <__aeabi_d2ulz>
 8003142:	4240      	negs	r0, r0
 8003144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003148:	bd38      	pop	{r3, r4, r5, pc}
 800314a:	bf00      	nop

0800314c <__aeabi_d2ulz>:
 800314c:	b5d0      	push	{r4, r6, r7, lr}
 800314e:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <__aeabi_d2ulz+0x34>)
 8003150:	2200      	movs	r2, #0
 8003152:	4606      	mov	r6, r0
 8003154:	460f      	mov	r7, r1
 8003156:	f7ff fc81 	bl	8002a5c <__aeabi_dmul>
 800315a:	f7ff ff57 	bl	800300c <__aeabi_d2uiz>
 800315e:	4604      	mov	r4, r0
 8003160:	f7ff fc02 	bl	8002968 <__aeabi_ui2d>
 8003164:	4b07      	ldr	r3, [pc, #28]	@ (8003184 <__aeabi_d2ulz+0x38>)
 8003166:	2200      	movs	r2, #0
 8003168:	f7ff fc78 	bl	8002a5c <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4630      	mov	r0, r6
 8003172:	4639      	mov	r1, r7
 8003174:	f7ff faba 	bl	80026ec <__aeabi_dsub>
 8003178:	f7ff ff48 	bl	800300c <__aeabi_d2uiz>
 800317c:	4621      	mov	r1, r4
 800317e:	bdd0      	pop	{r4, r6, r7, pc}
 8003180:	3df00000 	.word	0x3df00000
 8003184:	41f00000 	.word	0x41f00000

08003188 <__udivmoddi4>:
 8003188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800318c:	9d08      	ldr	r5, [sp, #32]
 800318e:	460c      	mov	r4, r1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d14e      	bne.n	8003232 <__udivmoddi4+0xaa>
 8003194:	4694      	mov	ip, r2
 8003196:	458c      	cmp	ip, r1
 8003198:	4686      	mov	lr, r0
 800319a:	fab2 f282 	clz	r2, r2
 800319e:	d962      	bls.n	8003266 <__udivmoddi4+0xde>
 80031a0:	b14a      	cbz	r2, 80031b6 <__udivmoddi4+0x2e>
 80031a2:	f1c2 0320 	rsb	r3, r2, #32
 80031a6:	4091      	lsls	r1, r2
 80031a8:	fa20 f303 	lsr.w	r3, r0, r3
 80031ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80031b0:	4319      	orrs	r1, r3
 80031b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80031b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80031ba:	fa1f f68c 	uxth.w	r6, ip
 80031be:	fbb1 f4f7 	udiv	r4, r1, r7
 80031c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80031c6:	fb07 1114 	mls	r1, r7, r4, r1
 80031ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80031ce:	fb04 f106 	mul.w	r1, r4, r6
 80031d2:	4299      	cmp	r1, r3
 80031d4:	d90a      	bls.n	80031ec <__udivmoddi4+0x64>
 80031d6:	eb1c 0303 	adds.w	r3, ip, r3
 80031da:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80031de:	f080 8112 	bcs.w	8003406 <__udivmoddi4+0x27e>
 80031e2:	4299      	cmp	r1, r3
 80031e4:	f240 810f 	bls.w	8003406 <__udivmoddi4+0x27e>
 80031e8:	3c02      	subs	r4, #2
 80031ea:	4463      	add	r3, ip
 80031ec:	1a59      	subs	r1, r3, r1
 80031ee:	fa1f f38e 	uxth.w	r3, lr
 80031f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80031f6:	fb07 1110 	mls	r1, r7, r0, r1
 80031fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80031fe:	fb00 f606 	mul.w	r6, r0, r6
 8003202:	429e      	cmp	r6, r3
 8003204:	d90a      	bls.n	800321c <__udivmoddi4+0x94>
 8003206:	eb1c 0303 	adds.w	r3, ip, r3
 800320a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800320e:	f080 80fc 	bcs.w	800340a <__udivmoddi4+0x282>
 8003212:	429e      	cmp	r6, r3
 8003214:	f240 80f9 	bls.w	800340a <__udivmoddi4+0x282>
 8003218:	4463      	add	r3, ip
 800321a:	3802      	subs	r0, #2
 800321c:	1b9b      	subs	r3, r3, r6
 800321e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8003222:	2100      	movs	r1, #0
 8003224:	b11d      	cbz	r5, 800322e <__udivmoddi4+0xa6>
 8003226:	40d3      	lsrs	r3, r2
 8003228:	2200      	movs	r2, #0
 800322a:	e9c5 3200 	strd	r3, r2, [r5]
 800322e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003232:	428b      	cmp	r3, r1
 8003234:	d905      	bls.n	8003242 <__udivmoddi4+0xba>
 8003236:	b10d      	cbz	r5, 800323c <__udivmoddi4+0xb4>
 8003238:	e9c5 0100 	strd	r0, r1, [r5]
 800323c:	2100      	movs	r1, #0
 800323e:	4608      	mov	r0, r1
 8003240:	e7f5      	b.n	800322e <__udivmoddi4+0xa6>
 8003242:	fab3 f183 	clz	r1, r3
 8003246:	2900      	cmp	r1, #0
 8003248:	d146      	bne.n	80032d8 <__udivmoddi4+0x150>
 800324a:	42a3      	cmp	r3, r4
 800324c:	d302      	bcc.n	8003254 <__udivmoddi4+0xcc>
 800324e:	4290      	cmp	r0, r2
 8003250:	f0c0 80f0 	bcc.w	8003434 <__udivmoddi4+0x2ac>
 8003254:	1a86      	subs	r6, r0, r2
 8003256:	eb64 0303 	sbc.w	r3, r4, r3
 800325a:	2001      	movs	r0, #1
 800325c:	2d00      	cmp	r5, #0
 800325e:	d0e6      	beq.n	800322e <__udivmoddi4+0xa6>
 8003260:	e9c5 6300 	strd	r6, r3, [r5]
 8003264:	e7e3      	b.n	800322e <__udivmoddi4+0xa6>
 8003266:	2a00      	cmp	r2, #0
 8003268:	f040 8090 	bne.w	800338c <__udivmoddi4+0x204>
 800326c:	eba1 040c 	sub.w	r4, r1, ip
 8003270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8003274:	fa1f f78c 	uxth.w	r7, ip
 8003278:	2101      	movs	r1, #1
 800327a:	fbb4 f6f8 	udiv	r6, r4, r8
 800327e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8003282:	fb08 4416 	mls	r4, r8, r6, r4
 8003286:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800328a:	fb07 f006 	mul.w	r0, r7, r6
 800328e:	4298      	cmp	r0, r3
 8003290:	d908      	bls.n	80032a4 <__udivmoddi4+0x11c>
 8003292:	eb1c 0303 	adds.w	r3, ip, r3
 8003296:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800329a:	d202      	bcs.n	80032a2 <__udivmoddi4+0x11a>
 800329c:	4298      	cmp	r0, r3
 800329e:	f200 80cd 	bhi.w	800343c <__udivmoddi4+0x2b4>
 80032a2:	4626      	mov	r6, r4
 80032a4:	1a1c      	subs	r4, r3, r0
 80032a6:	fa1f f38e 	uxth.w	r3, lr
 80032aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80032ae:	fb08 4410 	mls	r4, r8, r0, r4
 80032b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80032b6:	fb00 f707 	mul.w	r7, r0, r7
 80032ba:	429f      	cmp	r7, r3
 80032bc:	d908      	bls.n	80032d0 <__udivmoddi4+0x148>
 80032be:	eb1c 0303 	adds.w	r3, ip, r3
 80032c2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80032c6:	d202      	bcs.n	80032ce <__udivmoddi4+0x146>
 80032c8:	429f      	cmp	r7, r3
 80032ca:	f200 80b0 	bhi.w	800342e <__udivmoddi4+0x2a6>
 80032ce:	4620      	mov	r0, r4
 80032d0:	1bdb      	subs	r3, r3, r7
 80032d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80032d6:	e7a5      	b.n	8003224 <__udivmoddi4+0x9c>
 80032d8:	f1c1 0620 	rsb	r6, r1, #32
 80032dc:	408b      	lsls	r3, r1
 80032de:	fa22 f706 	lsr.w	r7, r2, r6
 80032e2:	431f      	orrs	r7, r3
 80032e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80032e8:	fa04 f301 	lsl.w	r3, r4, r1
 80032ec:	ea43 030c 	orr.w	r3, r3, ip
 80032f0:	40f4      	lsrs	r4, r6
 80032f2:	fa00 f801 	lsl.w	r8, r0, r1
 80032f6:	0c38      	lsrs	r0, r7, #16
 80032f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80032fc:	fbb4 fef0 	udiv	lr, r4, r0
 8003300:	fa1f fc87 	uxth.w	ip, r7
 8003304:	fb00 441e 	mls	r4, r0, lr, r4
 8003308:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800330c:	fb0e f90c 	mul.w	r9, lr, ip
 8003310:	45a1      	cmp	r9, r4
 8003312:	fa02 f201 	lsl.w	r2, r2, r1
 8003316:	d90a      	bls.n	800332e <__udivmoddi4+0x1a6>
 8003318:	193c      	adds	r4, r7, r4
 800331a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800331e:	f080 8084 	bcs.w	800342a <__udivmoddi4+0x2a2>
 8003322:	45a1      	cmp	r9, r4
 8003324:	f240 8081 	bls.w	800342a <__udivmoddi4+0x2a2>
 8003328:	f1ae 0e02 	sub.w	lr, lr, #2
 800332c:	443c      	add	r4, r7
 800332e:	eba4 0409 	sub.w	r4, r4, r9
 8003332:	fa1f f983 	uxth.w	r9, r3
 8003336:	fbb4 f3f0 	udiv	r3, r4, r0
 800333a:	fb00 4413 	mls	r4, r0, r3, r4
 800333e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8003342:	fb03 fc0c 	mul.w	ip, r3, ip
 8003346:	45a4      	cmp	ip, r4
 8003348:	d907      	bls.n	800335a <__udivmoddi4+0x1d2>
 800334a:	193c      	adds	r4, r7, r4
 800334c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8003350:	d267      	bcs.n	8003422 <__udivmoddi4+0x29a>
 8003352:	45a4      	cmp	ip, r4
 8003354:	d965      	bls.n	8003422 <__udivmoddi4+0x29a>
 8003356:	3b02      	subs	r3, #2
 8003358:	443c      	add	r4, r7
 800335a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800335e:	fba0 9302 	umull	r9, r3, r0, r2
 8003362:	eba4 040c 	sub.w	r4, r4, ip
 8003366:	429c      	cmp	r4, r3
 8003368:	46ce      	mov	lr, r9
 800336a:	469c      	mov	ip, r3
 800336c:	d351      	bcc.n	8003412 <__udivmoddi4+0x28a>
 800336e:	d04e      	beq.n	800340e <__udivmoddi4+0x286>
 8003370:	b155      	cbz	r5, 8003388 <__udivmoddi4+0x200>
 8003372:	ebb8 030e 	subs.w	r3, r8, lr
 8003376:	eb64 040c 	sbc.w	r4, r4, ip
 800337a:	fa04 f606 	lsl.w	r6, r4, r6
 800337e:	40cb      	lsrs	r3, r1
 8003380:	431e      	orrs	r6, r3
 8003382:	40cc      	lsrs	r4, r1
 8003384:	e9c5 6400 	strd	r6, r4, [r5]
 8003388:	2100      	movs	r1, #0
 800338a:	e750      	b.n	800322e <__udivmoddi4+0xa6>
 800338c:	f1c2 0320 	rsb	r3, r2, #32
 8003390:	fa20 f103 	lsr.w	r1, r0, r3
 8003394:	fa0c fc02 	lsl.w	ip, ip, r2
 8003398:	fa24 f303 	lsr.w	r3, r4, r3
 800339c:	4094      	lsls	r4, r2
 800339e:	430c      	orrs	r4, r1
 80033a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80033a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80033a8:	fa1f f78c 	uxth.w	r7, ip
 80033ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80033b0:	fb08 3110 	mls	r1, r8, r0, r3
 80033b4:	0c23      	lsrs	r3, r4, #16
 80033b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80033ba:	fb00 f107 	mul.w	r1, r0, r7
 80033be:	4299      	cmp	r1, r3
 80033c0:	d908      	bls.n	80033d4 <__udivmoddi4+0x24c>
 80033c2:	eb1c 0303 	adds.w	r3, ip, r3
 80033c6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80033ca:	d22c      	bcs.n	8003426 <__udivmoddi4+0x29e>
 80033cc:	4299      	cmp	r1, r3
 80033ce:	d92a      	bls.n	8003426 <__udivmoddi4+0x29e>
 80033d0:	3802      	subs	r0, #2
 80033d2:	4463      	add	r3, ip
 80033d4:	1a5b      	subs	r3, r3, r1
 80033d6:	b2a4      	uxth	r4, r4
 80033d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80033dc:	fb08 3311 	mls	r3, r8, r1, r3
 80033e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80033e4:	fb01 f307 	mul.w	r3, r1, r7
 80033e8:	42a3      	cmp	r3, r4
 80033ea:	d908      	bls.n	80033fe <__udivmoddi4+0x276>
 80033ec:	eb1c 0404 	adds.w	r4, ip, r4
 80033f0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80033f4:	d213      	bcs.n	800341e <__udivmoddi4+0x296>
 80033f6:	42a3      	cmp	r3, r4
 80033f8:	d911      	bls.n	800341e <__udivmoddi4+0x296>
 80033fa:	3902      	subs	r1, #2
 80033fc:	4464      	add	r4, ip
 80033fe:	1ae4      	subs	r4, r4, r3
 8003400:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003404:	e739      	b.n	800327a <__udivmoddi4+0xf2>
 8003406:	4604      	mov	r4, r0
 8003408:	e6f0      	b.n	80031ec <__udivmoddi4+0x64>
 800340a:	4608      	mov	r0, r1
 800340c:	e706      	b.n	800321c <__udivmoddi4+0x94>
 800340e:	45c8      	cmp	r8, r9
 8003410:	d2ae      	bcs.n	8003370 <__udivmoddi4+0x1e8>
 8003412:	ebb9 0e02 	subs.w	lr, r9, r2
 8003416:	eb63 0c07 	sbc.w	ip, r3, r7
 800341a:	3801      	subs	r0, #1
 800341c:	e7a8      	b.n	8003370 <__udivmoddi4+0x1e8>
 800341e:	4631      	mov	r1, r6
 8003420:	e7ed      	b.n	80033fe <__udivmoddi4+0x276>
 8003422:	4603      	mov	r3, r0
 8003424:	e799      	b.n	800335a <__udivmoddi4+0x1d2>
 8003426:	4630      	mov	r0, r6
 8003428:	e7d4      	b.n	80033d4 <__udivmoddi4+0x24c>
 800342a:	46d6      	mov	lr, sl
 800342c:	e77f      	b.n	800332e <__udivmoddi4+0x1a6>
 800342e:	4463      	add	r3, ip
 8003430:	3802      	subs	r0, #2
 8003432:	e74d      	b.n	80032d0 <__udivmoddi4+0x148>
 8003434:	4606      	mov	r6, r0
 8003436:	4623      	mov	r3, r4
 8003438:	4608      	mov	r0, r1
 800343a:	e70f      	b.n	800325c <__udivmoddi4+0xd4>
 800343c:	3e02      	subs	r6, #2
 800343e:	4463      	add	r3, ip
 8003440:	e730      	b.n	80032a4 <__udivmoddi4+0x11c>
 8003442:	bf00      	nop

08003444 <__aeabi_idiv0>:
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop

08003448 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800344e:	463b      	mov	r3, r7
 8003450:	2220      	movs	r2, #32
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f015 fb3b 	bl	8018ad0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800345a:	4b33      	ldr	r3, [pc, #204]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800345c:	4a33      	ldr	r2, [pc, #204]	@ (800352c <MX_ADC2_Init+0xe4>)
 800345e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003460:	4b31      	ldr	r3, [pc, #196]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003462:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003466:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003468:	4b2f      	ldr	r3, [pc, #188]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800346e:	4b2e      	ldr	r3, [pc, #184]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003470:	2200      	movs	r2, #0
 8003472:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003474:	4b2c      	ldr	r3, [pc, #176]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800347a:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800347c:	2201      	movs	r2, #1
 800347e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003480:	4b29      	ldr	r3, [pc, #164]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003482:	2208      	movs	r2, #8
 8003484:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003486:	4b28      	ldr	r3, [pc, #160]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003488:	2200      	movs	r2, #0
 800348a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800348c:	4b26      	ldr	r3, [pc, #152]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800348e:	2200      	movs	r2, #0
 8003490:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8003492:	4b25      	ldr	r3, [pc, #148]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003494:	2202      	movs	r2, #2
 8003496:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003498:	4b23      	ldr	r3, [pc, #140]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80034a0:	4b21      	ldr	r3, [pc, #132]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034a2:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 80034a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80034a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80034b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80034b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80034be:	4b1a      	ldr	r3, [pc, #104]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80034c6:	4818      	ldr	r0, [pc, #96]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034c8:	f003 f84a 	bl	8006560 <HAL_ADC_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80034d2:	f000 fd4d 	bl	8003f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80034d6:	4b16      	ldr	r3, [pc, #88]	@ (8003530 <MX_ADC2_Init+0xe8>)
 80034d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034da:	2306      	movs	r3, #6
 80034dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80034de:	2303      	movs	r3, #3
 80034e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034e2:	237f      	movs	r3, #127	@ 0x7f
 80034e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80034e6:	2304      	movs	r3, #4
 80034e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034ee:	463b      	mov	r3, r7
 80034f0:	4619      	mov	r1, r3
 80034f2:	480d      	ldr	r0, [pc, #52]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034f4:	f003 fd06 	bl	8006f04 <HAL_ADC_ConfigChannel>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80034fe:	f000 fd37 	bl	8003f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003502:	4b0c      	ldr	r3, [pc, #48]	@ (8003534 <MX_ADC2_Init+0xec>)
 8003504:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003506:	230c      	movs	r3, #12
 8003508:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800350a:	463b      	mov	r3, r7
 800350c:	4619      	mov	r1, r3
 800350e:	4806      	ldr	r0, [pc, #24]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003510:	f003 fcf8 	bl	8006f04 <HAL_ADC_ConfigChannel>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 800351a:	f000 fd29 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800351e:	bf00      	nop
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000524 	.word	0x20000524
 800352c:	50000100 	.word	0x50000100
 8003530:	0c900008 	.word	0x0c900008
 8003534:	10c00010 	.word	0x10c00010

08003538 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b09a      	sub	sp, #104	@ 0x68
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003550:	f107 0310 	add.w	r3, r7, #16
 8003554:	2244      	movs	r2, #68	@ 0x44
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f015 fab9 	bl	8018ad0 <memset>
  if(adcHandle->Instance==ADC2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a37      	ldr	r2, [pc, #220]	@ (8003640 <HAL_ADC_MspInit+0x108>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d167      	bne.n	8003638 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003568:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800356c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800356e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003572:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003574:	f107 0310 	add.w	r3, r7, #16
 8003578:	4618      	mov	r0, r3
 800357a:	f006 ff3d 	bl	800a3f8 <HAL_RCCEx_PeriphCLKConfig>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003584:	f000 fcf4 	bl	8003f70 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003588:	4b2e      	ldr	r3, [pc, #184]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 800358a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358c:	4a2d      	ldr	r2, [pc, #180]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 800358e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003594:	4b2b      	ldr	r3, [pc, #172]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 8003596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a0:	4b28      	ldr	r3, [pc, #160]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 80035a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a4:	4a27      	ldr	r2, [pc, #156]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035ac:	4b25      	ldr	r3, [pc, #148]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 80035ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = ASSERV_I1_Pin|ASSERV_I2_Pin;
 80035b8:	23c0      	movs	r3, #192	@ 0xc0
 80035ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035bc:	2303      	movs	r3, #3
 80035be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80035c8:	4619      	mov	r1, r3
 80035ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035ce:	f005 f96b 	bl	80088a8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel3;
 80035d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035d4:	4a1d      	ldr	r2, [pc, #116]	@ (800364c <HAL_ADC_MspInit+0x114>)
 80035d6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035da:	2224      	movs	r2, #36	@ 0x24
 80035dc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035de:	4b1a      	ldr	r3, [pc, #104]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e4:	4b18      	ldr	r3, [pc, #96]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80035ea:	4b17      	ldr	r3, [pc, #92]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035ec:	2280      	movs	r2, #128	@ 0x80
 80035ee:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035f0:	4b15      	ldr	r3, [pc, #84]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035f6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035f8:	4b13      	ldr	r3, [pc, #76]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035fe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003600:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 8003602:	2220      	movs	r2, #32
 8003604:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003606:	4b10      	ldr	r3, [pc, #64]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800360c:	480e      	ldr	r0, [pc, #56]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 800360e:	f004 fe19 	bl	8008244 <HAL_DMA_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003618:	f000 fcaa 	bl	8003f70 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0a      	ldr	r2, [pc, #40]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54
 8003622:	4a09      	ldr	r2, [pc, #36]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	2105      	movs	r1, #5
 800362c:	2012      	movs	r0, #18
 800362e:	f004 fc07 	bl	8007e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003632:	2012      	movs	r0, #18
 8003634:	f004 fc1e 	bl	8007e74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003638:	bf00      	nop
 800363a:	3768      	adds	r7, #104	@ 0x68
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	50000100 	.word	0x50000100
 8003644:	40021000 	.word	0x40021000
 8003648:	20000590 	.word	0x20000590
 800364c:	40020030 	.word	0x40020030

08003650 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0

}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0
return 0;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003670:	b5b0      	push	{r4, r5, r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 64);
 8003676:	4b09      	ldr	r3, [pc, #36]	@ (800369c <MX_FREERTOS_Init+0x2c>)
 8003678:	1d3c      	adds	r4, r7, #4
 800367a:	461d      	mov	r5, r3
 800367c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800367e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f00f f946 	bl	801291a <osThreadCreate>
 800368e:	4603      	mov	r3, r0
 8003690:	4a03      	ldr	r2, [pc, #12]	@ (80036a0 <MX_FREERTOS_Init+0x30>)
 8003692:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bdb0      	pop	{r4, r5, r7, pc}
 800369c:	0801b5d4 	.word	0x0801b5d4
 80036a0:	200005f0 	.word	0x200005f0

080036a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	for(;;)
  {
    osDelay(1);
 80036ac:	2001      	movs	r0, #1
 80036ae:	f00f f967 	bl	8012980 <osDelay>
 80036b2:	e7fb      	b.n	80036ac <StartDefaultTask+0x8>

080036b4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08c      	sub	sp, #48	@ 0x30
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80036ba:	463b      	mov	r3, r7
 80036bc:	2230      	movs	r2, #48	@ 0x30
 80036be:	2100      	movs	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f015 fa05 	bl	8018ad0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80036c6:	4b16      	ldr	r3, [pc, #88]	@ (8003720 <MX_DAC1_Init+0x6c>)
 80036c8:	4a16      	ldr	r2, [pc, #88]	@ (8003724 <MX_DAC1_Init+0x70>)
 80036ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80036cc:	4814      	ldr	r0, [pc, #80]	@ (8003720 <MX_DAC1_Init+0x6c>)
 80036ce:	f004 fbdf 	bl	8007e90 <HAL_DAC_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80036d8:	f000 fc4a 	bl	8003f70 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80036dc:	2302      	movs	r3, #2
 80036de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80036ec:	231e      	movs	r3, #30
 80036ee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80036f8:	2301      	movs	r3, #1
 80036fa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003700:	463b      	mov	r3, r7
 8003702:	2200      	movs	r2, #0
 8003704:	4619      	mov	r1, r3
 8003706:	4806      	ldr	r0, [pc, #24]	@ (8003720 <MX_DAC1_Init+0x6c>)
 8003708:	f004 fbe4 	bl	8007ed4 <HAL_DAC_ConfigChannel>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8003712:	f000 fc2d 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003716:	bf00      	nop
 8003718:	3730      	adds	r7, #48	@ 0x30
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	200005f4 	.word	0x200005f4
 8003724:	50000800 	.word	0x50000800

08003728 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	@ 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2b      	ldr	r2, [pc, #172]	@ (80037f4 <HAL_DAC_MspInit+0xcc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d14f      	bne.n	80037ea <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800374a:	4b2b      	ldr	r3, [pc, #172]	@ (80037f8 <HAL_DAC_MspInit+0xd0>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	4a2a      	ldr	r2, [pc, #168]	@ (80037f8 <HAL_DAC_MspInit+0xd0>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003756:	4b28      	ldr	r3, [pc, #160]	@ (80037f8 <HAL_DAC_MspInit+0xd0>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003762:	4b25      	ldr	r3, [pc, #148]	@ (80037f8 <HAL_DAC_MspInit+0xd0>)
 8003764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003766:	4a24      	ldr	r2, [pc, #144]	@ (80037f8 <HAL_DAC_MspInit+0xd0>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800376e:	4b22      	ldr	r3, [pc, #136]	@ (80037f8 <HAL_DAC_MspInit+0xd0>)
 8003770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC__Pin;
 800377a:	2310      	movs	r3, #16
 800377c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800377e:	2303      	movs	r3, #3
 8003780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC__GPIO_Port, &GPIO_InitStruct);
 8003786:	f107 0314 	add.w	r3, r7, #20
 800378a:	4619      	mov	r1, r3
 800378c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003790:	f005 f88a 	bl	80088a8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel5;
 8003794:	4b19      	ldr	r3, [pc, #100]	@ (80037fc <HAL_DAC_MspInit+0xd4>)
 8003796:	4a1a      	ldr	r2, [pc, #104]	@ (8003800 <HAL_DAC_MspInit+0xd8>)
 8003798:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800379a:	4b18      	ldr	r3, [pc, #96]	@ (80037fc <HAL_DAC_MspInit+0xd4>)
 800379c:	2206      	movs	r2, #6
 800379e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037a0:	4b16      	ldr	r3, [pc, #88]	@ (80037fc <HAL_DAC_MspInit+0xd4>)
 80037a2:	2210      	movs	r2, #16
 80037a4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a6:	4b15      	ldr	r3, [pc, #84]	@ (80037fc <HAL_DAC_MspInit+0xd4>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80037ac:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <HAL_DAC_MspInit+0xd4>)
 80037ae:	2280      	movs	r2, #128	@ 0x80
 80037b0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037b2:	4b12      	ldr	r3, [pc, #72]	@ (80037fc <HAL_DAC_MspInit+0xd4>)
 80037b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037b8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037ba:	4b10      	ldr	r3, [pc, #64]	@ (80037fc <HAL_DAC_MspInit+0xd4>)
 80037bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037c0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 80037c2:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <HAL_DAC_MspInit+0xd4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80037c8:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <HAL_DAC_MspInit+0xd4>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80037ce:	480b      	ldr	r0, [pc, #44]	@ (80037fc <HAL_DAC_MspInit+0xd4>)
 80037d0:	f004 fd38 	bl	8008244 <HAL_DMA_Init>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80037da:	f000 fbc9 	bl	8003f70 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a06      	ldr	r2, [pc, #24]	@ (80037fc <HAL_DAC_MspInit+0xd4>)
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	4a05      	ldr	r2, [pc, #20]	@ (80037fc <HAL_DAC_MspInit+0xd4>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80037ea:	bf00      	nop
 80037ec:	3728      	adds	r7, #40	@ 0x28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	50000800 	.word	0x50000800
 80037f8:	40021000 	.word	0x40021000
 80037fc:	20000608 	.word	0x20000608
 8003800:	40020058 	.word	0x40020058

08003804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003808:	4b04      	ldr	r3, [pc, #16]	@ (800381c <__NVIC_GetPriorityGrouping+0x18>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	f003 0307 	and.w	r3, r3, #7
}
 8003812:	4618      	mov	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	2b00      	cmp	r3, #0
 8003830:	db0b      	blt.n	800384a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	4907      	ldr	r1, [pc, #28]	@ (8003858 <__NVIC_EnableIRQ+0x38>)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2001      	movs	r0, #1
 8003842:	fa00 f202 	lsl.w	r2, r0, r2
 8003846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	e000e100 	.word	0xe000e100

0800385c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	6039      	str	r1, [r7, #0]
 8003866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386c:	2b00      	cmp	r3, #0
 800386e:	db0a      	blt.n	8003886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	490c      	ldr	r1, [pc, #48]	@ (80038a8 <__NVIC_SetPriority+0x4c>)
 8003876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387a:	0112      	lsls	r2, r2, #4
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	440b      	add	r3, r1
 8003880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003884:	e00a      	b.n	800389c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	b2da      	uxtb	r2, r3
 800388a:	4908      	ldr	r1, [pc, #32]	@ (80038ac <__NVIC_SetPriority+0x50>)
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	3b04      	subs	r3, #4
 8003894:	0112      	lsls	r2, r2, #4
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	440b      	add	r3, r1
 800389a:	761a      	strb	r2, [r3, #24]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	e000e100 	.word	0xe000e100
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b089      	sub	sp, #36	@ 0x24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f1c3 0307 	rsb	r3, r3, #7
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	bf28      	it	cs
 80038ce:	2304      	movcs	r3, #4
 80038d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	3304      	adds	r3, #4
 80038d6:	2b06      	cmp	r3, #6
 80038d8:	d902      	bls.n	80038e0 <NVIC_EncodePriority+0x30>
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3b03      	subs	r3, #3
 80038de:	e000      	b.n	80038e2 <NVIC_EncodePriority+0x32>
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43da      	mvns	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	401a      	ands	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003902:	43d9      	mvns	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003908:	4313      	orrs	r3, r2
         );
}
 800390a:	4618      	mov	r0, r3
 800390c:	3724      	adds	r7, #36	@ 0x24
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800391e:	4b2a      	ldr	r3, [pc, #168]	@ (80039c8 <MX_DMA_Init+0xb0>)
 8003920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003922:	4a29      	ldr	r2, [pc, #164]	@ (80039c8 <MX_DMA_Init+0xb0>)
 8003924:	f043 0304 	orr.w	r3, r3, #4
 8003928:	6493      	str	r3, [r2, #72]	@ 0x48
 800392a:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <MX_DMA_Init+0xb0>)
 800392c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003936:	4b24      	ldr	r3, [pc, #144]	@ (80039c8 <MX_DMA_Init+0xb0>)
 8003938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800393a:	4a23      	ldr	r2, [pc, #140]	@ (80039c8 <MX_DMA_Init+0xb0>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6493      	str	r3, [r2, #72]	@ 0x48
 8003942:	4b21      	ldr	r3, [pc, #132]	@ (80039c8 <MX_DMA_Init+0xb0>)
 8003944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800394e:	f7ff ff59 	bl	8003804 <__NVIC_GetPriorityGrouping>
 8003952:	4603      	mov	r3, r0
 8003954:	2200      	movs	r2, #0
 8003956:	2105      	movs	r1, #5
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ffa9 	bl	80038b0 <NVIC_EncodePriority>
 800395e:	4603      	mov	r3, r0
 8003960:	4619      	mov	r1, r3
 8003962:	200b      	movs	r0, #11
 8003964:	f7ff ff7a 	bl	800385c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003968:	200b      	movs	r0, #11
 800396a:	f7ff ff59 	bl	8003820 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800396e:	f7ff ff49 	bl	8003804 <__NVIC_GetPriorityGrouping>
 8003972:	4603      	mov	r3, r0
 8003974:	2200      	movs	r2, #0
 8003976:	2105      	movs	r1, #5
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff99 	bl	80038b0 <NVIC_EncodePriority>
 800397e:	4603      	mov	r3, r0
 8003980:	4619      	mov	r1, r3
 8003982:	200c      	movs	r0, #12
 8003984:	f7ff ff6a 	bl	800385c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003988:	200c      	movs	r0, #12
 800398a:	f7ff ff49 	bl	8003820 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800398e:	2200      	movs	r2, #0
 8003990:	2105      	movs	r1, #5
 8003992:	200d      	movs	r0, #13
 8003994:	f004 fa54 	bl	8007e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003998:	200d      	movs	r0, #13
 800399a:	f004 fa6b 	bl	8007e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800399e:	2200      	movs	r2, #0
 80039a0:	2105      	movs	r1, #5
 80039a2:	200e      	movs	r0, #14
 80039a4:	f004 fa4c 	bl	8007e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80039a8:	200e      	movs	r0, #14
 80039aa:	f004 fa63 	bl	8007e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80039ae:	2200      	movs	r2, #0
 80039b0:	2105      	movs	r1, #5
 80039b2:	200f      	movs	r0, #15
 80039b4:	f004 fa44 	bl	8007e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80039b8:	200f      	movs	r0, #15
 80039ba:	f004 fa5b 	bl	8007e74 <HAL_NVIC_EnableIRQ>

}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000

080039cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	@ 0x28
 80039d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d2:	f107 0314 	add.w	r3, r7, #20
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	609a      	str	r2, [r3, #8]
 80039de:	60da      	str	r2, [r3, #12]
 80039e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039e2:	4b30      	ldr	r3, [pc, #192]	@ (8003aa4 <MX_GPIO_Init+0xd8>)
 80039e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e6:	4a2f      	ldr	r2, [pc, #188]	@ (8003aa4 <MX_GPIO_Init+0xd8>)
 80039e8:	f043 0320 	orr.w	r3, r3, #32
 80039ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ee:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa4 <MX_GPIO_Init+0xd8>)
 80039f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fa:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa4 <MX_GPIO_Init+0xd8>)
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	4a29      	ldr	r2, [pc, #164]	@ (8003aa4 <MX_GPIO_Init+0xd8>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a06:	4b27      	ldr	r3, [pc, #156]	@ (8003aa4 <MX_GPIO_Init+0xd8>)
 8003a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a12:	4b24      	ldr	r3, [pc, #144]	@ (8003aa4 <MX_GPIO_Init+0xd8>)
 8003a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a16:	4a23      	ldr	r2, [pc, #140]	@ (8003aa4 <MX_GPIO_Init+0xd8>)
 8003a18:	f043 0304 	orr.w	r3, r3, #4
 8003a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a1e:	4b21      	ldr	r3, [pc, #132]	@ (8003aa4 <MX_GPIO_Init+0xd8>)
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa4 <MX_GPIO_Init+0xd8>)
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa4 <MX_GPIO_Init+0xd8>)
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a36:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa4 <MX_GPIO_Init+0xd8>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	607b      	str	r3, [r7, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIDAR_M_CTR_GPIO_Port, LIDAR_M_CTR_Pin, GPIO_PIN_SET);
 8003a42:	2201      	movs	r2, #1
 8003a44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003a48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a4c:	f005 f8ae 	bl	8008bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOUSTACHE_4_Pin|MOUSTACHE_3_Pin;
 8003a50:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a56:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	4619      	mov	r1, r3
 8003a66:	4810      	ldr	r0, [pc, #64]	@ (8003aa8 <MX_GPIO_Init+0xdc>)
 8003a68:	f004 ff1e 	bl	80088a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIDAR_M_CTR_Pin;
 8003a6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIDAR_M_CTR_GPIO_Port, &GPIO_InitStruct);
 8003a7e:	f107 0314 	add.w	r3, r7, #20
 8003a82:	4619      	mov	r1, r3
 8003a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a88:	f004 ff0e 	bl	80088a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2105      	movs	r1, #5
 8003a90:	2028      	movs	r0, #40	@ 0x28
 8003a92:	f004 f9d5 	bl	8007e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a96:	2028      	movs	r0, #40	@ 0x28
 8003a98:	f004 f9ec 	bl	8007e74 <HAL_NVIC_EnableIRQ>

}
 8003a9c:	bf00      	nop
 8003a9e:	3728      	adds	r7, #40	@ 0x28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	48000400 	.word	0x48000400

08003aac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b20 <MX_I2C1_Init+0x74>)
 8003ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b24 <MX_I2C1_Init+0x78>)
 8003ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8003ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b20 <MX_I2C1_Init+0x74>)
 8003ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b28 <MX_I2C1_Init+0x7c>)
 8003aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003abc:	4b18      	ldr	r3, [pc, #96]	@ (8003b20 <MX_I2C1_Init+0x74>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ac2:	4b17      	ldr	r3, [pc, #92]	@ (8003b20 <MX_I2C1_Init+0x74>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ac8:	4b15      	ldr	r3, [pc, #84]	@ (8003b20 <MX_I2C1_Init+0x74>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003ace:	4b14      	ldr	r3, [pc, #80]	@ (8003b20 <MX_I2C1_Init+0x74>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ad4:	4b12      	ldr	r3, [pc, #72]	@ (8003b20 <MX_I2C1_Init+0x74>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ada:	4b11      	ldr	r3, [pc, #68]	@ (8003b20 <MX_I2C1_Init+0x74>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b20 <MX_I2C1_Init+0x74>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ae6:	480e      	ldr	r0, [pc, #56]	@ (8003b20 <MX_I2C1_Init+0x74>)
 8003ae8:	f005 f89b 	bl	8008c22 <HAL_I2C_Init>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003af2:	f000 fa3d 	bl	8003f70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003af6:	2100      	movs	r1, #0
 8003af8:	4809      	ldr	r0, [pc, #36]	@ (8003b20 <MX_I2C1_Init+0x74>)
 8003afa:	f005 fde1 	bl	80096c0 <HAL_I2CEx_ConfigAnalogFilter>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003b04:	f000 fa34 	bl	8003f70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4805      	ldr	r0, [pc, #20]	@ (8003b20 <MX_I2C1_Init+0x74>)
 8003b0c:	f005 fe23 	bl	8009756 <HAL_I2CEx_ConfigDigitalFilter>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003b16:	f000 fa2b 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000668 	.word	0x20000668
 8003b24:	40005400 	.word	0x40005400
 8003b28:	00503d58 	.word	0x00503d58

08003b2c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba0 <MX_I2C3_Init+0x74>)
 8003b32:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba4 <MX_I2C3_Init+0x78>)
 8003b34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8003b36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba0 <MX_I2C3_Init+0x74>)
 8003b38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba8 <MX_I2C3_Init+0x7c>)
 8003b3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003b3c:	4b18      	ldr	r3, [pc, #96]	@ (8003ba0 <MX_I2C3_Init+0x74>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b42:	4b17      	ldr	r3, [pc, #92]	@ (8003ba0 <MX_I2C3_Init+0x74>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b48:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <MX_I2C3_Init+0x74>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003b4e:	4b14      	ldr	r3, [pc, #80]	@ (8003ba0 <MX_I2C3_Init+0x74>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b54:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <MX_I2C3_Init+0x74>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ba0 <MX_I2C3_Init+0x74>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba0 <MX_I2C3_Init+0x74>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b66:	480e      	ldr	r0, [pc, #56]	@ (8003ba0 <MX_I2C3_Init+0x74>)
 8003b68:	f005 f85b 	bl	8008c22 <HAL_I2C_Init>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003b72:	f000 f9fd 	bl	8003f70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b76:	2100      	movs	r1, #0
 8003b78:	4809      	ldr	r0, [pc, #36]	@ (8003ba0 <MX_I2C3_Init+0x74>)
 8003b7a:	f005 fda1 	bl	80096c0 <HAL_I2CEx_ConfigAnalogFilter>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003b84:	f000 f9f4 	bl	8003f70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4805      	ldr	r0, [pc, #20]	@ (8003ba0 <MX_I2C3_Init+0x74>)
 8003b8c:	f005 fde3 	bl	8009756 <HAL_I2CEx_ConfigDigitalFilter>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003b96:	f000 f9eb 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200006bc 	.word	0x200006bc
 8003ba4:	40007800 	.word	0x40007800
 8003ba8:	00503d58 	.word	0x00503d58

08003bac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b09e      	sub	sp, #120	@ 0x78
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bc4:	f107 0320 	add.w	r3, r7, #32
 8003bc8:	2244      	movs	r2, #68	@ 0x44
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f014 ff7f 	bl	8018ad0 <memset>
  if(i2cHandle->Instance==I2C1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a5c      	ldr	r2, [pc, #368]	@ (8003d48 <HAL_I2C_MspInit+0x19c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d155      	bne.n	8003c88 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003bdc:	2340      	movs	r3, #64	@ 0x40
 8003bde:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003be0:	2300      	movs	r3, #0
 8003be2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003be4:	f107 0320 	add.w	r3, r7, #32
 8003be8:	4618      	mov	r0, r3
 8003bea:	f006 fc05 	bl	800a3f8 <HAL_RCCEx_PeriphCLKConfig>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003bf4:	f000 f9bc 	bl	8003f70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf8:	4b54      	ldr	r3, [pc, #336]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfc:	4a53      	ldr	r2, [pc, #332]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c04:	4b51      	ldr	r3, [pc, #324]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c10:	4b4e      	ldr	r3, [pc, #312]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c14:	4a4d      	ldr	r2, [pc, #308]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003c16:	f043 0302 	orr.w	r3, r3, #2
 8003c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin;
 8003c28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c2c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c2e:	2312      	movs	r3, #18
 8003c30:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c36:	2300      	movs	r3, #0
 8003c38:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 8003c3e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003c42:	4619      	mov	r1, r3
 8003c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c48:	f004 fe2e 	bl	80088a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C_IMU_SDA_Pin;
 8003c4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c50:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c52:	2312      	movs	r3, #18
 8003c54:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c5e:	2304      	movs	r3, #4
 8003c60:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8003c62:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003c66:	4619      	mov	r1, r3
 8003c68:	4839      	ldr	r0, [pc, #228]	@ (8003d50 <HAL_I2C_MspInit+0x1a4>)
 8003c6a:	f004 fe1d 	bl	80088a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c6e:	4b37      	ldr	r3, [pc, #220]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c72:	4a36      	ldr	r2, [pc, #216]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003c74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c7a:	4b34      	ldr	r3, [pc, #208]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003c86:	e05a      	b.n	8003d3e <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a31      	ldr	r2, [pc, #196]	@ (8003d54 <HAL_I2C_MspInit+0x1a8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d155      	bne.n	8003d3e <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003c92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c9c:	f107 0320 	add.w	r3, r7, #32
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f006 fba9 	bl	800a3f8 <HAL_RCCEx_PeriphCLKConfig>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8003cac:	f000 f960 	bl	8003f70 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb0:	4b26      	ldr	r3, [pc, #152]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb4:	4a25      	ldr	r2, [pc, #148]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cbc:	4b23      	ldr	r3, [pc, #140]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cc8:	4b20      	ldr	r3, [pc, #128]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003cce:	f043 0304 	orr.w	r3, r3, #4
 8003cd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_MAIN_SCL_Pin;
 8003ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ce4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ce6:	2312      	movs	r3, #18
 8003ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_MAIN_SCL_GPIO_Port, &GPIO_InitStruct);
 8003cf6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d00:	f004 fdd2 	bl	80088a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C_MAIN_SDA_Pin;
 8003d04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d08:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d0a:	2312      	movs	r3, #18
 8003d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d12:	2300      	movs	r3, #0
 8003d14:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8003d16:	2308      	movs	r3, #8
 8003d18:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_MAIN_SDA_GPIO_Port, &GPIO_InitStruct);
 8003d1a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003d1e:	4619      	mov	r1, r3
 8003d20:	480d      	ldr	r0, [pc, #52]	@ (8003d58 <HAL_I2C_MspInit+0x1ac>)
 8003d22:	f004 fdc1 	bl	80088a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003d26:	4b09      	ldr	r3, [pc, #36]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2a:	4a08      	ldr	r2, [pc, #32]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003d2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d32:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <HAL_I2C_MspInit+0x1a0>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d36:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
}
 8003d3e:	bf00      	nop
 8003d40:	3778      	adds	r7, #120	@ 0x78
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40005400 	.word	0x40005400
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	48000400 	.word	0x48000400
 8003d54:	40007800 	.word	0x40007800
 8003d58:	48000800 	.word	0x48000800

08003d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d62:	f002 f916 	bl	8005f92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d66:	f000 f8af 	bl	8003ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d6a:	f7ff fe2f 	bl	80039cc <MX_GPIO_Init>
  MX_DMA_Init();
 8003d6e:	f7ff fdd3 	bl	8003918 <MX_DMA_Init>
  MX_ADC2_Init();
 8003d72:	f7ff fb69 	bl	8003448 <MX_ADC2_Init>
  MX_DAC1_Init();
 8003d76:	f7ff fc9d 	bl	80036b4 <MX_DAC1_Init>
  MX_I2C1_Init();
 8003d7a:	f7ff fe97 	bl	8003aac <MX_I2C1_Init>
  MX_I2C3_Init();
 8003d7e:	f7ff fed5 	bl	8003b2c <MX_I2C3_Init>
  MX_TIM2_Init();
 8003d82:	f000 fb47 	bl	8004414 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003d86:	f000 fbc7 	bl	8004518 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003d8a:	f000 fc2b 	bl	80045e4 <MX_TIM4_Init>
  MX_UCPD1_Init();
 8003d8e:	f001 f80d 	bl	8004dac <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8003d92:	f001 f89b 	bl	8004ecc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003d96:	f001 f8e9 	bl	8004f6c <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8003d9a:	f000 fca9 	bl	80046f0 <MX_TIM15_Init>
  MX_TIM16_Init();
 8003d9e:	f000 fcf9 	bl	8004794 <MX_TIM16_Init>
  MX_TIM6_Init();
 8003da2:	f000 fc6d 	bl	8004680 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	semb_cpltCllbck = xSemaphoreCreateBinary();
 8003da6:	2203      	movs	r2, #3
 8003da8:	2100      	movs	r1, #0
 8003daa:	2001      	movs	r0, #1
 8003dac:	f00e ffe0 	bl	8012d70 <xQueueGenericCreate>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4a36      	ldr	r2, [pc, #216]	@ (8003e8c <main+0x130>)
 8003db4:	6013      	str	r3, [r2, #0]
	semb_halfCllbck = xSemaphoreCreateBinary();
 8003db6:	2203      	movs	r2, #3
 8003db8:	2100      	movs	r1, #0
 8003dba:	2001      	movs	r0, #1
 8003dbc:	f00e ffd8 	bl	8012d70 <xQueueGenericCreate>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4a33      	ldr	r2, [pc, #204]	@ (8003e90 <main+0x134>)
 8003dc4:	6013      	str	r3, [r2, #0]

	asserv_init();
 8003dc6:	f012 f823 	bl	8015e10 <asserv_init>
	shell_init();
 8003dca:	f012 f9e3 	bl	8016194 <shell_init>
	lidar_init();
 8003dce:	f00c f8bf 	bl	800ff50 <lidar_init>
	changement_mode_init();
 8003dd2:	f012 f993 	bl	80160fc <changement_mode_init>

	vPortGetHeapStats(&heapStats);
 8003dd6:	482f      	ldr	r0, [pc, #188]	@ (8003e94 <main+0x138>)
 8003dd8:	f011 fc16 	bl	8015608 <vPortGetHeapStats>
	xTaskCreate(changeMode_run,			"Changement MODE", TASK_STACK_DEPTH_CHANGEMODE, NULL, TASK_PRIORITY_CHANGEMODE, &h_task_changemenMode) != pdPASS ? Error_Handler():(void)0;
 8003ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8003e98 <main+0x13c>)
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	2301      	movs	r3, #1
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	2300      	movs	r3, #0
 8003de6:	2240      	movs	r2, #64	@ 0x40
 8003de8:	492c      	ldr	r1, [pc, #176]	@ (8003e9c <main+0x140>)
 8003dea:	482d      	ldr	r0, [pc, #180]	@ (8003ea0 <main+0x144>)
 8003dec:	f00f fde6 	bl	80139bc <xTaskCreate>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d001      	beq.n	8003dfa <main+0x9e>
 8003df6:	f000 f8bb 	bl	8003f70 <Error_Handler>
	vPortGetHeapStats(&heapStats);
 8003dfa:	4826      	ldr	r0, [pc, #152]	@ (8003e94 <main+0x138>)
 8003dfc:	f011 fc04 	bl	8015608 <vPortGetHeapStats>
	//xTaskCreate(asserv_courant_run, 	"Asserv Courant", TASK_STACK_DEPTH_ASSERV_I, NULL, TASK_PRIORITY_ASSERV_I, &h_task_asserv_I) != pdPASS ? Error_Handler():(void)0;
	//vPortGetHeapStats(&heapStats);
	//xTaskCreate(asserv_position_run, 	"Asserv Position", TASK_STACK_DEPTH_ASSERV_XYZ, NULL, TASK_PRIORITY_ASSERV_XYZ, &h_task_asserv_XYZ) != pdPASS ? Error_Handler():(void)0;
	vPortGetHeapStats(&heapStats);
 8003e00:	4824      	ldr	r0, [pc, #144]	@ (8003e94 <main+0x138>)
 8003e02:	f011 fc01 	bl	8015608 <vPortGetHeapStats>
	xTaskCreate(shell_run,				"Shell", TASK_STACK_DEPTH_SHELL, NULL, TASK_PRIORITY_SHELL, &h_task_shell) != pdPASS ? Error_Handler():(void)0;
 8003e06:	4b27      	ldr	r3, [pc, #156]	@ (8003ea4 <main+0x148>)
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	2305      	movs	r3, #5
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e14:	4924      	ldr	r1, [pc, #144]	@ (8003ea8 <main+0x14c>)
 8003e16:	4825      	ldr	r0, [pc, #148]	@ (8003eac <main+0x150>)
 8003e18:	f00f fdd0 	bl	80139bc <xTaskCreate>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d001      	beq.n	8003e26 <main+0xca>
 8003e22:	f000 f8a5 	bl	8003f70 <Error_Handler>
	vPortGetHeapStats(&heapStats);
 8003e26:	481b      	ldr	r0, [pc, #108]	@ (8003e94 <main+0x138>)
 8003e28:	f011 fbee 	bl	8015608 <vPortGetHeapStats>
	xTaskCreate(lidarTake,				"LIDAR_Take", TASK_STACK_DEPTH_LIDAR, NULL, TASK_PRIORITY_LIDAR, &h_task_LIDAR_Take) != pdPASS ? Error_Handler():(void)0;
 8003e2c:	4b20      	ldr	r3, [pc, #128]	@ (8003eb0 <main+0x154>)
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	2304      	movs	r3, #4
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	2300      	movs	r3, #0
 8003e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e3a:	491e      	ldr	r1, [pc, #120]	@ (8003eb4 <main+0x158>)
 8003e3c:	481e      	ldr	r0, [pc, #120]	@ (8003eb8 <main+0x15c>)
 8003e3e:	f00f fdbd 	bl	80139bc <xTaskCreate>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d001      	beq.n	8003e4c <main+0xf0>
 8003e48:	f000 f892 	bl	8003f70 <Error_Handler>
	vPortGetHeapStats(&heapStats);
 8003e4c:	4811      	ldr	r0, [pc, #68]	@ (8003e94 <main+0x138>)
 8003e4e:	f011 fbdb 	bl	8015608 <vPortGetHeapStats>
	xTaskCreate(lidarprocess,			"LIDAR_Process", TASK_STACK_DEPTH_LIDAR, NULL, TASK_PRIORITY_LIDAR, &h_task_LIDAR_Process) != pdPASS ? Error_Handler():(void)0;
 8003e52:	4b1a      	ldr	r3, [pc, #104]	@ (8003ebc <main+0x160>)
 8003e54:	9301      	str	r3, [sp, #4]
 8003e56:	2304      	movs	r3, #4
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e60:	4917      	ldr	r1, [pc, #92]	@ (8003ec0 <main+0x164>)
 8003e62:	4818      	ldr	r0, [pc, #96]	@ (8003ec4 <main+0x168>)
 8003e64:	f00f fdaa 	bl	80139bc <xTaskCreate>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d001      	beq.n	8003e72 <main+0x116>
 8003e6e:	f000 f87f 	bl	8003f70 <Error_Handler>
	vPortGetHeapStats(&heapStats);
 8003e72:	4808      	ldr	r0, [pc, #32]	@ (8003e94 <main+0x138>)
 8003e74:	f011 fbc8 	bl	8015608 <vPortGetHeapStats>

	vTaskStartScheduler();
 8003e78:	f010 f828 	bl	8013ecc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8003e7c:	f011 fc22 	bl	80156c4 <MX_USBPD_Init>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003e80:	f7ff fbf6 	bl	8003670 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003e84:	f00e fd42 	bl	801290c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8003e88:	bf00      	nop
 8003e8a:	e7fd      	b.n	8003e88 <main+0x12c>
 8003e8c:	20000748 	.word	0x20000748
 8003e90:	20000744 	.word	0x20000744
 8003e94:	20000710 	.word	0x20000710
 8003e98:	20000738 	.word	0x20000738
 8003e9c:	0801b5e8 	.word	0x0801b5e8
 8003ea0:	0801610d 	.word	0x0801610d
 8003ea4:	2000072c 	.word	0x2000072c
 8003ea8:	0801b5f8 	.word	0x0801b5f8
 8003eac:	08016231 	.word	0x08016231
 8003eb0:	2000073c 	.word	0x2000073c
 8003eb4:	0801b600 	.word	0x0801b600
 8003eb8:	0800ffa9 	.word	0x0800ffa9
 8003ebc:	20000740 	.word	0x20000740
 8003ec0:	0801b60c 	.word	0x0801b60c
 8003ec4:	08010021 	.word	0x08010021

08003ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b094      	sub	sp, #80	@ 0x50
 8003ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ece:	f107 0318 	add.w	r3, r7, #24
 8003ed2:	2238      	movs	r2, #56	@ 0x38
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f014 fdfa 	bl	8018ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003edc:	1d3b      	adds	r3, r7, #4
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	60da      	str	r2, [r3, #12]
 8003ee8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003eee:	f005 fc7f 	bl	80097f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ef6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003efc:	2340      	movs	r3, #64	@ 0x40
 8003efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003f00:	2300      	movs	r3, #0
 8003f02:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f04:	f107 0318 	add.w	r3, r7, #24
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f005 fd15 	bl	8009938 <HAL_RCC_OscConfig>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003f14:	f000 f82c 	bl	8003f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f18:	230f      	movs	r3, #15
 8003f1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f2c:	1d3b      	adds	r3, r7, #4
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f006 f813 	bl	8009f5c <HAL_RCC_ClockConfig>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003f3c:	f000 f818 	bl	8003f70 <Error_Handler>
  }
}
 8003f40:	bf00      	nop
 8003f42:	3750      	adds	r7, #80	@ 0x50
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	CUSTOM_TIM_PeriodElapsedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f011 ff65 	bl	8015e20 <CUSTOM_TIM_PeriodElapsedCallback>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a04      	ldr	r2, [pc, #16]	@ (8003f6c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d101      	bne.n	8003f64 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 8003f60:	f002 f830 	bl	8005fc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40014800 	.word	0x40014800

08003f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f74:	b672      	cpsid	i
}
 8003f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003f78:	bf00      	nop
 8003f7a:	e7fd      	b.n	8003f78 <Error_Handler+0x8>

08003f7c <__io_putchar>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003f84:	1d39      	adds	r1, r7, #4
 8003f86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	4803      	ldr	r0, [pc, #12]	@ (8003f9c <__io_putchar+0x20>)
 8003f8e:	f008 faa3 	bl	800c4d8 <HAL_UART_Transmit>
	return ch;
 8003f92:	687b      	ldr	r3, [r7, #4]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000ce4 	.word	0x20000ce4

08003fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa6:	4b11      	ldr	r3, [pc, #68]	@ (8003fec <HAL_MspInit+0x4c>)
 8003fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003faa:	4a10      	ldr	r2, [pc, #64]	@ (8003fec <HAL_MspInit+0x4c>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003fec <HAL_MspInit+0x4c>)
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <HAL_MspInit+0x4c>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003fec <HAL_MspInit+0x4c>)
 8003fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fca:	4b08      	ldr	r3, [pc, #32]	@ (8003fec <HAL_MspInit+0x4c>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	210f      	movs	r1, #15
 8003fda:	f06f 0001 	mvn.w	r0, #1
 8003fde:	f003 ff2f 	bl	8007e40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40021000 	.word	0x40021000

08003ff0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	@ 0x30
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8004000:	4b2f      	ldr	r3, [pc, #188]	@ (80040c0 <HAL_InitTick+0xd0>)
 8004002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004004:	4a2e      	ldr	r2, [pc, #184]	@ (80040c0 <HAL_InitTick+0xd0>)
 8004006:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800400a:	6613      	str	r3, [r2, #96]	@ 0x60
 800400c:	4b2c      	ldr	r3, [pc, #176]	@ (80040c0 <HAL_InitTick+0xd0>)
 800400e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004010:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004018:	f107 020c 	add.w	r2, r7, #12
 800401c:	f107 0310 	add.w	r3, r7, #16
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f006 f970 	bl	800a308 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004028:	f006 f958 	bl	800a2dc <HAL_RCC_GetPCLK2Freq>
 800402c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	4a24      	ldr	r2, [pc, #144]	@ (80040c4 <HAL_InitTick+0xd4>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	0c9b      	lsrs	r3, r3, #18
 8004038:	3b01      	subs	r3, #1
 800403a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800403c:	4b22      	ldr	r3, [pc, #136]	@ (80040c8 <HAL_InitTick+0xd8>)
 800403e:	4a23      	ldr	r2, [pc, #140]	@ (80040cc <HAL_InitTick+0xdc>)
 8004040:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8004042:	4b21      	ldr	r3, [pc, #132]	@ (80040c8 <HAL_InitTick+0xd8>)
 8004044:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004048:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800404a:	4a1f      	ldr	r2, [pc, #124]	@ (80040c8 <HAL_InitTick+0xd8>)
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8004050:	4b1d      	ldr	r3, [pc, #116]	@ (80040c8 <HAL_InitTick+0xd8>)
 8004052:	2200      	movs	r2, #0
 8004054:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004056:	4b1c      	ldr	r3, [pc, #112]	@ (80040c8 <HAL_InitTick+0xd8>)
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 800405c:	481a      	ldr	r0, [pc, #104]	@ (80040c8 <HAL_InitTick+0xd8>)
 800405e:	f006 fbbb 	bl	800a7d8 <HAL_TIM_Base_Init>
 8004062:	4603      	mov	r3, r0
 8004064:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8004068:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800406c:	2b00      	cmp	r3, #0
 800406e:	d11b      	bne.n	80040a8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8004070:	4815      	ldr	r0, [pc, #84]	@ (80040c8 <HAL_InitTick+0xd8>)
 8004072:	f006 fc9f 	bl	800a9b4 <HAL_TIM_Base_Start_IT>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800407c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004080:	2b00      	cmp	r3, #0
 8004082:	d111      	bne.n	80040a8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004084:	201a      	movs	r0, #26
 8004086:	f003 fef5 	bl	8007e74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b0f      	cmp	r3, #15
 800408e:	d808      	bhi.n	80040a2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8004090:	2200      	movs	r2, #0
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	201a      	movs	r0, #26
 8004096:	f003 fed3 	bl	8007e40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800409a:	4a0d      	ldr	r2, [pc, #52]	@ (80040d0 <HAL_InitTick+0xe0>)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	e002      	b.n	80040a8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  HAL_TIM_RegisterCallback(&htim17, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 80040a8:	4a0a      	ldr	r2, [pc, #40]	@ (80040d4 <HAL_InitTick+0xe4>)
 80040aa:	210e      	movs	r1, #14
 80040ac:	4806      	ldr	r0, [pc, #24]	@ (80040c8 <HAL_InitTick+0xd8>)
 80040ae:	f007 fac7 	bl	800b640 <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 80040b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3730      	adds	r7, #48	@ 0x30
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40021000 	.word	0x40021000
 80040c4:	431bde83 	.word	0x431bde83
 80040c8:	2000074c 	.word	0x2000074c
 80040cc:	40014800 	.word	0x40014800
 80040d0:	20000138 	.word	0x20000138
 80040d4:	080040d9 	.word	0x080040d9

080040d8 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 80040e0:	f001 ff70 	bl	8005fc4 <HAL_IncTick>
}
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80040f0:	bf00      	nop
 80040f2:	e7fd      	b.n	80040f0 <NMI_Handler+0x4>

080040f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040f8:	bf00      	nop
 80040fa:	e7fd      	b.n	80040f8 <HardFault_Handler+0x4>

080040fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004100:	bf00      	nop
 8004102:	e7fd      	b.n	8004100 <MemManage_Handler+0x4>

08004104 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004108:	bf00      	nop
 800410a:	e7fd      	b.n	8004108 <BusFault_Handler+0x4>

0800410c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004110:	bf00      	nop
 8004112:	e7fd      	b.n	8004110 <UsageFault_Handler+0x4>

08004114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004118:	bf00      	nop
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004144:	4802      	ldr	r0, [pc, #8]	@ (8004150 <DMA1_Channel3_IRQHandler+0x10>)
 8004146:	f004 fa60 	bl	800860a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000590 	.word	0x20000590

08004154 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004158:	4802      	ldr	r0, [pc, #8]	@ (8004164 <DMA1_Channel4_IRQHandler+0x10>)
 800415a:	f004 fa56 	bl	800860a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000e0c 	.word	0x20000e0c

08004168 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800416c:	4802      	ldr	r0, [pc, #8]	@ (8004178 <DMA1_Channel5_IRQHandler+0x10>)
 800416e:	f004 fa4c 	bl	800860a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000608 	.word	0x20000608

0800417c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8004180:	4802      	ldr	r0, [pc, #8]	@ (800418c <ADC1_2_IRQHandler+0x10>)
 8004182:	f002 fc87 	bl	8006a94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000524 	.word	0x20000524

08004190 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004194:	4802      	ldr	r0, [pc, #8]	@ (80041a0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8004196:	f006 fe71 	bl	800ae7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000b4c 	.word	0x20000b4c

080041a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80041a8:	4802      	ldr	r0, [pc, #8]	@ (80041b4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80041aa:	f006 fe67 	bl	800ae7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000c18 	.word	0x20000c18

080041b8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80041bc:	4802      	ldr	r0, [pc, #8]	@ (80041c8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80041be:	f006 fe5d 	bl	800ae7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	2000074c 	.word	0x2000074c

080041cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041d0:	4802      	ldr	r0, [pc, #8]	@ (80041dc <USART1_IRQHandler+0x10>)
 80041d2:	f008 fc83 	bl	800cadc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000ce4 	.word	0x20000ce4

080041e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041e4:	4802      	ldr	r0, [pc, #8]	@ (80041f0 <USART2_IRQHandler+0x10>)
 80041e6:	f008 fc79 	bl	800cadc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000d78 	.word	0x20000d78

080041f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if (__HAL_GPIO_EXTI_GET_IT(MOUSTACHE_4_Pin) != RESET)
 80041f8:	4b16      	ldr	r3, [pc, #88]	@ (8004254 <EXTI15_10_IRQHandler+0x60>)
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <EXTI15_10_IRQHandler+0x28>
	{
		LP5812_WriteRegister(0x045,0);
 8004204:	2100      	movs	r1, #0
 8004206:	2045      	movs	r0, #69	@ 0x45
 8004208:	f001 fc0e 	bl	8005a28 <LP5812_WriteRegister>
		LP5812_WriteRegister(0x046,0);
 800420c:	2100      	movs	r1, #0
 800420e:	2046      	movs	r0, #70	@ 0x46
 8004210:	f001 fc0a 	bl	8005a28 <LP5812_WriteRegister>
		LP5812_WriteRegister(0x047,124);
 8004214:	217c      	movs	r1, #124	@ 0x7c
 8004216:	2047      	movs	r0, #71	@ 0x47
 8004218:	f001 fc06 	bl	8005a28 <LP5812_WriteRegister>
//				1,
//				eSetBits,
//				&pxHigherPriorityTaskWoken);
//		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
	}
	if (__HAL_GPIO_EXTI_GET_IT(MOUSTACHE_3_Pin) != RESET)
 800421c:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <EXTI15_10_IRQHandler+0x60>)
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00b      	beq.n	8004240 <EXTI15_10_IRQHandler+0x4c>
	{
		LP5812_WriteRegister(0x045,124);
 8004228:	217c      	movs	r1, #124	@ 0x7c
 800422a:	2045      	movs	r0, #69	@ 0x45
 800422c:	f001 fbfc 	bl	8005a28 <LP5812_WriteRegister>
		LP5812_WriteRegister(0x046,0);
 8004230:	2100      	movs	r1, #0
 8004232:	2046      	movs	r0, #70	@ 0x46
 8004234:	f001 fbf8 	bl	8005a28 <LP5812_WriteRegister>
		LP5812_WriteRegister(0x047,0);
 8004238:	2100      	movs	r1, #0
 800423a:	2047      	movs	r0, #71	@ 0x47
 800423c:	f001 fbf4 	bl	8005a28 <LP5812_WriteRegister>
//				eSetBits,
//				&pxHigherPriorityTaskWoken);
//		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MOUSTACHE_4_Pin);
 8004240:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004244:	f004 fcca 	bl	8008bdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MOUSTACHE_3_Pin);
 8004248:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800424c:	f004 fcc6 	bl	8008bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004250:	bf00      	nop
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40010400 	.word	0x40010400

08004258 <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */

  /* USER CODE END UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 800425c:	f00c fd65 	bl	8010d2a <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}

08004264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return 1;
 8004268:	2301      	movs	r3, #1
}
 800426a:	4618      	mov	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <_kill>:

int _kill(int pid, int sig)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800427e:	f014 fc99 	bl	8018bb4 <__errno>
 8004282:	4603      	mov	r3, r0
 8004284:	2216      	movs	r2, #22
 8004286:	601a      	str	r2, [r3, #0]
  return -1;
 8004288:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_exit>:

void _exit (int status)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800429c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ffe7 	bl	8004274 <_kill>
  while (1) {}    /* Make sure we hang here */
 80042a6:	bf00      	nop
 80042a8:	e7fd      	b.n	80042a6 <_exit+0x12>

080042aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b086      	sub	sp, #24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e00a      	b.n	80042d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042bc:	f3af 8000 	nop.w
 80042c0:	4601      	mov	r1, r0
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	60ba      	str	r2, [r7, #8]
 80042c8:	b2ca      	uxtb	r2, r1
 80042ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3301      	adds	r3, #1
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	dbf0      	blt.n	80042bc <_read+0x12>
  }

  return len;
 80042da:	687b      	ldr	r3, [r7, #4]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	e009      	b.n	800430a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	60ba      	str	r2, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fe3c 	bl	8003f7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	3301      	adds	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	429a      	cmp	r2, r3
 8004310:	dbf1      	blt.n	80042f6 <_write+0x12>
  }
  return len;
 8004312:	687b      	ldr	r3, [r7, #4]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <_close>:

int _close(int file)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004324:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004344:	605a      	str	r2, [r3, #4]
  return 0;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <_isatty>:

int _isatty(int file)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800435c:	2301      	movs	r3, #1
}
 800435e:	4618      	mov	r0, r3
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800438c:	4a14      	ldr	r2, [pc, #80]	@ (80043e0 <_sbrk+0x5c>)
 800438e:	4b15      	ldr	r3, [pc, #84]	@ (80043e4 <_sbrk+0x60>)
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004398:	4b13      	ldr	r3, [pc, #76]	@ (80043e8 <_sbrk+0x64>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d102      	bne.n	80043a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043a0:	4b11      	ldr	r3, [pc, #68]	@ (80043e8 <_sbrk+0x64>)
 80043a2:	4a12      	ldr	r2, [pc, #72]	@ (80043ec <_sbrk+0x68>)
 80043a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043a6:	4b10      	ldr	r3, [pc, #64]	@ (80043e8 <_sbrk+0x64>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d207      	bcs.n	80043c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043b4:	f014 fbfe 	bl	8018bb4 <__errno>
 80043b8:	4603      	mov	r3, r0
 80043ba:	220c      	movs	r2, #12
 80043bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043c2:	e009      	b.n	80043d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043c4:	4b08      	ldr	r3, [pc, #32]	@ (80043e8 <_sbrk+0x64>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043ca:	4b07      	ldr	r3, [pc, #28]	@ (80043e8 <_sbrk+0x64>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4413      	add	r3, r2
 80043d2:	4a05      	ldr	r2, [pc, #20]	@ (80043e8 <_sbrk+0x64>)
 80043d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043d6:	68fb      	ldr	r3, [r7, #12]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20008000 	.word	0x20008000
 80043e4:	00000400 	.word	0x00000400
 80043e8:	20000818 	.word	0x20000818
 80043ec:	20007938 	.word	0x20007938

080043f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043f4:	4b06      	ldr	r3, [pc, #24]	@ (8004410 <SystemInit+0x20>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fa:	4a05      	ldr	r2, [pc, #20]	@ (8004410 <SystemInit+0x20>)
 80043fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	e000ed00 	.word	0xe000ed00

08004414 <MX_TIM2_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08e      	sub	sp, #56	@ 0x38
 8004418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800441a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	605a      	str	r2, [r3, #4]
 8004424:	609a      	str	r2, [r3, #8]
 8004426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004428:	f107 031c 	add.w	r3, r7, #28
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004434:	463b      	mov	r3, r7
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	605a      	str	r2, [r3, #4]
 800443c:	609a      	str	r2, [r3, #8]
 800443e:	60da      	str	r2, [r3, #12]
 8004440:	611a      	str	r2, [r3, #16]
 8004442:	615a      	str	r2, [r3, #20]
 8004444:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004446:	4b33      	ldr	r3, [pc, #204]	@ (8004514 <MX_TIM2_Init+0x100>)
 8004448:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800444c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800444e:	4b31      	ldr	r3, [pc, #196]	@ (8004514 <MX_TIM2_Init+0x100>)
 8004450:	2200      	movs	r2, #0
 8004452:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004454:	4b2f      	ldr	r3, [pc, #188]	@ (8004514 <MX_TIM2_Init+0x100>)
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 639;
 800445a:	4b2e      	ldr	r3, [pc, #184]	@ (8004514 <MX_TIM2_Init+0x100>)
 800445c:	f240 227f 	movw	r2, #639	@ 0x27f
 8004460:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004462:	4b2c      	ldr	r3, [pc, #176]	@ (8004514 <MX_TIM2_Init+0x100>)
 8004464:	2200      	movs	r2, #0
 8004466:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004468:	4b2a      	ldr	r3, [pc, #168]	@ (8004514 <MX_TIM2_Init+0x100>)
 800446a:	2200      	movs	r2, #0
 800446c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800446e:	4829      	ldr	r0, [pc, #164]	@ (8004514 <MX_TIM2_Init+0x100>)
 8004470:	f006 f9b2 	bl	800a7d8 <HAL_TIM_Base_Init>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800447a:	f7ff fd79 	bl	8003f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800447e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004482:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004484:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004488:	4619      	mov	r1, r3
 800448a:	4822      	ldr	r0, [pc, #136]	@ (8004514 <MX_TIM2_Init+0x100>)
 800448c:	f006 ff84 	bl	800b398 <HAL_TIM_ConfigClockSource>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004496:	f7ff fd6b 	bl	8003f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800449a:	481e      	ldr	r0, [pc, #120]	@ (8004514 <MX_TIM2_Init+0x100>)
 800449c:	f006 faf4 	bl	800aa88 <HAL_TIM_PWM_Init>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80044a6:	f7ff fd63 	bl	8003f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044b2:	f107 031c 	add.w	r3, r7, #28
 80044b6:	4619      	mov	r1, r3
 80044b8:	4816      	ldr	r0, [pc, #88]	@ (8004514 <MX_TIM2_Init+0x100>)
 80044ba:	f007 feeb 	bl	800c294 <HAL_TIMEx_MasterConfigSynchronization>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80044c4:	f7ff fd54 	bl	8003f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044c8:	2360      	movs	r3, #96	@ 0x60
 80044ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80044d8:	463b      	mov	r3, r7
 80044da:	2208      	movs	r2, #8
 80044dc:	4619      	mov	r1, r3
 80044de:	480d      	ldr	r0, [pc, #52]	@ (8004514 <MX_TIM2_Init+0x100>)
 80044e0:	f006 fe46 	bl	800b170 <HAL_TIM_PWM_ConfigChannel>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80044ea:	f7ff fd41 	bl	8003f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80044ee:	463b      	mov	r3, r7
 80044f0:	220c      	movs	r2, #12
 80044f2:	4619      	mov	r1, r3
 80044f4:	4807      	ldr	r0, [pc, #28]	@ (8004514 <MX_TIM2_Init+0x100>)
 80044f6:	f006 fe3b 	bl	800b170 <HAL_TIM_PWM_ConfigChannel>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8004500:	f7ff fd36 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004504:	4803      	ldr	r0, [pc, #12]	@ (8004514 <MX_TIM2_Init+0x100>)
 8004506:	f000 fa07 	bl	8004918 <HAL_TIM_MspPostInit>

}
 800450a:	bf00      	nop
 800450c:	3738      	adds	r7, #56	@ 0x38
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	2000081c 	.word	0x2000081c

08004518 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	@ 0x28
 800451c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800451e:	f107 031c 	add.w	r3, r7, #28
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800452a:	463b      	mov	r3, r7
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	611a      	str	r2, [r3, #16]
 8004538:	615a      	str	r2, [r3, #20]
 800453a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800453c:	4b27      	ldr	r3, [pc, #156]	@ (80045dc <MX_TIM3_Init+0xc4>)
 800453e:	4a28      	ldr	r2, [pc, #160]	@ (80045e0 <MX_TIM3_Init+0xc8>)
 8004540:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004542:	4b26      	ldr	r3, [pc, #152]	@ (80045dc <MX_TIM3_Init+0xc4>)
 8004544:	2200      	movs	r2, #0
 8004546:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004548:	4b24      	ldr	r3, [pc, #144]	@ (80045dc <MX_TIM3_Init+0xc4>)
 800454a:	2200      	movs	r2, #0
 800454c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 639;
 800454e:	4b23      	ldr	r3, [pc, #140]	@ (80045dc <MX_TIM3_Init+0xc4>)
 8004550:	f240 227f 	movw	r2, #639	@ 0x27f
 8004554:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004556:	4b21      	ldr	r3, [pc, #132]	@ (80045dc <MX_TIM3_Init+0xc4>)
 8004558:	2200      	movs	r2, #0
 800455a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800455c:	4b1f      	ldr	r3, [pc, #124]	@ (80045dc <MX_TIM3_Init+0xc4>)
 800455e:	2200      	movs	r2, #0
 8004560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004562:	481e      	ldr	r0, [pc, #120]	@ (80045dc <MX_TIM3_Init+0xc4>)
 8004564:	f006 fa90 	bl	800aa88 <HAL_TIM_PWM_Init>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800456e:	f7ff fcff 	bl	8003f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004576:	2300      	movs	r3, #0
 8004578:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800457a:	f107 031c 	add.w	r3, r7, #28
 800457e:	4619      	mov	r1, r3
 8004580:	4816      	ldr	r0, [pc, #88]	@ (80045dc <MX_TIM3_Init+0xc4>)
 8004582:	f007 fe87 	bl	800c294 <HAL_TIMEx_MasterConfigSynchronization>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800458c:	f7ff fcf0 	bl	8003f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004590:	2360      	movs	r3, #96	@ 0x60
 8004592:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004598:	2300      	movs	r3, #0
 800459a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80045a0:	463b      	mov	r3, r7
 80045a2:	2208      	movs	r2, #8
 80045a4:	4619      	mov	r1, r3
 80045a6:	480d      	ldr	r0, [pc, #52]	@ (80045dc <MX_TIM3_Init+0xc4>)
 80045a8:	f006 fde2 	bl	800b170 <HAL_TIM_PWM_ConfigChannel>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80045b2:	f7ff fcdd 	bl	8003f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80045b6:	463b      	mov	r3, r7
 80045b8:	220c      	movs	r2, #12
 80045ba:	4619      	mov	r1, r3
 80045bc:	4807      	ldr	r0, [pc, #28]	@ (80045dc <MX_TIM3_Init+0xc4>)
 80045be:	f006 fdd7 	bl	800b170 <HAL_TIM_PWM_ConfigChannel>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80045c8:	f7ff fcd2 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80045cc:	4803      	ldr	r0, [pc, #12]	@ (80045dc <MX_TIM3_Init+0xc4>)
 80045ce:	f000 f9a3 	bl	8004918 <HAL_TIM_MspPostInit>

}
 80045d2:	bf00      	nop
 80045d4:	3728      	adds	r7, #40	@ 0x28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200008e8 	.word	0x200008e8
 80045e0:	40000400 	.word	0x40000400

080045e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045ea:	f107 0310 	add.w	r3, r7, #16
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	605a      	str	r2, [r3, #4]
 80045f4:	609a      	str	r2, [r3, #8]
 80045f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045f8:	1d3b      	adds	r3, r7, #4
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	605a      	str	r2, [r3, #4]
 8004600:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004602:	4b1d      	ldr	r3, [pc, #116]	@ (8004678 <MX_TIM4_Init+0x94>)
 8004604:	4a1d      	ldr	r2, [pc, #116]	@ (800467c <MX_TIM4_Init+0x98>)
 8004606:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004608:	4b1b      	ldr	r3, [pc, #108]	@ (8004678 <MX_TIM4_Init+0x94>)
 800460a:	2200      	movs	r2, #0
 800460c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800460e:	4b1a      	ldr	r3, [pc, #104]	@ (8004678 <MX_TIM4_Init+0x94>)
 8004610:	2200      	movs	r2, #0
 8004612:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004614:	4b18      	ldr	r3, [pc, #96]	@ (8004678 <MX_TIM4_Init+0x94>)
 8004616:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800461a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800461c:	4b16      	ldr	r3, [pc, #88]	@ (8004678 <MX_TIM4_Init+0x94>)
 800461e:	2200      	movs	r2, #0
 8004620:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004622:	4b15      	ldr	r3, [pc, #84]	@ (8004678 <MX_TIM4_Init+0x94>)
 8004624:	2200      	movs	r2, #0
 8004626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004628:	4813      	ldr	r0, [pc, #76]	@ (8004678 <MX_TIM4_Init+0x94>)
 800462a:	f006 f8d5 	bl	800a7d8 <HAL_TIM_Base_Init>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004634:	f7ff fc9c 	bl	8003f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800463c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800463e:	f107 0310 	add.w	r3, r7, #16
 8004642:	4619      	mov	r1, r3
 8004644:	480c      	ldr	r0, [pc, #48]	@ (8004678 <MX_TIM4_Init+0x94>)
 8004646:	f006 fea7 	bl	800b398 <HAL_TIM_ConfigClockSource>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004650:	f7ff fc8e 	bl	8003f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004654:	2300      	movs	r3, #0
 8004656:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800465c:	1d3b      	adds	r3, r7, #4
 800465e:	4619      	mov	r1, r3
 8004660:	4805      	ldr	r0, [pc, #20]	@ (8004678 <MX_TIM4_Init+0x94>)
 8004662:	f007 fe17 	bl	800c294 <HAL_TIMEx_MasterConfigSynchronization>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800466c:	f7ff fc80 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004670:	bf00      	nop
 8004672:	3720      	adds	r7, #32
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	200009b4 	.word	0x200009b4
 800467c:	40000800 	.word	0x40000800

08004680 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004686:	1d3b      	adds	r3, r7, #4
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	605a      	str	r2, [r3, #4]
 800468e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004690:	4b15      	ldr	r3, [pc, #84]	@ (80046e8 <MX_TIM6_Init+0x68>)
 8004692:	4a16      	ldr	r2, [pc, #88]	@ (80046ec <MX_TIM6_Init+0x6c>)
 8004694:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2000;
 8004696:	4b14      	ldr	r3, [pc, #80]	@ (80046e8 <MX_TIM6_Init+0x68>)
 8004698:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800469c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800469e:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <MX_TIM6_Init+0x68>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80046a4:	4b10      	ldr	r3, [pc, #64]	@ (80046e8 <MX_TIM6_Init+0x68>)
 80046a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046ac:	4b0e      	ldr	r3, [pc, #56]	@ (80046e8 <MX_TIM6_Init+0x68>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80046b2:	480d      	ldr	r0, [pc, #52]	@ (80046e8 <MX_TIM6_Init+0x68>)
 80046b4:	f006 f890 	bl	800a7d8 <HAL_TIM_Base_Init>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80046be:	f7ff fc57 	bl	8003f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80046c2:	2320      	movs	r3, #32
 80046c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80046ca:	1d3b      	adds	r3, r7, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4806      	ldr	r0, [pc, #24]	@ (80046e8 <MX_TIM6_Init+0x68>)
 80046d0:	f007 fde0 	bl	800c294 <HAL_TIMEx_MasterConfigSynchronization>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80046da:	f7ff fc49 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000a80 	.word	0x20000a80
 80046ec:	40001000 	.word	0x40001000

080046f0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046f6:	f107 0310 	add.w	r3, r7, #16
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	605a      	str	r2, [r3, #4]
 8004700:	609a      	str	r2, [r3, #8]
 8004702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004704:	1d3b      	adds	r3, r7, #4
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800470e:	4b1f      	ldr	r3, [pc, #124]	@ (800478c <MX_TIM15_Init+0x9c>)
 8004710:	4a1f      	ldr	r2, [pc, #124]	@ (8004790 <MX_TIM15_Init+0xa0>)
 8004712:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 999;
 8004714:	4b1d      	ldr	r3, [pc, #116]	@ (800478c <MX_TIM15_Init+0x9c>)
 8004716:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800471a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800471c:	4b1b      	ldr	r3, [pc, #108]	@ (800478c <MX_TIM15_Init+0x9c>)
 800471e:	2200      	movs	r2, #0
 8004720:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 15999;
 8004722:	4b1a      	ldr	r3, [pc, #104]	@ (800478c <MX_TIM15_Init+0x9c>)
 8004724:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8004728:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800472a:	4b18      	ldr	r3, [pc, #96]	@ (800478c <MX_TIM15_Init+0x9c>)
 800472c:	2200      	movs	r2, #0
 800472e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004730:	4b16      	ldr	r3, [pc, #88]	@ (800478c <MX_TIM15_Init+0x9c>)
 8004732:	2200      	movs	r2, #0
 8004734:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004736:	4b15      	ldr	r3, [pc, #84]	@ (800478c <MX_TIM15_Init+0x9c>)
 8004738:	2280      	movs	r2, #128	@ 0x80
 800473a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800473c:	4813      	ldr	r0, [pc, #76]	@ (800478c <MX_TIM15_Init+0x9c>)
 800473e:	f006 f84b 	bl	800a7d8 <HAL_TIM_Base_Init>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8004748:	f7ff fc12 	bl	8003f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800474c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004752:	f107 0310 	add.w	r3, r7, #16
 8004756:	4619      	mov	r1, r3
 8004758:	480c      	ldr	r0, [pc, #48]	@ (800478c <MX_TIM15_Init+0x9c>)
 800475a:	f006 fe1d 	bl	800b398 <HAL_TIM_ConfigClockSource>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8004764:	f7ff fc04 	bl	8003f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004768:	2320      	movs	r3, #32
 800476a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004770:	1d3b      	adds	r3, r7, #4
 8004772:	4619      	mov	r1, r3
 8004774:	4805      	ldr	r0, [pc, #20]	@ (800478c <MX_TIM15_Init+0x9c>)
 8004776:	f007 fd8d 	bl	800c294 <HAL_TIMEx_MasterConfigSynchronization>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8004780:	f7ff fbf6 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004784:	bf00      	nop
 8004786:	3720      	adds	r7, #32
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000b4c 	.word	0x20000b4c
 8004790:	40014000 	.word	0x40014000

08004794 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004798:	4b0f      	ldr	r3, [pc, #60]	@ (80047d8 <MX_TIM16_Init+0x44>)
 800479a:	4a10      	ldr	r2, [pc, #64]	@ (80047dc <MX_TIM16_Init+0x48>)
 800479c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9;
 800479e:	4b0e      	ldr	r3, [pc, #56]	@ (80047d8 <MX_TIM16_Init+0x44>)
 80047a0:	2209      	movs	r2, #9
 80047a2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047a4:	4b0c      	ldr	r3, [pc, #48]	@ (80047d8 <MX_TIM16_Init+0x44>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 15999;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <MX_TIM16_Init+0x44>)
 80047ac:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80047b0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047b2:	4b09      	ldr	r3, [pc, #36]	@ (80047d8 <MX_TIM16_Init+0x44>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80047b8:	4b07      	ldr	r3, [pc, #28]	@ (80047d8 <MX_TIM16_Init+0x44>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047be:	4b06      	ldr	r3, [pc, #24]	@ (80047d8 <MX_TIM16_Init+0x44>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80047c4:	4804      	ldr	r0, [pc, #16]	@ (80047d8 <MX_TIM16_Init+0x44>)
 80047c6:	f006 f807 	bl	800a7d8 <HAL_TIM_Base_Init>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80047d0:	f7ff fbce 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80047d4:	bf00      	nop
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000c18 	.word	0x20000c18
 80047dc:	40014400 	.word	0x40014400

080047e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f0:	d10c      	bne.n	800480c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047f2:	4b34      	ldr	r3, [pc, #208]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 80047f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f6:	4a33      	ldr	r2, [pc, #204]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80047fe:	4b31      	ldr	r3, [pc, #196]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 8004800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800480a:	e056      	b.n	80048ba <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM4)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a2d      	ldr	r2, [pc, #180]	@ (80048c8 <HAL_TIM_Base_MspInit+0xe8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d10c      	bne.n	8004830 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004816:	4b2b      	ldr	r3, [pc, #172]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481a:	4a2a      	ldr	r2, [pc, #168]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 800481c:	f043 0304 	orr.w	r3, r3, #4
 8004820:	6593      	str	r3, [r2, #88]	@ 0x58
 8004822:	4b28      	ldr	r3, [pc, #160]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	69bb      	ldr	r3, [r7, #24]
}
 800482e:	e044      	b.n	80048ba <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM6)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a25      	ldr	r2, [pc, #148]	@ (80048cc <HAL_TIM_Base_MspInit+0xec>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d10c      	bne.n	8004854 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800483a:	4b22      	ldr	r3, [pc, #136]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 800483c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483e:	4a21      	ldr	r2, [pc, #132]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 8004840:	f043 0310 	orr.w	r3, r3, #16
 8004844:	6593      	str	r3, [r2, #88]	@ 0x58
 8004846:	4b1f      	ldr	r3, [pc, #124]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 8004848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484a:	f003 0310 	and.w	r3, r3, #16
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	697b      	ldr	r3, [r7, #20]
}
 8004852:	e032      	b.n	80048ba <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM15)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1d      	ldr	r2, [pc, #116]	@ (80048d0 <HAL_TIM_Base_MspInit+0xf0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d114      	bne.n	8004888 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800485e:	4b19      	ldr	r3, [pc, #100]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 8004860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004862:	4a18      	ldr	r2, [pc, #96]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 8004864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004868:	6613      	str	r3, [r2, #96]	@ 0x60
 800486a:	4b16      	ldr	r3, [pc, #88]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 800486c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8004876:	2200      	movs	r2, #0
 8004878:	2105      	movs	r1, #5
 800487a:	2018      	movs	r0, #24
 800487c:	f003 fae0 	bl	8007e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004880:	2018      	movs	r0, #24
 8004882:	f003 faf7 	bl	8007e74 <HAL_NVIC_EnableIRQ>
}
 8004886:	e018      	b.n	80048ba <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM16)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a11      	ldr	r2, [pc, #68]	@ (80048d4 <HAL_TIM_Base_MspInit+0xf4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d113      	bne.n	80048ba <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004892:	4b0c      	ldr	r3, [pc, #48]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 8004894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004896:	4a0b      	ldr	r2, [pc, #44]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 8004898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800489c:	6613      	str	r3, [r2, #96]	@ 0x60
 800489e:	4b09      	ldr	r3, [pc, #36]	@ (80048c4 <HAL_TIM_Base_MspInit+0xe4>)
 80048a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80048aa:	2200      	movs	r2, #0
 80048ac:	2105      	movs	r1, #5
 80048ae:	2019      	movs	r0, #25
 80048b0:	f003 fac6 	bl	8007e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80048b4:	2019      	movs	r0, #25
 80048b6:	f003 fadd 	bl	8007e74 <HAL_NVIC_EnableIRQ>
}
 80048ba:	bf00      	nop
 80048bc:	3720      	adds	r7, #32
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40001000 	.word	0x40001000
 80048d0:	40014000 	.word	0x40014000
 80048d4:	40014400 	.word	0x40014400

080048d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004910 <HAL_TIM_PWM_MspInit+0x38>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d10b      	bne.n	8004902 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004914 <HAL_TIM_PWM_MspInit+0x3c>)
 80048ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ee:	4a09      	ldr	r2, [pc, #36]	@ (8004914 <HAL_TIM_PWM_MspInit+0x3c>)
 80048f0:	f043 0302 	orr.w	r3, r3, #2
 80048f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80048f6:	4b07      	ldr	r3, [pc, #28]	@ (8004914 <HAL_TIM_PWM_MspInit+0x3c>)
 80048f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40000400 	.word	0x40000400
 8004914:	40021000 	.word	0x40021000

08004918 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	@ 0x28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004920:	f107 0314 	add.w	r3, r7, #20
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004938:	d11d      	bne.n	8004976 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800493a:	4b21      	ldr	r3, [pc, #132]	@ (80049c0 <HAL_TIM_MspPostInit+0xa8>)
 800493c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800493e:	4a20      	ldr	r2, [pc, #128]	@ (80049c0 <HAL_TIM_MspPostInit+0xa8>)
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004946:	4b1e      	ldr	r3, [pc, #120]	@ (80049c0 <HAL_TIM_MspPostInit+0xa8>)
 8004948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = DRIVER_REV1_Pin|DRIVER_FWD1_Pin;
 8004952:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004958:	2302      	movs	r3, #2
 800495a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495c:	2300      	movs	r3, #0
 800495e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004960:	2300      	movs	r3, #0
 8004962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004964:	2301      	movs	r3, #1
 8004966:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004968:	f107 0314 	add.w	r3, r7, #20
 800496c:	4619      	mov	r1, r3
 800496e:	4815      	ldr	r0, [pc, #84]	@ (80049c4 <HAL_TIM_MspPostInit+0xac>)
 8004970:	f003 ff9a 	bl	80088a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004974:	e020      	b.n	80049b8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a13      	ldr	r2, [pc, #76]	@ (80049c8 <HAL_TIM_MspPostInit+0xb0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d11b      	bne.n	80049b8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004980:	4b0f      	ldr	r3, [pc, #60]	@ (80049c0 <HAL_TIM_MspPostInit+0xa8>)
 8004982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004984:	4a0e      	ldr	r2, [pc, #56]	@ (80049c0 <HAL_TIM_MspPostInit+0xa8>)
 8004986:	f043 0302 	orr.w	r3, r3, #2
 800498a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800498c:	4b0c      	ldr	r3, [pc, #48]	@ (80049c0 <HAL_TIM_MspPostInit+0xa8>)
 800498e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRIVER_FWD2_Pin|DRIVER_REV2_Pin;
 8004998:	2303      	movs	r3, #3
 800499a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499c:	2302      	movs	r3, #2
 800499e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a4:	2300      	movs	r3, #0
 80049a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80049a8:	2302      	movs	r3, #2
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ac:	f107 0314 	add.w	r3, r7, #20
 80049b0:	4619      	mov	r1, r3
 80049b2:	4804      	ldr	r0, [pc, #16]	@ (80049c4 <HAL_TIM_MspPostInit+0xac>)
 80049b4:	f003 ff78 	bl	80088a8 <HAL_GPIO_Init>
}
 80049b8:	bf00      	nop
 80049ba:	3728      	adds	r7, #40	@ 0x28
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000
 80049c4:	48000400 	.word	0x48000400
 80049c8:	40000400 	.word	0x40000400

080049cc <__NVIC_GetPriorityGrouping>:
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049d0:	4b04      	ldr	r3, [pc, #16]	@ (80049e4 <__NVIC_GetPriorityGrouping+0x18>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	0a1b      	lsrs	r3, r3, #8
 80049d6:	f003 0307 	and.w	r3, r3, #7
}
 80049da:	4618      	mov	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	e000ed00 	.word	0xe000ed00

080049e8 <__NVIC_EnableIRQ>:
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	db0b      	blt.n	8004a12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	f003 021f 	and.w	r2, r3, #31
 8004a00:	4907      	ldr	r1, [pc, #28]	@ (8004a20 <__NVIC_EnableIRQ+0x38>)
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	2001      	movs	r0, #1
 8004a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	e000e100 	.word	0xe000e100

08004a24 <__NVIC_SetPriority>:
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	6039      	str	r1, [r7, #0]
 8004a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	db0a      	blt.n	8004a4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	490c      	ldr	r1, [pc, #48]	@ (8004a70 <__NVIC_SetPriority+0x4c>)
 8004a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a42:	0112      	lsls	r2, r2, #4
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	440b      	add	r3, r1
 8004a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a4c:	e00a      	b.n	8004a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	4908      	ldr	r1, [pc, #32]	@ (8004a74 <__NVIC_SetPriority+0x50>)
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	3b04      	subs	r3, #4
 8004a5c:	0112      	lsls	r2, r2, #4
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	440b      	add	r3, r1
 8004a62:	761a      	strb	r2, [r3, #24]
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	e000e100 	.word	0xe000e100
 8004a74:	e000ed00 	.word	0xe000ed00

08004a78 <NVIC_EncodePriority>:
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	@ 0x24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f1c3 0307 	rsb	r3, r3, #7
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	bf28      	it	cs
 8004a96:	2304      	movcs	r3, #4
 8004a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	2b06      	cmp	r3, #6
 8004aa0:	d902      	bls.n	8004aa8 <NVIC_EncodePriority+0x30>
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3b03      	subs	r3, #3
 8004aa6:	e000      	b.n	8004aaa <NVIC_EncodePriority+0x32>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	43da      	mvns	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	401a      	ands	r2, r3
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ac0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aca:	43d9      	mvns	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad0:	4313      	orrs	r3, r2
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3724      	adds	r7, #36	@ 0x24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
	...

08004ae0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004ae8:	4b08      	ldr	r3, [pc, #32]	@ (8004b0c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004aea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004aec:	4907      	ldr	r1, [pc, #28]	@ (8004b0c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004af4:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004af6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4013      	ands	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004afe:	68fb      	ldr	r3, [r7, #12]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40021000 	.word	0x40021000

08004b10 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8004b18:	4b08      	ldr	r3, [pc, #32]	@ (8004b3c <LL_APB1_GRP2_EnableClock+0x2c>)
 8004b1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b1c:	4907      	ldr	r1, [pc, #28]	@ (8004b3c <LL_APB1_GRP2_EnableClock+0x2c>)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <LL_APB1_GRP2_EnableClock+0x2c>)
 8004b26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40021000 	.word	0x40021000

08004b40 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004b50:	4a0e      	ldr	r2, [pc, #56]	@ (8004b8c <LL_DMA_SetDataTransferDirection+0x4c>)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	4413      	add	r3, r2
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b64:	f023 0310 	bic.w	r3, r3, #16
 8004b68:	4908      	ldr	r1, [pc, #32]	@ (8004b8c <LL_DMA_SetDataTransferDirection+0x4c>)
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	7812      	ldrb	r2, [r2, #0]
 8004b70:	4611      	mov	r1, r2
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	440a      	add	r2, r1
 8004b76:	4611      	mov	r1, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	0801c2e8 	.word	0x0801c2e8

08004b90 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8004ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8004bd8 <LL_DMA_SetMode+0x48>)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	4413      	add	r3, r2
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f023 0220 	bic.w	r2, r3, #32
 8004bb4:	4908      	ldr	r1, [pc, #32]	@ (8004bd8 <LL_DMA_SetMode+0x48>)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	440b      	add	r3, r1
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	440b      	add	r3, r1
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]
             Mode);
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	0801c2e8 	.word	0x0801c2e8

08004bdc <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8004bec:	4a0d      	ldr	r2, [pc, #52]	@ (8004c24 <LL_DMA_SetPeriphIncMode+0x48>)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004c00:	4908      	ldr	r1, [pc, #32]	@ (8004c24 <LL_DMA_SetPeriphIncMode+0x48>)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	440b      	add	r3, r1
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	440b      	add	r3, r1
 8004c0e:	4619      	mov	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	0801c2e8 	.word	0x0801c2e8

08004c28 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8004c38:	4a0d      	ldr	r2, [pc, #52]	@ (8004c70 <LL_DMA_SetMemoryIncMode+0x48>)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	4413      	add	r3, r2
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c4c:	4908      	ldr	r1, [pc, #32]	@ (8004c70 <LL_DMA_SetMemoryIncMode+0x48>)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	440b      	add	r3, r1
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	4619      	mov	r1, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	440b      	add	r3, r1
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	0801c2e8 	.word	0x0801c2e8

08004c74 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8004c84:	4a0d      	ldr	r2, [pc, #52]	@ (8004cbc <LL_DMA_SetPeriphSize+0x48>)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	4413      	add	r3, r2
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	4413      	add	r3, r2
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c98:	4908      	ldr	r1, [pc, #32]	@ (8004cbc <LL_DMA_SetPeriphSize+0x48>)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	440b      	add	r3, r1
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	440b      	add	r3, r1
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	0801c2e8 	.word	0x0801c2e8

08004cc0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8004cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8004d08 <LL_DMA_SetMemorySize+0x48>)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	4413      	add	r3, r2
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ce4:	4908      	ldr	r1, [pc, #32]	@ (8004d08 <LL_DMA_SetMemorySize+0x48>)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	440b      	add	r3, r1
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	4619      	mov	r1, r3
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	440b      	add	r3, r1
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	0801c2e8 	.word	0x0801c2e8

08004d0c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8004d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d54 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4413      	add	r3, r2
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	4413      	add	r3, r2
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d30:	4908      	ldr	r1, [pc, #32]	@ (8004d54 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	440b      	add	r3, r1
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	440b      	add	r3, r1
 8004d3e:	4619      	mov	r1, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	600b      	str	r3, [r1, #0]
             Priority);
}
 8004d46:	bf00      	nop
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	0801c2e8 	.word	0x0801c2e8

08004d58 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	0a9b      	lsrs	r3, r3, #10
 8004d68:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8004d6c:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d80:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	4413      	add	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d96:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db2:	463b      	mov	r3, r7
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	605a      	str	r2, [r3, #4]
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	60da      	str	r2, [r3, #12]
 8004dbe:	611a      	str	r2, [r3, #16]
 8004dc0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8004dc2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004dc6:	f7ff fea3 	bl	8004b10 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004dca:	2002      	movs	r0, #2
 8004dcc:	f7ff fe88 	bl	8004ae0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ddc:	463b      	mov	r3, r7
 8004dde:	4619      	mov	r1, r3
 8004de0:	4838      	ldr	r0, [pc, #224]	@ (8004ec4 <MX_UCPD1_Init+0x118>)
 8004de2:	f00a fcb3 	bl	800f74c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8004de6:	2340      	movs	r3, #64	@ 0x40
 8004de8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004dea:	2303      	movs	r3, #3
 8004dec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004df2:	463b      	mov	r3, r7
 8004df4:	4619      	mov	r1, r3
 8004df6:	4833      	ldr	r0, [pc, #204]	@ (8004ec4 <MX_UCPD1_Init+0x118>)
 8004df8:	f00a fca8 	bl	800f74c <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8004dfc:	2272      	movs	r2, #114	@ 0x72
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4831      	ldr	r0, [pc, #196]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e02:	f7ff ffa9 	bl	8004d58 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8004e06:	2200      	movs	r2, #0
 8004e08:	2100      	movs	r1, #0
 8004e0a:	482f      	ldr	r0, [pc, #188]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e0c:	f7ff fe98 	bl	8004b40 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8004e10:	2200      	movs	r2, #0
 8004e12:	2100      	movs	r1, #0
 8004e14:	482c      	ldr	r0, [pc, #176]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e16:	f7ff ff79 	bl	8004d0c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	482a      	ldr	r0, [pc, #168]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e20:	f7ff feb6 	bl	8004b90 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8004e24:	2200      	movs	r2, #0
 8004e26:	2100      	movs	r1, #0
 8004e28:	4827      	ldr	r0, [pc, #156]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e2a:	f7ff fed7 	bl	8004bdc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8004e2e:	2280      	movs	r2, #128	@ 0x80
 8004e30:	2100      	movs	r1, #0
 8004e32:	4825      	ldr	r0, [pc, #148]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e34:	f7ff fef8 	bl	8004c28 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4822      	ldr	r0, [pc, #136]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e3e:	f7ff ff19 	bl	8004c74 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8004e42:	2200      	movs	r2, #0
 8004e44:	2100      	movs	r1, #0
 8004e46:	4820      	ldr	r0, [pc, #128]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e48:	f7ff ff3a 	bl	8004cc0 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8004e4c:	2273      	movs	r2, #115	@ 0x73
 8004e4e:	2101      	movs	r1, #1
 8004e50:	481d      	ldr	r0, [pc, #116]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e52:	f7ff ff81 	bl	8004d58 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8004e56:	2210      	movs	r2, #16
 8004e58:	2101      	movs	r1, #1
 8004e5a:	481b      	ldr	r0, [pc, #108]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e5c:	f7ff fe70 	bl	8004b40 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8004e60:	2200      	movs	r2, #0
 8004e62:	2101      	movs	r1, #1
 8004e64:	4818      	ldr	r0, [pc, #96]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e66:	f7ff ff51 	bl	8004d0c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	4816      	ldr	r0, [pc, #88]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e70:	f7ff fe8e 	bl	8004b90 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8004e74:	2200      	movs	r2, #0
 8004e76:	2101      	movs	r1, #1
 8004e78:	4813      	ldr	r0, [pc, #76]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e7a:	f7ff feaf 	bl	8004bdc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8004e7e:	2280      	movs	r2, #128	@ 0x80
 8004e80:	2101      	movs	r1, #1
 8004e82:	4811      	ldr	r0, [pc, #68]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e84:	f7ff fed0 	bl	8004c28 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	480e      	ldr	r0, [pc, #56]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e8e:	f7ff fef1 	bl	8004c74 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8004e92:	2200      	movs	r2, #0
 8004e94:	2101      	movs	r1, #1
 8004e96:	480c      	ldr	r0, [pc, #48]	@ (8004ec8 <MX_UCPD1_Init+0x11c>)
 8004e98:	f7ff ff12 	bl	8004cc0 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8004e9c:	f7ff fd96 	bl	80049cc <__NVIC_GetPriorityGrouping>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2105      	movs	r1, #5
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fde6 	bl	8004a78 <NVIC_EncodePriority>
 8004eac:	4603      	mov	r3, r0
 8004eae:	4619      	mov	r1, r3
 8004eb0:	203f      	movs	r0, #63	@ 0x3f
 8004eb2:	f7ff fdb7 	bl	8004a24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 8004eb6:	203f      	movs	r0, #63	@ 0x3f
 8004eb8:	f7ff fd96 	bl	80049e8 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8004ebc:	bf00      	nop
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	48000400 	.word	0x48000400
 8004ec8:	40020000 	.word	0x40020000

08004ecc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ed0:	4b24      	ldr	r3, [pc, #144]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004ed2:	4a25      	ldr	r2, [pc, #148]	@ (8004f68 <MX_USART1_UART_Init+0x9c>)
 8004ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004ed6:	4b23      	ldr	r3, [pc, #140]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ede:	4b21      	ldr	r3, [pc, #132]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004eea:	4b1e      	ldr	r3, [pc, #120]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004ef2:	220c      	movs	r2, #12
 8004ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004efc:	4b19      	ldr	r3, [pc, #100]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f02:	4b18      	ldr	r3, [pc, #96]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f08:	4b16      	ldr	r3, [pc, #88]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004f0e:	4b15      	ldr	r3, [pc, #84]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004f10:	2208      	movs	r2, #8
 8004f12:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004f14:	4b13      	ldr	r3, [pc, #76]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004f16:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004f1a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f1c:	4811      	ldr	r0, [pc, #68]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004f1e:	f007 fa8b 	bl	800c438 <HAL_UART_Init>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8004f28:	f7ff f822 	bl	8003f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	480d      	ldr	r0, [pc, #52]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004f30:	f00a f8df 	bl	800f0f2 <HAL_UARTEx_SetTxFifoThreshold>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 8004f3a:	f7ff f819 	bl	8003f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4808      	ldr	r0, [pc, #32]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004f42:	f00a f914 	bl	800f16e <HAL_UARTEx_SetRxFifoThreshold>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8004f4c:	f7ff f810 	bl	8003f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004f50:	4804      	ldr	r0, [pc, #16]	@ (8004f64 <MX_USART1_UART_Init+0x98>)
 8004f52:	f00a f895 	bl	800f080 <HAL_UARTEx_DisableFifoMode>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8004f5c:	f7ff f808 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004f60:	bf00      	nop
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000ce4 	.word	0x20000ce4
 8004f68:	40013800 	.word	0x40013800

08004f6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f70:	4b22      	ldr	r3, [pc, #136]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004f72:	4a23      	ldr	r2, [pc, #140]	@ (8005000 <MX_USART2_UART_Init+0x94>)
 8004f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 128000;
 8004f76:	4b21      	ldr	r3, [pc, #132]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004f78:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8004f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f84:	4b1d      	ldr	r3, [pc, #116]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f90:	4b1a      	ldr	r3, [pc, #104]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004f92:	220c      	movs	r2, #12
 8004f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f96:	4b19      	ldr	r3, [pc, #100]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f9c:	4b17      	ldr	r3, [pc, #92]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fa2:	4b16      	ldr	r3, [pc, #88]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004fa8:	4b14      	ldr	r3, [pc, #80]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fae:	4b13      	ldr	r3, [pc, #76]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004fb4:	4811      	ldr	r0, [pc, #68]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004fb6:	f007 fa3f 	bl	800c438 <HAL_UART_Init>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004fc0:	f7fe ffd6 	bl	8003f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	480d      	ldr	r0, [pc, #52]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004fc8:	f00a f893 	bl	800f0f2 <HAL_UARTEx_SetTxFifoThreshold>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004fd2:	f7fe ffcd 	bl	8003f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4808      	ldr	r0, [pc, #32]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004fda:	f00a f8c8 	bl	800f16e <HAL_UARTEx_SetRxFifoThreshold>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004fe4:	f7fe ffc4 	bl	8003f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004fe8:	4804      	ldr	r0, [pc, #16]	@ (8004ffc <MX_USART2_UART_Init+0x90>)
 8004fea:	f00a f849 	bl	800f080 <HAL_UARTEx_DisableFifoMode>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004ff4:	f7fe ffbc 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004ff8:	bf00      	nop
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20000d78 	.word	0x20000d78
 8005000:	40004400 	.word	0x40004400

08005004 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b09e      	sub	sp, #120	@ 0x78
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800500c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	609a      	str	r2, [r3, #8]
 8005018:	60da      	str	r2, [r3, #12]
 800501a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800501c:	f107 0320 	add.w	r3, r7, #32
 8005020:	2244      	movs	r2, #68	@ 0x44
 8005022:	2100      	movs	r1, #0
 8005024:	4618      	mov	r0, r3
 8005026:	f013 fd53 	bl	8018ad0 <memset>
  if(uartHandle->Instance==USART1)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a68      	ldr	r2, [pc, #416]	@ (80051d0 <HAL_UART_MspInit+0x1cc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d15a      	bne.n	80050ea <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005034:	2301      	movs	r3, #1
 8005036:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005038:	2300      	movs	r3, #0
 800503a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800503c:	f107 0320 	add.w	r3, r7, #32
 8005040:	4618      	mov	r0, r3
 8005042:	f005 f9d9 	bl	800a3f8 <HAL_RCCEx_PeriphCLKConfig>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800504c:	f7fe ff90 	bl	8003f70 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005050:	4b60      	ldr	r3, [pc, #384]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 8005052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005054:	4a5f      	ldr	r2, [pc, #380]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 8005056:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800505a:	6613      	str	r3, [r2, #96]	@ 0x60
 800505c:	4b5d      	ldr	r3, [pc, #372]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 800505e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005064:	61fb      	str	r3, [r7, #28]
 8005066:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005068:	4b5a      	ldr	r3, [pc, #360]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 800506a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800506c:	4a59      	ldr	r2, [pc, #356]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 800506e:	f043 0304 	orr.w	r3, r3, #4
 8005072:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005074:	4b57      	ldr	r3, [pc, #348]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 8005076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005080:	4b54      	ldr	r3, [pc, #336]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 8005082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005084:	4a53      	ldr	r2, [pc, #332]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 8005086:	f043 0302 	orr.w	r3, r3, #2
 800508a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800508c:	4b51      	ldr	r3, [pc, #324]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 800508e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005098:	2310      	movs	r3, #16
 800509a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509c:	2302      	movs	r3, #2
 800509e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a4:	2300      	movs	r3, #0
 80050a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050a8:	2307      	movs	r3, #7
 80050aa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80050ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80050b0:	4619      	mov	r1, r3
 80050b2:	4849      	ldr	r0, [pc, #292]	@ (80051d8 <HAL_UART_MspInit+0x1d4>)
 80050b4:	f003 fbf8 	bl	80088a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80050b8:	2380      	movs	r3, #128	@ 0x80
 80050ba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050bc:	2302      	movs	r3, #2
 80050be:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c4:	2300      	movs	r3, #0
 80050c6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050c8:	2307      	movs	r3, #7
 80050ca:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80050cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80050d0:	4619      	mov	r1, r3
 80050d2:	4842      	ldr	r0, [pc, #264]	@ (80051dc <HAL_UART_MspInit+0x1d8>)
 80050d4:	f003 fbe8 	bl	80088a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80050d8:	2200      	movs	r2, #0
 80050da:	2105      	movs	r1, #5
 80050dc:	2025      	movs	r0, #37	@ 0x25
 80050de:	f002 feaf 	bl	8007e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050e2:	2025      	movs	r0, #37	@ 0x25
 80050e4:	f002 fec6 	bl	8007e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80050e8:	e06d      	b.n	80051c6 <HAL_UART_MspInit+0x1c2>
  else if(uartHandle->Instance==USART2)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a3c      	ldr	r2, [pc, #240]	@ (80051e0 <HAL_UART_MspInit+0x1dc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d168      	bne.n	80051c6 <HAL_UART_MspInit+0x1c2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80050f4:	2302      	movs	r3, #2
 80050f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80050f8:	2300      	movs	r3, #0
 80050fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050fc:	f107 0320 	add.w	r3, r7, #32
 8005100:	4618      	mov	r0, r3
 8005102:	f005 f979 	bl	800a3f8 <HAL_RCCEx_PeriphCLKConfig>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 800510c:	f7fe ff30 	bl	8003f70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005110:	4b30      	ldr	r3, [pc, #192]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 8005112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005114:	4a2f      	ldr	r2, [pc, #188]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 8005116:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800511a:	6593      	str	r3, [r2, #88]	@ 0x58
 800511c:	4b2d      	ldr	r3, [pc, #180]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 800511e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005128:	4b2a      	ldr	r3, [pc, #168]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 800512a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800512c:	4a29      	ldr	r2, [pc, #164]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005134:	4b27      	ldr	r3, [pc, #156]	@ (80051d4 <HAL_UART_MspInit+0x1d0>)
 8005136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RXnTX_STM_Pin|LIDAR_TXnRX_STM_Pin;
 8005140:	230c      	movs	r3, #12
 8005142:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005144:	2302      	movs	r3, #2
 8005146:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005148:	2300      	movs	r3, #0
 800514a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514c:	2300      	movs	r3, #0
 800514e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005150:	2307      	movs	r3, #7
 8005152:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005154:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005158:	4619      	mov	r1, r3
 800515a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800515e:	f003 fba3 	bl	80088a8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel4;
 8005162:	4b20      	ldr	r3, [pc, #128]	@ (80051e4 <HAL_UART_MspInit+0x1e0>)
 8005164:	4a20      	ldr	r2, [pc, #128]	@ (80051e8 <HAL_UART_MspInit+0x1e4>)
 8005166:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005168:	4b1e      	ldr	r3, [pc, #120]	@ (80051e4 <HAL_UART_MspInit+0x1e0>)
 800516a:	221a      	movs	r2, #26
 800516c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800516e:	4b1d      	ldr	r3, [pc, #116]	@ (80051e4 <HAL_UART_MspInit+0x1e0>)
 8005170:	2200      	movs	r2, #0
 8005172:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005174:	4b1b      	ldr	r3, [pc, #108]	@ (80051e4 <HAL_UART_MspInit+0x1e0>)
 8005176:	2200      	movs	r2, #0
 8005178:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800517a:	4b1a      	ldr	r3, [pc, #104]	@ (80051e4 <HAL_UART_MspInit+0x1e0>)
 800517c:	2280      	movs	r2, #128	@ 0x80
 800517e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005180:	4b18      	ldr	r3, [pc, #96]	@ (80051e4 <HAL_UART_MspInit+0x1e0>)
 8005182:	2200      	movs	r2, #0
 8005184:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005186:	4b17      	ldr	r3, [pc, #92]	@ (80051e4 <HAL_UART_MspInit+0x1e0>)
 8005188:	2200      	movs	r2, #0
 800518a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800518c:	4b15      	ldr	r3, [pc, #84]	@ (80051e4 <HAL_UART_MspInit+0x1e0>)
 800518e:	2220      	movs	r2, #32
 8005190:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005192:	4b14      	ldr	r3, [pc, #80]	@ (80051e4 <HAL_UART_MspInit+0x1e0>)
 8005194:	2200      	movs	r2, #0
 8005196:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005198:	4812      	ldr	r0, [pc, #72]	@ (80051e4 <HAL_UART_MspInit+0x1e0>)
 800519a:	f003 f853 	bl	8008244 <HAL_DMA_Init>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 80051a4:	f7fe fee4 	bl	8003f70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a0e      	ldr	r2, [pc, #56]	@ (80051e4 <HAL_UART_MspInit+0x1e0>)
 80051ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80051b0:	4a0c      	ldr	r2, [pc, #48]	@ (80051e4 <HAL_UART_MspInit+0x1e0>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80051b6:	2200      	movs	r2, #0
 80051b8:	2105      	movs	r1, #5
 80051ba:	2026      	movs	r0, #38	@ 0x26
 80051bc:	f002 fe40 	bl	8007e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80051c0:	2026      	movs	r0, #38	@ 0x26
 80051c2:	f002 fe57 	bl	8007e74 <HAL_NVIC_EnableIRQ>
}
 80051c6:	bf00      	nop
 80051c8:	3778      	adds	r7, #120	@ 0x78
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40013800 	.word	0x40013800
 80051d4:	40021000 	.word	0x40021000
 80051d8:	48000800 	.word	0x48000800
 80051dc:	48000400 	.word	0x48000400
 80051e0:	40004400 	.word	0x40004400
 80051e4:	20000e0c 	.word	0x20000e0c
 80051e8:	40020044 	.word	0x40020044
 80051ec:	00000000 	.word	0x00000000

080051f0 <ADXL343_init>:
		{"FIFO_CTL",	0x38},
		{"FIFO_SATUS",	0x39}
};


void ADXL343_init(void){
 80051f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f4:	b08c      	sub	sp, #48	@ 0x30
 80051f6:	af00      	add	r7, sp, #0
	debug(INFORMATION,"ADXL343 - INIT");
 80051f8:	49a3      	ldr	r1, [pc, #652]	@ (8005488 <ADXL343_init+0x298>)
 80051fa:	48a4      	ldr	r0, [pc, #656]	@ (800548c <ADXL343_init+0x29c>)
 80051fc:	f011 fce4 	bl	8016bc8 <debug>
	uint8_t ret=0;
 8005200:	2300      	movs	r3, #0
 8005202:	743b      	strb	r3, [r7, #16]
	ADXL343_ReadRegister(0x00, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005204:	f107 0310 	add.w	r3, r7, #16
 8005208:	2201      	movs	r2, #1
 800520a:	4619      	mov	r1, r3
 800520c:	2000      	movs	r0, #0
 800520e:	f000 fb11 	bl	8005834 <ADXL343_ReadRegister>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <ADXL343_init+0x30>
 8005218:	499d      	ldr	r1, [pc, #628]	@ (8005490 <ADXL343_init+0x2a0>)
 800521a:	489e      	ldr	r0, [pc, #632]	@ (8005494 <ADXL343_init+0x2a4>)
 800521c:	f011 fcd4 	bl	8016bc8 <debug>
	printf("READ - deviceID: 0x%02X\r\n",ret);
 8005220:	7c3b      	ldrb	r3, [r7, #16]
 8005222:	4619      	mov	r1, r3
 8005224:	489c      	ldr	r0, [pc, #624]	@ (8005498 <ADXL343_init+0x2a8>)
 8005226:	f013 fb75 	bl	8018914 <iprintf>

	uint8_t startReg = 0x1D;
 800522a:	231d      	movs	r3, #29
 800522c:	76fb      	strb	r3, [r7, #27]
	uint8_t endReg = 0x39;
 800522e:	2339      	movs	r3, #57	@ 0x39
 8005230:	76bb      	strb	r3, [r7, #26]
	for (int i = 1; i <= endReg-startReg+1; i++) {
 8005232:	2301      	movs	r3, #1
 8005234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005236:	e01d      	b.n	8005274 <ADXL343_init+0x84>
		uint8_t ret=0;
 8005238:	2300      	movs	r3, #0
 800523a:	73fb      	strb	r3, [r7, #15]
		ADXL343_ReadRegister(IMURegister[i].reg, &ret,1);
 800523c:	4a97      	ldr	r2, [pc, #604]	@ (800549c <ADXL343_init+0x2ac>)
 800523e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4413      	add	r3, r2
 8005244:	791b      	ldrb	r3, [r3, #4]
 8005246:	f107 010f 	add.w	r1, r7, #15
 800524a:	2201      	movs	r2, #1
 800524c:	4618      	mov	r0, r3
 800524e:	f000 faf1 	bl	8005834 <ADXL343_ReadRegister>
		printf("READ - 0x%02X (%s): 0x%02X\r\n", IMURegister[i].reg,IMURegister[i].name, ret);
 8005252:	4a92      	ldr	r2, [pc, #584]	@ (800549c <ADXL343_init+0x2ac>)
 8005254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4413      	add	r3, r2
 800525a:	791b      	ldrb	r3, [r3, #4]
 800525c:	4619      	mov	r1, r3
 800525e:	4a8f      	ldr	r2, [pc, #572]	@ (800549c <ADXL343_init+0x2ac>)
 8005260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005262:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	488d      	ldr	r0, [pc, #564]	@ (80054a0 <ADXL343_init+0x2b0>)
 800526a:	f013 fb53 	bl	8018914 <iprintf>
	for (int i = 1; i <= endReg-startReg+1; i++) {
 800526e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005270:	3301      	adds	r3, #1
 8005272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005274:	7eba      	ldrb	r2, [r7, #26]
 8005276:	7efb      	ldrb	r3, [r7, #27]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	3301      	adds	r3, #1
 800527c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800527e:	429a      	cmp	r2, r3
 8005280:	ddda      	ble.n	8005238 <ADXL343_init+0x48>
	}

	/*	0x1D-TRESHS_TAP		|	62.5 mg/LSB
	 *	0xa0= 10g
	 */
	ADXL343_WriteRegister(0x1D, 0xa0)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8005282:	21a0      	movs	r1, #160	@ 0xa0
 8005284:	201d      	movs	r0, #29
 8005286:	f000 fab7 	bl	80057f8 <ADXL343_WriteRegister>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <ADXL343_init+0xa8>
 8005290:	4984      	ldr	r1, [pc, #528]	@ (80054a4 <ADXL343_init+0x2b4>)
 8005292:	4880      	ldr	r0, [pc, #512]	@ (8005494 <ADXL343_init+0x2a4>)
 8005294:	f011 fc98 	bl	8016bc8 <debug>
	ADXL343_ReadRegister(0x1D, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005298:	f107 0310 	add.w	r3, r7, #16
 800529c:	2201      	movs	r2, #1
 800529e:	4619      	mov	r1, r3
 80052a0:	201d      	movs	r0, #29
 80052a2:	f000 fac7 	bl	8005834 <ADXL343_ReadRegister>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <ADXL343_init+0xc4>
 80052ac:	4978      	ldr	r1, [pc, #480]	@ (8005490 <ADXL343_init+0x2a0>)
 80052ae:	4879      	ldr	r0, [pc, #484]	@ (8005494 <ADXL343_init+0x2a4>)
 80052b0:	f011 fc8a 	bl	8016bc8 <debug>
	//printf("WRITE/READ - TRESHS_TAP: 0x%02X\r\n",ret);
	/* 	0x21-DUR	|	625 µs/LSB
	 *	0xa0 : 100ms
	 */
	ADXL343_WriteRegister(0x21, 0xFF)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80052b4:	21ff      	movs	r1, #255	@ 0xff
 80052b6:	2021      	movs	r0, #33	@ 0x21
 80052b8:	f000 fa9e 	bl	80057f8 <ADXL343_WriteRegister>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <ADXL343_init+0xda>
 80052c2:	4978      	ldr	r1, [pc, #480]	@ (80054a4 <ADXL343_init+0x2b4>)
 80052c4:	4873      	ldr	r0, [pc, #460]	@ (8005494 <ADXL343_init+0x2a4>)
 80052c6:	f011 fc7f 	bl	8016bc8 <debug>
	ADXL343_ReadRegister(0x21, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80052ca:	f107 0310 	add.w	r3, r7, #16
 80052ce:	2201      	movs	r2, #1
 80052d0:	4619      	mov	r1, r3
 80052d2:	2021      	movs	r0, #33	@ 0x21
 80052d4:	f000 faae 	bl	8005834 <ADXL343_ReadRegister>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <ADXL343_init+0xf6>
 80052de:	496c      	ldr	r1, [pc, #432]	@ (8005490 <ADXL343_init+0x2a0>)
 80052e0:	486c      	ldr	r0, [pc, #432]	@ (8005494 <ADXL343_init+0x2a4>)
 80052e2:	f011 fc71 	bl	8016bc8 <debug>
	//printf("WRITE/READ - DUR: 0x%02X\r\n",ret);
	/* 	0x22 - LATENT	|	 1.25 ms/LSB
	 *	0xFF : 378.75ms
	 */
	ADXL343_WriteRegister(0x22, 0xFF)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80052e6:	21ff      	movs	r1, #255	@ 0xff
 80052e8:	2022      	movs	r0, #34	@ 0x22
 80052ea:	f000 fa85 	bl	80057f8 <ADXL343_WriteRegister>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <ADXL343_init+0x10c>
 80052f4:	496b      	ldr	r1, [pc, #428]	@ (80054a4 <ADXL343_init+0x2b4>)
 80052f6:	4867      	ldr	r0, [pc, #412]	@ (8005494 <ADXL343_init+0x2a4>)
 80052f8:	f011 fc66 	bl	8016bc8 <debug>
	ADXL343_ReadRegister(0x22, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80052fc:	f107 0310 	add.w	r3, r7, #16
 8005300:	2201      	movs	r2, #1
 8005302:	4619      	mov	r1, r3
 8005304:	2022      	movs	r0, #34	@ 0x22
 8005306:	f000 fa95 	bl	8005834 <ADXL343_ReadRegister>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <ADXL343_init+0x128>
 8005310:	495f      	ldr	r1, [pc, #380]	@ (8005490 <ADXL343_init+0x2a0>)
 8005312:	4860      	ldr	r0, [pc, #384]	@ (8005494 <ADXL343_init+0x2a4>)
 8005314:	f011 fc58 	bl	8016bc8 <debug>
	 *	D3		|SUPRESS
	 * 	D2		|TAP_X
	 * 	D1		|TAP_Y
	 * 	D0		|TAP_Z
	 */
	ADXL343_WriteRegister(0x2A, 0b110)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8005318:	2106      	movs	r1, #6
 800531a:	202a      	movs	r0, #42	@ 0x2a
 800531c:	f000 fa6c 	bl	80057f8 <ADXL343_WriteRegister>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <ADXL343_init+0x13e>
 8005326:	495f      	ldr	r1, [pc, #380]	@ (80054a4 <ADXL343_init+0x2b4>)
 8005328:	485a      	ldr	r0, [pc, #360]	@ (8005494 <ADXL343_init+0x2a4>)
 800532a:	f011 fc4d 	bl	8016bc8 <debug>
	ADXL343_ReadRegister(0x2A, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 800532e:	f107 0310 	add.w	r3, r7, #16
 8005332:	2201      	movs	r2, #1
 8005334:	4619      	mov	r1, r3
 8005336:	202a      	movs	r0, #42	@ 0x2a
 8005338:	f000 fa7c 	bl	8005834 <ADXL343_ReadRegister>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <ADXL343_init+0x15a>
 8005342:	4953      	ldr	r1, [pc, #332]	@ (8005490 <ADXL343_init+0x2a0>)
 8005344:	4853      	ldr	r0, [pc, #332]	@ (8005494 <ADXL343_init+0x2a4>)
 8005346:	f011 fc3f 	bl	8016bc8 <debug>
	//printf("WRITE/READ - TAP_AXES: 0x%02X\r\n",ret);
	/*	0x2E-INT_ENABLE
	 * 	D6 		| SINGLE_TAP
	 */
	ADXL343_WriteRegister(0x2E, 0b1<<6)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 800534a:	2140      	movs	r1, #64	@ 0x40
 800534c:	202e      	movs	r0, #46	@ 0x2e
 800534e:	f000 fa53 	bl	80057f8 <ADXL343_WriteRegister>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <ADXL343_init+0x170>
 8005358:	4952      	ldr	r1, [pc, #328]	@ (80054a4 <ADXL343_init+0x2b4>)
 800535a:	484e      	ldr	r0, [pc, #312]	@ (8005494 <ADXL343_init+0x2a4>)
 800535c:	f011 fc34 	bl	8016bc8 <debug>
	ADXL343_ReadRegister(0x2E, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005360:	f107 0310 	add.w	r3, r7, #16
 8005364:	2201      	movs	r2, #1
 8005366:	4619      	mov	r1, r3
 8005368:	202e      	movs	r0, #46	@ 0x2e
 800536a:	f000 fa63 	bl	8005834 <ADXL343_ReadRegister>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <ADXL343_init+0x18c>
 8005374:	4946      	ldr	r1, [pc, #280]	@ (8005490 <ADXL343_init+0x2a0>)
 8005376:	4847      	ldr	r0, [pc, #284]	@ (8005494 <ADXL343_init+0x2a4>)
 8005378:	f011 fc26 	bl	8016bc8 <debug>
	//printf("WRITE/READ - INT_ENABLE: 0x%02X\r\n",ret);
	/*	0x2F-INT_MAP
	 * 	D6 		| SINGLE_TAP =1 : vers INT2
	 */
	ADXL343_WriteRegister(0x2F, 0b1<<6)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 800537c:	2140      	movs	r1, #64	@ 0x40
 800537e:	202f      	movs	r0, #47	@ 0x2f
 8005380:	f000 fa3a 	bl	80057f8 <ADXL343_WriteRegister>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <ADXL343_init+0x1a2>
 800538a:	4946      	ldr	r1, [pc, #280]	@ (80054a4 <ADXL343_init+0x2b4>)
 800538c:	4841      	ldr	r0, [pc, #260]	@ (8005494 <ADXL343_init+0x2a4>)
 800538e:	f011 fc1b 	bl	8016bc8 <debug>
	ADXL343_ReadRegister(0x2F, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005392:	f107 0310 	add.w	r3, r7, #16
 8005396:	2201      	movs	r2, #1
 8005398:	4619      	mov	r1, r3
 800539a:	202f      	movs	r0, #47	@ 0x2f
 800539c:	f000 fa4a 	bl	8005834 <ADXL343_ReadRegister>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <ADXL343_init+0x1be>
 80053a6:	493a      	ldr	r1, [pc, #232]	@ (8005490 <ADXL343_init+0x2a0>)
 80053a8:	483a      	ldr	r0, [pc, #232]	@ (8005494 <ADXL343_init+0x2a4>)
 80053aa:	f011 fc0d 	bl	8016bc8 <debug>
	 * 	D3		| INACT ac/dc
	 * 	D2		| INACT_X enable
	 * 	D1		| INACT_Y enable
	 * 	D0		| INACT_Z enable
	 */
	ADXL343_WriteRegister(0x27, 0b11100000)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80053ae:	21e0      	movs	r1, #224	@ 0xe0
 80053b0:	2027      	movs	r0, #39	@ 0x27
 80053b2:	f000 fa21 	bl	80057f8 <ADXL343_WriteRegister>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <ADXL343_init+0x1d4>
 80053bc:	4939      	ldr	r1, [pc, #228]	@ (80054a4 <ADXL343_init+0x2b4>)
 80053be:	4835      	ldr	r0, [pc, #212]	@ (8005494 <ADXL343_init+0x2a4>)
 80053c0:	f011 fc02 	bl	8016bc8 <debug>
	ADXL343_ReadRegister(0x27, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80053c4:	f107 0310 	add.w	r3, r7, #16
 80053c8:	2201      	movs	r2, #1
 80053ca:	4619      	mov	r1, r3
 80053cc:	2027      	movs	r0, #39	@ 0x27
 80053ce:	f000 fa31 	bl	8005834 <ADXL343_ReadRegister>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <ADXL343_init+0x1f0>
 80053d8:	492d      	ldr	r1, [pc, #180]	@ (8005490 <ADXL343_init+0x2a0>)
 80053da:	482e      	ldr	r0, [pc, #184]	@ (8005494 <ADXL343_init+0x2a4>)
 80053dc:	f011 fbf4 	bl	8016bc8 <debug>
	//printf("WRITE/READ - ACT_INACT_CTL: 0x%02X\r\n",ret);

	/*	0x2D—POWER_CTL
	 * 	D3		| MEASURE = 1
	 */
	ADXL343_WriteRegister(0x2D, 1<<3)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80053e0:	2108      	movs	r1, #8
 80053e2:	202d      	movs	r0, #45	@ 0x2d
 80053e4:	f000 fa08 	bl	80057f8 <ADXL343_WriteRegister>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <ADXL343_init+0x206>
 80053ee:	492d      	ldr	r1, [pc, #180]	@ (80054a4 <ADXL343_init+0x2b4>)
 80053f0:	4828      	ldr	r0, [pc, #160]	@ (8005494 <ADXL343_init+0x2a4>)
 80053f2:	f011 fbe9 	bl	8016bc8 <debug>
	ADXL343_ReadRegister(0x2D, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80053f6:	f107 0310 	add.w	r3, r7, #16
 80053fa:	2201      	movs	r2, #1
 80053fc:	4619      	mov	r1, r3
 80053fe:	202d      	movs	r0, #45	@ 0x2d
 8005400:	f000 fa18 	bl	8005834 <ADXL343_ReadRegister>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <ADXL343_init+0x222>
 800540a:	4921      	ldr	r1, [pc, #132]	@ (8005490 <ADXL343_init+0x2a0>)
 800540c:	4821      	ldr	r0, [pc, #132]	@ (8005494 <ADXL343_init+0x2a4>)
 800540e:	f011 fbdb 	bl	8016bc8 <debug>
	 * 	D5 		| INT_INVERT = 0 => Inverse le high and low des INT
	 * 	D3 		| FULL_RES = 1 => Max resolution
	 * 	D2 		| JUSTIFY = 0 => LSB
	 * 	D1-D0 	| RANGE = 00 =>  ±2g
	 */
	ADXL343_WriteRegister(0x31, 0<<7|1<<6|1<<3|0b00)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8005412:	2148      	movs	r1, #72	@ 0x48
 8005414:	2031      	movs	r0, #49	@ 0x31
 8005416:	f000 f9ef 	bl	80057f8 <ADXL343_WriteRegister>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <ADXL343_init+0x238>
 8005420:	4920      	ldr	r1, [pc, #128]	@ (80054a4 <ADXL343_init+0x2b4>)
 8005422:	481c      	ldr	r0, [pc, #112]	@ (8005494 <ADXL343_init+0x2a4>)
 8005424:	f011 fbd0 	bl	8016bc8 <debug>
	ADXL343_ReadRegister(0x31, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005428:	f107 0310 	add.w	r3, r7, #16
 800542c:	2201      	movs	r2, #1
 800542e:	4619      	mov	r1, r3
 8005430:	2031      	movs	r0, #49	@ 0x31
 8005432:	f000 f9ff 	bl	8005834 <ADXL343_ReadRegister>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <ADXL343_init+0x254>
 800543c:	4914      	ldr	r1, [pc, #80]	@ (8005490 <ADXL343_init+0x2a0>)
 800543e:	4815      	ldr	r0, [pc, #84]	@ (8005494 <ADXL343_init+0x2a4>)
 8005440:	f011 fbc2 	bl	8016bc8 <debug>
	/* 	0x38—FIFO_CTL
	 * 	D7-D6	| FIFO_MODE = 10 => STREAM
	 * 	D5		| TRIGGER BIT = 1 => Redirige ExINT vers INT2
	 * 	D4-D0	| SAMPLE BITS = 0b10000(16) => Nécessite 16 samples avant de trigger le INT
	 */
	ADXL343_WriteRegister(0x38, ((0b10<<6)| 0b10000))!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8005444:	2190      	movs	r1, #144	@ 0x90
 8005446:	2038      	movs	r0, #56	@ 0x38
 8005448:	f000 f9d6 	bl	80057f8 <ADXL343_WriteRegister>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <ADXL343_init+0x26a>
 8005452:	4914      	ldr	r1, [pc, #80]	@ (80054a4 <ADXL343_init+0x2b4>)
 8005454:	480f      	ldr	r0, [pc, #60]	@ (8005494 <ADXL343_init+0x2a4>)
 8005456:	f011 fbb7 	bl	8016bc8 <debug>
	ADXL343_ReadRegister(0x38, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 800545a:	f107 0310 	add.w	r3, r7, #16
 800545e:	2201      	movs	r2, #1
 8005460:	4619      	mov	r1, r3
 8005462:	2038      	movs	r0, #56	@ 0x38
 8005464:	f000 f9e6 	bl	8005834 <ADXL343_ReadRegister>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <ADXL343_init+0x286>
 800546e:	4908      	ldr	r1, [pc, #32]	@ (8005490 <ADXL343_init+0x2a0>)
 8005470:	4808      	ldr	r0, [pc, #32]	@ (8005494 <ADXL343_init+0x2a4>)
 8005472:	f011 fba9 	bl	8016bc8 <debug>
	//printf("WRITE/READ - FIFO Mode: 0x%02X\r\n",ret);

	/*
	 ************$	ETALONNAGE	$************
	 */
	int32_t sumX = 0, sumY = 0, sumZ = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800547a:	2300      	movs	r3, #0
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
 800547e:	2300      	movs	r3, #0
 8005480:	623b      	str	r3, [r7, #32]
	for (int i=0;i<IMU_SAMPLE_0G;i++){
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	e04a      	b.n	800551e <ADXL343_init+0x32e>
 8005488:	0801b750 	.word	0x0801b750
 800548c:	0801b760 	.word	0x0801b760
 8005490:	0801b774 	.word	0x0801b774
 8005494:	0801b788 	.word	0x0801b788
 8005498:	0801b794 	.word	0x0801b794
 800549c:	20000008 	.word	0x20000008
 80054a0:	0801b7b0 	.word	0x0801b7b0
 80054a4:	0801b7d0 	.word	0x0801b7d0
		XYZ_t accXYZ_0G = ADXL343_getAcc();
 80054a8:	f000 f8f8 	bl	800569c <ADXL343_getAcc>
 80054ac:	eef0 6a40 	vmov.f32	s13, s0
 80054b0:	eeb0 7a60 	vmov.f32	s14, s1
 80054b4:	eef0 7a41 	vmov.f32	s15, s2
 80054b8:	edc7 6a00 	vstr	s13, [r7]
 80054bc:	ed87 7a01 	vstr	s14, [r7, #4]
 80054c0:	edc7 7a02 	vstr	s15, [r7, #8]
		sumX += accXYZ_0G.X;
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054ce:	edd7 7a00 	vldr	s15, [r7]
 80054d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054da:	ee17 3a90 	vmov	r3, s15
 80054de:	62bb      	str	r3, [r7, #40]	@ 0x28
		sumY += accXYZ_0G.Y;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80054ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054f6:	ee17 3a90 	vmov	r3, s15
 80054fa:	627b      	str	r3, [r7, #36]	@ 0x24
		sumZ += accXYZ_0G.Z;
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005506:	edd7 7a02 	vldr	s15, [r7, #8]
 800550a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800550e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005512:	ee17 3a90 	vmov	r3, s15
 8005516:	623b      	str	r3, [r7, #32]
	for (int i=0;i<IMU_SAMPLE_0G;i++){
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	3301      	adds	r3, #1
 800551c:	61fb      	str	r3, [r7, #28]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	2b09      	cmp	r3, #9
 8005522:	ddc1      	ble.n	80054a8 <ADXL343_init+0x2b8>
	}
	// Average
	int16_t avgX = sumX / IMU_SAMPLE_0G;
 8005524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005526:	4a5a      	ldr	r2, [pc, #360]	@ (8005690 <ADXL343_init+0x4a0>)
 8005528:	fb82 1203 	smull	r1, r2, r2, r3
 800552c:	1092      	asrs	r2, r2, #2
 800552e:	17db      	asrs	r3, r3, #31
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	833b      	strh	r3, [r7, #24]
	int16_t avgY = sumY / IMU_SAMPLE_0G;
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	4a56      	ldr	r2, [pc, #344]	@ (8005690 <ADXL343_init+0x4a0>)
 8005538:	fb82 1203 	smull	r1, r2, r2, r3
 800553c:	1092      	asrs	r2, r2, #2
 800553e:	17db      	asrs	r3, r3, #31
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	82fb      	strh	r3, [r7, #22]
	int16_t avgZ = (sumZ / IMU_SAMPLE_0G);//-10;
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	4a52      	ldr	r2, [pc, #328]	@ (8005690 <ADXL343_init+0x4a0>)
 8005548:	fb82 1203 	smull	r1, r2, r2, r3
 800554c:	1092      	asrs	r2, r2, #2
 800554e:	17db      	asrs	r3, r3, #31
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	82bb      	strh	r3, [r7, #20]

	//!\\  Each LSB of output in full-resolution is 3.9 mg or one-quarter of an LSB of the offset register
	uint8_t offsetX = -round((float)avgX / (SENSITIVITY_FULL_RES / SCALE_FACTOR_OFFSET_REG));
 8005554:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005558:	ee07 3a90 	vmov	s15, r3
 800555c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005560:	ee17 0a90 	vmov	r0, s15
 8005564:	f7fd fa22 	bl	80029ac <__aeabi_f2d>
 8005568:	a347      	add	r3, pc, #284	@ (adr r3, 8005688 <ADXL343_init+0x498>)
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	f7fd fb9f 	bl	8002cb0 <__aeabi_ddiv>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	ec43 2b17 	vmov	d7, r2, r3
 800557a:	eeb0 0a47 	vmov.f32	s0, s14
 800557e:	eef0 0a67 	vmov.f32	s1, s15
 8005582:	f015 ffcf 	bl	801b524 <round>
 8005586:	ec53 2b10 	vmov	r2, r3, d0
 800558a:	4692      	mov	sl, r2
 800558c:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8005590:	4650      	mov	r0, sl
 8005592:	4659      	mov	r1, fp
 8005594:	f7fd fd3a 	bl	800300c <__aeabi_d2uiz>
 8005598:	4603      	mov	r3, r0
 800559a:	74fb      	strb	r3, [r7, #19]
	uint8_t offsetY = -round((float)avgY / (SENSITIVITY_FULL_RES / SCALE_FACTOR_OFFSET_REG));
 800559c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055a0:	ee07 3a90 	vmov	s15, r3
 80055a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055a8:	ee17 0a90 	vmov	r0, s15
 80055ac:	f7fd f9fe 	bl	80029ac <__aeabi_f2d>
 80055b0:	a335      	add	r3, pc, #212	@ (adr r3, 8005688 <ADXL343_init+0x498>)
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	f7fd fb7b 	bl	8002cb0 <__aeabi_ddiv>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	ec43 2b17 	vmov	d7, r2, r3
 80055c2:	eeb0 0a47 	vmov.f32	s0, s14
 80055c6:	eef0 0a67 	vmov.f32	s1, s15
 80055ca:	f015 ffab 	bl	801b524 <round>
 80055ce:	ec53 2b10 	vmov	r2, r3, d0
 80055d2:	4690      	mov	r8, r2
 80055d4:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80055d8:	4640      	mov	r0, r8
 80055da:	4649      	mov	r1, r9
 80055dc:	f7fd fd16 	bl	800300c <__aeabi_d2uiz>
 80055e0:	4603      	mov	r3, r0
 80055e2:	74bb      	strb	r3, [r7, #18]
	uint8_t offsetZ = -round((float)(avgZ - SENSITIVITY_FULL_RES) / (SENSITIVITY_FULL_RES / SCALE_FACTOR_OFFSET_REG));
 80055e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80055ec:	ee07 3a90 	vmov	s15, r3
 80055f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f4:	ee17 0a90 	vmov	r0, s15
 80055f8:	f7fd f9d8 	bl	80029ac <__aeabi_f2d>
 80055fc:	a322      	add	r3, pc, #136	@ (adr r3, 8005688 <ADXL343_init+0x498>)
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f7fd fb55 	bl	8002cb0 <__aeabi_ddiv>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	ec43 2b17 	vmov	d7, r2, r3
 800560e:	eeb0 0a47 	vmov.f32	s0, s14
 8005612:	eef0 0a67 	vmov.f32	s1, s15
 8005616:	f015 ff85 	bl	801b524 <round>
 800561a:	ec53 2b10 	vmov	r2, r3, d0
 800561e:	4614      	mov	r4, r2
 8005620:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8005624:	4620      	mov	r0, r4
 8005626:	4629      	mov	r1, r5
 8005628:	f7fd fcf0 	bl	800300c <__aeabi_d2uiz>
 800562c:	4603      	mov	r3, r0
 800562e:	747b      	strb	r3, [r7, #17]

	ADXL343_WriteRegister(0x1E, offsetX)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005630:	7cfb      	ldrb	r3, [r7, #19]
 8005632:	4619      	mov	r1, r3
 8005634:	201e      	movs	r0, #30
 8005636:	f000 f8df 	bl	80057f8 <ADXL343_WriteRegister>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <ADXL343_init+0x458>
 8005640:	4914      	ldr	r1, [pc, #80]	@ (8005694 <ADXL343_init+0x4a4>)
 8005642:	4815      	ldr	r0, [pc, #84]	@ (8005698 <ADXL343_init+0x4a8>)
 8005644:	f011 fac0 	bl	8016bc8 <debug>
	ADXL343_WriteRegister(0x1F, offsetY)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005648:	7cbb      	ldrb	r3, [r7, #18]
 800564a:	4619      	mov	r1, r3
 800564c:	201f      	movs	r0, #31
 800564e:	f000 f8d3 	bl	80057f8 <ADXL343_WriteRegister>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <ADXL343_init+0x470>
 8005658:	490e      	ldr	r1, [pc, #56]	@ (8005694 <ADXL343_init+0x4a4>)
 800565a:	480f      	ldr	r0, [pc, #60]	@ (8005698 <ADXL343_init+0x4a8>)
 800565c:	f011 fab4 	bl	8016bc8 <debug>
	ADXL343_WriteRegister(0x20, offsetZ)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005660:	7c7b      	ldrb	r3, [r7, #17]
 8005662:	4619      	mov	r1, r3
 8005664:	2020      	movs	r0, #32
 8005666:	f000 f8c7 	bl	80057f8 <ADXL343_WriteRegister>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <ADXL343_init+0x488>
 8005670:	4908      	ldr	r1, [pc, #32]	@ (8005694 <ADXL343_init+0x4a4>)
 8005672:	4809      	ldr	r0, [pc, #36]	@ (8005698 <ADXL343_init+0x4a8>)
 8005674:	f011 faa8 	bl	8016bc8 <debug>
}
 8005678:	bf00      	nop
 800567a:	3730      	adds	r7, #48	@ 0x30
 800567c:	46bd      	mov	sp, r7
 800567e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005682:	bf00      	nop
 8005684:	f3af 8000 	nop.w
 8005688:	90690691 	.word	0x90690691
 800568c:	40306906 	.word	0x40306906
 8005690:	66666667 	.word	0x66666667
 8005694:	0801b774 	.word	0x0801b774
 8005698:	0801b788 	.word	0x0801b788

0800569c <ADXL343_getAcc>:
//Resort la valeur en mm/s2
XYZ_t ADXL343_getAcc(void){
 800569c:	b580      	push	{r7, lr}
 800569e:	b08e      	sub	sp, #56	@ 0x38
 80056a0:	af00      	add	r7, sp, #0
	XYZ_t accXYZ;
	int8_t a_x[2]={0,0};
 80056a2:	2300      	movs	r3, #0
 80056a4:	83bb      	strh	r3, [r7, #28]
	int8_t a_y[2]={0,0};
 80056a6:	2300      	movs	r3, #0
 80056a8:	833b      	strh	r3, [r7, #24]
	int8_t a_z[2]={0,0};
 80056aa:	2300      	movs	r3, #0
 80056ac:	82bb      	strh	r3, [r7, #20]

	ADXL343_ReadRegister(0x32, (uint8_t*)a_x, 2)!=HAL_OK ? debug(D_ERROR,"I2C RECEIVE in ReadREGISTER"):(void)0;
 80056ae:	f107 031c 	add.w	r3, r7, #28
 80056b2:	2202      	movs	r2, #2
 80056b4:	4619      	mov	r1, r3
 80056b6:	2032      	movs	r0, #50	@ 0x32
 80056b8:	f000 f8bc 	bl	8005834 <ADXL343_ReadRegister>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <ADXL343_getAcc+0x2e>
 80056c2:	494b      	ldr	r1, [pc, #300]	@ (80057f0 <ADXL343_getAcc+0x154>)
 80056c4:	484b      	ldr	r0, [pc, #300]	@ (80057f4 <ADXL343_getAcc+0x158>)
 80056c6:	f011 fa7f 	bl	8016bc8 <debug>
	ADXL343_ReadRegister(0x34, (uint8_t*)a_y, 2)!=HAL_OK ? debug(D_ERROR,"I2C RECEIVE in ReadREGISTER"):(void)0;
 80056ca:	f107 0318 	add.w	r3, r7, #24
 80056ce:	2202      	movs	r2, #2
 80056d0:	4619      	mov	r1, r3
 80056d2:	2034      	movs	r0, #52	@ 0x34
 80056d4:	f000 f8ae 	bl	8005834 <ADXL343_ReadRegister>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <ADXL343_getAcc+0x4a>
 80056de:	4944      	ldr	r1, [pc, #272]	@ (80057f0 <ADXL343_getAcc+0x154>)
 80056e0:	4844      	ldr	r0, [pc, #272]	@ (80057f4 <ADXL343_getAcc+0x158>)
 80056e2:	f011 fa71 	bl	8016bc8 <debug>
	ADXL343_ReadRegister(0x36, (uint8_t*)a_z, 2)!=HAL_OK ? debug(D_ERROR,"I2C RECEIVE in ReadREGISTER"):(void)0;
 80056e6:	f107 0314 	add.w	r3, r7, #20
 80056ea:	2202      	movs	r2, #2
 80056ec:	4619      	mov	r1, r3
 80056ee:	2036      	movs	r0, #54	@ 0x36
 80056f0:	f000 f8a0 	bl	8005834 <ADXL343_ReadRegister>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <ADXL343_getAcc+0x66>
 80056fa:	493d      	ldr	r1, [pc, #244]	@ (80057f0 <ADXL343_getAcc+0x154>)
 80056fc:	483d      	ldr	r0, [pc, #244]	@ (80057f4 <ADXL343_getAcc+0x158>)
 80056fe:	f011 fa63 	bl	8016bc8 <debug>
	accXYZ.X = (int16_t)(	a_x[1] << 8 | a_x[0]	)*ADXL_SENSIBILITY; //g.e-3 ie mm.s-2
 8005702:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005706:	021b      	lsls	r3, r3, #8
 8005708:	b21b      	sxth	r3, r3
 800570a:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800570e:	4313      	orrs	r3, r2
 8005710:	b21b      	sxth	r3, r3
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	ee07 3a90 	vmov	s15, r3
 8005718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800571c:	edc7 7a08 	vstr	s15, [r7, #32]
	accXYZ.Y = (int16_t)(	a_y[1] << 8 | a_y[0]	)*ADXL_SENSIBILITY;
 8005720:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	b21b      	sxth	r3, r3
 8005728:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800572c:	4313      	orrs	r3, r2
 800572e:	b21b      	sxth	r3, r3
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800573a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	accXYZ.Z = (int16_t)(	a_z[1] << 8 | a_z[0]	)*ADXL_SENSIBILITY;
 800573e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	b21b      	sxth	r3, r3
 8005746:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	b21b      	sxth	r3, r3
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	ee07 3a90 	vmov	s15, r3
 8005754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005758:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	/** FILTRAGE **/
	accXYZ.X = abs(accXYZ.X)>=MM_S2_SEUIL ? accXYZ.X:0;
 800575c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005764:	ee17 3a90 	vmov	r3, s15
 8005768:	2b00      	cmp	r3, #0
 800576a:	bfb8      	it	lt
 800576c:	425b      	neglt	r3, r3
 800576e:	2b27      	cmp	r3, #39	@ 0x27
 8005770:	dd01      	ble.n	8005776 <ADXL343_getAcc+0xda>
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	e001      	b.n	800577a <ADXL343_getAcc+0xde>
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	623b      	str	r3, [r7, #32]
	accXYZ.Y = abs(accXYZ.Y)>=MM_S2_SEUIL ? accXYZ.Y:0;
 800577c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005784:	ee17 3a90 	vmov	r3, s15
 8005788:	2b00      	cmp	r3, #0
 800578a:	bfb8      	it	lt
 800578c:	425b      	neglt	r3, r3
 800578e:	2b27      	cmp	r3, #39	@ 0x27
 8005790:	dd01      	ble.n	8005796 <ADXL343_getAcc+0xfa>
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	e001      	b.n	800579a <ADXL343_getAcc+0xfe>
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24
	accXYZ.Z = abs(accXYZ.Z)>=MM_S2_SEUIL ? accXYZ.Z:0;
 800579c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80057a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057a4:	ee17 3a90 	vmov	r3, s15
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	bfb8      	it	lt
 80057ac:	425b      	neglt	r3, r3
 80057ae:	2b27      	cmp	r3, #39	@ 0x27
 80057b0:	dd01      	ble.n	80057b6 <ADXL343_getAcc+0x11a>
 80057b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b4:	e001      	b.n	80057ba <ADXL343_getAcc+0x11e>
 80057b6:	f04f 0300 	mov.w	r3, #0
 80057ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	return accXYZ;
 80057bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80057c0:	f107 0220 	add.w	r2, r7, #32
 80057c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80057c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80057ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d0:	ee06 1a90 	vmov	s13, r1
 80057d4:	ee07 2a10 	vmov	s14, r2
 80057d8:	ee07 3a90 	vmov	s15, r3
	/*
	 * Pour obtenir vitesse et position : CallBack dans fichier .IT
	 */
}
 80057dc:	eeb0 0a66 	vmov.f32	s0, s13
 80057e0:	eef0 0a47 	vmov.f32	s1, s14
 80057e4:	eeb0 1a67 	vmov.f32	s2, s15
 80057e8:	3738      	adds	r7, #56	@ 0x38
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	0801b7e8 	.word	0x0801b7e8
 80057f4:	0801b788 	.word	0x0801b788

080057f8 <ADXL343_WriteRegister>:

HAL_StatusTypeDef ADXL343_WriteRegister(uint8_t reg, uint8_t data){
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	4603      	mov	r3, r0
 8005800:	460a      	mov	r2, r1
 8005802:	71fb      	strb	r3, [r7, #7]
 8005804:	4613      	mov	r3, r2
 8005806:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2]={reg,data};
 8005808:	79fb      	ldrb	r3, [r7, #7]
 800580a:	733b      	strb	r3, [r7, #12]
 800580c:	79bb      	ldrb	r3, [r7, #6]
 800580e:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&I2C_IMU, (uint16_t)(ADXL_ADRR<<1), buffer, 2 ,HAL_MAX_DELAY);
 8005810:	f107 020c 	add.w	r2, r7, #12
 8005814:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	2302      	movs	r3, #2
 800581c:	21a6      	movs	r1, #166	@ 0xa6
 800581e:	4804      	ldr	r0, [pc, #16]	@ (8005830 <ADXL343_WriteRegister+0x38>)
 8005820:	f003 fa9a 	bl	8008d58 <HAL_I2C_Master_Transmit>
 8005824:	4603      	mov	r3, r0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000668 	.word	0x20000668

08005834 <ADXL343_ReadRegister>:

HAL_StatusTypeDef ADXL343_ReadRegister(uint8_t reg, uint8_t* recptData, uint8_t lenData){
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af02      	add	r7, sp, #8
 800583a:	4603      	mov	r3, r0
 800583c:	6039      	str	r1, [r7, #0]
 800583e:	71fb      	strb	r3, [r7, #7]
 8005840:	4613      	mov	r3, r2
 8005842:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&I2C_IMU, (uint16_t)(ADXL_ADRR<<1), &reg, 1 ,HAL_MAX_DELAY)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in ReadREGISTER"):(void)0;
 8005844:	1dfa      	adds	r2, r7, #7
 8005846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	2301      	movs	r3, #1
 800584e:	21a6      	movs	r1, #166	@ 0xa6
 8005850:	480c      	ldr	r0, [pc, #48]	@ (8005884 <ADXL343_ReadRegister+0x50>)
 8005852:	f003 fa81 	bl	8008d58 <HAL_I2C_Master_Transmit>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <ADXL343_ReadRegister+0x30>
 800585c:	490a      	ldr	r1, [pc, #40]	@ (8005888 <ADXL343_ReadRegister+0x54>)
 800585e:	480b      	ldr	r0, [pc, #44]	@ (800588c <ADXL343_ReadRegister+0x58>)
 8005860:	f011 f9b2 	bl	8016bc8 <debug>
	return HAL_I2C_Master_Receive(&I2C_IMU, (uint16_t)(ADXL_ADRR<<1), recptData, lenData ,HAL_MAX_DELAY);
 8005864:	79bb      	ldrb	r3, [r7, #6]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800586c:	9200      	str	r2, [sp, #0]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	21a6      	movs	r1, #166	@ 0xa6
 8005872:	4804      	ldr	r0, [pc, #16]	@ (8005884 <ADXL343_ReadRegister+0x50>)
 8005874:	f003 fb88 	bl	8008f88 <HAL_I2C_Master_Receive>
 8005878:	4603      	mov	r3, r0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000668 	.word	0x20000668
 8005888:	0801b804 	.word	0x0801b804
 800588c:	0801b788 	.word	0x0801b788

08005890 <LP5812_Init>:
#define LP5812_I2C_INDEP_ADDR 0x1C
#define I2C_MAIN hi2c3


// Fonctions de configuration du LP5812
void LP5812_Init(void) {
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
	debug(INFORMATION,"LP5812 - INIT");
 8005894:	4960      	ldr	r1, [pc, #384]	@ (8005a18 <LP5812_Init+0x188>)
 8005896:	4861      	ldr	r0, [pc, #388]	@ (8005a1c <LP5812_Init+0x18c>)
 8005898:	f011 f996 	bl	8016bc8 <debug>
	// Activer les LEDs en écrivant dans le registre ENABLE
	/*
	 * Set chip_en = 1 to enable the device
	 */
	LP5812_WriteRegister(0x000,0x01)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 800589c:	2101      	movs	r1, #1
 800589e:	2000      	movs	r0, #0
 80058a0:	f000 f8c2 	bl	8005a28 <LP5812_WriteRegister>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <LP5812_Init+0x22>
 80058aa:	495d      	ldr	r1, [pc, #372]	@ (8005a20 <LP5812_Init+0x190>)
 80058ac:	485d      	ldr	r0, [pc, #372]	@ (8005a24 <LP5812_Init+0x194>)
 80058ae:	f011 f98b 	bl	8016bc8 <debug>
	/*
	 * Set led_mode = 4h to configure the LED drive mode as direct drive mode.
	 */
	LP5812_WriteRegister(0x002,0x40)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80058b2:	2140      	movs	r1, #64	@ 0x40
 80058b4:	2002      	movs	r0, #2
 80058b6:	f000 f8b7 	bl	8005a28 <LP5812_WriteRegister>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <LP5812_Init+0x38>
 80058c0:	4957      	ldr	r1, [pc, #348]	@ (8005a20 <LP5812_Init+0x190>)
 80058c2:	4858      	ldr	r0, [pc, #352]	@ (8005a24 <LP5812_Init+0x194>)
 80058c4:	f011 f980 	bl	8016bc8 <debug>
	/*
	 * Send update command to complete configuration settings
	 */
	LP5812_WriteRegister(0x010,0x55)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80058c8:	2155      	movs	r1, #85	@ 0x55
 80058ca:	2010      	movs	r0, #16
 80058cc:	f000 f8ac 	bl	8005a28 <LP5812_WriteRegister>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <LP5812_Init+0x4e>
 80058d6:	4952      	ldr	r1, [pc, #328]	@ (8005a20 <LP5812_Init+0x190>)
 80058d8:	4852      	ldr	r0, [pc, #328]	@ (8005a24 <LP5812_Init+0x194>)
 80058da:	f011 f975 	bl	8016bc8 <debug>
	//Lire le registre 300h pou être certain que la configuration est bonne

	/*
	 * Enable all 12 LEDs (Write F0h to register 020h and FFh to register 021h)
	 */
	LP5812_WriteRegister(0x020,0xF0)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80058de:	21f0      	movs	r1, #240	@ 0xf0
 80058e0:	2020      	movs	r0, #32
 80058e2:	f000 f8a1 	bl	8005a28 <LP5812_WriteRegister>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <LP5812_Init+0x64>
 80058ec:	494c      	ldr	r1, [pc, #304]	@ (8005a20 <LP5812_Init+0x190>)
 80058ee:	484d      	ldr	r0, [pc, #308]	@ (8005a24 <LP5812_Init+0x194>)
 80058f0:	f011 f96a 	bl	8016bc8 <debug>
	LP5812_WriteRegister(0x021,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80058f4:	21ff      	movs	r1, #255	@ 0xff
 80058f6:	2021      	movs	r0, #33	@ 0x21
 80058f8:	f000 f896 	bl	8005a28 <LP5812_WriteRegister>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <LP5812_Init+0x7a>
 8005902:	4947      	ldr	r1, [pc, #284]	@ (8005a20 <LP5812_Init+0x190>)
 8005904:	4847      	ldr	r0, [pc, #284]	@ (8005a24 <LP5812_Init+0x194>)
 8005906:	f011 f95f 	bl	8016bc8 <debug>
	/*
	 * 	Set 51mA peak current for red LEDs (Write FFh to registers 035h, 038h, 03Bh, 03Eh) , and 40mA peak
	 *	current for green and blue LEDs (Write CCh to registers 034h, 036h, 037h, 039h, 03Ah, 03Ch, 03Dh,
		03Fh)
	 */
	LP5812_WriteRegister(0x035,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 800590a:	21ff      	movs	r1, #255	@ 0xff
 800590c:	2035      	movs	r0, #53	@ 0x35
 800590e:	f000 f88b 	bl	8005a28 <LP5812_WriteRegister>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <LP5812_Init+0x90>
 8005918:	4941      	ldr	r1, [pc, #260]	@ (8005a20 <LP5812_Init+0x190>)
 800591a:	4842      	ldr	r0, [pc, #264]	@ (8005a24 <LP5812_Init+0x194>)
 800591c:	f011 f954 	bl	8016bc8 <debug>
	LP5812_WriteRegister(0x038,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005920:	21ff      	movs	r1, #255	@ 0xff
 8005922:	2038      	movs	r0, #56	@ 0x38
 8005924:	f000 f880 	bl	8005a28 <LP5812_WriteRegister>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <LP5812_Init+0xa6>
 800592e:	493c      	ldr	r1, [pc, #240]	@ (8005a20 <LP5812_Init+0x190>)
 8005930:	483c      	ldr	r0, [pc, #240]	@ (8005a24 <LP5812_Init+0x194>)
 8005932:	f011 f949 	bl	8016bc8 <debug>
	LP5812_WriteRegister(0x03B,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005936:	21ff      	movs	r1, #255	@ 0xff
 8005938:	203b      	movs	r0, #59	@ 0x3b
 800593a:	f000 f875 	bl	8005a28 <LP5812_WriteRegister>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <LP5812_Init+0xbc>
 8005944:	4936      	ldr	r1, [pc, #216]	@ (8005a20 <LP5812_Init+0x190>)
 8005946:	4837      	ldr	r0, [pc, #220]	@ (8005a24 <LP5812_Init+0x194>)
 8005948:	f011 f93e 	bl	8016bc8 <debug>
	LP5812_WriteRegister(0x03E,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 800594c:	21ff      	movs	r1, #255	@ 0xff
 800594e:	203e      	movs	r0, #62	@ 0x3e
 8005950:	f000 f86a 	bl	8005a28 <LP5812_WriteRegister>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <LP5812_Init+0xd2>
 800595a:	4931      	ldr	r1, [pc, #196]	@ (8005a20 <LP5812_Init+0x190>)
 800595c:	4831      	ldr	r0, [pc, #196]	@ (8005a24 <LP5812_Init+0x194>)
 800595e:	f011 f933 	bl	8016bc8 <debug>
	/*	RED - BLUE And GREEN	*/
	LP5812_WriteRegister(0x034,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005962:	21cc      	movs	r1, #204	@ 0xcc
 8005964:	2034      	movs	r0, #52	@ 0x34
 8005966:	f000 f85f 	bl	8005a28 <LP5812_WriteRegister>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <LP5812_Init+0xe8>
 8005970:	492b      	ldr	r1, [pc, #172]	@ (8005a20 <LP5812_Init+0x190>)
 8005972:	482c      	ldr	r0, [pc, #176]	@ (8005a24 <LP5812_Init+0x194>)
 8005974:	f011 f928 	bl	8016bc8 <debug>
	LP5812_WriteRegister(0x036,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005978:	21cc      	movs	r1, #204	@ 0xcc
 800597a:	2036      	movs	r0, #54	@ 0x36
 800597c:	f000 f854 	bl	8005a28 <LP5812_WriteRegister>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <LP5812_Init+0xfe>
 8005986:	4926      	ldr	r1, [pc, #152]	@ (8005a20 <LP5812_Init+0x190>)
 8005988:	4826      	ldr	r0, [pc, #152]	@ (8005a24 <LP5812_Init+0x194>)
 800598a:	f011 f91d 	bl	8016bc8 <debug>
	LP5812_WriteRegister(0x037,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 800598e:	21cc      	movs	r1, #204	@ 0xcc
 8005990:	2037      	movs	r0, #55	@ 0x37
 8005992:	f000 f849 	bl	8005a28 <LP5812_WriteRegister>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <LP5812_Init+0x114>
 800599c:	4920      	ldr	r1, [pc, #128]	@ (8005a20 <LP5812_Init+0x190>)
 800599e:	4821      	ldr	r0, [pc, #132]	@ (8005a24 <LP5812_Init+0x194>)
 80059a0:	f011 f912 	bl	8016bc8 <debug>
	LP5812_WriteRegister(0x039,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80059a4:	21cc      	movs	r1, #204	@ 0xcc
 80059a6:	2039      	movs	r0, #57	@ 0x39
 80059a8:	f000 f83e 	bl	8005a28 <LP5812_WriteRegister>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <LP5812_Init+0x12a>
 80059b2:	491b      	ldr	r1, [pc, #108]	@ (8005a20 <LP5812_Init+0x190>)
 80059b4:	481b      	ldr	r0, [pc, #108]	@ (8005a24 <LP5812_Init+0x194>)
 80059b6:	f011 f907 	bl	8016bc8 <debug>
	LP5812_WriteRegister(0x03A,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80059ba:	21cc      	movs	r1, #204	@ 0xcc
 80059bc:	203a      	movs	r0, #58	@ 0x3a
 80059be:	f000 f833 	bl	8005a28 <LP5812_WriteRegister>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <LP5812_Init+0x140>
 80059c8:	4915      	ldr	r1, [pc, #84]	@ (8005a20 <LP5812_Init+0x190>)
 80059ca:	4816      	ldr	r0, [pc, #88]	@ (8005a24 <LP5812_Init+0x194>)
 80059cc:	f011 f8fc 	bl	8016bc8 <debug>
	LP5812_WriteRegister(0x03C,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80059d0:	21cc      	movs	r1, #204	@ 0xcc
 80059d2:	203c      	movs	r0, #60	@ 0x3c
 80059d4:	f000 f828 	bl	8005a28 <LP5812_WriteRegister>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <LP5812_Init+0x156>
 80059de:	4910      	ldr	r1, [pc, #64]	@ (8005a20 <LP5812_Init+0x190>)
 80059e0:	4810      	ldr	r0, [pc, #64]	@ (8005a24 <LP5812_Init+0x194>)
 80059e2:	f011 f8f1 	bl	8016bc8 <debug>
	LP5812_WriteRegister(0x03D,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80059e6:	21cc      	movs	r1, #204	@ 0xcc
 80059e8:	203d      	movs	r0, #61	@ 0x3d
 80059ea:	f000 f81d 	bl	8005a28 <LP5812_WriteRegister>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <LP5812_Init+0x16c>
 80059f4:	490a      	ldr	r1, [pc, #40]	@ (8005a20 <LP5812_Init+0x190>)
 80059f6:	480b      	ldr	r0, [pc, #44]	@ (8005a24 <LP5812_Init+0x194>)
 80059f8:	f011 f8e6 	bl	8016bc8 <debug>
	LP5812_WriteRegister(0x03F,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80059fc:	21cc      	movs	r1, #204	@ 0xcc
 80059fe:	203f      	movs	r0, #63	@ 0x3f
 8005a00:	f000 f812 	bl	8005a28 <LP5812_WriteRegister>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <LP5812_Init+0x182>
 8005a0a:	4905      	ldr	r1, [pc, #20]	@ (8005a20 <LP5812_Init+0x190>)
 8005a0c:	4805      	ldr	r0, [pc, #20]	@ (8005a24 <LP5812_Init+0x194>)
 8005a0e:	f011 f8db 	bl	8016bc8 <debug>
*/
	/*//!\\Attention : L'adresse du composant est sur 2 bytes :
	 *				1er bytes est composé de R/W +  2dernier bytes du registres ciblé + Broadcast/Speci
	 *				2eme byte composé du reste du registre cible
	 */
}
 8005a12:	bf00      	nop
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	0801b824 	.word	0x0801b824
 8005a1c:	0801b834 	.word	0x0801b834
 8005a20:	0801b848 	.word	0x0801b848
 8005a24:	0801b854 	.word	0x0801b854

08005a28 <LP5812_WriteRegister>:


// Fonction pour écrire dans un registre 16 bits du LP5812
HAL_StatusTypeDef LP5812_WriteRegister(uint16_t reg, uint8_t data) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	4603      	mov	r3, r0
 8005a30:	460a      	mov	r2, r1
 8005a32:	80fb      	strh	r3, [r7, #6]
 8005a34:	4613      	mov	r3, r2
 8005a36:	717b      	strb	r3, [r7, #5]
	uint8_t addr_byte1, addr_byte2;
	uint8_t buffer[3];

	// Configuration des Address Byte 1 et Address Byte 2
	addr_byte1 = (LP5812_I2C_BASE_ADDR << 3) | ((reg >> 8) & 0x03);  // 5 bits d'adresse et 2 bits supérieurs du registre
 8005a38:	88fb      	ldrh	r3, [r7, #6]
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	b25b      	sxtb	r3, r3
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	b25b      	sxtb	r3, r3
 8005a46:	f063 0327 	orn	r3, r3, #39	@ 0x27
 8005a4a:	b25b      	sxtb	r3, r3
 8005a4c:	73fb      	strb	r3, [r7, #15]
	addr_byte2 = (uint8_t)(reg & 0xFF);                               // 8 bits inférieurs du registre
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	73bb      	strb	r3, [r7, #14]

	// Préparer les données à envoyer : Address Byte 2 et Data
	buffer[0] = addr_byte2;
 8005a52:	7bbb      	ldrb	r3, [r7, #14]
 8005a54:	723b      	strb	r3, [r7, #8]
	buffer[1] = data;
 8005a56:	797b      	ldrb	r3, [r7, #5]
 8005a58:	727b      	strb	r3, [r7, #9]

	// Envoyer Address Byte 1, puis buffer
	return HAL_I2C_Master_Transmit(&hi2c3, addr_byte1, buffer, 2, HAL_MAX_DELAY);
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	b299      	uxth	r1, r3
 8005a5e:	f107 0208 	add.w	r2, r7, #8
 8005a62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	2302      	movs	r3, #2
 8005a6a:	4804      	ldr	r0, [pc, #16]	@ (8005a7c <LP5812_WriteRegister+0x54>)
 8005a6c:	f003 f974 	bl	8008d58 <HAL_I2C_Master_Transmit>
 8005a70:	4603      	mov	r3, r0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	200006bc 	.word	0x200006bc

08005a80 <TCA9555_init>:
		{"POLARITY INVERSION PORT 0",	0x04},
		{"POLARITY INVERSION PORT 1",	0x05},
		{"CONFIGURATION PORT 0",	0x06},
		{"CONFIGURATION PORT 1",	0x07},
};
void TCA9555_init(void){
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
	debug(INFORMATION,"TCA9555 - INIT");
 8005a86:	492a      	ldr	r1, [pc, #168]	@ (8005b30 <TCA9555_init+0xb0>)
 8005a88:	482a      	ldr	r0, [pc, #168]	@ (8005b34 <TCA9555_init+0xb4>)
 8005a8a:	f011 f89d 	bl	8016bc8 <debug>

	TCA9555_WriteRegister(0x06, 0b11111111)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in WriteREGISTER"):(void)0;
 8005a8e:	21ff      	movs	r1, #255	@ 0xff
 8005a90:	2006      	movs	r0, #6
 8005a92:	f000 f859 	bl	8005b48 <TCA9555_WriteRegister>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <TCA9555_init+0x24>
 8005a9c:	4926      	ldr	r1, [pc, #152]	@ (8005b38 <TCA9555_init+0xb8>)
 8005a9e:	4827      	ldr	r0, [pc, #156]	@ (8005b3c <TCA9555_init+0xbc>)
 8005aa0:	f011 f892 	bl	8016bc8 <debug>
	TCA9555_WriteRegister(0x07, 0b11001111)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in WriteREGISTER"):(void)0;
 8005aa4:	21cf      	movs	r1, #207	@ 0xcf
 8005aa6:	2007      	movs	r0, #7
 8005aa8:	f000 f84e 	bl	8005b48 <TCA9555_WriteRegister>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <TCA9555_init+0x3a>
 8005ab2:	4921      	ldr	r1, [pc, #132]	@ (8005b38 <TCA9555_init+0xb8>)
 8005ab4:	4821      	ldr	r0, [pc, #132]	@ (8005b3c <TCA9555_init+0xbc>)
 8005ab6:	f011 f887 	bl	8016bc8 <debug>
	TCA9555_WriteRegister(0x05, 0b11001111)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in WriteREGISTER"):(void)0;
 8005aba:	21cf      	movs	r1, #207	@ 0xcf
 8005abc:	2005      	movs	r0, #5
 8005abe:	f000 f843 	bl	8005b48 <TCA9555_WriteRegister>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <TCA9555_init+0x50>
 8005ac8:	491b      	ldr	r1, [pc, #108]	@ (8005b38 <TCA9555_init+0xb8>)
 8005aca:	481c      	ldr	r0, [pc, #112]	@ (8005b3c <TCA9555_init+0xbc>)
 8005acc:	f011 f87c 	bl	8016bc8 <debug>

	uint8_t startReg = 0x00;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	70fb      	strb	r3, [r7, #3]
	uint8_t endReg = 0x07;
 8005ad4:	2307      	movs	r3, #7
 8005ad6:	70bb      	strb	r3, [r7, #2]
	for (int i = 0; i <= endReg-startReg; i++) {
 8005ad8:	2300      	movs	r3, #0
 8005ada:	607b      	str	r3, [r7, #4]
 8005adc:	e01c      	b.n	8005b18 <TCA9555_init+0x98>
		uint8_t ret=0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	707b      	strb	r3, [r7, #1]
		TCA9555_ReadRegister(GPIOExpRegister[i].reg, &ret,1);
 8005ae2:	4a17      	ldr	r2, [pc, #92]	@ (8005b40 <TCA9555_init+0xc0>)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	4413      	add	r3, r2
 8005aea:	791b      	ldrb	r3, [r3, #4]
 8005aec:	1c79      	adds	r1, r7, #1
 8005aee:	2201      	movs	r2, #1
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 f847 	bl	8005b84 <TCA9555_ReadRegister>
		printf("READ - 0x%02X (%s): 0x%02X\r\n", GPIOExpRegister[i].reg,GPIOExpRegister[i].name, ret);
 8005af6:	4a12      	ldr	r2, [pc, #72]	@ (8005b40 <TCA9555_init+0xc0>)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4413      	add	r3, r2
 8005afe:	791b      	ldrb	r3, [r3, #4]
 8005b00:	4619      	mov	r1, r3
 8005b02:	4a0f      	ldr	r2, [pc, #60]	@ (8005b40 <TCA9555_init+0xc0>)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005b0a:	787b      	ldrb	r3, [r7, #1]
 8005b0c:	480d      	ldr	r0, [pc, #52]	@ (8005b44 <TCA9555_init+0xc4>)
 8005b0e:	f012 ff01 	bl	8018914 <iprintf>
	for (int i = 0; i <= endReg-startReg; i++) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3301      	adds	r3, #1
 8005b16:	607b      	str	r3, [r7, #4]
 8005b18:	78ba      	ldrb	r2, [r7, #2]
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	dddc      	ble.n	8005ade <TCA9555_init+0x5e>
	}
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	0801b928 	.word	0x0801b928
 8005b34:	0801b938 	.word	0x0801b938
 8005b38:	0801b94c 	.word	0x0801b94c
 8005b3c:	0801b96c 	.word	0x0801b96c
 8005b40:	200000f8 	.word	0x200000f8
 8005b44:	0801b978 	.word	0x0801b978

08005b48 <TCA9555_WriteRegister>:

HAL_StatusTypeDef TCA9555_WriteRegister(uint8_t reg, uint8_t data){
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	4603      	mov	r3, r0
 8005b50:	460a      	mov	r2, r1
 8005b52:	71fb      	strb	r3, [r7, #7]
 8005b54:	4613      	mov	r3, r2
 8005b56:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2]={reg,data};
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	733b      	strb	r3, [r7, #12]
 8005b5c:	79bb      	ldrb	r3, [r7, #6]
 8005b5e:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&I2C_MAIN, (uint16_t)(TCA9555_ADRR<<1), buffer, 2 ,HAL_MAX_DELAY);
 8005b60:	f107 020c 	add.w	r2, r7, #12
 8005b64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	2140      	movs	r1, #64	@ 0x40
 8005b6e:	4804      	ldr	r0, [pc, #16]	@ (8005b80 <TCA9555_WriteRegister+0x38>)
 8005b70:	f003 f8f2 	bl	8008d58 <HAL_I2C_Master_Transmit>
 8005b74:	4603      	mov	r3, r0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	200006bc 	.word	0x200006bc

08005b84 <TCA9555_ReadRegister>:
HAL_StatusTypeDef TCA9555_ReadRegister(uint8_t reg, uint8_t* recptData, uint8_t lenData){
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	71fb      	strb	r3, [r7, #7]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&I2C_MAIN, (uint16_t)(TCA9555_ADRR<<1), &reg, 1 ,HAL_MAX_DELAY) !=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in ReadREGISTER"):(void)0;
 8005b94:	1dfa      	adds	r2, r7, #7
 8005b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	2140      	movs	r1, #64	@ 0x40
 8005ba0:	480c      	ldr	r0, [pc, #48]	@ (8005bd4 <TCA9555_ReadRegister+0x50>)
 8005ba2:	f003 f8d9 	bl	8008d58 <HAL_I2C_Master_Transmit>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <TCA9555_ReadRegister+0x30>
 8005bac:	490a      	ldr	r1, [pc, #40]	@ (8005bd8 <TCA9555_ReadRegister+0x54>)
 8005bae:	480b      	ldr	r0, [pc, #44]	@ (8005bdc <TCA9555_ReadRegister+0x58>)
 8005bb0:	f011 f80a 	bl	8016bc8 <debug>
	return HAL_I2C_Master_Receive(&I2C_MAIN, (uint16_t)(TCA9555_ADRR<<1), recptData, lenData ,HAL_MAX_DELAY);
 8005bb4:	79bb      	ldrb	r3, [r7, #6]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bbc:	9200      	str	r2, [sp, #0]
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	2140      	movs	r1, #64	@ 0x40
 8005bc2:	4804      	ldr	r0, [pc, #16]	@ (8005bd4 <TCA9555_ReadRegister+0x50>)
 8005bc4:	f003 f9e0 	bl	8008f88 <HAL_I2C_Master_Receive>
 8005bc8:	4603      	mov	r3, r0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200006bc 	.word	0x200006bc
 8005bd8:	0801b998 	.word	0x0801b998
 8005bdc:	0801b96c 	.word	0x0801b96c

08005be0 <ZXB5210_init>:
MDriver_Config_t MDriver2_FWD_Config;
MDriver_Config_t MDriver2_REV_Config;

int isSpeedInit = 0;

void ZXB5210_init(void){
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b096      	sub	sp, #88	@ 0x58
 8005be4:	af00      	add	r7, sp, #0
	debug(INFORMATION,"ZXB5210 - INIT");
 8005be6:	4946      	ldr	r1, [pc, #280]	@ (8005d00 <ZXB5210_init+0x120>)
 8005be8:	4846      	ldr	r0, [pc, #280]	@ (8005d04 <ZXB5210_init+0x124>)
 8005bea:	f010 ffed 	bl	8016bc8 <debug>
	MDriver1_FWD_Config = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_3,.CCR_Channel = &htim2.Instance->CCR3,.pulseGoal = 0, .offset=0}; //28 Surement inutlie si l'asservissement en vitesse fonctionne un jour
 8005bee:	4b46      	ldr	r3, [pc, #280]	@ (8005d08 <ZXB5210_init+0x128>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	333c      	adds	r3, #60	@ 0x3c
 8005bf4:	4a45      	ldr	r2, [pc, #276]	@ (8005d0c <ZXB5210_init+0x12c>)
 8005bf6:	2108      	movs	r1, #8
 8005bf8:	6011      	str	r1, [r2, #0]
 8005bfa:	4a44      	ldr	r2, [pc, #272]	@ (8005d0c <ZXB5210_init+0x12c>)
 8005bfc:	6053      	str	r3, [r2, #4]
 8005bfe:	4b43      	ldr	r3, [pc, #268]	@ (8005d0c <ZXB5210_init+0x12c>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	609a      	str	r2, [r3, #8]
 8005c04:	4b41      	ldr	r3, [pc, #260]	@ (8005d0c <ZXB5210_init+0x12c>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	60da      	str	r2, [r3, #12]
	MDriver1_REV_Config = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_4,.CCR_Channel = &htim2.Instance->CCR4,.pulseGoal = 0, .offset=0}; //36
 8005c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d08 <ZXB5210_init+0x128>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3340      	adds	r3, #64	@ 0x40
 8005c10:	4a3f      	ldr	r2, [pc, #252]	@ (8005d10 <ZXB5210_init+0x130>)
 8005c12:	210c      	movs	r1, #12
 8005c14:	6011      	str	r1, [r2, #0]
 8005c16:	4a3e      	ldr	r2, [pc, #248]	@ (8005d10 <ZXB5210_init+0x130>)
 8005c18:	6053      	str	r3, [r2, #4]
 8005c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8005d10 <ZXB5210_init+0x130>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	609a      	str	r2, [r3, #8]
 8005c20:	4b3b      	ldr	r3, [pc, #236]	@ (8005d10 <ZXB5210_init+0x130>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	60da      	str	r2, [r3, #12]
	MDriver2_FWD_Config = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_4,.CCR_Channel = &htim3.Instance->CCR4,.pulseGoal = 0, .offset=0};
 8005c26:	4b3b      	ldr	r3, [pc, #236]	@ (8005d14 <ZXB5210_init+0x134>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3340      	adds	r3, #64	@ 0x40
 8005c2c:	4a3a      	ldr	r2, [pc, #232]	@ (8005d18 <ZXB5210_init+0x138>)
 8005c2e:	210c      	movs	r1, #12
 8005c30:	6011      	str	r1, [r2, #0]
 8005c32:	4a39      	ldr	r2, [pc, #228]	@ (8005d18 <ZXB5210_init+0x138>)
 8005c34:	6053      	str	r3, [r2, #4]
 8005c36:	4b38      	ldr	r3, [pc, #224]	@ (8005d18 <ZXB5210_init+0x138>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	609a      	str	r2, [r3, #8]
 8005c3c:	4b36      	ldr	r3, [pc, #216]	@ (8005d18 <ZXB5210_init+0x138>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	60da      	str	r2, [r3, #12]
	MDriver2_REV_Config = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_3,.CCR_Channel = &htim3.Instance->CCR3,.pulseGoal = 0, .offset=0};
 8005c42:	4b34      	ldr	r3, [pc, #208]	@ (8005d14 <ZXB5210_init+0x134>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	333c      	adds	r3, #60	@ 0x3c
 8005c48:	4a34      	ldr	r2, [pc, #208]	@ (8005d1c <ZXB5210_init+0x13c>)
 8005c4a:	2108      	movs	r1, #8
 8005c4c:	6011      	str	r1, [r2, #0]
 8005c4e:	4a33      	ldr	r2, [pc, #204]	@ (8005d1c <ZXB5210_init+0x13c>)
 8005c50:	6053      	str	r3, [r2, #4]
 8005c52:	4b32      	ldr	r3, [pc, #200]	@ (8005d1c <ZXB5210_init+0x13c>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	609a      	str	r2, [r3, #8]
 8005c58:	4b30      	ldr	r3, [pc, #192]	@ (8005d1c <ZXB5210_init+0x13c>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	60da      	str	r2, [r3, #12]


	MDriver1 = (MDriver_t){
 8005c5e:	4b30      	ldr	r3, [pc, #192]	@ (8005d20 <ZXB5210_init+0x140>)
 8005c60:	4a30      	ldr	r2, [pc, #192]	@ (8005d24 <ZXB5210_init+0x144>)
 8005c62:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.htim = &htim2,
				.FWD = &MDriver1_FWD_Config,
				.REV = &MDriver1_REV_Config,
	};
	MDriver2 = (MDriver_t){
 8005c68:	4b2f      	ldr	r3, [pc, #188]	@ (8005d28 <ZXB5210_init+0x148>)
 8005c6a:	4a30      	ldr	r2, [pc, #192]	@ (8005d2c <ZXB5210_init+0x14c>)
 8005c6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.htim = &htim3,
				.FWD = &MDriver2_FWD_Config,
				.REV = &MDriver2_REV_Config,
	};
	HAL_TIM_PWM_Start(MDriver1.htim,MDriver1.FWD->Tim_Channel) == HAL_OK ? debug(START,"DRIVER1 - PWM CHANNEL FWD"):(void)0;
 8005c72:	4b2b      	ldr	r3, [pc, #172]	@ (8005d20 <ZXB5210_init+0x140>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4b2a      	ldr	r3, [pc, #168]	@ (8005d20 <ZXB5210_init+0x140>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f004 ff66 	bl	800ab50 <HAL_TIM_PWM_Start>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <ZXB5210_init+0xb2>
 8005c8a:	4929      	ldr	r1, [pc, #164]	@ (8005d30 <ZXB5210_init+0x150>)
 8005c8c:	4829      	ldr	r0, [pc, #164]	@ (8005d34 <ZXB5210_init+0x154>)
 8005c8e:	f010 ff9b 	bl	8016bc8 <debug>
	HAL_TIM_PWM_Start(MDriver1.htim,MDriver1.REV->Tim_Channel) == HAL_OK ? debug(START,"DRIVER1 - PWM CHANNEL REV"):(void)0;
 8005c92:	4b23      	ldr	r3, [pc, #140]	@ (8005d20 <ZXB5210_init+0x140>)
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4b22      	ldr	r3, [pc, #136]	@ (8005d20 <ZXB5210_init+0x140>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f004 ff56 	bl	800ab50 <HAL_TIM_PWM_Start>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <ZXB5210_init+0xd2>
 8005caa:	4923      	ldr	r1, [pc, #140]	@ (8005d38 <ZXB5210_init+0x158>)
 8005cac:	4821      	ldr	r0, [pc, #132]	@ (8005d34 <ZXB5210_init+0x154>)
 8005cae:	f010 ff8b 	bl	8016bc8 <debug>

	HAL_TIM_PWM_Start(MDriver2.htim,MDriver2.FWD->Tim_Channel) == HAL_OK ? debug(START,"DRIVER2 - PWM CHANNEL FWD"):(void)0;
 8005cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8005d28 <ZXB5210_init+0x148>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8005d28 <ZXB5210_init+0x148>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f004 ff46 	bl	800ab50 <HAL_TIM_PWM_Start>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d103      	bne.n	8005cd2 <ZXB5210_init+0xf2>
 8005cca:	491c      	ldr	r1, [pc, #112]	@ (8005d3c <ZXB5210_init+0x15c>)
 8005ccc:	4819      	ldr	r0, [pc, #100]	@ (8005d34 <ZXB5210_init+0x154>)
 8005cce:	f010 ff7b 	bl	8016bc8 <debug>
	HAL_TIM_PWM_Start(MDriver2.htim,MDriver2.REV->Tim_Channel) == HAL_OK ? debug(START,"DRIVER2 - PWM CHANNEL REV"):(void)0;
 8005cd2:	4b15      	ldr	r3, [pc, #84]	@ (8005d28 <ZXB5210_init+0x148>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b14      	ldr	r3, [pc, #80]	@ (8005d28 <ZXB5210_init+0x148>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	f004 ff36 	bl	800ab50 <HAL_TIM_PWM_Start>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d103      	bne.n	8005cf2 <ZXB5210_init+0x112>
 8005cea:	4915      	ldr	r1, [pc, #84]	@ (8005d40 <ZXB5210_init+0x160>)
 8005cec:	4811      	ldr	r0, [pc, #68]	@ (8005d34 <ZXB5210_init+0x154>)
 8005cee:	f010 ff6b 	bl	8016bc8 <debug>

	isSpeedInit = 1;
 8005cf2:	4b14      	ldr	r3, [pc, #80]	@ (8005d44 <ZXB5210_init+0x164>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	3758      	adds	r7, #88	@ 0x58
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	0801b9b8 	.word	0x0801b9b8
 8005d04:	0801b9c8 	.word	0x0801b9c8
 8005d08:	2000081c 	.word	0x2000081c
 8005d0c:	20000e84 	.word	0x20000e84
 8005d10:	20000e94 	.word	0x20000e94
 8005d14:	200008e8 	.word	0x200008e8
 8005d18:	20000ea4 	.word	0x20000ea4
 8005d1c:	20000eb4 	.word	0x20000eb4
 8005d20:	20000e6c 	.word	0x20000e6c
 8005d24:	0801ba58 	.word	0x0801ba58
 8005d28:	20000e78 	.word	0x20000e78
 8005d2c:	0801ba64 	.word	0x0801ba64
 8005d30:	0801b9dc 	.word	0x0801b9dc
 8005d34:	0801b9f8 	.word	0x0801b9f8
 8005d38:	0801ba04 	.word	0x0801ba04
 8005d3c:	0801ba20 	.word	0x0801ba20
 8005d40:	0801ba3c 	.word	0x0801ba3c
 8005d44:	20000ec4 	.word	0x20000ec4

08005d48 <ZXB5210_deinit>:
// Tout les channels ne sont pas cabler pareil

void ZXB5210_deinit(void){
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(MDriver1.htim,MDriver1.FWD->Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER1 - PWM CHANNEL FWD"):(void)0;
 8005d4c:	4b20      	ldr	r3, [pc, #128]	@ (8005dd0 <ZXB5210_deinit+0x88>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	4b1f      	ldr	r3, [pc, #124]	@ (8005dd0 <ZXB5210_deinit+0x88>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f004 fff9 	bl	800ad50 <HAL_TIM_PWM_Stop>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d103      	bne.n	8005d6c <ZXB5210_deinit+0x24>
 8005d64:	491b      	ldr	r1, [pc, #108]	@ (8005dd4 <ZXB5210_deinit+0x8c>)
 8005d66:	481c      	ldr	r0, [pc, #112]	@ (8005dd8 <ZXB5210_deinit+0x90>)
 8005d68:	f010 ff2e 	bl	8016bc8 <debug>
	HAL_TIM_PWM_Stop(MDriver1.htim,MDriver1.REV->Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER1 - PWM CHANNEL REV"):(void)0;
 8005d6c:	4b18      	ldr	r3, [pc, #96]	@ (8005dd0 <ZXB5210_deinit+0x88>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b17      	ldr	r3, [pc, #92]	@ (8005dd0 <ZXB5210_deinit+0x88>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f004 ffe9 	bl	800ad50 <HAL_TIM_PWM_Stop>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d103      	bne.n	8005d8c <ZXB5210_deinit+0x44>
 8005d84:	4915      	ldr	r1, [pc, #84]	@ (8005ddc <ZXB5210_deinit+0x94>)
 8005d86:	4814      	ldr	r0, [pc, #80]	@ (8005dd8 <ZXB5210_deinit+0x90>)
 8005d88:	f010 ff1e 	bl	8016bc8 <debug>

	HAL_TIM_PWM_Stop(MDriver2.htim,MDriver2.FWD->Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER2 - PWM CHANNEL FWD"):(void)0;
 8005d8c:	4b14      	ldr	r3, [pc, #80]	@ (8005de0 <ZXB5210_deinit+0x98>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	4b13      	ldr	r3, [pc, #76]	@ (8005de0 <ZXB5210_deinit+0x98>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4619      	mov	r1, r3
 8005d98:	4610      	mov	r0, r2
 8005d9a:	f004 ffd9 	bl	800ad50 <HAL_TIM_PWM_Stop>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d103      	bne.n	8005dac <ZXB5210_deinit+0x64>
 8005da4:	490f      	ldr	r1, [pc, #60]	@ (8005de4 <ZXB5210_deinit+0x9c>)
 8005da6:	480c      	ldr	r0, [pc, #48]	@ (8005dd8 <ZXB5210_deinit+0x90>)
 8005da8:	f010 ff0e 	bl	8016bc8 <debug>
	HAL_TIM_PWM_Stop(MDriver2.htim,MDriver2.REV->Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER2 - PWM CHANNEL REV"):(void)0;
 8005dac:	4b0c      	ldr	r3, [pc, #48]	@ (8005de0 <ZXB5210_deinit+0x98>)
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4b0b      	ldr	r3, [pc, #44]	@ (8005de0 <ZXB5210_deinit+0x98>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f004 ffc9 	bl	800ad50 <HAL_TIM_PWM_Stop>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d103      	bne.n	8005dcc <ZXB5210_deinit+0x84>
 8005dc4:	4908      	ldr	r1, [pc, #32]	@ (8005de8 <ZXB5210_deinit+0xa0>)
 8005dc6:	4804      	ldr	r0, [pc, #16]	@ (8005dd8 <ZXB5210_deinit+0x90>)
 8005dc8:	f010 fefe 	bl	8016bc8 <debug>
}
 8005dcc:	bf00      	nop
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	20000e6c 	.word	0x20000e6c
 8005dd4:	0801b9dc 	.word	0x0801b9dc
 8005dd8:	0801ba70 	.word	0x0801ba70
 8005ddc:	0801ba04 	.word	0x0801ba04
 8005de0:	20000e78 	.word	0x20000e78
 8005de4:	0801ba20 	.word	0x0801ba20
 8005de8:	0801ba3c 	.word	0x0801ba3c

08005dec <ZXB5210_speed_FWD>:
	uint32_t pulse = (htim->Instance->ARR * alpha)/100;
	__HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL_4,pulse);
}
#endif

void ZXB5210_speed_FWD(MDriver_t* MDriver ,uint8_t alpha){
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
	ZXB5210_calc_speed(MDriver->FWD,(MDriver->htim->Instance->ARR * alpha)/100);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6858      	ldr	r0, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	4a07      	ldr	r2, [pc, #28]	@ (8005e28 <ZXB5210_speed_FWD+0x3c>)
 8005e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	4619      	mov	r1, r3
 8005e14:	f000 f87c 	bl	8005f10 <ZXB5210_calc_speed>
	MDriver->REV->pulseGoal = 0;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	609a      	str	r2, [r3, #8]
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	51eb851f 	.word	0x51eb851f

08005e2c <ZXB5210_speed_REV>:
void ZXB5210_speed_REV(MDriver_t *MDriver ,uint8_t alpha){
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	460b      	mov	r3, r1
 8005e36:	70fb      	strb	r3, [r7, #3]
	ZXB5210_calc_speed(MDriver->REV,(MDriver->htim->Instance->ARR * alpha)/100);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6898      	ldr	r0, [r3, #8]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	4a07      	ldr	r2, [pc, #28]	@ (8005e68 <ZXB5210_speed_REV+0x3c>)
 8005e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	4619      	mov	r1, r3
 8005e54:	f000 f85c 	bl	8005f10 <ZXB5210_calc_speed>
	MDriver->FWD->pulseGoal = 0;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	609a      	str	r2, [r3, #8]
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	51eb851f 	.word	0x51eb851f

08005e6c <IT_ZXB5210_speed_UPDATE>:
void IT_ZXB5210_speed_UPDATE(MDriver_t* MDriver, MDriver_Config_t* SENS){
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
	uint32_t pulse = *(SENS->CCR_Channel);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]
	pulse < SENS->pulseGoal ? // Si le pulse est trop petit
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
			pulse ++ :
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d203      	bcs.n	8005e90 <IT_ZXB5210_speed_UPDATE+0x24>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	e002      	b.n	8005e96 <IT_ZXB5210_speed_UPDATE+0x2a>
			pulse --;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d105      	bne.n	8005eaa <IT_ZXB5210_speed_UPDATE+0x3e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8005ea8:	e02c      	b.n	8005f04 <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d105      	bne.n	8005ebe <IT_ZXB5210_speed_UPDATE+0x52>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005ebc:	e022      	b.n	8005f04 <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d105      	bne.n	8005ed2 <IT_ZXB5210_speed_UPDATE+0x66>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8005ed0:	e018      	b.n	8005f04 <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b0c      	cmp	r3, #12
 8005ed8:	d105      	bne.n	8005ee6 <IT_ZXB5210_speed_UPDATE+0x7a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8005ee4:	e00e      	b.n	8005f04 <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b10      	cmp	r3, #16
 8005eec:	d105      	bne.n	8005efa <IT_ZXB5210_speed_UPDATE+0x8e>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8005ef8:	e004      	b.n	8005f04 <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8005f04:	bf00      	nop
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <ZXB5210_calc_speed>:

void ZXB5210_calc_speed(MDriver_Config_t* MDriver_Config,uint32_t initial_Pulse){
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
	uint32_t pulseActu = initial_Pulse - MDriver_Config->offset;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
	MDriver_Config->pulseGoal =  pulseActu >= 100 ? pulseActu : 100;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b64      	cmp	r3, #100	@ 0x64
 8005f2a:	bf38      	it	cc
 8005f2c:	2364      	movcc	r3, #100	@ 0x64
 8005f2e:	461a      	mov	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	609a      	str	r2, [r3, #8]
}
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f40:	480d      	ldr	r0, [pc, #52]	@ (8005f78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f44:	f7fe fa54 	bl	80043f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f48:	480c      	ldr	r0, [pc, #48]	@ (8005f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8005f4a:	490d      	ldr	r1, [pc, #52]	@ (8005f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8005f84 <LoopForever+0xe>)
  movs r3, #0
 8005f4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005f50:	e002      	b.n	8005f58 <LoopCopyDataInit>

08005f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f56:	3304      	adds	r3, #4

08005f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f5c:	d3f9      	bcc.n	8005f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f60:	4c0a      	ldr	r4, [pc, #40]	@ (8005f8c <LoopForever+0x16>)
  movs r3, #0
 8005f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f64:	e001      	b.n	8005f6a <LoopFillZerobss>

08005f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f68:	3204      	adds	r2, #4

08005f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f6c:	d3fb      	bcc.n	8005f66 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8005f6e:	f012 fe27 	bl	8018bc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005f72:	f7fd fef3 	bl	8003d5c <main>

08005f76 <LoopForever>:

LoopForever:
    b LoopForever
 8005f76:	e7fe      	b.n	8005f76 <LoopForever>
  ldr   r0, =_estack
 8005f78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f80:	200004e4 	.word	0x200004e4
  ldr r2, =_sidata
 8005f84:	0801c870 	.word	0x0801c870
  ldr r2, =_sbss
 8005f88:	200004e4 	.word	0x200004e4
  ldr r4, =_ebss
 8005f8c:	20007934 	.word	0x20007934

08005f90 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005f90:	e7fe      	b.n	8005f90 <COMP1_2_3_IRQHandler>

08005f92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f9c:	2003      	movs	r0, #3
 8005f9e:	f001 ff44 	bl	8007e2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005fa2:	200f      	movs	r0, #15
 8005fa4:	f7fe f824 	bl	8003ff0 <HAL_InitTick>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	71fb      	strb	r3, [r7, #7]
 8005fb2:	e001      	b.n	8005fb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005fb4:	f7fd fff4 	bl	8003fa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005fb8:	79fb      	ldrb	r3, [r7, #7]

}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fc8:	4b05      	ldr	r3, [pc, #20]	@ (8005fe0 <HAL_IncTick+0x1c>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4b05      	ldr	r3, [pc, #20]	@ (8005fe4 <HAL_IncTick+0x20>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	4a03      	ldr	r2, [pc, #12]	@ (8005fe0 <HAL_IncTick+0x1c>)
 8005fd4:	6013      	str	r3, [r2, #0]
}
 8005fd6:	bf00      	nop
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	20000ec8 	.word	0x20000ec8
 8005fe4:	2000013c 	.word	0x2000013c

08005fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  return uwTick;
 8005fec:	4b03      	ldr	r3, [pc, #12]	@ (8005ffc <HAL_GetTick+0x14>)
 8005fee:	681b      	ldr	r3, [r3, #0]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20000ec8 	.word	0x20000ec8

08006000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006008:	f7ff ffee 	bl	8005fe8 <HAL_GetTick>
 800600c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006018:	d004      	beq.n	8006024 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800601a:	4b09      	ldr	r3, [pc, #36]	@ (8006040 <HAL_Delay+0x40>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4413      	add	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006024:	bf00      	nop
 8006026:	f7ff ffdf 	bl	8005fe8 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	429a      	cmp	r2, r3
 8006034:	d8f7      	bhi.n	8006026 <HAL_Delay+0x26>
  {
  }
}
 8006036:	bf00      	nop
 8006038:	bf00      	nop
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	2000013c 	.word	0x2000013c

08006044 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	609a      	str	r2, [r3, #8]
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	609a      	str	r2, [r3, #8]
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	3360      	adds	r3, #96	@ 0x60
 80060be:	461a      	mov	r2, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	4b08      	ldr	r3, [pc, #32]	@ (80060f0 <LL_ADC_SetOffset+0x44>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	4313      	orrs	r3, r2
 80060dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	03fff000 	.word	0x03fff000

080060f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3360      	adds	r3, #96	@ 0x60
 8006102:	461a      	mov	r2, r3
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3360      	adds	r3, #96	@ 0x60
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	431a      	orrs	r2, r3
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006156:	b480      	push	{r7}
 8006158:	b087      	sub	sp, #28
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3360      	adds	r3, #96	@ 0x60
 8006166:	461a      	mov	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	431a      	orrs	r2, r3
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006180:	bf00      	nop
 8006182:	371c      	adds	r7, #28
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3360      	adds	r3, #96	@ 0x60
 800619c:	461a      	mov	r2, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	431a      	orrs	r2, r3
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80061b6:	bf00      	nop
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	615a      	str	r2, [r3, #20]
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800620e:	b480      	push	{r7}
 8006210:	b087      	sub	sp, #28
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3330      	adds	r3, #48	@ 0x30
 800621e:	461a      	mov	r2, r3
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	0a1b      	lsrs	r3, r3, #8
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	f003 030c 	and.w	r3, r3, #12
 800622a:	4413      	add	r3, r2
 800622c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f003 031f 	and.w	r3, r3, #31
 8006238:	211f      	movs	r1, #31
 800623a:	fa01 f303 	lsl.w	r3, r1, r3
 800623e:	43db      	mvns	r3, r3
 8006240:	401a      	ands	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	0e9b      	lsrs	r3, r3, #26
 8006246:	f003 011f 	and.w	r1, r3, #31
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	fa01 f303 	lsl.w	r3, r1, r3
 8006254:	431a      	orrs	r2, r3
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006272:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3314      	adds	r3, #20
 800629c:	461a      	mov	r2, r3
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	0e5b      	lsrs	r3, r3, #25
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	4413      	add	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	0d1b      	lsrs	r3, r3, #20
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	2107      	movs	r1, #7
 80062ba:	fa01 f303 	lsl.w	r3, r1, r3
 80062be:	43db      	mvns	r3, r3
 80062c0:	401a      	ands	r2, r3
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	0d1b      	lsrs	r3, r3, #20
 80062c6:	f003 031f 	and.w	r3, r3, #31
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	fa01 f303 	lsl.w	r3, r1, r3
 80062d0:	431a      	orrs	r2, r3
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fc:	43db      	mvns	r3, r3
 80062fe:	401a      	ands	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f003 0318 	and.w	r3, r3, #24
 8006306:	4908      	ldr	r1, [pc, #32]	@ (8006328 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006308:	40d9      	lsrs	r1, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	400b      	ands	r3, r1
 800630e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006312:	431a      	orrs	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	0007ffff 	.word	0x0007ffff

0800632c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 031f 	and.w	r3, r3, #31
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006374:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6093      	str	r3, [r2, #8]
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800639c:	d101      	bne.n	80063a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80063c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80063c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ec:	d101      	bne.n	80063f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006410:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006414:	f043 0201 	orr.w	r2, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006438:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800643c:	f043 0202 	orr.w	r2, r3, #2
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <LL_ADC_IsEnabled+0x18>
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <LL_ADC_IsEnabled+0x1a>
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b02      	cmp	r3, #2
 8006488:	d101      	bne.n	800648e <LL_ADC_IsDisableOngoing+0x18>
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <LL_ADC_IsDisableOngoing+0x1a>
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80064b0:	f043 0204 	orr.w	r2, r3, #4
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80064d8:	f043 0210 	orr.w	r2, r3, #16
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d101      	bne.n	8006504 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006500:	2301      	movs	r3, #1
 8006502:	e000      	b.n	8006506 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006522:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006526:	f043 0220 	orr.w	r2, r3, #32
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b08      	cmp	r3, #8
 800654c:	d101      	bne.n	8006552 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006560:	b590      	push	{r4, r7, lr}
 8006562:	b089      	sub	sp, #36	@ 0x24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e167      	b.n	800684a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006584:	2b00      	cmp	r3, #0
 8006586:	d109      	bne.n	800659c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7fc ffd5 	bl	8003538 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff fef1 	bl	8006388 <LL_ADC_IsDeepPowerDownEnabled>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d004      	beq.n	80065b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff fed7 	bl	8006364 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff ff0c 	bl	80063d8 <LL_ADC_IsInternalRegulatorEnabled>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d115      	bne.n	80065f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fef0 	bl	80063b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065d0:	4ba0      	ldr	r3, [pc, #640]	@ (8006854 <HAL_ADC_Init+0x2f4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	099b      	lsrs	r3, r3, #6
 80065d6:	4aa0      	ldr	r2, [pc, #640]	@ (8006858 <HAL_ADC_Init+0x2f8>)
 80065d8:	fba2 2303 	umull	r2, r3, r2, r3
 80065dc:	099b      	lsrs	r3, r3, #6
 80065de:	3301      	adds	r3, #1
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80065e4:	e002      	b.n	80065ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f9      	bne.n	80065e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff feee 	bl	80063d8 <LL_ADC_IsInternalRegulatorEnabled>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10d      	bne.n	800661e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006606:	f043 0210 	orr.w	r2, r3, #16
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006612:	f043 0201 	orr.w	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff ff62 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 8006628:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800662e:	f003 0310 	and.w	r3, r3, #16
 8006632:	2b00      	cmp	r3, #0
 8006634:	f040 8100 	bne.w	8006838 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 80fc 	bne.w	8006838 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006644:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006648:	f043 0202 	orr.w	r2, r3, #2
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fefb 	bl	8006450 <LL_ADC_IsEnabled>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d111      	bne.n	8006684 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006660:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006664:	f7ff fef4 	bl	8006450 <LL_ADC_IsEnabled>
 8006668:	4604      	mov	r4, r0
 800666a:	487c      	ldr	r0, [pc, #496]	@ (800685c <HAL_ADC_Init+0x2fc>)
 800666c:	f7ff fef0 	bl	8006450 <LL_ADC_IsEnabled>
 8006670:	4603      	mov	r3, r0
 8006672:	4323      	orrs	r3, r4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	4619      	mov	r1, r3
 800667e:	4878      	ldr	r0, [pc, #480]	@ (8006860 <HAL_ADC_Init+0x300>)
 8006680:	f7ff fce0 	bl	8006044 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	7f5b      	ldrb	r3, [r3, #29]
 8006688:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800668e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006694:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800669a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80066a4:	4313      	orrs	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d106      	bne.n	80066c0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b6:	3b01      	subs	r3, #1
 80066b8:	045b      	lsls	r3, r3, #17
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	4313      	orrs	r3, r2
 80066be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d009      	beq.n	80066dc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	4313      	orrs	r3, r2
 80066da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	4b60      	ldr	r3, [pc, #384]	@ (8006864 <HAL_ADC_Init+0x304>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6812      	ldr	r2, [r2, #0]
 80066ea:	69b9      	ldr	r1, [r7, #24]
 80066ec:	430b      	orrs	r3, r1
 80066ee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff ff15 	bl	800653a <LL_ADC_INJ_IsConversionOngoing>
 8006710:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d16d      	bne.n	80067f4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d16a      	bne.n	80067f4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006722:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800672a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800672c:	4313      	orrs	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800673a:	f023 0302 	bic.w	r3, r3, #2
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6812      	ldr	r2, [r2, #0]
 8006742:	69b9      	ldr	r1, [r7, #24]
 8006744:	430b      	orrs	r3, r1
 8006746:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d017      	beq.n	8006780 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800675e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006768:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800676c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6911      	ldr	r1, [r2, #16]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	430b      	orrs	r3, r1
 800677a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800677e:	e013      	b.n	80067a8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800678e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6812      	ldr	r2, [r2, #0]
 800679c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80067a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80067a4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d118      	bne.n	80067e4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80067bc:	f023 0304 	bic.w	r3, r3, #4
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067c8:	4311      	orrs	r1, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80067ce:	4311      	orrs	r1, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80067d4:	430a      	orrs	r2, r1
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0201 	orr.w	r2, r2, #1
 80067e0:	611a      	str	r2, [r3, #16]
 80067e2:	e007      	b.n	80067f4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d10c      	bne.n	8006816 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006802:	f023 010f 	bic.w	r1, r3, #15
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	1e5a      	subs	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	631a      	str	r2, [r3, #48]	@ 0x30
 8006814:	e007      	b.n	8006826 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 020f 	bic.w	r2, r2, #15
 8006824:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800682a:	f023 0303 	bic.w	r3, r3, #3
 800682e:	f043 0201 	orr.w	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006836:	e007      	b.n	8006848 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800683c:	f043 0210 	orr.w	r2, r3, #16
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006848:	7ffb      	ldrb	r3, [r7, #31]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3724      	adds	r7, #36	@ 0x24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd90      	pop	{r4, r7, pc}
 8006852:	bf00      	nop
 8006854:	20000004 	.word	0x20000004
 8006858:	053e2d63 	.word	0x053e2d63
 800685c:	50000100 	.word	0x50000100
 8006860:	50000300 	.word	0x50000300
 8006864:	fff04007 	.word	0xfff04007

08006868 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006874:	4851      	ldr	r0, [pc, #324]	@ (80069bc <HAL_ADC_Start_DMA+0x154>)
 8006876:	f7ff fd59 	bl	800632c <LL_ADC_GetMultimode>
 800687a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff fe33 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	f040 808f 	bne.w	80069ac <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <HAL_ADC_Start_DMA+0x34>
 8006898:	2302      	movs	r3, #2
 800689a:	e08a      	b.n	80069b2 <HAL_ADC_Start_DMA+0x14a>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b05      	cmp	r3, #5
 80068ae:	d002      	beq.n	80068b6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b09      	cmp	r3, #9
 80068b4:	d173      	bne.n	800699e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 ffd0 	bl	800785c <ADC_Enable>
 80068bc:	4603      	mov	r3, r0
 80068be:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d166      	bne.n	8006994 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80068ce:	f023 0301 	bic.w	r3, r3, #1
 80068d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a38      	ldr	r2, [pc, #224]	@ (80069c0 <HAL_ADC_Start_DMA+0x158>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d002      	beq.n	80068ea <HAL_ADC_Start_DMA+0x82>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	e001      	b.n	80068ee <HAL_ADC_Start_DMA+0x86>
 80068ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d002      	beq.n	80068fc <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d105      	bne.n	8006908 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006900:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800690c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d006      	beq.n	8006922 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006918:	f023 0206 	bic.w	r2, r3, #6
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	661a      	str	r2, [r3, #96]	@ 0x60
 8006920:	e002      	b.n	8006928 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800692c:	4a25      	ldr	r2, [pc, #148]	@ (80069c4 <HAL_ADC_Start_DMA+0x15c>)
 800692e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006934:	4a24      	ldr	r2, [pc, #144]	@ (80069c8 <HAL_ADC_Start_DMA+0x160>)
 8006936:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693c:	4a23      	ldr	r2, [pc, #140]	@ (80069cc <HAL_ADC_Start_DMA+0x164>)
 800693e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	221c      	movs	r2, #28
 8006946:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0210 	orr.w	r2, r2, #16
 800695e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3340      	adds	r3, #64	@ 0x40
 800697a:	4619      	mov	r1, r3
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f001 fd08 	bl	8008394 <HAL_DMA_Start_IT>
 8006984:	4603      	mov	r3, r0
 8006986:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff fd85 	bl	800649c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006992:	e00d      	b.n	80069b0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800699c:	e008      	b.n	80069b0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80069aa:	e001      	b.n	80069b0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80069ac:	2302      	movs	r3, #2
 80069ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	50000300 	.word	0x50000300
 80069c0:	50000100 	.word	0x50000100
 80069c4:	08007a27 	.word	0x08007a27
 80069c8:	08007aff 	.word	0x08007aff
 80069cc:	08007b1b 	.word	0x08007b1b

080069d0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d101      	bne.n	80069e6 <HAL_ADC_Stop_DMA+0x16>
 80069e2:	2302      	movs	r3, #2
 80069e4:	e051      	b.n	8006a8a <HAL_ADC_Stop_DMA+0xba>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80069ee:	2103      	movs	r1, #3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fe77 	bl	80076e4 <ADC_ConversionStop>
 80069f6:	4603      	mov	r3, r0
 80069f8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d13f      	bne.n	8006a80 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0201 	bic.w	r2, r2, #1
 8006a0e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d10f      	bne.n	8006a3e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a22:	4618      	mov	r0, r3
 8006a24:	f001 fd31 	bl	800848a <HAL_DMA_Abort>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d005      	beq.n	8006a3e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0210 	bic.w	r2, r2, #16
 8006a4c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d105      	bne.n	8006a60 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 ff87 	bl	8007968 <ADC_Disable>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	73fb      	strb	r3, [r7, #15]
 8006a5e:	e002      	b.n	8006a66 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 ff81 	bl	8007968 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d109      	bne.n	8006a80 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a70:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006a74:	f023 0301 	bic.w	r3, r3, #1
 8006a78:	f043 0201 	orr.w	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	@ 0x28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ab0:	4883      	ldr	r0, [pc, #524]	@ (8006cc0 <HAL_ADC_IRQHandler+0x22c>)
 8006ab2:	f7ff fc3b 	bl	800632c <LL_ADC_GetMultimode>
 8006ab6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d017      	beq.n	8006af2 <HAL_ADC_IRQHandler+0x5e>
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d012      	beq.n	8006af2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d105      	bne.n	8006ae4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006adc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 f8e9 	bl	8007cbc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2202      	movs	r2, #2
 8006af0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d004      	beq.n	8006b06 <HAL_ADC_IRQHandler+0x72>
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8085 	beq.w	8006c1c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d07f      	beq.n	8006c1c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d105      	bne.n	8006b34 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff fb55 	bl	80061e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d064      	beq.n	8006c0e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a5e      	ldr	r2, [pc, #376]	@ (8006cc4 <HAL_ADC_IRQHandler+0x230>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d002      	beq.n	8006b54 <HAL_ADC_IRQHandler+0xc0>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	e001      	b.n	8006b58 <HAL_ADC_IRQHandler+0xc4>
 8006b54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6812      	ldr	r2, [r2, #0]
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d008      	beq.n	8006b72 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d005      	beq.n	8006b72 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2b05      	cmp	r3, #5
 8006b6a:	d002      	beq.n	8006b72 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2b09      	cmp	r3, #9
 8006b70:	d104      	bne.n	8006b7c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	623b      	str	r3, [r7, #32]
 8006b7a:	e00d      	b.n	8006b98 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a50      	ldr	r2, [pc, #320]	@ (8006cc4 <HAL_ADC_IRQHandler+0x230>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d002      	beq.n	8006b8c <HAL_ADC_IRQHandler+0xf8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	e001      	b.n	8006b90 <HAL_ADC_IRQHandler+0xfc>
 8006b8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006b90:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d135      	bne.n	8006c0e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d12e      	bne.n	8006c0e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff fc99 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d11a      	bne.n	8006bf6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 020c 	bic.w	r2, r2, #12
 8006bce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006be0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d112      	bne.n	8006c0e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bec:	f043 0201 	orr.w	r2, r3, #1
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006bf4:	e00b      	b.n	8006c0e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bfa:	f043 0210 	orr.w	r2, r3, #16
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c06:	f043 0201 	orr.w	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f00f fa4a 	bl	80160a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	220c      	movs	r2, #12
 8006c1a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d004      	beq.n	8006c30 <HAL_ADC_IRQHandler+0x19c>
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10b      	bne.n	8006c48 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 809e 	beq.w	8006d78 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8098 	beq.w	8006d78 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d105      	bne.n	8006c60 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c58:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff fafe 	bl	8006266 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006c6a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff fab9 	bl	80061e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006c76:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a11      	ldr	r2, [pc, #68]	@ (8006cc4 <HAL_ADC_IRQHandler+0x230>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d002      	beq.n	8006c88 <HAL_ADC_IRQHandler+0x1f4>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	e001      	b.n	8006c8c <HAL_ADC_IRQHandler+0x1f8>
 8006c88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6812      	ldr	r2, [r2, #0]
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d008      	beq.n	8006ca6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d005      	beq.n	8006ca6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2b06      	cmp	r3, #6
 8006c9e:	d002      	beq.n	8006ca6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2b07      	cmp	r3, #7
 8006ca4:	d104      	bne.n	8006cb0 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	623b      	str	r3, [r7, #32]
 8006cae:	e011      	b.n	8006cd4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a03      	ldr	r2, [pc, #12]	@ (8006cc4 <HAL_ADC_IRQHandler+0x230>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d006      	beq.n	8006cc8 <HAL_ADC_IRQHandler+0x234>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	e005      	b.n	8006ccc <HAL_ADC_IRQHandler+0x238>
 8006cc0:	50000300 	.word	0x50000300
 8006cc4:	50000100 	.word	0x50000100
 8006cc8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006ccc:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d047      	beq.n	8006d6a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d007      	beq.n	8006cf4 <HAL_ADC_IRQHandler+0x260>
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d03f      	beq.n	8006d6a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d13a      	bne.n	8006d6a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfe:	2b40      	cmp	r3, #64	@ 0x40
 8006d00:	d133      	bne.n	8006d6a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d12e      	bne.n	8006d6a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff fc12 	bl	800653a <LL_ADC_INJ_IsConversionOngoing>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d11a      	bne.n	8006d52 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d2a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d112      	bne.n	8006d6a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d48:	f043 0201 	orr.w	r2, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d50:	e00b      	b.n	8006d6a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d56:	f043 0210 	orr.w	r2, r3, #16
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d62:	f043 0201 	orr.w	r2, r3, #1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 ff7e 	bl	8007c6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2260      	movs	r2, #96	@ 0x60
 8006d76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d011      	beq.n	8006da6 <HAL_ADC_IRQHandler+0x312>
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00c      	beq.n	8006da6 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f89f 	bl	8006edc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2280      	movs	r2, #128	@ 0x80
 8006da4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d012      	beq.n	8006dd6 <HAL_ADC_IRQHandler+0x342>
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00d      	beq.n	8006dd6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dbe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 ff64 	bl	8007c94 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006dd4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d012      	beq.n	8006e06 <HAL_ADC_IRQHandler+0x372>
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00d      	beq.n	8006e06 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 ff56 	bl	8007ca8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f003 0310 	and.w	r3, r3, #16
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d036      	beq.n	8006e7e <HAL_ADC_IRQHandler+0x3ea>
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d031      	beq.n	8006e7e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8006e22:	2301      	movs	r3, #1
 8006e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e26:	e014      	b.n	8006e52 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d008      	beq.n	8006e40 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006e2e:	4825      	ldr	r0, [pc, #148]	@ (8006ec4 <HAL_ADC_IRQHandler+0x430>)
 8006e30:	f7ff fa8a 	bl	8006348 <LL_ADC_GetMultiDMATransfer>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e3e:	e008      	b.n	8006e52 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d10e      	bne.n	8006e76 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e5c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e68:	f043 0202 	orr.w	r2, r3, #2
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f83d 	bl	8006ef0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2210      	movs	r2, #16
 8006e7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d018      	beq.n	8006eba <HAL_ADC_IRQHandler+0x426>
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d013      	beq.n	8006eba <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e96:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea2:	f043 0208 	orr.w	r2, r3, #8
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006eb2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fee3 	bl	8007c80 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006eba:	bf00      	nop
 8006ebc:	3728      	adds	r7, #40	@ 0x28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	50000300 	.word	0x50000300

08006ec8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b0b6      	sub	sp, #216	@ 0xd8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d101      	bne.n	8006f26 <HAL_ADC_ConfigChannel+0x22>
 8006f22:	2302      	movs	r3, #2
 8006f24:	e3c8      	b.n	80076b8 <HAL_ADC_ConfigChannel+0x7b4>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7ff fada 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f040 83ad 	bne.w	800769a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6818      	ldr	r0, [r3, #0]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	6859      	ldr	r1, [r3, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f7ff f95e 	bl	800620e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7ff fac8 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 8006f5c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff fae8 	bl	800653a <LL_ADC_INJ_IsConversionOngoing>
 8006f6a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f040 81d9 	bne.w	800732a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f040 81d4 	bne.w	800732a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f8a:	d10f      	bne.n	8006fac <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6818      	ldr	r0, [r3, #0]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2200      	movs	r2, #0
 8006f96:	4619      	mov	r1, r3
 8006f98:	f7ff f978 	bl	800628c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff f90c 	bl	80061c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8006faa:	e00e      	b.n	8006fca <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6818      	ldr	r0, [r3, #0]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f7ff f967 	bl	800628c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff f8fc 	bl	80061c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	695a      	ldr	r2, [r3, #20]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	08db      	lsrs	r3, r3, #3
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d022      	beq.n	8007032 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	6919      	ldr	r1, [r3, #16]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ffc:	f7ff f856 	bl	80060ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	6919      	ldr	r1, [r3, #16]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	461a      	mov	r2, r3
 800700e:	f7ff f8a2 	bl	8006156 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800701e:	2b01      	cmp	r3, #1
 8007020:	d102      	bne.n	8007028 <HAL_ADC_ConfigChannel+0x124>
 8007022:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007026:	e000      	b.n	800702a <HAL_ADC_ConfigChannel+0x126>
 8007028:	2300      	movs	r3, #0
 800702a:	461a      	mov	r2, r3
 800702c:	f7ff f8ae 	bl	800618c <LL_ADC_SetOffsetSaturation>
 8007030:	e17b      	b.n	800732a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff f85b 	bl	80060f4 <LL_ADC_GetOffsetChannel>
 800703e:	4603      	mov	r3, r0
 8007040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <HAL_ADC_ConfigChannel+0x15a>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2100      	movs	r1, #0
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff f850 	bl	80060f4 <LL_ADC_GetOffsetChannel>
 8007054:	4603      	mov	r3, r0
 8007056:	0e9b      	lsrs	r3, r3, #26
 8007058:	f003 021f 	and.w	r2, r3, #31
 800705c:	e01e      	b.n	800709c <HAL_ADC_ConfigChannel+0x198>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2100      	movs	r1, #0
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff f845 	bl	80060f4 <LL_ADC_GetOffsetChannel>
 800706a:	4603      	mov	r3, r0
 800706c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007074:	fa93 f3a3 	rbit	r3, r3
 8007078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800707c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007080:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007084:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800708c:	2320      	movs	r3, #32
 800708e:	e004      	b.n	800709a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8007090:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007094:	fab3 f383 	clz	r3, r3
 8007098:	b2db      	uxtb	r3, r3
 800709a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d105      	bne.n	80070b4 <HAL_ADC_ConfigChannel+0x1b0>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	0e9b      	lsrs	r3, r3, #26
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	e018      	b.n	80070e6 <HAL_ADC_ConfigChannel+0x1e2>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80070c0:	fa93 f3a3 	rbit	r3, r3
 80070c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80070c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80070d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80070d8:	2320      	movs	r3, #32
 80070da:	e004      	b.n	80070e6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80070dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070e0:	fab3 f383 	clz	r3, r3
 80070e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d106      	bne.n	80070f8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2200      	movs	r2, #0
 80070f0:	2100      	movs	r1, #0
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff f814 	bl	8006120 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2101      	movs	r1, #1
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fe fff8 	bl	80060f4 <LL_ADC_GetOffsetChannel>
 8007104:	4603      	mov	r3, r0
 8007106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <HAL_ADC_ConfigChannel+0x220>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2101      	movs	r1, #1
 8007114:	4618      	mov	r0, r3
 8007116:	f7fe ffed 	bl	80060f4 <LL_ADC_GetOffsetChannel>
 800711a:	4603      	mov	r3, r0
 800711c:	0e9b      	lsrs	r3, r3, #26
 800711e:	f003 021f 	and.w	r2, r3, #31
 8007122:	e01e      	b.n	8007162 <HAL_ADC_ConfigChannel+0x25e>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2101      	movs	r1, #1
 800712a:	4618      	mov	r0, r3
 800712c:	f7fe ffe2 	bl	80060f4 <LL_ADC_GetOffsetChannel>
 8007130:	4603      	mov	r3, r0
 8007132:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800713a:	fa93 f3a3 	rbit	r3, r3
 800713e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007146:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800714a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8007152:	2320      	movs	r3, #32
 8007154:	e004      	b.n	8007160 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8007156:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800715a:	fab3 f383 	clz	r3, r3
 800715e:	b2db      	uxtb	r3, r3
 8007160:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800716a:	2b00      	cmp	r3, #0
 800716c:	d105      	bne.n	800717a <HAL_ADC_ConfigChannel+0x276>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	0e9b      	lsrs	r3, r3, #26
 8007174:	f003 031f 	and.w	r3, r3, #31
 8007178:	e018      	b.n	80071ac <HAL_ADC_ConfigChannel+0x2a8>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007182:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007186:	fa93 f3a3 	rbit	r3, r3
 800718a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800718e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007196:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800719e:	2320      	movs	r3, #32
 80071a0:	e004      	b.n	80071ac <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80071a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071a6:	fab3 f383 	clz	r3, r3
 80071aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d106      	bne.n	80071be <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2200      	movs	r2, #0
 80071b6:	2101      	movs	r1, #1
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe ffb1 	bl	8006120 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2102      	movs	r1, #2
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fe ff95 	bl	80060f4 <LL_ADC_GetOffsetChannel>
 80071ca:	4603      	mov	r3, r0
 80071cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <HAL_ADC_ConfigChannel+0x2e6>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2102      	movs	r1, #2
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe ff8a 	bl	80060f4 <LL_ADC_GetOffsetChannel>
 80071e0:	4603      	mov	r3, r0
 80071e2:	0e9b      	lsrs	r3, r3, #26
 80071e4:	f003 021f 	and.w	r2, r3, #31
 80071e8:	e01e      	b.n	8007228 <HAL_ADC_ConfigChannel+0x324>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2102      	movs	r1, #2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fe ff7f 	bl	80060f4 <LL_ADC_GetOffsetChannel>
 80071f6:	4603      	mov	r3, r0
 80071f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007200:	fa93 f3a3 	rbit	r3, r3
 8007204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007208:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800720c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007210:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8007218:	2320      	movs	r3, #32
 800721a:	e004      	b.n	8007226 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800721c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007220:	fab3 f383 	clz	r3, r3
 8007224:	b2db      	uxtb	r3, r3
 8007226:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007230:	2b00      	cmp	r3, #0
 8007232:	d105      	bne.n	8007240 <HAL_ADC_ConfigChannel+0x33c>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	0e9b      	lsrs	r3, r3, #26
 800723a:	f003 031f 	and.w	r3, r3, #31
 800723e:	e016      	b.n	800726e <HAL_ADC_ConfigChannel+0x36a>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007248:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800724c:	fa93 f3a3 	rbit	r3, r3
 8007250:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007252:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007258:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007260:	2320      	movs	r3, #32
 8007262:	e004      	b.n	800726e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8007264:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007268:	fab3 f383 	clz	r3, r3
 800726c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800726e:	429a      	cmp	r2, r3
 8007270:	d106      	bne.n	8007280 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2200      	movs	r2, #0
 8007278:	2102      	movs	r1, #2
 800727a:	4618      	mov	r0, r3
 800727c:	f7fe ff50 	bl	8006120 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2103      	movs	r1, #3
 8007286:	4618      	mov	r0, r3
 8007288:	f7fe ff34 	bl	80060f4 <LL_ADC_GetOffsetChannel>
 800728c:	4603      	mov	r3, r0
 800728e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10a      	bne.n	80072ac <HAL_ADC_ConfigChannel+0x3a8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2103      	movs	r1, #3
 800729c:	4618      	mov	r0, r3
 800729e:	f7fe ff29 	bl	80060f4 <LL_ADC_GetOffsetChannel>
 80072a2:	4603      	mov	r3, r0
 80072a4:	0e9b      	lsrs	r3, r3, #26
 80072a6:	f003 021f 	and.w	r2, r3, #31
 80072aa:	e017      	b.n	80072dc <HAL_ADC_ConfigChannel+0x3d8>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2103      	movs	r1, #3
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe ff1e 	bl	80060f4 <LL_ADC_GetOffsetChannel>
 80072b8:	4603      	mov	r3, r0
 80072ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072be:	fa93 f3a3 	rbit	r3, r3
 80072c2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80072c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072c6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80072c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80072ce:	2320      	movs	r3, #32
 80072d0:	e003      	b.n	80072da <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80072d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072d4:	fab3 f383 	clz	r3, r3
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d105      	bne.n	80072f4 <HAL_ADC_ConfigChannel+0x3f0>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	0e9b      	lsrs	r3, r3, #26
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	e011      	b.n	8007318 <HAL_ADC_ConfigChannel+0x414>
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072fc:	fa93 f3a3 	rbit	r3, r3
 8007300:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007302:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007304:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800730c:	2320      	movs	r3, #32
 800730e:	e003      	b.n	8007318 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8007310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007312:	fab3 f383 	clz	r3, r3
 8007316:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007318:	429a      	cmp	r2, r3
 800731a:	d106      	bne.n	800732a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2200      	movs	r2, #0
 8007322:	2103      	movs	r1, #3
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe fefb 	bl	8006120 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff f88e 	bl	8006450 <LL_ADC_IsEnabled>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	f040 8140 	bne.w	80075bc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6818      	ldr	r0, [r3, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	6819      	ldr	r1, [r3, #0]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	461a      	mov	r2, r3
 800734a:	f7fe ffcb 	bl	80062e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	4a8f      	ldr	r2, [pc, #572]	@ (8007590 <HAL_ADC_ConfigChannel+0x68c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	f040 8131 	bne.w	80075bc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10b      	bne.n	8007382 <HAL_ADC_ConfigChannel+0x47e>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	0e9b      	lsrs	r3, r3, #26
 8007370:	3301      	adds	r3, #1
 8007372:	f003 031f 	and.w	r3, r3, #31
 8007376:	2b09      	cmp	r3, #9
 8007378:	bf94      	ite	ls
 800737a:	2301      	movls	r3, #1
 800737c:	2300      	movhi	r3, #0
 800737e:	b2db      	uxtb	r3, r3
 8007380:	e019      	b.n	80073b6 <HAL_ADC_ConfigChannel+0x4b2>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007388:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800738a:	fa93 f3a3 	rbit	r3, r3
 800738e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007392:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007394:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800739a:	2320      	movs	r3, #32
 800739c:	e003      	b.n	80073a6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800739e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073a0:	fab3 f383 	clz	r3, r3
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	3301      	adds	r3, #1
 80073a8:	f003 031f 	and.w	r3, r3, #31
 80073ac:	2b09      	cmp	r3, #9
 80073ae:	bf94      	ite	ls
 80073b0:	2301      	movls	r3, #1
 80073b2:	2300      	movhi	r3, #0
 80073b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d079      	beq.n	80074ae <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d107      	bne.n	80073d6 <HAL_ADC_ConfigChannel+0x4d2>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	0e9b      	lsrs	r3, r3, #26
 80073cc:	3301      	adds	r3, #1
 80073ce:	069b      	lsls	r3, r3, #26
 80073d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80073d4:	e015      	b.n	8007402 <HAL_ADC_ConfigChannel+0x4fe>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073de:	fa93 f3a3 	rbit	r3, r3
 80073e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80073e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073e6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80073e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80073ee:	2320      	movs	r3, #32
 80073f0:	e003      	b.n	80073fa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80073f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073f4:	fab3 f383 	clz	r3, r3
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	3301      	adds	r3, #1
 80073fc:	069b      	lsls	r3, r3, #26
 80073fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <HAL_ADC_ConfigChannel+0x51e>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	0e9b      	lsrs	r3, r3, #26
 8007414:	3301      	adds	r3, #1
 8007416:	f003 031f 	and.w	r3, r3, #31
 800741a:	2101      	movs	r1, #1
 800741c:	fa01 f303 	lsl.w	r3, r1, r3
 8007420:	e017      	b.n	8007452 <HAL_ADC_ConfigChannel+0x54e>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800742a:	fa93 f3a3 	rbit	r3, r3
 800742e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007432:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800743a:	2320      	movs	r3, #32
 800743c:	e003      	b.n	8007446 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800743e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007440:	fab3 f383 	clz	r3, r3
 8007444:	b2db      	uxtb	r3, r3
 8007446:	3301      	adds	r3, #1
 8007448:	f003 031f 	and.w	r3, r3, #31
 800744c:	2101      	movs	r1, #1
 800744e:	fa01 f303 	lsl.w	r3, r1, r3
 8007452:	ea42 0103 	orr.w	r1, r2, r3
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <HAL_ADC_ConfigChannel+0x574>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	0e9b      	lsrs	r3, r3, #26
 8007468:	3301      	adds	r3, #1
 800746a:	f003 021f 	and.w	r2, r3, #31
 800746e:	4613      	mov	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4413      	add	r3, r2
 8007474:	051b      	lsls	r3, r3, #20
 8007476:	e018      	b.n	80074aa <HAL_ADC_ConfigChannel+0x5a6>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800747e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007480:	fa93 f3a3 	rbit	r3, r3
 8007484:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007488:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800748a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8007490:	2320      	movs	r3, #32
 8007492:	e003      	b.n	800749c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8007494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007496:	fab3 f383 	clz	r3, r3
 800749a:	b2db      	uxtb	r3, r3
 800749c:	3301      	adds	r3, #1
 800749e:	f003 021f 	and.w	r2, r3, #31
 80074a2:	4613      	mov	r3, r2
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	4413      	add	r3, r2
 80074a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074aa:	430b      	orrs	r3, r1
 80074ac:	e081      	b.n	80075b2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d107      	bne.n	80074ca <HAL_ADC_ConfigChannel+0x5c6>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	0e9b      	lsrs	r3, r3, #26
 80074c0:	3301      	adds	r3, #1
 80074c2:	069b      	lsls	r3, r3, #26
 80074c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80074c8:	e015      	b.n	80074f6 <HAL_ADC_ConfigChannel+0x5f2>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d2:	fa93 f3a3 	rbit	r3, r3
 80074d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80074d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074da:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80074e2:	2320      	movs	r3, #32
 80074e4:	e003      	b.n	80074ee <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	fab3 f383 	clz	r3, r3
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	3301      	adds	r3, #1
 80074f0:	069b      	lsls	r3, r3, #26
 80074f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d109      	bne.n	8007516 <HAL_ADC_ConfigChannel+0x612>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	0e9b      	lsrs	r3, r3, #26
 8007508:	3301      	adds	r3, #1
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	2101      	movs	r1, #1
 8007510:	fa01 f303 	lsl.w	r3, r1, r3
 8007514:	e017      	b.n	8007546 <HAL_ADC_ConfigChannel+0x642>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	fa93 f3a3 	rbit	r3, r3
 8007522:	61fb      	str	r3, [r7, #28]
  return result;
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800752e:	2320      	movs	r3, #32
 8007530:	e003      	b.n	800753a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8007532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007534:	fab3 f383 	clz	r3, r3
 8007538:	b2db      	uxtb	r3, r3
 800753a:	3301      	adds	r3, #1
 800753c:	f003 031f 	and.w	r3, r3, #31
 8007540:	2101      	movs	r1, #1
 8007542:	fa01 f303 	lsl.w	r3, r1, r3
 8007546:	ea42 0103 	orr.w	r1, r2, r3
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10d      	bne.n	8007572 <HAL_ADC_ConfigChannel+0x66e>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	0e9b      	lsrs	r3, r3, #26
 800755c:	3301      	adds	r3, #1
 800755e:	f003 021f 	and.w	r2, r3, #31
 8007562:	4613      	mov	r3, r2
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	4413      	add	r3, r2
 8007568:	3b1e      	subs	r3, #30
 800756a:	051b      	lsls	r3, r3, #20
 800756c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007570:	e01e      	b.n	80075b0 <HAL_ADC_ConfigChannel+0x6ac>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	fa93 f3a3 	rbit	r3, r3
 800757e:	613b      	str	r3, [r7, #16]
  return result;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d104      	bne.n	8007594 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800758a:	2320      	movs	r3, #32
 800758c:	e006      	b.n	800759c <HAL_ADC_ConfigChannel+0x698>
 800758e:	bf00      	nop
 8007590:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	fab3 f383 	clz	r3, r3
 800759a:	b2db      	uxtb	r3, r3
 800759c:	3301      	adds	r3, #1
 800759e:	f003 021f 	and.w	r2, r3, #31
 80075a2:	4613      	mov	r3, r2
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	4413      	add	r3, r2
 80075a8:	3b1e      	subs	r3, #30
 80075aa:	051b      	lsls	r3, r3, #20
 80075ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075b6:	4619      	mov	r1, r3
 80075b8:	f7fe fe68 	bl	800628c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4b3f      	ldr	r3, [pc, #252]	@ (80076c0 <HAL_ADC_ConfigChannel+0x7bc>)
 80075c2:	4013      	ands	r3, r2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d071      	beq.n	80076ac <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075c8:	483e      	ldr	r0, [pc, #248]	@ (80076c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80075ca:	f7fe fd61 	bl	8006090 <LL_ADC_GetCommonPathInternalCh>
 80075ce:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a3c      	ldr	r2, [pc, #240]	@ (80076c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d004      	beq.n	80075e6 <HAL_ADC_ConfigChannel+0x6e2>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a3a      	ldr	r2, [pc, #232]	@ (80076cc <HAL_ADC_ConfigChannel+0x7c8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d127      	bne.n	8007636 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80075e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d121      	bne.n	8007636 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075fa:	d157      	bne.n	80076ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80075fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007600:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007604:	4619      	mov	r1, r3
 8007606:	482f      	ldr	r0, [pc, #188]	@ (80076c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8007608:	f7fe fd2f 	bl	800606a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800760c:	4b30      	ldr	r3, [pc, #192]	@ (80076d0 <HAL_ADC_ConfigChannel+0x7cc>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	099b      	lsrs	r3, r3, #6
 8007612:	4a30      	ldr	r2, [pc, #192]	@ (80076d4 <HAL_ADC_ConfigChannel+0x7d0>)
 8007614:	fba2 2303 	umull	r2, r3, r2, r3
 8007618:	099b      	lsrs	r3, r3, #6
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	4613      	mov	r3, r2
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	4413      	add	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007626:	e002      	b.n	800762e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3b01      	subs	r3, #1
 800762c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1f9      	bne.n	8007628 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007634:	e03a      	b.n	80076ac <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a27      	ldr	r2, [pc, #156]	@ (80076d8 <HAL_ADC_ConfigChannel+0x7d4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d113      	bne.n	8007668 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10d      	bne.n	8007668 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a22      	ldr	r2, [pc, #136]	@ (80076dc <HAL_ADC_ConfigChannel+0x7d8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d02a      	beq.n	80076ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007656:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800765a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800765e:	4619      	mov	r1, r3
 8007660:	4818      	ldr	r0, [pc, #96]	@ (80076c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8007662:	f7fe fd02 	bl	800606a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007666:	e021      	b.n	80076ac <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a1c      	ldr	r2, [pc, #112]	@ (80076e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d11c      	bne.n	80076ac <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007672:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d116      	bne.n	80076ac <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a16      	ldr	r2, [pc, #88]	@ (80076dc <HAL_ADC_ConfigChannel+0x7d8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d011      	beq.n	80076ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800768c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007690:	4619      	mov	r1, r3
 8007692:	480c      	ldr	r0, [pc, #48]	@ (80076c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8007694:	f7fe fce9 	bl	800606a <LL_ADC_SetCommonPathInternalCh>
 8007698:	e008      	b.n	80076ac <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800769e:	f043 0220 	orr.w	r2, r3, #32
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80076b4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	37d8      	adds	r7, #216	@ 0xd8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	80080000 	.word	0x80080000
 80076c4:	50000300 	.word	0x50000300
 80076c8:	c3210000 	.word	0xc3210000
 80076cc:	90c00010 	.word	0x90c00010
 80076d0:	20000004 	.word	0x20000004
 80076d4:	053e2d63 	.word	0x053e2d63
 80076d8:	c7520000 	.word	0xc7520000
 80076dc:	50000100 	.word	0x50000100
 80076e0:	cb840000 	.word	0xcb840000

080076e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe fef6 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 8007700:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe ff17 	bl	800653a <LL_ADC_INJ_IsConversionOngoing>
 800770c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 8098 	beq.w	800784c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d02a      	beq.n	8007780 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7f5b      	ldrb	r3, [r3, #29]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d126      	bne.n	8007780 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	7f1b      	ldrb	r3, [r3, #28]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d122      	bne.n	8007780 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800773a:	2301      	movs	r3, #1
 800773c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800773e:	e014      	b.n	800776a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	4a45      	ldr	r2, [pc, #276]	@ (8007858 <ADC_ConversionStop+0x174>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d90d      	bls.n	8007764 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800774c:	f043 0210 	orr.w	r2, r3, #16
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007758:	f043 0201 	orr.w	r2, r3, #1
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e074      	b.n	800784e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	3301      	adds	r3, #1
 8007768:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007774:	2b40      	cmp	r3, #64	@ 0x40
 8007776:	d1e3      	bne.n	8007740 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2240      	movs	r2, #64	@ 0x40
 800777e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d014      	beq.n	80077b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe feae 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00c      	beq.n	80077b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4618      	mov	r0, r3
 800779c:	f7fe fe6b 	bl	8006476 <LL_ADC_IsDisableOngoing>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d104      	bne.n	80077b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe fe8a 	bl	80064c4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d014      	beq.n	80077e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe febd 	bl	800653a <LL_ADC_INJ_IsConversionOngoing>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00c      	beq.n	80077e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe fe53 	bl	8006476 <LL_ADC_IsDisableOngoing>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d104      	bne.n	80077e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fe fe99 	bl	8006512 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d005      	beq.n	80077f2 <ADC_ConversionStop+0x10e>
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d105      	bne.n	80077f8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80077ec:	230c      	movs	r3, #12
 80077ee:	617b      	str	r3, [r7, #20]
        break;
 80077f0:	e005      	b.n	80077fe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80077f2:	2308      	movs	r3, #8
 80077f4:	617b      	str	r3, [r7, #20]
        break;
 80077f6:	e002      	b.n	80077fe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80077f8:	2304      	movs	r3, #4
 80077fa:	617b      	str	r3, [r7, #20]
        break;
 80077fc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80077fe:	f7fe fbf3 	bl	8005fe8 <HAL_GetTick>
 8007802:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007804:	e01b      	b.n	800783e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007806:	f7fe fbef 	bl	8005fe8 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b05      	cmp	r3, #5
 8007812:	d914      	bls.n	800783e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689a      	ldr	r2, [r3, #8]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	4013      	ands	r3, r2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00d      	beq.n	800783e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007826:	f043 0210 	orr.w	r2, r3, #16
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007832:	f043 0201 	orr.w	r2, r3, #1
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e007      	b.n	800784e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	4013      	ands	r3, r2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1dc      	bne.n	8007806 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3720      	adds	r7, #32
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	a33fffff 	.word	0xa33fffff

0800785c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007864:	2300      	movs	r3, #0
 8007866:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe fdef 	bl	8006450 <LL_ADC_IsEnabled>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d169      	bne.n	800794c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689a      	ldr	r2, [r3, #8]
 800787e:	4b36      	ldr	r3, [pc, #216]	@ (8007958 <ADC_Enable+0xfc>)
 8007880:	4013      	ands	r3, r2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00d      	beq.n	80078a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800788a:	f043 0210 	orr.w	r2, r3, #16
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007896:	f043 0201 	orr.w	r2, r3, #1
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e055      	b.n	800794e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe fdaa 	bl	8006400 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80078ac:	482b      	ldr	r0, [pc, #172]	@ (800795c <ADC_Enable+0x100>)
 80078ae:	f7fe fbef 	bl	8006090 <LL_ADC_GetCommonPathInternalCh>
 80078b2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80078b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d013      	beq.n	80078e4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80078bc:	4b28      	ldr	r3, [pc, #160]	@ (8007960 <ADC_Enable+0x104>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	099b      	lsrs	r3, r3, #6
 80078c2:	4a28      	ldr	r2, [pc, #160]	@ (8007964 <ADC_Enable+0x108>)
 80078c4:	fba2 2303 	umull	r2, r3, r2, r3
 80078c8:	099b      	lsrs	r3, r3, #6
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	4613      	mov	r3, r2
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	4413      	add	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80078d6:	e002      	b.n	80078de <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	3b01      	subs	r3, #1
 80078dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1f9      	bne.n	80078d8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80078e4:	f7fe fb80 	bl	8005fe8 <HAL_GetTick>
 80078e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80078ea:	e028      	b.n	800793e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe fdad 	bl	8006450 <LL_ADC_IsEnabled>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d104      	bne.n	8007906 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4618      	mov	r0, r3
 8007902:	f7fe fd7d 	bl	8006400 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007906:	f7fe fb6f 	bl	8005fe8 <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d914      	bls.n	800793e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b01      	cmp	r3, #1
 8007920:	d00d      	beq.n	800793e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007926:	f043 0210 	orr.w	r2, r3, #16
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007932:	f043 0201 	orr.w	r2, r3, #1
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e007      	b.n	800794e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	2b01      	cmp	r3, #1
 800794a:	d1cf      	bne.n	80078ec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	8000003f 	.word	0x8000003f
 800795c:	50000300 	.word	0x50000300
 8007960:	20000004 	.word	0x20000004
 8007964:	053e2d63 	.word	0x053e2d63

08007968 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe fd7e 	bl	8006476 <LL_ADC_IsDisableOngoing>
 800797a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4618      	mov	r0, r3
 8007982:	f7fe fd65 	bl	8006450 <LL_ADC_IsEnabled>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d047      	beq.n	8007a1c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d144      	bne.n	8007a1c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 030d 	and.w	r3, r3, #13
 800799c:	2b01      	cmp	r3, #1
 800799e:	d10c      	bne.n	80079ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fe fd3f 	bl	8006428 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2203      	movs	r2, #3
 80079b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80079b2:	f7fe fb19 	bl	8005fe8 <HAL_GetTick>
 80079b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80079b8:	e029      	b.n	8007a0e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079be:	f043 0210 	orr.w	r2, r3, #16
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079ca:	f043 0201 	orr.w	r2, r3, #1
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e023      	b.n	8007a1e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80079d6:	f7fe fb07 	bl	8005fe8 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d914      	bls.n	8007a0e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00d      	beq.n	8007a0e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079f6:	f043 0210 	orr.w	r2, r3, #16
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a02:	f043 0201 	orr.w	r2, r3, #1
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e007      	b.n	8007a1e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1dc      	bne.n	80079d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d14b      	bne.n	8007ad8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0308 	and.w	r3, r3, #8
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d021      	beq.n	8007a9e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fe fbc2 	bl	80061e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d032      	beq.n	8007ad0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d12b      	bne.n	8007ad0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d11f      	bne.n	8007ad0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a94:	f043 0201 	orr.w	r2, r3, #1
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a9c:	e018      	b.n	8007ad0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d111      	bne.n	8007ad0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ab0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d105      	bne.n	8007ad0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ac8:	f043 0201 	orr.w	r2, r3, #1
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f00e fae9 	bl	80160a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007ad6:	e00e      	b.n	8007af6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007adc:	f003 0310 	and.w	r3, r3, #16
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7ff fa03 	bl	8006ef0 <HAL_ADC_ErrorCallback>
}
 8007aea:	e004      	b.n	8007af6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
}
 8007af6:	bf00      	nop
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f7ff f9db 	bl	8006ec8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007b12:	bf00      	nop
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b38:	f043 0204 	orr.w	r2, r3, #4
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff f9d5 	bl	8006ef0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <LL_ADC_StartCalibration>:
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b083      	sub	sp, #12
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007b60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	609a      	str	r2, [r3, #8]
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <LL_ADC_IsCalibrationOnGoing>:
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b94:	d101      	bne.n	8007b9a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_ADCEx_Calibration_Start+0x1c>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e04d      	b.n	8007c60 <HAL_ADCEx_Calibration_Start+0xb8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff fecb 	bl	8007968 <ADC_Disable>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d136      	bne.n	8007c4a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007be0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007be4:	f023 0302 	bic.w	r3, r3, #2
 8007be8:	f043 0202 	orr.w	r2, r3, #2
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff ffa9 	bl	8007b4e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007bfc:	e014      	b.n	8007c28 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	3301      	adds	r3, #1
 8007c02:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4a18      	ldr	r2, [pc, #96]	@ (8007c68 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d90d      	bls.n	8007c28 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c10:	f023 0312 	bic.w	r3, r3, #18
 8007c14:	f043 0210 	orr.w	r2, r3, #16
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e01b      	b.n	8007c60 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7ff ffa7 	bl	8007b80 <LL_ADC_IsCalibrationOnGoing>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e2      	bne.n	8007bfe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c3c:	f023 0303 	bic.w	r3, r3, #3
 8007c40:	f043 0201 	orr.w	r2, r3, #1
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007c48:	e005      	b.n	8007c56 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c4e:	f043 0210 	orr.w	r2, r3, #16
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	0004de01 	.word	0x0004de01

08007c6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <__NVIC_SetPriorityGrouping>:
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8007d14 <__NVIC_SetPriorityGrouping+0x44>)
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007cec:	4013      	ands	r3, r2
 8007cee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d02:	4a04      	ldr	r2, [pc, #16]	@ (8007d14 <__NVIC_SetPriorityGrouping+0x44>)
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	60d3      	str	r3, [r2, #12]
}
 8007d08:	bf00      	nop
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	e000ed00 	.word	0xe000ed00

08007d18 <__NVIC_GetPriorityGrouping>:
{
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d1c:	4b04      	ldr	r3, [pc, #16]	@ (8007d30 <__NVIC_GetPriorityGrouping+0x18>)
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	0a1b      	lsrs	r3, r3, #8
 8007d22:	f003 0307 	and.w	r3, r3, #7
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	e000ed00 	.word	0xe000ed00

08007d34 <__NVIC_EnableIRQ>:
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	db0b      	blt.n	8007d5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	f003 021f 	and.w	r2, r3, #31
 8007d4c:	4907      	ldr	r1, [pc, #28]	@ (8007d6c <__NVIC_EnableIRQ+0x38>)
 8007d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	2001      	movs	r0, #1
 8007d56:	fa00 f202 	lsl.w	r2, r0, r2
 8007d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007d5e:	bf00      	nop
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	e000e100 	.word	0xe000e100

08007d70 <__NVIC_SetPriority>:
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	db0a      	blt.n	8007d9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	490c      	ldr	r1, [pc, #48]	@ (8007dbc <__NVIC_SetPriority+0x4c>)
 8007d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d8e:	0112      	lsls	r2, r2, #4
 8007d90:	b2d2      	uxtb	r2, r2
 8007d92:	440b      	add	r3, r1
 8007d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007d98:	e00a      	b.n	8007db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	4908      	ldr	r1, [pc, #32]	@ (8007dc0 <__NVIC_SetPriority+0x50>)
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	f003 030f 	and.w	r3, r3, #15
 8007da6:	3b04      	subs	r3, #4
 8007da8:	0112      	lsls	r2, r2, #4
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	440b      	add	r3, r1
 8007dae:	761a      	strb	r2, [r3, #24]
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	e000e100 	.word	0xe000e100
 8007dc0:	e000ed00 	.word	0xe000ed00

08007dc4 <NVIC_EncodePriority>:
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b089      	sub	sp, #36	@ 0x24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	f1c3 0307 	rsb	r3, r3, #7
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	bf28      	it	cs
 8007de2:	2304      	movcs	r3, #4
 8007de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	3304      	adds	r3, #4
 8007dea:	2b06      	cmp	r3, #6
 8007dec:	d902      	bls.n	8007df4 <NVIC_EncodePriority+0x30>
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	3b03      	subs	r3, #3
 8007df2:	e000      	b.n	8007df6 <NVIC_EncodePriority+0x32>
 8007df4:	2300      	movs	r3, #0
 8007df6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007df8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007e02:	43da      	mvns	r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	401a      	ands	r2, r3
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	fa01 f303 	lsl.w	r3, r1, r3
 8007e16:	43d9      	mvns	r1, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e1c:	4313      	orrs	r3, r2
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3724      	adds	r7, #36	@ 0x24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7ff ff4c 	bl	8007cd0 <__NVIC_SetPriorityGrouping>
}
 8007e38:	bf00      	nop
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007e4e:	f7ff ff63 	bl	8007d18 <__NVIC_GetPriorityGrouping>
 8007e52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	68b9      	ldr	r1, [r7, #8]
 8007e58:	6978      	ldr	r0, [r7, #20]
 8007e5a:	f7ff ffb3 	bl	8007dc4 <NVIC_EncodePriority>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff ff82 	bl	8007d70 <__NVIC_SetPriority>
}
 8007e6c:	bf00      	nop
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff ff56 	bl	8007d34 <__NVIC_EnableIRQ>
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e014      	b.n	8007ecc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	791b      	ldrb	r3, [r3, #4]
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d105      	bne.n	8007eb8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7fb fc38 	bl	8003728 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08a      	sub	sp, #40	@ 0x28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <HAL_DAC_ConfigChannel+0x1c>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e19e      	b.n	8008232 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	795b      	ldrb	r3, [r3, #5]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_DAC_ConfigChannel+0x2c>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e198      	b.n	8008232 <HAL_DAC_ConfigChannel+0x35e>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d17a      	bne.n	800800a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007f14:	f7fe f868 	bl	8005fe8 <HAL_GetTick>
 8007f18:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d13d      	bne.n	8007f9c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007f20:	e018      	b.n	8007f54 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007f22:	f7fe f861 	bl	8005fe8 <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d911      	bls.n	8007f54 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	f043 0208 	orr.w	r2, r3, #8
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2203      	movs	r2, #3
 8007f4e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e16e      	b.n	8008232 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1df      	bne.n	8007f22 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007f6a:	641a      	str	r2, [r3, #64]	@ 0x40
 8007f6c:	e020      	b.n	8007fb0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007f6e:	f7fe f83b 	bl	8005fe8 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d90f      	bls.n	8007f9c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	da0a      	bge.n	8007f9c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	f043 0208 	orr.w	r2, r3, #8
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2203      	movs	r2, #3
 8007f96:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e14a      	b.n	8008232 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	dbe3      	blt.n	8007f6e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007fae:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f003 0310 	and.w	r3, r3, #16
 8007fbc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fc4:	43db      	mvns	r3, r3
 8007fc6:	ea02 0103 	and.w	r1, r2, r3
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	409a      	lsls	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f003 0310 	and.w	r3, r3, #16
 8007fea:	21ff      	movs	r1, #255	@ 0xff
 8007fec:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	ea02 0103 	and.w	r1, r2, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	409a      	lsls	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d11d      	bne.n	800804e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008018:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f003 0310 	and.w	r3, r3, #16
 8008020:	221f      	movs	r2, #31
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	43db      	mvns	r3, r3
 8008028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800802a:	4013      	ands	r3, r2
 800802c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f003 0310 	and.w	r3, r3, #16
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	fa02 f303 	lsl.w	r3, r2, r3
 8008040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008042:	4313      	orrs	r3, r2
 8008044:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800804c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008054:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	2207      	movs	r2, #7
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	43db      	mvns	r3, r3
 8008064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008066:	4013      	ands	r3, r2
 8008068:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d102      	bne.n	8008078 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8008072:	2300      	movs	r3, #0
 8008074:	623b      	str	r3, [r7, #32]
 8008076:	e00f      	b.n	8008098 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	2b02      	cmp	r3, #2
 800807e:	d102      	bne.n	8008086 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008080:	2301      	movs	r3, #1
 8008082:	623b      	str	r3, [r7, #32]
 8008084:	e008      	b.n	8008098 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d102      	bne.n	8008094 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800808e:	2301      	movs	r3, #1
 8008090:	623b      	str	r3, [r7, #32]
 8008092:	e001      	b.n	8008098 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008094:	2300      	movs	r3, #0
 8008096:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	6a3a      	ldr	r2, [r7, #32]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f003 0310 	and.w	r3, r3, #16
 80080ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080b2:	fa02 f303 	lsl.w	r3, r2, r3
 80080b6:	43db      	mvns	r3, r3
 80080b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080ba:	4013      	ands	r3, r2
 80080bc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	791b      	ldrb	r3, [r3, #4]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d102      	bne.n	80080cc <HAL_DAC_ConfigChannel+0x1f8>
 80080c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80080ca:	e000      	b.n	80080ce <HAL_DAC_ConfigChannel+0x1fa>
 80080cc:	2300      	movs	r3, #0
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f003 0310 	and.w	r3, r3, #16
 80080da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	43db      	mvns	r3, r3
 80080e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080e6:	4013      	ands	r3, r2
 80080e8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	795b      	ldrb	r3, [r3, #5]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d102      	bne.n	80080f8 <HAL_DAC_ConfigChannel+0x224>
 80080f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080f6:	e000      	b.n	80080fa <HAL_DAC_ConfigChannel+0x226>
 80080f8:	2300      	movs	r3, #0
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008102:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8008106:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d114      	bne.n	800813a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008110:	f002 f8c2 	bl	800a298 <HAL_RCC_GetHCLKFreq>
 8008114:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	4a48      	ldr	r2, [pc, #288]	@ (800823c <HAL_DAC_ConfigChannel+0x368>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d904      	bls.n	8008128 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008124:	627b      	str	r3, [r7, #36]	@ 0x24
 8008126:	e00f      	b.n	8008148 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	4a45      	ldr	r2, [pc, #276]	@ (8008240 <HAL_DAC_ConfigChannel+0x36c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d90a      	bls.n	8008146 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008136:	627b      	str	r3, [r7, #36]	@ 0x24
 8008138:	e006      	b.n	8008148 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008140:	4313      	orrs	r3, r2
 8008142:	627b      	str	r3, [r7, #36]	@ 0x24
 8008144:	e000      	b.n	8008148 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8008146:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f003 0310 	and.w	r3, r3, #16
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	fa02 f303 	lsl.w	r3, r2, r3
 8008154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008156:	4313      	orrs	r3, r2
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008160:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6819      	ldr	r1, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f003 0310 	and.w	r3, r3, #16
 800816e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008172:	fa02 f303 	lsl.w	r3, r2, r3
 8008176:	43da      	mvns	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	400a      	ands	r2, r1
 800817e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f003 0310 	and.w	r3, r3, #16
 800818e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8008192:	fa02 f303 	lsl.w	r3, r2, r3
 8008196:	43db      	mvns	r3, r3
 8008198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800819a:	4013      	ands	r3, r2
 800819c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f003 0310 	and.w	r3, r3, #16
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	fa02 f303 	lsl.w	r3, r2, r3
 80081b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b2:	4313      	orrs	r3, r2
 80081b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081bc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f003 0310 	and.w	r3, r3, #16
 80081ca:	22c0      	movs	r2, #192	@ 0xc0
 80081cc:	fa02 f303 	lsl.w	r3, r2, r3
 80081d0:	43da      	mvns	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	400a      	ands	r2, r1
 80081d8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	089b      	lsrs	r3, r3, #2
 80081e0:	f003 030f 	and.w	r3, r3, #15
 80081e4:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	089b      	lsrs	r3, r3, #2
 80081ec:	021b      	lsls	r3, r3, #8
 80081ee:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f003 0310 	and.w	r3, r3, #16
 8008204:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8008208:	fa01 f303 	lsl.w	r3, r1, r3
 800820c:	43db      	mvns	r3, r3
 800820e:	ea02 0103 	and.w	r1, r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	409a      	lsls	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2201      	movs	r2, #1
 8008228:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008230:	7ffb      	ldrb	r3, [r7, #31]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3728      	adds	r7, #40	@ 0x28
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	09896800 	.word	0x09896800
 8008240:	04c4b400 	.word	0x04c4b400

08008244 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e08d      	b.n	8008372 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	4b47      	ldr	r3, [pc, #284]	@ (800837c <HAL_DMA_Init+0x138>)
 800825e:	429a      	cmp	r2, r3
 8008260:	d80f      	bhi.n	8008282 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	4b45      	ldr	r3, [pc, #276]	@ (8008380 <HAL_DMA_Init+0x13c>)
 800826a:	4413      	add	r3, r2
 800826c:	4a45      	ldr	r2, [pc, #276]	@ (8008384 <HAL_DMA_Init+0x140>)
 800826e:	fba2 2303 	umull	r2, r3, r2, r3
 8008272:	091b      	lsrs	r3, r3, #4
 8008274:	009a      	lsls	r2, r3, #2
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a42      	ldr	r2, [pc, #264]	@ (8008388 <HAL_DMA_Init+0x144>)
 800827e:	641a      	str	r2, [r3, #64]	@ 0x40
 8008280:	e00e      	b.n	80082a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	461a      	mov	r2, r3
 8008288:	4b40      	ldr	r3, [pc, #256]	@ (800838c <HAL_DMA_Init+0x148>)
 800828a:	4413      	add	r3, r2
 800828c:	4a3d      	ldr	r2, [pc, #244]	@ (8008384 <HAL_DMA_Init+0x140>)
 800828e:	fba2 2303 	umull	r2, r3, r2, r3
 8008292:	091b      	lsrs	r3, r3, #4
 8008294:	009a      	lsls	r2, r3, #2
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a3c      	ldr	r2, [pc, #240]	@ (8008390 <HAL_DMA_Init+0x14c>)
 800829e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2202      	movs	r2, #2
 80082a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80082b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80082c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fa76 	bl	80087e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008300:	d102      	bne.n	8008308 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008310:	b2d2      	uxtb	r2, r2
 8008312:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800831c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d010      	beq.n	8008348 <HAL_DMA_Init+0x104>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	2b04      	cmp	r3, #4
 800832c:	d80c      	bhi.n	8008348 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fa96 	bl	8008860 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008344:	605a      	str	r2, [r3, #4]
 8008346:	e008      	b.n	800835a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	40020407 	.word	0x40020407
 8008380:	bffdfff8 	.word	0xbffdfff8
 8008384:	cccccccd 	.word	0xcccccccd
 8008388:	40020000 	.word	0x40020000
 800838c:	bffdfbf8 	.word	0xbffdfbf8
 8008390:	40020400 	.word	0x40020400

08008394 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d101      	bne.n	80083b4 <HAL_DMA_Start_IT+0x20>
 80083b0:	2302      	movs	r3, #2
 80083b2:	e066      	b.n	8008482 <HAL_DMA_Start_IT+0xee>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d155      	bne.n	8008474 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2202      	movs	r2, #2
 80083cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0201 	bic.w	r2, r2, #1
 80083e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	68b9      	ldr	r1, [r7, #8]
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 f9bb 	bl	8008768 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d008      	beq.n	800840c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f042 020e 	orr.w	r2, r2, #14
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	e00f      	b.n	800842c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 0204 	bic.w	r2, r2, #4
 800841a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 020a 	orr.w	r2, r2, #10
 800842a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d007      	beq.n	800844a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008444:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008448:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800844e:	2b00      	cmp	r3, #0
 8008450:	d007      	beq.n	8008462 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800845c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008460:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f042 0201 	orr.w	r2, r2, #1
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	e005      	b.n	8008480 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800847c:	2302      	movs	r3, #2
 800847e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008480:	7dfb      	ldrb	r3, [r7, #23]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800848a:	b480      	push	{r7}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d005      	beq.n	80084ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2204      	movs	r2, #4
 80084a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	73fb      	strb	r3, [r7, #15]
 80084ac:	e037      	b.n	800851e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f022 020e 	bic.w	r2, r2, #14
 80084bc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084cc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 0201 	bic.w	r2, r2, #1
 80084dc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e2:	f003 021f 	and.w	r2, r3, #31
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ea:	2101      	movs	r1, #1
 80084ec:	fa01 f202 	lsl.w	r2, r1, r2
 80084f0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80084fa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00c      	beq.n	800851e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008512:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800851c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800852e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b02      	cmp	r3, #2
 8008552:	d00d      	beq.n	8008570 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2204      	movs	r2, #4
 8008558:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	73fb      	strb	r3, [r7, #15]
 800856e:	e047      	b.n	8008600 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 020e 	bic.w	r2, r2, #14
 800857e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0201 	bic.w	r2, r2, #1
 800858e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800859a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800859e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a4:	f003 021f 	and.w	r2, r3, #31
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ac:	2101      	movs	r1, #1
 80085ae:	fa01 f202 	lsl.w	r2, r1, r2
 80085b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80085bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00c      	beq.n	80085e0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80085de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	4798      	blx	r3
    }
  }
  return status;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008626:	f003 031f 	and.w	r3, r3, #31
 800862a:	2204      	movs	r2, #4
 800862c:	409a      	lsls	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	4013      	ands	r3, r2
 8008632:	2b00      	cmp	r3, #0
 8008634:	d026      	beq.n	8008684 <HAL_DMA_IRQHandler+0x7a>
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	f003 0304 	and.w	r3, r3, #4
 800863c:	2b00      	cmp	r3, #0
 800863e:	d021      	beq.n	8008684 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0320 	and.w	r3, r3, #32
 800864a:	2b00      	cmp	r3, #0
 800864c:	d107      	bne.n	800865e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f022 0204 	bic.w	r2, r2, #4
 800865c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008662:	f003 021f 	and.w	r2, r3, #31
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866a:	2104      	movs	r1, #4
 800866c:	fa01 f202 	lsl.w	r2, r1, r2
 8008670:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008676:	2b00      	cmp	r3, #0
 8008678:	d071      	beq.n	800875e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008682:	e06c      	b.n	800875e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008688:	f003 031f 	and.w	r3, r3, #31
 800868c:	2202      	movs	r2, #2
 800868e:	409a      	lsls	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4013      	ands	r3, r2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d02e      	beq.n	80086f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d029      	beq.n	80086f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0320 	and.w	r3, r3, #32
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10b      	bne.n	80086c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 020a 	bic.w	r2, r2, #10
 80086be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086cc:	f003 021f 	and.w	r2, r3, #31
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d4:	2102      	movs	r1, #2
 80086d6:	fa01 f202 	lsl.w	r2, r1, r2
 80086da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d038      	beq.n	800875e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80086f4:	e033      	b.n	800875e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086fa:	f003 031f 	and.w	r3, r3, #31
 80086fe:	2208      	movs	r2, #8
 8008700:	409a      	lsls	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	4013      	ands	r3, r2
 8008706:	2b00      	cmp	r3, #0
 8008708:	d02a      	beq.n	8008760 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f003 0308 	and.w	r3, r3, #8
 8008710:	2b00      	cmp	r3, #0
 8008712:	d025      	beq.n	8008760 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 020e 	bic.w	r2, r2, #14
 8008722:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008728:	f003 021f 	and.w	r2, r3, #31
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008730:	2101      	movs	r1, #1
 8008732:	fa01 f202 	lsl.w	r2, r1, r2
 8008736:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008752:	2b00      	cmp	r3, #0
 8008754:	d004      	beq.n	8008760 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800875e:	bf00      	nop
 8008760:	bf00      	nop
}
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800877e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008784:	2b00      	cmp	r3, #0
 8008786:	d004      	beq.n	8008792 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008790:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008796:	f003 021f 	and.w	r2, r3, #31
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879e:	2101      	movs	r1, #1
 80087a0:	fa01 f202 	lsl.w	r2, r1, r2
 80087a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	2b10      	cmp	r3, #16
 80087b4:	d108      	bne.n	80087c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80087c6:	e007      	b.n	80087d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	60da      	str	r2, [r3, #12]
}
 80087d8:	bf00      	nop
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	461a      	mov	r2, r3
 80087f2:	4b16      	ldr	r3, [pc, #88]	@ (800884c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d802      	bhi.n	80087fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80087f8:	4b15      	ldr	r3, [pc, #84]	@ (8008850 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	e001      	b.n	8008802 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80087fe:	4b15      	ldr	r3, [pc, #84]	@ (8008854 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008800:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	b2db      	uxtb	r3, r3
 800880c:	3b08      	subs	r3, #8
 800880e:	4a12      	ldr	r2, [pc, #72]	@ (8008858 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008810:	fba2 2303 	umull	r2, r3, r2, r3
 8008814:	091b      	lsrs	r3, r3, #4
 8008816:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800881c:	089b      	lsrs	r3, r3, #2
 800881e:	009a      	lsls	r2, r3, #2
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	4413      	add	r3, r2
 8008824:	461a      	mov	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a0b      	ldr	r2, [pc, #44]	@ (800885c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800882e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f003 031f 	and.w	r3, r3, #31
 8008836:	2201      	movs	r2, #1
 8008838:	409a      	lsls	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	40020407 	.word	0x40020407
 8008850:	40020800 	.word	0x40020800
 8008854:	40020820 	.word	0x40020820
 8008858:	cccccccd 	.word	0xcccccccd
 800885c:	40020880 	.word	0x40020880

08008860 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	b2db      	uxtb	r3, r3
 800886e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	4b0b      	ldr	r3, [pc, #44]	@ (80088a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008874:	4413      	add	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	461a      	mov	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a08      	ldr	r2, [pc, #32]	@ (80088a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008882:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	3b01      	subs	r3, #1
 8008888:	f003 031f 	and.w	r3, r3, #31
 800888c:	2201      	movs	r2, #1
 800888e:	409a      	lsls	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008894:	bf00      	nop
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	1000823f 	.word	0x1000823f
 80088a4:	40020940 	.word	0x40020940

080088a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80088b6:	e15a      	b.n	8008b6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	2101      	movs	r1, #1
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	fa01 f303 	lsl.w	r3, r1, r3
 80088c4:	4013      	ands	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 814c 	beq.w	8008b68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 0303 	and.w	r3, r3, #3
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d005      	beq.n	80088e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d130      	bne.n	800894a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	2203      	movs	r2, #3
 80088f4:	fa02 f303 	lsl.w	r3, r2, r3
 80088f8:	43db      	mvns	r3, r3
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	4013      	ands	r3, r2
 80088fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	68da      	ldr	r2, [r3, #12]
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	fa02 f303 	lsl.w	r3, r2, r3
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	4313      	orrs	r3, r2
 8008910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800891e:	2201      	movs	r2, #1
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	fa02 f303 	lsl.w	r3, r2, r3
 8008926:	43db      	mvns	r3, r3
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	4013      	ands	r3, r2
 800892c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	091b      	lsrs	r3, r3, #4
 8008934:	f003 0201 	and.w	r2, r3, #1
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	fa02 f303 	lsl.w	r3, r2, r3
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	4313      	orrs	r3, r2
 8008942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	2b03      	cmp	r3, #3
 8008954:	d017      	beq.n	8008986 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	2203      	movs	r2, #3
 8008962:	fa02 f303 	lsl.w	r3, r2, r3
 8008966:	43db      	mvns	r3, r3
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	4013      	ands	r3, r2
 800896c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	689a      	ldr	r2, [r3, #8]
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	fa02 f303 	lsl.w	r3, r2, r3
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	4313      	orrs	r3, r2
 800897e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	f003 0303 	and.w	r3, r3, #3
 800898e:	2b02      	cmp	r3, #2
 8008990:	d123      	bne.n	80089da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	08da      	lsrs	r2, r3, #3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	3208      	adds	r2, #8
 800899a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f003 0307 	and.w	r3, r3, #7
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	220f      	movs	r2, #15
 80089aa:	fa02 f303 	lsl.w	r3, r2, r3
 80089ae:	43db      	mvns	r3, r3
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	4013      	ands	r3, r2
 80089b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	691a      	ldr	r2, [r3, #16]
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	fa02 f303 	lsl.w	r3, r2, r3
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	08da      	lsrs	r2, r3, #3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3208      	adds	r2, #8
 80089d4:	6939      	ldr	r1, [r7, #16]
 80089d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	2203      	movs	r2, #3
 80089e6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ea:	43db      	mvns	r3, r3
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	4013      	ands	r3, r2
 80089f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f003 0203 	and.w	r2, r3, #3
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	005b      	lsls	r3, r3, #1
 80089fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 80a6 	beq.w	8008b68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8008b8c <HAL_GPIO_Init+0x2e4>)
 8008a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a20:	4a5a      	ldr	r2, [pc, #360]	@ (8008b8c <HAL_GPIO_Init+0x2e4>)
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	6613      	str	r3, [r2, #96]	@ 0x60
 8008a28:	4b58      	ldr	r3, [pc, #352]	@ (8008b8c <HAL_GPIO_Init+0x2e4>)
 8008a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	60bb      	str	r3, [r7, #8]
 8008a32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a34:	4a56      	ldr	r2, [pc, #344]	@ (8008b90 <HAL_GPIO_Init+0x2e8>)
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	089b      	lsrs	r3, r3, #2
 8008a3a:	3302      	adds	r3, #2
 8008a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f003 0303 	and.w	r3, r3, #3
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	220f      	movs	r2, #15
 8008a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a50:	43db      	mvns	r3, r3
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	4013      	ands	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008a5e:	d01f      	beq.n	8008aa0 <HAL_GPIO_Init+0x1f8>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a4c      	ldr	r2, [pc, #304]	@ (8008b94 <HAL_GPIO_Init+0x2ec>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d019      	beq.n	8008a9c <HAL_GPIO_Init+0x1f4>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a4b      	ldr	r2, [pc, #300]	@ (8008b98 <HAL_GPIO_Init+0x2f0>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d013      	beq.n	8008a98 <HAL_GPIO_Init+0x1f0>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a4a      	ldr	r2, [pc, #296]	@ (8008b9c <HAL_GPIO_Init+0x2f4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d00d      	beq.n	8008a94 <HAL_GPIO_Init+0x1ec>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a49      	ldr	r2, [pc, #292]	@ (8008ba0 <HAL_GPIO_Init+0x2f8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d007      	beq.n	8008a90 <HAL_GPIO_Init+0x1e8>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a48      	ldr	r2, [pc, #288]	@ (8008ba4 <HAL_GPIO_Init+0x2fc>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d101      	bne.n	8008a8c <HAL_GPIO_Init+0x1e4>
 8008a88:	2305      	movs	r3, #5
 8008a8a:	e00a      	b.n	8008aa2 <HAL_GPIO_Init+0x1fa>
 8008a8c:	2306      	movs	r3, #6
 8008a8e:	e008      	b.n	8008aa2 <HAL_GPIO_Init+0x1fa>
 8008a90:	2304      	movs	r3, #4
 8008a92:	e006      	b.n	8008aa2 <HAL_GPIO_Init+0x1fa>
 8008a94:	2303      	movs	r3, #3
 8008a96:	e004      	b.n	8008aa2 <HAL_GPIO_Init+0x1fa>
 8008a98:	2302      	movs	r3, #2
 8008a9a:	e002      	b.n	8008aa2 <HAL_GPIO_Init+0x1fa>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e000      	b.n	8008aa2 <HAL_GPIO_Init+0x1fa>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	f002 0203 	and.w	r2, r2, #3
 8008aa8:	0092      	lsls	r2, r2, #2
 8008aaa:	4093      	lsls	r3, r2
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ab2:	4937      	ldr	r1, [pc, #220]	@ (8008b90 <HAL_GPIO_Init+0x2e8>)
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	089b      	lsrs	r3, r3, #2
 8008ab8:	3302      	adds	r3, #2
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ac0:	4b39      	ldr	r3, [pc, #228]	@ (8008ba8 <HAL_GPIO_Init+0x300>)
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	43db      	mvns	r3, r3
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	4013      	ands	r3, r2
 8008ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d003      	beq.n	8008ae4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008ae4:	4a30      	ldr	r2, [pc, #192]	@ (8008ba8 <HAL_GPIO_Init+0x300>)
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008aea:	4b2f      	ldr	r3, [pc, #188]	@ (8008ba8 <HAL_GPIO_Init+0x300>)
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	43db      	mvns	r3, r3
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	4013      	ands	r3, r2
 8008af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008b0e:	4a26      	ldr	r2, [pc, #152]	@ (8008ba8 <HAL_GPIO_Init+0x300>)
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008b14:	4b24      	ldr	r3, [pc, #144]	@ (8008ba8 <HAL_GPIO_Init+0x300>)
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	43db      	mvns	r3, r3
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	4013      	ands	r3, r2
 8008b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008b38:	4a1b      	ldr	r2, [pc, #108]	@ (8008ba8 <HAL_GPIO_Init+0x300>)
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ba8 <HAL_GPIO_Init+0x300>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	43db      	mvns	r3, r3
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008b62:	4a11      	ldr	r2, [pc, #68]	@ (8008ba8 <HAL_GPIO_Init+0x300>)
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	fa22 f303 	lsr.w	r3, r2, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f47f ae9d 	bne.w	80088b8 <HAL_GPIO_Init+0x10>
  }
}
 8008b7e:	bf00      	nop
 8008b80:	bf00      	nop
 8008b82:	371c      	adds	r7, #28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	40021000 	.word	0x40021000
 8008b90:	40010000 	.word	0x40010000
 8008b94:	48000400 	.word	0x48000400
 8008b98:	48000800 	.word	0x48000800
 8008b9c:	48000c00 	.word	0x48000c00
 8008ba0:	48001000 	.word	0x48001000
 8008ba4:	48001400 	.word	0x48001400
 8008ba8:	40010400 	.word	0x40010400

08008bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	807b      	strh	r3, [r7, #2]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bbc:	787b      	ldrb	r3, [r7, #1]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008bc2:	887a      	ldrh	r2, [r7, #2]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008bc8:	e002      	b.n	8008bd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008bca:	887a      	ldrh	r2, [r7, #2]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008be6:	4b08      	ldr	r3, [pc, #32]	@ (8008c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008be8:	695a      	ldr	r2, [r3, #20]
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	4013      	ands	r3, r2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d006      	beq.n	8008c00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008bf2:	4a05      	ldr	r2, [pc, #20]	@ (8008c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008bf4:	88fb      	ldrh	r3, [r7, #6]
 8008bf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008bf8:	88fb      	ldrh	r3, [r7, #6]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 f806 	bl	8008c0c <HAL_GPIO_EXTI_Callback>
  }
}
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	40010400 	.word	0x40010400

08008c0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b082      	sub	sp, #8
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e08d      	b.n	8008d50 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d106      	bne.n	8008c4e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7fa ffaf 	bl	8003bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2224      	movs	r2, #36	@ 0x24
 8008c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f022 0201 	bic.w	r2, r2, #1
 8008c64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008c72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689a      	ldr	r2, [r3, #8]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d107      	bne.n	8008c9c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689a      	ldr	r2, [r3, #8]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c98:	609a      	str	r2, [r3, #8]
 8008c9a:	e006      	b.n	8008caa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008ca8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d108      	bne.n	8008cc4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008cc0:	605a      	str	r2, [r3, #4]
 8008cc2:	e007      	b.n	8008cd4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008cd2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	6812      	ldr	r2, [r2, #0]
 8008cde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ce6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68da      	ldr	r2, [r3, #12]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008cf6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691a      	ldr	r2, [r3, #16]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	69d9      	ldr	r1, [r3, #28]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a1a      	ldr	r2, [r3, #32]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f042 0201 	orr.w	r2, r2, #1
 8008d30:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b088      	sub	sp, #32
 8008d5c:	af02      	add	r7, sp, #8
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	607a      	str	r2, [r7, #4]
 8008d62:	461a      	mov	r2, r3
 8008d64:	460b      	mov	r3, r1
 8008d66:	817b      	strh	r3, [r7, #10]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b20      	cmp	r3, #32
 8008d76:	f040 80fd 	bne.w	8008f74 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d101      	bne.n	8008d88 <HAL_I2C_Master_Transmit+0x30>
 8008d84:	2302      	movs	r3, #2
 8008d86:	e0f6      	b.n	8008f76 <HAL_I2C_Master_Transmit+0x21e>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008d90:	f7fd f92a 	bl	8005fe8 <HAL_GetTick>
 8008d94:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	2319      	movs	r3, #25
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f000 fa0a 	bl	80091bc <I2C_WaitOnFlagUntilTimeout>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e0e1      	b.n	8008f76 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2221      	movs	r2, #33	@ 0x21
 8008db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2210      	movs	r2, #16
 8008dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	893a      	ldrh	r2, [r7, #8]
 8008dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	2bff      	cmp	r3, #255	@ 0xff
 8008de2:	d906      	bls.n	8008df2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	22ff      	movs	r2, #255	@ 0xff
 8008de8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008dea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008dee:	617b      	str	r3, [r7, #20]
 8008df0:	e007      	b.n	8008e02 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008dfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008e00:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d024      	beq.n	8008e54 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0e:	781a      	ldrb	r2, [r3, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	3b01      	subs	r3, #1
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e32:	3b01      	subs	r3, #1
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	3301      	adds	r3, #1
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	8979      	ldrh	r1, [r7, #10]
 8008e46:	4b4e      	ldr	r3, [pc, #312]	@ (8008f80 <HAL_I2C_Master_Transmit+0x228>)
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 fc05 	bl	800965c <I2C_TransferConfig>
 8008e52:	e066      	b.n	8008f22 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	8979      	ldrh	r1, [r7, #10]
 8008e5c:	4b48      	ldr	r3, [pc, #288]	@ (8008f80 <HAL_I2C_Master_Transmit+0x228>)
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 fbfa 	bl	800965c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008e68:	e05b      	b.n	8008f22 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	6a39      	ldr	r1, [r7, #32]
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 f9fd 	bl	800926e <I2C_WaitOnTXISFlagUntilTimeout>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e07b      	b.n	8008f76 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e82:	781a      	ldrb	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d034      	beq.n	8008f22 <HAL_I2C_Master_Transmit+0x1ca>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d130      	bne.n	8008f22 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2180      	movs	r1, #128	@ 0x80
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 f976 	bl	80091bc <I2C_WaitOnFlagUntilTimeout>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e04d      	b.n	8008f76 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	2bff      	cmp	r3, #255	@ 0xff
 8008ee2:	d90e      	bls.n	8008f02 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	22ff      	movs	r2, #255	@ 0xff
 8008ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	8979      	ldrh	r1, [r7, #10]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 fbae 	bl	800965c <I2C_TransferConfig>
 8008f00:	e00f      	b.n	8008f22 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	8979      	ldrh	r1, [r7, #10]
 8008f14:	2300      	movs	r3, #0
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 fb9d 	bl	800965c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d19e      	bne.n	8008e6a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	6a39      	ldr	r1, [r7, #32]
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f000 f9e3 	bl	80092fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e01a      	b.n	8008f76 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2220      	movs	r2, #32
 8008f46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6859      	ldr	r1, [r3, #4]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	4b0c      	ldr	r3, [pc, #48]	@ (8008f84 <HAL_I2C_Master_Transmit+0x22c>)
 8008f54:	400b      	ands	r3, r1
 8008f56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	e000      	b.n	8008f76 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008f74:	2302      	movs	r3, #2
  }
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3718      	adds	r7, #24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	80002000 	.word	0x80002000
 8008f84:	fe00e800 	.word	0xfe00e800

08008f88 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af02      	add	r7, sp, #8
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	607a      	str	r2, [r7, #4]
 8008f92:	461a      	mov	r2, r3
 8008f94:	460b      	mov	r3, r1
 8008f96:	817b      	strh	r3, [r7, #10]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b20      	cmp	r3, #32
 8008fa6:	f040 80db 	bne.w	8009160 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d101      	bne.n	8008fb8 <HAL_I2C_Master_Receive+0x30>
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	e0d4      	b.n	8009162 <HAL_I2C_Master_Receive+0x1da>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008fc0:	f7fd f812 	bl	8005fe8 <HAL_GetTick>
 8008fc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	2319      	movs	r3, #25
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f000 f8f2 	bl	80091bc <I2C_WaitOnFlagUntilTimeout>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e0bf      	b.n	8009162 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2222      	movs	r2, #34	@ 0x22
 8008fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2210      	movs	r2, #16
 8008fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	893a      	ldrh	r2, [r7, #8]
 8009002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800900e:	b29b      	uxth	r3, r3
 8009010:	2bff      	cmp	r3, #255	@ 0xff
 8009012:	d90e      	bls.n	8009032 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	22ff      	movs	r2, #255	@ 0xff
 8009018:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800901e:	b2da      	uxtb	r2, r3
 8009020:	8979      	ldrh	r1, [r7, #10]
 8009022:	4b52      	ldr	r3, [pc, #328]	@ (800916c <HAL_I2C_Master_Receive+0x1e4>)
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 fb16 	bl	800965c <I2C_TransferConfig>
 8009030:	e06d      	b.n	800910e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009036:	b29a      	uxth	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009040:	b2da      	uxtb	r2, r3
 8009042:	8979      	ldrh	r1, [r7, #10]
 8009044:	4b49      	ldr	r3, [pc, #292]	@ (800916c <HAL_I2C_Master_Receive+0x1e4>)
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f000 fb05 	bl	800965c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009052:	e05c      	b.n	800910e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	6a39      	ldr	r1, [r7, #32]
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f000 f993 	bl	8009384 <I2C_WaitOnRXNEFlagUntilTimeout>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e07c      	b.n	8009162 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009072:	b2d2      	uxtb	r2, r2
 8009074:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009084:	3b01      	subs	r3, #1
 8009086:	b29a      	uxth	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009090:	b29b      	uxth	r3, r3
 8009092:	3b01      	subs	r3, #1
 8009094:	b29a      	uxth	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800909e:	b29b      	uxth	r3, r3
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d034      	beq.n	800910e <HAL_I2C_Master_Receive+0x186>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d130      	bne.n	800910e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	2200      	movs	r2, #0
 80090b4:	2180      	movs	r1, #128	@ 0x80
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 f880 	bl	80091bc <I2C_WaitOnFlagUntilTimeout>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e04d      	b.n	8009162 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	2bff      	cmp	r3, #255	@ 0xff
 80090ce:	d90e      	bls.n	80090ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	22ff      	movs	r2, #255	@ 0xff
 80090d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	8979      	ldrh	r1, [r7, #10]
 80090de:	2300      	movs	r3, #0
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 fab8 	bl	800965c <I2C_TransferConfig>
 80090ec:	e00f      	b.n	800910e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	8979      	ldrh	r1, [r7, #10]
 8009100:	2300      	movs	r3, #0
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 faa7 	bl	800965c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009112:	b29b      	uxth	r3, r3
 8009114:	2b00      	cmp	r3, #0
 8009116:	d19d      	bne.n	8009054 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	6a39      	ldr	r1, [r7, #32]
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 f8ed 	bl	80092fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e01a      	b.n	8009162 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2220      	movs	r2, #32
 8009132:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6859      	ldr	r1, [r3, #4]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	4b0c      	ldr	r3, [pc, #48]	@ (8009170 <HAL_I2C_Master_Receive+0x1e8>)
 8009140:	400b      	ands	r3, r1
 8009142:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2220      	movs	r2, #32
 8009148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	e000      	b.n	8009162 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009160:	2302      	movs	r3, #2
  }
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	80002400 	.word	0x80002400
 8009170:	fe00e800 	.word	0xfe00e800

08009174 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b02      	cmp	r3, #2
 8009188:	d103      	bne.n	8009192 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2200      	movs	r2, #0
 8009190:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b01      	cmp	r3, #1
 800919e:	d007      	beq.n	80091b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	699a      	ldr	r2, [r3, #24]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f042 0201 	orr.w	r2, r2, #1
 80091ae:	619a      	str	r2, [r3, #24]
  }
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	4613      	mov	r3, r2
 80091ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091cc:	e03b      	b.n	8009246 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 f962 	bl	800949c <I2C_IsErrorOccurred>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e041      	b.n	8009266 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091e8:	d02d      	beq.n	8009246 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091ea:	f7fc fefd 	bl	8005fe8 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d302      	bcc.n	8009200 <I2C_WaitOnFlagUntilTimeout+0x44>
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d122      	bne.n	8009246 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	699a      	ldr	r2, [r3, #24]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	4013      	ands	r3, r2
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	429a      	cmp	r2, r3
 800920e:	bf0c      	ite	eq
 8009210:	2301      	moveq	r3, #1
 8009212:	2300      	movne	r3, #0
 8009214:	b2db      	uxtb	r3, r3
 8009216:	461a      	mov	r2, r3
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	429a      	cmp	r2, r3
 800921c:	d113      	bne.n	8009246 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009222:	f043 0220 	orr.w	r2, r3, #32
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2220      	movs	r2, #32
 800922e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e00f      	b.n	8009266 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	699a      	ldr	r2, [r3, #24]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	4013      	ands	r3, r2
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	429a      	cmp	r2, r3
 8009254:	bf0c      	ite	eq
 8009256:	2301      	moveq	r3, #1
 8009258:	2300      	movne	r3, #0
 800925a:	b2db      	uxtb	r3, r3
 800925c:	461a      	mov	r2, r3
 800925e:	79fb      	ldrb	r3, [r7, #7]
 8009260:	429a      	cmp	r2, r3
 8009262:	d0b4      	beq.n	80091ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	60f8      	str	r0, [r7, #12]
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800927a:	e033      	b.n	80092e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	68b9      	ldr	r1, [r7, #8]
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 f90b 	bl	800949c <I2C_IsErrorOccurred>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e031      	b.n	80092f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009296:	d025      	beq.n	80092e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009298:	f7fc fea6 	bl	8005fe8 <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d302      	bcc.n	80092ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d11a      	bne.n	80092e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	f003 0302 	and.w	r3, r3, #2
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d013      	beq.n	80092e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092c0:	f043 0220 	orr.w	r2, r3, #32
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2220      	movs	r2, #32
 80092cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e007      	b.n	80092f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d1c4      	bne.n	800927c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009308:	e02f      	b.n	800936a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	68b9      	ldr	r1, [r7, #8]
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 f8c4 	bl	800949c <I2C_IsErrorOccurred>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e02d      	b.n	800937a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800931e:	f7fc fe63 	bl	8005fe8 <HAL_GetTick>
 8009322:	4602      	mov	r2, r0
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	429a      	cmp	r2, r3
 800932c:	d302      	bcc.n	8009334 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d11a      	bne.n	800936a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	f003 0320 	and.w	r3, r3, #32
 800933e:	2b20      	cmp	r3, #32
 8009340:	d013      	beq.n	800936a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009346:	f043 0220 	orr.w	r2, r3, #32
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2220      	movs	r2, #32
 8009352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e007      	b.n	800937a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	699b      	ldr	r3, [r3, #24]
 8009370:	f003 0320 	and.w	r3, r3, #32
 8009374:	2b20      	cmp	r3, #32
 8009376:	d1c8      	bne.n	800930a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
	...

08009384 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009394:	e071      	b.n	800947a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	68b9      	ldr	r1, [r7, #8]
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f000 f87e 	bl	800949c <I2C_IsErrorOccurred>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	f003 0320 	and.w	r3, r3, #32
 80093b4:	2b20      	cmp	r3, #32
 80093b6:	d13b      	bne.n	8009430 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d138      	bne.n	8009430 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d105      	bne.n	80093d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	f003 0310 	and.w	r3, r3, #16
 80093e2:	2b10      	cmp	r3, #16
 80093e4:	d121      	bne.n	800942a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2210      	movs	r2, #16
 80093ec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2204      	movs	r2, #4
 80093f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2220      	movs	r2, #32
 80093fa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6859      	ldr	r1, [r3, #4]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	4b24      	ldr	r3, [pc, #144]	@ (8009498 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009408:	400b      	ands	r3, r1
 800940a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2220      	movs	r2, #32
 8009410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	75fb      	strb	r3, [r7, #23]
 8009428:	e002      	b.n	8009430 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009430:	f7fc fdda 	bl	8005fe8 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	429a      	cmp	r2, r3
 800943e:	d302      	bcc.n	8009446 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d119      	bne.n	800947a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009446:	7dfb      	ldrb	r3, [r7, #23]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d116      	bne.n	800947a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	f003 0304 	and.w	r3, r3, #4
 8009456:	2b04      	cmp	r3, #4
 8009458:	d00f      	beq.n	800947a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800945e:	f043 0220 	orr.w	r2, r3, #32
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2220      	movs	r2, #32
 800946a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b04      	cmp	r3, #4
 8009486:	d002      	beq.n	800948e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d083      	beq.n	8009396 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800948e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3718      	adds	r7, #24
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	fe00e800 	.word	0xfe00e800

0800949c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08a      	sub	sp, #40	@ 0x28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	f003 0310 	and.w	r3, r3, #16
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d068      	beq.n	800959a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2210      	movs	r2, #16
 80094ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80094d0:	e049      	b.n	8009566 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094d8:	d045      	beq.n	8009566 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80094da:	f7fc fd85 	bl	8005fe8 <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d302      	bcc.n	80094f0 <I2C_IsErrorOccurred+0x54>
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d13a      	bne.n	8009566 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009502:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800950e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009512:	d121      	bne.n	8009558 <I2C_IsErrorOccurred+0xbc>
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800951a:	d01d      	beq.n	8009558 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800951c:	7cfb      	ldrb	r3, [r7, #19]
 800951e:	2b20      	cmp	r3, #32
 8009520:	d01a      	beq.n	8009558 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	685a      	ldr	r2, [r3, #4]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009530:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009532:	f7fc fd59 	bl	8005fe8 <HAL_GetTick>
 8009536:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009538:	e00e      	b.n	8009558 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800953a:	f7fc fd55 	bl	8005fe8 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	2b19      	cmp	r3, #25
 8009546:	d907      	bls.n	8009558 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	f043 0320 	orr.w	r3, r3, #32
 800954e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009556:	e006      	b.n	8009566 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b20      	cmp	r3, #32
 8009564:	d1e9      	bne.n	800953a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	f003 0320 	and.w	r3, r3, #32
 8009570:	2b20      	cmp	r3, #32
 8009572:	d003      	beq.n	800957c <I2C_IsErrorOccurred+0xe0>
 8009574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009578:	2b00      	cmp	r3, #0
 800957a:	d0aa      	beq.n	80094d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800957c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009580:	2b00      	cmp	r3, #0
 8009582:	d103      	bne.n	800958c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2220      	movs	r2, #32
 800958a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	f043 0304 	orr.w	r3, r3, #4
 8009592:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00b      	beq.n	80095c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	f043 0301 	orr.w	r3, r3, #1
 80095b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80095bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00b      	beq.n	80095e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	f043 0308 	orr.w	r3, r3, #8
 80095d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80095de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00b      	beq.n	8009608 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	f043 0302 	orr.w	r3, r3, #2
 80095f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009600:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800960c:	2b00      	cmp	r3, #0
 800960e:	d01c      	beq.n	800964a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f7ff fdaf 	bl	8009174 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6859      	ldr	r1, [r3, #4]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	4b0d      	ldr	r3, [pc, #52]	@ (8009658 <I2C_IsErrorOccurred+0x1bc>)
 8009622:	400b      	ands	r3, r1
 8009624:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	431a      	orrs	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2220      	movs	r2, #32
 8009636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800964a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800964e:	4618      	mov	r0, r3
 8009650:	3728      	adds	r7, #40	@ 0x28
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	fe00e800 	.word	0xfe00e800

0800965c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800965c:	b480      	push	{r7}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	607b      	str	r3, [r7, #4]
 8009666:	460b      	mov	r3, r1
 8009668:	817b      	strh	r3, [r7, #10]
 800966a:	4613      	mov	r3, r2
 800966c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800966e:	897b      	ldrh	r3, [r7, #10]
 8009670:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009674:	7a7b      	ldrb	r3, [r7, #9]
 8009676:	041b      	lsls	r3, r3, #16
 8009678:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800967c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009682:	6a3b      	ldr	r3, [r7, #32]
 8009684:	4313      	orrs	r3, r2
 8009686:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800968a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685a      	ldr	r2, [r3, #4]
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	0d5b      	lsrs	r3, r3, #21
 8009696:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800969a:	4b08      	ldr	r3, [pc, #32]	@ (80096bc <I2C_TransferConfig+0x60>)
 800969c:	430b      	orrs	r3, r1
 800969e:	43db      	mvns	r3, r3
 80096a0:	ea02 0103 	and.w	r1, r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	430a      	orrs	r2, r1
 80096ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80096ae:	bf00      	nop
 80096b0:	371c      	adds	r7, #28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	03ff63ff 	.word	0x03ff63ff

080096c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b20      	cmp	r3, #32
 80096d4:	d138      	bne.n	8009748 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d101      	bne.n	80096e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80096e0:	2302      	movs	r3, #2
 80096e2:	e032      	b.n	800974a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2224      	movs	r2, #36	@ 0x24
 80096f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0201 	bic.w	r2, r2, #1
 8009702:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009712:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6819      	ldr	r1, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	430a      	orrs	r2, r1
 8009722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f042 0201 	orr.w	r2, r2, #1
 8009732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2220      	movs	r2, #32
 8009738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	e000      	b.n	800974a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009748:	2302      	movs	r3, #2
  }
}
 800974a:	4618      	mov	r0, r3
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009756:	b480      	push	{r7}
 8009758:	b085      	sub	sp, #20
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b20      	cmp	r3, #32
 800976a:	d139      	bne.n	80097e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009772:	2b01      	cmp	r3, #1
 8009774:	d101      	bne.n	800977a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009776:	2302      	movs	r3, #2
 8009778:	e033      	b.n	80097e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2224      	movs	r2, #36	@ 0x24
 8009786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f022 0201 	bic.w	r2, r2, #1
 8009798:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80097a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	021b      	lsls	r3, r3, #8
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f042 0201 	orr.w	r2, r2, #1
 80097ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2220      	movs	r2, #32
 80097d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	e000      	b.n	80097e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80097e0:	2302      	movs	r3, #2
  }
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
	...

080097f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d141      	bne.n	8009882 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80097fe:	4b4b      	ldr	r3, [pc, #300]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800980a:	d131      	bne.n	8009870 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800980c:	4b47      	ldr	r3, [pc, #284]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800980e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009812:	4a46      	ldr	r2, [pc, #280]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009818:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800981c:	4b43      	ldr	r3, [pc, #268]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009824:	4a41      	ldr	r2, [pc, #260]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009826:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800982a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800982c:	4b40      	ldr	r3, [pc, #256]	@ (8009930 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2232      	movs	r2, #50	@ 0x32
 8009832:	fb02 f303 	mul.w	r3, r2, r3
 8009836:	4a3f      	ldr	r2, [pc, #252]	@ (8009934 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009838:	fba2 2303 	umull	r2, r3, r2, r3
 800983c:	0c9b      	lsrs	r3, r3, #18
 800983e:	3301      	adds	r3, #1
 8009840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009842:	e002      	b.n	800984a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3b01      	subs	r3, #1
 8009848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800984a:	4b38      	ldr	r3, [pc, #224]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009856:	d102      	bne.n	800985e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1f2      	bne.n	8009844 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800985e:	4b33      	ldr	r3, [pc, #204]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800986a:	d158      	bne.n	800991e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800986c:	2303      	movs	r3, #3
 800986e:	e057      	b.n	8009920 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009870:	4b2e      	ldr	r3, [pc, #184]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009876:	4a2d      	ldr	r2, [pc, #180]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800987c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009880:	e04d      	b.n	800991e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009888:	d141      	bne.n	800990e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800988a:	4b28      	ldr	r3, [pc, #160]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009896:	d131      	bne.n	80098fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009898:	4b24      	ldr	r3, [pc, #144]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800989a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800989e:	4a23      	ldr	r2, [pc, #140]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80098a8:	4b20      	ldr	r3, [pc, #128]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80098b0:	4a1e      	ldr	r2, [pc, #120]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80098b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80098b8:	4b1d      	ldr	r3, [pc, #116]	@ (8009930 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2232      	movs	r2, #50	@ 0x32
 80098be:	fb02 f303 	mul.w	r3, r2, r3
 80098c2:	4a1c      	ldr	r2, [pc, #112]	@ (8009934 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80098c4:	fba2 2303 	umull	r2, r3, r2, r3
 80098c8:	0c9b      	lsrs	r3, r3, #18
 80098ca:	3301      	adds	r3, #1
 80098cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80098ce:	e002      	b.n	80098d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	3b01      	subs	r3, #1
 80098d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80098d6:	4b15      	ldr	r3, [pc, #84]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098e2:	d102      	bne.n	80098ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1f2      	bne.n	80098d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80098ea:	4b10      	ldr	r3, [pc, #64]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098f6:	d112      	bne.n	800991e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e011      	b.n	8009920 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80098fc:	4b0b      	ldr	r3, [pc, #44]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009902:	4a0a      	ldr	r2, [pc, #40]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009908:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800990c:	e007      	b.n	800991e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800990e:	4b07      	ldr	r3, [pc, #28]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009916:	4a05      	ldr	r2, [pc, #20]	@ (800992c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009918:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800991c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	40007000 	.word	0x40007000
 8009930:	20000004 	.word	0x20000004
 8009934:	431bde83 	.word	0x431bde83

08009938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b088      	sub	sp, #32
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e2fe      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d075      	beq.n	8009a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009956:	4b97      	ldr	r3, [pc, #604]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f003 030c 	and.w	r3, r3, #12
 800995e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009960:	4b94      	ldr	r3, [pc, #592]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f003 0303 	and.w	r3, r3, #3
 8009968:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	2b0c      	cmp	r3, #12
 800996e:	d102      	bne.n	8009976 <HAL_RCC_OscConfig+0x3e>
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	2b03      	cmp	r3, #3
 8009974:	d002      	beq.n	800997c <HAL_RCC_OscConfig+0x44>
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	2b08      	cmp	r3, #8
 800997a:	d10b      	bne.n	8009994 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800997c:	4b8d      	ldr	r3, [pc, #564]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009984:	2b00      	cmp	r3, #0
 8009986:	d05b      	beq.n	8009a40 <HAL_RCC_OscConfig+0x108>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d157      	bne.n	8009a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	e2d9      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800999c:	d106      	bne.n	80099ac <HAL_RCC_OscConfig+0x74>
 800999e:	4b85      	ldr	r3, [pc, #532]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a84      	ldr	r2, [pc, #528]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 80099a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099a8:	6013      	str	r3, [r2, #0]
 80099aa:	e01d      	b.n	80099e8 <HAL_RCC_OscConfig+0xb0>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80099b4:	d10c      	bne.n	80099d0 <HAL_RCC_OscConfig+0x98>
 80099b6:	4b7f      	ldr	r3, [pc, #508]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a7e      	ldr	r2, [pc, #504]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 80099bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80099c0:	6013      	str	r3, [r2, #0]
 80099c2:	4b7c      	ldr	r3, [pc, #496]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a7b      	ldr	r2, [pc, #492]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 80099c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	e00b      	b.n	80099e8 <HAL_RCC_OscConfig+0xb0>
 80099d0:	4b78      	ldr	r3, [pc, #480]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a77      	ldr	r2, [pc, #476]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 80099d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	4b75      	ldr	r3, [pc, #468]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a74      	ldr	r2, [pc, #464]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 80099e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80099e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d013      	beq.n	8009a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f0:	f7fc fafa 	bl	8005fe8 <HAL_GetTick>
 80099f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099f6:	e008      	b.n	8009a0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099f8:	f7fc faf6 	bl	8005fe8 <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	2b64      	cmp	r3, #100	@ 0x64
 8009a04:	d901      	bls.n	8009a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e29e      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0f0      	beq.n	80099f8 <HAL_RCC_OscConfig+0xc0>
 8009a16:	e014      	b.n	8009a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a18:	f7fc fae6 	bl	8005fe8 <HAL_GetTick>
 8009a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009a1e:	e008      	b.n	8009a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a20:	f7fc fae2 	bl	8005fe8 <HAL_GetTick>
 8009a24:	4602      	mov	r2, r0
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	2b64      	cmp	r3, #100	@ 0x64
 8009a2c:	d901      	bls.n	8009a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e28a      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009a32:	4b60      	ldr	r3, [pc, #384]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1f0      	bne.n	8009a20 <HAL_RCC_OscConfig+0xe8>
 8009a3e:	e000      	b.n	8009a42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0302 	and.w	r3, r3, #2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d075      	beq.n	8009b3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a4e:	4b59      	ldr	r3, [pc, #356]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f003 030c 	and.w	r3, r3, #12
 8009a56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a58:	4b56      	ldr	r3, [pc, #344]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f003 0303 	and.w	r3, r3, #3
 8009a60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	2b0c      	cmp	r3, #12
 8009a66:	d102      	bne.n	8009a6e <HAL_RCC_OscConfig+0x136>
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d002      	beq.n	8009a74 <HAL_RCC_OscConfig+0x13c>
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	d11f      	bne.n	8009ab4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a74:	4b4f      	ldr	r3, [pc, #316]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d005      	beq.n	8009a8c <HAL_RCC_OscConfig+0x154>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d101      	bne.n	8009a8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e25d      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a8c:	4b49      	ldr	r3, [pc, #292]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	061b      	lsls	r3, r3, #24
 8009a9a:	4946      	ldr	r1, [pc, #280]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009aa0:	4b45      	ldr	r3, [pc, #276]	@ (8009bb8 <HAL_RCC_OscConfig+0x280>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fa faa3 	bl	8003ff0 <HAL_InitTick>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d043      	beq.n	8009b38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e249      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d023      	beq.n	8009b04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009abc:	4b3d      	ldr	r3, [pc, #244]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac8:	f7fc fa8e 	bl	8005fe8 <HAL_GetTick>
 8009acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ace:	e008      	b.n	8009ae2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ad0:	f7fc fa8a 	bl	8005fe8 <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d901      	bls.n	8009ae2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e232      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ae2:	4b34      	ldr	r3, [pc, #208]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d0f0      	beq.n	8009ad0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aee:	4b31      	ldr	r3, [pc, #196]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	061b      	lsls	r3, r3, #24
 8009afc:	492d      	ldr	r1, [pc, #180]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009afe:	4313      	orrs	r3, r2
 8009b00:	604b      	str	r3, [r1, #4]
 8009b02:	e01a      	b.n	8009b3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b04:	4b2b      	ldr	r3, [pc, #172]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a2a      	ldr	r2, [pc, #168]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009b0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b10:	f7fc fa6a 	bl	8005fe8 <HAL_GetTick>
 8009b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009b16:	e008      	b.n	8009b2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b18:	f7fc fa66 	bl	8005fe8 <HAL_GetTick>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d901      	bls.n	8009b2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e20e      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009b2a:	4b22      	ldr	r3, [pc, #136]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1f0      	bne.n	8009b18 <HAL_RCC_OscConfig+0x1e0>
 8009b36:	e000      	b.n	8009b3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 0308 	and.w	r3, r3, #8
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d041      	beq.n	8009bca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d01c      	beq.n	8009b88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b4e:	4b19      	ldr	r3, [pc, #100]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b54:	4a17      	ldr	r2, [pc, #92]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009b56:	f043 0301 	orr.w	r3, r3, #1
 8009b5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b5e:	f7fc fa43 	bl	8005fe8 <HAL_GetTick>
 8009b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009b64:	e008      	b.n	8009b78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b66:	f7fc fa3f 	bl	8005fe8 <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d901      	bls.n	8009b78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e1e7      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009b78:	4b0e      	ldr	r3, [pc, #56]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b7e:	f003 0302 	and.w	r3, r3, #2
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0ef      	beq.n	8009b66 <HAL_RCC_OscConfig+0x22e>
 8009b86:	e020      	b.n	8009bca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b88:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b8e:	4a09      	ldr	r2, [pc, #36]	@ (8009bb4 <HAL_RCC_OscConfig+0x27c>)
 8009b90:	f023 0301 	bic.w	r3, r3, #1
 8009b94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b98:	f7fc fa26 	bl	8005fe8 <HAL_GetTick>
 8009b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009b9e:	e00d      	b.n	8009bbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ba0:	f7fc fa22 	bl	8005fe8 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d906      	bls.n	8009bbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e1ca      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
 8009bb2:	bf00      	nop
 8009bb4:	40021000 	.word	0x40021000
 8009bb8:	20000138 	.word	0x20000138
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1ea      	bne.n	8009ba0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0304 	and.w	r3, r3, #4
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 80a6 	beq.w	8009d24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009bdc:	4b84      	ldr	r3, [pc, #528]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d101      	bne.n	8009bec <HAL_RCC_OscConfig+0x2b4>
 8009be8:	2301      	movs	r3, #1
 8009bea:	e000      	b.n	8009bee <HAL_RCC_OscConfig+0x2b6>
 8009bec:	2300      	movs	r3, #0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00d      	beq.n	8009c0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bfe:	4b7c      	ldr	r3, [pc, #496]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c0e:	4b79      	ldr	r3, [pc, #484]	@ (8009df4 <HAL_RCC_OscConfig+0x4bc>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d118      	bne.n	8009c4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c1a:	4b76      	ldr	r3, [pc, #472]	@ (8009df4 <HAL_RCC_OscConfig+0x4bc>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a75      	ldr	r2, [pc, #468]	@ (8009df4 <HAL_RCC_OscConfig+0x4bc>)
 8009c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c26:	f7fc f9df 	bl	8005fe8 <HAL_GetTick>
 8009c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c2c:	e008      	b.n	8009c40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c2e:	f7fc f9db 	bl	8005fe8 <HAL_GetTick>
 8009c32:	4602      	mov	r2, r0
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d901      	bls.n	8009c40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e183      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c40:	4b6c      	ldr	r3, [pc, #432]	@ (8009df4 <HAL_RCC_OscConfig+0x4bc>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d0f0      	beq.n	8009c2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d108      	bne.n	8009c66 <HAL_RCC_OscConfig+0x32e>
 8009c54:	4b66      	ldr	r3, [pc, #408]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c5a:	4a65      	ldr	r2, [pc, #404]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009c5c:	f043 0301 	orr.w	r3, r3, #1
 8009c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009c64:	e024      	b.n	8009cb0 <HAL_RCC_OscConfig+0x378>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	2b05      	cmp	r3, #5
 8009c6c:	d110      	bne.n	8009c90 <HAL_RCC_OscConfig+0x358>
 8009c6e:	4b60      	ldr	r3, [pc, #384]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c74:	4a5e      	ldr	r2, [pc, #376]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009c76:	f043 0304 	orr.w	r3, r3, #4
 8009c7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c84:	4a5a      	ldr	r2, [pc, #360]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009c86:	f043 0301 	orr.w	r3, r3, #1
 8009c8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009c8e:	e00f      	b.n	8009cb0 <HAL_RCC_OscConfig+0x378>
 8009c90:	4b57      	ldr	r3, [pc, #348]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c96:	4a56      	ldr	r2, [pc, #344]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009c98:	f023 0301 	bic.w	r3, r3, #1
 8009c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009ca0:	4b53      	ldr	r3, [pc, #332]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ca6:	4a52      	ldr	r2, [pc, #328]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009ca8:	f023 0304 	bic.w	r3, r3, #4
 8009cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d016      	beq.n	8009ce6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cb8:	f7fc f996 	bl	8005fe8 <HAL_GetTick>
 8009cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009cbe:	e00a      	b.n	8009cd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cc0:	f7fc f992 	bl	8005fe8 <HAL_GetTick>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d901      	bls.n	8009cd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e138      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009cd6:	4b46      	ldr	r3, [pc, #280]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d0ed      	beq.n	8009cc0 <HAL_RCC_OscConfig+0x388>
 8009ce4:	e015      	b.n	8009d12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ce6:	f7fc f97f 	bl	8005fe8 <HAL_GetTick>
 8009cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009cec:	e00a      	b.n	8009d04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cee:	f7fc f97b 	bl	8005fe8 <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d901      	bls.n	8009d04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e121      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009d04:	4b3a      	ldr	r3, [pc, #232]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d0a:	f003 0302 	and.w	r3, r3, #2
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1ed      	bne.n	8009cee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009d12:	7ffb      	ldrb	r3, [r7, #31]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d105      	bne.n	8009d24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d18:	4b35      	ldr	r3, [pc, #212]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d1c:	4a34      	ldr	r2, [pc, #208]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0320 	and.w	r3, r3, #32
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d03c      	beq.n	8009daa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	699b      	ldr	r3, [r3, #24]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d01c      	beq.n	8009d72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d38:	4b2d      	ldr	r3, [pc, #180]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009d40:	f043 0301 	orr.w	r3, r3, #1
 8009d44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d48:	f7fc f94e 	bl	8005fe8 <HAL_GetTick>
 8009d4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009d4e:	e008      	b.n	8009d62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d50:	f7fc f94a 	bl	8005fe8 <HAL_GetTick>
 8009d54:	4602      	mov	r2, r0
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d901      	bls.n	8009d62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e0f2      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009d62:	4b23      	ldr	r3, [pc, #140]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d68:	f003 0302 	and.w	r3, r3, #2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d0ef      	beq.n	8009d50 <HAL_RCC_OscConfig+0x418>
 8009d70:	e01b      	b.n	8009daa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d72:	4b1f      	ldr	r3, [pc, #124]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d78:	4a1d      	ldr	r2, [pc, #116]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009d7a:	f023 0301 	bic.w	r3, r3, #1
 8009d7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d82:	f7fc f931 	bl	8005fe8 <HAL_GetTick>
 8009d86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009d88:	e008      	b.n	8009d9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d8a:	f7fc f92d 	bl	8005fe8 <HAL_GetTick>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d901      	bls.n	8009d9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e0d5      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009d9c:	4b14      	ldr	r3, [pc, #80]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009da2:	f003 0302 	and.w	r3, r3, #2
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1ef      	bne.n	8009d8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f000 80c9 	beq.w	8009f46 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009db4:	4b0e      	ldr	r3, [pc, #56]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	f003 030c 	and.w	r3, r3, #12
 8009dbc:	2b0c      	cmp	r3, #12
 8009dbe:	f000 8083 	beq.w	8009ec8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d15e      	bne.n	8009e88 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dca:	4b09      	ldr	r3, [pc, #36]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a08      	ldr	r2, [pc, #32]	@ (8009df0 <HAL_RCC_OscConfig+0x4b8>)
 8009dd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dd6:	f7fc f907 	bl	8005fe8 <HAL_GetTick>
 8009dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ddc:	e00c      	b.n	8009df8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dde:	f7fc f903 	bl	8005fe8 <HAL_GetTick>
 8009de2:	4602      	mov	r2, r0
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d905      	bls.n	8009df8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e0ab      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
 8009df0:	40021000 	.word	0x40021000
 8009df4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009df8:	4b55      	ldr	r3, [pc, #340]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1ec      	bne.n	8009dde <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e04:	4b52      	ldr	r3, [pc, #328]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009e06:	68da      	ldr	r2, [r3, #12]
 8009e08:	4b52      	ldr	r3, [pc, #328]	@ (8009f54 <HAL_RCC_OscConfig+0x61c>)
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	6a11      	ldr	r1, [r2, #32]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009e14:	3a01      	subs	r2, #1
 8009e16:	0112      	lsls	r2, r2, #4
 8009e18:	4311      	orrs	r1, r2
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009e1e:	0212      	lsls	r2, r2, #8
 8009e20:	4311      	orrs	r1, r2
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009e26:	0852      	lsrs	r2, r2, #1
 8009e28:	3a01      	subs	r2, #1
 8009e2a:	0552      	lsls	r2, r2, #21
 8009e2c:	4311      	orrs	r1, r2
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009e32:	0852      	lsrs	r2, r2, #1
 8009e34:	3a01      	subs	r2, #1
 8009e36:	0652      	lsls	r2, r2, #25
 8009e38:	4311      	orrs	r1, r2
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009e3e:	06d2      	lsls	r2, r2, #27
 8009e40:	430a      	orrs	r2, r1
 8009e42:	4943      	ldr	r1, [pc, #268]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e48:	4b41      	ldr	r3, [pc, #260]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a40      	ldr	r2, [pc, #256]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009e52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009e54:	4b3e      	ldr	r3, [pc, #248]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	4a3d      	ldr	r2, [pc, #244]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009e5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e60:	f7fc f8c2 	bl	8005fe8 <HAL_GetTick>
 8009e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e66:	e008      	b.n	8009e7a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e68:	f7fc f8be 	bl	8005fe8 <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d901      	bls.n	8009e7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e066      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e7a:	4b35      	ldr	r3, [pc, #212]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0f0      	beq.n	8009e68 <HAL_RCC_OscConfig+0x530>
 8009e86:	e05e      	b.n	8009f46 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e88:	4b31      	ldr	r3, [pc, #196]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a30      	ldr	r2, [pc, #192]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e94:	f7fc f8a8 	bl	8005fe8 <HAL_GetTick>
 8009e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e9a:	e008      	b.n	8009eae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e9c:	f7fc f8a4 	bl	8005fe8 <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d901      	bls.n	8009eae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e04c      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009eae:	4b28      	ldr	r3, [pc, #160]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1f0      	bne.n	8009e9c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009eba:	4b25      	ldr	r3, [pc, #148]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	4924      	ldr	r1, [pc, #144]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009ec0:	4b25      	ldr	r3, [pc, #148]	@ (8009f58 <HAL_RCC_OscConfig+0x620>)
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	60cb      	str	r3, [r1, #12]
 8009ec6:	e03e      	b.n	8009f46 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	69db      	ldr	r3, [r3, #28]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d101      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e039      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8009f50 <HAL_RCC_OscConfig+0x618>)
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f003 0203 	and.w	r2, r3, #3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a1b      	ldr	r3, [r3, #32]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d12c      	bne.n	8009f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d123      	bne.n	8009f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d11b      	bne.n	8009f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d113      	bne.n	8009f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f24:	085b      	lsrs	r3, r3, #1
 8009f26:	3b01      	subs	r3, #1
 8009f28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d109      	bne.n	8009f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f38:	085b      	lsrs	r3, r3, #1
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d001      	beq.n	8009f46 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e000      	b.n	8009f48 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3720      	adds	r7, #32
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	40021000 	.word	0x40021000
 8009f54:	019f800c 	.word	0x019f800c
 8009f58:	feeefffc 	.word	0xfeeefffc

08009f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009f66:	2300      	movs	r3, #0
 8009f68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e11e      	b.n	800a1b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f74:	4b91      	ldr	r3, [pc, #580]	@ (800a1bc <HAL_RCC_ClockConfig+0x260>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 030f 	and.w	r3, r3, #15
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d910      	bls.n	8009fa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f82:	4b8e      	ldr	r3, [pc, #568]	@ (800a1bc <HAL_RCC_ClockConfig+0x260>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f023 020f 	bic.w	r2, r3, #15
 8009f8a:	498c      	ldr	r1, [pc, #560]	@ (800a1bc <HAL_RCC_ClockConfig+0x260>)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f92:	4b8a      	ldr	r3, [pc, #552]	@ (800a1bc <HAL_RCC_ClockConfig+0x260>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 030f 	and.w	r3, r3, #15
 8009f9a:	683a      	ldr	r2, [r7, #0]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d001      	beq.n	8009fa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e106      	b.n	800a1b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d073      	beq.n	800a098 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	2b03      	cmp	r3, #3
 8009fb6:	d129      	bne.n	800a00c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009fb8:	4b81      	ldr	r3, [pc, #516]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d101      	bne.n	8009fc8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e0f4      	b.n	800a1b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009fc8:	f000 f9d0 	bl	800a36c <RCC_GetSysClockFreqFromPLLSource>
 8009fcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	4a7c      	ldr	r2, [pc, #496]	@ (800a1c4 <HAL_RCC_ClockConfig+0x268>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d93f      	bls.n	800a056 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009fd6:	4b7a      	ldr	r3, [pc, #488]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d009      	beq.n	8009ff6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d033      	beq.n	800a056 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d12f      	bne.n	800a056 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009ff6:	4b72      	ldr	r3, [pc, #456]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ffe:	4a70      	ldr	r2, [pc, #448]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a004:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a006:	2380      	movs	r3, #128	@ 0x80
 800a008:	617b      	str	r3, [r7, #20]
 800a00a:	e024      	b.n	800a056 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	2b02      	cmp	r3, #2
 800a012:	d107      	bne.n	800a024 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a014:	4b6a      	ldr	r3, [pc, #424]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d109      	bne.n	800a034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e0c6      	b.n	800a1b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a024:	4b66      	ldr	r3, [pc, #408]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e0be      	b.n	800a1b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a034:	f000 f8ce 	bl	800a1d4 <HAL_RCC_GetSysClockFreq>
 800a038:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	4a61      	ldr	r2, [pc, #388]	@ (800a1c4 <HAL_RCC_ClockConfig+0x268>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d909      	bls.n	800a056 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a042:	4b5f      	ldr	r3, [pc, #380]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a04a:	4a5d      	ldr	r2, [pc, #372]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a04c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a050:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a052:	2380      	movs	r3, #128	@ 0x80
 800a054:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a056:	4b5a      	ldr	r3, [pc, #360]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f023 0203 	bic.w	r2, r3, #3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	4957      	ldr	r1, [pc, #348]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a064:	4313      	orrs	r3, r2
 800a066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a068:	f7fb ffbe 	bl	8005fe8 <HAL_GetTick>
 800a06c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a06e:	e00a      	b.n	800a086 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a070:	f7fb ffba 	bl	8005fe8 <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a07e:	4293      	cmp	r3, r2
 800a080:	d901      	bls.n	800a086 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a082:	2303      	movs	r3, #3
 800a084:	e095      	b.n	800a1b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a086:	4b4e      	ldr	r3, [pc, #312]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	f003 020c 	and.w	r2, r3, #12
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	429a      	cmp	r2, r3
 800a096:	d1eb      	bne.n	800a070 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 0302 	and.w	r3, r3, #2
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d023      	beq.n	800a0ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0304 	and.w	r3, r3, #4
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d005      	beq.n	800a0bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a0b0:	4b43      	ldr	r3, [pc, #268]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	4a42      	ldr	r2, [pc, #264]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a0b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a0ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0308 	and.w	r3, r3, #8
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d007      	beq.n	800a0d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a0c8:	4b3d      	ldr	r3, [pc, #244]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a0d0:	4a3b      	ldr	r2, [pc, #236]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a0d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a0d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0d8:	4b39      	ldr	r3, [pc, #228]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	4936      	ldr	r1, [pc, #216]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	608b      	str	r3, [r1, #8]
 800a0ea:	e008      	b.n	800a0fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	2b80      	cmp	r3, #128	@ 0x80
 800a0f0:	d105      	bne.n	800a0fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a0f2:	4b33      	ldr	r3, [pc, #204]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	4a32      	ldr	r2, [pc, #200]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a0f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a0fe:	4b2f      	ldr	r3, [pc, #188]	@ (800a1bc <HAL_RCC_ClockConfig+0x260>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 030f 	and.w	r3, r3, #15
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d21d      	bcs.n	800a148 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a10c:	4b2b      	ldr	r3, [pc, #172]	@ (800a1bc <HAL_RCC_ClockConfig+0x260>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f023 020f 	bic.w	r2, r3, #15
 800a114:	4929      	ldr	r1, [pc, #164]	@ (800a1bc <HAL_RCC_ClockConfig+0x260>)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	4313      	orrs	r3, r2
 800a11a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a11c:	f7fb ff64 	bl	8005fe8 <HAL_GetTick>
 800a120:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a122:	e00a      	b.n	800a13a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a124:	f7fb ff60 	bl	8005fe8 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a132:	4293      	cmp	r3, r2
 800a134:	d901      	bls.n	800a13a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e03b      	b.n	800a1b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a13a:	4b20      	ldr	r3, [pc, #128]	@ (800a1bc <HAL_RCC_ClockConfig+0x260>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 030f 	and.w	r3, r3, #15
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	429a      	cmp	r2, r3
 800a146:	d1ed      	bne.n	800a124 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 0304 	and.w	r3, r3, #4
 800a150:	2b00      	cmp	r3, #0
 800a152:	d008      	beq.n	800a166 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a154:	4b1a      	ldr	r3, [pc, #104]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	4917      	ldr	r1, [pc, #92]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a162:	4313      	orrs	r3, r2
 800a164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 0308 	and.w	r3, r3, #8
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d009      	beq.n	800a186 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a172:	4b13      	ldr	r3, [pc, #76]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	00db      	lsls	r3, r3, #3
 800a180:	490f      	ldr	r1, [pc, #60]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a182:	4313      	orrs	r3, r2
 800a184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a186:	f000 f825 	bl	800a1d4 <HAL_RCC_GetSysClockFreq>
 800a18a:	4602      	mov	r2, r0
 800a18c:	4b0c      	ldr	r3, [pc, #48]	@ (800a1c0 <HAL_RCC_ClockConfig+0x264>)
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	091b      	lsrs	r3, r3, #4
 800a192:	f003 030f 	and.w	r3, r3, #15
 800a196:	490c      	ldr	r1, [pc, #48]	@ (800a1c8 <HAL_RCC_ClockConfig+0x26c>)
 800a198:	5ccb      	ldrb	r3, [r1, r3]
 800a19a:	f003 031f 	and.w	r3, r3, #31
 800a19e:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a2:	4a0a      	ldr	r2, [pc, #40]	@ (800a1cc <HAL_RCC_ClockConfig+0x270>)
 800a1a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a1a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a1d0 <HAL_RCC_ClockConfig+0x274>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7f9 ff20 	bl	8003ff0 <HAL_InitTick>
 800a1b0:	4603      	mov	r3, r0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	40022000 	.word	0x40022000
 800a1c0:	40021000 	.word	0x40021000
 800a1c4:	04c4b400 	.word	0x04c4b400
 800a1c8:	0801c2d0 	.word	0x0801c2d0
 800a1cc:	20000004 	.word	0x20000004
 800a1d0:	20000138 	.word	0x20000138

0800a1d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a1da:	4b2c      	ldr	r3, [pc, #176]	@ (800a28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 030c 	and.w	r3, r3, #12
 800a1e2:	2b04      	cmp	r3, #4
 800a1e4:	d102      	bne.n	800a1ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a1e6:	4b2a      	ldr	r3, [pc, #168]	@ (800a290 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a1e8:	613b      	str	r3, [r7, #16]
 800a1ea:	e047      	b.n	800a27c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a1ec:	4b27      	ldr	r3, [pc, #156]	@ (800a28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	f003 030c 	and.w	r3, r3, #12
 800a1f4:	2b08      	cmp	r3, #8
 800a1f6:	d102      	bne.n	800a1fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a1f8:	4b26      	ldr	r3, [pc, #152]	@ (800a294 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a1fa:	613b      	str	r3, [r7, #16]
 800a1fc:	e03e      	b.n	800a27c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a1fe:	4b23      	ldr	r3, [pc, #140]	@ (800a28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	f003 030c 	and.w	r3, r3, #12
 800a206:	2b0c      	cmp	r3, #12
 800a208:	d136      	bne.n	800a278 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a20a:	4b20      	ldr	r3, [pc, #128]	@ (800a28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	f003 0303 	and.w	r3, r3, #3
 800a212:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a214:	4b1d      	ldr	r3, [pc, #116]	@ (800a28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	091b      	lsrs	r3, r3, #4
 800a21a:	f003 030f 	and.w	r3, r3, #15
 800a21e:	3301      	adds	r3, #1
 800a220:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2b03      	cmp	r3, #3
 800a226:	d10c      	bne.n	800a242 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a228:	4a1a      	ldr	r2, [pc, #104]	@ (800a294 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a230:	4a16      	ldr	r2, [pc, #88]	@ (800a28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a232:	68d2      	ldr	r2, [r2, #12]
 800a234:	0a12      	lsrs	r2, r2, #8
 800a236:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a23a:	fb02 f303 	mul.w	r3, r2, r3
 800a23e:	617b      	str	r3, [r7, #20]
      break;
 800a240:	e00c      	b.n	800a25c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a242:	4a13      	ldr	r2, [pc, #76]	@ (800a290 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	fbb2 f3f3 	udiv	r3, r2, r3
 800a24a:	4a10      	ldr	r2, [pc, #64]	@ (800a28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a24c:	68d2      	ldr	r2, [r2, #12]
 800a24e:	0a12      	lsrs	r2, r2, #8
 800a250:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a254:	fb02 f303 	mul.w	r3, r2, r3
 800a258:	617b      	str	r3, [r7, #20]
      break;
 800a25a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a25c:	4b0b      	ldr	r3, [pc, #44]	@ (800a28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	0e5b      	lsrs	r3, r3, #25
 800a262:	f003 0303 	and.w	r3, r3, #3
 800a266:	3301      	adds	r3, #1
 800a268:	005b      	lsls	r3, r3, #1
 800a26a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	fbb2 f3f3 	udiv	r3, r2, r3
 800a274:	613b      	str	r3, [r7, #16]
 800a276:	e001      	b.n	800a27c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a27c:	693b      	ldr	r3, [r7, #16]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	371c      	adds	r7, #28
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	40021000 	.word	0x40021000
 800a290:	00f42400 	.word	0x00f42400
 800a294:	007a1200 	.word	0x007a1200

0800a298 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a298:	b480      	push	{r7}
 800a29a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a29c:	4b03      	ldr	r3, [pc, #12]	@ (800a2ac <HAL_RCC_GetHCLKFreq+0x14>)
 800a29e:	681b      	ldr	r3, [r3, #0]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	20000004 	.word	0x20000004

0800a2b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a2b4:	f7ff fff0 	bl	800a298 <HAL_RCC_GetHCLKFreq>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	4b06      	ldr	r3, [pc, #24]	@ (800a2d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	0a1b      	lsrs	r3, r3, #8
 800a2c0:	f003 0307 	and.w	r3, r3, #7
 800a2c4:	4904      	ldr	r1, [pc, #16]	@ (800a2d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a2c6:	5ccb      	ldrb	r3, [r1, r3]
 800a2c8:	f003 031f 	and.w	r3, r3, #31
 800a2cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	40021000 	.word	0x40021000
 800a2d8:	0801c2e0 	.word	0x0801c2e0

0800a2dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a2e0:	f7ff ffda 	bl	800a298 <HAL_RCC_GetHCLKFreq>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	4b06      	ldr	r3, [pc, #24]	@ (800a300 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	0adb      	lsrs	r3, r3, #11
 800a2ec:	f003 0307 	and.w	r3, r3, #7
 800a2f0:	4904      	ldr	r1, [pc, #16]	@ (800a304 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a2f2:	5ccb      	ldrb	r3, [r1, r3]
 800a2f4:	f003 031f 	and.w	r3, r3, #31
 800a2f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	40021000 	.word	0x40021000
 800a304:	0801c2e0 	.word	0x0801c2e0

0800a308 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	220f      	movs	r2, #15
 800a316:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a318:	4b12      	ldr	r3, [pc, #72]	@ (800a364 <HAL_RCC_GetClockConfig+0x5c>)
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	f003 0203 	and.w	r2, r3, #3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a324:	4b0f      	ldr	r3, [pc, #60]	@ (800a364 <HAL_RCC_GetClockConfig+0x5c>)
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a330:	4b0c      	ldr	r3, [pc, #48]	@ (800a364 <HAL_RCC_GetClockConfig+0x5c>)
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a33c:	4b09      	ldr	r3, [pc, #36]	@ (800a364 <HAL_RCC_GetClockConfig+0x5c>)
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	08db      	lsrs	r3, r3, #3
 800a342:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a34a:	4b07      	ldr	r3, [pc, #28]	@ (800a368 <HAL_RCC_GetClockConfig+0x60>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 020f 	and.w	r2, r3, #15
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	601a      	str	r2, [r3, #0]
}
 800a356:	bf00      	nop
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	40021000 	.word	0x40021000
 800a368:	40022000 	.word	0x40022000

0800a36c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a372:	4b1e      	ldr	r3, [pc, #120]	@ (800a3ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	f003 0303 	and.w	r3, r3, #3
 800a37a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a37c:	4b1b      	ldr	r3, [pc, #108]	@ (800a3ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	091b      	lsrs	r3, r3, #4
 800a382:	f003 030f 	and.w	r3, r3, #15
 800a386:	3301      	adds	r3, #1
 800a388:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	2b03      	cmp	r3, #3
 800a38e:	d10c      	bne.n	800a3aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a390:	4a17      	ldr	r2, [pc, #92]	@ (800a3f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	fbb2 f3f3 	udiv	r3, r2, r3
 800a398:	4a14      	ldr	r2, [pc, #80]	@ (800a3ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a39a:	68d2      	ldr	r2, [r2, #12]
 800a39c:	0a12      	lsrs	r2, r2, #8
 800a39e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a3a2:	fb02 f303 	mul.w	r3, r2, r3
 800a3a6:	617b      	str	r3, [r7, #20]
    break;
 800a3a8:	e00c      	b.n	800a3c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a3aa:	4a12      	ldr	r2, [pc, #72]	@ (800a3f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b2:	4a0e      	ldr	r2, [pc, #56]	@ (800a3ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a3b4:	68d2      	ldr	r2, [r2, #12]
 800a3b6:	0a12      	lsrs	r2, r2, #8
 800a3b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a3bc:	fb02 f303 	mul.w	r3, r2, r3
 800a3c0:	617b      	str	r3, [r7, #20]
    break;
 800a3c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a3c4:	4b09      	ldr	r3, [pc, #36]	@ (800a3ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	0e5b      	lsrs	r3, r3, #25
 800a3ca:	f003 0303 	and.w	r3, r3, #3
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a3de:	687b      	ldr	r3, [r7, #4]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	371c      	adds	r7, #28
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	40021000 	.word	0x40021000
 800a3f0:	007a1200 	.word	0x007a1200
 800a3f4:	00f42400 	.word	0x00f42400

0800a3f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a400:	2300      	movs	r3, #0
 800a402:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a404:	2300      	movs	r3, #0
 800a406:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 8098 	beq.w	800a546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a416:	2300      	movs	r3, #0
 800a418:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a41a:	4b43      	ldr	r3, [pc, #268]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a41c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a41e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10d      	bne.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a426:	4b40      	ldr	r3, [pc, #256]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a42a:	4a3f      	ldr	r2, [pc, #252]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a42c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a430:	6593      	str	r3, [r2, #88]	@ 0x58
 800a432:	4b3d      	ldr	r3, [pc, #244]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a43a:	60bb      	str	r3, [r7, #8]
 800a43c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a43e:	2301      	movs	r3, #1
 800a440:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a442:	4b3a      	ldr	r3, [pc, #232]	@ (800a52c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a39      	ldr	r2, [pc, #228]	@ (800a52c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a44c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a44e:	f7fb fdcb 	bl	8005fe8 <HAL_GetTick>
 800a452:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a454:	e009      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a456:	f7fb fdc7 	bl	8005fe8 <HAL_GetTick>
 800a45a:	4602      	mov	r2, r0
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	2b02      	cmp	r3, #2
 800a462:	d902      	bls.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a464:	2303      	movs	r3, #3
 800a466:	74fb      	strb	r3, [r7, #19]
        break;
 800a468:	e005      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a46a:	4b30      	ldr	r3, [pc, #192]	@ (800a52c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0ef      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a476:	7cfb      	ldrb	r3, [r7, #19]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d159      	bne.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a47c:	4b2a      	ldr	r3, [pc, #168]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a486:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d01e      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	429a      	cmp	r2, r3
 800a496:	d019      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a498:	4b23      	ldr	r3, [pc, #140]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a49a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a49e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a4a4:	4b20      	ldr	r3, [pc, #128]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4aa:	4a1f      	ldr	r2, [pc, #124]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4b4:	4b1c      	ldr	r3, [pc, #112]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ba:	4a1b      	ldr	r2, [pc, #108]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a4c4:	4a18      	ldr	r2, [pc, #96]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d016      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4d6:	f7fb fd87 	bl	8005fe8 <HAL_GetTick>
 800a4da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4dc:	e00b      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4de:	f7fb fd83 	bl	8005fe8 <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d902      	bls.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	74fb      	strb	r3, [r7, #19]
            break;
 800a4f4:	e006      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4fc:	f003 0302 	and.w	r3, r3, #2
 800a500:	2b00      	cmp	r3, #0
 800a502:	d0ec      	beq.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a504:	7cfb      	ldrb	r3, [r7, #19]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10b      	bne.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a50a:	4b07      	ldr	r3, [pc, #28]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a510:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a518:	4903      	ldr	r1, [pc, #12]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a51a:	4313      	orrs	r3, r2
 800a51c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a520:	e008      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a522:	7cfb      	ldrb	r3, [r7, #19]
 800a524:	74bb      	strb	r3, [r7, #18]
 800a526:	e005      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a528:	40021000 	.word	0x40021000
 800a52c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a530:	7cfb      	ldrb	r3, [r7, #19]
 800a532:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a534:	7c7b      	ldrb	r3, [r7, #17]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d105      	bne.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a53a:	4ba6      	ldr	r3, [pc, #664]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a53c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a53e:	4aa5      	ldr	r2, [pc, #660]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a540:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a544:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 0301 	and.w	r3, r3, #1
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00a      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a552:	4ba0      	ldr	r3, [pc, #640]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a558:	f023 0203 	bic.w	r2, r3, #3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	499c      	ldr	r1, [pc, #624]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a562:	4313      	orrs	r3, r2
 800a564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 0302 	and.w	r3, r3, #2
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00a      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a574:	4b97      	ldr	r3, [pc, #604]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a57a:	f023 020c 	bic.w	r2, r3, #12
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	4994      	ldr	r1, [pc, #592]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a584:	4313      	orrs	r3, r2
 800a586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 0304 	and.w	r3, r3, #4
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00a      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a596:	4b8f      	ldr	r3, [pc, #572]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a59c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	498b      	ldr	r1, [pc, #556]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0308 	and.w	r3, r3, #8
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00a      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a5b8:	4b86      	ldr	r3, [pc, #536]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	4983      	ldr	r1, [pc, #524]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 0320 	and.w	r3, r3, #32
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00a      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a5da:	4b7e      	ldr	r3, [pc, #504]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	497a      	ldr	r1, [pc, #488]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00a      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a5fc:	4b75      	ldr	r3, [pc, #468]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a602:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	4972      	ldr	r1, [pc, #456]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a60c:	4313      	orrs	r3, r2
 800a60e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00a      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a61e:	4b6d      	ldr	r3, [pc, #436]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a624:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	69db      	ldr	r3, [r3, #28]
 800a62c:	4969      	ldr	r1, [pc, #420]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a62e:	4313      	orrs	r3, r2
 800a630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00a      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a640:	4b64      	ldr	r3, [pc, #400]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a646:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	4961      	ldr	r1, [pc, #388]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a650:	4313      	orrs	r3, r2
 800a652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00a      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a662:	4b5c      	ldr	r3, [pc, #368]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a668:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a670:	4958      	ldr	r1, [pc, #352]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a672:	4313      	orrs	r3, r2
 800a674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a680:	2b00      	cmp	r3, #0
 800a682:	d015      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a684:	4b53      	ldr	r3, [pc, #332]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a68a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a692:	4950      	ldr	r1, [pc, #320]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a694:	4313      	orrs	r3, r2
 800a696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a69e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6a2:	d105      	bne.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6a4:	4b4b      	ldr	r3, [pc, #300]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	4a4a      	ldr	r2, [pc, #296]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6ae:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d015      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a6bc:	4b45      	ldr	r3, [pc, #276]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ca:	4942      	ldr	r1, [pc, #264]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6da:	d105      	bne.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6dc:	4b3d      	ldr	r3, [pc, #244]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	4a3c      	ldr	r2, [pc, #240]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6e6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d015      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a6f4:	4b37      	ldr	r3, [pc, #220]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a702:	4934      	ldr	r1, [pc, #208]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a704:	4313      	orrs	r3, r2
 800a706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a70e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a712:	d105      	bne.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a714:	4b2f      	ldr	r3, [pc, #188]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	4a2e      	ldr	r2, [pc, #184]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a71a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a71e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d015      	beq.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a72c:	4b29      	ldr	r3, [pc, #164]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a72e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a732:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a73a:	4926      	ldr	r1, [pc, #152]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a73c:	4313      	orrs	r3, r2
 800a73e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a746:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a74a:	d105      	bne.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a74c:	4b21      	ldr	r3, [pc, #132]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	4a20      	ldr	r2, [pc, #128]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a760:	2b00      	cmp	r3, #0
 800a762:	d015      	beq.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a764:	4b1b      	ldr	r3, [pc, #108]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a76a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a772:	4918      	ldr	r1, [pc, #96]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a774:	4313      	orrs	r3, r2
 800a776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a77e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a782:	d105      	bne.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a784:	4b13      	ldr	r3, [pc, #76]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	4a12      	ldr	r2, [pc, #72]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a78a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a78e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d015      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a79c:	4b0d      	ldr	r3, [pc, #52]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a79e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7aa:	490a      	ldr	r1, [pc, #40]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7ba:	d105      	bne.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a7bc:	4b05      	ldr	r3, [pc, #20]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	4a04      	ldr	r2, [pc, #16]	@ (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a7c8:	7cbb      	ldrb	r3, [r7, #18]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	40021000 	.word	0x40021000

0800a7d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e054      	b.n	800a894 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d111      	bne.n	800a81a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f001 fcd2 	bl	800c1a8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d102      	bne.n	800a812 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a23      	ldr	r2, [pc, #140]	@ (800a89c <HAL_TIM_Base_Init+0xc4>)
 800a810:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2202      	movs	r2, #2
 800a81e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3304      	adds	r3, #4
 800a82a:	4619      	mov	r1, r3
 800a82c:	4610      	mov	r0, r2
 800a82e:	f001 f867 	bl	800b900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	080047e1 	.word	0x080047e1

0800a8a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d001      	beq.n	800a8b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e042      	b.n	800a93e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a21      	ldr	r2, [pc, #132]	@ (800a94c <HAL_TIM_Base_Start+0xac>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d018      	beq.n	800a8fc <HAL_TIM_Base_Start+0x5c>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8d2:	d013      	beq.n	800a8fc <HAL_TIM_Base_Start+0x5c>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a950 <HAL_TIM_Base_Start+0xb0>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d00e      	beq.n	800a8fc <HAL_TIM_Base_Start+0x5c>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a954 <HAL_TIM_Base_Start+0xb4>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d009      	beq.n	800a8fc <HAL_TIM_Base_Start+0x5c>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a1a      	ldr	r2, [pc, #104]	@ (800a958 <HAL_TIM_Base_Start+0xb8>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d004      	beq.n	800a8fc <HAL_TIM_Base_Start+0x5c>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a19      	ldr	r2, [pc, #100]	@ (800a95c <HAL_TIM_Base_Start+0xbc>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d115      	bne.n	800a928 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	689a      	ldr	r2, [r3, #8]
 800a902:	4b17      	ldr	r3, [pc, #92]	@ (800a960 <HAL_TIM_Base_Start+0xc0>)
 800a904:	4013      	ands	r3, r2
 800a906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2b06      	cmp	r3, #6
 800a90c:	d015      	beq.n	800a93a <HAL_TIM_Base_Start+0x9a>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a914:	d011      	beq.n	800a93a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f042 0201 	orr.w	r2, r2, #1
 800a924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a926:	e008      	b.n	800a93a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f042 0201 	orr.w	r2, r2, #1
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	e000      	b.n	800a93c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a93a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	40012c00 	.word	0x40012c00
 800a950:	40000400 	.word	0x40000400
 800a954:	40000800 	.word	0x40000800
 800a958:	40013400 	.word	0x40013400
 800a95c:	40014000 	.word	0x40014000
 800a960:	00010007 	.word	0x00010007

0800a964 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	6a1a      	ldr	r2, [r3, #32]
 800a972:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a976:	4013      	ands	r3, r2
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10f      	bne.n	800a99c <HAL_TIM_Base_Stop+0x38>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6a1a      	ldr	r2, [r3, #32]
 800a982:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a986:	4013      	ands	r3, r2
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d107      	bne.n	800a99c <HAL_TIM_Base_Stop+0x38>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f022 0201 	bic.w	r2, r2, #1
 800a99a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
	...

0800a9b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d001      	beq.n	800a9cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e04a      	b.n	800aa62 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68da      	ldr	r2, [r3, #12]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f042 0201 	orr.w	r2, r2, #1
 800a9e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a21      	ldr	r2, [pc, #132]	@ (800aa70 <HAL_TIM_Base_Start_IT+0xbc>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d018      	beq.n	800aa20 <HAL_TIM_Base_Start_IT+0x6c>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9f6:	d013      	beq.n	800aa20 <HAL_TIM_Base_Start_IT+0x6c>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a1d      	ldr	r2, [pc, #116]	@ (800aa74 <HAL_TIM_Base_Start_IT+0xc0>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d00e      	beq.n	800aa20 <HAL_TIM_Base_Start_IT+0x6c>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a1c      	ldr	r2, [pc, #112]	@ (800aa78 <HAL_TIM_Base_Start_IT+0xc4>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d009      	beq.n	800aa20 <HAL_TIM_Base_Start_IT+0x6c>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a1a      	ldr	r2, [pc, #104]	@ (800aa7c <HAL_TIM_Base_Start_IT+0xc8>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d004      	beq.n	800aa20 <HAL_TIM_Base_Start_IT+0x6c>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a19      	ldr	r2, [pc, #100]	@ (800aa80 <HAL_TIM_Base_Start_IT+0xcc>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d115      	bne.n	800aa4c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	689a      	ldr	r2, [r3, #8]
 800aa26:	4b17      	ldr	r3, [pc, #92]	@ (800aa84 <HAL_TIM_Base_Start_IT+0xd0>)
 800aa28:	4013      	ands	r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2b06      	cmp	r3, #6
 800aa30:	d015      	beq.n	800aa5e <HAL_TIM_Base_Start_IT+0xaa>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa38:	d011      	beq.n	800aa5e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f042 0201 	orr.w	r2, r2, #1
 800aa48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa4a:	e008      	b.n	800aa5e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f042 0201 	orr.w	r2, r2, #1
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	e000      	b.n	800aa60 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3714      	adds	r7, #20
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	40012c00 	.word	0x40012c00
 800aa74:	40000400 	.word	0x40000400
 800aa78:	40000800 	.word	0x40000800
 800aa7c:	40013400 	.word	0x40013400
 800aa80:	40014000 	.word	0x40014000
 800aa84:	00010007 	.word	0x00010007

0800aa88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d101      	bne.n	800aa9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e054      	b.n	800ab44 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d111      	bne.n	800aaca <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f001 fb7a 	bl	800c1a8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d102      	bne.n	800aac2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a23      	ldr	r2, [pc, #140]	@ (800ab4c <HAL_TIM_PWM_Init+0xc4>)
 800aac0:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2202      	movs	r2, #2
 800aace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	3304      	adds	r3, #4
 800aada:	4619      	mov	r1, r3
 800aadc:	4610      	mov	r0, r2
 800aade:	f000 ff0f 	bl	800b900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	080048d9 	.word	0x080048d9

0800ab50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d109      	bne.n	800ab74 <HAL_TIM_PWM_Start+0x24>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	bf14      	ite	ne
 800ab6c:	2301      	movne	r3, #1
 800ab6e:	2300      	moveq	r3, #0
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	e03c      	b.n	800abee <HAL_TIM_PWM_Start+0x9e>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2b04      	cmp	r3, #4
 800ab78:	d109      	bne.n	800ab8e <HAL_TIM_PWM_Start+0x3e>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	bf14      	ite	ne
 800ab86:	2301      	movne	r3, #1
 800ab88:	2300      	moveq	r3, #0
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	e02f      	b.n	800abee <HAL_TIM_PWM_Start+0x9e>
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	2b08      	cmp	r3, #8
 800ab92:	d109      	bne.n	800aba8 <HAL_TIM_PWM_Start+0x58>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	bf14      	ite	ne
 800aba0:	2301      	movne	r3, #1
 800aba2:	2300      	moveq	r3, #0
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	e022      	b.n	800abee <HAL_TIM_PWM_Start+0x9e>
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	2b0c      	cmp	r3, #12
 800abac:	d109      	bne.n	800abc2 <HAL_TIM_PWM_Start+0x72>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	bf14      	ite	ne
 800abba:	2301      	movne	r3, #1
 800abbc:	2300      	moveq	r3, #0
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	e015      	b.n	800abee <HAL_TIM_PWM_Start+0x9e>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b10      	cmp	r3, #16
 800abc6:	d109      	bne.n	800abdc <HAL_TIM_PWM_Start+0x8c>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	bf14      	ite	ne
 800abd4:	2301      	movne	r3, #1
 800abd6:	2300      	moveq	r3, #0
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	e008      	b.n	800abee <HAL_TIM_PWM_Start+0x9e>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	bf14      	ite	ne
 800abe8:	2301      	movne	r3, #1
 800abea:	2300      	moveq	r3, #0
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e097      	b.n	800ad26 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d104      	bne.n	800ac06 <HAL_TIM_PWM_Start+0xb6>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2202      	movs	r2, #2
 800ac00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac04:	e023      	b.n	800ac4e <HAL_TIM_PWM_Start+0xfe>
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	d104      	bne.n	800ac16 <HAL_TIM_PWM_Start+0xc6>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac14:	e01b      	b.n	800ac4e <HAL_TIM_PWM_Start+0xfe>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2b08      	cmp	r3, #8
 800ac1a:	d104      	bne.n	800ac26 <HAL_TIM_PWM_Start+0xd6>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2202      	movs	r2, #2
 800ac20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac24:	e013      	b.n	800ac4e <HAL_TIM_PWM_Start+0xfe>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b0c      	cmp	r3, #12
 800ac2a:	d104      	bne.n	800ac36 <HAL_TIM_PWM_Start+0xe6>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2202      	movs	r2, #2
 800ac30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac34:	e00b      	b.n	800ac4e <HAL_TIM_PWM_Start+0xfe>
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	2b10      	cmp	r3, #16
 800ac3a:	d104      	bne.n	800ac46 <HAL_TIM_PWM_Start+0xf6>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2202      	movs	r2, #2
 800ac40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac44:	e003      	b.n	800ac4e <HAL_TIM_PWM_Start+0xfe>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2202      	movs	r2, #2
 800ac4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2201      	movs	r2, #1
 800ac54:	6839      	ldr	r1, [r7, #0]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f001 fa80 	bl	800c15c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a33      	ldr	r2, [pc, #204]	@ (800ad30 <HAL_TIM_PWM_Start+0x1e0>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d013      	beq.n	800ac8e <HAL_TIM_PWM_Start+0x13e>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a32      	ldr	r2, [pc, #200]	@ (800ad34 <HAL_TIM_PWM_Start+0x1e4>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d00e      	beq.n	800ac8e <HAL_TIM_PWM_Start+0x13e>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a30      	ldr	r2, [pc, #192]	@ (800ad38 <HAL_TIM_PWM_Start+0x1e8>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d009      	beq.n	800ac8e <HAL_TIM_PWM_Start+0x13e>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a2f      	ldr	r2, [pc, #188]	@ (800ad3c <HAL_TIM_PWM_Start+0x1ec>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d004      	beq.n	800ac8e <HAL_TIM_PWM_Start+0x13e>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a2d      	ldr	r2, [pc, #180]	@ (800ad40 <HAL_TIM_PWM_Start+0x1f0>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d101      	bne.n	800ac92 <HAL_TIM_PWM_Start+0x142>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e000      	b.n	800ac94 <HAL_TIM_PWM_Start+0x144>
 800ac92:	2300      	movs	r3, #0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d007      	beq.n	800aca8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aca6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a20      	ldr	r2, [pc, #128]	@ (800ad30 <HAL_TIM_PWM_Start+0x1e0>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d018      	beq.n	800ace4 <HAL_TIM_PWM_Start+0x194>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acba:	d013      	beq.n	800ace4 <HAL_TIM_PWM_Start+0x194>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a20      	ldr	r2, [pc, #128]	@ (800ad44 <HAL_TIM_PWM_Start+0x1f4>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d00e      	beq.n	800ace4 <HAL_TIM_PWM_Start+0x194>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a1f      	ldr	r2, [pc, #124]	@ (800ad48 <HAL_TIM_PWM_Start+0x1f8>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d009      	beq.n	800ace4 <HAL_TIM_PWM_Start+0x194>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a17      	ldr	r2, [pc, #92]	@ (800ad34 <HAL_TIM_PWM_Start+0x1e4>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d004      	beq.n	800ace4 <HAL_TIM_PWM_Start+0x194>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a16      	ldr	r2, [pc, #88]	@ (800ad38 <HAL_TIM_PWM_Start+0x1e8>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d115      	bne.n	800ad10 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	689a      	ldr	r2, [r3, #8]
 800acea:	4b18      	ldr	r3, [pc, #96]	@ (800ad4c <HAL_TIM_PWM_Start+0x1fc>)
 800acec:	4013      	ands	r3, r2
 800acee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2b06      	cmp	r3, #6
 800acf4:	d015      	beq.n	800ad22 <HAL_TIM_PWM_Start+0x1d2>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acfc:	d011      	beq.n	800ad22 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f042 0201 	orr.w	r2, r2, #1
 800ad0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad0e:	e008      	b.n	800ad22 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f042 0201 	orr.w	r2, r2, #1
 800ad1e:	601a      	str	r2, [r3, #0]
 800ad20:	e000      	b.n	800ad24 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	40012c00 	.word	0x40012c00
 800ad34:	40013400 	.word	0x40013400
 800ad38:	40014000 	.word	0x40014000
 800ad3c:	40014400 	.word	0x40014400
 800ad40:	40014800 	.word	0x40014800
 800ad44:	40000400 	.word	0x40000400
 800ad48:	40000800 	.word	0x40000800
 800ad4c:	00010007 	.word	0x00010007

0800ad50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	6839      	ldr	r1, [r7, #0]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f001 f9fa 	bl	800c15c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a3e      	ldr	r2, [pc, #248]	@ (800ae68 <HAL_TIM_PWM_Stop+0x118>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d013      	beq.n	800ad9a <HAL_TIM_PWM_Stop+0x4a>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a3d      	ldr	r2, [pc, #244]	@ (800ae6c <HAL_TIM_PWM_Stop+0x11c>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d00e      	beq.n	800ad9a <HAL_TIM_PWM_Stop+0x4a>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a3b      	ldr	r2, [pc, #236]	@ (800ae70 <HAL_TIM_PWM_Stop+0x120>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d009      	beq.n	800ad9a <HAL_TIM_PWM_Stop+0x4a>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a3a      	ldr	r2, [pc, #232]	@ (800ae74 <HAL_TIM_PWM_Stop+0x124>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d004      	beq.n	800ad9a <HAL_TIM_PWM_Stop+0x4a>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a38      	ldr	r2, [pc, #224]	@ (800ae78 <HAL_TIM_PWM_Stop+0x128>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d101      	bne.n	800ad9e <HAL_TIM_PWM_Stop+0x4e>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e000      	b.n	800ada0 <HAL_TIM_PWM_Stop+0x50>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d017      	beq.n	800add4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6a1a      	ldr	r2, [r3, #32]
 800adaa:	f241 1311 	movw	r3, #4369	@ 0x1111
 800adae:	4013      	ands	r3, r2
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10f      	bne.n	800add4 <HAL_TIM_PWM_Stop+0x84>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	6a1a      	ldr	r2, [r3, #32]
 800adba:	f244 4344 	movw	r3, #17476	@ 0x4444
 800adbe:	4013      	ands	r3, r2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d107      	bne.n	800add4 <HAL_TIM_PWM_Stop+0x84>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800add2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6a1a      	ldr	r2, [r3, #32]
 800adda:	f241 1311 	movw	r3, #4369	@ 0x1111
 800adde:	4013      	ands	r3, r2
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10f      	bne.n	800ae04 <HAL_TIM_PWM_Stop+0xb4>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	6a1a      	ldr	r2, [r3, #32]
 800adea:	f244 4344 	movw	r3, #17476	@ 0x4444
 800adee:	4013      	ands	r3, r2
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d107      	bne.n	800ae04 <HAL_TIM_PWM_Stop+0xb4>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f022 0201 	bic.w	r2, r2, #1
 800ae02:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d104      	bne.n	800ae14 <HAL_TIM_PWM_Stop+0xc4>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae12:	e023      	b.n	800ae5c <HAL_TIM_PWM_Stop+0x10c>
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	2b04      	cmp	r3, #4
 800ae18:	d104      	bne.n	800ae24 <HAL_TIM_PWM_Stop+0xd4>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae22:	e01b      	b.n	800ae5c <HAL_TIM_PWM_Stop+0x10c>
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	2b08      	cmp	r3, #8
 800ae28:	d104      	bne.n	800ae34 <HAL_TIM_PWM_Stop+0xe4>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae32:	e013      	b.n	800ae5c <HAL_TIM_PWM_Stop+0x10c>
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	2b0c      	cmp	r3, #12
 800ae38:	d104      	bne.n	800ae44 <HAL_TIM_PWM_Stop+0xf4>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ae42:	e00b      	b.n	800ae5c <HAL_TIM_PWM_Stop+0x10c>
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	2b10      	cmp	r3, #16
 800ae48:	d104      	bne.n	800ae54 <HAL_TIM_PWM_Stop+0x104>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae52:	e003      	b.n	800ae5c <HAL_TIM_PWM_Stop+0x10c>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	40012c00 	.word	0x40012c00
 800ae6c:	40013400 	.word	0x40013400
 800ae70:	40014000 	.word	0x40014000
 800ae74:	40014400 	.word	0x40014400
 800ae78:	40014800 	.word	0x40014800

0800ae7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	f003 0302 	and.w	r3, r3, #2
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d026      	beq.n	800aeec <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f003 0302 	and.w	r3, r3, #2
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d021      	beq.n	800aeec <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f06f 0202 	mvn.w	r2, #2
 800aeb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	699b      	ldr	r3, [r3, #24]
 800aebe:	f003 0303 	and.w	r3, r3, #3
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d005      	beq.n	800aed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	4798      	blx	r3
 800aed0:	e009      	b.n	800aee6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f003 0304 	and.w	r3, r3, #4
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d026      	beq.n	800af44 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f003 0304 	and.w	r3, r3, #4
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d021      	beq.n	800af44 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f06f 0204 	mvn.w	r2, #4
 800af08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2202      	movs	r2, #2
 800af0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	699b      	ldr	r3, [r3, #24]
 800af16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d005      	beq.n	800af2a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	4798      	blx	r3
 800af28:	e009      	b.n	800af3e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	f003 0308 	and.w	r3, r3, #8
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d026      	beq.n	800af9c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f003 0308 	and.w	r3, r3, #8
 800af54:	2b00      	cmp	r3, #0
 800af56:	d021      	beq.n	800af9c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f06f 0208 	mvn.w	r2, #8
 800af60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2204      	movs	r2, #4
 800af66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	69db      	ldr	r3, [r3, #28]
 800af6e:	f003 0303 	and.w	r3, r3, #3
 800af72:	2b00      	cmp	r3, #0
 800af74:	d005      	beq.n	800af82 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	4798      	blx	r3
 800af80:	e009      	b.n	800af96 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	f003 0310 	and.w	r3, r3, #16
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d026      	beq.n	800aff4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f003 0310 	and.w	r3, r3, #16
 800afac:	2b00      	cmp	r3, #0
 800afae:	d021      	beq.n	800aff4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f06f 0210 	mvn.w	r2, #16
 800afb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2208      	movs	r2, #8
 800afbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d005      	beq.n	800afda <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	4798      	blx	r3
 800afd8:	e009      	b.n	800afee <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00e      	beq.n	800b01c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f003 0301 	and.w	r3, r3, #1
 800b004:	2b00      	cmp	r3, #0
 800b006:	d009      	beq.n	800b01c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f06f 0201 	mvn.w	r2, #1
 800b010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b022:	2b00      	cmp	r3, #0
 800b024:	d104      	bne.n	800b030 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00e      	beq.n	800b04e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b036:	2b00      	cmp	r3, #0
 800b038:	d009      	beq.n	800b04e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00e      	beq.n	800b076 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d009      	beq.n	800b076 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b06a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00e      	beq.n	800b09e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b086:	2b00      	cmp	r3, #0
 800b088:	d009      	beq.n	800b09e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	f003 0320 	and.w	r3, r3, #32
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00e      	beq.n	800b0c6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f003 0320 	and.w	r3, r3, #32
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d009      	beq.n	800b0c6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f06f 0220 	mvn.w	r2, #32
 800b0ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00e      	beq.n	800b0ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d009      	beq.n	800b0ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b0e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00e      	beq.n	800b116 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d009      	beq.n	800b116 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b10a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00e      	beq.n	800b13e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b126:	2b00      	cmp	r3, #0
 800b128:	d009      	beq.n	800b13e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00e      	beq.n	800b166 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d009      	beq.n	800b166 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b15a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b166:	bf00      	nop
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
	...

0800b170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b186:	2b01      	cmp	r3, #1
 800b188:	d101      	bne.n	800b18e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b18a:	2302      	movs	r3, #2
 800b18c:	e0ff      	b.n	800b38e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b14      	cmp	r3, #20
 800b19a:	f200 80f0 	bhi.w	800b37e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b19e:	a201      	add	r2, pc, #4	@ (adr r2, 800b1a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a4:	0800b1f9 	.word	0x0800b1f9
 800b1a8:	0800b37f 	.word	0x0800b37f
 800b1ac:	0800b37f 	.word	0x0800b37f
 800b1b0:	0800b37f 	.word	0x0800b37f
 800b1b4:	0800b239 	.word	0x0800b239
 800b1b8:	0800b37f 	.word	0x0800b37f
 800b1bc:	0800b37f 	.word	0x0800b37f
 800b1c0:	0800b37f 	.word	0x0800b37f
 800b1c4:	0800b27b 	.word	0x0800b27b
 800b1c8:	0800b37f 	.word	0x0800b37f
 800b1cc:	0800b37f 	.word	0x0800b37f
 800b1d0:	0800b37f 	.word	0x0800b37f
 800b1d4:	0800b2bb 	.word	0x0800b2bb
 800b1d8:	0800b37f 	.word	0x0800b37f
 800b1dc:	0800b37f 	.word	0x0800b37f
 800b1e0:	0800b37f 	.word	0x0800b37f
 800b1e4:	0800b2fd 	.word	0x0800b2fd
 800b1e8:	0800b37f 	.word	0x0800b37f
 800b1ec:	0800b37f 	.word	0x0800b37f
 800b1f0:	0800b37f 	.word	0x0800b37f
 800b1f4:	0800b33d 	.word	0x0800b33d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68b9      	ldr	r1, [r7, #8]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 fc1a 	bl	800ba38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	699a      	ldr	r2, [r3, #24]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f042 0208 	orr.w	r2, r2, #8
 800b212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	699a      	ldr	r2, [r3, #24]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f022 0204 	bic.w	r2, r2, #4
 800b222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6999      	ldr	r1, [r3, #24]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	691a      	ldr	r2, [r3, #16]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	430a      	orrs	r2, r1
 800b234:	619a      	str	r2, [r3, #24]
      break;
 800b236:	e0a5      	b.n	800b384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68b9      	ldr	r1, [r7, #8]
 800b23e:	4618      	mov	r0, r3
 800b240:	f000 fc8a 	bl	800bb58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	699a      	ldr	r2, [r3, #24]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	699a      	ldr	r2, [r3, #24]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	6999      	ldr	r1, [r3, #24]
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	021a      	lsls	r2, r3, #8
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	430a      	orrs	r2, r1
 800b276:	619a      	str	r2, [r3, #24]
      break;
 800b278:	e084      	b.n	800b384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68b9      	ldr	r1, [r7, #8]
 800b280:	4618      	mov	r0, r3
 800b282:	f000 fcf3 	bl	800bc6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	69da      	ldr	r2, [r3, #28]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f042 0208 	orr.w	r2, r2, #8
 800b294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	69da      	ldr	r2, [r3, #28]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f022 0204 	bic.w	r2, r2, #4
 800b2a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	69d9      	ldr	r1, [r3, #28]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	691a      	ldr	r2, [r3, #16]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	430a      	orrs	r2, r1
 800b2b6:	61da      	str	r2, [r3, #28]
      break;
 800b2b8:	e064      	b.n	800b384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68b9      	ldr	r1, [r7, #8]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 fd5b 	bl	800bd7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	69da      	ldr	r2, [r3, #28]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	69da      	ldr	r2, [r3, #28]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	69d9      	ldr	r1, [r3, #28]
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	021a      	lsls	r2, r3, #8
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	430a      	orrs	r2, r1
 800b2f8:	61da      	str	r2, [r3, #28]
      break;
 800b2fa:	e043      	b.n	800b384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68b9      	ldr	r1, [r7, #8]
 800b302:	4618      	mov	r0, r3
 800b304:	f000 fdc4 	bl	800be90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f042 0208 	orr.w	r2, r2, #8
 800b316:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f022 0204 	bic.w	r2, r2, #4
 800b326:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	691a      	ldr	r2, [r3, #16]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	430a      	orrs	r2, r1
 800b338:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b33a:	e023      	b.n	800b384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	68b9      	ldr	r1, [r7, #8]
 800b342:	4618      	mov	r0, r3
 800b344:	f000 fe08 	bl	800bf58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b356:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b366:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	021a      	lsls	r2, r3, #8
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	430a      	orrs	r2, r1
 800b37a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b37c:	e002      	b.n	800b384 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	75fb      	strb	r3, [r7, #23]
      break;
 800b382:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b38c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop

0800b398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d101      	bne.n	800b3b4 <HAL_TIM_ConfigClockSource+0x1c>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	e0de      	b.n	800b572 <HAL_TIM_ConfigClockSource+0x1da>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2202      	movs	r2, #2
 800b3c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b3d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b3d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a63      	ldr	r2, [pc, #396]	@ (800b57c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	f000 80a9 	beq.w	800b546 <HAL_TIM_ConfigClockSource+0x1ae>
 800b3f4:	4a61      	ldr	r2, [pc, #388]	@ (800b57c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	f200 80ae 	bhi.w	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
 800b3fc:	4a60      	ldr	r2, [pc, #384]	@ (800b580 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	f000 80a1 	beq.w	800b546 <HAL_TIM_ConfigClockSource+0x1ae>
 800b404:	4a5e      	ldr	r2, [pc, #376]	@ (800b580 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b406:	4293      	cmp	r3, r2
 800b408:	f200 80a6 	bhi.w	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
 800b40c:	4a5d      	ldr	r2, [pc, #372]	@ (800b584 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	f000 8099 	beq.w	800b546 <HAL_TIM_ConfigClockSource+0x1ae>
 800b414:	4a5b      	ldr	r2, [pc, #364]	@ (800b584 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b416:	4293      	cmp	r3, r2
 800b418:	f200 809e 	bhi.w	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
 800b41c:	4a5a      	ldr	r2, [pc, #360]	@ (800b588 <HAL_TIM_ConfigClockSource+0x1f0>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	f000 8091 	beq.w	800b546 <HAL_TIM_ConfigClockSource+0x1ae>
 800b424:	4a58      	ldr	r2, [pc, #352]	@ (800b588 <HAL_TIM_ConfigClockSource+0x1f0>)
 800b426:	4293      	cmp	r3, r2
 800b428:	f200 8096 	bhi.w	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
 800b42c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b430:	f000 8089 	beq.w	800b546 <HAL_TIM_ConfigClockSource+0x1ae>
 800b434:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b438:	f200 808e 	bhi.w	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
 800b43c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b440:	d03e      	beq.n	800b4c0 <HAL_TIM_ConfigClockSource+0x128>
 800b442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b446:	f200 8087 	bhi.w	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
 800b44a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b44e:	f000 8086 	beq.w	800b55e <HAL_TIM_ConfigClockSource+0x1c6>
 800b452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b456:	d87f      	bhi.n	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
 800b458:	2b70      	cmp	r3, #112	@ 0x70
 800b45a:	d01a      	beq.n	800b492 <HAL_TIM_ConfigClockSource+0xfa>
 800b45c:	2b70      	cmp	r3, #112	@ 0x70
 800b45e:	d87b      	bhi.n	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
 800b460:	2b60      	cmp	r3, #96	@ 0x60
 800b462:	d050      	beq.n	800b506 <HAL_TIM_ConfigClockSource+0x16e>
 800b464:	2b60      	cmp	r3, #96	@ 0x60
 800b466:	d877      	bhi.n	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
 800b468:	2b50      	cmp	r3, #80	@ 0x50
 800b46a:	d03c      	beq.n	800b4e6 <HAL_TIM_ConfigClockSource+0x14e>
 800b46c:	2b50      	cmp	r3, #80	@ 0x50
 800b46e:	d873      	bhi.n	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
 800b470:	2b40      	cmp	r3, #64	@ 0x40
 800b472:	d058      	beq.n	800b526 <HAL_TIM_ConfigClockSource+0x18e>
 800b474:	2b40      	cmp	r3, #64	@ 0x40
 800b476:	d86f      	bhi.n	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
 800b478:	2b30      	cmp	r3, #48	@ 0x30
 800b47a:	d064      	beq.n	800b546 <HAL_TIM_ConfigClockSource+0x1ae>
 800b47c:	2b30      	cmp	r3, #48	@ 0x30
 800b47e:	d86b      	bhi.n	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
 800b480:	2b20      	cmp	r3, #32
 800b482:	d060      	beq.n	800b546 <HAL_TIM_ConfigClockSource+0x1ae>
 800b484:	2b20      	cmp	r3, #32
 800b486:	d867      	bhi.n	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d05c      	beq.n	800b546 <HAL_TIM_ConfigClockSource+0x1ae>
 800b48c:	2b10      	cmp	r3, #16
 800b48e:	d05a      	beq.n	800b546 <HAL_TIM_ConfigClockSource+0x1ae>
 800b490:	e062      	b.n	800b558 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4a2:	f000 fe3b 	bl	800c11c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b4b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	609a      	str	r2, [r3, #8]
      break;
 800b4be:	e04f      	b.n	800b560 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4d0:	f000 fe24 	bl	800c11c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	689a      	ldr	r2, [r3, #8]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b4e2:	609a      	str	r2, [r3, #8]
      break;
 800b4e4:	e03c      	b.n	800b560 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	f000 fd96 	bl	800c024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2150      	movs	r1, #80	@ 0x50
 800b4fe:	4618      	mov	r0, r3
 800b500:	f000 fdef 	bl	800c0e2 <TIM_ITRx_SetConfig>
      break;
 800b504:	e02c      	b.n	800b560 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b512:	461a      	mov	r2, r3
 800b514:	f000 fdb5 	bl	800c082 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2160      	movs	r1, #96	@ 0x60
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 fddf 	bl	800c0e2 <TIM_ITRx_SetConfig>
      break;
 800b524:	e01c      	b.n	800b560 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b532:	461a      	mov	r2, r3
 800b534:	f000 fd76 	bl	800c024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2140      	movs	r1, #64	@ 0x40
 800b53e:	4618      	mov	r0, r3
 800b540:	f000 fdcf 	bl	800c0e2 <TIM_ITRx_SetConfig>
      break;
 800b544:	e00c      	b.n	800b560 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4619      	mov	r1, r3
 800b550:	4610      	mov	r0, r2
 800b552:	f000 fdc6 	bl	800c0e2 <TIM_ITRx_SetConfig>
      break;
 800b556:	e003      	b.n	800b560 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	73fb      	strb	r3, [r7, #15]
      break;
 800b55c:	e000      	b.n	800b560 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800b55e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b570:	7bfb      	ldrb	r3, [r7, #15]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	00100070 	.word	0x00100070
 800b580:	00100040 	.word	0x00100040
 800b584:	00100030 	.word	0x00100030
 800b588:	00100020 	.word	0x00100020

0800b58c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b5f8:	bf00      	nop
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b60c:	bf00      	nop
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b620:	bf00      	nop
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b634:	bf00      	nop
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b640:	b480      	push	{r7}
 800b642:	b087      	sub	sp, #28
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	460b      	mov	r3, r1
 800b64a:	607a      	str	r2, [r7, #4]
 800b64c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b64e:	2300      	movs	r3, #0
 800b650:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d101      	bne.n	800b65c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e14a      	b.n	800b8f2 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b01      	cmp	r3, #1
 800b666:	f040 80dd 	bne.w	800b824 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800b66a:	7afb      	ldrb	r3, [r7, #11]
 800b66c:	2b1f      	cmp	r3, #31
 800b66e:	f200 80d6 	bhi.w	800b81e <HAL_TIM_RegisterCallback+0x1de>
 800b672:	a201      	add	r2, pc, #4	@ (adr r2, 800b678 <HAL_TIM_RegisterCallback+0x38>)
 800b674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b678:	0800b6f9 	.word	0x0800b6f9
 800b67c:	0800b701 	.word	0x0800b701
 800b680:	0800b709 	.word	0x0800b709
 800b684:	0800b711 	.word	0x0800b711
 800b688:	0800b719 	.word	0x0800b719
 800b68c:	0800b721 	.word	0x0800b721
 800b690:	0800b729 	.word	0x0800b729
 800b694:	0800b731 	.word	0x0800b731
 800b698:	0800b739 	.word	0x0800b739
 800b69c:	0800b741 	.word	0x0800b741
 800b6a0:	0800b749 	.word	0x0800b749
 800b6a4:	0800b751 	.word	0x0800b751
 800b6a8:	0800b759 	.word	0x0800b759
 800b6ac:	0800b761 	.word	0x0800b761
 800b6b0:	0800b76b 	.word	0x0800b76b
 800b6b4:	0800b775 	.word	0x0800b775
 800b6b8:	0800b77f 	.word	0x0800b77f
 800b6bc:	0800b789 	.word	0x0800b789
 800b6c0:	0800b793 	.word	0x0800b793
 800b6c4:	0800b79d 	.word	0x0800b79d
 800b6c8:	0800b7a7 	.word	0x0800b7a7
 800b6cc:	0800b7b1 	.word	0x0800b7b1
 800b6d0:	0800b7bb 	.word	0x0800b7bb
 800b6d4:	0800b7c5 	.word	0x0800b7c5
 800b6d8:	0800b7cf 	.word	0x0800b7cf
 800b6dc:	0800b7d9 	.word	0x0800b7d9
 800b6e0:	0800b7e3 	.word	0x0800b7e3
 800b6e4:	0800b7ed 	.word	0x0800b7ed
 800b6e8:	0800b7f7 	.word	0x0800b7f7
 800b6ec:	0800b801 	.word	0x0800b801
 800b6f0:	0800b80b 	.word	0x0800b80b
 800b6f4:	0800b815 	.word	0x0800b815
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b6fe:	e0f7      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b706:	e0f3      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b70e:	e0ef      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b716:	e0eb      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b71e:	e0e7      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b726:	e0e3      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b72e:	e0df      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b736:	e0db      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b73e:	e0d7      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b746:	e0d3      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b74e:	e0cf      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b756:	e0cb      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b75e:	e0c7      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b768:	e0c2      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b772:	e0bd      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800b77c:	e0b8      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800b786:	e0b3      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800b790:	e0ae      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b79a:	e0a9      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b7a4:	e0a4      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b7ae:	e09f      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b7b8:	e09a      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b7c2:	e095      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b7cc:	e090      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b7d6:	e08b      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b7e0:	e086      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b7ea:	e081      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b7f4:	e07c      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b7fe:	e077      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800b808:	e072      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b812:	e06d      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b81c:	e068      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	75fb      	strb	r3, [r7, #23]
        break;
 800b822:	e065      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d15d      	bne.n	800b8ec <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800b830:	7afb      	ldrb	r3, [r7, #11]
 800b832:	2b0d      	cmp	r3, #13
 800b834:	d857      	bhi.n	800b8e6 <HAL_TIM_RegisterCallback+0x2a6>
 800b836:	a201      	add	r2, pc, #4	@ (adr r2, 800b83c <HAL_TIM_RegisterCallback+0x1fc>)
 800b838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b83c:	0800b875 	.word	0x0800b875
 800b840:	0800b87d 	.word	0x0800b87d
 800b844:	0800b885 	.word	0x0800b885
 800b848:	0800b88d 	.word	0x0800b88d
 800b84c:	0800b895 	.word	0x0800b895
 800b850:	0800b89d 	.word	0x0800b89d
 800b854:	0800b8a5 	.word	0x0800b8a5
 800b858:	0800b8ad 	.word	0x0800b8ad
 800b85c:	0800b8b5 	.word	0x0800b8b5
 800b860:	0800b8bd 	.word	0x0800b8bd
 800b864:	0800b8c5 	.word	0x0800b8c5
 800b868:	0800b8cd 	.word	0x0800b8cd
 800b86c:	0800b8d5 	.word	0x0800b8d5
 800b870:	0800b8dd 	.word	0x0800b8dd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b87a:	e039      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b882:	e035      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b88a:	e031      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b892:	e02d      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b89a:	e029      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b8a2:	e025      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b8aa:	e021      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b8b2:	e01d      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b8ba:	e019      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b8c2:	e015      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b8ca:	e011      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b8d2:	e00d      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b8da:	e009      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b8e4:	e004      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	75fb      	strb	r3, [r7, #23]
        break;
 800b8ea:	e001      	b.n	800b8f0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b8f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	371c      	adds	r7, #28
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop

0800b900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b900:	b480      	push	{r7}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a42      	ldr	r2, [pc, #264]	@ (800ba1c <TIM_Base_SetConfig+0x11c>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d00f      	beq.n	800b938 <TIM_Base_SetConfig+0x38>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b91e:	d00b      	beq.n	800b938 <TIM_Base_SetConfig+0x38>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a3f      	ldr	r2, [pc, #252]	@ (800ba20 <TIM_Base_SetConfig+0x120>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d007      	beq.n	800b938 <TIM_Base_SetConfig+0x38>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a3e      	ldr	r2, [pc, #248]	@ (800ba24 <TIM_Base_SetConfig+0x124>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d003      	beq.n	800b938 <TIM_Base_SetConfig+0x38>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a3d      	ldr	r2, [pc, #244]	@ (800ba28 <TIM_Base_SetConfig+0x128>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d108      	bne.n	800b94a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b93e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	4313      	orrs	r3, r2
 800b948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a33      	ldr	r2, [pc, #204]	@ (800ba1c <TIM_Base_SetConfig+0x11c>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d01b      	beq.n	800b98a <TIM_Base_SetConfig+0x8a>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b958:	d017      	beq.n	800b98a <TIM_Base_SetConfig+0x8a>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a30      	ldr	r2, [pc, #192]	@ (800ba20 <TIM_Base_SetConfig+0x120>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d013      	beq.n	800b98a <TIM_Base_SetConfig+0x8a>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a2f      	ldr	r2, [pc, #188]	@ (800ba24 <TIM_Base_SetConfig+0x124>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d00f      	beq.n	800b98a <TIM_Base_SetConfig+0x8a>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a2e      	ldr	r2, [pc, #184]	@ (800ba28 <TIM_Base_SetConfig+0x128>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d00b      	beq.n	800b98a <TIM_Base_SetConfig+0x8a>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a2d      	ldr	r2, [pc, #180]	@ (800ba2c <TIM_Base_SetConfig+0x12c>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d007      	beq.n	800b98a <TIM_Base_SetConfig+0x8a>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a2c      	ldr	r2, [pc, #176]	@ (800ba30 <TIM_Base_SetConfig+0x130>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d003      	beq.n	800b98a <TIM_Base_SetConfig+0x8a>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a2b      	ldr	r2, [pc, #172]	@ (800ba34 <TIM_Base_SetConfig+0x134>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d108      	bne.n	800b99c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	4313      	orrs	r3, r2
 800b99a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a16      	ldr	r2, [pc, #88]	@ (800ba1c <TIM_Base_SetConfig+0x11c>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d00f      	beq.n	800b9e8 <TIM_Base_SetConfig+0xe8>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a17      	ldr	r2, [pc, #92]	@ (800ba28 <TIM_Base_SetConfig+0x128>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d00b      	beq.n	800b9e8 <TIM_Base_SetConfig+0xe8>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a16      	ldr	r2, [pc, #88]	@ (800ba2c <TIM_Base_SetConfig+0x12c>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d007      	beq.n	800b9e8 <TIM_Base_SetConfig+0xe8>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4a15      	ldr	r2, [pc, #84]	@ (800ba30 <TIM_Base_SetConfig+0x130>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d003      	beq.n	800b9e8 <TIM_Base_SetConfig+0xe8>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a14      	ldr	r2, [pc, #80]	@ (800ba34 <TIM_Base_SetConfig+0x134>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d103      	bne.n	800b9f0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	691a      	ldr	r2, [r3, #16]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	691b      	ldr	r3, [r3, #16]
 800b9fa:	f003 0301 	and.w	r3, r3, #1
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d105      	bne.n	800ba0e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	f023 0201 	bic.w	r2, r3, #1
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	611a      	str	r2, [r3, #16]
  }
}
 800ba0e:	bf00      	nop
 800ba10:	3714      	adds	r7, #20
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop
 800ba1c:	40012c00 	.word	0x40012c00
 800ba20:	40000400 	.word	0x40000400
 800ba24:	40000800 	.word	0x40000800
 800ba28:	40013400 	.word	0x40013400
 800ba2c:	40014000 	.word	0x40014000
 800ba30:	40014400 	.word	0x40014400
 800ba34:	40014800 	.word	0x40014800

0800ba38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a1b      	ldr	r3, [r3, #32]
 800ba4c:	f023 0201 	bic.w	r2, r3, #1
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	699b      	ldr	r3, [r3, #24]
 800ba5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f023 0303 	bic.w	r3, r3, #3
 800ba72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f023 0302 	bic.w	r3, r3, #2
 800ba84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	697a      	ldr	r2, [r7, #20]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a2c      	ldr	r2, [pc, #176]	@ (800bb44 <TIM_OC1_SetConfig+0x10c>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d00f      	beq.n	800bab8 <TIM_OC1_SetConfig+0x80>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a2b      	ldr	r2, [pc, #172]	@ (800bb48 <TIM_OC1_SetConfig+0x110>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d00b      	beq.n	800bab8 <TIM_OC1_SetConfig+0x80>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a2a      	ldr	r2, [pc, #168]	@ (800bb4c <TIM_OC1_SetConfig+0x114>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d007      	beq.n	800bab8 <TIM_OC1_SetConfig+0x80>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a29      	ldr	r2, [pc, #164]	@ (800bb50 <TIM_OC1_SetConfig+0x118>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d003      	beq.n	800bab8 <TIM_OC1_SetConfig+0x80>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a28      	ldr	r2, [pc, #160]	@ (800bb54 <TIM_OC1_SetConfig+0x11c>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d10c      	bne.n	800bad2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f023 0308 	bic.w	r3, r3, #8
 800babe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	697a      	ldr	r2, [r7, #20]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f023 0304 	bic.w	r3, r3, #4
 800bad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a1b      	ldr	r2, [pc, #108]	@ (800bb44 <TIM_OC1_SetConfig+0x10c>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d00f      	beq.n	800bafa <TIM_OC1_SetConfig+0xc2>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a1a      	ldr	r2, [pc, #104]	@ (800bb48 <TIM_OC1_SetConfig+0x110>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d00b      	beq.n	800bafa <TIM_OC1_SetConfig+0xc2>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a19      	ldr	r2, [pc, #100]	@ (800bb4c <TIM_OC1_SetConfig+0x114>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d007      	beq.n	800bafa <TIM_OC1_SetConfig+0xc2>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a18      	ldr	r2, [pc, #96]	@ (800bb50 <TIM_OC1_SetConfig+0x118>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d003      	beq.n	800bafa <TIM_OC1_SetConfig+0xc2>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a17      	ldr	r2, [pc, #92]	@ (800bb54 <TIM_OC1_SetConfig+0x11c>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d111      	bne.n	800bb1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bb08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	695b      	ldr	r3, [r3, #20]
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	693a      	ldr	r2, [r7, #16]
 800bb22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	621a      	str	r2, [r3, #32]
}
 800bb38:	bf00      	nop
 800bb3a:	371c      	adds	r7, #28
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	40012c00 	.word	0x40012c00
 800bb48:	40013400 	.word	0x40013400
 800bb4c:	40014000 	.word	0x40014000
 800bb50:	40014400 	.word	0x40014400
 800bb54:	40014800 	.word	0x40014800

0800bb58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b087      	sub	sp, #28
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a1b      	ldr	r3, [r3, #32]
 800bb6c:	f023 0210 	bic.w	r2, r3, #16
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	699b      	ldr	r3, [r3, #24]
 800bb7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	021b      	lsls	r3, r3, #8
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	f023 0320 	bic.w	r3, r3, #32
 800bba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	011b      	lsls	r3, r3, #4
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a28      	ldr	r2, [pc, #160]	@ (800bc58 <TIM_OC2_SetConfig+0x100>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d003      	beq.n	800bbc4 <TIM_OC2_SetConfig+0x6c>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a27      	ldr	r2, [pc, #156]	@ (800bc5c <TIM_OC2_SetConfig+0x104>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d10d      	bne.n	800bbe0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	011b      	lsls	r3, r3, #4
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4a1d      	ldr	r2, [pc, #116]	@ (800bc58 <TIM_OC2_SetConfig+0x100>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d00f      	beq.n	800bc08 <TIM_OC2_SetConfig+0xb0>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4a1c      	ldr	r2, [pc, #112]	@ (800bc5c <TIM_OC2_SetConfig+0x104>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d00b      	beq.n	800bc08 <TIM_OC2_SetConfig+0xb0>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a1b      	ldr	r2, [pc, #108]	@ (800bc60 <TIM_OC2_SetConfig+0x108>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d007      	beq.n	800bc08 <TIM_OC2_SetConfig+0xb0>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	4a1a      	ldr	r2, [pc, #104]	@ (800bc64 <TIM_OC2_SetConfig+0x10c>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d003      	beq.n	800bc08 <TIM_OC2_SetConfig+0xb0>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4a19      	ldr	r2, [pc, #100]	@ (800bc68 <TIM_OC2_SetConfig+0x110>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d113      	bne.n	800bc30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bc0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bc16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	695b      	ldr	r3, [r3, #20]
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	693a      	ldr	r2, [r7, #16]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	693a      	ldr	r2, [r7, #16]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	693a      	ldr	r2, [r7, #16]
 800bc34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	685a      	ldr	r2, [r3, #4]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	697a      	ldr	r2, [r7, #20]
 800bc48:	621a      	str	r2, [r3, #32]
}
 800bc4a:	bf00      	nop
 800bc4c:	371c      	adds	r7, #28
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	40012c00 	.word	0x40012c00
 800bc5c:	40013400 	.word	0x40013400
 800bc60:	40014000 	.word	0x40014000
 800bc64:	40014400 	.word	0x40014400
 800bc68:	40014800 	.word	0x40014800

0800bc6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b087      	sub	sp, #28
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6a1b      	ldr	r3, [r3, #32]
 800bc7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a1b      	ldr	r3, [r3, #32]
 800bc80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	69db      	ldr	r3, [r3, #28]
 800bc92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f023 0303 	bic.w	r3, r3, #3
 800bca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bcb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	021b      	lsls	r3, r3, #8
 800bcc0:	697a      	ldr	r2, [r7, #20]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a27      	ldr	r2, [pc, #156]	@ (800bd68 <TIM_OC3_SetConfig+0xfc>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d003      	beq.n	800bcd6 <TIM_OC3_SetConfig+0x6a>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a26      	ldr	r2, [pc, #152]	@ (800bd6c <TIM_OC3_SetConfig+0x100>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d10d      	bne.n	800bcf2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bcdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	021b      	lsls	r3, r3, #8
 800bce4:	697a      	ldr	r2, [r7, #20]
 800bce6:	4313      	orrs	r3, r2
 800bce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bcf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a1c      	ldr	r2, [pc, #112]	@ (800bd68 <TIM_OC3_SetConfig+0xfc>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d00f      	beq.n	800bd1a <TIM_OC3_SetConfig+0xae>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a1b      	ldr	r2, [pc, #108]	@ (800bd6c <TIM_OC3_SetConfig+0x100>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d00b      	beq.n	800bd1a <TIM_OC3_SetConfig+0xae>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a1a      	ldr	r2, [pc, #104]	@ (800bd70 <TIM_OC3_SetConfig+0x104>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d007      	beq.n	800bd1a <TIM_OC3_SetConfig+0xae>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a19      	ldr	r2, [pc, #100]	@ (800bd74 <TIM_OC3_SetConfig+0x108>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d003      	beq.n	800bd1a <TIM_OC3_SetConfig+0xae>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a18      	ldr	r2, [pc, #96]	@ (800bd78 <TIM_OC3_SetConfig+0x10c>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d113      	bne.n	800bd42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bd28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	695b      	ldr	r3, [r3, #20]
 800bd2e:	011b      	lsls	r3, r3, #4
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	699b      	ldr	r3, [r3, #24]
 800bd3a:	011b      	lsls	r3, r3, #4
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	693a      	ldr	r2, [r7, #16]
 800bd46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	685a      	ldr	r2, [r3, #4]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	697a      	ldr	r2, [r7, #20]
 800bd5a:	621a      	str	r2, [r3, #32]
}
 800bd5c:	bf00      	nop
 800bd5e:	371c      	adds	r7, #28
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	40012c00 	.word	0x40012c00
 800bd6c:	40013400 	.word	0x40013400
 800bd70:	40014000 	.word	0x40014000
 800bd74:	40014400 	.word	0x40014400
 800bd78:	40014800 	.word	0x40014800

0800bd7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b087      	sub	sp, #28
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a1b      	ldr	r3, [r3, #32]
 800bd8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6a1b      	ldr	r3, [r3, #32]
 800bd90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	69db      	ldr	r3, [r3, #28]
 800bda2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bdaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bdb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	021b      	lsls	r3, r3, #8
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bdca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	031b      	lsls	r3, r3, #12
 800bdd2:	697a      	ldr	r2, [r7, #20]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4a28      	ldr	r2, [pc, #160]	@ (800be7c <TIM_OC4_SetConfig+0x100>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d003      	beq.n	800bde8 <TIM_OC4_SetConfig+0x6c>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a27      	ldr	r2, [pc, #156]	@ (800be80 <TIM_OC4_SetConfig+0x104>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d10d      	bne.n	800be04 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bdee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	031b      	lsls	r3, r3, #12
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a1d      	ldr	r2, [pc, #116]	@ (800be7c <TIM_OC4_SetConfig+0x100>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d00f      	beq.n	800be2c <TIM_OC4_SetConfig+0xb0>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a1c      	ldr	r2, [pc, #112]	@ (800be80 <TIM_OC4_SetConfig+0x104>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d00b      	beq.n	800be2c <TIM_OC4_SetConfig+0xb0>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4a1b      	ldr	r2, [pc, #108]	@ (800be84 <TIM_OC4_SetConfig+0x108>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d007      	beq.n	800be2c <TIM_OC4_SetConfig+0xb0>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4a1a      	ldr	r2, [pc, #104]	@ (800be88 <TIM_OC4_SetConfig+0x10c>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d003      	beq.n	800be2c <TIM_OC4_SetConfig+0xb0>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4a19      	ldr	r2, [pc, #100]	@ (800be8c <TIM_OC4_SetConfig+0x110>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d113      	bne.n	800be54 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be32:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800be3a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	695b      	ldr	r3, [r3, #20]
 800be40:	019b      	lsls	r3, r3, #6
 800be42:	693a      	ldr	r2, [r7, #16]
 800be44:	4313      	orrs	r3, r2
 800be46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	019b      	lsls	r3, r3, #6
 800be4e:	693a      	ldr	r2, [r7, #16]
 800be50:	4313      	orrs	r3, r2
 800be52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	685a      	ldr	r2, [r3, #4]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	621a      	str	r2, [r3, #32]
}
 800be6e:	bf00      	nop
 800be70:	371c      	adds	r7, #28
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop
 800be7c:	40012c00 	.word	0x40012c00
 800be80:	40013400 	.word	0x40013400
 800be84:	40014000 	.word	0x40014000
 800be88:	40014400 	.word	0x40014400
 800be8c:	40014800 	.word	0x40014800

0800be90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be90:	b480      	push	{r7}
 800be92:	b087      	sub	sp, #28
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6a1b      	ldr	r3, [r3, #32]
 800bea4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800beb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	4313      	orrs	r3, r2
 800becc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bed4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	041b      	lsls	r3, r3, #16
 800bedc:	693a      	ldr	r2, [r7, #16]
 800bede:	4313      	orrs	r3, r2
 800bee0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a17      	ldr	r2, [pc, #92]	@ (800bf44 <TIM_OC5_SetConfig+0xb4>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d00f      	beq.n	800bf0a <TIM_OC5_SetConfig+0x7a>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4a16      	ldr	r2, [pc, #88]	@ (800bf48 <TIM_OC5_SetConfig+0xb8>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d00b      	beq.n	800bf0a <TIM_OC5_SetConfig+0x7a>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4a15      	ldr	r2, [pc, #84]	@ (800bf4c <TIM_OC5_SetConfig+0xbc>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d007      	beq.n	800bf0a <TIM_OC5_SetConfig+0x7a>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a14      	ldr	r2, [pc, #80]	@ (800bf50 <TIM_OC5_SetConfig+0xc0>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d003      	beq.n	800bf0a <TIM_OC5_SetConfig+0x7a>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a13      	ldr	r2, [pc, #76]	@ (800bf54 <TIM_OC5_SetConfig+0xc4>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d109      	bne.n	800bf1e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	695b      	ldr	r3, [r3, #20]
 800bf16:	021b      	lsls	r3, r3, #8
 800bf18:	697a      	ldr	r2, [r7, #20]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	697a      	ldr	r2, [r7, #20]
 800bf22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	685a      	ldr	r2, [r3, #4]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	621a      	str	r2, [r3, #32]
}
 800bf38:	bf00      	nop
 800bf3a:	371c      	adds	r7, #28
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr
 800bf44:	40012c00 	.word	0x40012c00
 800bf48:	40013400 	.word	0x40013400
 800bf4c:	40014000 	.word	0x40014000
 800bf50:	40014400 	.word	0x40014400
 800bf54:	40014800 	.word	0x40014800

0800bf58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b087      	sub	sp, #28
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6a1b      	ldr	r3, [r3, #32]
 800bf6c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bf86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	021b      	lsls	r3, r3, #8
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bf9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	051b      	lsls	r3, r3, #20
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4a18      	ldr	r2, [pc, #96]	@ (800c010 <TIM_OC6_SetConfig+0xb8>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d00f      	beq.n	800bfd4 <TIM_OC6_SetConfig+0x7c>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	4a17      	ldr	r2, [pc, #92]	@ (800c014 <TIM_OC6_SetConfig+0xbc>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d00b      	beq.n	800bfd4 <TIM_OC6_SetConfig+0x7c>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	4a16      	ldr	r2, [pc, #88]	@ (800c018 <TIM_OC6_SetConfig+0xc0>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d007      	beq.n	800bfd4 <TIM_OC6_SetConfig+0x7c>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a15      	ldr	r2, [pc, #84]	@ (800c01c <TIM_OC6_SetConfig+0xc4>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d003      	beq.n	800bfd4 <TIM_OC6_SetConfig+0x7c>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a14      	ldr	r2, [pc, #80]	@ (800c020 <TIM_OC6_SetConfig+0xc8>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d109      	bne.n	800bfe8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bfda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	695b      	ldr	r3, [r3, #20]
 800bfe0:	029b      	lsls	r3, r3, #10
 800bfe2:	697a      	ldr	r2, [r7, #20]
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	685a      	ldr	r2, [r3, #4]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	693a      	ldr	r2, [r7, #16]
 800c000:	621a      	str	r2, [r3, #32]
}
 800c002:	bf00      	nop
 800c004:	371c      	adds	r7, #28
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	40012c00 	.word	0x40012c00
 800c014:	40013400 	.word	0x40013400
 800c018:	40014000 	.word	0x40014000
 800c01c:	40014400 	.word	0x40014400
 800c020:	40014800 	.word	0x40014800

0800c024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c024:	b480      	push	{r7}
 800c026:	b087      	sub	sp, #28
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6a1b      	ldr	r3, [r3, #32]
 800c034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6a1b      	ldr	r3, [r3, #32]
 800c03a:	f023 0201 	bic.w	r2, r3, #1
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c04e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	011b      	lsls	r3, r3, #4
 800c054:	693a      	ldr	r2, [r7, #16]
 800c056:	4313      	orrs	r3, r2
 800c058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	f023 030a 	bic.w	r3, r3, #10
 800c060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c062:	697a      	ldr	r2, [r7, #20]
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	4313      	orrs	r3, r2
 800c068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	693a      	ldr	r2, [r7, #16]
 800c06e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	621a      	str	r2, [r3, #32]
}
 800c076:	bf00      	nop
 800c078:	371c      	adds	r7, #28
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c082:	b480      	push	{r7}
 800c084:	b087      	sub	sp, #28
 800c086:	af00      	add	r7, sp, #0
 800c088:	60f8      	str	r0, [r7, #12]
 800c08a:	60b9      	str	r1, [r7, #8]
 800c08c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	f023 0210 	bic.w	r2, r3, #16
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c0ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	031b      	lsls	r3, r3, #12
 800c0b2:	693a      	ldr	r2, [r7, #16]
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c0be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	011b      	lsls	r3, r3, #4
 800c0c4:	697a      	ldr	r2, [r7, #20]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	693a      	ldr	r2, [r7, #16]
 800c0ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	697a      	ldr	r2, [r7, #20]
 800c0d4:	621a      	str	r2, [r3, #32]
}
 800c0d6:	bf00      	nop
 800c0d8:	371c      	adds	r7, #28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr

0800c0e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c0e2:	b480      	push	{r7}
 800c0e4:	b085      	sub	sp, #20
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c0f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c0fe:	683a      	ldr	r2, [r7, #0]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	4313      	orrs	r3, r2
 800c104:	f043 0307 	orr.w	r3, r3, #7
 800c108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	609a      	str	r2, [r3, #8]
}
 800c110:	bf00      	nop
 800c112:	3714      	adds	r7, #20
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b087      	sub	sp, #28
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
 800c128:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c136:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	021a      	lsls	r2, r3, #8
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	431a      	orrs	r2, r3
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	4313      	orrs	r3, r2
 800c144:	697a      	ldr	r2, [r7, #20]
 800c146:	4313      	orrs	r3, r2
 800c148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	697a      	ldr	r2, [r7, #20]
 800c14e:	609a      	str	r2, [r3, #8]
}
 800c150:	bf00      	nop
 800c152:	371c      	adds	r7, #28
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b087      	sub	sp, #28
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	f003 031f 	and.w	r3, r3, #31
 800c16e:	2201      	movs	r2, #1
 800c170:	fa02 f303 	lsl.w	r3, r2, r3
 800c174:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6a1a      	ldr	r2, [r3, #32]
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	43db      	mvns	r3, r3
 800c17e:	401a      	ands	r2, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6a1a      	ldr	r2, [r3, #32]
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	f003 031f 	and.w	r3, r3, #31
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	fa01 f303 	lsl.w	r3, r1, r3
 800c194:	431a      	orrs	r2, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	621a      	str	r2, [r3, #32]
}
 800c19a:	bf00      	nop
 800c19c:	371c      	adds	r7, #28
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
	...

0800c1a8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a26      	ldr	r2, [pc, #152]	@ (800c24c <TIM_ResetCallback+0xa4>)
 800c1b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4a25      	ldr	r2, [pc, #148]	@ (800c250 <TIM_ResetCallback+0xa8>)
 800c1bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a24      	ldr	r2, [pc, #144]	@ (800c254 <TIM_ResetCallback+0xac>)
 800c1c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a23      	ldr	r2, [pc, #140]	@ (800c258 <TIM_ResetCallback+0xb0>)
 800c1cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4a22      	ldr	r2, [pc, #136]	@ (800c25c <TIM_ResetCallback+0xb4>)
 800c1d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4a21      	ldr	r2, [pc, #132]	@ (800c260 <TIM_ResetCallback+0xb8>)
 800c1dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4a20      	ldr	r2, [pc, #128]	@ (800c264 <TIM_ResetCallback+0xbc>)
 800c1e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a1f      	ldr	r2, [pc, #124]	@ (800c268 <TIM_ResetCallback+0xc0>)
 800c1ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4a1e      	ldr	r2, [pc, #120]	@ (800c26c <TIM_ResetCallback+0xc4>)
 800c1f4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a1d      	ldr	r2, [pc, #116]	@ (800c270 <TIM_ResetCallback+0xc8>)
 800c1fc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a1c      	ldr	r2, [pc, #112]	@ (800c274 <TIM_ResetCallback+0xcc>)
 800c204:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a1b      	ldr	r2, [pc, #108]	@ (800c278 <TIM_ResetCallback+0xd0>)
 800c20c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	4a1a      	ldr	r2, [pc, #104]	@ (800c27c <TIM_ResetCallback+0xd4>)
 800c214:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4a19      	ldr	r2, [pc, #100]	@ (800c280 <TIM_ResetCallback+0xd8>)
 800c21c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a18      	ldr	r2, [pc, #96]	@ (800c284 <TIM_ResetCallback+0xdc>)
 800c224:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a17      	ldr	r2, [pc, #92]	@ (800c288 <TIM_ResetCallback+0xe0>)
 800c22c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a16      	ldr	r2, [pc, #88]	@ (800c28c <TIM_ResetCallback+0xe4>)
 800c234:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a15      	ldr	r2, [pc, #84]	@ (800c290 <TIM_ResetCallback+0xe8>)
 800c23c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800c240:	bf00      	nop
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	08003f49 	.word	0x08003f49
 800c250:	0800b58d 	.word	0x0800b58d
 800c254:	0800b605 	.word	0x0800b605
 800c258:	0800b619 	.word	0x0800b619
 800c25c:	0800b5b5 	.word	0x0800b5b5
 800c260:	0800b5c9 	.word	0x0800b5c9
 800c264:	0800b5a1 	.word	0x0800b5a1
 800c268:	0800b5dd 	.word	0x0800b5dd
 800c26c:	0800b5f1 	.word	0x0800b5f1
 800c270:	0800b62d 	.word	0x0800b62d
 800c274:	0800c399 	.word	0x0800c399
 800c278:	0800c3ad 	.word	0x0800c3ad
 800c27c:	0800c3c1 	.word	0x0800c3c1
 800c280:	0800c3d5 	.word	0x0800c3d5
 800c284:	0800c3e9 	.word	0x0800c3e9
 800c288:	0800c3fd 	.word	0x0800c3fd
 800c28c:	0800c411 	.word	0x0800c411
 800c290:	0800c425 	.word	0x0800c425

0800c294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d101      	bne.n	800c2ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	e065      	b.n	800c378 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2202      	movs	r2, #2
 800c2b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a2c      	ldr	r2, [pc, #176]	@ (800c384 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d004      	beq.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a2b      	ldr	r2, [pc, #172]	@ (800c388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d108      	bne.n	800c2f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c2e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c2f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	4313      	orrs	r3, r2
 800c306:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a1b      	ldr	r2, [pc, #108]	@ (800c384 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d018      	beq.n	800c34c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c322:	d013      	beq.n	800c34c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a18      	ldr	r2, [pc, #96]	@ (800c38c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d00e      	beq.n	800c34c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a17      	ldr	r2, [pc, #92]	@ (800c390 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d009      	beq.n	800c34c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a12      	ldr	r2, [pc, #72]	@ (800c388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d004      	beq.n	800c34c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a13      	ldr	r2, [pc, #76]	@ (800c394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d10c      	bne.n	800c366 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c352:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	68ba      	ldr	r2, [r7, #8]
 800c35a:	4313      	orrs	r3, r2
 800c35c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3714      	adds	r7, #20
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr
 800c384:	40012c00 	.word	0x40012c00
 800c388:	40013400 	.word	0x40013400
 800c38c:	40000400 	.word	0x40000400
 800c390:	40000800 	.word	0x40000800
 800c394:	40014000 	.word	0x40014000

0800c398 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c3a0:	bf00      	nop
 800c3a2:	370c      	adds	r7, #12
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c3b4:	bf00      	nop
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c3f0:	bf00      	nop
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c404:	bf00      	nop
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c418:	bf00      	nop
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c42c:	bf00      	nop
 800c42e:	370c      	adds	r7, #12
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d101      	bne.n	800c44a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c446:	2301      	movs	r3, #1
 800c448:	e042      	b.n	800c4d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c450:	2b00      	cmp	r3, #0
 800c452:	d106      	bne.n	800c462 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7f8 fdd1 	bl	8005004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2224      	movs	r2, #36	@ 0x24
 800c466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f022 0201 	bic.w	r2, r2, #1
 800c478:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d002      	beq.n	800c488 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f001 f962 	bl	800d74c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 fe93 	bl	800d1b4 <UART_SetConfig>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b01      	cmp	r3, #1
 800c492:	d101      	bne.n	800c498 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e01b      	b.n	800c4d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	685a      	ldr	r2, [r3, #4]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c4a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	689a      	ldr	r2, [r3, #8]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c4b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f042 0201 	orr.w	r2, r2, #1
 800c4c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f001 f9e1 	bl	800d890 <UART_CheckIdleState>
 800c4ce:	4603      	mov	r3, r0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b08a      	sub	sp, #40	@ 0x28
 800c4dc:	af02      	add	r7, sp, #8
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	603b      	str	r3, [r7, #0]
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4ee:	2b20      	cmp	r3, #32
 800c4f0:	d17b      	bne.n	800c5ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <HAL_UART_Transmit+0x26>
 800c4f8:	88fb      	ldrh	r3, [r7, #6]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d101      	bne.n	800c502 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e074      	b.n	800c5ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2200      	movs	r2, #0
 800c506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2221      	movs	r2, #33	@ 0x21
 800c50e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c512:	f7f9 fd69 	bl	8005fe8 <HAL_GetTick>
 800c516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	88fa      	ldrh	r2, [r7, #6]
 800c51c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	88fa      	ldrh	r2, [r7, #6]
 800c524:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c530:	d108      	bne.n	800c544 <HAL_UART_Transmit+0x6c>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d104      	bne.n	800c544 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c53a:	2300      	movs	r3, #0
 800c53c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	61bb      	str	r3, [r7, #24]
 800c542:	e003      	b.n	800c54c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c548:	2300      	movs	r3, #0
 800c54a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c54c:	e030      	b.n	800c5b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	2200      	movs	r2, #0
 800c556:	2180      	movs	r1, #128	@ 0x80
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	f001 fa43 	bl	800d9e4 <UART_WaitOnFlagUntilTimeout>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d005      	beq.n	800c570 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2220      	movs	r2, #32
 800c568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c56c:	2303      	movs	r3, #3
 800c56e:	e03d      	b.n	800c5ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d10b      	bne.n	800c58e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	881b      	ldrh	r3, [r3, #0]
 800c57a:	461a      	mov	r2, r3
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c584:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	3302      	adds	r3, #2
 800c58a:	61bb      	str	r3, [r7, #24]
 800c58c:	e007      	b.n	800c59e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	781a      	ldrb	r2, [r3, #0]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	3301      	adds	r3, #1
 800c59c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	b29a      	uxth	r2, r3
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1c8      	bne.n	800c54e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	2140      	movs	r1, #64	@ 0x40
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f001 fa0c 	bl	800d9e4 <UART_WaitOnFlagUntilTimeout>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d005      	beq.n	800c5de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2220      	movs	r2, #32
 800c5d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c5da:	2303      	movs	r3, #3
 800c5dc:	e006      	b.n	800c5ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2220      	movs	r2, #32
 800c5e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	e000      	b.n	800c5ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c5ea:	2302      	movs	r3, #2
  }
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3720      	adds	r7, #32
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b08a      	sub	sp, #40	@ 0x28
 800c5f8:	af02      	add	r7, sp, #8
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	603b      	str	r3, [r7, #0]
 800c600:	4613      	mov	r3, r2
 800c602:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c60a:	2b20      	cmp	r3, #32
 800c60c:	f040 80b5 	bne.w	800c77a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d002      	beq.n	800c61c <HAL_UART_Receive+0x28>
 800c616:	88fb      	ldrh	r3, [r7, #6]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d101      	bne.n	800c620 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e0ad      	b.n	800c77c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2222      	movs	r2, #34	@ 0x22
 800c62c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2200      	movs	r2, #0
 800c634:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c636:	f7f9 fcd7 	bl	8005fe8 <HAL_GetTick>
 800c63a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	88fa      	ldrh	r2, [r7, #6]
 800c640:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	88fa      	ldrh	r2, [r7, #6]
 800c648:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c654:	d10e      	bne.n	800c674 <HAL_UART_Receive+0x80>
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d105      	bne.n	800c66a <HAL_UART_Receive+0x76>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c664:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c668:	e02d      	b.n	800c6c6 <HAL_UART_Receive+0xd2>
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	22ff      	movs	r2, #255	@ 0xff
 800c66e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c672:	e028      	b.n	800c6c6 <HAL_UART_Receive+0xd2>
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10d      	bne.n	800c698 <HAL_UART_Receive+0xa4>
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d104      	bne.n	800c68e <HAL_UART_Receive+0x9a>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	22ff      	movs	r2, #255	@ 0xff
 800c688:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c68c:	e01b      	b.n	800c6c6 <HAL_UART_Receive+0xd2>
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	227f      	movs	r2, #127	@ 0x7f
 800c692:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c696:	e016      	b.n	800c6c6 <HAL_UART_Receive+0xd2>
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6a0:	d10d      	bne.n	800c6be <HAL_UART_Receive+0xca>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d104      	bne.n	800c6b4 <HAL_UART_Receive+0xc0>
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	227f      	movs	r2, #127	@ 0x7f
 800c6ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c6b2:	e008      	b.n	800c6c6 <HAL_UART_Receive+0xd2>
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	223f      	movs	r2, #63	@ 0x3f
 800c6b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c6bc:	e003      	b.n	800c6c6 <HAL_UART_Receive+0xd2>
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c6cc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6d6:	d108      	bne.n	800c6ea <HAL_UART_Receive+0xf6>
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d104      	bne.n	800c6ea <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	61bb      	str	r3, [r7, #24]
 800c6e8:	e003      	b.n	800c6f2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c6f2:	e036      	b.n	800c762 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	2120      	movs	r1, #32
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f001 f970 	bl	800d9e4 <UART_WaitOnFlagUntilTimeout>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d005      	beq.n	800c716 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2220      	movs	r2, #32
 800c70e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800c712:	2303      	movs	r3, #3
 800c714:	e032      	b.n	800c77c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d10c      	bne.n	800c736 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c722:	b29a      	uxth	r2, r3
 800c724:	8a7b      	ldrh	r3, [r7, #18]
 800c726:	4013      	ands	r3, r2
 800c728:	b29a      	uxth	r2, r3
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	3302      	adds	r3, #2
 800c732:	61bb      	str	r3, [r7, #24]
 800c734:	e00c      	b.n	800c750 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c73c:	b2da      	uxtb	r2, r3
 800c73e:	8a7b      	ldrh	r3, [r7, #18]
 800c740:	b2db      	uxtb	r3, r3
 800c742:	4013      	ands	r3, r2
 800c744:	b2da      	uxtb	r2, r3
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	3301      	adds	r3, #1
 800c74e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c756:	b29b      	uxth	r3, r3
 800c758:	3b01      	subs	r3, #1
 800c75a:	b29a      	uxth	r2, r3
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c768:	b29b      	uxth	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1c2      	bne.n	800c6f4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2220      	movs	r2, #32
 800c772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800c776:	2300      	movs	r3, #0
 800c778:	e000      	b.n	800c77c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800c77a:	2302      	movs	r3, #2
  }
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3720      	adds	r7, #32
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c784:	b480      	push	{r7}
 800c786:	b091      	sub	sp, #68	@ 0x44
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	4613      	mov	r3, r2
 800c790:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c798:	2b20      	cmp	r3, #32
 800c79a:	d178      	bne.n	800c88e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d002      	beq.n	800c7a8 <HAL_UART_Transmit_IT+0x24>
 800c7a2:	88fb      	ldrh	r3, [r7, #6]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d101      	bne.n	800c7ac <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e071      	b.n	800c890 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	88fa      	ldrh	r2, [r7, #6]
 800c7b6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	88fa      	ldrh	r2, [r7, #6]
 800c7be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2221      	movs	r2, #33	@ 0x21
 800c7d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7e0:	d12a      	bne.n	800c838 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7ea:	d107      	bne.n	800c7fc <HAL_UART_Transmit_IT+0x78>
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	691b      	ldr	r3, [r3, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d103      	bne.n	800c7fc <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	4a29      	ldr	r2, [pc, #164]	@ (800c89c <HAL_UART_Transmit_IT+0x118>)
 800c7f8:	679a      	str	r2, [r3, #120]	@ 0x78
 800c7fa:	e002      	b.n	800c802 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	4a28      	ldr	r2, [pc, #160]	@ (800c8a0 <HAL_UART_Transmit_IT+0x11c>)
 800c800:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	3308      	adds	r3, #8
 800c808:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80c:	e853 3f00 	ldrex	r3, [r3]
 800c810:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c814:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c818:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	3308      	adds	r3, #8
 800c820:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c822:	637a      	str	r2, [r7, #52]	@ 0x34
 800c824:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c826:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c828:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c82a:	e841 2300 	strex	r3, r2, [r1]
 800c82e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1e5      	bne.n	800c802 <HAL_UART_Transmit_IT+0x7e>
 800c836:	e028      	b.n	800c88a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c840:	d107      	bne.n	800c852 <HAL_UART_Transmit_IT+0xce>
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d103      	bne.n	800c852 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	4a15      	ldr	r2, [pc, #84]	@ (800c8a4 <HAL_UART_Transmit_IT+0x120>)
 800c84e:	679a      	str	r2, [r3, #120]	@ 0x78
 800c850:	e002      	b.n	800c858 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	4a14      	ldr	r2, [pc, #80]	@ (800c8a8 <HAL_UART_Transmit_IT+0x124>)
 800c856:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	e853 3f00 	ldrex	r3, [r3]
 800c864:	613b      	str	r3, [r7, #16]
   return(result);
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	461a      	mov	r2, r3
 800c874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c876:	623b      	str	r3, [r7, #32]
 800c878:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c87a:	69f9      	ldr	r1, [r7, #28]
 800c87c:	6a3a      	ldr	r2, [r7, #32]
 800c87e:	e841 2300 	strex	r3, r2, [r1]
 800c882:	61bb      	str	r3, [r7, #24]
   return(result);
 800c884:	69bb      	ldr	r3, [r7, #24]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1e6      	bne.n	800c858 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800c88a:	2300      	movs	r3, #0
 800c88c:	e000      	b.n	800c890 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800c88e:	2302      	movs	r3, #2
  }
}
 800c890:	4618      	mov	r0, r3
 800c892:	3744      	adds	r7, #68	@ 0x44
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr
 800c89c:	0800e4c5 	.word	0x0800e4c5
 800c8a0:	0800e3e5 	.word	0x0800e3e5
 800c8a4:	0800e323 	.word	0x0800e323
 800c8a8:	0800e26b 	.word	0x0800e26b

0800c8ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08a      	sub	sp, #40	@ 0x28
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8c0:	2b20      	cmp	r3, #32
 800c8c2:	d137      	bne.n	800c934 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d002      	beq.n	800c8d0 <HAL_UART_Receive_IT+0x24>
 800c8ca:	88fb      	ldrh	r3, [r7, #6]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d101      	bne.n	800c8d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e030      	b.n	800c936 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a18      	ldr	r2, [pc, #96]	@ (800c940 <HAL_UART_Receive_IT+0x94>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d01f      	beq.n	800c924 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d018      	beq.n	800c924 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	e853 3f00 	ldrex	r3, [r3]
 800c8fe:	613b      	str	r3, [r7, #16]
   return(result);
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c906:	627b      	str	r3, [r7, #36]	@ 0x24
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	461a      	mov	r2, r3
 800c90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c910:	623b      	str	r3, [r7, #32]
 800c912:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c914:	69f9      	ldr	r1, [r7, #28]
 800c916:	6a3a      	ldr	r2, [r7, #32]
 800c918:	e841 2300 	strex	r3, r2, [r1]
 800c91c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1e6      	bne.n	800c8f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c924:	88fb      	ldrh	r3, [r7, #6]
 800c926:	461a      	mov	r2, r3
 800c928:	68b9      	ldr	r1, [r7, #8]
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f001 f8c8 	bl	800dac0 <UART_Start_Receive_IT>
 800c930:	4603      	mov	r3, r0
 800c932:	e000      	b.n	800c936 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c934:	2302      	movs	r3, #2
  }
}
 800c936:	4618      	mov	r0, r3
 800c938:	3728      	adds	r7, #40	@ 0x28
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	40008000 	.word	0x40008000

0800c944 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b08a      	sub	sp, #40	@ 0x28
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	4613      	mov	r3, r2
 800c950:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c958:	2b20      	cmp	r3, #32
 800c95a:	d167      	bne.n	800ca2c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d002      	beq.n	800c968 <HAL_UART_Transmit_DMA+0x24>
 800c962:	88fb      	ldrh	r3, [r7, #6]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d101      	bne.n	800c96c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	e060      	b.n	800ca2e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	88fa      	ldrh	r2, [r7, #6]
 800c976:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	88fa      	ldrh	r2, [r7, #6]
 800c97e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2200      	movs	r2, #0
 800c986:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2221      	movs	r2, #33	@ 0x21
 800c98e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c996:	2b00      	cmp	r3, #0
 800c998:	d028      	beq.n	800c9ec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c99e:	4a26      	ldr	r2, [pc, #152]	@ (800ca38 <HAL_UART_Transmit_DMA+0xf4>)
 800c9a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c9a6:	4a25      	ldr	r2, [pc, #148]	@ (800ca3c <HAL_UART_Transmit_DMA+0xf8>)
 800c9a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c9ae:	4a24      	ldr	r2, [pc, #144]	@ (800ca40 <HAL_UART_Transmit_DMA+0xfc>)
 800c9b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	3328      	adds	r3, #40	@ 0x28
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	88fb      	ldrh	r3, [r7, #6]
 800c9ce:	f7fb fce1 	bl	8008394 <HAL_DMA_Start_IT>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d009      	beq.n	800c9ec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2210      	movs	r2, #16
 800c9dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2220      	movs	r2, #32
 800c9e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e020      	b.n	800ca2e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2240      	movs	r2, #64	@ 0x40
 800c9f2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	3308      	adds	r3, #8
 800c9fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	e853 3f00 	ldrex	r3, [r3]
 800ca02:	613b      	str	r3, [r7, #16]
   return(result);
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3308      	adds	r3, #8
 800ca12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca14:	623a      	str	r2, [r7, #32]
 800ca16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca18:	69f9      	ldr	r1, [r7, #28]
 800ca1a:	6a3a      	ldr	r2, [r7, #32]
 800ca1c:	e841 2300 	strex	r3, r2, [r1]
 800ca20:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1e5      	bne.n	800c9f4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	e000      	b.n	800ca2e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ca2c:	2302      	movs	r3, #2
  }
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3728      	adds	r7, #40	@ 0x28
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	0800df9f 	.word	0x0800df9f
 800ca3c:	0800e039 	.word	0x0800e039
 800ca40:	0800e1bf 	.word	0x0800e1bf

0800ca44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b08a      	sub	sp, #40	@ 0x28
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	4613      	mov	r3, r2
 800ca50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca58:	2b20      	cmp	r3, #32
 800ca5a:	d137      	bne.n	800cacc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d002      	beq.n	800ca68 <HAL_UART_Receive_DMA+0x24>
 800ca62:	88fb      	ldrh	r3, [r7, #6]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d101      	bne.n	800ca6c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e030      	b.n	800cace <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a18      	ldr	r2, [pc, #96]	@ (800cad8 <HAL_UART_Receive_DMA+0x94>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d01f      	beq.n	800cabc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d018      	beq.n	800cabc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	e853 3f00 	ldrex	r3, [r3]
 800ca96:	613b      	str	r3, [r7, #16]
   return(result);
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ca9e:	627b      	str	r3, [r7, #36]	@ 0x24
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	461a      	mov	r2, r3
 800caa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa8:	623b      	str	r3, [r7, #32]
 800caaa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caac:	69f9      	ldr	r1, [r7, #28]
 800caae:	6a3a      	ldr	r2, [r7, #32]
 800cab0:	e841 2300 	strex	r3, r2, [r1]
 800cab4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d1e6      	bne.n	800ca8a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cabc:	88fb      	ldrh	r3, [r7, #6]
 800cabe:	461a      	mov	r2, r3
 800cac0:	68b9      	ldr	r1, [r7, #8]
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f001 f91e 	bl	800dd04 <UART_Start_Receive_DMA>
 800cac8:	4603      	mov	r3, r0
 800caca:	e000      	b.n	800cace <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cacc:	2302      	movs	r3, #2
  }
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3728      	adds	r7, #40	@ 0x28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	40008000 	.word	0x40008000

0800cadc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b0ba      	sub	sp, #232	@ 0xe8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	69db      	ldr	r3, [r3, #28]
 800caea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cb02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cb06:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cb0a:	4013      	ands	r3, r2
 800cb0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cb10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d11b      	bne.n	800cb50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cb18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb1c:	f003 0320 	and.w	r3, r3, #32
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d015      	beq.n	800cb50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cb24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb28:	f003 0320 	and.w	r3, r3, #32
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d105      	bne.n	800cb3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cb30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d009      	beq.n	800cb50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f000 8300 	beq.w	800d146 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	4798      	blx	r3
      }
      return;
 800cb4e:	e2fa      	b.n	800d146 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cb50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f000 8123 	beq.w	800cda0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cb5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cb5e:	4b8d      	ldr	r3, [pc, #564]	@ (800cd94 <HAL_UART_IRQHandler+0x2b8>)
 800cb60:	4013      	ands	r3, r2
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d106      	bne.n	800cb74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cb66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cb6a:	4b8b      	ldr	r3, [pc, #556]	@ (800cd98 <HAL_UART_IRQHandler+0x2bc>)
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f000 8116 	beq.w	800cda0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb78:	f003 0301 	and.w	r3, r3, #1
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d011      	beq.n	800cba4 <HAL_UART_IRQHandler+0xc8>
 800cb80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00b      	beq.n	800cba4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2201      	movs	r2, #1
 800cb92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb9a:	f043 0201 	orr.w	r2, r3, #1
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cba8:	f003 0302 	and.w	r3, r3, #2
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d011      	beq.n	800cbd4 <HAL_UART_IRQHandler+0xf8>
 800cbb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbb4:	f003 0301 	and.w	r3, r3, #1
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00b      	beq.n	800cbd4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2202      	movs	r2, #2
 800cbc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbca:	f043 0204 	orr.w	r2, r3, #4
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cbd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbd8:	f003 0304 	and.w	r3, r3, #4
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d011      	beq.n	800cc04 <HAL_UART_IRQHandler+0x128>
 800cbe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbe4:	f003 0301 	and.w	r3, r3, #1
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00b      	beq.n	800cc04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2204      	movs	r2, #4
 800cbf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbfa:	f043 0202 	orr.w	r2, r3, #2
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc08:	f003 0308 	and.w	r3, r3, #8
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d017      	beq.n	800cc40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc14:	f003 0320 	and.w	r3, r3, #32
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d105      	bne.n	800cc28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cc1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cc20:	4b5c      	ldr	r3, [pc, #368]	@ (800cd94 <HAL_UART_IRQHandler+0x2b8>)
 800cc22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00b      	beq.n	800cc40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2208      	movs	r2, #8
 800cc2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc36:	f043 0208 	orr.w	r2, r3, #8
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cc40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d012      	beq.n	800cc72 <HAL_UART_IRQHandler+0x196>
 800cc4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00c      	beq.n	800cc72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cc60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc68:	f043 0220 	orr.w	r2, r3, #32
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f000 8266 	beq.w	800d14a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cc7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc82:	f003 0320 	and.w	r3, r3, #32
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d013      	beq.n	800ccb2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cc8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc8e:	f003 0320 	and.w	r3, r3, #32
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d105      	bne.n	800cca2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cc96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d007      	beq.n	800ccb2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d003      	beq.n	800ccb2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccb8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	689b      	ldr	r3, [r3, #8]
 800ccc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccc6:	2b40      	cmp	r3, #64	@ 0x40
 800ccc8:	d005      	beq.n	800ccd6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ccca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ccce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d054      	beq.n	800cd80 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f001 f8fb 	bl	800ded2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cce6:	2b40      	cmp	r3, #64	@ 0x40
 800cce8:	d146      	bne.n	800cd78 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	3308      	adds	r3, #8
 800ccf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ccf8:	e853 3f00 	ldrex	r3, [r3]
 800ccfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cd00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cd04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	3308      	adds	r3, #8
 800cd12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cd16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cd1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cd22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cd26:	e841 2300 	strex	r3, r2, [r1]
 800cd2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cd2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1d9      	bne.n	800ccea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d017      	beq.n	800cd70 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd46:	4a15      	ldr	r2, [pc, #84]	@ (800cd9c <HAL_UART_IRQHandler+0x2c0>)
 800cd48:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fb fbf3 	bl	800853c <HAL_DMA_Abort_IT>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d019      	beq.n	800cd90 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cd6a:	4610      	mov	r0, r2
 800cd6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd6e:	e00f      	b.n	800cd90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 fa09 	bl	800d188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd76:	e00b      	b.n	800cd90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 fa05 	bl	800d188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd7e:	e007      	b.n	800cd90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 fa01 	bl	800d188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cd8e:	e1dc      	b.n	800d14a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd90:	bf00      	nop
    return;
 800cd92:	e1da      	b.n	800d14a <HAL_UART_IRQHandler+0x66e>
 800cd94:	10000001 	.word	0x10000001
 800cd98:	04000120 	.word	0x04000120
 800cd9c:	0800e23f 	.word	0x0800e23f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	f040 8170 	bne.w	800d08a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cdaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdae:	f003 0310 	and.w	r3, r3, #16
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	f000 8169 	beq.w	800d08a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cdb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdbc:	f003 0310 	and.w	r3, r3, #16
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f000 8162 	beq.w	800d08a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2210      	movs	r2, #16
 800cdcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdd8:	2b40      	cmp	r3, #64	@ 0x40
 800cdda:	f040 80d8 	bne.w	800cf8e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cdec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f000 80af 	beq.w	800cf54 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cdfc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce00:	429a      	cmp	r2, r3
 800ce02:	f080 80a7 	bcs.w	800cf54 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f003 0320 	and.w	r3, r3, #32
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f040 8087 	bne.w	800cf32 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ce30:	e853 3f00 	ldrex	r3, [r3]
 800ce34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ce38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ce3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ce4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ce52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ce5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ce5e:	e841 2300 	strex	r3, r2, [r1]
 800ce62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ce66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1da      	bne.n	800ce24 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	3308      	adds	r3, #8
 800ce74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ce78:	e853 3f00 	ldrex	r3, [r3]
 800ce7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ce7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ce80:	f023 0301 	bic.w	r3, r3, #1
 800ce84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	3308      	adds	r3, #8
 800ce8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ce92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ce96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ce9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ce9e:	e841 2300 	strex	r3, r2, [r1]
 800cea2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cea4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1e1      	bne.n	800ce6e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	3308      	adds	r3, #8
 800ceb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ceb4:	e853 3f00 	ldrex	r3, [r3]
 800ceb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ceba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cebc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	3308      	adds	r3, #8
 800ceca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cece:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ced0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ced4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ced6:	e841 2300 	strex	r3, r2, [r1]
 800ceda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cedc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d1e3      	bne.n	800ceaa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2220      	movs	r2, #32
 800cee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cef8:	e853 3f00 	ldrex	r3, [r3]
 800cefc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cefe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf00:	f023 0310 	bic.w	r3, r3, #16
 800cf04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf12:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cf18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf1a:	e841 2300 	strex	r3, r2, [r1]
 800cf1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cf20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1e4      	bne.n	800cef0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fb faac 	bl	800848a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2202      	movs	r2, #2
 800cf36:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	1ad3      	subs	r3, r2, r3
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f925 	bl	800d19c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800cf52:	e0fc      	b.n	800d14e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cf5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	f040 80f5 	bne.w	800d14e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f003 0320 	and.w	r3, r3, #32
 800cf72:	2b20      	cmp	r3, #32
 800cf74:	f040 80eb 	bne.w	800d14e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2202      	movs	r2, #2
 800cf7c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cf84:	4619      	mov	r1, r3
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 f908 	bl	800d19c <HAL_UARTEx_RxEventCallback>
      return;
 800cf8c:	e0df      	b.n	800d14e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	1ad3      	subs	r3, r2, r3
 800cf9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f000 80d1 	beq.w	800d152 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800cfb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f000 80cc 	beq.w	800d152 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc2:	e853 3f00 	ldrex	r3, [r3]
 800cfc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cfc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cfce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cfdc:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cfe2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfe4:	e841 2300 	strex	r3, r2, [r1]
 800cfe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cfea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1e4      	bne.n	800cfba <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	3308      	adds	r3, #8
 800cff6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffa:	e853 3f00 	ldrex	r3, [r3]
 800cffe:	623b      	str	r3, [r7, #32]
   return(result);
 800d000:	6a3b      	ldr	r3, [r7, #32]
 800d002:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d006:	f023 0301 	bic.w	r3, r3, #1
 800d00a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	3308      	adds	r3, #8
 800d014:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d018:	633a      	str	r2, [r7, #48]	@ 0x30
 800d01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d01c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d01e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d020:	e841 2300 	strex	r3, r2, [r1]
 800d024:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1e1      	bne.n	800cff0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2220      	movs	r2, #32
 800d030:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	e853 3f00 	ldrex	r3, [r3]
 800d04c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f023 0310 	bic.w	r3, r3, #16
 800d054:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	461a      	mov	r2, r3
 800d05e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d062:	61fb      	str	r3, [r7, #28]
 800d064:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d066:	69b9      	ldr	r1, [r7, #24]
 800d068:	69fa      	ldr	r2, [r7, #28]
 800d06a:	e841 2300 	strex	r3, r2, [r1]
 800d06e:	617b      	str	r3, [r7, #20]
   return(result);
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1e4      	bne.n	800d040 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2202      	movs	r2, #2
 800d07a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d07c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d080:	4619      	mov	r1, r3
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 f88a 	bl	800d19c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d088:	e063      	b.n	800d152 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d08a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d08e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d092:	2b00      	cmp	r3, #0
 800d094:	d00e      	beq.n	800d0b4 <HAL_UART_IRQHandler+0x5d8>
 800d096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d09a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d008      	beq.n	800d0b4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d0aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f001 ffc9 	bl	800f044 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d0b2:	e051      	b.n	800d158 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d014      	beq.n	800d0ea <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d0c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d105      	bne.n	800d0d8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d0cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d008      	beq.n	800d0ea <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d03a      	beq.n	800d156 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	4798      	blx	r3
    }
    return;
 800d0e8:	e035      	b.n	800d156 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d0ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d009      	beq.n	800d10a <HAL_UART_IRQHandler+0x62e>
 800d0f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d003      	beq.n	800d10a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f001 fa53 	bl	800e5ae <UART_EndTransmit_IT>
    return;
 800d108:	e026      	b.n	800d158 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d10e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d112:	2b00      	cmp	r3, #0
 800d114:	d009      	beq.n	800d12a <HAL_UART_IRQHandler+0x64e>
 800d116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d11a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d003      	beq.n	800d12a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f001 ffa2 	bl	800f06c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d128:	e016      	b.n	800d158 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d12a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d12e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d132:	2b00      	cmp	r3, #0
 800d134:	d010      	beq.n	800d158 <HAL_UART_IRQHandler+0x67c>
 800d136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	da0c      	bge.n	800d158 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f001 ff8a 	bl	800f058 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d144:	e008      	b.n	800d158 <HAL_UART_IRQHandler+0x67c>
      return;
 800d146:	bf00      	nop
 800d148:	e006      	b.n	800d158 <HAL_UART_IRQHandler+0x67c>
    return;
 800d14a:	bf00      	nop
 800d14c:	e004      	b.n	800d158 <HAL_UART_IRQHandler+0x67c>
      return;
 800d14e:	bf00      	nop
 800d150:	e002      	b.n	800d158 <HAL_UART_IRQHandler+0x67c>
      return;
 800d152:	bf00      	nop
 800d154:	e000      	b.n	800d158 <HAL_UART_IRQHandler+0x67c>
    return;
 800d156:	bf00      	nop
  }
}
 800d158:	37e8      	adds	r7, #232	@ 0xe8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop

0800d160 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d168:	bf00      	nop
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d17c:	bf00      	nop
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d190:	bf00      	nop
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d1a8:	bf00      	nop
 800d1aa:	370c      	adds	r7, #12
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr

0800d1b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d1b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d1b8:	b08c      	sub	sp, #48	@ 0x30
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	689a      	ldr	r2, [r3, #8]
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	691b      	ldr	r3, [r3, #16]
 800d1cc:	431a      	orrs	r2, r3
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	695b      	ldr	r3, [r3, #20]
 800d1d2:	431a      	orrs	r2, r3
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	69db      	ldr	r3, [r3, #28]
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	4bab      	ldr	r3, [pc, #684]	@ (800d490 <UART_SetConfig+0x2dc>)
 800d1e4:	4013      	ands	r3, r2
 800d1e6:	697a      	ldr	r2, [r7, #20]
 800d1e8:	6812      	ldr	r2, [r2, #0]
 800d1ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d1ec:	430b      	orrs	r3, r1
 800d1ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	68da      	ldr	r2, [r3, #12]
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	430a      	orrs	r2, r1
 800d204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	699b      	ldr	r3, [r3, #24]
 800d20a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4aa0      	ldr	r2, [pc, #640]	@ (800d494 <UART_SetConfig+0x2e0>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d004      	beq.n	800d220 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	6a1b      	ldr	r3, [r3, #32]
 800d21a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d21c:	4313      	orrs	r3, r2
 800d21e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d22a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d22e:	697a      	ldr	r2, [r7, #20]
 800d230:	6812      	ldr	r2, [r2, #0]
 800d232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d234:	430b      	orrs	r3, r1
 800d236:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d23e:	f023 010f 	bic.w	r1, r3, #15
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	430a      	orrs	r2, r1
 800d24c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a91      	ldr	r2, [pc, #580]	@ (800d498 <UART_SetConfig+0x2e4>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d125      	bne.n	800d2a4 <UART_SetConfig+0xf0>
 800d258:	4b90      	ldr	r3, [pc, #576]	@ (800d49c <UART_SetConfig+0x2e8>)
 800d25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d25e:	f003 0303 	and.w	r3, r3, #3
 800d262:	2b03      	cmp	r3, #3
 800d264:	d81a      	bhi.n	800d29c <UART_SetConfig+0xe8>
 800d266:	a201      	add	r2, pc, #4	@ (adr r2, 800d26c <UART_SetConfig+0xb8>)
 800d268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26c:	0800d27d 	.word	0x0800d27d
 800d270:	0800d28d 	.word	0x0800d28d
 800d274:	0800d285 	.word	0x0800d285
 800d278:	0800d295 	.word	0x0800d295
 800d27c:	2301      	movs	r3, #1
 800d27e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d282:	e0d6      	b.n	800d432 <UART_SetConfig+0x27e>
 800d284:	2302      	movs	r3, #2
 800d286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d28a:	e0d2      	b.n	800d432 <UART_SetConfig+0x27e>
 800d28c:	2304      	movs	r3, #4
 800d28e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d292:	e0ce      	b.n	800d432 <UART_SetConfig+0x27e>
 800d294:	2308      	movs	r3, #8
 800d296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d29a:	e0ca      	b.n	800d432 <UART_SetConfig+0x27e>
 800d29c:	2310      	movs	r3, #16
 800d29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2a2:	e0c6      	b.n	800d432 <UART_SetConfig+0x27e>
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a7d      	ldr	r2, [pc, #500]	@ (800d4a0 <UART_SetConfig+0x2ec>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d138      	bne.n	800d320 <UART_SetConfig+0x16c>
 800d2ae:	4b7b      	ldr	r3, [pc, #492]	@ (800d49c <UART_SetConfig+0x2e8>)
 800d2b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2b4:	f003 030c 	and.w	r3, r3, #12
 800d2b8:	2b0c      	cmp	r3, #12
 800d2ba:	d82d      	bhi.n	800d318 <UART_SetConfig+0x164>
 800d2bc:	a201      	add	r2, pc, #4	@ (adr r2, 800d2c4 <UART_SetConfig+0x110>)
 800d2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c2:	bf00      	nop
 800d2c4:	0800d2f9 	.word	0x0800d2f9
 800d2c8:	0800d319 	.word	0x0800d319
 800d2cc:	0800d319 	.word	0x0800d319
 800d2d0:	0800d319 	.word	0x0800d319
 800d2d4:	0800d309 	.word	0x0800d309
 800d2d8:	0800d319 	.word	0x0800d319
 800d2dc:	0800d319 	.word	0x0800d319
 800d2e0:	0800d319 	.word	0x0800d319
 800d2e4:	0800d301 	.word	0x0800d301
 800d2e8:	0800d319 	.word	0x0800d319
 800d2ec:	0800d319 	.word	0x0800d319
 800d2f0:	0800d319 	.word	0x0800d319
 800d2f4:	0800d311 	.word	0x0800d311
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2fe:	e098      	b.n	800d432 <UART_SetConfig+0x27e>
 800d300:	2302      	movs	r3, #2
 800d302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d306:	e094      	b.n	800d432 <UART_SetConfig+0x27e>
 800d308:	2304      	movs	r3, #4
 800d30a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d30e:	e090      	b.n	800d432 <UART_SetConfig+0x27e>
 800d310:	2308      	movs	r3, #8
 800d312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d316:	e08c      	b.n	800d432 <UART_SetConfig+0x27e>
 800d318:	2310      	movs	r3, #16
 800d31a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d31e:	e088      	b.n	800d432 <UART_SetConfig+0x27e>
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a5f      	ldr	r2, [pc, #380]	@ (800d4a4 <UART_SetConfig+0x2f0>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d125      	bne.n	800d376 <UART_SetConfig+0x1c2>
 800d32a:	4b5c      	ldr	r3, [pc, #368]	@ (800d49c <UART_SetConfig+0x2e8>)
 800d32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d330:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d334:	2b30      	cmp	r3, #48	@ 0x30
 800d336:	d016      	beq.n	800d366 <UART_SetConfig+0x1b2>
 800d338:	2b30      	cmp	r3, #48	@ 0x30
 800d33a:	d818      	bhi.n	800d36e <UART_SetConfig+0x1ba>
 800d33c:	2b20      	cmp	r3, #32
 800d33e:	d00a      	beq.n	800d356 <UART_SetConfig+0x1a2>
 800d340:	2b20      	cmp	r3, #32
 800d342:	d814      	bhi.n	800d36e <UART_SetConfig+0x1ba>
 800d344:	2b00      	cmp	r3, #0
 800d346:	d002      	beq.n	800d34e <UART_SetConfig+0x19a>
 800d348:	2b10      	cmp	r3, #16
 800d34a:	d008      	beq.n	800d35e <UART_SetConfig+0x1aa>
 800d34c:	e00f      	b.n	800d36e <UART_SetConfig+0x1ba>
 800d34e:	2300      	movs	r3, #0
 800d350:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d354:	e06d      	b.n	800d432 <UART_SetConfig+0x27e>
 800d356:	2302      	movs	r3, #2
 800d358:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d35c:	e069      	b.n	800d432 <UART_SetConfig+0x27e>
 800d35e:	2304      	movs	r3, #4
 800d360:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d364:	e065      	b.n	800d432 <UART_SetConfig+0x27e>
 800d366:	2308      	movs	r3, #8
 800d368:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d36c:	e061      	b.n	800d432 <UART_SetConfig+0x27e>
 800d36e:	2310      	movs	r3, #16
 800d370:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d374:	e05d      	b.n	800d432 <UART_SetConfig+0x27e>
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a4b      	ldr	r2, [pc, #300]	@ (800d4a8 <UART_SetConfig+0x2f4>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d125      	bne.n	800d3cc <UART_SetConfig+0x218>
 800d380:	4b46      	ldr	r3, [pc, #280]	@ (800d49c <UART_SetConfig+0x2e8>)
 800d382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d386:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d38a:	2bc0      	cmp	r3, #192	@ 0xc0
 800d38c:	d016      	beq.n	800d3bc <UART_SetConfig+0x208>
 800d38e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d390:	d818      	bhi.n	800d3c4 <UART_SetConfig+0x210>
 800d392:	2b80      	cmp	r3, #128	@ 0x80
 800d394:	d00a      	beq.n	800d3ac <UART_SetConfig+0x1f8>
 800d396:	2b80      	cmp	r3, #128	@ 0x80
 800d398:	d814      	bhi.n	800d3c4 <UART_SetConfig+0x210>
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d002      	beq.n	800d3a4 <UART_SetConfig+0x1f0>
 800d39e:	2b40      	cmp	r3, #64	@ 0x40
 800d3a0:	d008      	beq.n	800d3b4 <UART_SetConfig+0x200>
 800d3a2:	e00f      	b.n	800d3c4 <UART_SetConfig+0x210>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3aa:	e042      	b.n	800d432 <UART_SetConfig+0x27e>
 800d3ac:	2302      	movs	r3, #2
 800d3ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3b2:	e03e      	b.n	800d432 <UART_SetConfig+0x27e>
 800d3b4:	2304      	movs	r3, #4
 800d3b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3ba:	e03a      	b.n	800d432 <UART_SetConfig+0x27e>
 800d3bc:	2308      	movs	r3, #8
 800d3be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3c2:	e036      	b.n	800d432 <UART_SetConfig+0x27e>
 800d3c4:	2310      	movs	r3, #16
 800d3c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3ca:	e032      	b.n	800d432 <UART_SetConfig+0x27e>
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a30      	ldr	r2, [pc, #192]	@ (800d494 <UART_SetConfig+0x2e0>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d12a      	bne.n	800d42c <UART_SetConfig+0x278>
 800d3d6:	4b31      	ldr	r3, [pc, #196]	@ (800d49c <UART_SetConfig+0x2e8>)
 800d3d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d3e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d3e4:	d01a      	beq.n	800d41c <UART_SetConfig+0x268>
 800d3e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d3ea:	d81b      	bhi.n	800d424 <UART_SetConfig+0x270>
 800d3ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d3f0:	d00c      	beq.n	800d40c <UART_SetConfig+0x258>
 800d3f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d3f6:	d815      	bhi.n	800d424 <UART_SetConfig+0x270>
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d003      	beq.n	800d404 <UART_SetConfig+0x250>
 800d3fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d400:	d008      	beq.n	800d414 <UART_SetConfig+0x260>
 800d402:	e00f      	b.n	800d424 <UART_SetConfig+0x270>
 800d404:	2300      	movs	r3, #0
 800d406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d40a:	e012      	b.n	800d432 <UART_SetConfig+0x27e>
 800d40c:	2302      	movs	r3, #2
 800d40e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d412:	e00e      	b.n	800d432 <UART_SetConfig+0x27e>
 800d414:	2304      	movs	r3, #4
 800d416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d41a:	e00a      	b.n	800d432 <UART_SetConfig+0x27e>
 800d41c:	2308      	movs	r3, #8
 800d41e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d422:	e006      	b.n	800d432 <UART_SetConfig+0x27e>
 800d424:	2310      	movs	r3, #16
 800d426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d42a:	e002      	b.n	800d432 <UART_SetConfig+0x27e>
 800d42c:	2310      	movs	r3, #16
 800d42e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a17      	ldr	r2, [pc, #92]	@ (800d494 <UART_SetConfig+0x2e0>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	f040 80a8 	bne.w	800d58e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d43e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d442:	2b08      	cmp	r3, #8
 800d444:	d834      	bhi.n	800d4b0 <UART_SetConfig+0x2fc>
 800d446:	a201      	add	r2, pc, #4	@ (adr r2, 800d44c <UART_SetConfig+0x298>)
 800d448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d44c:	0800d471 	.word	0x0800d471
 800d450:	0800d4b1 	.word	0x0800d4b1
 800d454:	0800d479 	.word	0x0800d479
 800d458:	0800d4b1 	.word	0x0800d4b1
 800d45c:	0800d47f 	.word	0x0800d47f
 800d460:	0800d4b1 	.word	0x0800d4b1
 800d464:	0800d4b1 	.word	0x0800d4b1
 800d468:	0800d4b1 	.word	0x0800d4b1
 800d46c:	0800d487 	.word	0x0800d487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d470:	f7fc ff1e 	bl	800a2b0 <HAL_RCC_GetPCLK1Freq>
 800d474:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d476:	e021      	b.n	800d4bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d478:	4b0c      	ldr	r3, [pc, #48]	@ (800d4ac <UART_SetConfig+0x2f8>)
 800d47a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d47c:	e01e      	b.n	800d4bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d47e:	f7fc fea9 	bl	800a1d4 <HAL_RCC_GetSysClockFreq>
 800d482:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d484:	e01a      	b.n	800d4bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d48a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d48c:	e016      	b.n	800d4bc <UART_SetConfig+0x308>
 800d48e:	bf00      	nop
 800d490:	cfff69f3 	.word	0xcfff69f3
 800d494:	40008000 	.word	0x40008000
 800d498:	40013800 	.word	0x40013800
 800d49c:	40021000 	.word	0x40021000
 800d4a0:	40004400 	.word	0x40004400
 800d4a4:	40004800 	.word	0x40004800
 800d4a8:	40004c00 	.word	0x40004c00
 800d4ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d4ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	f000 812a 	beq.w	800d718 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4c8:	4a9e      	ldr	r2, [pc, #632]	@ (800d744 <UART_SetConfig+0x590>)
 800d4ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4d6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	685a      	ldr	r2, [r3, #4]
 800d4dc:	4613      	mov	r3, r2
 800d4de:	005b      	lsls	r3, r3, #1
 800d4e0:	4413      	add	r3, r2
 800d4e2:	69ba      	ldr	r2, [r7, #24]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d305      	bcc.n	800d4f4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4ee:	69ba      	ldr	r2, [r7, #24]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d903      	bls.n	800d4fc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d4fa:	e10d      	b.n	800d718 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fe:	2200      	movs	r2, #0
 800d500:	60bb      	str	r3, [r7, #8]
 800d502:	60fa      	str	r2, [r7, #12]
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d508:	4a8e      	ldr	r2, [pc, #568]	@ (800d744 <UART_SetConfig+0x590>)
 800d50a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d50e:	b29b      	uxth	r3, r3
 800d510:	2200      	movs	r2, #0
 800d512:	603b      	str	r3, [r7, #0]
 800d514:	607a      	str	r2, [r7, #4]
 800d516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d51a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d51e:	f7f5 fde5 	bl	80030ec <__aeabi_uldivmod>
 800d522:	4602      	mov	r2, r0
 800d524:	460b      	mov	r3, r1
 800d526:	4610      	mov	r0, r2
 800d528:	4619      	mov	r1, r3
 800d52a:	f04f 0200 	mov.w	r2, #0
 800d52e:	f04f 0300 	mov.w	r3, #0
 800d532:	020b      	lsls	r3, r1, #8
 800d534:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d538:	0202      	lsls	r2, r0, #8
 800d53a:	6979      	ldr	r1, [r7, #20]
 800d53c:	6849      	ldr	r1, [r1, #4]
 800d53e:	0849      	lsrs	r1, r1, #1
 800d540:	2000      	movs	r0, #0
 800d542:	460c      	mov	r4, r1
 800d544:	4605      	mov	r5, r0
 800d546:	eb12 0804 	adds.w	r8, r2, r4
 800d54a:	eb43 0905 	adc.w	r9, r3, r5
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	469a      	mov	sl, r3
 800d556:	4693      	mov	fp, r2
 800d558:	4652      	mov	r2, sl
 800d55a:	465b      	mov	r3, fp
 800d55c:	4640      	mov	r0, r8
 800d55e:	4649      	mov	r1, r9
 800d560:	f7f5 fdc4 	bl	80030ec <__aeabi_uldivmod>
 800d564:	4602      	mov	r2, r0
 800d566:	460b      	mov	r3, r1
 800d568:	4613      	mov	r3, r2
 800d56a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d56c:	6a3b      	ldr	r3, [r7, #32]
 800d56e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d572:	d308      	bcc.n	800d586 <UART_SetConfig+0x3d2>
 800d574:	6a3b      	ldr	r3, [r7, #32]
 800d576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d57a:	d204      	bcs.n	800d586 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6a3a      	ldr	r2, [r7, #32]
 800d582:	60da      	str	r2, [r3, #12]
 800d584:	e0c8      	b.n	800d718 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d58c:	e0c4      	b.n	800d718 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	69db      	ldr	r3, [r3, #28]
 800d592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d596:	d167      	bne.n	800d668 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800d598:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d59c:	2b08      	cmp	r3, #8
 800d59e:	d828      	bhi.n	800d5f2 <UART_SetConfig+0x43e>
 800d5a0:	a201      	add	r2, pc, #4	@ (adr r2, 800d5a8 <UART_SetConfig+0x3f4>)
 800d5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a6:	bf00      	nop
 800d5a8:	0800d5cd 	.word	0x0800d5cd
 800d5ac:	0800d5d5 	.word	0x0800d5d5
 800d5b0:	0800d5dd 	.word	0x0800d5dd
 800d5b4:	0800d5f3 	.word	0x0800d5f3
 800d5b8:	0800d5e3 	.word	0x0800d5e3
 800d5bc:	0800d5f3 	.word	0x0800d5f3
 800d5c0:	0800d5f3 	.word	0x0800d5f3
 800d5c4:	0800d5f3 	.word	0x0800d5f3
 800d5c8:	0800d5eb 	.word	0x0800d5eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5cc:	f7fc fe70 	bl	800a2b0 <HAL_RCC_GetPCLK1Freq>
 800d5d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d5d2:	e014      	b.n	800d5fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5d4:	f7fc fe82 	bl	800a2dc <HAL_RCC_GetPCLK2Freq>
 800d5d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d5da:	e010      	b.n	800d5fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d5dc:	4b5a      	ldr	r3, [pc, #360]	@ (800d748 <UART_SetConfig+0x594>)
 800d5de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d5e0:	e00d      	b.n	800d5fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d5e2:	f7fc fdf7 	bl	800a1d4 <HAL_RCC_GetSysClockFreq>
 800d5e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d5e8:	e009      	b.n	800d5fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d5ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d5f0:	e005      	b.n	800d5fe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d5fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d600:	2b00      	cmp	r3, #0
 800d602:	f000 8089 	beq.w	800d718 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d60a:	4a4e      	ldr	r2, [pc, #312]	@ (800d744 <UART_SetConfig+0x590>)
 800d60c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d610:	461a      	mov	r2, r3
 800d612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d614:	fbb3 f3f2 	udiv	r3, r3, r2
 800d618:	005a      	lsls	r2, r3, #1
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	085b      	lsrs	r3, r3, #1
 800d620:	441a      	add	r2, r3
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	fbb2 f3f3 	udiv	r3, r2, r3
 800d62a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d62c:	6a3b      	ldr	r3, [r7, #32]
 800d62e:	2b0f      	cmp	r3, #15
 800d630:	d916      	bls.n	800d660 <UART_SetConfig+0x4ac>
 800d632:	6a3b      	ldr	r3, [r7, #32]
 800d634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d638:	d212      	bcs.n	800d660 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d63a:	6a3b      	ldr	r3, [r7, #32]
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	f023 030f 	bic.w	r3, r3, #15
 800d642:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d644:	6a3b      	ldr	r3, [r7, #32]
 800d646:	085b      	lsrs	r3, r3, #1
 800d648:	b29b      	uxth	r3, r3
 800d64a:	f003 0307 	and.w	r3, r3, #7
 800d64e:	b29a      	uxth	r2, r3
 800d650:	8bfb      	ldrh	r3, [r7, #30]
 800d652:	4313      	orrs	r3, r2
 800d654:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	8bfa      	ldrh	r2, [r7, #30]
 800d65c:	60da      	str	r2, [r3, #12]
 800d65e:	e05b      	b.n	800d718 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d660:	2301      	movs	r3, #1
 800d662:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d666:	e057      	b.n	800d718 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d668:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d66c:	2b08      	cmp	r3, #8
 800d66e:	d828      	bhi.n	800d6c2 <UART_SetConfig+0x50e>
 800d670:	a201      	add	r2, pc, #4	@ (adr r2, 800d678 <UART_SetConfig+0x4c4>)
 800d672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d676:	bf00      	nop
 800d678:	0800d69d 	.word	0x0800d69d
 800d67c:	0800d6a5 	.word	0x0800d6a5
 800d680:	0800d6ad 	.word	0x0800d6ad
 800d684:	0800d6c3 	.word	0x0800d6c3
 800d688:	0800d6b3 	.word	0x0800d6b3
 800d68c:	0800d6c3 	.word	0x0800d6c3
 800d690:	0800d6c3 	.word	0x0800d6c3
 800d694:	0800d6c3 	.word	0x0800d6c3
 800d698:	0800d6bb 	.word	0x0800d6bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d69c:	f7fc fe08 	bl	800a2b0 <HAL_RCC_GetPCLK1Freq>
 800d6a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d6a2:	e014      	b.n	800d6ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d6a4:	f7fc fe1a 	bl	800a2dc <HAL_RCC_GetPCLK2Freq>
 800d6a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d6aa:	e010      	b.n	800d6ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d6ac:	4b26      	ldr	r3, [pc, #152]	@ (800d748 <UART_SetConfig+0x594>)
 800d6ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d6b0:	e00d      	b.n	800d6ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d6b2:	f7fc fd8f 	bl	800a1d4 <HAL_RCC_GetSysClockFreq>
 800d6b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d6b8:	e009      	b.n	800d6ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d6be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d6c0:	e005      	b.n	800d6ce <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d6cc:	bf00      	nop
    }

    if (pclk != 0U)
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d021      	beq.n	800d718 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6d8:	4a1a      	ldr	r2, [pc, #104]	@ (800d744 <UART_SetConfig+0x590>)
 800d6da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6de:	461a      	mov	r2, r3
 800d6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	085b      	lsrs	r3, r3, #1
 800d6ec:	441a      	add	r2, r3
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6f8:	6a3b      	ldr	r3, [r7, #32]
 800d6fa:	2b0f      	cmp	r3, #15
 800d6fc:	d909      	bls.n	800d712 <UART_SetConfig+0x55e>
 800d6fe:	6a3b      	ldr	r3, [r7, #32]
 800d700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d704:	d205      	bcs.n	800d712 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d706:	6a3b      	ldr	r3, [r7, #32]
 800d708:	b29a      	uxth	r2, r3
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	60da      	str	r2, [r3, #12]
 800d710:	e002      	b.n	800d718 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d712:	2301      	movs	r3, #1
 800d714:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	2201      	movs	r2, #1
 800d71c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	2201      	movs	r2, #1
 800d724:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	2200      	movs	r2, #0
 800d72c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	2200      	movs	r2, #0
 800d732:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d734:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3730      	adds	r7, #48	@ 0x30
 800d73c:	46bd      	mov	sp, r7
 800d73e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d742:	bf00      	nop
 800d744:	0801c2f0 	.word	0x0801c2f0
 800d748:	00f42400 	.word	0x00f42400

0800d74c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d758:	f003 0308 	and.w	r3, r3, #8
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00a      	beq.n	800d776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	430a      	orrs	r2, r1
 800d774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d77a:	f003 0301 	and.w	r3, r3, #1
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00a      	beq.n	800d798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	430a      	orrs	r2, r1
 800d796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d79c:	f003 0302 	and.w	r3, r3, #2
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00a      	beq.n	800d7ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	430a      	orrs	r2, r1
 800d7b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7be:	f003 0304 	and.w	r3, r3, #4
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d00a      	beq.n	800d7dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	430a      	orrs	r2, r1
 800d7da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7e0:	f003 0310 	and.w	r3, r3, #16
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d00a      	beq.n	800d7fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	689b      	ldr	r3, [r3, #8]
 800d7ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	430a      	orrs	r2, r1
 800d7fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d802:	f003 0320 	and.w	r3, r3, #32
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00a      	beq.n	800d820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	430a      	orrs	r2, r1
 800d81e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d01a      	beq.n	800d862 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	430a      	orrs	r2, r1
 800d840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d846:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d84a:	d10a      	bne.n	800d862 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	430a      	orrs	r2, r1
 800d860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d00a      	beq.n	800d884 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	430a      	orrs	r2, r1
 800d882:	605a      	str	r2, [r3, #4]
  }
}
 800d884:	bf00      	nop
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b098      	sub	sp, #96	@ 0x60
 800d894:	af02      	add	r7, sp, #8
 800d896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d8a0:	f7f8 fba2 	bl	8005fe8 <HAL_GetTick>
 800d8a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f003 0308 	and.w	r3, r3, #8
 800d8b0:	2b08      	cmp	r3, #8
 800d8b2:	d12f      	bne.n	800d914 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d8b8:	9300      	str	r3, [sp, #0]
 800d8ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f88e 	bl	800d9e4 <UART_WaitOnFlagUntilTimeout>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d022      	beq.n	800d914 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d6:	e853 3f00 	ldrex	r3, [r3]
 800d8da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d8e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d8f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8f4:	e841 2300 	strex	r3, r2, [r1]
 800d8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d8fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d1e6      	bne.n	800d8ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2220      	movs	r2, #32
 800d904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d910:	2303      	movs	r3, #3
 800d912:	e063      	b.n	800d9dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f003 0304 	and.w	r3, r3, #4
 800d91e:	2b04      	cmp	r3, #4
 800d920:	d149      	bne.n	800d9b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d922:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d92a:	2200      	movs	r2, #0
 800d92c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 f857 	bl	800d9e4 <UART_WaitOnFlagUntilTimeout>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d03c      	beq.n	800d9b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d944:	e853 3f00 	ldrex	r3, [r3]
 800d948:	623b      	str	r3, [r7, #32]
   return(result);
 800d94a:	6a3b      	ldr	r3, [r7, #32]
 800d94c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	461a      	mov	r2, r3
 800d958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d95a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d95c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d95e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d962:	e841 2300 	strex	r3, r2, [r1]
 800d966:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d1e6      	bne.n	800d93c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	3308      	adds	r3, #8
 800d974:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	e853 3f00 	ldrex	r3, [r3]
 800d97c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f023 0301 	bic.w	r3, r3, #1
 800d984:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	3308      	adds	r3, #8
 800d98c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d98e:	61fa      	str	r2, [r7, #28]
 800d990:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d992:	69b9      	ldr	r1, [r7, #24]
 800d994:	69fa      	ldr	r2, [r7, #28]
 800d996:	e841 2300 	strex	r3, r2, [r1]
 800d99a:	617b      	str	r3, [r7, #20]
   return(result);
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1e5      	bne.n	800d96e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2220      	movs	r2, #32
 800d9a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9b2:	2303      	movs	r3, #3
 800d9b4:	e012      	b.n	800d9dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2220      	movs	r2, #32
 800d9ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2220      	movs	r2, #32
 800d9c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d9da:	2300      	movs	r3, #0
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3758      	adds	r7, #88	@ 0x58
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	603b      	str	r3, [r7, #0]
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9f4:	e04f      	b.n	800da96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9fc:	d04b      	beq.n	800da96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9fe:	f7f8 faf3 	bl	8005fe8 <HAL_GetTick>
 800da02:	4602      	mov	r2, r0
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	1ad3      	subs	r3, r2, r3
 800da08:	69ba      	ldr	r2, [r7, #24]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d302      	bcc.n	800da14 <UART_WaitOnFlagUntilTimeout+0x30>
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d101      	bne.n	800da18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800da14:	2303      	movs	r3, #3
 800da16:	e04e      	b.n	800dab6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f003 0304 	and.w	r3, r3, #4
 800da22:	2b00      	cmp	r3, #0
 800da24:	d037      	beq.n	800da96 <UART_WaitOnFlagUntilTimeout+0xb2>
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	2b80      	cmp	r3, #128	@ 0x80
 800da2a:	d034      	beq.n	800da96 <UART_WaitOnFlagUntilTimeout+0xb2>
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	2b40      	cmp	r3, #64	@ 0x40
 800da30:	d031      	beq.n	800da96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	69db      	ldr	r3, [r3, #28]
 800da38:	f003 0308 	and.w	r3, r3, #8
 800da3c:	2b08      	cmp	r3, #8
 800da3e:	d110      	bne.n	800da62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2208      	movs	r2, #8
 800da46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800da48:	68f8      	ldr	r0, [r7, #12]
 800da4a:	f000 fa42 	bl	800ded2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2208      	movs	r2, #8
 800da52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2200      	movs	r2, #0
 800da5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800da5e:	2301      	movs	r3, #1
 800da60:	e029      	b.n	800dab6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	69db      	ldr	r3, [r3, #28]
 800da68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800da6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800da70:	d111      	bne.n	800da96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800da7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 fa28 	bl	800ded2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2220      	movs	r2, #32
 800da86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2200      	movs	r2, #0
 800da8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800da92:	2303      	movs	r3, #3
 800da94:	e00f      	b.n	800dab6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	69da      	ldr	r2, [r3, #28]
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	4013      	ands	r3, r2
 800daa0:	68ba      	ldr	r2, [r7, #8]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	bf0c      	ite	eq
 800daa6:	2301      	moveq	r3, #1
 800daa8:	2300      	movne	r3, #0
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	461a      	mov	r2, r3
 800daae:	79fb      	ldrb	r3, [r7, #7]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d0a0      	beq.n	800d9f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dab4:	2300      	movs	r3, #0
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3710      	adds	r7, #16
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
	...

0800dac0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b0a3      	sub	sp, #140	@ 0x8c
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	4613      	mov	r3, r2
 800dacc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	88fa      	ldrh	r2, [r7, #6]
 800dad8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	88fa      	ldrh	r2, [r7, #6]
 800dae0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2200      	movs	r2, #0
 800dae8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800daf2:	d10e      	bne.n	800db12 <UART_Start_Receive_IT+0x52>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	691b      	ldr	r3, [r3, #16]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d105      	bne.n	800db08 <UART_Start_Receive_IT+0x48>
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800db02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800db06:	e02d      	b.n	800db64 <UART_Start_Receive_IT+0xa4>
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	22ff      	movs	r2, #255	@ 0xff
 800db0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800db10:	e028      	b.n	800db64 <UART_Start_Receive_IT+0xa4>
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	689b      	ldr	r3, [r3, #8]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10d      	bne.n	800db36 <UART_Start_Receive_IT+0x76>
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	691b      	ldr	r3, [r3, #16]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d104      	bne.n	800db2c <UART_Start_Receive_IT+0x6c>
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	22ff      	movs	r2, #255	@ 0xff
 800db26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800db2a:	e01b      	b.n	800db64 <UART_Start_Receive_IT+0xa4>
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	227f      	movs	r2, #127	@ 0x7f
 800db30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800db34:	e016      	b.n	800db64 <UART_Start_Receive_IT+0xa4>
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db3e:	d10d      	bne.n	800db5c <UART_Start_Receive_IT+0x9c>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	691b      	ldr	r3, [r3, #16]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d104      	bne.n	800db52 <UART_Start_Receive_IT+0x92>
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	227f      	movs	r2, #127	@ 0x7f
 800db4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800db50:	e008      	b.n	800db64 <UART_Start_Receive_IT+0xa4>
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	223f      	movs	r2, #63	@ 0x3f
 800db56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800db5a:	e003      	b.n	800db64 <UART_Start_Receive_IT+0xa4>
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2200      	movs	r2, #0
 800db68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2222      	movs	r2, #34	@ 0x22
 800db70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	3308      	adds	r3, #8
 800db7a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db7e:	e853 3f00 	ldrex	r3, [r3]
 800db82:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800db84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db86:	f043 0301 	orr.w	r3, r3, #1
 800db8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	3308      	adds	r3, #8
 800db94:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800db98:	673a      	str	r2, [r7, #112]	@ 0x70
 800db9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db9c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800db9e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800dba0:	e841 2300 	strex	r3, r2, [r1]
 800dba4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800dba6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d1e3      	bne.n	800db74 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dbb4:	d14f      	bne.n	800dc56 <UART_Start_Receive_IT+0x196>
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dbbc:	88fa      	ldrh	r2, [r7, #6]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d349      	bcc.n	800dc56 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	689b      	ldr	r3, [r3, #8]
 800dbc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbca:	d107      	bne.n	800dbdc <UART_Start_Receive_IT+0x11c>
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	691b      	ldr	r3, [r3, #16]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d103      	bne.n	800dbdc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	4a47      	ldr	r2, [pc, #284]	@ (800dcf4 <UART_Start_Receive_IT+0x234>)
 800dbd8:	675a      	str	r2, [r3, #116]	@ 0x74
 800dbda:	e002      	b.n	800dbe2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	4a46      	ldr	r2, [pc, #280]	@ (800dcf8 <UART_Start_Receive_IT+0x238>)
 800dbe0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d01a      	beq.n	800dc20 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbf2:	e853 3f00 	ldrex	r3, [r3]
 800dbf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dbf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dbfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	461a      	mov	r2, r3
 800dc08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dc0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dc0e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc10:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dc12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dc14:	e841 2300 	strex	r3, r2, [r1]
 800dc18:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800dc1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d1e4      	bne.n	800dbea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3308      	adds	r3, #8
 800dc26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc2a:	e853 3f00 	ldrex	r3, [r3]
 800dc2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dc36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	3308      	adds	r3, #8
 800dc3e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dc40:	64ba      	str	r2, [r7, #72]	@ 0x48
 800dc42:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc44:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dc46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc48:	e841 2300 	strex	r3, r2, [r1]
 800dc4c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dc4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1e5      	bne.n	800dc20 <UART_Start_Receive_IT+0x160>
 800dc54:	e046      	b.n	800dce4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc5e:	d107      	bne.n	800dc70 <UART_Start_Receive_IT+0x1b0>
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d103      	bne.n	800dc70 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	4a24      	ldr	r2, [pc, #144]	@ (800dcfc <UART_Start_Receive_IT+0x23c>)
 800dc6c:	675a      	str	r2, [r3, #116]	@ 0x74
 800dc6e:	e002      	b.n	800dc76 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	4a23      	ldr	r2, [pc, #140]	@ (800dd00 <UART_Start_Receive_IT+0x240>)
 800dc74:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	691b      	ldr	r3, [r3, #16]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d019      	beq.n	800dcb2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc86:	e853 3f00 	ldrex	r3, [r3]
 800dc8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc8e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800dc92:	677b      	str	r3, [r7, #116]	@ 0x74
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	461a      	mov	r2, r3
 800dc9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dc9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc9e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dca2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dca4:	e841 2300 	strex	r3, r2, [r1]
 800dca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800dcaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d1e6      	bne.n	800dc7e <UART_Start_Receive_IT+0x1be>
 800dcb0:	e018      	b.n	800dce4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	e853 3f00 	ldrex	r3, [r3]
 800dcbe:	613b      	str	r3, [r7, #16]
   return(result);
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	f043 0320 	orr.w	r3, r3, #32
 800dcc6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	461a      	mov	r2, r3
 800dcce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dcd0:	623b      	str	r3, [r7, #32]
 800dcd2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd4:	69f9      	ldr	r1, [r7, #28]
 800dcd6:	6a3a      	ldr	r2, [r7, #32]
 800dcd8:	e841 2300 	strex	r3, r2, [r1]
 800dcdc:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d1e6      	bne.n	800dcb2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800dce4:	2300      	movs	r3, #0
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	378c      	adds	r7, #140	@ 0x8c
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	0800ecd9 	.word	0x0800ecd9
 800dcf8:	0800e975 	.word	0x0800e975
 800dcfc:	0800e7bd 	.word	0x0800e7bd
 800dd00:	0800e605 	.word	0x0800e605

0800dd04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b096      	sub	sp, #88	@ 0x58
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	60b9      	str	r1, [r7, #8]
 800dd0e:	4613      	mov	r3, r2
 800dd10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	68ba      	ldr	r2, [r7, #8]
 800dd16:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	88fa      	ldrh	r2, [r7, #6]
 800dd1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2222      	movs	r2, #34	@ 0x22
 800dd2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d02d      	beq.n	800dd96 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd40:	4a40      	ldr	r2, [pc, #256]	@ (800de44 <UART_Start_Receive_DMA+0x140>)
 800dd42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd4a:	4a3f      	ldr	r2, [pc, #252]	@ (800de48 <UART_Start_Receive_DMA+0x144>)
 800dd4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd54:	4a3d      	ldr	r2, [pc, #244]	@ (800de4c <UART_Start_Receive_DMA+0x148>)
 800dd56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd5e:	2200      	movs	r2, #0
 800dd60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	3324      	adds	r3, #36	@ 0x24
 800dd6e:	4619      	mov	r1, r3
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd74:	461a      	mov	r2, r3
 800dd76:	88fb      	ldrh	r3, [r7, #6]
 800dd78:	f7fa fb0c 	bl	8008394 <HAL_DMA_Start_IT>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d009      	beq.n	800dd96 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2210      	movs	r2, #16
 800dd86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2220      	movs	r2, #32
 800dd8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800dd92:	2301      	movs	r3, #1
 800dd94:	e051      	b.n	800de3a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	691b      	ldr	r3, [r3, #16]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d018      	beq.n	800ddd0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dda6:	e853 3f00 	ldrex	r3, [r3]
 800ddaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ddac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ddb2:	657b      	str	r3, [r7, #84]	@ 0x54
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	461a      	mov	r2, r3
 800ddba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ddbe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ddc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ddc4:	e841 2300 	strex	r3, r2, [r1]
 800ddc8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ddca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1e6      	bne.n	800dd9e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	3308      	adds	r3, #8
 800ddd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddda:	e853 3f00 	ldrex	r3, [r3]
 800ddde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde2:	f043 0301 	orr.w	r3, r3, #1
 800dde6:	653b      	str	r3, [r7, #80]	@ 0x50
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	3308      	adds	r3, #8
 800ddee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ddf0:	637a      	str	r2, [r7, #52]	@ 0x34
 800ddf2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ddf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddf8:	e841 2300 	strex	r3, r2, [r1]
 800ddfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ddfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de00:	2b00      	cmp	r3, #0
 800de02:	d1e5      	bne.n	800ddd0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	3308      	adds	r3, #8
 800de0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	e853 3f00 	ldrex	r3, [r3]
 800de12:	613b      	str	r3, [r7, #16]
   return(result);
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	3308      	adds	r3, #8
 800de22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800de24:	623a      	str	r2, [r7, #32]
 800de26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de28:	69f9      	ldr	r1, [r7, #28]
 800de2a:	6a3a      	ldr	r2, [r7, #32]
 800de2c:	e841 2300 	strex	r3, r2, [r1]
 800de30:	61bb      	str	r3, [r7, #24]
   return(result);
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d1e5      	bne.n	800de04 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3758      	adds	r7, #88	@ 0x58
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	0800e055 	.word	0x0800e055
 800de48:	0800e181 	.word	0x0800e181
 800de4c:	0800e1bf 	.word	0x0800e1bf

0800de50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800de50:	b480      	push	{r7}
 800de52:	b08f      	sub	sp, #60	@ 0x3c
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5e:	6a3b      	ldr	r3, [r7, #32]
 800de60:	e853 3f00 	ldrex	r3, [r3]
 800de64:	61fb      	str	r3, [r7, #28]
   return(result);
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800de6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	461a      	mov	r2, r3
 800de74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de78:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de7e:	e841 2300 	strex	r3, r2, [r1]
 800de82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800de84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1e6      	bne.n	800de58 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	3308      	adds	r3, #8
 800de90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	e853 3f00 	ldrex	r3, [r3]
 800de98:	60bb      	str	r3, [r7, #8]
   return(result);
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800dea0:	633b      	str	r3, [r7, #48]	@ 0x30
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	3308      	adds	r3, #8
 800dea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800deaa:	61ba      	str	r2, [r7, #24]
 800deac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deae:	6979      	ldr	r1, [r7, #20]
 800deb0:	69ba      	ldr	r2, [r7, #24]
 800deb2:	e841 2300 	strex	r3, r2, [r1]
 800deb6:	613b      	str	r3, [r7, #16]
   return(result);
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d1e5      	bne.n	800de8a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2220      	movs	r2, #32
 800dec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800dec6:	bf00      	nop
 800dec8:	373c      	adds	r7, #60	@ 0x3c
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr

0800ded2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ded2:	b480      	push	{r7}
 800ded4:	b095      	sub	sp, #84	@ 0x54
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dee2:	e853 3f00 	ldrex	r3, [r3]
 800dee6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800deee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	461a      	mov	r2, r3
 800def6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800def8:	643b      	str	r3, [r7, #64]	@ 0x40
 800defa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800defc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800defe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df00:	e841 2300 	strex	r3, r2, [r1]
 800df04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800df06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1e6      	bne.n	800deda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	3308      	adds	r3, #8
 800df12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df14:	6a3b      	ldr	r3, [r7, #32]
 800df16:	e853 3f00 	ldrex	r3, [r3]
 800df1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df22:	f023 0301 	bic.w	r3, r3, #1
 800df26:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	3308      	adds	r3, #8
 800df2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800df32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800df36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df38:	e841 2300 	strex	r3, r2, [r1]
 800df3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1e3      	bne.n	800df0c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d118      	bne.n	800df7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	e853 3f00 	ldrex	r3, [r3]
 800df58:	60bb      	str	r3, [r7, #8]
   return(result);
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	f023 0310 	bic.w	r3, r3, #16
 800df60:	647b      	str	r3, [r7, #68]	@ 0x44
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	461a      	mov	r2, r3
 800df68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df6a:	61bb      	str	r3, [r7, #24]
 800df6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df6e:	6979      	ldr	r1, [r7, #20]
 800df70:	69ba      	ldr	r2, [r7, #24]
 800df72:	e841 2300 	strex	r3, r2, [r1]
 800df76:	613b      	str	r3, [r7, #16]
   return(result);
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d1e6      	bne.n	800df4c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2220      	movs	r2, #32
 800df82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2200      	movs	r2, #0
 800df8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800df92:	bf00      	nop
 800df94:	3754      	adds	r7, #84	@ 0x54
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr

0800df9e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800df9e:	b580      	push	{r7, lr}
 800dfa0:	b090      	sub	sp, #64	@ 0x40
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfaa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f003 0320 	and.w	r3, r3, #32
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d137      	bne.n	800e02a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800dfba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dfc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	3308      	adds	r3, #8
 800dfc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfcc:	e853 3f00 	ldrex	r3, [r3]
 800dfd0:	623b      	str	r3, [r7, #32]
   return(result);
 800dfd2:	6a3b      	ldr	r3, [r7, #32]
 800dfd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dfd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dfda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	3308      	adds	r3, #8
 800dfe0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dfe2:	633a      	str	r2, [r7, #48]	@ 0x30
 800dfe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dfe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfea:	e841 2300 	strex	r3, r2, [r1]
 800dfee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1e5      	bne.n	800dfc2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	e853 3f00 	ldrex	r3, [r3]
 800e002:	60fb      	str	r3, [r7, #12]
   return(result);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e00a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e00c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	461a      	mov	r2, r3
 800e012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e014:	61fb      	str	r3, [r7, #28]
 800e016:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e018:	69b9      	ldr	r1, [r7, #24]
 800e01a:	69fa      	ldr	r2, [r7, #28]
 800e01c:	e841 2300 	strex	r3, r2, [r1]
 800e020:	617b      	str	r3, [r7, #20]
   return(result);
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1e6      	bne.n	800dff6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e028:	e002      	b.n	800e030 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e02a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e02c:	f7ff f898 	bl	800d160 <HAL_UART_TxCpltCallback>
}
 800e030:	bf00      	nop
 800e032:	3740      	adds	r7, #64	@ 0x40
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e044:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f7ff f894 	bl	800d174 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e04c:	bf00      	nop
 800e04e:	3710      	adds	r7, #16
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b09c      	sub	sp, #112	@ 0x70
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e060:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f003 0320 	and.w	r3, r3, #32
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d171      	bne.n	800e154 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800e070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e072:	2200      	movs	r2, #0
 800e074:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e078:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e07e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e080:	e853 3f00 	ldrex	r3, [r3]
 800e084:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e08c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e08e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	461a      	mov	r2, r3
 800e094:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e096:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e098:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e09a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e09c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e09e:	e841 2300 	strex	r3, r2, [r1]
 800e0a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e0a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1e6      	bne.n	800e078 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	3308      	adds	r3, #8
 800e0b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0b4:	e853 3f00 	ldrex	r3, [r3]
 800e0b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0bc:	f023 0301 	bic.w	r3, r3, #1
 800e0c0:	667b      	str	r3, [r7, #100]	@ 0x64
 800e0c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	3308      	adds	r3, #8
 800e0c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e0ca:	647a      	str	r2, [r7, #68]	@ 0x44
 800e0cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e0d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e0d2:	e841 2300 	strex	r3, r2, [r1]
 800e0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e0d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d1e5      	bne.n	800e0aa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	3308      	adds	r3, #8
 800e0e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e8:	e853 3f00 	ldrex	r3, [r3]
 800e0ec:	623b      	str	r3, [r7, #32]
   return(result);
 800e0ee:	6a3b      	ldr	r3, [r7, #32]
 800e0f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0f4:	663b      	str	r3, [r7, #96]	@ 0x60
 800e0f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	3308      	adds	r3, #8
 800e0fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e0fe:	633a      	str	r2, [r7, #48]	@ 0x30
 800e100:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e106:	e841 2300 	strex	r3, r2, [r1]
 800e10a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d1e5      	bne.n	800e0de <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e114:	2220      	movs	r2, #32
 800e116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e11a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e11c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d118      	bne.n	800e154 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	e853 3f00 	ldrex	r3, [r3]
 800e12e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f023 0310 	bic.w	r3, r3, #16
 800e136:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	461a      	mov	r2, r3
 800e13e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e140:	61fb      	str	r3, [r7, #28]
 800e142:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e144:	69b9      	ldr	r1, [r7, #24]
 800e146:	69fa      	ldr	r2, [r7, #28]
 800e148:	e841 2300 	strex	r3, r2, [r1]
 800e14c:	617b      	str	r3, [r7, #20]
   return(result);
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d1e6      	bne.n	800e122 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e156:	2200      	movs	r2, #0
 800e158:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e15a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e15c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d107      	bne.n	800e172 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e164:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e168:	4619      	mov	r1, r3
 800e16a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e16c:	f7ff f816 	bl	800d19c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e170:	e002      	b.n	800e178 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800e172:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e174:	f007 ff52 	bl	801601c <HAL_UART_RxCpltCallback>
}
 800e178:	bf00      	nop
 800e17a:	3770      	adds	r7, #112	@ 0x70
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e18c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2201      	movs	r2, #1
 800e192:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d109      	bne.n	800e1b0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e1a2:	085b      	lsrs	r3, r3, #1
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	f7fe fff7 	bl	800d19c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e1ae:	e002      	b.n	800e1b6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f007 ff0b 	bl	8015fcc <HAL_UART_RxHalfCpltCallback>
}
 800e1b6:	bf00      	nop
 800e1b8:	3710      	adds	r7, #16
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b086      	sub	sp, #24
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1ca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1d2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e1da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1e6:	2b80      	cmp	r3, #128	@ 0x80
 800e1e8:	d109      	bne.n	800e1fe <UART_DMAError+0x40>
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	2b21      	cmp	r3, #33	@ 0x21
 800e1ee:	d106      	bne.n	800e1fe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e1f8:	6978      	ldr	r0, [r7, #20]
 800e1fa:	f7ff fe29 	bl	800de50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e208:	2b40      	cmp	r3, #64	@ 0x40
 800e20a:	d109      	bne.n	800e220 <UART_DMAError+0x62>
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2b22      	cmp	r3, #34	@ 0x22
 800e210:	d106      	bne.n	800e220 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	2200      	movs	r2, #0
 800e216:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e21a:	6978      	ldr	r0, [r7, #20]
 800e21c:	f7ff fe59 	bl	800ded2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e226:	f043 0210 	orr.w	r2, r3, #16
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e230:	6978      	ldr	r0, [r7, #20]
 800e232:	f7fe ffa9 	bl	800d188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e236:	bf00      	nop
 800e238:	3718      	adds	r7, #24
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e23e:	b580      	push	{r7, lr}
 800e240:	b084      	sub	sp, #16
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e24a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2200      	movs	r2, #0
 800e250:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2200      	movs	r2, #0
 800e258:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	f7fe ff93 	bl	800d188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e262:	bf00      	nop
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e26a:	b480      	push	{r7}
 800e26c:	b08f      	sub	sp, #60	@ 0x3c
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e278:	2b21      	cmp	r3, #33	@ 0x21
 800e27a:	d14c      	bne.n	800e316 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e282:	b29b      	uxth	r3, r3
 800e284:	2b00      	cmp	r3, #0
 800e286:	d132      	bne.n	800e2ee <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e28e:	6a3b      	ldr	r3, [r7, #32]
 800e290:	e853 3f00 	ldrex	r3, [r3]
 800e294:	61fb      	str	r3, [r7, #28]
   return(result);
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e29c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2a8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e2ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2ae:	e841 2300 	strex	r3, r2, [r1]
 800e2b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1e6      	bne.n	800e288 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	e853 3f00 	ldrex	r3, [r3]
 800e2c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d8:	61bb      	str	r3, [r7, #24]
 800e2da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2dc:	6979      	ldr	r1, [r7, #20]
 800e2de:	69ba      	ldr	r2, [r7, #24]
 800e2e0:	e841 2300 	strex	r3, r2, [r1]
 800e2e4:	613b      	str	r3, [r7, #16]
   return(result);
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d1e6      	bne.n	800e2ba <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e2ec:	e013      	b.n	800e316 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2f2:	781a      	ldrb	r2, [r3, #0]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2fe:	1c5a      	adds	r2, r3, #1
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	3b01      	subs	r3, #1
 800e30e:	b29a      	uxth	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e316:	bf00      	nop
 800e318:	373c      	adds	r7, #60	@ 0x3c
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr

0800e322 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e322:	b480      	push	{r7}
 800e324:	b091      	sub	sp, #68	@ 0x44
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e330:	2b21      	cmp	r3, #33	@ 0x21
 800e332:	d151      	bne.n	800e3d8 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d132      	bne.n	800e3a6 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e348:	e853 3f00 	ldrex	r3, [r3]
 800e34c:	623b      	str	r3, [r7, #32]
   return(result);
 800e34e:	6a3b      	ldr	r3, [r7, #32]
 800e350:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e354:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e35e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e360:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e366:	e841 2300 	strex	r3, r2, [r1]
 800e36a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d1e6      	bne.n	800e340 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	e853 3f00 	ldrex	r3, [r3]
 800e37e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e386:	637b      	str	r3, [r7, #52]	@ 0x34
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	461a      	mov	r2, r3
 800e38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e390:	61fb      	str	r3, [r7, #28]
 800e392:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e394:	69b9      	ldr	r1, [r7, #24]
 800e396:	69fa      	ldr	r2, [r7, #28]
 800e398:	e841 2300 	strex	r3, r2, [r1]
 800e39c:	617b      	str	r3, [r7, #20]
   return(result);
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d1e6      	bne.n	800e372 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e3a4:	e018      	b.n	800e3d8 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e3ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3ae:	881b      	ldrh	r3, [r3, #0]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e3ba:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3c0:	1c9a      	adds	r2, r3, #2
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	3b01      	subs	r3, #1
 800e3d0:	b29a      	uxth	r2, r3
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800e3d8:	bf00      	nop
 800e3da:	3744      	adds	r7, #68	@ 0x44
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b091      	sub	sp, #68	@ 0x44
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3f2:	2b21      	cmp	r3, #33	@ 0x21
 800e3f4:	d160      	bne.n	800e4b8 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e3fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e3fe:	e057      	b.n	800e4b0 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e406:	b29b      	uxth	r3, r3
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d133      	bne.n	800e474 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	3308      	adds	r3, #8
 800e412:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e416:	e853 3f00 	ldrex	r3, [r3]
 800e41a:	623b      	str	r3, [r7, #32]
   return(result);
 800e41c:	6a3b      	ldr	r3, [r7, #32]
 800e41e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e422:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	3308      	adds	r3, #8
 800e42a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e42c:	633a      	str	r2, [r7, #48]	@ 0x30
 800e42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e430:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e434:	e841 2300 	strex	r3, r2, [r1]
 800e438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1e5      	bne.n	800e40c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	e853 3f00 	ldrex	r3, [r3]
 800e44c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e454:	637b      	str	r3, [r7, #52]	@ 0x34
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	461a      	mov	r2, r3
 800e45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e45e:	61fb      	str	r3, [r7, #28]
 800e460:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e462:	69b9      	ldr	r1, [r7, #24]
 800e464:	69fa      	ldr	r2, [r7, #28]
 800e466:	e841 2300 	strex	r3, r2, [r1]
 800e46a:	617b      	str	r3, [r7, #20]
   return(result);
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d1e6      	bne.n	800e440 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e472:	e021      	b.n	800e4b8 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	69db      	ldr	r3, [r3, #28]
 800e47a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d013      	beq.n	800e4aa <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e486:	781a      	ldrb	r2, [r3, #0]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e492:	1c5a      	adds	r2, r3, #1
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	3b01      	subs	r3, #1
 800e4a2:	b29a      	uxth	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e4aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e4ac:	3b01      	subs	r3, #1
 800e4ae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e4b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d1a4      	bne.n	800e400 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e4b6:	e7ff      	b.n	800e4b8 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800e4b8:	bf00      	nop
 800e4ba:	3744      	adds	r7, #68	@ 0x44
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b091      	sub	sp, #68	@ 0x44
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4d2:	2b21      	cmp	r3, #33	@ 0x21
 800e4d4:	d165      	bne.n	800e5a2 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e4dc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e4de:	e05c      	b.n	800e59a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d133      	bne.n	800e554 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	3308      	adds	r3, #8
 800e4f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f4:	6a3b      	ldr	r3, [r7, #32]
 800e4f6:	e853 3f00 	ldrex	r3, [r3]
 800e4fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e502:	637b      	str	r3, [r7, #52]	@ 0x34
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	3308      	adds	r3, #8
 800e50a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e50c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e50e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e510:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e514:	e841 2300 	strex	r3, r2, [r1]
 800e518:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d1e5      	bne.n	800e4ec <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	e853 3f00 	ldrex	r3, [r3]
 800e52c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e534:	633b      	str	r3, [r7, #48]	@ 0x30
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	461a      	mov	r2, r3
 800e53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e53e:	61bb      	str	r3, [r7, #24]
 800e540:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e542:	6979      	ldr	r1, [r7, #20]
 800e544:	69ba      	ldr	r2, [r7, #24]
 800e546:	e841 2300 	strex	r3, r2, [r1]
 800e54a:	613b      	str	r3, [r7, #16]
   return(result);
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d1e6      	bne.n	800e520 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e552:	e026      	b.n	800e5a2 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	69db      	ldr	r3, [r3, #28]
 800e55a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d018      	beq.n	800e594 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e566:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56a:	881b      	ldrh	r3, [r3, #0]
 800e56c:	461a      	mov	r2, r3
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e576:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e57c:	1c9a      	adds	r2, r3, #2
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e588:	b29b      	uxth	r3, r3
 800e58a:	3b01      	subs	r3, #1
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e594:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e596:	3b01      	subs	r3, #1
 800e598:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e59a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d19f      	bne.n	800e4e0 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e5a0:	e7ff      	b.n	800e5a2 <UART_TxISR_16BIT_FIFOEN+0xde>
 800e5a2:	bf00      	nop
 800e5a4:	3744      	adds	r7, #68	@ 0x44
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr

0800e5ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b088      	sub	sp, #32
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	e853 3f00 	ldrex	r3, [r3]
 800e5c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5ca:	61fb      	str	r3, [r7, #28]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	61bb      	str	r3, [r7, #24]
 800e5d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d8:	6979      	ldr	r1, [r7, #20]
 800e5da:	69ba      	ldr	r2, [r7, #24]
 800e5dc:	e841 2300 	strex	r3, r2, [r1]
 800e5e0:	613b      	str	r3, [r7, #16]
   return(result);
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1e6      	bne.n	800e5b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2220      	movs	r2, #32
 800e5ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7fe fdb2 	bl	800d160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5fc:	bf00      	nop
 800e5fe:	3720      	adds	r7, #32
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b09c      	sub	sp, #112	@ 0x70
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e612:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e61c:	2b22      	cmp	r3, #34	@ 0x22
 800e61e:	f040 80be 	bne.w	800e79e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e628:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e62c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e630:	b2d9      	uxtb	r1, r3
 800e632:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e636:	b2da      	uxtb	r2, r3
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e63c:	400a      	ands	r2, r1
 800e63e:	b2d2      	uxtb	r2, r2
 800e640:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e646:	1c5a      	adds	r2, r3, #1
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e652:	b29b      	uxth	r3, r3
 800e654:	3b01      	subs	r3, #1
 800e656:	b29a      	uxth	r2, r3
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e664:	b29b      	uxth	r3, r3
 800e666:	2b00      	cmp	r3, #0
 800e668:	f040 80a1 	bne.w	800e7ae <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e674:	e853 3f00 	ldrex	r3, [r3]
 800e678:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e67a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e67c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e680:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	461a      	mov	r2, r3
 800e688:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e68a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e68c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e68e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e690:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e692:	e841 2300 	strex	r3, r2, [r1]
 800e696:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e698:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1e6      	bne.n	800e66c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	3308      	adds	r3, #8
 800e6a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6a8:	e853 3f00 	ldrex	r3, [r3]
 800e6ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6b0:	f023 0301 	bic.w	r3, r3, #1
 800e6b4:	667b      	str	r3, [r7, #100]	@ 0x64
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	3308      	adds	r3, #8
 800e6bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e6be:	647a      	str	r2, [r7, #68]	@ 0x44
 800e6c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e6c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6c6:	e841 2300 	strex	r3, r2, [r1]
 800e6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e6cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1e5      	bne.n	800e69e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2220      	movs	r2, #32
 800e6d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a33      	ldr	r2, [pc, #204]	@ (800e7b8 <UART_RxISR_8BIT+0x1b4>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d01f      	beq.n	800e730 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	685b      	ldr	r3, [r3, #4]
 800e6f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d018      	beq.n	800e730 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e706:	e853 3f00 	ldrex	r3, [r3]
 800e70a:	623b      	str	r3, [r7, #32]
   return(result);
 800e70c:	6a3b      	ldr	r3, [r7, #32]
 800e70e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e712:	663b      	str	r3, [r7, #96]	@ 0x60
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	461a      	mov	r2, r3
 800e71a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e71c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e71e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e720:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e724:	e841 2300 	strex	r3, r2, [r1]
 800e728:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1e6      	bne.n	800e6fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e734:	2b01      	cmp	r3, #1
 800e736:	d12e      	bne.n	800e796 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2200      	movs	r2, #0
 800e73c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	e853 3f00 	ldrex	r3, [r3]
 800e74a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f023 0310 	bic.w	r3, r3, #16
 800e752:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	461a      	mov	r2, r3
 800e75a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e75c:	61fb      	str	r3, [r7, #28]
 800e75e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e760:	69b9      	ldr	r1, [r7, #24]
 800e762:	69fa      	ldr	r2, [r7, #28]
 800e764:	e841 2300 	strex	r3, r2, [r1]
 800e768:	617b      	str	r3, [r7, #20]
   return(result);
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d1e6      	bne.n	800e73e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	69db      	ldr	r3, [r3, #28]
 800e776:	f003 0310 	and.w	r3, r3, #16
 800e77a:	2b10      	cmp	r3, #16
 800e77c:	d103      	bne.n	800e786 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2210      	movs	r2, #16
 800e784:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e78c:	4619      	mov	r1, r3
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f7fe fd04 	bl	800d19c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e794:	e00b      	b.n	800e7ae <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f007 fc40 	bl	801601c <HAL_UART_RxCpltCallback>
}
 800e79c:	e007      	b.n	800e7ae <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	699a      	ldr	r2, [r3, #24]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f042 0208 	orr.w	r2, r2, #8
 800e7ac:	619a      	str	r2, [r3, #24]
}
 800e7ae:	bf00      	nop
 800e7b0:	3770      	adds	r7, #112	@ 0x70
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	40008000 	.word	0x40008000

0800e7bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b09c      	sub	sp, #112	@ 0x70
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e7ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7d4:	2b22      	cmp	r3, #34	@ 0x22
 800e7d6:	f040 80be 	bne.w	800e956 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e7ea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e7ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e7f2:	4013      	ands	r3, r2
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e7f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7fe:	1c9a      	adds	r2, r3, #2
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	3b01      	subs	r3, #1
 800e80e:	b29a      	uxth	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	2b00      	cmp	r3, #0
 800e820:	f040 80a1 	bne.w	800e966 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e82a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e82c:	e853 3f00 	ldrex	r3, [r3]
 800e830:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e834:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e838:	667b      	str	r3, [r7, #100]	@ 0x64
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	461a      	mov	r2, r3
 800e840:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e842:	657b      	str	r3, [r7, #84]	@ 0x54
 800e844:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e846:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e848:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e84a:	e841 2300 	strex	r3, r2, [r1]
 800e84e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e852:	2b00      	cmp	r3, #0
 800e854:	d1e6      	bne.n	800e824 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	3308      	adds	r3, #8
 800e85c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e85e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e860:	e853 3f00 	ldrex	r3, [r3]
 800e864:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e868:	f023 0301 	bic.w	r3, r3, #1
 800e86c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	3308      	adds	r3, #8
 800e874:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e876:	643a      	str	r2, [r7, #64]	@ 0x40
 800e878:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e87a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e87c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e87e:	e841 2300 	strex	r3, r2, [r1]
 800e882:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1e5      	bne.n	800e856 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2220      	movs	r2, #32
 800e88e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2200      	movs	r2, #0
 800e896:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a33      	ldr	r2, [pc, #204]	@ (800e970 <UART_RxISR_16BIT+0x1b4>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d01f      	beq.n	800e8e8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d018      	beq.n	800e8e8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8bc:	6a3b      	ldr	r3, [r7, #32]
 800e8be:	e853 3f00 	ldrex	r3, [r3]
 800e8c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e8ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e8d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e8d6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e8da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8dc:	e841 2300 	strex	r3, r2, [r1]
 800e8e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d1e6      	bne.n	800e8b6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d12e      	bne.n	800e94e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	e853 3f00 	ldrex	r3, [r3]
 800e902:	60bb      	str	r3, [r7, #8]
   return(result);
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	f023 0310 	bic.w	r3, r3, #16
 800e90a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	461a      	mov	r2, r3
 800e912:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e914:	61bb      	str	r3, [r7, #24]
 800e916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e918:	6979      	ldr	r1, [r7, #20]
 800e91a:	69ba      	ldr	r2, [r7, #24]
 800e91c:	e841 2300 	strex	r3, r2, [r1]
 800e920:	613b      	str	r3, [r7, #16]
   return(result);
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1e6      	bne.n	800e8f6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	69db      	ldr	r3, [r3, #28]
 800e92e:	f003 0310 	and.w	r3, r3, #16
 800e932:	2b10      	cmp	r3, #16
 800e934:	d103      	bne.n	800e93e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	2210      	movs	r2, #16
 800e93c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e944:	4619      	mov	r1, r3
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7fe fc28 	bl	800d19c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e94c:	e00b      	b.n	800e966 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f007 fb64 	bl	801601c <HAL_UART_RxCpltCallback>
}
 800e954:	e007      	b.n	800e966 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	699a      	ldr	r2, [r3, #24]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f042 0208 	orr.w	r2, r2, #8
 800e964:	619a      	str	r2, [r3, #24]
}
 800e966:	bf00      	nop
 800e968:	3770      	adds	r7, #112	@ 0x70
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	40008000 	.word	0x40008000

0800e974 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b0ac      	sub	sp, #176	@ 0xb0
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e982:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	69db      	ldr	r3, [r3, #28]
 800e98c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e9aa:	2b22      	cmp	r3, #34	@ 0x22
 800e9ac:	f040 8183 	bne.w	800ecb6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e9b6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e9ba:	e126      	b.n	800ec0a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9c2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e9c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e9ca:	b2d9      	uxtb	r1, r3
 800e9cc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e9d0:	b2da      	uxtb	r2, r3
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9d6:	400a      	ands	r2, r1
 800e9d8:	b2d2      	uxtb	r2, r2
 800e9da:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9e0:	1c5a      	adds	r2, r3, #1
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	3b01      	subs	r3, #1
 800e9f0:	b29a      	uxth	r2, r3
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	69db      	ldr	r3, [r3, #28]
 800e9fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ea02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea06:	f003 0307 	and.w	r3, r3, #7
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d053      	beq.n	800eab6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ea0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea12:	f003 0301 	and.w	r3, r3, #1
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d011      	beq.n	800ea3e <UART_RxISR_8BIT_FIFOEN+0xca>
 800ea1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d00b      	beq.n	800ea3e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea34:	f043 0201 	orr.w	r2, r3, #1
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea42:	f003 0302 	and.w	r3, r3, #2
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d011      	beq.n	800ea6e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ea4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ea4e:	f003 0301 	and.w	r3, r3, #1
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d00b      	beq.n	800ea6e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2202      	movs	r2, #2
 800ea5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea64:	f043 0204 	orr.w	r2, r3, #4
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea72:	f003 0304 	and.w	r3, r3, #4
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d011      	beq.n	800ea9e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ea7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ea7e:	f003 0301 	and.w	r3, r3, #1
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d00b      	beq.n	800ea9e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2204      	movs	r2, #4
 800ea8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea94:	f043 0202 	orr.w	r2, r3, #2
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d006      	beq.n	800eab6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7fe fb6d 	bl	800d188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2200      	movs	r2, #0
 800eab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	f040 80a3 	bne.w	800ec0a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eacc:	e853 3f00 	ldrex	r3, [r3]
 800ead0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ead2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ead4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ead8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	461a      	mov	r2, r3
 800eae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800eae8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaea:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800eaec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800eaee:	e841 2300 	strex	r3, r2, [r1]
 800eaf2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800eaf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1e4      	bne.n	800eac4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	3308      	adds	r3, #8
 800eb00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb04:	e853 3f00 	ldrex	r3, [r3]
 800eb08:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800eb0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eb10:	f023 0301 	bic.w	r3, r3, #1
 800eb14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	3308      	adds	r3, #8
 800eb1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800eb22:	66ba      	str	r2, [r7, #104]	@ 0x68
 800eb24:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb26:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800eb28:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800eb2a:	e841 2300 	strex	r3, r2, [r1]
 800eb2e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800eb30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d1e1      	bne.n	800eafa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2220      	movs	r2, #32
 800eb3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4a60      	ldr	r2, [pc, #384]	@ (800ecd0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d021      	beq.n	800eb98 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	685b      	ldr	r3, [r3, #4]
 800eb5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d01a      	beq.n	800eb98 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb6a:	e853 3f00 	ldrex	r3, [r3]
 800eb6e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800eb70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eb76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	461a      	mov	r2, r3
 800eb80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800eb84:	657b      	str	r3, [r7, #84]	@ 0x54
 800eb86:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb88:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eb8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eb8c:	e841 2300 	strex	r3, r2, [r1]
 800eb90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800eb92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d1e4      	bne.n	800eb62 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d130      	bne.n	800ec02 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2200      	movs	r2, #0
 800eba4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebae:	e853 3f00 	ldrex	r3, [r3]
 800ebb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ebb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebb6:	f023 0310 	bic.w	r3, r3, #16
 800ebba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ebc8:	643b      	str	r3, [r7, #64]	@ 0x40
 800ebca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ebce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ebd0:	e841 2300 	strex	r3, r2, [r1]
 800ebd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ebd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d1e4      	bne.n	800eba6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	69db      	ldr	r3, [r3, #28]
 800ebe2:	f003 0310 	and.w	r3, r3, #16
 800ebe6:	2b10      	cmp	r3, #16
 800ebe8:	d103      	bne.n	800ebf2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	2210      	movs	r2, #16
 800ebf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7fe face 	bl	800d19c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ec00:	e00e      	b.n	800ec20 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f007 fa0a 	bl	801601c <HAL_UART_RxCpltCallback>
        break;
 800ec08:	e00a      	b.n	800ec20 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ec0a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d006      	beq.n	800ec20 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800ec12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec16:	f003 0320 	and.w	r3, r3, #32
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	f47f aece 	bne.w	800e9bc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec26:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ec2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d049      	beq.n	800ecc6 <UART_RxISR_8BIT_FIFOEN+0x352>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ec38:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d242      	bcs.n	800ecc6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	3308      	adds	r3, #8
 800ec46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec48:	6a3b      	ldr	r3, [r7, #32]
 800ec4a:	e853 3f00 	ldrex	r3, [r3]
 800ec4e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ec56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	3308      	adds	r3, #8
 800ec60:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ec64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ec66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ec6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec6c:	e841 2300 	strex	r3, r2, [r1]
 800ec70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ec72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1e3      	bne.n	800ec40 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a16      	ldr	r2, [pc, #88]	@ (800ecd4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800ec7c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	e853 3f00 	ldrex	r3, [r3]
 800ec8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	f043 0320 	orr.w	r3, r3, #32
 800ec92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eca0:	61bb      	str	r3, [r7, #24]
 800eca2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca4:	6979      	ldr	r1, [r7, #20]
 800eca6:	69ba      	ldr	r2, [r7, #24]
 800eca8:	e841 2300 	strex	r3, r2, [r1]
 800ecac:	613b      	str	r3, [r7, #16]
   return(result);
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d1e4      	bne.n	800ec7e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ecb4:	e007      	b.n	800ecc6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	699a      	ldr	r2, [r3, #24]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f042 0208 	orr.w	r2, r2, #8
 800ecc4:	619a      	str	r2, [r3, #24]
}
 800ecc6:	bf00      	nop
 800ecc8:	37b0      	adds	r7, #176	@ 0xb0
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	40008000 	.word	0x40008000
 800ecd4:	0800e605 	.word	0x0800e605

0800ecd8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b0ae      	sub	sp, #184	@ 0xb8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ece6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	69db      	ldr	r3, [r3, #28]
 800ecf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed0e:	2b22      	cmp	r3, #34	@ 0x22
 800ed10:	f040 8187 	bne.w	800f022 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ed1a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ed1e:	e12a      	b.n	800ef76 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed26:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ed32:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ed36:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ed3a:	4013      	ands	r3, r2
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed48:	1c9a      	adds	r2, r3, #2
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	3b01      	subs	r3, #1
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	69db      	ldr	r3, [r3, #28]
 800ed66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ed6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ed6e:	f003 0307 	and.w	r3, r3, #7
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d053      	beq.n	800ee1e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ed76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ed7a:	f003 0301 	and.w	r3, r3, #1
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d011      	beq.n	800eda6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ed82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d00b      	beq.n	800eda6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2201      	movs	r2, #1
 800ed94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed9c:	f043 0201 	orr.w	r2, r3, #1
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eda6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800edaa:	f003 0302 	and.w	r3, r3, #2
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d011      	beq.n	800edd6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800edb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800edb6:	f003 0301 	and.w	r3, r3, #1
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d00b      	beq.n	800edd6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2202      	movs	r2, #2
 800edc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edcc:	f043 0204 	orr.w	r2, r3, #4
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800edd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800edda:	f003 0304 	and.w	r3, r3, #4
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d011      	beq.n	800ee06 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ede2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ede6:	f003 0301 	and.w	r3, r3, #1
 800edea:	2b00      	cmp	r3, #0
 800edec:	d00b      	beq.n	800ee06 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	2204      	movs	r2, #4
 800edf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edfc:	f043 0202 	orr.w	r2, r3, #2
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d006      	beq.n	800ee1e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f7fe f9b9 	bl	800d188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	f040 80a5 	bne.w	800ef76 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ee34:	e853 3f00 	ldrex	r3, [r3]
 800ee38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ee3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ee3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ee40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	461a      	mov	r2, r3
 800ee4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ee4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ee52:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ee56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ee5a:	e841 2300 	strex	r3, r2, [r1]
 800ee5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ee60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d1e2      	bne.n	800ee2c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	3308      	adds	r3, #8
 800ee6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ee70:	e853 3f00 	ldrex	r3, [r3]
 800ee74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ee76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ee7c:	f023 0301 	bic.w	r3, r3, #1
 800ee80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	3308      	adds	r3, #8
 800ee8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ee8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ee90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ee94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ee96:	e841 2300 	strex	r3, r2, [r1]
 800ee9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ee9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d1e1      	bne.n	800ee66 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2220      	movs	r2, #32
 800eea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2200      	movs	r2, #0
 800eeae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4a60      	ldr	r2, [pc, #384]	@ (800f03c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d021      	beq.n	800ef04 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d01a      	beq.n	800ef04 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eed6:	e853 3f00 	ldrex	r3, [r3]
 800eeda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800eedc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eede:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eee2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	461a      	mov	r2, r3
 800eeec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800eef0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eef2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eef4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eef6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eef8:	e841 2300 	strex	r3, r2, [r1]
 800eefc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800eefe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d1e4      	bne.n	800eece <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef08:	2b01      	cmp	r3, #1
 800ef0a:	d130      	bne.n	800ef6e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef1a:	e853 3f00 	ldrex	r3, [r3]
 800ef1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ef20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef22:	f023 0310 	bic.w	r3, r3, #16
 800ef26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ef34:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ef3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ef3c:	e841 2300 	strex	r3, r2, [r1]
 800ef40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ef42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d1e4      	bne.n	800ef12 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	69db      	ldr	r3, [r3, #28]
 800ef4e:	f003 0310 	and.w	r3, r3, #16
 800ef52:	2b10      	cmp	r3, #16
 800ef54:	d103      	bne.n	800ef5e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2210      	movs	r2, #16
 800ef5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ef64:	4619      	mov	r1, r3
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f7fe f918 	bl	800d19c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ef6c:	e00e      	b.n	800ef8c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f007 f854 	bl	801601c <HAL_UART_RxCpltCallback>
        break;
 800ef74:	e00a      	b.n	800ef8c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef76:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d006      	beq.n	800ef8c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800ef7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ef82:	f003 0320 	and.w	r3, r3, #32
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	f47f aeca 	bne.w	800ed20 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef92:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ef96:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d049      	beq.n	800f032 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800efa4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d242      	bcs.n	800f032 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	3308      	adds	r3, #8
 800efb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb6:	e853 3f00 	ldrex	r3, [r3]
 800efba:	623b      	str	r3, [r7, #32]
   return(result);
 800efbc:	6a3b      	ldr	r3, [r7, #32]
 800efbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800efc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	3308      	adds	r3, #8
 800efcc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800efd0:	633a      	str	r2, [r7, #48]	@ 0x30
 800efd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800efd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efd8:	e841 2300 	strex	r3, r2, [r1]
 800efdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800efde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d1e3      	bne.n	800efac <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	4a16      	ldr	r2, [pc, #88]	@ (800f040 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800efe8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	e853 3f00 	ldrex	r3, [r3]
 800eff6:	60fb      	str	r3, [r7, #12]
   return(result);
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f043 0320 	orr.w	r3, r3, #32
 800effe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	461a      	mov	r2, r3
 800f008:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f00c:	61fb      	str	r3, [r7, #28]
 800f00e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f010:	69b9      	ldr	r1, [r7, #24]
 800f012:	69fa      	ldr	r2, [r7, #28]
 800f014:	e841 2300 	strex	r3, r2, [r1]
 800f018:	617b      	str	r3, [r7, #20]
   return(result);
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d1e4      	bne.n	800efea <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f020:	e007      	b.n	800f032 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	699a      	ldr	r2, [r3, #24]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f042 0208 	orr.w	r2, r2, #8
 800f030:	619a      	str	r2, [r3, #24]
}
 800f032:	bf00      	nop
 800f034:	37b8      	adds	r7, #184	@ 0xb8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	40008000 	.word	0x40008000
 800f040:	0800e7bd 	.word	0x0800e7bd

0800f044 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f060:	bf00      	nop
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f074:	bf00      	nop
 800f076:	370c      	adds	r7, #12
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr

0800f080 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f080:	b480      	push	{r7}
 800f082:	b085      	sub	sp, #20
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f08e:	2b01      	cmp	r3, #1
 800f090:	d101      	bne.n	800f096 <HAL_UARTEx_DisableFifoMode+0x16>
 800f092:	2302      	movs	r3, #2
 800f094:	e027      	b.n	800f0e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2201      	movs	r2, #1
 800f09a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2224      	movs	r2, #36	@ 0x24
 800f0a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f022 0201 	bic.w	r2, r2, #1
 800f0bc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f0c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	68fa      	ldr	r2, [r7, #12]
 800f0d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2220      	movs	r2, #32
 800f0d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f0e4:	2300      	movs	r3, #0
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3714      	adds	r7, #20
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr

0800f0f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b084      	sub	sp, #16
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
 800f0fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f102:	2b01      	cmp	r3, #1
 800f104:	d101      	bne.n	800f10a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f106:	2302      	movs	r3, #2
 800f108:	e02d      	b.n	800f166 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2201      	movs	r2, #1
 800f10e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2224      	movs	r2, #36	@ 0x24
 800f116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f022 0201 	bic.w	r2, r2, #1
 800f130:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	689b      	ldr	r3, [r3, #8]
 800f138:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	683a      	ldr	r2, [r7, #0]
 800f142:	430a      	orrs	r2, r1
 800f144:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 f850 	bl	800f1ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	68fa      	ldr	r2, [r7, #12]
 800f152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2220      	movs	r2, #32
 800f158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2200      	movs	r2, #0
 800f160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f164:	2300      	movs	r3, #0
}
 800f166:	4618      	mov	r0, r3
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b084      	sub	sp, #16
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
 800f176:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d101      	bne.n	800f186 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f182:	2302      	movs	r3, #2
 800f184:	e02d      	b.n	800f1e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2201      	movs	r2, #1
 800f18a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2224      	movs	r2, #36	@ 0x24
 800f192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f022 0201 	bic.w	r2, r2, #1
 800f1ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	683a      	ldr	r2, [r7, #0]
 800f1be:	430a      	orrs	r2, r1
 800f1c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f000 f812 	bl	800f1ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	68fa      	ldr	r2, [r7, #12]
 800f1ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2220      	movs	r2, #32
 800f1d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
	...

0800f1ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b085      	sub	sp, #20
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d108      	bne.n	800f20e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2201      	movs	r2, #1
 800f200:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2201      	movs	r2, #1
 800f208:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f20c:	e031      	b.n	800f272 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f20e:	2308      	movs	r3, #8
 800f210:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f212:	2308      	movs	r3, #8
 800f214:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	0e5b      	lsrs	r3, r3, #25
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	f003 0307 	and.w	r3, r3, #7
 800f224:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	689b      	ldr	r3, [r3, #8]
 800f22c:	0f5b      	lsrs	r3, r3, #29
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	f003 0307 	and.w	r3, r3, #7
 800f234:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f236:	7bbb      	ldrb	r3, [r7, #14]
 800f238:	7b3a      	ldrb	r2, [r7, #12]
 800f23a:	4911      	ldr	r1, [pc, #68]	@ (800f280 <UARTEx_SetNbDataToProcess+0x94>)
 800f23c:	5c8a      	ldrb	r2, [r1, r2]
 800f23e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f242:	7b3a      	ldrb	r2, [r7, #12]
 800f244:	490f      	ldr	r1, [pc, #60]	@ (800f284 <UARTEx_SetNbDataToProcess+0x98>)
 800f246:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f248:	fb93 f3f2 	sdiv	r3, r3, r2
 800f24c:	b29a      	uxth	r2, r3
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f254:	7bfb      	ldrb	r3, [r7, #15]
 800f256:	7b7a      	ldrb	r2, [r7, #13]
 800f258:	4909      	ldr	r1, [pc, #36]	@ (800f280 <UARTEx_SetNbDataToProcess+0x94>)
 800f25a:	5c8a      	ldrb	r2, [r1, r2]
 800f25c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f260:	7b7a      	ldrb	r2, [r7, #13]
 800f262:	4908      	ldr	r1, [pc, #32]	@ (800f284 <UARTEx_SetNbDataToProcess+0x98>)
 800f264:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f266:	fb93 f3f2 	sdiv	r3, r3, r2
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f272:	bf00      	nop
 800f274:	3714      	adds	r7, #20
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop
 800f280:	0801c308 	.word	0x0801c308
 800f284:	0801c310 	.word	0x0801c310

0800f288 <LL_DMA_ConfigTransfer>:
{
 800f288:	b480      	push	{r7}
 800f28a:	b087      	sub	sp, #28
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800f298:	4a0e      	ldr	r2, [pc, #56]	@ (800f2d4 <LL_DMA_ConfigTransfer+0x4c>)
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	4413      	add	r3, r2
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	4413      	add	r3, r2
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800f2ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2b0:	4908      	ldr	r1, [pc, #32]	@ (800f2d4 <LL_DMA_ConfigTransfer+0x4c>)
 800f2b2:	68ba      	ldr	r2, [r7, #8]
 800f2b4:	440a      	add	r2, r1
 800f2b6:	7812      	ldrb	r2, [r2, #0]
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	697a      	ldr	r2, [r7, #20]
 800f2bc:	440a      	add	r2, r1
 800f2be:	4611      	mov	r1, r2
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	600b      	str	r3, [r1, #0]
}
 800f2c6:	bf00      	nop
 800f2c8:	371c      	adds	r7, #28
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr
 800f2d2:	bf00      	nop
 800f2d4:	0801c318 	.word	0x0801c318

0800f2d8 <LL_DMA_SetDataLength>:
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b087      	sub	sp, #28
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800f2e8:	4a0d      	ldr	r2, [pc, #52]	@ (800f320 <LL_DMA_SetDataLength+0x48>)
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	0c1b      	lsrs	r3, r3, #16
 800f2fa:	041b      	lsls	r3, r3, #16
 800f2fc:	4908      	ldr	r1, [pc, #32]	@ (800f320 <LL_DMA_SetDataLength+0x48>)
 800f2fe:	68ba      	ldr	r2, [r7, #8]
 800f300:	440a      	add	r2, r1
 800f302:	7812      	ldrb	r2, [r2, #0]
 800f304:	4611      	mov	r1, r2
 800f306:	697a      	ldr	r2, [r7, #20]
 800f308:	440a      	add	r2, r1
 800f30a:	4611      	mov	r1, r2
 800f30c:	687a      	ldr	r2, [r7, #4]
 800f30e:	4313      	orrs	r3, r2
 800f310:	604b      	str	r3, [r1, #4]
}
 800f312:	bf00      	nop
 800f314:	371c      	adds	r7, #28
 800f316:	46bd      	mov	sp, r7
 800f318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31c:	4770      	bx	lr
 800f31e:	bf00      	nop
 800f320:	0801c318 	.word	0x0801c318

0800f324 <LL_DMA_SetMemoryAddress>:
{
 800f324:	b480      	push	{r7}
 800f326:	b087      	sub	sp, #28
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800f334:	4a07      	ldr	r2, [pc, #28]	@ (800f354 <LL_DMA_SetMemoryAddress+0x30>)
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	4413      	add	r3, r2
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	461a      	mov	r2, r3
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	4413      	add	r3, r2
 800f342:	461a      	mov	r2, r3
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	60d3      	str	r3, [r2, #12]
}
 800f348:	bf00      	nop
 800f34a:	371c      	adds	r7, #28
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr
 800f354:	0801c318 	.word	0x0801c318

0800f358 <LL_DMA_SetPeriphAddress>:
{
 800f358:	b480      	push	{r7}
 800f35a:	b087      	sub	sp, #28
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800f368:	4a07      	ldr	r2, [pc, #28]	@ (800f388 <LL_DMA_SetPeriphAddress+0x30>)
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	4413      	add	r3, r2
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	461a      	mov	r2, r3
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	4413      	add	r3, r2
 800f376:	461a      	mov	r2, r3
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6093      	str	r3, [r2, #8]
}
 800f37c:	bf00      	nop
 800f37e:	371c      	adds	r7, #28
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr
 800f388:	0801c318 	.word	0x0801c318

0800f38c <LL_DMA_SetPeriphRequest>:
{
 800f38c:	b480      	push	{r7}
 800f38e:	b087      	sub	sp, #28
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	0a9b      	lsrs	r3, r3, #10
 800f39c:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800f3a0:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 800f3a4:	00db      	lsls	r3, r3, #3
 800f3a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800f3a8:	68ba      	ldr	r2, [r7, #8]
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3b4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800f3be:	68ba      	ldr	r2, [r7, #8]
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	009b      	lsls	r3, r3, #2
 800f3c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3ca:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	430a      	orrs	r2, r1
 800f3d2:	601a      	str	r2, [r3, #0]
}
 800f3d4:	bf00      	nop
 800f3d6:	371c      	adds	r7, #28
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f3f4:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800f3fa:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800f400:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800f406:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800f40c:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f412:	4313      	orrs	r3, r2
 800f414:	461a      	mov	r2, r3
 800f416:	68b9      	ldr	r1, [r7, #8]
 800f418:	68f8      	ldr	r0, [r7, #12]
 800f41a:	f7ff ff35 	bl	800f288 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	461a      	mov	r2, r3
 800f424:	68b9      	ldr	r1, [r7, #8]
 800f426:	68f8      	ldr	r0, [r7, #12]
 800f428:	f7ff ff7c 	bl	800f324 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	461a      	mov	r2, r3
 800f432:	68b9      	ldr	r1, [r7, #8]
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	f7ff ff8f 	bl	800f358 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6a1b      	ldr	r3, [r3, #32]
 800f43e:	461a      	mov	r2, r3
 800f440:	68b9      	ldr	r1, [r7, #8]
 800f442:	68f8      	ldr	r0, [r7, #12]
 800f444:	f7ff ff48 	bl	800f2d8 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f44c:	461a      	mov	r2, r3
 800f44e:	68b9      	ldr	r1, [r7, #8]
 800f450:	68f8      	ldr	r0, [r7, #12]
 800f452:	f7ff ff9b 	bl	800f38c <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 800f456:	2300      	movs	r3, #0
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800f460:	b480      	push	{r7}
 800f462:	b083      	sub	sp, #12
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = (uint32_t)0x00000000U;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2200      	movs	r2, #0
 800f46c:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = (uint32_t)0x00000000U;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2200      	movs	r2, #0
 800f472:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2200      	movs	r2, #0
 800f47e:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2200      	movs	r2, #0
 800f48a:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2200      	movs	r2, #0
 800f490:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = (uint32_t)0x00000000U;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f4aa:	bf00      	nop
 800f4ac:	370c      	adds	r7, #12
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b4:	4770      	bx	lr

0800f4b6 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800f4b6:	b480      	push	{r7}
 800f4b8:	b08b      	sub	sp, #44	@ 0x2c
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	60f8      	str	r0, [r7, #12]
 800f4be:	60b9      	str	r1, [r7, #8]
 800f4c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	fa93 f3a3 	rbit	r3, r3
 800f4d0:	613b      	str	r3, [r7, #16]
  return result;
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d101      	bne.n	800f4e0 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800f4dc:	2320      	movs	r3, #32
 800f4de:	e003      	b.n	800f4e8 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	fab3 f383 	clz	r3, r3
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	005b      	lsls	r3, r3, #1
 800f4ea:	2103      	movs	r1, #3
 800f4ec:	fa01 f303 	lsl.w	r3, r1, r3
 800f4f0:	43db      	mvns	r3, r3
 800f4f2:	401a      	ands	r2, r3
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f4f8:	6a3b      	ldr	r3, [r7, #32]
 800f4fa:	fa93 f3a3 	rbit	r3, r3
 800f4fe:	61fb      	str	r3, [r7, #28]
  return result;
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f506:	2b00      	cmp	r3, #0
 800f508:	d101      	bne.n	800f50e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800f50a:	2320      	movs	r3, #32
 800f50c:	e003      	b.n	800f516 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800f50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f510:	fab3 f383 	clz	r3, r3
 800f514:	b2db      	uxtb	r3, r3
 800f516:	005b      	lsls	r3, r3, #1
 800f518:	6879      	ldr	r1, [r7, #4]
 800f51a:	fa01 f303 	lsl.w	r3, r1, r3
 800f51e:	431a      	orrs	r2, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	601a      	str	r2, [r3, #0]
}
 800f524:	bf00      	nop
 800f526:	372c      	adds	r7, #44	@ 0x2c
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800f530:	b480      	push	{r7}
 800f532:	b085      	sub	sp, #20
 800f534:	af00      	add	r7, sp, #0
 800f536:	60f8      	str	r0, [r7, #12]
 800f538:	60b9      	str	r1, [r7, #8]
 800f53a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	685a      	ldr	r2, [r3, #4]
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	43db      	mvns	r3, r3
 800f544:	401a      	ands	r2, r3
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	6879      	ldr	r1, [r7, #4]
 800f54a:	fb01 f303 	mul.w	r3, r1, r3
 800f54e:	431a      	orrs	r2, r3
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	605a      	str	r2, [r3, #4]
}
 800f554:	bf00      	nop
 800f556:	3714      	adds	r7, #20
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800f560:	b480      	push	{r7}
 800f562:	b08b      	sub	sp, #44	@ 0x2c
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	689a      	ldr	r2, [r3, #8]
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	fa93 f3a3 	rbit	r3, r3
 800f57a:	613b      	str	r3, [r7, #16]
  return result;
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f580:	69bb      	ldr	r3, [r7, #24]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d101      	bne.n	800f58a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800f586:	2320      	movs	r3, #32
 800f588:	e003      	b.n	800f592 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800f58a:	69bb      	ldr	r3, [r7, #24]
 800f58c:	fab3 f383 	clz	r3, r3
 800f590:	b2db      	uxtb	r3, r3
 800f592:	005b      	lsls	r3, r3, #1
 800f594:	2103      	movs	r1, #3
 800f596:	fa01 f303 	lsl.w	r3, r1, r3
 800f59a:	43db      	mvns	r3, r3
 800f59c:	401a      	ands	r2, r3
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f5a2:	6a3b      	ldr	r3, [r7, #32]
 800f5a4:	fa93 f3a3 	rbit	r3, r3
 800f5a8:	61fb      	str	r3, [r7, #28]
  return result;
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d101      	bne.n	800f5b8 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800f5b4:	2320      	movs	r3, #32
 800f5b6:	e003      	b.n	800f5c0 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800f5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ba:	fab3 f383 	clz	r3, r3
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	005b      	lsls	r3, r3, #1
 800f5c2:	6879      	ldr	r1, [r7, #4]
 800f5c4:	fa01 f303 	lsl.w	r3, r1, r3
 800f5c8:	431a      	orrs	r2, r3
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800f5ce:	bf00      	nop
 800f5d0:	372c      	adds	r7, #44	@ 0x2c
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr

0800f5da <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800f5da:	b480      	push	{r7}
 800f5dc:	b08b      	sub	sp, #44	@ 0x2c
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	60f8      	str	r0, [r7, #12]
 800f5e2:	60b9      	str	r1, [r7, #8]
 800f5e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	68da      	ldr	r2, [r3, #12]
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	fa93 f3a3 	rbit	r3, r3
 800f5f4:	613b      	str	r3, [r7, #16]
  return result;
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d101      	bne.n	800f604 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800f600:	2320      	movs	r3, #32
 800f602:	e003      	b.n	800f60c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800f604:	69bb      	ldr	r3, [r7, #24]
 800f606:	fab3 f383 	clz	r3, r3
 800f60a:	b2db      	uxtb	r3, r3
 800f60c:	005b      	lsls	r3, r3, #1
 800f60e:	2103      	movs	r1, #3
 800f610:	fa01 f303 	lsl.w	r3, r1, r3
 800f614:	43db      	mvns	r3, r3
 800f616:	401a      	ands	r2, r3
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f61c:	6a3b      	ldr	r3, [r7, #32]
 800f61e:	fa93 f3a3 	rbit	r3, r3
 800f622:	61fb      	str	r3, [r7, #28]
  return result;
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d101      	bne.n	800f632 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800f62e:	2320      	movs	r3, #32
 800f630:	e003      	b.n	800f63a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800f632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f634:	fab3 f383 	clz	r3, r3
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	005b      	lsls	r3, r3, #1
 800f63c:	6879      	ldr	r1, [r7, #4]
 800f63e:	fa01 f303 	lsl.w	r3, r1, r3
 800f642:	431a      	orrs	r2, r3
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	60da      	str	r2, [r3, #12]
}
 800f648:	bf00      	nop
 800f64a:	372c      	adds	r7, #44	@ 0x2c
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr

0800f654 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800f654:	b480      	push	{r7}
 800f656:	b08b      	sub	sp, #44	@ 0x2c
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	6a1a      	ldr	r2, [r3, #32]
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	fa93 f3a3 	rbit	r3, r3
 800f66e:	613b      	str	r3, [r7, #16]
  return result;
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f674:	69bb      	ldr	r3, [r7, #24]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d101      	bne.n	800f67e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800f67a:	2320      	movs	r3, #32
 800f67c:	e003      	b.n	800f686 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800f67e:	69bb      	ldr	r3, [r7, #24]
 800f680:	fab3 f383 	clz	r3, r3
 800f684:	b2db      	uxtb	r3, r3
 800f686:	009b      	lsls	r3, r3, #2
 800f688:	210f      	movs	r1, #15
 800f68a:	fa01 f303 	lsl.w	r3, r1, r3
 800f68e:	43db      	mvns	r3, r3
 800f690:	401a      	ands	r2, r3
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f696:	6a3b      	ldr	r3, [r7, #32]
 800f698:	fa93 f3a3 	rbit	r3, r3
 800f69c:	61fb      	str	r3, [r7, #28]
  return result;
 800f69e:	69fb      	ldr	r3, [r7, #28]
 800f6a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d101      	bne.n	800f6ac <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800f6a8:	2320      	movs	r3, #32
 800f6aa:	e003      	b.n	800f6b4 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800f6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ae:	fab3 f383 	clz	r3, r3
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	009b      	lsls	r3, r3, #2
 800f6b6:	6879      	ldr	r1, [r7, #4]
 800f6b8:	fa01 f303 	lsl.w	r3, r1, r3
 800f6bc:	431a      	orrs	r2, r3
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800f6c2:	bf00      	nop
 800f6c4:	372c      	adds	r7, #44	@ 0x2c
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr

0800f6ce <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800f6ce:	b480      	push	{r7}
 800f6d0:	b08b      	sub	sp, #44	@ 0x2c
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	60f8      	str	r0, [r7, #12]
 800f6d6:	60b9      	str	r1, [r7, #8]
 800f6d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	0a1b      	lsrs	r3, r3, #8
 800f6e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	fa93 f3a3 	rbit	r3, r3
 800f6ea:	613b      	str	r3, [r7, #16]
  return result;
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d101      	bne.n	800f6fa <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800f6f6:	2320      	movs	r3, #32
 800f6f8:	e003      	b.n	800f702 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800f6fa:	69bb      	ldr	r3, [r7, #24]
 800f6fc:	fab3 f383 	clz	r3, r3
 800f700:	b2db      	uxtb	r3, r3
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	210f      	movs	r1, #15
 800f706:	fa01 f303 	lsl.w	r3, r1, r3
 800f70a:	43db      	mvns	r3, r3
 800f70c:	401a      	ands	r2, r3
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	0a1b      	lsrs	r3, r3, #8
 800f712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f714:	6a3b      	ldr	r3, [r7, #32]
 800f716:	fa93 f3a3 	rbit	r3, r3
 800f71a:	61fb      	str	r3, [r7, #28]
  return result;
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f722:	2b00      	cmp	r3, #0
 800f724:	d101      	bne.n	800f72a <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800f726:	2320      	movs	r3, #32
 800f728:	e003      	b.n	800f732 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800f72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f72c:	fab3 f383 	clz	r3, r3
 800f730:	b2db      	uxtb	r3, r3
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	6879      	ldr	r1, [r7, #4]
 800f736:	fa01 f303 	lsl.w	r3, r1, r3
 800f73a:	431a      	orrs	r2, r3
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800f740:	bf00      	nop
 800f742:	372c      	adds	r7, #44	@ 0x2c
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b088      	sub	sp, #32
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	fa93 f3a3 	rbit	r3, r3
 800f762:	60fb      	str	r3, [r7, #12]
  return result;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d101      	bne.n	800f772 <LL_GPIO_Init+0x26>
    return 32U;
 800f76e:	2320      	movs	r3, #32
 800f770:	e003      	b.n	800f77a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	fab3 f383 	clz	r3, r3
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f77c:	e048      	b.n	800f810 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	2101      	movs	r1, #1
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	fa01 f303 	lsl.w	r3, r1, r3
 800f78a:	4013      	ands	r3, r2
 800f78c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800f78e:	69bb      	ldr	r3, [r7, #24]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d03a      	beq.n	800f80a <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d003      	beq.n	800f7a4 <LL_GPIO_Init+0x58>
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	2b02      	cmp	r3, #2
 800f7a2:	d10e      	bne.n	800f7c2 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	689b      	ldr	r3, [r3, #8]
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	69b9      	ldr	r1, [r7, #24]
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f7ff fed7 	bl	800f560 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	6819      	ldr	r1, [r3, #0]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	68db      	ldr	r3, [r3, #12]
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f7ff feb7 	bl	800f530 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	691b      	ldr	r3, [r3, #16]
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	69b9      	ldr	r1, [r7, #24]
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f7ff ff05 	bl	800f5da <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	2b02      	cmp	r3, #2
 800f7d6:	d111      	bne.n	800f7fc <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800f7d8:	69bb      	ldr	r3, [r7, #24]
 800f7da:	2bff      	cmp	r3, #255	@ 0xff
 800f7dc:	d807      	bhi.n	800f7ee <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	695b      	ldr	r3, [r3, #20]
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	69b9      	ldr	r1, [r7, #24]
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f7ff ff34 	bl	800f654 <LL_GPIO_SetAFPin_0_7>
 800f7ec:	e006      	b.n	800f7fc <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	695b      	ldr	r3, [r3, #20]
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	69b9      	ldr	r1, [r7, #24]
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f7ff ff69 	bl	800f6ce <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	461a      	mov	r2, r3
 800f802:	69b9      	ldr	r1, [r7, #24]
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f7ff fe56 	bl	800f4b6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	3301      	adds	r3, #1
 800f80e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	681a      	ldr	r2, [r3, #0]
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	fa22 f303 	lsr.w	r3, r2, r3
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d1af      	bne.n	800f77e <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800f81e:	2300      	movs	r3, #0
}
 800f820:	4618      	mov	r0, r3
 800f822:	3720      	adds	r7, #32
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	601a      	str	r2, [r3, #0]
}
 800f83c:	bf00      	nop
 800f83e:	370c      	adds	r7, #12
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr

0800f848 <LL_APB1_GRP2_EnableClock>:
{
 800f848:	b480      	push	{r7}
 800f84a:	b085      	sub	sp, #20
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800f850:	4b08      	ldr	r3, [pc, #32]	@ (800f874 <LL_APB1_GRP2_EnableClock+0x2c>)
 800f852:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f854:	4907      	ldr	r1, [pc, #28]	@ (800f874 <LL_APB1_GRP2_EnableClock+0x2c>)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	4313      	orrs	r3, r2
 800f85a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800f85c:	4b05      	ldr	r3, [pc, #20]	@ (800f874 <LL_APB1_GRP2_EnableClock+0x2c>)
 800f85e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4013      	ands	r3, r2
 800f864:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f866:	68fb      	ldr	r3, [r7, #12]
}
 800f868:	bf00      	nop
 800f86a:	3714      	adds	r7, #20
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr
 800f874:	40021000 	.word	0x40021000

0800f878 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, const LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	4a11      	ldr	r2, [pc, #68]	@ (800f8cc <LL_UCPD_Init+0x54>)
 800f886:	4293      	cmp	r3, r2
 800f888:	d103      	bne.n	800f892 <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800f88a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800f88e:	f7ff ffdb 	bl	800f848 <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f7ff ffc8 	bl	800f828 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681a      	ldr	r2, [r3, #0]
 800f89c:	4b0c      	ldr	r3, [pc, #48]	@ (800f8d0 <LL_UCPD_Init+0x58>)
 800f89e:	4013      	ands	r3, r2
 800f8a0:	683a      	ldr	r2, [r7, #0]
 800f8a2:	6811      	ldr	r1, [r2, #0]
 800f8a4:	683a      	ldr	r2, [r7, #0]
 800f8a6:	6852      	ldr	r2, [r2, #4]
 800f8a8:	02d2      	lsls	r2, r2, #11
 800f8aa:	4311      	orrs	r1, r2
 800f8ac:	683a      	ldr	r2, [r7, #0]
 800f8ae:	6892      	ldr	r2, [r2, #8]
 800f8b0:	0192      	lsls	r2, r2, #6
 800f8b2:	4311      	orrs	r1, r2
 800f8b4:	683a      	ldr	r2, [r7, #0]
 800f8b6:	68d2      	ldr	r2, [r2, #12]
 800f8b8:	430a      	orrs	r2, r1
 800f8ba:	431a      	orrs	r2, r3
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800f8c0:	2300      	movs	r3, #0
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3708      	adds	r7, #8
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	4000a000 	.word	0x4000a000
 800f8d0:	fff10000 	.word	0xfff10000

0800f8d4 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f8e2:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2207      	movs	r2, #7
 800f8e8:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2210      	movs	r2, #16
 800f8ee:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	220d      	movs	r2, #13
 800f8f4:	60da      	str	r2, [r3, #12]
}
 800f8f6:	bf00      	nop
 800f8f8:	370c      	adds	r7, #12
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f900:	4770      	bx	lr
	...

0800f904 <LIDAR_start_scan_dma>:
    printf("Error code : %04X\r\n", h_LIDAR->health_stat.error_code);

    return 0;
}

int LIDAR_start_scan_dma(h_LIDAR_t *h_LIDAR) {
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
    uint8_t cmd_buff[CMD_BUFF_SIZE] = {CMD_BEGIN, CMD_START}; // Commande pour démarrer le scan
 800f90c:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 800f910:	81bb      	strh	r3, [r7, #12]

    // Envoi de la commande
    if (h_LIDAR->serial_drv.it_transmit(cmd_buff, CMD_BUFF_SIZE) != 0) {
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	f107 020c 	add.w	r2, r7, #12
 800f91a:	2102      	movs	r1, #2
 800f91c:	4610      	mov	r0, r2
 800f91e:	4798      	blx	r3
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d005      	beq.n	800f932 <LIDAR_start_scan_dma+0x2e>
        printf("Erreur lors de l'envoi de la commande de démarrage du scan.\r\n");
 800f926:	4810      	ldr	r0, [pc, #64]	@ (800f968 <LIDAR_start_scan_dma+0x64>)
 800f928:	f009 f85c 	bl	80189e4 <puts>
        return -1;
 800f92c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f930:	e015      	b.n	800f95e <LIDAR_start_scan_dma+0x5a>
    }

    // Configurer la réception DMA en mode circulaire
    if (h_LIDAR->serial_drv.dma_receive(h_LIDAR->processing.receive_buff, DATA_BUFF_SIZE) != 0) {
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	691b      	ldr	r3, [r3, #16]
 800f936:	687a      	ldr	r2, [r7, #4]
 800f938:	f502 625f 	add.w	r2, r2, #3568	@ 0xdf0
 800f93c:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800f940:	4610      	mov	r0, r2
 800f942:	4798      	blx	r3
 800f944:	4603      	mov	r3, r0
 800f946:	2b00      	cmp	r3, #0
 800f948:	d005      	beq.n	800f956 <LIDAR_start_scan_dma+0x52>
        printf("Erreur lors de la configuration de la réception DMA.\r\n");
 800f94a:	4808      	ldr	r0, [pc, #32]	@ (800f96c <LIDAR_start_scan_dma+0x68>)
 800f94c:	f009 f84a 	bl	80189e4 <puts>
        return -2;
 800f950:	f06f 0301 	mvn.w	r3, #1
 800f954:	e003      	b.n	800f95e <LIDAR_start_scan_dma+0x5a>
    }

    printf("Scan DMA demarre avec succes en mode circulaire.\r\n");
 800f956:	4806      	ldr	r0, [pc, #24]	@ (800f970 <LIDAR_start_scan_dma+0x6c>)
 800f958:	f009 f844 	bl	80189e4 <puts>
    return 0;
 800f95c:	2300      	movs	r3, #0
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3710      	adds	r7, #16
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	0801bcac 	.word	0x0801bcac
 800f96c:	0801bcec 	.word	0x0801bcec
 800f970:	0801bd24 	.word	0x0801bd24

0800f974 <LIDAR_process_frame>:

void LIDAR_process_frame(h_LIDAR_t *LIDAR, uint8_t *buff) {
 800f974:	b480      	push	{r7}
 800f976:	b08d      	sub	sp, #52	@ 0x34
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	6039      	str	r1, [r7, #0]
    // uint8_t *buff = LIDAR->processing.frame_buff; // Buffer circulaire DMA
    int buffer_size = FRAME_BUFF_SIZE;              // Taille totale du buffer
 800f97e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800f982:	627b      	str	r3, [r7, #36]	@ 0x24
    int start_idx = 0;                             // Indice de départ pour parcourir le buffer
 800f984:	2300      	movs	r3, #0
 800f986:	62fb      	str	r3, [r7, #44]	@ 0x2c




    while (start_idx < buffer_size) {
 800f988:	e0eb      	b.n	800fb62 <LIDAR_process_frame+0x1ee>

        if (buff[start_idx] == 0xAA && buff[(start_idx + 1) % buffer_size] == 0x55) {
 800f98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f98c:	683a      	ldr	r2, [r7, #0]
 800f98e:	4413      	add	r3, r2
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	2baa      	cmp	r3, #170	@ 0xaa
 800f994:	f040 80e2 	bne.w	800fb5c <LIDAR_process_frame+0x1e8>
 800f998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f99a:	3301      	adds	r3, #1
 800f99c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f99e:	fb93 f2f2 	sdiv	r2, r3, r2
 800f9a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f9a4:	fb01 f202 	mul.w	r2, r1, r2
 800f9a8:	1a9b      	subs	r3, r3, r2
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	2b55      	cmp	r3, #85	@ 0x55
 800f9b4:	f040 80d2 	bne.w	800fb5c <LIDAR_process_frame+0x1e8>

        	//printf("Trame trouvée \r\n");

            // L'entête est trouvé, extraire les métadonnées
            int header_idx = start_idx; // Index actuel pour début de trame
 800f9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9ba:	623b      	str	r3, [r7, #32]

            // Start Angle
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 800f9bc:	6a3b      	ldr	r3, [r7, #32]
 800f9be:	3304      	adds	r3, #4
 800f9c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9c2:	fb93 f2f2 	sdiv	r2, r3, r2
 800f9c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f9c8:	fb01 f202 	mul.w	r2, r1, r2
 800f9cc:	1a9b      	subs	r3, r3, r2
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	4413      	add	r3, r2
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	4618      	mov	r0, r3
                            (buff[(header_idx + 5) % buffer_size] << 8)) >>
 800f9d8:	6a3b      	ldr	r3, [r7, #32]
 800f9da:	3305      	adds	r3, #5
 800f9dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9de:	fb93 f2f2 	sdiv	r2, r3, r2
 800f9e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f9e4:	fb01 f202 	mul.w	r2, r1, r2
 800f9e8:	1a9b      	subs	r3, r3, r2
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	4413      	add	r3, r2
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	021b      	lsls	r3, r3, #8
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 800f9f4:	4303      	orrs	r3, r0
                            (buff[(header_idx + 5) % buffer_size] << 8)) >>
 800f9f6:	11db      	asrs	r3, r3, #7
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 800f9f8:	83fb      	strh	r3, [r7, #30]
                           7; // Shift de 7 pour diviser de 64 + Shift à 1 pour avoir l'angle en degré

            // End Angle
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 800f9fa:	6a3b      	ldr	r3, [r7, #32]
 800f9fc:	3306      	adds	r3, #6
 800f9fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa00:	fb93 f2f2 	sdiv	r2, r3, r2
 800fa04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fa06:	fb01 f202 	mul.w	r2, r1, r2
 800fa0a:	1a9b      	subs	r3, r3, r2
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	4413      	add	r3, r2
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	4618      	mov	r0, r3
                            (buff[(header_idx + 7) % buffer_size] << 8)) >>
 800fa16:	6a3b      	ldr	r3, [r7, #32]
 800fa18:	3307      	adds	r3, #7
 800fa1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa1c:	fb93 f2f2 	sdiv	r2, r3, r2
 800fa20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fa22:	fb01 f202 	mul.w	r2, r1, r2
 800fa26:	1a9b      	subs	r3, r3, r2
 800fa28:	461a      	mov	r2, r3
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	021b      	lsls	r3, r3, #8
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 800fa32:	4303      	orrs	r3, r0
                            (buff[(header_idx + 7) % buffer_size] << 8)) >>
 800fa34:	11db      	asrs	r3, r3, #7
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 800fa36:	83bb      	strh	r3, [r7, #28]
                           7; // Shift de 7 pour diviser de 64 + Shift à 1 pour avoir l'angle en degré

            // Nombre de points
            uint8_t LSN = buff[(header_idx + 3) % buffer_size];
 800fa38:	6a3b      	ldr	r3, [r7, #32]
 800fa3a:	3303      	adds	r3, #3
 800fa3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa3e:	fb93 f2f2 	sdiv	r2, r3, r2
 800fa42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fa44:	fb01 f202 	mul.w	r2, r1, r2
 800fa48:	1a9b      	subs	r3, r3, r2
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	4413      	add	r3, r2
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	76fb      	strb	r3, [r7, #27]

            // Calcul de la taille totale attendue de la trame
            int frame_size = 10 + LSN * 2; // 10 octets d'entête + 2 octets par point
 800fa54:	7efb      	ldrb	r3, [r7, #27]
 800fa56:	3305      	adds	r3, #5
 800fa58:	005b      	lsls	r3, r3, #1
 800fa5a:	617b      	str	r3, [r7, #20]
            if (frame_size > buffer_size) {
 800fa5c:	697a      	ldr	r2, [r7, #20]
 800fa5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa60:	429a      	cmp	r2, r3
 800fa62:	f300 8084 	bgt.w	800fb6e <LIDAR_process_frame+0x1fa>
//                printf("Erreur : Taille de la trame (%d) dépasse la taille du buffer (%d).\r\n", frame_size, buffer_size);
                break;
            }

            // Vérifier si toute la trame est contenue dans le buffer
            if ((start_idx + frame_size) % buffer_size < start_idx) {
 800fa66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	4413      	add	r3, r2
 800fa6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa6e:	fb93 f2f2 	sdiv	r2, r3, r2
 800fa72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fa74:	fb01 f202 	mul.w	r2, r1, r2
 800fa78:	1a9b      	subs	r3, r3, r2
 800fa7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	dc78      	bgt.n	800fb72 <LIDAR_process_frame+0x1fe>
//                continue;
//            }

            // Traiter les données de la trame

            for (int i = 0; i < LSN; i++) {
 800fa80:	2300      	movs	r3, #0
 800fa82:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fa84:	e061      	b.n	800fb4a <LIDAR_process_frame+0x1d6>
                // Lecture de la distance brute
                uint16_t Si = buff[(header_idx + 10 + i * 2) % buffer_size] |
 800fa86:	6a3b      	ldr	r3, [r7, #32]
 800fa88:	f103 020a 	add.w	r2, r3, #10
 800fa8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa8e:	005b      	lsls	r3, r3, #1
 800fa90:	4413      	add	r3, r2
 800fa92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa94:	fb93 f2f2 	sdiv	r2, r3, r2
 800fa98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fa9a:	fb01 f202 	mul.w	r2, r1, r2
 800fa9e:	1a9b      	subs	r3, r3, r2
 800faa0:	461a      	mov	r2, r3
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	4413      	add	r3, r2
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	b21a      	sxth	r2, r3
                              (buff[(header_idx + 11 + i * 2) % buffer_size] << 8);
 800faaa:	6a3b      	ldr	r3, [r7, #32]
 800faac:	f103 010b 	add.w	r1, r3, #11
 800fab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fab2:	005b      	lsls	r3, r3, #1
 800fab4:	440b      	add	r3, r1
 800fab6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fab8:	fb93 f1f1 	sdiv	r1, r3, r1
 800fabc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fabe:	fb00 f101 	mul.w	r1, r0, r1
 800fac2:	1a5b      	subs	r3, r3, r1
 800fac4:	4619      	mov	r1, r3
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	440b      	add	r3, r1
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	021b      	lsls	r3, r3, #8
                uint16_t Si = buff[(header_idx + 10 + i * 2) % buffer_size] |
 800face:	b21b      	sxth	r3, r3
 800fad0:	4313      	orrs	r3, r2
 800fad2:	b21b      	sxth	r3, r3
 800fad4:	827b      	strh	r3, [r7, #18]


                int Di = Si / 4; // Distance réelle en mm
 800fad6:	8a7b      	ldrh	r3, [r7, #18]
 800fad8:	089b      	lsrs	r3, r3, #2
 800fada:	b29b      	uxth	r3, r3
 800fadc:	60fb      	str	r3, [r7, #12]

                // Calcul de l'angle
                int Ai = (i+1)*abs(LSA-FSA)/(LSN-1) + FSA;
 800fade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fae0:	3301      	adds	r3, #1
 800fae2:	8bb9      	ldrh	r1, [r7, #28]
 800fae4:	8bfa      	ldrh	r2, [r7, #30]
 800fae6:	1a8a      	subs	r2, r1, r2
 800fae8:	2a00      	cmp	r2, #0
 800faea:	bfb8      	it	lt
 800faec:	4252      	neglt	r2, r2
 800faee:	fb03 f202 	mul.w	r2, r3, r2
 800faf2:	7efb      	ldrb	r3, [r7, #27]
 800faf4:	3b01      	subs	r3, #1
 800faf6:	fb92 f2f3 	sdiv	r2, r2, r3
 800fafa:	8bfb      	ldrh	r3, [r7, #30]
 800fafc:	4413      	add	r3, r2
 800fafe:	60bb      	str	r3, [r7, #8]

                if (Ai < 0 || Ai >= 360) {
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	db1d      	blt.n	800fb42 <LIDAR_process_frame+0x1ce>
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800fb0c:	da19      	bge.n	800fb42 <LIDAR_process_frame+0x1ce>
                    continue;
                }

                // Stockage dans le buffer des points
                if (Di < 150 || Di > 10000) {
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2b95      	cmp	r3, #149	@ 0x95
 800fb12:	dd04      	ble.n	800fb1e <LIDAR_process_frame+0x1aa>
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f242 7210 	movw	r2, #10000	@ 0x2710
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	dd08      	ble.n	800fb30 <LIDAR_process_frame+0x1bc>
                	LIDAR->processing.point_buff[Ai] = 0; // Distance hors plage
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	f203 2312 	addw	r3, r3, #530	@ 0x212
 800fb26:	009b      	lsls	r3, r3, #2
 800fb28:	4413      	add	r3, r2
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	609a      	str	r2, [r3, #8]
 800fb2e:	e009      	b.n	800fb44 <LIDAR_process_frame+0x1d0>
                } else {
                	LIDAR->processing.point_buff[Ai] = Di; // Distance valide
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	f203 2312 	addw	r3, r3, #530	@ 0x212
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	4413      	add	r3, r2
 800fb3c:	68fa      	ldr	r2, [r7, #12]
 800fb3e:	609a      	str	r2, [r3, #8]
 800fb40:	e000      	b.n	800fb44 <LIDAR_process_frame+0x1d0>
                    continue;
 800fb42:	bf00      	nop
            for (int i = 0; i < LSN; i++) {
 800fb44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb46:	3301      	adds	r3, #1
 800fb48:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fb4a:	7efb      	ldrb	r3, [r7, #27]
 800fb4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	db99      	blt.n	800fa86 <LIDAR_process_frame+0x112>
            }

//            printf("Trame traitee : FSA=%d, LSA=%d, Points=%d\r\n", FSA, LSA, LSN);

            // Avancer dans le buffer jusqu'à la fin de la trame traitée
            start_idx += frame_size;
 800fb52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	4413      	add	r3, r2
 800fb58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (buff[start_idx] == 0xAA && buff[(start_idx + 1) % buffer_size] == 0x55) {
 800fb5a:	e002      	b.n	800fb62 <LIDAR_process_frame+0x1ee>
        } else {
            // Avancer d'un octet si aucune entête valide n'est trouvée
            start_idx++;
 800fb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb5e:	3301      	adds	r3, #1
 800fb60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (start_idx < buffer_size) {
 800fb62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb66:	429a      	cmp	r2, r3
 800fb68:	f6ff af0f 	blt.w	800f98a <LIDAR_process_frame+0x16>
        }
    }

}
 800fb6c:	e002      	b.n	800fb74 <LIDAR_process_frame+0x200>
                break;
 800fb6e:	bf00      	nop
 800fb70:	e000      	b.n	800fb74 <LIDAR_process_frame+0x200>
                break;
 800fb72:	bf00      	nop
}
 800fb74:	bf00      	nop
 800fb76:	3734      	adds	r7, #52	@ 0x34
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <calculer_distance_moyenne>:

// Permet de calculer la distance moyenen sur un tableau entre deux indices
int calculer_distance_moyenne(const int *distances, int debut, int fin) {
 800fb80:	b480      	push	{r7}
 800fb82:	b089      	sub	sp, #36	@ 0x24
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	60f8      	str	r0, [r7, #12]
 800fb88:	60b9      	str	r1, [r7, #8]
 800fb8a:	607a      	str	r2, [r7, #4]
    int somme = 0;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	61fb      	str	r3, [r7, #28]
    int n = fin - debut + 1;
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	1ad3      	subs	r3, r2, r3
 800fb96:	3301      	adds	r3, #1
 800fb98:	617b      	str	r3, [r7, #20]
    for (int i = debut; i <= fin; i++) {
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	61bb      	str	r3, [r7, #24]
 800fb9e:	e00a      	b.n	800fbb6 <calculer_distance_moyenne+0x36>
        somme += distances[i];
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	009b      	lsls	r3, r3, #2
 800fba4:	68fa      	ldr	r2, [r7, #12]
 800fba6:	4413      	add	r3, r2
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	69fa      	ldr	r2, [r7, #28]
 800fbac:	4413      	add	r3, r2
 800fbae:	61fb      	str	r3, [r7, #28]
    for (int i = debut; i <= fin; i++) {
 800fbb0:	69bb      	ldr	r3, [r7, #24]
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	61bb      	str	r3, [r7, #24]
 800fbb6:	69ba      	ldr	r2, [r7, #24]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	ddf0      	ble.n	800fba0 <calculer_distance_moyenne+0x20>
    }
    return somme / n;
 800fbbe:	69fa      	ldr	r2, [r7, #28]
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3724      	adds	r7, #36	@ 0x24
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr
	...

0800fbd4 <find_clusters>:

/**
 * @brief Trouve les clusters dans les données du LIDAR.
 * @param LIDAR Pointeur vers la structure h_LIDAR_t.
 */
void find_clusters(h_LIDAR_t *LIDAR) {
 800fbd4:	b5b0      	push	{r4, r5, r7, lr}
 800fbd6:	b086      	sub	sp, #24
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
    int *distances = LIDAR->processing.filtred_buff;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800fbe2:	3310      	adds	r3, #16
 800fbe4:	60bb      	str	r3, [r7, #8]
    int cluster_count = 0;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	617b      	str	r3, [r7, #20]
    int debut_cluster = 0;
 800fbea:	2300      	movs	r3, #0
 800fbec:	613b      	str	r3, [r7, #16]

    // Parcours des distances pour identifier les clusters
    for (int i = 1; i < NB_DEGRES; i++) {
 800fbee:	2301      	movs	r3, #1
 800fbf0:	60fb      	str	r3, [r7, #12]
 800fbf2:	e05d      	b.n	800fcb0 <find_clusters+0xdc>
        // Si la différence dépasse le seuil, un cluster est terminé
        if (fabs(distances[i] - distances[i - 1]) > CLUSTER_SEUIL) {
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	68ba      	ldr	r2, [r7, #8]
 800fbfa:	4413      	add	r3, r2
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fc04:	3b01      	subs	r3, #1
 800fc06:	009b      	lsls	r3, r3, #2
 800fc08:	68b9      	ldr	r1, [r7, #8]
 800fc0a:	440b      	add	r3, r1
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	1ad3      	subs	r3, r2, r3
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7f2 feb9 	bl	8002988 <__aeabi_i2d>
 800fc16:	4602      	mov	r2, r0
 800fc18:	460b      	mov	r3, r1
 800fc1a:	4614      	mov	r4, r2
 800fc1c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800fc20:	f04f 0200 	mov.w	r2, #0
 800fc24:	4b45      	ldr	r3, [pc, #276]	@ (800fd3c <find_clusters+0x168>)
 800fc26:	4620      	mov	r0, r4
 800fc28:	4629      	mov	r1, r5
 800fc2a:	f7f3 f9a7 	bl	8002f7c <__aeabi_dcmpgt>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d03a      	beq.n	800fcaa <find_clusters+0xd6>
            // Calcul et stockage des informations du cluster
            if (cluster_count < MAX_CLUSTERS) {
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	2b63      	cmp	r3, #99	@ 0x63
 800fc38:	dc35      	bgt.n	800fca6 <find_clusters+0xd2>
                LIDAR->processing.clusters[cluster_count].distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, i - 1);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	3b01      	subs	r3, #1
 800fc3e:	461a      	mov	r2, r3
 800fc40:	6939      	ldr	r1, [r7, #16]
 800fc42:	68b8      	ldr	r0, [r7, #8]
 800fc44:	f7ff ff9c 	bl	800fb80 <calculer_distance_moyenne>
 800fc48:	6879      	ldr	r1, [r7, #4]
 800fc4a:	697a      	ldr	r2, [r7, #20]
 800fc4c:	4613      	mov	r3, r2
 800fc4e:	005b      	lsls	r3, r3, #1
 800fc50:	4413      	add	r3, r2
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	440b      	add	r3, r1
 800fc56:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 800fc5a:	3334      	adds	r3, #52	@ 0x34
 800fc5c:	6018      	str	r0, [r3, #0]
                LIDAR->processing.clusters[cluster_count].angle_moyen = (debut_cluster + i - 1) / 2;
 800fc5e:	693a      	ldr	r2, [r7, #16]
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	4413      	add	r3, r2
 800fc64:	3b01      	subs	r3, #1
 800fc66:	0fda      	lsrs	r2, r3, #31
 800fc68:	4413      	add	r3, r2
 800fc6a:	105b      	asrs	r3, r3, #1
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	6879      	ldr	r1, [r7, #4]
 800fc70:	697a      	ldr	r2, [r7, #20]
 800fc72:	4613      	mov	r3, r2
 800fc74:	005b      	lsls	r3, r3, #1
 800fc76:	4413      	add	r3, r2
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	440b      	add	r3, r1
 800fc7c:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 800fc80:	3330      	adds	r3, #48	@ 0x30
 800fc82:	6018      	str	r0, [r3, #0]
                LIDAR->processing.clusters[cluster_count].count = i - debut_cluster;
 800fc84:	68fa      	ldr	r2, [r7, #12]
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	1ad1      	subs	r1, r2, r3
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	697a      	ldr	r2, [r7, #20]
 800fc8e:	4613      	mov	r3, r2
 800fc90:	005b      	lsls	r3, r3, #1
 800fc92:	4413      	add	r3, r2
 800fc94:	009b      	lsls	r3, r3, #2
 800fc96:	4403      	add	r3, r0
 800fc98:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 800fc9c:	3338      	adds	r3, #56	@ 0x38
 800fc9e:	6019      	str	r1, [r3, #0]
                cluster_count++;
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	3301      	adds	r3, #1
 800fca4:	617b      	str	r3, [r7, #20]
            }
            debut_cluster = i; // Nouveau cluster
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	613b      	str	r3, [r7, #16]
    for (int i = 1; i < NB_DEGRES; i++) {
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	3301      	adds	r3, #1
 800fcae:	60fb      	str	r3, [r7, #12]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800fcb6:	db9d      	blt.n	800fbf4 <find_clusters+0x20>
        }
    }

    // Traitement du dernier cluster
    if (cluster_count < MAX_CLUSTERS) {
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	2b63      	cmp	r3, #99	@ 0x63
 800fcbc:	dc33      	bgt.n	800fd26 <find_clusters+0x152>
        LIDAR->processing.clusters[cluster_count].distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, NB_DEGRES - 1);
 800fcbe:	f240 1267 	movw	r2, #359	@ 0x167
 800fcc2:	6939      	ldr	r1, [r7, #16]
 800fcc4:	68b8      	ldr	r0, [r7, #8]
 800fcc6:	f7ff ff5b 	bl	800fb80 <calculer_distance_moyenne>
 800fcca:	6879      	ldr	r1, [r7, #4]
 800fccc:	697a      	ldr	r2, [r7, #20]
 800fcce:	4613      	mov	r3, r2
 800fcd0:	005b      	lsls	r3, r3, #1
 800fcd2:	4413      	add	r3, r2
 800fcd4:	009b      	lsls	r3, r3, #2
 800fcd6:	440b      	add	r3, r1
 800fcd8:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 800fcdc:	3334      	adds	r3, #52	@ 0x34
 800fcde:	6018      	str	r0, [r3, #0]
        LIDAR->processing.clusters[cluster_count].angle_moyen = (debut_cluster + NB_DEGRES - 1) / 2;
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	f203 1367 	addw	r3, r3, #359	@ 0x167
 800fce6:	0fda      	lsrs	r2, r3, #31
 800fce8:	4413      	add	r3, r2
 800fcea:	105b      	asrs	r3, r3, #1
 800fcec:	4618      	mov	r0, r3
 800fcee:	6879      	ldr	r1, [r7, #4]
 800fcf0:	697a      	ldr	r2, [r7, #20]
 800fcf2:	4613      	mov	r3, r2
 800fcf4:	005b      	lsls	r3, r3, #1
 800fcf6:	4413      	add	r3, r2
 800fcf8:	009b      	lsls	r3, r3, #2
 800fcfa:	440b      	add	r3, r1
 800fcfc:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 800fd00:	3330      	adds	r3, #48	@ 0x30
 800fd02:	6018      	str	r0, [r3, #0]
        LIDAR->processing.clusters[cluster_count].count = NB_DEGRES - debut_cluster;
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	f5c3 71b4 	rsb	r1, r3, #360	@ 0x168
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	697a      	ldr	r2, [r7, #20]
 800fd0e:	4613      	mov	r3, r2
 800fd10:	005b      	lsls	r3, r3, #1
 800fd12:	4413      	add	r3, r2
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	4403      	add	r3, r0
 800fd18:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 800fd1c:	3338      	adds	r3, #56	@ 0x38
 800fd1e:	6019      	str	r1, [r3, #0]
        cluster_count++;
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	3301      	adds	r3, #1
 800fd24:	617b      	str	r3, [r7, #20]
    }

    // Mise à jour du compteur de clusters
    LIDAR->processing.cluster_cnt = cluster_count;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	f8c2 37e0 	str.w	r3, [r2, #2016]	@ 0x7e0
}
 800fd34:	bf00      	nop
 800fd36:	3718      	adds	r7, #24
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bdb0      	pop	{r4, r5, r7, pc}
 800fd3c:	403e0000 	.word	0x403e0000

0800fd40 <medianFilter>:

//Applique un filtre médian aux données du LIDAR.
void medianFilter(h_LIDAR_t *LIDAR) {
 800fd40:	b480      	push	{r7}
 800fd42:	b093      	sub	sp, #76	@ 0x4c
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
    int *signal = LIDAR->processing.point_buff;     // Signal brut
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 800fd4e:	633b      	str	r3, [r7, #48]	@ 0x30
    int *filtred = LIDAR->processing.filtred_buff; // Signal filtré
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800fd56:	3310      	adds	r3, #16
 800fd58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int signal_length = NB_DEGRES;
 800fd5a:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800fd5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    int window[5];
    int middle = 2; // La médiane est au centre d'une fenêtre de taille 5
 800fd60:	2302      	movs	r3, #2
 800fd62:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < signal_length; i++) {
 800fd64:	2300      	movs	r3, #0
 800fd66:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd68:	e06e      	b.n	800fe48 <medianFilter+0x108>
        // Construire la fenêtre de voisinage
        for (int j = 0; j < 5; j++) {
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	643b      	str	r3, [r7, #64]	@ 0x40
 800fd6e:	e01f      	b.n	800fdb0 <medianFilter+0x70>
            int index = i - middle + j;
 800fd70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd74:	1ad3      	subs	r3, r2, r3
 800fd76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fd78:	4413      	add	r3, r2
 800fd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            // Gérer les bords du signal
            if (index < 0) index = 0;
 800fd7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	da01      	bge.n	800fd86 <medianFilter+0x46>
 800fd82:	2300      	movs	r3, #0
 800fd84:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (index >= signal_length) index = signal_length - 1;
 800fd86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	db02      	blt.n	800fd94 <medianFilter+0x54>
 800fd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd90:	3b01      	subs	r3, #1
 800fd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
            window[j] = signal[index];
 800fd94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd96:	009b      	lsls	r3, r3, #2
 800fd98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd9a:	4413      	add	r3, r2
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	3348      	adds	r3, #72	@ 0x48
 800fda4:	443b      	add	r3, r7
 800fda6:	f843 2c3c 	str.w	r2, [r3, #-60]
        for (int j = 0; j < 5; j++) {
 800fdaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fdac:	3301      	adds	r3, #1
 800fdae:	643b      	str	r3, [r7, #64]	@ 0x40
 800fdb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fdb2:	2b04      	cmp	r3, #4
 800fdb4:	dddc      	ble.n	800fd70 <medianFilter+0x30>
        }

        // Trier la fenêtre pour extraire la médiane
        for (int j = 0; j < 5; j++) {
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fdba:	e034      	b.n	800fe26 <medianFilter+0xe6>
            for (int k = j + 1; k < 5; k++) {
 800fdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fdc2:	e02a      	b.n	800fe1a <medianFilter+0xda>
                if (window[j] > window[k]) {
 800fdc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdc6:	009b      	lsls	r3, r3, #2
 800fdc8:	3348      	adds	r3, #72	@ 0x48
 800fdca:	443b      	add	r3, r7
 800fdcc:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800fdd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdd2:	009b      	lsls	r3, r3, #2
 800fdd4:	3348      	adds	r3, #72	@ 0x48
 800fdd6:	443b      	add	r3, r7
 800fdd8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	dd19      	ble.n	800fe14 <medianFilter+0xd4>
                    int temp = window[j];
 800fde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	3348      	adds	r3, #72	@ 0x48
 800fde6:	443b      	add	r3, r7
 800fde8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800fdec:	623b      	str	r3, [r7, #32]
                    window[j] = window[k];
 800fdee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdf0:	009b      	lsls	r3, r3, #2
 800fdf2:	3348      	adds	r3, #72	@ 0x48
 800fdf4:	443b      	add	r3, r7
 800fdf6:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800fdfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	3348      	adds	r3, #72	@ 0x48
 800fe00:	443b      	add	r3, r7
 800fe02:	f843 2c3c 	str.w	r2, [r3, #-60]
                    window[k] = temp;
 800fe06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	3348      	adds	r3, #72	@ 0x48
 800fe0c:	443b      	add	r3, r7
 800fe0e:	6a3a      	ldr	r2, [r7, #32]
 800fe10:	f843 2c3c 	str.w	r2, [r3, #-60]
            for (int k = j + 1; k < 5; k++) {
 800fe14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe16:	3301      	adds	r3, #1
 800fe18:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe1c:	2b04      	cmp	r3, #4
 800fe1e:	ddd1      	ble.n	800fdc4 <medianFilter+0x84>
        for (int j = 0; j < 5; j++) {
 800fe20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe22:	3301      	adds	r3, #1
 800fe24:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fe26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe28:	2b04      	cmp	r3, #4
 800fe2a:	ddc7      	ble.n	800fdbc <medianFilter+0x7c>
                }
            }
        }

        // Stocker la médiane dans le tableau filtré
        filtred[i] = window[middle];
 800fe2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe32:	441a      	add	r2, r3
 800fe34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	3348      	adds	r3, #72	@ 0x48
 800fe3a:	443b      	add	r3, r7
 800fe3c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800fe40:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < signal_length; i++) {
 800fe42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe44:	3301      	adds	r3, #1
 800fe46:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	db8c      	blt.n	800fd6a <medianFilter+0x2a>
    }
}
 800fe50:	bf00      	nop
 800fe52:	bf00      	nop
 800fe54:	374c      	adds	r7, #76	@ 0x4c
 800fe56:	46bd      	mov	sp, r7
 800fe58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5c:	4770      	bx	lr
	...

0800fe60 <uart_transmit>:



// Définir les fonctions UART pour le mode polling
int uart_transmit(uint8_t *p_data, uint16_t size) {
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	460b      	mov	r3, r1
 800fe6a:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart2, p_data, size, HAL_MAX_DELAY);
 800fe6c:	887a      	ldrh	r2, [r7, #2]
 800fe6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fe72:	6879      	ldr	r1, [r7, #4]
 800fe74:	4803      	ldr	r0, [pc, #12]	@ (800fe84 <uart_transmit+0x24>)
 800fe76:	f7fc fb2f 	bl	800c4d8 <HAL_UART_Transmit>
 800fe7a:	4603      	mov	r3, r0
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	20000d78 	.word	0x20000d78

0800fe88 <uart_poll_receive>:

int uart_poll_receive(uint8_t *p_data, uint16_t size) {
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	460b      	mov	r3, r1
 800fe92:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart2, p_data, size, 100);
 800fe94:	887a      	ldrh	r2, [r7, #2]
 800fe96:	2364      	movs	r3, #100	@ 0x64
 800fe98:	6879      	ldr	r1, [r7, #4]
 800fe9a:	4804      	ldr	r0, [pc, #16]	@ (800feac <uart_poll_receive+0x24>)
 800fe9c:	f7fc fbaa 	bl	800c5f4 <HAL_UART_Receive>
 800fea0:	4603      	mov	r3, r0
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3708      	adds	r7, #8
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
 800feaa:	bf00      	nop
 800feac:	20000d78 	.word	0x20000d78

0800feb0 <uart_it_receive>:

int uart_it_receive(uint8_t *p_data, uint16_t size){
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	460b      	mov	r3, r1
 800feba:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart2, p_data, size);
 800febc:	887b      	ldrh	r3, [r7, #2]
 800febe:	461a      	mov	r2, r3
 800fec0:	6879      	ldr	r1, [r7, #4]
 800fec2:	4804      	ldr	r0, [pc, #16]	@ (800fed4 <uart_it_receive+0x24>)
 800fec4:	f7fc fcf2 	bl	800c8ac <HAL_UART_Receive_IT>
	return 0;
 800fec8:	2300      	movs	r3, #0
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	20000d78 	.word	0x20000d78

0800fed8 <uart_it_transmit>:

int uart_it_transmit(uint8_t *p_data, uint16_t size){
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	460b      	mov	r3, r1
 800fee2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(&huart2, p_data, size);
 800fee4:	887b      	ldrh	r3, [r7, #2]
 800fee6:	461a      	mov	r2, r3
 800fee8:	6879      	ldr	r1, [r7, #4]
 800feea:	4804      	ldr	r0, [pc, #16]	@ (800fefc <uart_it_transmit+0x24>)
 800feec:	f7fc fc4a 	bl	800c784 <HAL_UART_Transmit_IT>
	return 0;
 800fef0:	2300      	movs	r3, #0
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	bf00      	nop
 800fefc:	20000d78 	.word	0x20000d78

0800ff00 <uart_dma_receive>:

int uart_dma_receive(uint8_t *p_data, uint16_t size){
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	460b      	mov	r3, r1
 800ff0a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_DMA(&huart2, p_data, size);
 800ff0c:	887b      	ldrh	r3, [r7, #2]
 800ff0e:	461a      	mov	r2, r3
 800ff10:	6879      	ldr	r1, [r7, #4]
 800ff12:	4804      	ldr	r0, [pc, #16]	@ (800ff24 <uart_dma_receive+0x24>)
 800ff14:	f7fc fd96 	bl	800ca44 <HAL_UART_Receive_DMA>
	return 0;
 800ff18:	2300      	movs	r3, #0
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3708      	adds	r7, #8
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	20000d78 	.word	0x20000d78

0800ff28 <uart_dma_transmit>:

int uart_dma_transmit(uint8_t *p_data, uint16_t size){
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	460b      	mov	r3, r1
 800ff32:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&huart2, p_data, size);
 800ff34:	887b      	ldrh	r3, [r7, #2]
 800ff36:	461a      	mov	r2, r3
 800ff38:	6879      	ldr	r1, [r7, #4]
 800ff3a:	4804      	ldr	r0, [pc, #16]	@ (800ff4c <uart_dma_transmit+0x24>)
 800ff3c:	f7fc fd02 	bl	800c944 <HAL_UART_Transmit_DMA>
	return 0;
 800ff40:	2300      	movs	r3, #0
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	20000d78 	.word	0x20000d78

0800ff50 <lidar_init>:

h_LIDAR_t lidar;
extern SemaphoreHandle_t semb_halfCllbck;
extern SemaphoreHandle_t semb_cpltCllbck;

void lidar_init(void){
 800ff50:	b580      	push	{r7, lr}
 800ff52:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA,LIDAR_M_CTR_Pin , SET);
 800ff54:	2201      	movs	r2, #1
 800ff56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ff5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ff5e:	f7f8 fe25 	bl	8008bac <HAL_GPIO_WritePin>

	  lidar.serial_drv.transmit = uart_transmit;
 800ff62:	4b0a      	ldr	r3, [pc, #40]	@ (800ff8c <lidar_init+0x3c>)
 800ff64:	4a0a      	ldr	r2, [pc, #40]	@ (800ff90 <lidar_init+0x40>)
 800ff66:	601a      	str	r2, [r3, #0]
	  lidar.serial_drv.poll_receive = uart_poll_receive;
 800ff68:	4b08      	ldr	r3, [pc, #32]	@ (800ff8c <lidar_init+0x3c>)
 800ff6a:	4a0a      	ldr	r2, [pc, #40]	@ (800ff94 <lidar_init+0x44>)
 800ff6c:	605a      	str	r2, [r3, #4]

	  lidar.serial_drv.it_receive=uart_it_receive;
 800ff6e:	4b07      	ldr	r3, [pc, #28]	@ (800ff8c <lidar_init+0x3c>)
 800ff70:	4a09      	ldr	r2, [pc, #36]	@ (800ff98 <lidar_init+0x48>)
 800ff72:	609a      	str	r2, [r3, #8]
	  lidar.serial_drv.it_transmit=uart_it_transmit;
 800ff74:	4b05      	ldr	r3, [pc, #20]	@ (800ff8c <lidar_init+0x3c>)
 800ff76:	4a09      	ldr	r2, [pc, #36]	@ (800ff9c <lidar_init+0x4c>)
 800ff78:	60da      	str	r2, [r3, #12]

	  lidar.serial_drv.dma_receive=uart_dma_receive;
 800ff7a:	4b04      	ldr	r3, [pc, #16]	@ (800ff8c <lidar_init+0x3c>)
 800ff7c:	4a08      	ldr	r2, [pc, #32]	@ (800ffa0 <lidar_init+0x50>)
 800ff7e:	611a      	str	r2, [r3, #16]
	  lidar.serial_drv.dma_transmit=uart_dma_transmit;
 800ff80:	4b02      	ldr	r3, [pc, #8]	@ (800ff8c <lidar_init+0x3c>)
 800ff82:	4a08      	ldr	r2, [pc, #32]	@ (800ffa4 <lidar_init+0x54>)
 800ff84:	615a      	str	r2, [r3, #20]
}
 800ff86:	bf00      	nop
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	20000ecc 	.word	0x20000ecc
 800ff90:	0800fe61 	.word	0x0800fe61
 800ff94:	0800fe89 	.word	0x0800fe89
 800ff98:	0800feb1 	.word	0x0800feb1
 800ff9c:	0800fed9 	.word	0x0800fed9
 800ffa0:	0800ff01 	.word	0x0800ff01
 800ffa4:	0800ff29 	.word	0x0800ff29

0800ffa8 <lidarTake>:

void lidarTake (void * pvParameters){
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b084      	sub	sp, #16
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
	uint8_t* buff;

	  if (LIDAR_start_scan_dma(&lidar) == 0) {
 800ffb0:	4814      	ldr	r0, [pc, #80]	@ (8010004 <lidarTake+0x5c>)
 800ffb2:	f7ff fca7 	bl	800f904 <LIDAR_start_scan_dma>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d103      	bne.n	800ffc4 <lidarTake+0x1c>
	      printf("LIDAR scanning started successfully.\r\n");
 800ffbc:	4812      	ldr	r0, [pc, #72]	@ (8010008 <lidarTake+0x60>)
 800ffbe:	f008 fd11 	bl	80189e4 <puts>
 800ffc2:	e002      	b.n	800ffca <lidarTake+0x22>
	  } else {
	      printf("Failed to start LIDAR scanning.\r\n");
 800ffc4:	4811      	ldr	r0, [pc, #68]	@ (801000c <lidarTake+0x64>)
 800ffc6:	f008 fd0d 	bl	80189e4 <puts>
	  }

	for(;;){
		// Attente du Semahore de half buffer
		xSemaphoreTake(semb_halfCllbck, portMAX_DELAY);
 800ffca:	4b11      	ldr	r3, [pc, #68]	@ (8010010 <lidarTake+0x68>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f003 fa38 	bl	8013448 <xQueueSemaphoreTake>

		// Pointeur sur le début des données
		buff = lidar.processing.receive_buff;
 800ffd8:	4b0e      	ldr	r3, [pc, #56]	@ (8010014 <lidarTake+0x6c>)
 800ffda:	60fb      	str	r3, [r7, #12]
		LIDAR_process_frame(&lidar, buff);
 800ffdc:	68f9      	ldr	r1, [r7, #12]
 800ffde:	4809      	ldr	r0, [pc, #36]	@ (8010004 <lidarTake+0x5c>)
 800ffe0:	f7ff fcc8 	bl	800f974 <LIDAR_process_frame>


		// Attente du semaphore du complete buffer
		xSemaphoreTake(semb_cpltCllbck, portMAX_DELAY);
 800ffe4:	4b0c      	ldr	r3, [pc, #48]	@ (8010018 <lidarTake+0x70>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ffec:	4618      	mov	r0, r3
 800ffee:	f003 fa2b 	bl	8013448 <xQueueSemaphoreTake>

		// Pointeur sur la moitié des données
		buff = &lidar.processing.receive_buff[FRAME_BUFF_SIZE];
 800fff2:	4b0a      	ldr	r3, [pc, #40]	@ (801001c <lidarTake+0x74>)
 800fff4:	60fb      	str	r3, [r7, #12]
		LIDAR_process_frame(&lidar, buff);
 800fff6:	68f9      	ldr	r1, [r7, #12]
 800fff8:	4802      	ldr	r0, [pc, #8]	@ (8010004 <lidarTake+0x5c>)
 800fffa:	f7ff fcbb 	bl	800f974 <LIDAR_process_frame>
		xSemaphoreTake(semb_halfCllbck, portMAX_DELAY);
 800fffe:	bf00      	nop
 8010000:	e7e3      	b.n	800ffca <lidarTake+0x22>
 8010002:	bf00      	nop
 8010004:	20000ecc 	.word	0x20000ecc
 8010008:	0801bd58 	.word	0x0801bd58
 801000c:	0801bd80 	.word	0x0801bd80
 8010010:	20000744 	.word	0x20000744
 8010014:	20001cbc 	.word	0x20001cbc
 8010018:	20000748 	.word	0x20000748
 801001c:	2000248c 	.word	0x2000248c

08010020 <lidarprocess>:
		}
}

void lidarprocess (void * pvParameters){
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]

	for(;;){

	    medianFilter(&lidar);
 8010028:	480a      	ldr	r0, [pc, #40]	@ (8010054 <lidarprocess+0x34>)
 801002a:	f7ff fe89 	bl	800fd40 <medianFilter>
	    find_clusters(&lidar);
 801002e:	4809      	ldr	r0, [pc, #36]	@ (8010054 <lidarprocess+0x34>)
 8010030:	f7ff fdd0 	bl	800fbd4 <find_clusters>
	    printf("Clusters Maison trouvees : %d \r\n", lidar.processing.cluster_cnt);
 8010034:	4b07      	ldr	r3, [pc, #28]	@ (8010054 <lidarprocess+0x34>)
 8010036:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801003a:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 801003e:	4619      	mov	r1, r3
 8010040:	4805      	ldr	r0, [pc, #20]	@ (8010058 <lidarprocess+0x38>)
 8010042:	f008 fc67 	bl	8018914 <iprintf>
	    vTaskDelay(DUREE);
 8010046:	f241 3088 	movw	r0, #5000	@ 0x1388
 801004a:	f003 fea1 	bl	8013d90 <vTaskDelay>
	    medianFilter(&lidar);
 801004e:	bf00      	nop
 8010050:	e7ea      	b.n	8010028 <lidarprocess+0x8>
 8010052:	bf00      	nop
 8010054:	20000ecc 	.word	0x20000ecc
 8010058:	0801bda4 	.word	0x0801bda4

0801005c <__NVIC_EnableIRQ>:
{
 801005c:	b480      	push	{r7}
 801005e:	b083      	sub	sp, #12
 8010060:	af00      	add	r7, sp, #0
 8010062:	4603      	mov	r3, r0
 8010064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801006a:	2b00      	cmp	r3, #0
 801006c:	db0b      	blt.n	8010086 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801006e:	79fb      	ldrb	r3, [r7, #7]
 8010070:	f003 021f 	and.w	r2, r3, #31
 8010074:	4907      	ldr	r1, [pc, #28]	@ (8010094 <__NVIC_EnableIRQ+0x38>)
 8010076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801007a:	095b      	lsrs	r3, r3, #5
 801007c:	2001      	movs	r0, #1
 801007e:	fa00 f202 	lsl.w	r2, r0, r2
 8010082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010086:	bf00      	nop
 8010088:	370c      	adds	r7, #12
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr
 8010092:	bf00      	nop
 8010094:	e000e100 	.word	0xe000e100

08010098 <__NVIC_SetPriority>:
{
 8010098:	b480      	push	{r7}
 801009a:	b083      	sub	sp, #12
 801009c:	af00      	add	r7, sp, #0
 801009e:	4603      	mov	r3, r0
 80100a0:	6039      	str	r1, [r7, #0]
 80100a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80100a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	db0a      	blt.n	80100c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	b2da      	uxtb	r2, r3
 80100b0:	490c      	ldr	r1, [pc, #48]	@ (80100e4 <__NVIC_SetPriority+0x4c>)
 80100b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80100b6:	0112      	lsls	r2, r2, #4
 80100b8:	b2d2      	uxtb	r2, r2
 80100ba:	440b      	add	r3, r1
 80100bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80100c0:	e00a      	b.n	80100d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	b2da      	uxtb	r2, r3
 80100c6:	4908      	ldr	r1, [pc, #32]	@ (80100e8 <__NVIC_SetPriority+0x50>)
 80100c8:	79fb      	ldrb	r3, [r7, #7]
 80100ca:	f003 030f 	and.w	r3, r3, #15
 80100ce:	3b04      	subs	r3, #4
 80100d0:	0112      	lsls	r2, r2, #4
 80100d2:	b2d2      	uxtb	r2, r2
 80100d4:	440b      	add	r3, r1
 80100d6:	761a      	strb	r2, [r3, #24]
}
 80100d8:	bf00      	nop
 80100da:	370c      	adds	r7, #12
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr
 80100e4:	e000e100 	.word	0xe000e100
 80100e8:	e000ed00 	.word	0xe000ed00

080100ec <LL_AHB2_GRP1_EnableClock>:
{
 80100ec:	b480      	push	{r7}
 80100ee:	b085      	sub	sp, #20
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80100f4:	4b08      	ldr	r3, [pc, #32]	@ (8010118 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80100f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80100f8:	4907      	ldr	r1, [pc, #28]	@ (8010118 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	4313      	orrs	r3, r2
 80100fe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8010100:	4b05      	ldr	r3, [pc, #20]	@ (8010118 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8010102:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4013      	ands	r3, r2
 8010108:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801010a:	68fb      	ldr	r3, [r7, #12]
}
 801010c:	bf00      	nop
 801010e:	3714      	adds	r7, #20
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr
 8010118:	40021000 	.word	0x40021000

0801011c <LL_GPIO_SetPinMode>:
{
 801011c:	b480      	push	{r7}
 801011e:	b08b      	sub	sp, #44	@ 0x2c
 8010120:	af00      	add	r7, sp, #0
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	60b9      	str	r1, [r7, #8]
 8010126:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	fa93 f3a3 	rbit	r3, r3
 8010136:	613b      	str	r3, [r7, #16]
  return result;
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801013c:	69bb      	ldr	r3, [r7, #24]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d101      	bne.n	8010146 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8010142:	2320      	movs	r3, #32
 8010144:	e003      	b.n	801014e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	fab3 f383 	clz	r3, r3
 801014c:	b2db      	uxtb	r3, r3
 801014e:	005b      	lsls	r3, r3, #1
 8010150:	2103      	movs	r1, #3
 8010152:	fa01 f303 	lsl.w	r3, r1, r3
 8010156:	43db      	mvns	r3, r3
 8010158:	401a      	ands	r2, r3
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801015e:	6a3b      	ldr	r3, [r7, #32]
 8010160:	fa93 f3a3 	rbit	r3, r3
 8010164:	61fb      	str	r3, [r7, #28]
  return result;
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801016a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801016c:	2b00      	cmp	r3, #0
 801016e:	d101      	bne.n	8010174 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8010170:	2320      	movs	r3, #32
 8010172:	e003      	b.n	801017c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8010174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010176:	fab3 f383 	clz	r3, r3
 801017a:	b2db      	uxtb	r3, r3
 801017c:	005b      	lsls	r3, r3, #1
 801017e:	6879      	ldr	r1, [r7, #4]
 8010180:	fa01 f303 	lsl.w	r3, r1, r3
 8010184:	431a      	orrs	r2, r3
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	601a      	str	r2, [r3, #0]
}
 801018a:	bf00      	nop
 801018c:	372c      	adds	r7, #44	@ 0x2c
 801018e:	46bd      	mov	sp, r7
 8010190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010194:	4770      	bx	lr

08010196 <LL_GPIO_SetPinPull>:
{
 8010196:	b480      	push	{r7}
 8010198:	b08b      	sub	sp, #44	@ 0x2c
 801019a:	af00      	add	r7, sp, #0
 801019c:	60f8      	str	r0, [r7, #12]
 801019e:	60b9      	str	r1, [r7, #8]
 80101a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	68da      	ldr	r2, [r3, #12]
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	fa93 f3a3 	rbit	r3, r3
 80101b0:	613b      	str	r3, [r7, #16]
  return result;
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d101      	bne.n	80101c0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80101bc:	2320      	movs	r3, #32
 80101be:	e003      	b.n	80101c8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	fab3 f383 	clz	r3, r3
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	005b      	lsls	r3, r3, #1
 80101ca:	2103      	movs	r1, #3
 80101cc:	fa01 f303 	lsl.w	r3, r1, r3
 80101d0:	43db      	mvns	r3, r3
 80101d2:	401a      	ands	r2, r3
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80101d8:	6a3b      	ldr	r3, [r7, #32]
 80101da:	fa93 f3a3 	rbit	r3, r3
 80101de:	61fb      	str	r3, [r7, #28]
  return result;
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80101e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d101      	bne.n	80101ee <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80101ea:	2320      	movs	r3, #32
 80101ec:	e003      	b.n	80101f6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80101ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101f0:	fab3 f383 	clz	r3, r3
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	005b      	lsls	r3, r3, #1
 80101f8:	6879      	ldr	r1, [r7, #4]
 80101fa:	fa01 f303 	lsl.w	r3, r1, r3
 80101fe:	431a      	orrs	r2, r3
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	60da      	str	r2, [r3, #12]
}
 8010204:	bf00      	nop
 8010206:	372c      	adds	r7, #44	@ 0x2c
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <LL_UCPD_Enable>:
{
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	601a      	str	r2, [r3, #0]
}
 8010224:	bf00      	nop
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010242:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010246:	683a      	ldr	r2, [r7, #0]
 8010248:	431a      	orrs	r2, r3
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	601a      	str	r2, [r3, #0]
}
 801024e:	bf00      	nop
 8010250:	370c      	adds	r7, #12
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr

0801025a <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 801025a:	b480      	push	{r7}
 801025c:	b083      	sub	sp, #12
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
 8010262:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	431a      	orrs	r2, r3
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	60da      	str	r2, [r3, #12]
}
 8010274:	bf00      	nop
 8010276:	370c      	adds	r7, #12
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr

08010280 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	691b      	ldr	r3, [r3, #16]
 801028c:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	611a      	str	r2, [r3, #16]
}
 8010294:	bf00      	nop
 8010296:	370c      	adds	r7, #12
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	611a      	str	r2, [r3, #16]
}
 80102b4:	bf00      	nop
 80102b6:	370c      	adds	r7, #12
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr

080102c0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80102c0:	b480      	push	{r7}
 80102c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80102c4:	4b05      	ldr	r3, [pc, #20]	@ (80102dc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80102c6:	689b      	ldr	r3, [r3, #8]
 80102c8:	4a04      	ldr	r2, [pc, #16]	@ (80102dc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80102ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80102ce:	6093      	str	r3, [r2, #8]
}
 80102d0:	bf00      	nop
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop
 80102dc:	40007000 	.word	0x40007000

080102e0 <CAD_Init>:
  * @param  pParams       Pointer on PD parameters based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 80102e0:	b590      	push	{r4, r7, lr}
 80102e2:	b08b      	sub	sp, #44	@ 0x2c
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	60b9      	str	r1, [r7, #8]
 80102e8:	607a      	str	r2, [r7, #4]
 80102ea:	603b      	str	r3, [r7, #0]
 80102ec:	4603      	mov	r3, r0
 80102ee:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80102f0:	7bfa      	ldrb	r2, [r7, #15]
 80102f2:	4613      	mov	r3, r2
 80102f4:	005b      	lsls	r3, r3, #1
 80102f6:	4413      	add	r3, r2
 80102f8:	009b      	lsls	r3, r3, #2
 80102fa:	4a66      	ldr	r2, [pc, #408]	@ (8010494 <CAD_Init+0x1b4>)
 80102fc:	4413      	add	r3, r2
 80102fe:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 8010300:	7bfa      	ldrb	r2, [r7, #15]
 8010302:	4965      	ldr	r1, [pc, #404]	@ (8010498 <CAD_Init+0x1b8>)
 8010304:	4613      	mov	r3, r2
 8010306:	011b      	lsls	r3, r3, #4
 8010308:	1a9b      	subs	r3, r3, r2
 801030a:	009b      	lsls	r3, r3, #2
 801030c:	440b      	add	r3, r1
 801030e:	3310      	adds	r3, #16
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 8010314:	7bfa      	ldrb	r2, [r7, #15]
 8010316:	4960      	ldr	r1, [pc, #384]	@ (8010498 <CAD_Init+0x1b8>)
 8010318:	4613      	mov	r3, r2
 801031a:	011b      	lsls	r3, r3, #4
 801031c:	1a9b      	subs	r3, r3, r2
 801031e:	009b      	lsls	r3, r3, #2
 8010320:	440b      	add	r3, r1
 8010322:	330c      	adds	r3, #12
 8010324:	68ba      	ldr	r2, [r7, #8]
 8010326:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8010328:	7bfa      	ldrb	r2, [r7, #15]
 801032a:	495b      	ldr	r1, [pc, #364]	@ (8010498 <CAD_Init+0x1b8>)
 801032c:	4613      	mov	r3, r2
 801032e:	011b      	lsls	r3, r3, #4
 8010330:	1a9b      	subs	r3, r3, r2
 8010332:	009b      	lsls	r3, r3, #2
 8010334:	440b      	add	r3, r1
 8010336:	330c      	adds	r3, #12
 8010338:	6819      	ldr	r1, [r3, #0]
 801033a:	7bfa      	ldrb	r2, [r7, #15]
 801033c:	4856      	ldr	r0, [pc, #344]	@ (8010498 <CAD_Init+0x1b8>)
 801033e:	4613      	mov	r3, r2
 8010340:	011b      	lsls	r3, r3, #4
 8010342:	1a9b      	subs	r3, r3, r2
 8010344:	009b      	lsls	r3, r3, #2
 8010346:	4403      	add	r3, r0
 8010348:	3310      	adds	r3, #16
 801034a:	681a      	ldr	r2, [r3, #0]
 801034c:	794b      	ldrb	r3, [r1, #5]
 801034e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8010352:	b2d9      	uxtb	r1, r3
 8010354:	7893      	ldrb	r3, [r2, #2]
 8010356:	f361 0301 	bfi	r3, r1, #0, #2
 801035a:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 801035c:	7bfa      	ldrb	r2, [r7, #15]
 801035e:	494e      	ldr	r1, [pc, #312]	@ (8010498 <CAD_Init+0x1b8>)
 8010360:	4613      	mov	r3, r2
 8010362:	011b      	lsls	r3, r3, #4
 8010364:	1a9b      	subs	r3, r3, r2
 8010366:	009b      	lsls	r3, r3, #2
 8010368:	440b      	add	r3, r1
 801036a:	3310      	adds	r3, #16
 801036c:	681a      	ldr	r2, [r3, #0]
 801036e:	7893      	ldrb	r3, [r2, #2]
 8010370:	f36f 0383 	bfc	r3, #2, #2
 8010374:	7093      	strb	r3, [r2, #2]

  /* Reset handle */
  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 8010376:	220c      	movs	r2, #12
 8010378:	2100      	movs	r1, #0
 801037a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801037c:	f008 fba8 	bl	8018ad0 <memset>

  /* Register CAD wake up callback */
  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 8010380:	7bfa      	ldrb	r2, [r7, #15]
 8010382:	4945      	ldr	r1, [pc, #276]	@ (8010498 <CAD_Init+0x1b8>)
 8010384:	4613      	mov	r3, r2
 8010386:	011b      	lsls	r3, r3, #4
 8010388:	1a9b      	subs	r3, r3, r2
 801038a:	009b      	lsls	r3, r3, #2
 801038c:	440b      	add	r3, r1
 801038e:	332c      	adds	r3, #44	@ 0x2c
 8010390:	683a      	ldr	r2, [r7, #0]
 8010392:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 8010394:	7bfc      	ldrb	r4, [r7, #15]
 8010396:	7bfb      	ldrb	r3, [r7, #15]
 8010398:	4618      	mov	r0, r3
 801039a:	f000 fb6b 	bl	8010a74 <USBPD_HW_GetUSPDInstance>
 801039e:	4602      	mov	r2, r0
 80103a0:	493d      	ldr	r1, [pc, #244]	@ (8010498 <CAD_Init+0x1b8>)
 80103a2:	4623      	mov	r3, r4
 80103a4:	011b      	lsls	r3, r3, #4
 80103a6:	1b1b      	subs	r3, r3, r4
 80103a8:	009b      	lsls	r3, r3, #2
 80103aa:	440b      	add	r3, r1
 80103ac:	601a      	str	r2, [r3, #0]

  /* Initialize UCPD */
  LL_UCPD_StructInit(&settings);
 80103ae:	f107 0314 	add.w	r3, r7, #20
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7ff fa8e 	bl	800f8d4 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 80103b8:	7bfa      	ldrb	r2, [r7, #15]
 80103ba:	4937      	ldr	r1, [pc, #220]	@ (8010498 <CAD_Init+0x1b8>)
 80103bc:	4613      	mov	r3, r2
 80103be:	011b      	lsls	r3, r3, #4
 80103c0:	1a9b      	subs	r3, r3, r2
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	440b      	add	r3, r1
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f107 0214 	add.w	r2, r7, #20
 80103cc:	4611      	mov	r1, r2
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7ff fa52 	bl	800f878 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 80103d4:	7bfa      	ldrb	r2, [r7, #15]
 80103d6:	4930      	ldr	r1, [pc, #192]	@ (8010498 <CAD_Init+0x1b8>)
 80103d8:	4613      	mov	r3, r2
 80103da:	011b      	lsls	r3, r3, #4
 80103dc:	1a9b      	subs	r3, r3, r2
 80103de:	009b      	lsls	r3, r3, #2
 80103e0:	440b      	add	r3, r1
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7ff ff21 	bl	8010230 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80103ee:	7bfa      	ldrb	r2, [r7, #15]
 80103f0:	4929      	ldr	r1, [pc, #164]	@ (8010498 <CAD_Init+0x1b8>)
 80103f2:	4613      	mov	r3, r2
 80103f4:	011b      	lsls	r3, r3, #4
 80103f6:	1a9b      	subs	r3, r3, r2
 80103f8:	009b      	lsls	r3, r3, #2
 80103fa:	440b      	add	r3, r1
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8010402:	4618      	mov	r0, r3
 8010404:	f7ff ff29 	bl	801025a <LL_UCPD_SetccEnable>
#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */

  /* Disable dead battery */
  LL_PWR_DisableUCPDDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 8010408:	f7ff ff5a 	bl	80102c0 <LL_PWR_DisableUCPDDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 801040c:	2002      	movs	r0, #2
 801040e:	f7ff fe6d 	bl	80100ec <LL_AHB2_GRP1_EnableClock>

  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 8010412:	2203      	movs	r2, #3
 8010414:	2140      	movs	r1, #64	@ 0x40
 8010416:	4821      	ldr	r0, [pc, #132]	@ (801049c <CAD_Init+0x1bc>)
 8010418:	f7ff fe80 	bl	801011c <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 801041c:	2203      	movs	r2, #3
 801041e:	2110      	movs	r1, #16
 8010420:	481e      	ldr	r0, [pc, #120]	@ (801049c <CAD_Init+0x1bc>)
 8010422:	f7ff fe7b 	bl	801011c <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 8010426:	2200      	movs	r2, #0
 8010428:	2140      	movs	r1, #64	@ 0x40
 801042a:	481c      	ldr	r0, [pc, #112]	@ (801049c <CAD_Init+0x1bc>)
 801042c:	f7ff feb3 	bl	8010196 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8010430:	2200      	movs	r2, #0
 8010432:	2110      	movs	r1, #16
 8010434:	4819      	ldr	r0, [pc, #100]	@ (801049c <CAD_Init+0x1bc>)
 8010436:	f7ff feae 	bl	8010196 <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 801043a:	7bfb      	ldrb	r3, [r7, #15]
 801043c:	4618      	mov	r0, r3
 801043e:	f005 fc8f 	bl	8015d60 <BSP_USBPD_PWR_Init>
  /* Register VBUS detect callback */
  BSP_USBPD_PWR_RegisterVBUSDetectCallback(PortNum, CAD_HW_IF_VBUSDetectCallback);
#endif /* TCPP0203_SUPPORT */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8010442:	7bfa      	ldrb	r2, [r7, #15]
 8010444:	4914      	ldr	r1, [pc, #80]	@ (8010498 <CAD_Init+0x1b8>)
 8010446:	4613      	mov	r3, r2
 8010448:	011b      	lsls	r3, r3, #4
 801044a:	1a9b      	subs	r3, r3, r2
 801044c:	009b      	lsls	r3, r3, #2
 801044e:	440b      	add	r3, r1
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	4618      	mov	r0, r3
 8010454:	f7ff fedc 	bl	8010210 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8010458:	7bfb      	ldrb	r3, [r7, #15]
 801045a:	4618      	mov	r0, r3
 801045c:	f001 fbd2 	bl	8011c04 <USBPDM1_AssertRd>
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      /* Set current state machine to SNK state machine */
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 8010460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010462:	4a0f      	ldr	r2, [pc, #60]	@ (80104a0 <CAD_Init+0x1c0>)
 8010464:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 8010466:	7bfa      	ldrb	r2, [r7, #15]
 8010468:	490b      	ldr	r1, [pc, #44]	@ (8010498 <CAD_Init+0x1b8>)
 801046a:	4613      	mov	r3, r2
 801046c:	011b      	lsls	r3, r3, #4
 801046e:	1a9b      	subs	r3, r3, r2
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	440b      	add	r3, r1
 8010474:	330c      	adds	r3, #12
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	795b      	ldrb	r3, [r3, #5]
 801047a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801047e:	b2d9      	uxtb	r1, r3
 8010480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010482:	7853      	ldrb	r3, [r2, #1]
 8010484:	f361 13c7 	bfi	r3, r1, #7, #1
 8010488:	7053      	strb	r3, [r2, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 801048a:	bf00      	nop
 801048c:	372c      	adds	r7, #44	@ 0x2c
 801048e:	46bd      	mov	sp, r7
 8010490:	bd90      	pop	{r4, r7, pc}
 8010492:	bf00      	nop
 8010494:	200036b4 	.word	0x200036b4
 8010498:	200036cc 	.word	0x200036cc
 801049c:	48000400 	.word	0x48000400
 80104a0:	080104f1 	.word	0x080104f1

080104a4 <CAD_Enter_ErrorRecovery>:
  * @brief  Function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b082      	sub	sp, #8
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	4603      	mov	r3, r0
 80104ac:	71fb      	strb	r3, [r7, #7]
  /* Remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 80104ae:	79fb      	ldrb	r3, [r7, #7]
 80104b0:	4618      	mov	r0, r3
 80104b2:	f001 fc39 	bl	8011d28 <USBPDM1_EnterErrorRecovery>
  /* Set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 80104b6:	79fa      	ldrb	r2, [r7, #7]
 80104b8:	490b      	ldr	r1, [pc, #44]	@ (80104e8 <CAD_Enter_ErrorRecovery+0x44>)
 80104ba:	4613      	mov	r3, r2
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	4413      	add	r3, r2
 80104c0:	009b      	lsls	r3, r3, #2
 80104c2:	18ca      	adds	r2, r1, r3
 80104c4:	7813      	ldrb	r3, [r2, #0]
 80104c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104ca:	7013      	strb	r3, [r2, #0]
  /* Wake up CAD task */
  Ports[PortNum].USBPD_CAD_WakeUp();
 80104cc:	79fa      	ldrb	r2, [r7, #7]
 80104ce:	4907      	ldr	r1, [pc, #28]	@ (80104ec <CAD_Enter_ErrorRecovery+0x48>)
 80104d0:	4613      	mov	r3, r2
 80104d2:	011b      	lsls	r3, r3, #4
 80104d4:	1a9b      	subs	r3, r3, r2
 80104d6:	009b      	lsls	r3, r3, #2
 80104d8:	440b      	add	r3, r1
 80104da:	332c      	adds	r3, #44	@ 0x2c
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	4798      	blx	r3
}
 80104e0:	bf00      	nop
 80104e2:	3708      	adds	r7, #8
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	200036b4 	.word	0x200036b4
 80104ec:	200036cc 	.word	0x200036cc

080104f0 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* Function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b086      	sub	sp, #24
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	4603      	mov	r3, r0
 80104f8:	60b9      	str	r1, [r7, #8]
 80104fa:	607a      	str	r2, [r7, #4]
 80104fc:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80104fe:	7bfa      	ldrb	r2, [r7, #15]
 8010500:	4613      	mov	r3, r2
 8010502:	005b      	lsls	r3, r3, #1
 8010504:	4413      	add	r3, r2
 8010506:	009b      	lsls	r3, r3, #2
 8010508:	4a17      	ldr	r2, [pc, #92]	@ (8010568 <CAD_StateMachine_SNK+0x78>)
 801050a:	4413      	add	r3, r2
 801050c:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 801050e:	2302      	movs	r3, #2
 8010510:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /* Check CAD STATE */
  switch (_handle->cstate)
 8010512:	693b      	ldr	r3, [r7, #16]
 8010514:	785b      	ldrb	r3, [r3, #1]
 8010516:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801051a:	b2db      	uxtb	r3, r3
 801051c:	2b03      	cmp	r3, #3
 801051e:	d014      	beq.n	801054a <CAD_StateMachine_SNK+0x5a>
 8010520:	2b03      	cmp	r3, #3
 8010522:	dc1a      	bgt.n	801055a <CAD_StateMachine_SNK+0x6a>
 8010524:	2b01      	cmp	r3, #1
 8010526:	d002      	beq.n	801052e <CAD_StateMachine_SNK+0x3e>
 8010528:	2b02      	cmp	r3, #2
 801052a:	d006      	beq.n	801053a <CAD_StateMachine_SNK+0x4a>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 801052c:	e015      	b.n	801055a <CAD_StateMachine_SNK+0x6a>
      _timing = ManageStateDetached_SNK(PortNum);
 801052e:	7bfb      	ldrb	r3, [r7, #15]
 8010530:	4618      	mov	r0, r3
 8010532:	f000 f955 	bl	80107e0 <ManageStateDetached_SNK>
 8010536:	6178      	str	r0, [r7, #20]
      break;
 8010538:	e010      	b.n	801055c <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 801053a:	7bfb      	ldrb	r3, [r7, #15]
 801053c:	687a      	ldr	r2, [r7, #4]
 801053e:	68b9      	ldr	r1, [r7, #8]
 8010540:	4618      	mov	r0, r3
 8010542:	f000 f997 	bl	8010874 <ManageStateAttachedWait_SNK>
 8010546:	6178      	str	r0, [r7, #20]
      break;
 8010548:	e008      	b.n	801055c <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 801054a:	7bfb      	ldrb	r3, [r7, #15]
 801054c:	687a      	ldr	r2, [r7, #4]
 801054e:	68b9      	ldr	r1, [r7, #8]
 8010550:	4618      	mov	r0, r3
 8010552:	f000 fa11 	bl	8010978 <ManageStateAttached_SNK>
 8010556:	6178      	str	r0, [r7, #20]
      break;
 8010558:	e000      	b.n	801055c <CAD_StateMachine_SNK+0x6c>
      break;
 801055a:	bf00      	nop
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 801055c:	697b      	ldr	r3, [r7, #20]
}
 801055e:	4618      	mov	r0, r3
 8010560:	3718      	adds	r7, #24
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	200036b4 	.word	0x200036b4

0801056c <CAD_StateMachine>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b086      	sub	sp, #24
 8010570:	af00      	add	r7, sp, #0
 8010572:	4603      	mov	r3, r0
 8010574:	60b9      	str	r1, [r7, #8]
 8010576:	607a      	str	r2, [r7, #4]
 8010578:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801057a:	7bfa      	ldrb	r2, [r7, #15]
 801057c:	4613      	mov	r3, r2
 801057e:	005b      	lsls	r3, r3, #1
 8010580:	4413      	add	r3, r2
 8010582:	009b      	lsls	r3, r3, #2
 8010584:	4a52      	ldr	r2, [pc, #328]	@ (80106d0 <CAD_StateMachine+0x164>)
 8010586:	4413      	add	r3, r2
 8010588:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 801058a:	2302      	movs	r3, #2
 801058c:	617b      	str	r3, [r7, #20]

  /* Set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	2200      	movs	r2, #0
 8010592:	701a      	strb	r2, [r3, #0]

  /* If a swap is on going, return default timing */
  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 8010594:	7bfa      	ldrb	r2, [r7, #15]
 8010596:	494f      	ldr	r1, [pc, #316]	@ (80106d4 <CAD_StateMachine+0x168>)
 8010598:	4613      	mov	r3, r2
 801059a:	011b      	lsls	r3, r3, #4
 801059c:	1a9b      	subs	r3, r3, r2
 801059e:	009b      	lsls	r3, r3, #2
 80105a0:	440b      	add	r3, r1
 80105a2:	3310      	adds	r3, #16
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	f003 0310 	and.w	r3, r3, #16
 80105ac:	b2db      	uxtb	r3, r3
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d001      	beq.n	80105b6 <CAD_StateMachine+0x4a>
  {
    return _timing;
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	e087      	b.n	80106c6 <CAD_StateMachine+0x15a>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80105be:	b2db      	uxtb	r3, r3
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d00a      	beq.n	80105da <CAD_StateMachine+0x6e>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 80105c4:	693a      	ldr	r2, [r7, #16]
 80105c6:	7813      	ldrb	r3, [r2, #0]
 80105c8:	f36f 13c7 	bfc	r3, #7, #1
 80105cc:	7013      	strb	r3, [r2, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 80105ce:	693a      	ldr	r2, [r7, #16]
 80105d0:	7853      	ldrb	r3, [r2, #1]
 80105d2:	210c      	movs	r1, #12
 80105d4:	f361 0345 	bfi	r3, r1, #1, #5
 80105d8:	7053      	strb	r3, [r2, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	785b      	ldrb	r3, [r3, #1]
 80105de:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80105e2:	b2db      	uxtb	r3, r3
 80105e4:	2b0d      	cmp	r3, #13
 80105e6:	d051      	beq.n	801068c <CAD_StateMachine+0x120>
 80105e8:	2b0d      	cmp	r3, #13
 80105ea:	dc62      	bgt.n	80106b2 <CAD_StateMachine+0x146>
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d002      	beq.n	80105f6 <CAD_StateMachine+0x8a>
 80105f0:	2b0c      	cmp	r3, #12
 80105f2:	d024      	beq.n	801063e <CAD_StateMachine+0xd2>
 80105f4:	e05d      	b.n	80106b2 <CAD_StateMachine+0x146>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      /* Enable TypeCEvents Interrupts */
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 80105f6:	7bfa      	ldrb	r2, [r7, #15]
 80105f8:	4936      	ldr	r1, [pc, #216]	@ (80106d4 <CAD_StateMachine+0x168>)
 80105fa:	4613      	mov	r3, r2
 80105fc:	011b      	lsls	r3, r3, #4
 80105fe:	1a9b      	subs	r3, r3, r2
 8010600:	009b      	lsls	r3, r3, #2
 8010602:	440b      	add	r3, r1
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	4618      	mov	r0, r3
 8010608:	f7ff fe3a 	bl	8010280 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 801060c:	7bfa      	ldrb	r2, [r7, #15]
 801060e:	4931      	ldr	r1, [pc, #196]	@ (80106d4 <CAD_StateMachine+0x168>)
 8010610:	4613      	mov	r3, r2
 8010612:	011b      	lsls	r3, r3, #4
 8010614:	1a9b      	subs	r3, r3, r2
 8010616:	009b      	lsls	r3, r3, #2
 8010618:	440b      	add	r3, r1
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4618      	mov	r0, r3
 801061e:	f7ff fe3f 	bl	80102a0 <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      /* Enable IRQ */
      UCPD_INSTANCE0_ENABLEIRQ;
 8010622:	2104      	movs	r1, #4
 8010624:	203f      	movs	r0, #63	@ 0x3f
 8010626:	f7ff fd37 	bl	8010098 <__NVIC_SetPriority>
 801062a:	203f      	movs	r0, #63	@ 0x3f
 801062c:	f7ff fd16 	bl	801005c <__NVIC_EnableIRQ>
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8010630:	693a      	ldr	r2, [r7, #16]
 8010632:	7853      	ldrb	r3, [r2, #1]
 8010634:	2101      	movs	r1, #1
 8010636:	f361 0345 	bfi	r3, r1, #1, #5
 801063a:	7053      	strb	r3, [r2, #1]
      break;
 801063c:	e042      	b.n	80106c4 <CAD_StateMachine+0x158>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 801063e:	7bfb      	ldrb	r3, [r7, #15]
 8010640:	4618      	mov	r0, r3
 8010642:	f001 fb71 	bl	8011d28 <USBPDM1_EnterErrorRecovery>

      /* Forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 8010646:	7bfa      	ldrb	r2, [r7, #15]
 8010648:	4922      	ldr	r1, [pc, #136]	@ (80106d4 <CAD_StateMachine+0x168>)
 801064a:	4613      	mov	r3, r2
 801064c:	011b      	lsls	r3, r3, #4
 801064e:	1a9b      	subs	r3, r3, r2
 8010650:	009b      	lsls	r3, r3, #2
 8010652:	440b      	add	r3, r1
 8010654:	3334      	adds	r3, #52	@ 0x34
 8010656:	2200      	movs	r2, #0
 8010658:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2200      	movs	r2, #0
 801065e:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 8010660:	693a      	ldr	r2, [r7, #16]
 8010662:	7813      	ldrb	r3, [r2, #0]
 8010664:	f36f 0301 	bfc	r3, #0, #2
 8010668:	7013      	strb	r3, [r2, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	2201      	movs	r2, #1
 801066e:	701a      	strb	r2, [r3, #0]

      /* Start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8010670:	f7f5 fcba 	bl	8005fe8 <HAL_GetTick>
 8010674:	4602      	mov	r2, r0
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 801067a:	231a      	movs	r3, #26
 801067c:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 801067e:	693a      	ldr	r2, [r7, #16]
 8010680:	7853      	ldrb	r3, [r2, #1]
 8010682:	210d      	movs	r1, #13
 8010684:	f361 0345 	bfi	r3, r1, #1, #5
 8010688:	7053      	strb	r3, [r2, #1]
      break;
 801068a:	e01b      	b.n	80106c4 <CAD_StateMachine+0x158>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 801068c:	f7f5 fcac 	bl	8005fe8 <HAL_GetTick>
 8010690:	4602      	mov	r2, r0
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	1ad3      	subs	r3, r2, r3
 8010698:	2b1a      	cmp	r3, #26
 801069a:	d912      	bls.n	80106c2 <CAD_StateMachine+0x156>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 801069c:	7bfb      	ldrb	r3, [r7, #15]
 801069e:	4618      	mov	r0, r3
 80106a0:	f001 fab0 	bl	8011c04 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* Switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 80106a4:	693a      	ldr	r2, [r7, #16]
 80106a6:	7853      	ldrb	r3, [r2, #1]
 80106a8:	2101      	movs	r1, #1
 80106aa:	f361 0345 	bfi	r3, r1, #1, #5
 80106ae:	7053      	strb	r3, [r2, #1]
      }
      break;
 80106b0:	e007      	b.n	80106c2 <CAD_StateMachine+0x156>
    }

    default:
    {
      /* Call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	689b      	ldr	r3, [r3, #8]
 80106b6:	7bf8      	ldrb	r0, [r7, #15]
 80106b8:	687a      	ldr	r2, [r7, #4]
 80106ba:	68b9      	ldr	r1, [r7, #8]
 80106bc:	4798      	blx	r3
 80106be:	6178      	str	r0, [r7, #20]
      break;
 80106c0:	e000      	b.n	80106c4 <CAD_StateMachine+0x158>
      break;
 80106c2:	bf00      	nop
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 80106c4:	697b      	ldr	r3, [r7, #20]
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3718      	adds	r7, #24
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
 80106ce:	bf00      	nop
 80106d0:	200036b4 	.word	0x200036b4
 80106d4:	200036cc 	.word	0x200036cc

080106d8 <CAD_Check_HW_SNK>:
  * @brief  Check CCx HW condition
  * @param  PortNum Port
  * @retval none
  */
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 80106d8:	b480      	push	{r7}
 80106da:	b087      	sub	sp, #28
 80106dc:	af00      	add	r7, sp, #0
 80106de:	4603      	mov	r3, r0
 80106e0:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80106e2:	79fa      	ldrb	r2, [r7, #7]
 80106e4:	4613      	mov	r3, r2
 80106e6:	005b      	lsls	r3, r3, #1
 80106e8:	4413      	add	r3, r2
 80106ea:	009b      	lsls	r3, r3, #2
 80106ec:	4a3a      	ldr	r2, [pc, #232]	@ (80107d8 <CAD_Check_HW_SNK+0x100>)
 80106ee:	4413      	add	r3, r2
 80106f0:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 80106f2:	79fa      	ldrb	r2, [r7, #7]
 80106f4:	4939      	ldr	r1, [pc, #228]	@ (80107dc <CAD_Check_HW_SNK+0x104>)
 80106f6:	4613      	mov	r3, r2
 80106f8:	011b      	lsls	r3, r3, #4
 80106fa:	1a9b      	subs	r3, r3, r2
 80106fc:	009b      	lsls	r3, r3, #2
 80106fe:	440b      	add	r3, r1
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	695b      	ldr	r3, [r3, #20]
 8010704:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010708:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 801070a:	79fa      	ldrb	r2, [r7, #7]
 801070c:	4933      	ldr	r1, [pc, #204]	@ (80107dc <CAD_Check_HW_SNK+0x104>)
 801070e:	4613      	mov	r3, r2
 8010710:	011b      	lsls	r3, r3, #4
 8010712:	1a9b      	subs	r3, r3, r2
 8010714:	009b      	lsls	r3, r3, #2
 8010716:	440b      	add	r3, r1
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	695b      	ldr	r3, [r3, #20]
 801071c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8010720:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 8010722:	697a      	ldr	r2, [r7, #20]
 8010724:	7813      	ldrb	r3, [r2, #0]
 8010726:	f36f 0301 	bfc	r3, #0, #2
 801072a:	7013      	strb	r3, [r2, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 801072c:	697a      	ldr	r2, [r7, #20]
 801072e:	7813      	ldrb	r3, [r2, #0]
 8010730:	f36f 0384 	bfc	r3, #2, #3
 8010734:	7013      	strb	r3, [r2, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d021      	beq.n	8010780 <CAD_Check_HW_SNK+0xa8>
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d11e      	bne.n	8010780 <CAD_Check_HW_SNK+0xa8>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 8010742:	697a      	ldr	r2, [r7, #20]
 8010744:	7813      	ldrb	r3, [r2, #0]
 8010746:	2101      	movs	r1, #1
 8010748:	f361 0384 	bfi	r3, r1, #2, #3
 801074c:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC1;
 801074e:	697a      	ldr	r2, [r7, #20]
 8010750:	7813      	ldrb	r3, [r2, #0]
 8010752:	2101      	movs	r1, #1
 8010754:	f361 0301 	bfi	r3, r1, #0, #2
 8010758:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	0c18      	lsrs	r0, r3, #16
 801075e:	79fa      	ldrb	r2, [r7, #7]
 8010760:	491e      	ldr	r1, [pc, #120]	@ (80107dc <CAD_Check_HW_SNK+0x104>)
 8010762:	4613      	mov	r3, r2
 8010764:	011b      	lsls	r3, r3, #4
 8010766:	1a9b      	subs	r3, r3, r2
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	440b      	add	r3, r1
 801076c:	3310      	adds	r3, #16
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	4603      	mov	r3, r0
 8010772:	f003 0303 	and.w	r3, r3, #3
 8010776:	b2d9      	uxtb	r1, r3
 8010778:	7893      	ldrb	r3, [r2, #2]
 801077a:	f361 0383 	bfi	r3, r1, #2, #2
 801077e:	7093      	strb	r3, [r2, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d121      	bne.n	80107ca <CAD_Check_HW_SNK+0xf2>
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d01e      	beq.n	80107ca <CAD_Check_HW_SNK+0xf2>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 801078c:	697a      	ldr	r2, [r7, #20]
 801078e:	7813      	ldrb	r3, [r2, #0]
 8010790:	2101      	movs	r1, #1
 8010792:	f361 0384 	bfi	r3, r1, #2, #3
 8010796:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC2;
 8010798:	697a      	ldr	r2, [r7, #20]
 801079a:	7813      	ldrb	r3, [r2, #0]
 801079c:	2102      	movs	r1, #2
 801079e:	f361 0301 	bfi	r3, r1, #0, #2
 80107a2:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	0c98      	lsrs	r0, r3, #18
 80107a8:	79fa      	ldrb	r2, [r7, #7]
 80107aa:	490c      	ldr	r1, [pc, #48]	@ (80107dc <CAD_Check_HW_SNK+0x104>)
 80107ac:	4613      	mov	r3, r2
 80107ae:	011b      	lsls	r3, r3, #4
 80107b0:	1a9b      	subs	r3, r3, r2
 80107b2:	009b      	lsls	r3, r3, #2
 80107b4:	440b      	add	r3, r1
 80107b6:	3310      	adds	r3, #16
 80107b8:	681a      	ldr	r2, [r3, #0]
 80107ba:	4603      	mov	r3, r0
 80107bc:	f003 0303 	and.w	r3, r3, #3
 80107c0:	b2d9      	uxtb	r1, r3
 80107c2:	7893      	ldrb	r3, [r2, #2]
 80107c4:	f361 0383 	bfi	r3, r1, #2, #2
 80107c8:	7093      	strb	r3, [r2, #2]
  }
}
 80107ca:	bf00      	nop
 80107cc:	371c      	adds	r7, #28
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr
 80107d6:	bf00      	nop
 80107d8:	200036b4 	.word	0x200036b4
 80107dc:	200036cc 	.word	0x200036cc

080107e0 <ManageStateDetached_SNK>:
  * @brief  Manage the detached state for sink role
  * @param  PortNum Port
  * @retval Timeout value
  */
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b084      	sub	sp, #16
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	4603      	mov	r3, r0
 80107e8:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80107ea:	79fa      	ldrb	r2, [r7, #7]
 80107ec:	4613      	mov	r3, r2
 80107ee:	005b      	lsls	r3, r3, #1
 80107f0:	4413      	add	r3, r2
 80107f2:	009b      	lsls	r3, r3, #2
 80107f4:	4a1e      	ldr	r2, [pc, #120]	@ (8010870 <ManageStateDetached_SNK+0x90>)
 80107f6:	4413      	add	r3, r2
 80107f8:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80107fa:	2302      	movs	r3, #2
 80107fc:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 80107fe:	79fb      	ldrb	r3, [r7, #7]
 8010800:	4618      	mov	r0, r3
 8010802:	f7ff ff69 	bl	80106d8 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	f003 031c 	and.w	r3, r3, #28
 801080e:	b2db      	uxtb	r3, r3
 8010810:	2b00      	cmp	r3, #0
 8010812:	d103      	bne.n	801081c <ManageStateDetached_SNK+0x3c>
    /* Value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 8010814:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010818:	60fb      	str	r3, [r7, #12]
 801081a:	e023      	b.n	8010864 <ManageStateDetached_SNK+0x84>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 801081c:	f7f5 fbe4 	bl	8005fe8 <HAL_GetTick>
 8010820:	4602      	mov	r2, r0
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 8010826:	68ba      	ldr	r2, [r7, #8]
 8010828:	7853      	ldrb	r3, [r2, #1]
 801082a:	2102      	movs	r1, #2
 801082c:	f361 0345 	bfi	r3, r1, #1, #5
 8010830:	7053      	strb	r3, [r2, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 8010832:	2001      	movs	r0, #1
 8010834:	f7f5 fbe4 	bl	8006000 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 8010838:	79fb      	ldrb	r3, [r7, #7]
 801083a:	4618      	mov	r0, r3
 801083c:	f7ff ff4c 	bl	80106d8 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	f003 031c 	and.w	r3, r3, #28
 8010848:	b2db      	uxtb	r3, r3
 801084a:	2b00      	cmp	r3, #0
 801084c:	d106      	bne.n	801085c <ManageStateDetached_SNK+0x7c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 801084e:	68ba      	ldr	r2, [r7, #8]
 8010850:	7853      	ldrb	r3, [r2, #1]
 8010852:	2101      	movs	r1, #1
 8010854:	f361 0345 	bfi	r3, r1, #1, #5
 8010858:	7053      	strb	r3, [r2, #1]
 801085a:	e003      	b.n	8010864 <ManageStateDetached_SNK+0x84>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 801085c:	79fb      	ldrb	r3, [r7, #7]
 801085e:	4618      	mov	r0, r3
 8010860:	f005 fa91 	bl	8015d86 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 8010864:	68fb      	ldr	r3, [r7, #12]
}
 8010866:	4618      	mov	r0, r3
 8010868:	3710      	adds	r7, #16
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	200036b4 	.word	0x200036b4

08010874 <ManageStateAttachedWait_SNK>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b088      	sub	sp, #32
 8010878:	af00      	add	r7, sp, #0
 801087a:	4603      	mov	r3, r0
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
 8010880:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010882:	7bfa      	ldrb	r2, [r7, #15]
 8010884:	4613      	mov	r3, r2
 8010886:	005b      	lsls	r3, r3, #1
 8010888:	4413      	add	r3, r2
 801088a:	009b      	lsls	r3, r3, #2
 801088c:	4a39      	ldr	r2, [pc, #228]	@ (8010974 <ManageStateAttachedWait_SNK+0x100>)
 801088e:	4413      	add	r3, r2
 8010890:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010892:	2302      	movs	r3, #2
 8010894:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8010896:	f7f5 fba7 	bl	8005fe8 <HAL_GetTick>
 801089a:	4602      	mov	r2, r0
 801089c:	69bb      	ldr	r3, [r7, #24]
 801089e:	685b      	ldr	r3, [r3, #4]
 80108a0:	1ad3      	subs	r3, r2, r3
 80108a2:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 80108a4:	7bfb      	ldrb	r3, [r7, #15]
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7ff ff16 	bl	80106d8 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 80108ac:	69bb      	ldr	r3, [r7, #24]
 80108ae:	781b      	ldrb	r3, [r3, #0]
 80108b0:	f003 031c 	and.w	r3, r3, #28
 80108b4:	b2db      	uxtb	r3, r3
 80108b6:	2b04      	cmp	r3, #4
 80108b8:	d12c      	bne.n	8010914 <ManageStateAttachedWait_SNK+0xa0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUNCE_THRESHOLD)
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	2b78      	cmp	r3, #120	@ 0x78
 80108be:	d923      	bls.n	8010908 <ManageStateAttachedWait_SNK+0x94>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 80108c0:	7bfb      	ldrb	r3, [r7, #15]
 80108c2:	2101      	movs	r1, #1
 80108c4:	4618      	mov	r0, r3
 80108c6:	f005 fa0f 	bl	8015ce8 <USBPD_PWR_IF_GetVBUSStatus>
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d11b      	bne.n	8010908 <ManageStateAttachedWait_SNK+0x94>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 80108d0:	69bb      	ldr	r3, [r7, #24]
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	461a      	mov	r2, r3
 80108dc:	7bfb      	ldrb	r3, [r7, #15]
 80108de:	4611      	mov	r1, r2
 80108e0:	4618      	mov	r0, r3
 80108e2:	f001 fa95 	bl	8011e10 <HW_SignalAttachement>
        /* Go to attached state */
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 80108e6:	69ba      	ldr	r2, [r7, #24]
 80108e8:	7853      	ldrb	r3, [r2, #1]
 80108ea:	2103      	movs	r1, #3
 80108ec:	f361 0345 	bfi	r3, r1, #1, #5
 80108f0:	7053      	strb	r3, [r2, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	2202      	movs	r2, #2
 80108f6:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 80108f8:	69bb      	ldr	r3, [r7, #24]
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010900:	b2db      	uxtb	r3, r3
 8010902:	461a      	mov	r2, r3
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8010908:	69ba      	ldr	r2, [r7, #24]
 801090a:	7813      	ldrb	r3, [r2, #0]
 801090c:	f36f 1345 	bfc	r3, #5, #1
 8010910:	7013      	strb	r3, [r2, #0]
 8010912:	e02a      	b.n	801096a <ManageStateAttachedWait_SNK+0xf6>
  }
  else
  {
    /* Start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8010914:	69bb      	ldr	r3, [r7, #24]
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	f003 0320 	and.w	r3, r3, #32
 801091c:	b2db      	uxtb	r3, r3
 801091e:	2b00      	cmp	r3, #0
 8010920:	d10c      	bne.n	801093c <ManageStateAttachedWait_SNK+0xc8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8010922:	f7f5 fb61 	bl	8005fe8 <HAL_GetTick>
 8010926:	4602      	mov	r2, r0
 8010928:	69bb      	ldr	r3, [r7, #24]
 801092a:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 801092c:	69ba      	ldr	r2, [r7, #24]
 801092e:	7813      	ldrb	r3, [r2, #0]
 8010930:	f043 0320 	orr.w	r3, r3, #32
 8010934:	7013      	strb	r3, [r2, #0]
      _timing = CAD_TPDDEBOUNCE_THRESHOLD;
 8010936:	230c      	movs	r3, #12
 8010938:	61fb      	str	r3, [r7, #28]
 801093a:	e016      	b.n	801096a <ManageStateAttachedWait_SNK+0xf6>
    }
    else /* CAD_tDebounce already running */
    {
      /* Evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUNCE_THRESHOLD))
 801093c:	f7f5 fb54 	bl	8005fe8 <HAL_GetTick>
 8010940:	4602      	mov	r2, r0
 8010942:	69bb      	ldr	r3, [r7, #24]
 8010944:	685b      	ldr	r3, [r3, #4]
 8010946:	1ad3      	subs	r3, r2, r3
 8010948:	2b0c      	cmp	r3, #12
 801094a:	d90e      	bls.n	801096a <ManageStateAttachedWait_SNK+0xf6>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 801094c:	69ba      	ldr	r2, [r7, #24]
 801094e:	7813      	ldrb	r3, [r2, #0]
 8010950:	f36f 1345 	bfc	r3, #5, #1
 8010954:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8010956:	69ba      	ldr	r2, [r7, #24]
 8010958:	7853      	ldrb	r3, [r2, #1]
 801095a:	2101      	movs	r1, #1
 801095c:	f361 0345 	bfi	r3, r1, #1, #5
 8010960:	7053      	strb	r3, [r2, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8010962:	7bfb      	ldrb	r3, [r7, #15]
 8010964:	4618      	mov	r0, r3
 8010966:	f005 fa21 	bl	8015dac <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 801096a:	69fb      	ldr	r3, [r7, #28]
}
 801096c:	4618      	mov	r0, r3
 801096e:	3720      	adds	r7, #32
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	200036b4 	.word	0x200036b4

08010978 <ManageStateAttached_SNK>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b088      	sub	sp, #32
 801097c:	af00      	add	r7, sp, #0
 801097e:	4603      	mov	r3, r0
 8010980:	60b9      	str	r1, [r7, #8]
 8010982:	607a      	str	r2, [r7, #4]
 8010984:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010986:	7bfa      	ldrb	r2, [r7, #15]
 8010988:	4613      	mov	r3, r2
 801098a:	005b      	lsls	r3, r3, #1
 801098c:	4413      	add	r3, r2
 801098e:	009b      	lsls	r3, r3, #2
 8010990:	4a2a      	ldr	r2, [pc, #168]	@ (8010a3c <ManageStateAttached_SNK+0xc4>)
 8010992:	4413      	add	r3, r2
 8010994:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010996:	2302      	movs	r3, #2
 8010998:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 801099a:	2300      	movs	r3, #0
 801099c:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 801099e:	7bfa      	ldrb	r2, [r7, #15]
 80109a0:	4927      	ldr	r1, [pc, #156]	@ (8010a40 <ManageStateAttached_SNK+0xc8>)
 80109a2:	4613      	mov	r3, r2
 80109a4:	011b      	lsls	r3, r3, #4
 80109a6:	1a9b      	subs	r3, r3, r2
 80109a8:	009b      	lsls	r3, r3, #2
 80109aa:	440b      	add	r3, r1
 80109ac:	3334      	adds	r3, #52	@ 0x34
 80109ae:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d10b      	bne.n	80109cc <ManageStateAttached_SNK+0x54>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 80109b4:	7bfa      	ldrb	r2, [r7, #15]
 80109b6:	4922      	ldr	r1, [pc, #136]	@ (8010a40 <ManageStateAttached_SNK+0xc8>)
 80109b8:	4613      	mov	r3, r2
 80109ba:	011b      	lsls	r3, r3, #4
 80109bc:	1a9b      	subs	r3, r3, r2
 80109be:	009b      	lsls	r3, r3, #2
 80109c0:	440b      	add	r3, r1
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	695b      	ldr	r3, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 80109c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80109ca:	e00a      	b.n	80109e2 <ManageStateAttached_SNK+0x6a>
 80109cc:	7bfa      	ldrb	r2, [r7, #15]
 80109ce:	491c      	ldr	r1, [pc, #112]	@ (8010a40 <ManageStateAttached_SNK+0xc8>)
 80109d0:	4613      	mov	r3, r2
 80109d2:	011b      	lsls	r3, r3, #4
 80109d4:	1a9b      	subs	r3, r3, r2
 80109d6:	009b      	lsls	r3, r3, #2
 80109d8:	440b      	add	r3, r1
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	695b      	ldr	r3, [r3, #20]
 80109de:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 80109e2:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 80109e4:	7bfb      	ldrb	r3, [r7, #15]
 80109e6:	2102      	movs	r1, #2
 80109e8:	4618      	mov	r0, r3
 80109ea:	f005 f97d 	bl	8015ce8 <USBPD_PWR_IF_GetVBUSStatus>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	d11b      	bne.n	8010a2c <ManageStateAttached_SNK+0xb4>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 80109f4:	697a      	ldr	r2, [r7, #20]
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d117      	bne.n	8010a2c <ManageStateAttached_SNK+0xb4>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 80109fc:	7bfb      	ldrb	r3, [r7, #15]
 80109fe:	4618      	mov	r0, r3
 8010a00:	f001 fb52 	bl	80120a8 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 8010a04:	69ba      	ldr	r2, [r7, #24]
 8010a06:	7813      	ldrb	r3, [r2, #0]
 8010a08:	f36f 0384 	bfc	r3, #2, #3
 8010a0c:	7013      	strb	r3, [r2, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8010a0e:	69ba      	ldr	r2, [r7, #24]
 8010a10:	7853      	ldrb	r3, [r2, #1]
 8010a12:	2101      	movs	r1, #1
 8010a14:	f361 0345 	bfi	r3, r1, #1, #5
 8010a18:	7053      	strb	r3, [r2, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	601a      	str	r2, [r3, #0]
    _timing = 0;
 8010a26:	2300      	movs	r3, #0
 8010a28:	61fb      	str	r3, [r7, #28]
 8010a2a:	e001      	b.n	8010a30 <ManageStateAttached_SNK+0xb8>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 8010a2c:	230a      	movs	r3, #10
 8010a2e:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8010a30:	69fb      	ldr	r3, [r7, #28]
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3720      	adds	r7, #32
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	200036b4 	.word	0x200036b4
 8010a40:	200036cc 	.word	0x200036cc

08010a44 <LL_AHB1_GRP1_EnableClock>:
{
 8010a44:	b480      	push	{r7}
 8010a46:	b085      	sub	sp, #20
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8010a4c:	4b08      	ldr	r3, [pc, #32]	@ (8010a70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8010a4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010a50:	4907      	ldr	r1, [pc, #28]	@ (8010a70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4313      	orrs	r3, r2
 8010a56:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8010a58:	4b05      	ldr	r3, [pc, #20]	@ (8010a70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8010a5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	4013      	ands	r3, r2
 8010a60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010a62:	68fb      	ldr	r3, [r7, #12]
}
 8010a64:	bf00      	nop
 8010a66:	3714      	adds	r7, #20
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr
 8010a70:	40021000 	.word	0x40021000

08010a74 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 8010a74:	b480      	push	{r7}
 8010a76:	b083      	sub	sp, #12
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 8010a7e:	4b03      	ldr	r3, [pc, #12]	@ (8010a8c <USBPD_HW_GetUSPDInstance+0x18>)
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	370c      	adds	r7, #12
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr
 8010a8c:	4000a000 	.word	0x4000a000

08010a90 <USBPD_HW_Init_DMARxInstance>:

#if !defined(USBPDCORE_LIB_NO_PD)
DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b08e      	sub	sp, #56	@ 0x38
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	4603      	mov	r3, r0
 8010a98:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8010a9a:	f107 030c 	add.w	r3, r7, #12
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7fe fcde 	bl	800f460 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8010aac:	2300      	movs	r3, #0
 8010aae:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8010ab0:	2380      	movs	r3, #128	@ 0x80
 8010ab2:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 8010abc:	2300      	movs	r3, #0
 8010abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	60fb      	str	r3, [r7, #12]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 8010ac8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010acc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 8010ace:	2001      	movs	r0, #1
 8010ad0:	f7ff ffb8 	bl	8010a44 <LL_AHB1_GRP1_EnableClock>

  /* Initialise the DMA */
  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 8010ad4:	2372      	movs	r3, #114	@ 0x72
 8010ad6:	633b      	str	r3, [r7, #48]	@ 0x30

  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 8010ad8:	f107 030c 	add.w	r3, r7, #12
 8010adc:	461a      	mov	r2, r3
 8010ade:	2100      	movs	r1, #0
 8010ae0:	4803      	ldr	r0, [pc, #12]	@ (8010af0 <USBPD_HW_Init_DMARxInstance+0x60>)
 8010ae2:	f7fe fc7d 	bl	800f3e0 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 8010ae6:	4b03      	ldr	r3, [pc, #12]	@ (8010af4 <USBPD_HW_Init_DMARxInstance+0x64>)
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3738      	adds	r7, #56	@ 0x38
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	40020000 	.word	0x40020000
 8010af4:	40020008 	.word	0x40020008

08010af8 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	4603      	mov	r3, r0
 8010b00:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 8010b02:	bf00      	nop
 8010b04:	370c      	adds	r7, #12
 8010b06:	46bd      	mov	sp, r7
 8010b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0c:	4770      	bx	lr
	...

08010b10 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b08e      	sub	sp, #56	@ 0x38
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	4603      	mov	r3, r0
 8010b18:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8010b1a:	f107 030c 	add.w	r3, r7, #12
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7fe fc9e 	bl	800f460 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8010b24:	2310      	movs	r3, #16
 8010b26:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8010b30:	2380      	movs	r3, #128	@ 0x80
 8010b32:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8010b34:	2300      	movs	r3, #0
 8010b36:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8010b40:	2300      	movs	r3, #0
 8010b42:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8010b44:	2300      	movs	r3, #0
 8010b46:	60fb      	str	r3, [r7, #12]

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8010b48:	2001      	movs	r0, #1
 8010b4a:	f7ff ff7b 	bl	8010a44 <LL_AHB1_GRP1_EnableClock>

  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 8010b4e:	2373      	movs	r3, #115	@ 0x73
 8010b50:	633b      	str	r3, [r7, #48]	@ 0x30
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 8010b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b56:	637b      	str	r3, [r7, #52]	@ 0x34
  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 8010b58:	f107 030c 	add.w	r3, r7, #12
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	2101      	movs	r1, #1
 8010b60:	4803      	ldr	r0, [pc, #12]	@ (8010b70 <USBPD_HW_Init_DMATxInstance+0x60>)
 8010b62:	f7fe fc3d 	bl	800f3e0 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 8010b66:	4b03      	ldr	r3, [pc, #12]	@ (8010b74 <USBPD_HW_Init_DMATxInstance+0x64>)
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3738      	adds	r7, #56	@ 0x38
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	40020000 	.word	0x40020000
 8010b74:	4002001c 	.word	0x4002001c

08010b78 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b083      	sub	sp, #12
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	4603      	mov	r3, r0
 8010b80:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 8010b82:	bf00      	nop
 8010b84:	370c      	adds	r7, #12
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr

08010b8e <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 8010b8e:	b480      	push	{r7}
 8010b90:	b083      	sub	sp, #12
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	4603      	mov	r3, r0
 8010b96:	460a      	mov	r2, r1
 8010b98:	71fb      	strb	r3, [r7, #7]
 8010b9a:	4613      	mov	r3, r2
 8010b9c:	71bb      	strb	r3, [r7, #6]
  else
  {
    /* FRS_TX common */
    UCPDFRS_INSTANCE0_FRSCC2;
  }
}
 8010b9e:	bf00      	nop
 8010ba0:	370c      	adds	r7, #12
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr

08010baa <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8010baa:	b480      	push	{r7}
 8010bac:	b083      	sub	sp, #12
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	699b      	ldr	r3, [r3, #24]
 8010bb6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	619a      	str	r2, [r3, #24]
}
 8010bbe:	bf00      	nop
 8010bc0:	370c      	adds	r7, #12
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr

08010bca <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8010bca:	b480      	push	{r7}
 8010bcc:	b083      	sub	sp, #12
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	699b      	ldr	r3, [r3, #24]
 8010bd6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	619a      	str	r2, [r3, #24]
}
 8010bde:	bf00      	nop
 8010be0:	370c      	adds	r7, #12
 8010be2:	46bd      	mov	sp, r7
 8010be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be8:	4770      	bx	lr

08010bea <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 8010bea:	b480      	push	{r7}
 8010bec:	b083      	sub	sp, #12
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	699b      	ldr	r3, [r3, #24]
 8010bf6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	619a      	str	r2, [r3, #24]
}
 8010bfe:	bf00      	nop
 8010c00:	370c      	adds	r7, #12
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr

08010c0a <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 8010c0a:	b480      	push	{r7}
 8010c0c:	b083      	sub	sp, #12
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	699b      	ldr	r3, [r3, #24]
 8010c16:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	619a      	str	r2, [r3, #24]
}
 8010c1e:	bf00      	nop
 8010c20:	370c      	adds	r7, #12
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr

08010c2a <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 8010c2a:	b480      	push	{r7}
 8010c2c:	b083      	sub	sp, #12
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	699b      	ldr	r3, [r3, #24]
 8010c36:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	619a      	str	r2, [r3, #24]
}
 8010c3e:	bf00      	nop
 8010c40:	370c      	adds	r7, #12
 8010c42:	46bd      	mov	sp, r7
 8010c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c48:	4770      	bx	lr

08010c4a <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8010c4a:	b480      	push	{r7}
 8010c4c:	b083      	sub	sp, #12
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	699b      	ldr	r3, [r3, #24]
 8010c56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	619a      	str	r2, [r3, #24]
}
 8010c5e:	bf00      	nop
 8010c60:	370c      	adds	r7, #12
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr

08010c6a <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 8010c6a:	b480      	push	{r7}
 8010c6c:	b083      	sub	sp, #12
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	699b      	ldr	r3, [r3, #24]
 8010c76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	619a      	str	r2, [r3, #24]
}
 8010c7e:	bf00      	nop
 8010c80:	370c      	adds	r7, #12
 8010c82:	46bd      	mov	sp, r7
 8010c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c88:	4770      	bx	lr

08010c8a <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 8010c8a:	b480      	push	{r7}
 8010c8c:	b083      	sub	sp, #12
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	699b      	ldr	r3, [r3, #24]
 8010c96:	f043 0220 	orr.w	r2, r3, #32
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	619a      	str	r2, [r3, #24]
}
 8010c9e:	bf00      	nop
 8010ca0:	370c      	adds	r7, #12
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr

08010caa <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8010caa:	b480      	push	{r7}
 8010cac:	b083      	sub	sp, #12
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	699b      	ldr	r3, [r3, #24]
 8010cb6:	f043 0210 	orr.w	r2, r3, #16
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	619a      	str	r2, [r3, #24]
}
 8010cbe:	bf00      	nop
 8010cc0:	370c      	adds	r7, #12
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr

08010cca <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 8010cca:	b480      	push	{r7}
 8010ccc:	b083      	sub	sp, #12
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	699b      	ldr	r3, [r3, #24]
 8010cd6:	f043 0208 	orr.w	r2, r3, #8
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	619a      	str	r2, [r3, #24]
}
 8010cde:	bf00      	nop
 8010ce0:	370c      	adds	r7, #12
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce8:	4770      	bx	lr

08010cea <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 8010cea:	b480      	push	{r7}
 8010cec:	b083      	sub	sp, #12
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	699b      	ldr	r3, [r3, #24]
 8010cf6:	f043 0204 	orr.w	r2, r3, #4
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	619a      	str	r2, [r3, #24]
}
 8010cfe:	bf00      	nop
 8010d00:	370c      	adds	r7, #12
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr

08010d0a <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8010d0a:	b480      	push	{r7}
 8010d0c:	b083      	sub	sp, #12
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	699b      	ldr	r3, [r3, #24]
 8010d16:	f043 0202 	orr.w	r2, r3, #2
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	619a      	str	r2, [r3, #24]
}
 8010d1e:	bf00      	nop
 8010d20:	370c      	adds	r7, #12
 8010d22:	46bd      	mov	sp, r7
 8010d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d28:	4770      	bx	lr

08010d2a <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8010d2a:	b580      	push	{r7, lr}
 8010d2c:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8010d2e:	2000      	movs	r0, #0
 8010d30:	f000 f802 	bl	8010d38 <PORTx_IRQHandler>
}
 8010d34:	bf00      	nop
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b084      	sub	sp, #16
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	4603      	mov	r3, r0
 8010d40:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 8010d42:	79fa      	ldrb	r2, [r7, #7]
 8010d44:	4998      	ldr	r1, [pc, #608]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010d46:	4613      	mov	r3, r2
 8010d48:	011b      	lsls	r3, r3, #4
 8010d4a:	1a9b      	subs	r3, r3, r2
 8010d4c:	009b      	lsls	r3, r3, #2
 8010d4e:	440b      	add	r3, r1
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	695b      	ldr	r3, [r3, #20]
 8010d58:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	691a      	ldr	r2, [r3, #16]
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	4013      	ands	r3, r2
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	f000 81ca 	beq.w	80110fc <PORTx_IRQHandler+0x3c4>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	f003 0302 	and.w	r3, r3, #2
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d035      	beq.n	8010dde <PORTx_IRQHandler+0xa6>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8010d72:	68f8      	ldr	r0, [r7, #12]
 8010d74:	f7ff ffc9 	bl	8010d0a <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8010d78:	79fa      	ldrb	r2, [r7, #7]
 8010d7a:	498b      	ldr	r1, [pc, #556]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010d7c:	4613      	mov	r3, r2
 8010d7e:	011b      	lsls	r3, r3, #4
 8010d80:	1a9b      	subs	r3, r3, r2
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	440b      	add	r3, r1
 8010d86:	3304      	adds	r3, #4
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	6819      	ldr	r1, [r3, #0]
 8010d8c:	79fa      	ldrb	r2, [r7, #7]
 8010d8e:	4886      	ldr	r0, [pc, #536]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010d90:	4613      	mov	r3, r2
 8010d92:	011b      	lsls	r3, r3, #4
 8010d94:	1a9b      	subs	r3, r3, r2
 8010d96:	009b      	lsls	r3, r3, #2
 8010d98:	4403      	add	r3, r0
 8010d9a:	3304      	adds	r3, #4
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f021 0201 	bic.w	r2, r1, #1
 8010da2:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8010da4:	bf00      	nop
 8010da6:	79fa      	ldrb	r2, [r7, #7]
 8010da8:	497f      	ldr	r1, [pc, #508]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010daa:	4613      	mov	r3, r2
 8010dac:	011b      	lsls	r3, r3, #4
 8010dae:	1a9b      	subs	r3, r3, r2
 8010db0:	009b      	lsls	r3, r3, #2
 8010db2:	440b      	add	r3, r1
 8010db4:	3304      	adds	r3, #4
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f003 0301 	and.w	r3, r3, #1
 8010dbe:	2b01      	cmp	r3, #1
 8010dc0:	d0f1      	beq.n	8010da6 <PORTx_IRQHandler+0x6e>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8010dc2:	79fa      	ldrb	r2, [r7, #7]
 8010dc4:	4978      	ldr	r1, [pc, #480]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010dc6:	4613      	mov	r3, r2
 8010dc8:	011b      	lsls	r3, r3, #4
 8010dca:	1a9b      	subs	r3, r3, r2
 8010dcc:	009b      	lsls	r3, r3, #2
 8010dce:	440b      	add	r3, r1
 8010dd0:	3314      	adds	r3, #20
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	79fa      	ldrb	r2, [r7, #7]
 8010dd6:	2101      	movs	r1, #1
 8010dd8:	4610      	mov	r0, r2
 8010dda:	4798      	blx	r3
      return;
 8010ddc:	e18e      	b.n	80110fc <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	f003 0304 	and.w	r3, r3, #4
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d035      	beq.n	8010e54 <PORTx_IRQHandler+0x11c>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8010de8:	68f8      	ldr	r0, [r7, #12]
 8010dea:	f7ff ff7e 	bl	8010cea <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8010dee:	79fa      	ldrb	r2, [r7, #7]
 8010df0:	496d      	ldr	r1, [pc, #436]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010df2:	4613      	mov	r3, r2
 8010df4:	011b      	lsls	r3, r3, #4
 8010df6:	1a9b      	subs	r3, r3, r2
 8010df8:	009b      	lsls	r3, r3, #2
 8010dfa:	440b      	add	r3, r1
 8010dfc:	3304      	adds	r3, #4
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	6819      	ldr	r1, [r3, #0]
 8010e02:	79fa      	ldrb	r2, [r7, #7]
 8010e04:	4868      	ldr	r0, [pc, #416]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010e06:	4613      	mov	r3, r2
 8010e08:	011b      	lsls	r3, r3, #4
 8010e0a:	1a9b      	subs	r3, r3, r2
 8010e0c:	009b      	lsls	r3, r3, #2
 8010e0e:	4403      	add	r3, r0
 8010e10:	3304      	adds	r3, #4
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f021 0201 	bic.w	r2, r1, #1
 8010e18:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8010e1a:	bf00      	nop
 8010e1c:	79fa      	ldrb	r2, [r7, #7]
 8010e1e:	4962      	ldr	r1, [pc, #392]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010e20:	4613      	mov	r3, r2
 8010e22:	011b      	lsls	r3, r3, #4
 8010e24:	1a9b      	subs	r3, r3, r2
 8010e26:	009b      	lsls	r3, r3, #2
 8010e28:	440b      	add	r3, r1
 8010e2a:	3304      	adds	r3, #4
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	f003 0301 	and.w	r3, r3, #1
 8010e34:	2b01      	cmp	r3, #1
 8010e36:	d0f1      	beq.n	8010e1c <PORTx_IRQHandler+0xe4>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8010e38:	79fa      	ldrb	r2, [r7, #7]
 8010e3a:	495b      	ldr	r1, [pc, #364]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010e3c:	4613      	mov	r3, r2
 8010e3e:	011b      	lsls	r3, r3, #4
 8010e40:	1a9b      	subs	r3, r3, r2
 8010e42:	009b      	lsls	r3, r3, #2
 8010e44:	440b      	add	r3, r1
 8010e46:	3314      	adds	r3, #20
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	79fa      	ldrb	r2, [r7, #7]
 8010e4c:	2100      	movs	r1, #0
 8010e4e:	4610      	mov	r0, r2
 8010e50:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 8010e52:	e153      	b.n	80110fc <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	f003 0308 	and.w	r3, r3, #8
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d035      	beq.n	8010eca <PORTx_IRQHandler+0x192>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 8010e5e:	68f8      	ldr	r0, [r7, #12]
 8010e60:	f7ff ff33 	bl	8010cca <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8010e64:	79fa      	ldrb	r2, [r7, #7]
 8010e66:	4950      	ldr	r1, [pc, #320]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010e68:	4613      	mov	r3, r2
 8010e6a:	011b      	lsls	r3, r3, #4
 8010e6c:	1a9b      	subs	r3, r3, r2
 8010e6e:	009b      	lsls	r3, r3, #2
 8010e70:	440b      	add	r3, r1
 8010e72:	3304      	adds	r3, #4
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	6819      	ldr	r1, [r3, #0]
 8010e78:	79fa      	ldrb	r2, [r7, #7]
 8010e7a:	484b      	ldr	r0, [pc, #300]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010e7c:	4613      	mov	r3, r2
 8010e7e:	011b      	lsls	r3, r3, #4
 8010e80:	1a9b      	subs	r3, r3, r2
 8010e82:	009b      	lsls	r3, r3, #2
 8010e84:	4403      	add	r3, r0
 8010e86:	3304      	adds	r3, #4
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	f021 0201 	bic.w	r2, r1, #1
 8010e8e:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8010e90:	bf00      	nop
 8010e92:	79fa      	ldrb	r2, [r7, #7]
 8010e94:	4944      	ldr	r1, [pc, #272]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010e96:	4613      	mov	r3, r2
 8010e98:	011b      	lsls	r3, r3, #4
 8010e9a:	1a9b      	subs	r3, r3, r2
 8010e9c:	009b      	lsls	r3, r3, #2
 8010e9e:	440b      	add	r3, r1
 8010ea0:	3304      	adds	r3, #4
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f003 0301 	and.w	r3, r3, #1
 8010eaa:	2b01      	cmp	r3, #1
 8010eac:	d0f1      	beq.n	8010e92 <PORTx_IRQHandler+0x15a>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 8010eae:	79fa      	ldrb	r2, [r7, #7]
 8010eb0:	493d      	ldr	r1, [pc, #244]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010eb2:	4613      	mov	r3, r2
 8010eb4:	011b      	lsls	r3, r3, #4
 8010eb6:	1a9b      	subs	r3, r3, r2
 8010eb8:	009b      	lsls	r3, r3, #2
 8010eba:	440b      	add	r3, r1
 8010ebc:	3314      	adds	r3, #20
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	79fa      	ldrb	r2, [r7, #7]
 8010ec2:	2102      	movs	r1, #2
 8010ec4:	4610      	mov	r0, r2
 8010ec6:	4798      	blx	r3
      return;
 8010ec8:	e118      	b.n	80110fc <PORTx_IRQHandler+0x3c4>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	f003 0310 	and.w	r3, r3, #16
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d003      	beq.n	8010edc <PORTx_IRQHandler+0x1a4>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8010ed4:	68f8      	ldr	r0, [r7, #12]
 8010ed6:	f7ff fee8 	bl	8010caa <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8010eda:	e10f      	b.n	80110fc <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	f003 0320 	and.w	r3, r3, #32
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d010      	beq.n	8010f08 <PORTx_IRQHandler+0x1d0>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8010ee6:	68f8      	ldr	r0, [r7, #12]
 8010ee8:	f7ff fecf 	bl	8010c8a <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8010eec:	79fa      	ldrb	r2, [r7, #7]
 8010eee:	492e      	ldr	r1, [pc, #184]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010ef0:	4613      	mov	r3, r2
 8010ef2:	011b      	lsls	r3, r3, #4
 8010ef4:	1a9b      	subs	r3, r3, r2
 8010ef6:	009b      	lsls	r3, r3, #2
 8010ef8:	440b      	add	r3, r1
 8010efa:	3324      	adds	r3, #36	@ 0x24
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	79fa      	ldrb	r2, [r7, #7]
 8010f00:	2105      	movs	r1, #5
 8010f02:	4610      	mov	r0, r2
 8010f04:	4798      	blx	r3
      return;
 8010f06:	e0f9      	b.n	80110fc <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d003      	beq.n	8010f1a <PORTx_IRQHandler+0x1e2>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 8010f12:	68f8      	ldr	r0, [r7, #12]
 8010f14:	f7ff fea9 	bl	8010c6a <LL_UCPD_ClearFlag_TxUND>
      return;
 8010f18:	e0f0      	b.n	80110fc <PORTx_IRQHandler+0x3c4>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d01e      	beq.n	8010f62 <PORTx_IRQHandler+0x22a>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f28:	2b05      	cmp	r3, #5
 8010f2a:	d10c      	bne.n	8010f46 <PORTx_IRQHandler+0x20e>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8010f2c:	79fa      	ldrb	r2, [r7, #7]
 8010f2e:	491e      	ldr	r1, [pc, #120]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010f30:	4613      	mov	r3, r2
 8010f32:	011b      	lsls	r3, r3, #4
 8010f34:	1a9b      	subs	r3, r3, r2
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	440b      	add	r3, r1
 8010f3a:	331c      	adds	r3, #28
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	79fa      	ldrb	r2, [r7, #7]
 8010f40:	2106      	movs	r1, #6
 8010f42:	4610      	mov	r0, r2
 8010f44:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 8010f46:	68f8      	ldr	r0, [r7, #12]
 8010f48:	f7ff fe7f 	bl	8010c4a <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 8010f4c:	79fa      	ldrb	r2, [r7, #7]
 8010f4e:	4916      	ldr	r1, [pc, #88]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010f50:	4613      	mov	r3, r2
 8010f52:	011b      	lsls	r3, r3, #4
 8010f54:	1a9b      	subs	r3, r3, r2
 8010f56:	009b      	lsls	r3, r3, #2
 8010f58:	440b      	add	r3, r1
 8010f5a:	3338      	adds	r3, #56	@ 0x38
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	701a      	strb	r2, [r3, #0]
      return;
 8010f60:	e0cc      	b.n	80110fc <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d010      	beq.n	8010f8e <PORTx_IRQHandler+0x256>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8010f6c:	79fa      	ldrb	r2, [r7, #7]
 8010f6e:	490e      	ldr	r1, [pc, #56]	@ (8010fa8 <PORTx_IRQHandler+0x270>)
 8010f70:	4613      	mov	r3, r2
 8010f72:	011b      	lsls	r3, r3, #4
 8010f74:	1a9b      	subs	r3, r3, r2
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	440b      	add	r3, r1
 8010f7a:	331c      	adds	r3, #28
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	79fa      	ldrb	r2, [r7, #7]
 8010f80:	2105      	movs	r1, #5
 8010f82:	4610      	mov	r0, r2
 8010f84:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8010f86:	68f8      	ldr	r0, [r7, #12]
 8010f88:	f7ff fe4f 	bl	8010c2a <LL_UCPD_ClearFlag_RxHRST>
      return;
 8010f8c:	e0b6      	b.n	80110fc <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d00b      	beq.n	8010fb0 <PORTx_IRQHandler+0x278>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag = 1;
 8010f98:	4b04      	ldr	r3, [pc, #16]	@ (8010fac <PORTx_IRQHandler+0x274>)
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8010f9e:	68f8      	ldr	r0, [r7, #12]
 8010fa0:	f7ff fe33 	bl	8010c0a <LL_UCPD_ClearFlag_RxOvr>
      return;
 8010fa4:	e0aa      	b.n	80110fc <PORTx_IRQHandler+0x3c4>
 8010fa6:	bf00      	nop
 8010fa8:	200036cc 	.word	0x200036cc
 8010fac:	200036c0 	.word	0x200036c0
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	f000 8085 	beq.w	80110c6 <PORTx_IRQHandler+0x38e>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 8010fbc:	79fa      	ldrb	r2, [r7, #7]
 8010fbe:	4951      	ldr	r1, [pc, #324]	@ (8011104 <PORTx_IRQHandler+0x3cc>)
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	011b      	lsls	r3, r3, #4
 8010fc4:	1a9b      	subs	r3, r3, r2
 8010fc6:	009b      	lsls	r3, r3, #2
 8010fc8:	440b      	add	r3, r1
 8010fca:	3338      	adds	r3, #56	@ 0x38
 8010fcc:	2200      	movs	r2, #0
 8010fce:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 8010fd0:	68f8      	ldr	r0, [r7, #12]
 8010fd2:	f7ff fe0a 	bl	8010bea <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8010fd6:	79fa      	ldrb	r2, [r7, #7]
 8010fd8:	494a      	ldr	r1, [pc, #296]	@ (8011104 <PORTx_IRQHandler+0x3cc>)
 8010fda:	4613      	mov	r3, r2
 8010fdc:	011b      	lsls	r3, r3, #4
 8010fde:	1a9b      	subs	r3, r3, r2
 8010fe0:	009b      	lsls	r3, r3, #2
 8010fe2:	440b      	add	r3, r1
 8010fe4:	3308      	adds	r3, #8
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	6819      	ldr	r1, [r3, #0]
 8010fea:	79fa      	ldrb	r2, [r7, #7]
 8010fec:	4845      	ldr	r0, [pc, #276]	@ (8011104 <PORTx_IRQHandler+0x3cc>)
 8010fee:	4613      	mov	r3, r2
 8010ff0:	011b      	lsls	r3, r3, #4
 8010ff2:	1a9b      	subs	r3, r3, r2
 8010ff4:	009b      	lsls	r3, r3, #2
 8010ff6:	4403      	add	r3, r0
 8010ff8:	3308      	adds	r3, #8
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	f021 0201 	bic.w	r2, r1, #1
 8011000:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8011002:	bf00      	nop
 8011004:	79fa      	ldrb	r2, [r7, #7]
 8011006:	493f      	ldr	r1, [pc, #252]	@ (8011104 <PORTx_IRQHandler+0x3cc>)
 8011008:	4613      	mov	r3, r2
 801100a:	011b      	lsls	r3, r3, #4
 801100c:	1a9b      	subs	r3, r3, r2
 801100e:	009b      	lsls	r3, r3, #2
 8011010:	440b      	add	r3, r1
 8011012:	3308      	adds	r3, #8
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	f003 0301 	and.w	r3, r3, #1
 801101c:	2b01      	cmp	r3, #1
 801101e:	d0f1      	beq.n	8011004 <PORTx_IRQHandler+0x2cc>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8011020:	79fa      	ldrb	r2, [r7, #7]
 8011022:	4938      	ldr	r1, [pc, #224]	@ (8011104 <PORTx_IRQHandler+0x3cc>)
 8011024:	4613      	mov	r3, r2
 8011026:	011b      	lsls	r3, r3, #4
 8011028:	1a9b      	subs	r3, r3, r2
 801102a:	009b      	lsls	r3, r3, #2
 801102c:	440b      	add	r3, r1
 801102e:	3330      	adds	r3, #48	@ 0x30
 8011030:	6818      	ldr	r0, [r3, #0]
 8011032:	79fa      	ldrb	r2, [r7, #7]
 8011034:	4933      	ldr	r1, [pc, #204]	@ (8011104 <PORTx_IRQHandler+0x3cc>)
 8011036:	4613      	mov	r3, r2
 8011038:	011b      	lsls	r3, r3, #4
 801103a:	1a9b      	subs	r3, r3, r2
 801103c:	009b      	lsls	r3, r3, #2
 801103e:	440b      	add	r3, r1
 8011040:	3308      	adds	r3, #8
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	4602      	mov	r2, r0
 8011046:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 8011048:	79fa      	ldrb	r2, [r7, #7]
 801104a:	492e      	ldr	r1, [pc, #184]	@ (8011104 <PORTx_IRQHandler+0x3cc>)
 801104c:	4613      	mov	r3, r2
 801104e:	011b      	lsls	r3, r3, #4
 8011050:	1a9b      	subs	r3, r3, r2
 8011052:	009b      	lsls	r3, r3, #2
 8011054:	440b      	add	r3, r1
 8011056:	3308      	adds	r3, #8
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801105e:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8011060:	79fa      	ldrb	r2, [r7, #7]
 8011062:	4928      	ldr	r1, [pc, #160]	@ (8011104 <PORTx_IRQHandler+0x3cc>)
 8011064:	4613      	mov	r3, r2
 8011066:	011b      	lsls	r3, r3, #4
 8011068:	1a9b      	subs	r3, r3, r2
 801106a:	009b      	lsls	r3, r3, #2
 801106c:	440b      	add	r3, r1
 801106e:	3308      	adds	r3, #8
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	6819      	ldr	r1, [r3, #0]
 8011074:	79fa      	ldrb	r2, [r7, #7]
 8011076:	4823      	ldr	r0, [pc, #140]	@ (8011104 <PORTx_IRQHandler+0x3cc>)
 8011078:	4613      	mov	r3, r2
 801107a:	011b      	lsls	r3, r3, #4
 801107c:	1a9b      	subs	r3, r3, r2
 801107e:	009b      	lsls	r3, r3, #2
 8011080:	4403      	add	r3, r0
 8011082:	3308      	adds	r3, #8
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	f041 0201 	orr.w	r2, r1, #1
 801108a:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011092:	2b00      	cmp	r3, #0
 8011094:	d113      	bne.n	80110be <PORTx_IRQHandler+0x386>
 8011096:	4b1c      	ldr	r3, [pc, #112]	@ (8011108 <PORTx_IRQHandler+0x3d0>)
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d10f      	bne.n	80110be <PORTx_IRQHandler+0x386>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 801109e:	79fa      	ldrb	r2, [r7, #7]
 80110a0:	4918      	ldr	r1, [pc, #96]	@ (8011104 <PORTx_IRQHandler+0x3cc>)
 80110a2:	4613      	mov	r3, r2
 80110a4:	011b      	lsls	r3, r3, #4
 80110a6:	1a9b      	subs	r3, r3, r2
 80110a8:	009b      	lsls	r3, r3, #2
 80110aa:	440b      	add	r3, r1
 80110ac:	3320      	adds	r3, #32
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	68fa      	ldr	r2, [r7, #12]
 80110b2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80110b4:	f002 0107 	and.w	r1, r2, #7
 80110b8:	79fa      	ldrb	r2, [r7, #7]
 80110ba:	4610      	mov	r0, r2
 80110bc:	4798      	blx	r3
      }
      ovrflag = 0;
 80110be:	4b12      	ldr	r3, [pc, #72]	@ (8011108 <PORTx_IRQHandler+0x3d0>)
 80110c0:	2200      	movs	r2, #0
 80110c2:	701a      	strb	r2, [r3, #0]
      return;
 80110c4:	e01a      	b.n	80110fc <PORTx_IRQHandler+0x3c4>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d104      	bne.n	80110da <PORTx_IRQHandler+0x3a2>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d010      	beq.n	80110fc <PORTx_IRQHandler+0x3c4>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 80110da:	68f8      	ldr	r0, [r7, #12]
 80110dc:	f7ff fd75 	bl	8010bca <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 80110e0:	68f8      	ldr	r0, [r7, #12]
 80110e2:	f7ff fd62 	bl	8010baa <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 80110e6:	79fa      	ldrb	r2, [r7, #7]
 80110e8:	4906      	ldr	r1, [pc, #24]	@ (8011104 <PORTx_IRQHandler+0x3cc>)
 80110ea:	4613      	mov	r3, r2
 80110ec:	011b      	lsls	r3, r3, #4
 80110ee:	1a9b      	subs	r3, r3, r2
 80110f0:	009b      	lsls	r3, r3, #2
 80110f2:	440b      	add	r3, r1
 80110f4:	332c      	adds	r3, #44	@ 0x2c
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 80110fa:	bf00      	nop
        }
      }
    }
#endif /* _FRS */
  }
}
 80110fc:	3710      	adds	r7, #16
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	200036cc 	.word	0x200036cc
 8011108:	200036c0 	.word	0x200036c0

0801110c <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 801110c:	b480      	push	{r7}
 801110e:	b085      	sub	sp, #20
 8011110:	af00      	add	r7, sp, #0
 8011112:	60b9      	str	r1, [r7, #8]
 8011114:	607a      	str	r2, [r7, #4]
 8011116:	603b      	str	r3, [r7, #0]
 8011118:	4603      	mov	r3, r0
 801111a:	73fb      	strb	r3, [r7, #15]
  (void)PowerRole;

  /* Set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 801111c:	7bfa      	ldrb	r2, [r7, #15]
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	6919      	ldr	r1, [r3, #16]
 8011122:	482d      	ldr	r0, [pc, #180]	@ (80111d8 <USBPD_PHY_Init+0xcc>)
 8011124:	4613      	mov	r3, r2
 8011126:	011b      	lsls	r3, r3, #4
 8011128:	1a9b      	subs	r3, r3, r2
 801112a:	009b      	lsls	r3, r3, #2
 801112c:	4403      	add	r3, r0
 801112e:	3314      	adds	r3, #20
 8011130:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 8011132:	7bfa      	ldrb	r2, [r7, #15]
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	68d9      	ldr	r1, [r3, #12]
 8011138:	4827      	ldr	r0, [pc, #156]	@ (80111d8 <USBPD_PHY_Init+0xcc>)
 801113a:	4613      	mov	r3, r2
 801113c:	011b      	lsls	r3, r3, #4
 801113e:	1a9b      	subs	r3, r3, r2
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	4403      	add	r3, r0
 8011144:	3318      	adds	r3, #24
 8011146:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 8011148:	7bfa      	ldrb	r2, [r7, #15]
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	6859      	ldr	r1, [r3, #4]
 801114e:	4822      	ldr	r0, [pc, #136]	@ (80111d8 <USBPD_PHY_Init+0xcc>)
 8011150:	4613      	mov	r3, r2
 8011152:	011b      	lsls	r3, r3, #4
 8011154:	1a9b      	subs	r3, r3, r2
 8011156:	009b      	lsls	r3, r3, #2
 8011158:	4403      	add	r3, r0
 801115a:	331c      	adds	r3, #28
 801115c:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 801115e:	7bfa      	ldrb	r2, [r7, #15]
 8011160:	491d      	ldr	r1, [pc, #116]	@ (80111d8 <USBPD_PHY_Init+0xcc>)
 8011162:	4613      	mov	r3, r2
 8011164:	011b      	lsls	r3, r3, #4
 8011166:	1a9b      	subs	r3, r3, r2
 8011168:	009b      	lsls	r3, r3, #2
 801116a:	440b      	add	r3, r1
 801116c:	3320      	adds	r3, #32
 801116e:	4a1b      	ldr	r2, [pc, #108]	@ (80111dc <USBPD_PHY_Init+0xd0>)
 8011170:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 8011172:	7bfa      	ldrb	r2, [r7, #15]
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	6899      	ldr	r1, [r3, #8]
 8011178:	4817      	ldr	r0, [pc, #92]	@ (80111d8 <USBPD_PHY_Init+0xcc>)
 801117a:	4613      	mov	r3, r2
 801117c:	011b      	lsls	r3, r3, #4
 801117e:	1a9b      	subs	r3, r3, r2
 8011180:	009b      	lsls	r3, r3, #2
 8011182:	4403      	add	r3, r0
 8011184:	3324      	adds	r3, #36	@ 0x24
 8011186:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 8011188:	7bfa      	ldrb	r2, [r7, #15]
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	6959      	ldr	r1, [r3, #20]
 801118e:	4812      	ldr	r0, [pc, #72]	@ (80111d8 <USBPD_PHY_Init+0xcc>)
 8011190:	4613      	mov	r3, r2
 8011192:	011b      	lsls	r3, r3, #4
 8011194:	1a9b      	subs	r3, r3, r2
 8011196:	009b      	lsls	r3, r3, #2
 8011198:	4403      	add	r3, r0
 801119a:	3328      	adds	r3, #40	@ 0x28
 801119c:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 801119e:	7bfa      	ldrb	r2, [r7, #15]
 80111a0:	490d      	ldr	r1, [pc, #52]	@ (80111d8 <USBPD_PHY_Init+0xcc>)
 80111a2:	4613      	mov	r3, r2
 80111a4:	011b      	lsls	r3, r3, #4
 80111a6:	1a9b      	subs	r3, r3, r2
 80111a8:	009b      	lsls	r3, r3, #2
 80111aa:	440b      	add	r3, r1
 80111ac:	3330      	adds	r3, #48	@ 0x30
 80111ae:	687a      	ldr	r2, [r7, #4]
 80111b0:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 80111b2:	7bfb      	ldrb	r3, [r7, #15]
 80111b4:	4a0a      	ldr	r2, [pc, #40]	@ (80111e0 <USBPD_PHY_Init+0xd4>)
 80111b6:	00db      	lsls	r3, r3, #3
 80111b8:	4413      	add	r3, r2
 80111ba:	69ba      	ldr	r2, [r7, #24]
 80111bc:	605a      	str	r2, [r3, #4]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 80111be:	7bfb      	ldrb	r3, [r7, #15]
 80111c0:	68ba      	ldr	r2, [r7, #8]
 80111c2:	6812      	ldr	r2, [r2, #0]
 80111c4:	4906      	ldr	r1, [pc, #24]	@ (80111e0 <USBPD_PHY_Init+0xd4>)
 80111c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

  return USBPD_OK;
 80111ca:	2300      	movs	r3, #0
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3714      	adds	r7, #20
 80111d0:	46bd      	mov	sp, r7
 80111d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d6:	4770      	bx	lr
 80111d8:	200036cc 	.word	0x200036cc
 80111dc:	08011315 	.word	0x08011315
 80111e0:	200036c4 	.word	0x200036c4

080111e4 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 80111e4:	b480      	push	{r7}
 80111e6:	b083      	sub	sp, #12
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	4603      	mov	r3, r0
 80111ec:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return 905u;
 80111ee:	f240 3389 	movw	r3, #905	@ 0x389
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	370c      	adds	r7, #12
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr

080111fe <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 80111fe:	b480      	push	{r7}
 8011200:	b083      	sub	sp, #12
 8011202:	af00      	add	r7, sp, #0
 8011204:	4603      	mov	r3, r0
 8011206:	71fb      	strb	r3, [r7, #7]
  return 30u;
 8011208:	231e      	movs	r3, #30
}
 801120a:	4618      	mov	r0, r3
 801120c:	370c      	adds	r7, #12
 801120e:	46bd      	mov	sp, r7
 8011210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011214:	4770      	bx	lr

08011216 <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 8011216:	b480      	push	{r7}
 8011218:	b083      	sub	sp, #12
 801121a:	af00      	add	r7, sp, #0
 801121c:	4603      	mov	r3, r0
 801121e:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  /* Reset PHY layer   */
  /* Reset HW_IF layer */
}
 8011220:	bf00      	nop
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	4603      	mov	r3, r0
 8011234:	460a      	mov	r2, r1
 8011236:	71fb      	strb	r3, [r7, #7]
 8011238:	4613      	mov	r3, r2
 801123a:	71bb      	strb	r3, [r7, #6]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 801123c:	79b9      	ldrb	r1, [r7, #6]
 801123e:	79f8      	ldrb	r0, [r7, #7]
 8011240:	2300      	movs	r3, #0
 8011242:	2200      	movs	r2, #0
 8011244:	f000 f805 	bl	8011252 <USBPD_PHY_SendMessage>
 8011248:	4603      	mov	r3, r0
}
 801124a:	4618      	mov	r0, r3
 801124c:	3708      	adds	r7, #8
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}

08011252 <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 8011252:	b580      	push	{r7, lr}
 8011254:	b082      	sub	sp, #8
 8011256:	af00      	add	r7, sp, #0
 8011258:	603a      	str	r2, [r7, #0]
 801125a:	461a      	mov	r2, r3
 801125c:	4603      	mov	r3, r0
 801125e:	71fb      	strb	r3, [r7, #7]
 8011260:	460b      	mov	r3, r1
 8011262:	71bb      	strb	r3, [r7, #6]
 8011264:	4613      	mov	r3, r2
 8011266:	80bb      	strh	r3, [r7, #4]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 8011268:	88bb      	ldrh	r3, [r7, #4]
 801126a:	79b9      	ldrb	r1, [r7, #6]
 801126c:	79f8      	ldrb	r0, [r7, #7]
 801126e:	683a      	ldr	r2, [r7, #0]
 8011270:	f000 fabe 	bl	80117f0 <USBPD_HW_IF_SendBuffer>
 8011274:	4603      	mov	r3, r0
}
 8011276:	4618      	mov	r0, r3
 8011278:	3708      	adds	r7, #8
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 801127e:	b580      	push	{r7, lr}
 8011280:	b082      	sub	sp, #8
 8011282:	af00      	add	r7, sp, #0
 8011284:	4603      	mov	r3, r0
 8011286:	71fb      	strb	r3, [r7, #7]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 8011288:	79fb      	ldrb	r3, [r7, #7]
 801128a:	4618      	mov	r0, r3
 801128c:	f000 fbf6 	bl	8011a7c <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 8011290:	2300      	movs	r3, #0
}
 8011292:	4618      	mov	r0, r3
 8011294:	3708      	adds	r7, #8
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}

0801129a <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 801129a:	b580      	push	{r7, lr}
 801129c:	b082      	sub	sp, #8
 801129e:	af00      	add	r7, sp, #0
 80112a0:	4603      	mov	r3, r0
 80112a2:	460a      	mov	r2, r1
 80112a4:	71fb      	strb	r3, [r7, #7]
 80112a6:	4613      	mov	r3, r2
 80112a8:	71bb      	strb	r3, [r7, #6]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 80112aa:	79bb      	ldrb	r3, [r7, #6]
 80112ac:	2b07      	cmp	r3, #7
 80112ae:	d103      	bne.n	80112b8 <USBPD_PHY_ExitTransmit+0x1e>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 80112b0:	79fb      	ldrb	r3, [r7, #7]
 80112b2:	4618      	mov	r0, r3
 80112b4:	f000 fa64 	bl	8011780 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 80112b8:	2300      	movs	r3, #0
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3708      	adds	r7, #8
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}

080112c2 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80112c2:	b580      	push	{r7, lr}
 80112c4:	b082      	sub	sp, #8
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	4603      	mov	r3, r0
 80112ca:	71fb      	strb	r3, [r7, #7]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 80112cc:	79fb      	ldrb	r3, [r7, #7]
 80112ce:	4618      	mov	r0, r3
 80112d0:	f000 ff70 	bl	80121b4 <USBPD_HW_IF_IsResistor_SinkTxOk>
 80112d4:	4603      	mov	r3, r0
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3708      	adds	r7, #8
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}

080112de <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 80112de:	b580      	push	{r7, lr}
 80112e0:	b082      	sub	sp, #8
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	4603      	mov	r3, r0
 80112e6:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_EnableRX(PortNum);
 80112e8:	79fb      	ldrb	r3, [r7, #7]
 80112ea:	4618      	mov	r0, r3
 80112ec:	f000 fd64 	bl	8011db8 <USBPD_HW_IF_EnableRX>
}
 80112f0:	bf00      	nop
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	4603      	mov	r3, r0
 8011300:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_DisableRX(PortNum);
 8011302:	79fb      	ldrb	r3, [r7, #7]
 8011304:	4618      	mov	r0, r3
 8011306:	f000 fd6d 	bl	8011de4 <USBPD_HW_IF_DisableRX>
}
 801130a:	bf00      	nop
 801130c:	3708      	adds	r7, #8
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
	...

08011314 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	4603      	mov	r3, r0
 801131c:	6039      	str	r1, [r7, #0]
 801131e:	71fb      	strb	r3, [r7, #7]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 8011320:	4a28      	ldr	r2, [pc, #160]	@ (80113c4 <PHY_Rx_Completed+0xb0>)
 8011322:	f107 0308 	add.w	r3, r7, #8
 8011326:	e892 0003 	ldmia.w	r2, {r0, r1}
 801132a:	6018      	str	r0, [r3, #0]
 801132c:	3304      	adds	r3, #4
 801132e:	8019      	strh	r1, [r3, #0]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 8011330:	f107 0208 	add.w	r2, r7, #8
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	4413      	add	r3, r2
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	73fb      	strb	r3, [r7, #15]

  /* Check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 801133c:	7bfb      	ldrb	r3, [r7, #15]
 801133e:	2b04      	cmp	r3, #4
 8011340:	dc02      	bgt.n	8011348 <PHY_Rx_Completed+0x34>
 8011342:	2b00      	cmp	r3, #0
 8011344:	da19      	bge.n	801137a <PHY_Rx_Completed+0x66>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 8011346:	e034      	b.n	80113b2 <PHY_Rx_Completed+0x9e>
  switch (_msgtype)
 8011348:	2b06      	cmp	r3, #6
 801134a:	d132      	bne.n	80113b2 <PHY_Rx_Completed+0x9e>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 801134c:	79fb      	ldrb	r3, [r7, #7]
 801134e:	4a1e      	ldr	r2, [pc, #120]	@ (80113c8 <PHY_Rx_Completed+0xb4>)
 8011350:	00db      	lsls	r3, r3, #3
 8011352:	4413      	add	r3, r2
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	f003 031e 	and.w	r3, r3, #30
 801135a:	2b1e      	cmp	r3, #30
 801135c:	d12b      	bne.n	80113b6 <PHY_Rx_Completed+0xa2>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 801135e:	79fa      	ldrb	r2, [r7, #7]
 8011360:	491a      	ldr	r1, [pc, #104]	@ (80113cc <PHY_Rx_Completed+0xb8>)
 8011362:	4613      	mov	r3, r2
 8011364:	011b      	lsls	r3, r3, #4
 8011366:	1a9b      	subs	r3, r3, r2
 8011368:	009b      	lsls	r3, r3, #2
 801136a:	440b      	add	r3, r1
 801136c:	331c      	adds	r3, #28
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	79fa      	ldrb	r2, [r7, #7]
 8011372:	2106      	movs	r1, #6
 8011374:	4610      	mov	r0, r2
 8011376:	4798      	blx	r3
      break;
 8011378:	e01d      	b.n	80113b6 <PHY_Rx_Completed+0xa2>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 801137a:	7bfb      	ldrb	r3, [r7, #15]
 801137c:	2201      	movs	r2, #1
 801137e:	fa02 f303 	lsl.w	r3, r2, r3
 8011382:	b2db      	uxtb	r3, r3
 8011384:	4618      	mov	r0, r3
 8011386:	79fb      	ldrb	r3, [r7, #7]
 8011388:	4a0f      	ldr	r2, [pc, #60]	@ (80113c8 <PHY_Rx_Completed+0xb4>)
 801138a:	00db      	lsls	r3, r3, #3
 801138c:	4413      	add	r3, r2
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	7bfa      	ldrb	r2, [r7, #15]
 8011392:	2101      	movs	r1, #1
 8011394:	fa01 f202 	lsl.w	r2, r1, r2
 8011398:	b2d2      	uxtb	r2, r2
 801139a:	4013      	ands	r3, r2
 801139c:	4298      	cmp	r0, r3
 801139e:	d10c      	bne.n	80113ba <PHY_Rx_Completed+0xa6>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 80113a0:	79fb      	ldrb	r3, [r7, #7]
 80113a2:	4a09      	ldr	r2, [pc, #36]	@ (80113c8 <PHY_Rx_Completed+0xb4>)
 80113a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80113a8:	7bf9      	ldrb	r1, [r7, #15]
 80113aa:	79fa      	ldrb	r2, [r7, #7]
 80113ac:	4610      	mov	r0, r2
 80113ae:	4798      	blx	r3
      break;
 80113b0:	e003      	b.n	80113ba <PHY_Rx_Completed+0xa6>
      break;
 80113b2:	bf00      	nop
 80113b4:	e002      	b.n	80113bc <PHY_Rx_Completed+0xa8>
      break;
 80113b6:	bf00      	nop
 80113b8:	e000      	b.n	80113bc <PHY_Rx_Completed+0xa8>
      break;
 80113ba:	bf00      	nop
  }
}
 80113bc:	bf00      	nop
 80113be:	3710      	adds	r7, #16
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	0801bdc8 	.word	0x0801bdc8
 80113c8:	200036c4 	.word	0x200036c4
 80113cc:	200036cc 	.word	0x200036cc

080113d0 <LL_AHB1_GRP1_EnableClock>:
{
 80113d0:	b480      	push	{r7}
 80113d2:	b085      	sub	sp, #20
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80113d8:	4b08      	ldr	r3, [pc, #32]	@ (80113fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80113da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80113dc:	4907      	ldr	r1, [pc, #28]	@ (80113fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	4313      	orrs	r3, r2
 80113e2:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80113e4:	4b05      	ldr	r3, [pc, #20]	@ (80113fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80113e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	4013      	ands	r3, r2
 80113ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80113ee:	68fb      	ldr	r3, [r7, #12]
}
 80113f0:	bf00      	nop
 80113f2:	3714      	adds	r7, #20
 80113f4:	46bd      	mov	sp, r7
 80113f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fa:	4770      	bx	lr
 80113fc:	40021000 	.word	0x40021000

08011400 <LL_APB1_GRP1_EnableClock>:
{
 8011400:	b480      	push	{r7}
 8011402:	b085      	sub	sp, #20
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011408:	4b08      	ldr	r3, [pc, #32]	@ (801142c <LL_APB1_GRP1_EnableClock+0x2c>)
 801140a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801140c:	4907      	ldr	r1, [pc, #28]	@ (801142c <LL_APB1_GRP1_EnableClock+0x2c>)
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	4313      	orrs	r3, r2
 8011412:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8011414:	4b05      	ldr	r3, [pc, #20]	@ (801142c <LL_APB1_GRP1_EnableClock+0x2c>)
 8011416:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	4013      	ands	r3, r2
 801141c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801141e:	68fb      	ldr	r3, [r7, #12]
}
 8011420:	bf00      	nop
 8011422:	3714      	adds	r7, #20
 8011424:	46bd      	mov	sp, r7
 8011426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142a:	4770      	bx	lr
 801142c:	40021000 	.word	0x40021000

08011430 <LL_UCPD_Enable>:
{
 8011430:	b480      	push	{r7}
 8011432:	b083      	sub	sp, #12
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	601a      	str	r2, [r3, #0]
}
 8011444:	bf00      	nop
 8011446:	370c      	adds	r7, #12
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr

08011450 <LL_UCPD_Disable>:
{
 8011450:	b480      	push	{r7}
 8011452:	b083      	sub	sp, #12
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	601a      	str	r2, [r3, #0]
}
 8011464:	bf00      	nop
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr

08011470 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8011470:	b480      	push	{r7}
 8011472:	b083      	sub	sp, #12
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	60da      	str	r2, [r3, #12]
}
 8011484:	bf00      	nop
 8011486:	370c      	adds	r7, #12
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr

08011490 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8011490:	b480      	push	{r7}
 8011492:	b083      	sub	sp, #12
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	60da      	str	r2, [r3, #12]
}
 80114a4:	bf00      	nop
 80114a6:	370c      	adds	r7, #12
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 80114b0:	b480      	push	{r7}
 80114b2:	b083      	sub	sp, #12
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	60da      	str	r2, [r3, #12]
}
 80114c4:	bf00      	nop
 80114c6:	370c      	adds	r7, #12
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr

080114d0 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 80114d0:	b480      	push	{r7}
 80114d2:	b083      	sub	sp, #12
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	68db      	ldr	r3, [r3, #12]
 80114dc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	60da      	str	r2, [r3, #12]
}
 80114e4:	bf00      	nop
 80114e6:	370c      	adds	r7, #12
 80114e8:	46bd      	mov	sp, r7
 80114ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ee:	4770      	bx	lr

080114f0 <LL_UCPD_FRSDetectionEnable>:
{
 80114f0:	b480      	push	{r7}
 80114f2:	b083      	sub	sp, #12
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	60da      	str	r2, [r3, #12]
}
 8011504:	bf00      	nop
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr

08011510 <LL_UCPD_FRSDetectionDisable>:
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	60da      	str	r2, [r3, #12]
}
 8011524:	bf00      	nop
 8011526:	370c      	adds	r7, #12
 8011528:	46bd      	mov	sp, r7
 801152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152e:	4770      	bx	lr

08011530 <LL_UCPD_SetccEnable>:
{
 8011530:	b480      	push	{r7}
 8011532:	b083      	sub	sp, #12
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	431a      	orrs	r2, r3
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	60da      	str	r2, [r3, #12]
}
 801154a:	bf00      	nop
 801154c:	370c      	adds	r7, #12
 801154e:	46bd      	mov	sp, r7
 8011550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011554:	4770      	bx	lr

08011556 <LL_UCPD_SetSNKRole>:
{
 8011556:	b480      	push	{r7}
 8011558:	b083      	sub	sp, #12
 801155a:	af00      	add	r7, sp, #0
 801155c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	60da      	str	r2, [r3, #12]
}
 801156a:	bf00      	nop
 801156c:	370c      	adds	r7, #12
 801156e:	46bd      	mov	sp, r7
 8011570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011574:	4770      	bx	lr

08011576 <LL_UCPD_SetSRCRole>:
{
 8011576:	b480      	push	{r7}
 8011578:	b083      	sub	sp, #12
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	68db      	ldr	r3, [r3, #12]
 8011582:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	60da      	str	r2, [r3, #12]
}
 801158a:	bf00      	nop
 801158c:	370c      	adds	r7, #12
 801158e:	46bd      	mov	sp, r7
 8011590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011594:	4770      	bx	lr

08011596 <LL_UCPD_SetRpResistor>:
{
 8011596:	b480      	push	{r7}
 8011598:	b083      	sub	sp, #12
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
 801159e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	431a      	orrs	r2, r3
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	60da      	str	r2, [r3, #12]
}
 80115b0:	bf00      	nop
 80115b2:	370c      	adds	r7, #12
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr

080115bc <LL_UCPD_SetCCPin>:
{
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	68db      	ldr	r3, [r3, #12]
 80115ca:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	431a      	orrs	r2, r3
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	60da      	str	r2, [r3, #12]
}
 80115d6:	bf00      	nop
 80115d8:	370c      	adds	r7, #12
 80115da:	46bd      	mov	sp, r7
 80115dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e0:	4770      	bx	lr

080115e2 <LL_UCPD_RxEnable>:
{
 80115e2:	b480      	push	{r7}
 80115e4:	b083      	sub	sp, #12
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	68db      	ldr	r3, [r3, #12]
 80115ee:	f043 0220 	orr.w	r2, r3, #32
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	60da      	str	r2, [r3, #12]
}
 80115f6:	bf00      	nop
 80115f8:	370c      	adds	r7, #12
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr

08011602 <LL_UCPD_RxDisable>:
{
 8011602:	b480      	push	{r7}
 8011604:	b083      	sub	sp, #12
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	68db      	ldr	r3, [r3, #12]
 801160e:	f023 0220 	bic.w	r2, r3, #32
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	60da      	str	r2, [r3, #12]
}
 8011616:	bf00      	nop
 8011618:	370c      	adds	r7, #12
 801161a:	46bd      	mov	sp, r7
 801161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011620:	4770      	bx	lr

08011622 <LL_UCPD_SetRxMode>:
{
 8011622:	b480      	push	{r7}
 8011624:	b083      	sub	sp, #12
 8011626:	af00      	add	r7, sp, #0
 8011628:	6078      	str	r0, [r7, #4]
 801162a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	f023 0210 	bic.w	r2, r3, #16
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	431a      	orrs	r2, r3
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	60da      	str	r2, [r3, #12]
}
 801163c:	bf00      	nop
 801163e:	370c      	adds	r7, #12
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr

08011648 <LL_UCPD_SendHardReset>:
{
 8011648:	b480      	push	{r7}
 801164a:	b083      	sub	sp, #12
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	68db      	ldr	r3, [r3, #12]
 8011654:	f043 0208 	orr.w	r2, r3, #8
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	60da      	str	r2, [r3, #12]
}
 801165c:	bf00      	nop
 801165e:	370c      	adds	r7, #12
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr

08011668 <LL_UCPD_SendMessage>:
{
 8011668:	b480      	push	{r7}
 801166a:	b083      	sub	sp, #12
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	68db      	ldr	r3, [r3, #12]
 8011674:	f043 0204 	orr.w	r2, r3, #4
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	60da      	str	r2, [r3, #12]
}
 801167c:	bf00      	nop
 801167e:	370c      	adds	r7, #12
 8011680:	46bd      	mov	sp, r7
 8011682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011686:	4770      	bx	lr

08011688 <LL_UCPD_SetTxMode>:
{
 8011688:	b480      	push	{r7}
 801168a:	b083      	sub	sp, #12
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	68db      	ldr	r3, [r3, #12]
 8011696:	f023 0203 	bic.w	r2, r3, #3
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	431a      	orrs	r2, r3
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	60da      	str	r2, [r3, #12]
}
 80116a2:	bf00      	nop
 80116a4:	370c      	adds	r7, #12
 80116a6:	46bd      	mov	sp, r7
 80116a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ac:	4770      	bx	lr

080116ae <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 80116ae:	b480      	push	{r7}
 80116b0:	b083      	sub	sp, #12
 80116b2:	af00      	add	r7, sp, #0
 80116b4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	601a      	str	r2, [r3, #0]
}
 80116c2:	bf00      	nop
 80116c4:	370c      	adds	r7, #12
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr

080116ce <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 80116ce:	b480      	push	{r7}
 80116d0:	b083      	sub	sp, #12
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	601a      	str	r2, [r3, #0]
}
 80116e2:	bf00      	nop
 80116e4:	370c      	adds	r7, #12
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr

080116ee <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 80116ee:	b480      	push	{r7}
 80116f0:	b083      	sub	sp, #12
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	601a      	str	r2, [r3, #0]
}
 8011702:	bf00      	nop
 8011704:	370c      	adds	r7, #12
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr

0801170e <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 801170e:	b480      	push	{r7}
 8011710:	b083      	sub	sp, #12
 8011712:	af00      	add	r7, sp, #0
 8011714:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	601a      	str	r2, [r3, #0]
}
 8011722:	bf00      	nop
 8011724:	370c      	adds	r7, #12
 8011726:	46bd      	mov	sp, r7
 8011728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172c:	4770      	bx	lr

0801172e <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 801172e:	b480      	push	{r7}
 8011730:	b083      	sub	sp, #12
 8011732:	af00      	add	r7, sp, #0
 8011734:	6078      	str	r0, [r7, #4]
 8011736:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	683a      	ldr	r2, [r7, #0]
 801173c:	61da      	str	r2, [r3, #28]
}
 801173e:	bf00      	nop
 8011740:	370c      	adds	r7, #12
 8011742:	46bd      	mov	sp, r7
 8011744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011748:	4770      	bx	lr

0801174a <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 801174a:	b480      	push	{r7}
 801174c:	b083      	sub	sp, #12
 801174e:	af00      	add	r7, sp, #0
 8011750:	6078      	str	r0, [r7, #4]
 8011752:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	683a      	ldr	r2, [r7, #0]
 8011758:	621a      	str	r2, [r3, #32]
}
 801175a:	bf00      	nop
 801175c:	370c      	adds	r7, #12
 801175e:	46bd      	mov	sp, r7
 8011760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011764:	4770      	bx	lr

08011766 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8011766:	b580      	push	{r7, lr}
 8011768:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 801176a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 801176e:	f7ff fe47 	bl	8011400 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8011772:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8011776:	f7ff fe2b 	bl	80113d0 <LL_AHB1_GRP1_EnableClock>

}
 801177a:	bf00      	nop
 801177c:	bd80      	pop	{r7, pc}
	...

08011780 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b084      	sub	sp, #16
 8011784:	af00      	add	r7, sp, #0
 8011786:	4603      	mov	r3, r0
 8011788:	71fb      	strb	r3, [r7, #7]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 801178a:	79fa      	ldrb	r2, [r7, #7]
 801178c:	4917      	ldr	r1, [pc, #92]	@ (80117ec <USBPD_HW_IF_StopBISTMode2+0x6c>)
 801178e:	4613      	mov	r3, r2
 8011790:	011b      	lsls	r3, r3, #4
 8011792:	1a9b      	subs	r3, r3, r2
 8011794:	009b      	lsls	r3, r3, #2
 8011796:	440b      	add	r3, r1
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	f023 0307 	bic.w	r3, r3, #7
 80117a0:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 80117a2:	79fa      	ldrb	r2, [r7, #7]
 80117a4:	4911      	ldr	r1, [pc, #68]	@ (80117ec <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80117a6:	4613      	mov	r3, r2
 80117a8:	011b      	lsls	r3, r3, #4
 80117aa:	1a9b      	subs	r3, r3, r2
 80117ac:	009b      	lsls	r3, r3, #2
 80117ae:	440b      	add	r3, r1
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7ff fe4c 	bl	8011450 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 80117b8:	79fa      	ldrb	r2, [r7, #7]
 80117ba:	490c      	ldr	r1, [pc, #48]	@ (80117ec <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80117bc:	4613      	mov	r3, r2
 80117be:	011b      	lsls	r3, r3, #4
 80117c0:	1a9b      	subs	r3, r3, r2
 80117c2:	009b      	lsls	r3, r3, #2
 80117c4:	440b      	add	r3, r1
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7ff fe31 	bl	8011430 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 80117ce:	79fa      	ldrb	r2, [r7, #7]
 80117d0:	4906      	ldr	r1, [pc, #24]	@ (80117ec <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80117d2:	4613      	mov	r3, r2
 80117d4:	011b      	lsls	r3, r3, #4
 80117d6:	1a9b      	subs	r3, r3, r2
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	440b      	add	r3, r1
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	68fa      	ldr	r2, [r7, #12]
 80117e0:	60da      	str	r2, [r3, #12]
}
 80117e2:	bf00      	nop
 80117e4:	3710      	adds	r7, #16
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	bf00      	nop
 80117ec:	200036cc 	.word	0x200036cc

080117f0 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b08a      	sub	sp, #40	@ 0x28
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60ba      	str	r2, [r7, #8]
 80117f8:	607b      	str	r3, [r7, #4]
 80117fa:	4603      	mov	r3, r0
 80117fc:	73fb      	strb	r3, [r7, #15]
 80117fe:	460b      	mov	r3, r1
 8011800:	73bb      	strb	r3, [r7, #14]
  USBPD_StatusTypeDef _status = USBPD_OK;
 8011802:	2300      	movs	r3, #0
 8011804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8011808:	7bbb      	ldrb	r3, [r7, #14]
 801180a:	2b05      	cmp	r3, #5
 801180c:	d10b      	bne.n	8011826 <USBPD_HW_IF_SendBuffer+0x36>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 801180e:	7bfa      	ldrb	r2, [r7, #15]
 8011810:	4996      	ldr	r1, [pc, #600]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8011812:	4613      	mov	r3, r2
 8011814:	011b      	lsls	r3, r3, #4
 8011816:	1a9b      	subs	r3, r3, r2
 8011818:	009b      	lsls	r3, r3, #2
 801181a:	440b      	add	r3, r1
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	4618      	mov	r0, r3
 8011820:	f7ff ff12 	bl	8011648 <LL_UCPD_SendHardReset>
 8011824:	e11b      	b.n	8011a5e <USBPD_HW_IF_SendBuffer+0x26e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011826:	f3ef 8310 	mrs	r3, PRIMASK
 801182a:	61fb      	str	r3, [r7, #28]
  return(result);
 801182c:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 801182e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8011830:	b672      	cpsid	i
}
 8011832:	bf00      	nop

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 8011834:	7bfa      	ldrb	r2, [r7, #15]
 8011836:	498d      	ldr	r1, [pc, #564]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8011838:	4613      	mov	r3, r2
 801183a:	011b      	lsls	r3, r3, #4
 801183c:	1a9b      	subs	r3, r3, r2
 801183e:	009b      	lsls	r3, r3, #2
 8011840:	440b      	add	r3, r1
 8011842:	3338      	adds	r3, #56	@ 0x38
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	b2db      	uxtb	r3, r3
 8011848:	2b01      	cmp	r3, #1
 801184a:	d00d      	beq.n	8011868 <USBPD_HW_IF_SendBuffer+0x78>
 801184c:	7bfa      	ldrb	r2, [r7, #15]
 801184e:	4987      	ldr	r1, [pc, #540]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8011850:	4613      	mov	r3, r2
 8011852:	011b      	lsls	r3, r3, #4
 8011854:	1a9b      	subs	r3, r3, r2
 8011856:	009b      	lsls	r3, r3, #2
 8011858:	440b      	add	r3, r1
 801185a:	3304      	adds	r3, #4
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	f003 0301 	and.w	r3, r3, #1
 8011864:	2b01      	cmp	r3, #1
 8011866:	d109      	bne.n	801187c <USBPD_HW_IF_SendBuffer+0x8c>
 8011868:	6a3b      	ldr	r3, [r7, #32]
 801186a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801186c:	69bb      	ldr	r3, [r7, #24]
 801186e:	f383 8810 	msr	PRIMASK, r3
}
 8011872:	bf00      	nop
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8011874:	2302      	movs	r3, #2
 8011876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801187a:	e0f0      	b.n	8011a5e <USBPD_HW_IF_SendBuffer+0x26e>
 801187c:	6a3b      	ldr	r3, [r7, #32]
 801187e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	f383 8810 	msr	PRIMASK, r3
}
 8011886:	bf00      	nop
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 8011888:	7bbb      	ldrb	r3, [r7, #14]
 801188a:	2b07      	cmp	r3, #7
 801188c:	d877      	bhi.n	801197e <USBPD_HW_IF_SendBuffer+0x18e>
 801188e:	a201      	add	r2, pc, #4	@ (adr r2, 8011894 <USBPD_HW_IF_SendBuffer+0xa4>)
 8011890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011894:	080118b5 	.word	0x080118b5
 8011898:	080118e7 	.word	0x080118e7
 801189c:	08011919 	.word	0x08011919
 80118a0:	0801197f 	.word	0x0801197f
 80118a4:	0801197f 	.word	0x0801197f
 80118a8:	0801197f 	.word	0x0801197f
 80118ac:	0801194b 	.word	0x0801194b
 80118b0:	08011965 	.word	0x08011965
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 80118b4:	7bfa      	ldrb	r2, [r7, #15]
 80118b6:	496d      	ldr	r1, [pc, #436]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 80118b8:	4613      	mov	r3, r2
 80118ba:	011b      	lsls	r3, r3, #4
 80118bc:	1a9b      	subs	r3, r3, r2
 80118be:	009b      	lsls	r3, r3, #2
 80118c0:	440b      	add	r3, r1
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	496a      	ldr	r1, [pc, #424]	@ (8011a70 <USBPD_HW_IF_SendBuffer+0x280>)
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7ff ff31 	bl	801172e <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80118cc:	7bfa      	ldrb	r2, [r7, #15]
 80118ce:	4967      	ldr	r1, [pc, #412]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 80118d0:	4613      	mov	r3, r2
 80118d2:	011b      	lsls	r3, r3, #4
 80118d4:	1a9b      	subs	r3, r3, r2
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	440b      	add	r3, r1
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	2100      	movs	r1, #0
 80118de:	4618      	mov	r0, r3
 80118e0:	f7ff fed2 	bl	8011688 <LL_UCPD_SetTxMode>
          break;
 80118e4:	e04f      	b.n	8011986 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 80118e6:	7bfa      	ldrb	r2, [r7, #15]
 80118e8:	4960      	ldr	r1, [pc, #384]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 80118ea:	4613      	mov	r3, r2
 80118ec:	011b      	lsls	r3, r3, #4
 80118ee:	1a9b      	subs	r3, r3, r2
 80118f0:	009b      	lsls	r3, r3, #2
 80118f2:	440b      	add	r3, r1
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	495f      	ldr	r1, [pc, #380]	@ (8011a74 <USBPD_HW_IF_SendBuffer+0x284>)
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7ff ff18 	bl	801172e <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80118fe:	7bfa      	ldrb	r2, [r7, #15]
 8011900:	495a      	ldr	r1, [pc, #360]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8011902:	4613      	mov	r3, r2
 8011904:	011b      	lsls	r3, r3, #4
 8011906:	1a9b      	subs	r3, r3, r2
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	440b      	add	r3, r1
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2100      	movs	r1, #0
 8011910:	4618      	mov	r0, r3
 8011912:	f7ff feb9 	bl	8011688 <LL_UCPD_SetTxMode>
          break;
 8011916:	e036      	b.n	8011986 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 8011918:	7bfa      	ldrb	r2, [r7, #15]
 801191a:	4954      	ldr	r1, [pc, #336]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 801191c:	4613      	mov	r3, r2
 801191e:	011b      	lsls	r3, r3, #4
 8011920:	1a9b      	subs	r3, r3, r2
 8011922:	009b      	lsls	r3, r3, #2
 8011924:	440b      	add	r3, r1
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	4953      	ldr	r1, [pc, #332]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x288>)
 801192a:	4618      	mov	r0, r3
 801192c:	f7ff feff 	bl	801172e <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8011930:	7bfa      	ldrb	r2, [r7, #15]
 8011932:	494e      	ldr	r1, [pc, #312]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8011934:	4613      	mov	r3, r2
 8011936:	011b      	lsls	r3, r3, #4
 8011938:	1a9b      	subs	r3, r3, r2
 801193a:	009b      	lsls	r3, r3, #2
 801193c:	440b      	add	r3, r1
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2100      	movs	r1, #0
 8011942:	4618      	mov	r0, r3
 8011944:	f7ff fea0 	bl	8011688 <LL_UCPD_SetTxMode>
          break;
 8011948:	e01d      	b.n	8011986 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 801194a:	7bfa      	ldrb	r2, [r7, #15]
 801194c:	4947      	ldr	r1, [pc, #284]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 801194e:	4613      	mov	r3, r2
 8011950:	011b      	lsls	r3, r3, #4
 8011952:	1a9b      	subs	r3, r3, r2
 8011954:	009b      	lsls	r3, r3, #2
 8011956:	440b      	add	r3, r1
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	2101      	movs	r1, #1
 801195c:	4618      	mov	r0, r3
 801195e:	f7ff fe93 	bl	8011688 <LL_UCPD_SetTxMode>
          break;
 8011962:	e010      	b.n	8011986 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8011964:	7bfa      	ldrb	r2, [r7, #15]
 8011966:	4941      	ldr	r1, [pc, #260]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8011968:	4613      	mov	r3, r2
 801196a:	011b      	lsls	r3, r3, #4
 801196c:	1a9b      	subs	r3, r3, r2
 801196e:	009b      	lsls	r3, r3, #2
 8011970:	440b      	add	r3, r1
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2102      	movs	r1, #2
 8011976:	4618      	mov	r0, r3
 8011978:	f7ff fe86 	bl	8011688 <LL_UCPD_SetTxMode>
          break;
 801197c:	e003      	b.n	8011986 <USBPD_HW_IF_SendBuffer+0x196>
        }
        default :
          _status = USBPD_ERROR;
 801197e:	2302      	movs	r3, #2
 8011980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8011984:	bf00      	nop
      }

      if (USBPD_OK == _status)
 8011986:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801198a:	2b00      	cmp	r3, #0
 801198c:	d167      	bne.n	8011a5e <USBPD_HW_IF_SendBuffer+0x26e>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801198e:	7bfa      	ldrb	r2, [r7, #15]
 8011990:	4936      	ldr	r1, [pc, #216]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8011992:	4613      	mov	r3, r2
 8011994:	011b      	lsls	r3, r3, #4
 8011996:	1a9b      	subs	r3, r3, r2
 8011998:	009b      	lsls	r3, r3, #2
 801199a:	440b      	add	r3, r1
 801199c:	3304      	adds	r3, #4
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	6819      	ldr	r1, [r3, #0]
 80119a2:	7bfa      	ldrb	r2, [r7, #15]
 80119a4:	4831      	ldr	r0, [pc, #196]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 80119a6:	4613      	mov	r3, r2
 80119a8:	011b      	lsls	r3, r3, #4
 80119aa:	1a9b      	subs	r3, r3, r2
 80119ac:	009b      	lsls	r3, r3, #2
 80119ae:	4403      	add	r3, r0
 80119b0:	3304      	adds	r3, #4
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f021 0201 	bic.w	r2, r1, #1
 80119b8:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 80119ba:	bf00      	nop
 80119bc:	7bfa      	ldrb	r2, [r7, #15]
 80119be:	492b      	ldr	r1, [pc, #172]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 80119c0:	4613      	mov	r3, r2
 80119c2:	011b      	lsls	r3, r3, #4
 80119c4:	1a9b      	subs	r3, r3, r2
 80119c6:	009b      	lsls	r3, r3, #2
 80119c8:	440b      	add	r3, r1
 80119ca:	3304      	adds	r3, #4
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f003 0301 	and.w	r3, r3, #1
 80119d4:	2b01      	cmp	r3, #1
 80119d6:	d0f1      	beq.n	80119bc <USBPD_HW_IF_SendBuffer+0x1cc>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 80119d8:	7bfa      	ldrb	r2, [r7, #15]
 80119da:	4924      	ldr	r1, [pc, #144]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 80119dc:	4613      	mov	r3, r2
 80119de:	011b      	lsls	r3, r3, #4
 80119e0:	1a9b      	subs	r3, r3, r2
 80119e2:	009b      	lsls	r3, r3, #2
 80119e4:	440b      	add	r3, r1
 80119e6:	3304      	adds	r3, #4
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	68ba      	ldr	r2, [r7, #8]
 80119ec:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 80119ee:	7bfa      	ldrb	r2, [r7, #15]
 80119f0:	491e      	ldr	r1, [pc, #120]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 80119f2:	4613      	mov	r3, r2
 80119f4:	011b      	lsls	r3, r3, #4
 80119f6:	1a9b      	subs	r3, r3, r2
 80119f8:	009b      	lsls	r3, r3, #2
 80119fa:	440b      	add	r3, r1
 80119fc:	3304      	adds	r3, #4
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	687a      	ldr	r2, [r7, #4]
 8011a02:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8011a04:	7bfa      	ldrb	r2, [r7, #15]
 8011a06:	4919      	ldr	r1, [pc, #100]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8011a08:	4613      	mov	r3, r2
 8011a0a:	011b      	lsls	r3, r3, #4
 8011a0c:	1a9b      	subs	r3, r3, r2
 8011a0e:	009b      	lsls	r3, r3, #2
 8011a10:	440b      	add	r3, r1
 8011a12:	3304      	adds	r3, #4
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	6819      	ldr	r1, [r3, #0]
 8011a18:	7bfa      	ldrb	r2, [r7, #15]
 8011a1a:	4814      	ldr	r0, [pc, #80]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8011a1c:	4613      	mov	r3, r2
 8011a1e:	011b      	lsls	r3, r3, #4
 8011a20:	1a9b      	subs	r3, r3, r2
 8011a22:	009b      	lsls	r3, r3, #2
 8011a24:	4403      	add	r3, r0
 8011a26:	3304      	adds	r3, #4
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	f041 0201 	orr.w	r2, r1, #1
 8011a2e:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8011a30:	7bfa      	ldrb	r2, [r7, #15]
 8011a32:	490e      	ldr	r1, [pc, #56]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8011a34:	4613      	mov	r3, r2
 8011a36:	011b      	lsls	r3, r3, #4
 8011a38:	1a9b      	subs	r3, r3, r2
 8011a3a:	009b      	lsls	r3, r3, #2
 8011a3c:	440b      	add	r3, r1
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	6879      	ldr	r1, [r7, #4]
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7ff fe81 	bl	801174a <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8011a48:	7bfa      	ldrb	r2, [r7, #15]
 8011a4a:	4908      	ldr	r1, [pc, #32]	@ (8011a6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8011a4c:	4613      	mov	r3, r2
 8011a4e:	011b      	lsls	r3, r3, #4
 8011a50:	1a9b      	subs	r3, r3, r2
 8011a52:	009b      	lsls	r3, r3, #2
 8011a54:	440b      	add	r3, r1
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7ff fe05 	bl	8011668 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8011a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3728      	adds	r7, #40	@ 0x28
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	bf00      	nop
 8011a6c:	200036cc 	.word	0x200036cc
 8011a70:	0008e318 	.word	0x0008e318
 8011a74:	00031b18 	.word	0x00031b18
 8011a78:	000360d8 	.word	0x000360d8

08011a7c <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b082      	sub	sp, #8
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	4603      	mov	r3, r0
 8011a84:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8011a86:	79fa      	ldrb	r2, [r7, #7]
 8011a88:	490c      	ldr	r1, [pc, #48]	@ (8011abc <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 8011a8a:	4613      	mov	r3, r2
 8011a8c:	011b      	lsls	r3, r3, #4
 8011a8e:	1a9b      	subs	r3, r3, r2
 8011a90:	009b      	lsls	r3, r3, #2
 8011a92:	440b      	add	r3, r1
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	2102      	movs	r1, #2
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7ff fdf5 	bl	8011688 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8011a9e:	79fa      	ldrb	r2, [r7, #7]
 8011aa0:	4906      	ldr	r1, [pc, #24]	@ (8011abc <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 8011aa2:	4613      	mov	r3, r2
 8011aa4:	011b      	lsls	r3, r3, #4
 8011aa6:	1a9b      	subs	r3, r3, r2
 8011aa8:	009b      	lsls	r3, r3, #2
 8011aaa:	440b      	add	r3, r1
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7ff fdda 	bl	8011668 <LL_UCPD_SendMessage>
}
 8011ab4:	bf00      	nop
 8011ab6:	3708      	adds	r7, #8
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}
 8011abc:	200036cc 	.word	0x200036cc

08011ac0 <USBPDM1_AssertRp>:
  * @brief  Assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRp(uint8_t PortNum)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 8011aca:	79fa      	ldrb	r2, [r7, #7]
 8011acc:	4946      	ldr	r1, [pc, #280]	@ (8011be8 <USBPDM1_AssertRp+0x128>)
 8011ace:	4613      	mov	r3, r2
 8011ad0:	011b      	lsls	r3, r3, #4
 8011ad2:	1a9b      	subs	r3, r3, r2
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	440b      	add	r3, r1
 8011ad8:	3310      	adds	r3, #16
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	789b      	ldrb	r3, [r3, #2]
 8011ade:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8011ae2:	b2db      	uxtb	r3, r3
 8011ae4:	2b02      	cmp	r3, #2
 8011ae6:	d021      	beq.n	8011b2c <USBPDM1_AssertRp+0x6c>
 8011ae8:	2b02      	cmp	r3, #2
 8011aea:	dc2d      	bgt.n	8011b48 <USBPDM1_AssertRp+0x88>
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d002      	beq.n	8011af6 <USBPDM1_AssertRp+0x36>
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d00d      	beq.n	8011b10 <USBPDM1_AssertRp+0x50>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8011af4:	e028      	b.n	8011b48 <USBPDM1_AssertRp+0x88>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8011af6:	79fa      	ldrb	r2, [r7, #7]
 8011af8:	493b      	ldr	r1, [pc, #236]	@ (8011be8 <USBPDM1_AssertRp+0x128>)
 8011afa:	4613      	mov	r3, r2
 8011afc:	011b      	lsls	r3, r3, #4
 8011afe:	1a9b      	subs	r3, r3, r2
 8011b00:	009b      	lsls	r3, r3, #2
 8011b02:	440b      	add	r3, r1
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	2180      	movs	r1, #128	@ 0x80
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7ff fd44 	bl	8011596 <LL_UCPD_SetRpResistor>
      break;
 8011b0e:	e01c      	b.n	8011b4a <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8011b10:	79fa      	ldrb	r2, [r7, #7]
 8011b12:	4935      	ldr	r1, [pc, #212]	@ (8011be8 <USBPDM1_AssertRp+0x128>)
 8011b14:	4613      	mov	r3, r2
 8011b16:	011b      	lsls	r3, r3, #4
 8011b18:	1a9b      	subs	r3, r3, r2
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	440b      	add	r3, r1
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7ff fd36 	bl	8011596 <LL_UCPD_SetRpResistor>
      break;
 8011b2a:	e00e      	b.n	8011b4a <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8011b2c:	79fa      	ldrb	r2, [r7, #7]
 8011b2e:	492e      	ldr	r1, [pc, #184]	@ (8011be8 <USBPDM1_AssertRp+0x128>)
 8011b30:	4613      	mov	r3, r2
 8011b32:	011b      	lsls	r3, r3, #4
 8011b34:	1a9b      	subs	r3, r3, r2
 8011b36:	009b      	lsls	r3, r3, #2
 8011b38:	440b      	add	r3, r1
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8011b40:	4618      	mov	r0, r3
 8011b42:	f7ff fd28 	bl	8011596 <LL_UCPD_SetRpResistor>
      break;
 8011b46:	e000      	b.n	8011b4a <USBPDM1_AssertRp+0x8a>
      break;
 8011b48:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8011b4a:	79fa      	ldrb	r2, [r7, #7]
 8011b4c:	4926      	ldr	r1, [pc, #152]	@ (8011be8 <USBPDM1_AssertRp+0x128>)
 8011b4e:	4613      	mov	r3, r2
 8011b50:	011b      	lsls	r3, r3, #4
 8011b52:	1a9b      	subs	r3, r3, r2
 8011b54:	009b      	lsls	r3, r3, #2
 8011b56:	440b      	add	r3, r1
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	2100      	movs	r1, #0
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f7ff fce7 	bl	8011530 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8011b62:	79fa      	ldrb	r2, [r7, #7]
 8011b64:	4920      	ldr	r1, [pc, #128]	@ (8011be8 <USBPDM1_AssertRp+0x128>)
 8011b66:	4613      	mov	r3, r2
 8011b68:	011b      	lsls	r3, r3, #4
 8011b6a:	1a9b      	subs	r3, r3, r2
 8011b6c:	009b      	lsls	r3, r3, #2
 8011b6e:	440b      	add	r3, r1
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7ff fcff 	bl	8011576 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8011b78:	79fa      	ldrb	r2, [r7, #7]
 8011b7a:	491b      	ldr	r1, [pc, #108]	@ (8011be8 <USBPDM1_AssertRp+0x128>)
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	011b      	lsls	r3, r3, #4
 8011b80:	1a9b      	subs	r3, r3, r2
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	440b      	add	r3, r1
 8011b86:	3334      	adds	r3, #52	@ 0x34
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d10d      	bne.n	8011baa <USBPDM1_AssertRp+0xea>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8011b8e:	79fa      	ldrb	r2, [r7, #7]
 8011b90:	4915      	ldr	r1, [pc, #84]	@ (8011be8 <USBPDM1_AssertRp+0x128>)
 8011b92:	4613      	mov	r3, r2
 8011b94:	011b      	lsls	r3, r3, #4
 8011b96:	1a9b      	subs	r3, r3, r2
 8011b98:	009b      	lsls	r3, r3, #2
 8011b9a:	440b      	add	r3, r1
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7ff fcc4 	bl	8011530 <LL_UCPD_SetccEnable>
  }

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 8011ba8:	e01a      	b.n	8011be0 <USBPDM1_AssertRp+0x120>
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8011baa:	79fa      	ldrb	r2, [r7, #7]
 8011bac:	490e      	ldr	r1, [pc, #56]	@ (8011be8 <USBPDM1_AssertRp+0x128>)
 8011bae:	4613      	mov	r3, r2
 8011bb0:	011b      	lsls	r3, r3, #4
 8011bb2:	1a9b      	subs	r3, r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	440b      	add	r3, r1
 8011bb8:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8011bba:	79fa      	ldrb	r2, [r7, #7]
 8011bbc:	490a      	ldr	r1, [pc, #40]	@ (8011be8 <USBPDM1_AssertRp+0x128>)
 8011bbe:	4613      	mov	r3, r2
 8011bc0:	011b      	lsls	r3, r3, #4
 8011bc2:	1a9b      	subs	r3, r3, r2
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	440b      	add	r3, r1
 8011bc8:	3334      	adds	r3, #52	@ 0x34
 8011bca:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8011bcc:	2b01      	cmp	r3, #1
 8011bce:	d102      	bne.n	8011bd6 <USBPDM1_AssertRp+0x116>
 8011bd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011bd4:	e001      	b.n	8011bda <USBPDM1_AssertRp+0x11a>
 8011bd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011bda:	4619      	mov	r1, r3
 8011bdc:	f7ff fca8 	bl	8011530 <LL_UCPD_SetccEnable>
}
 8011be0:	bf00      	nop
 8011be2:	3708      	adds	r7, #8
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	200036cc 	.word	0x200036cc

08011bec <USBPDM1_DeAssertRp>:
  * @brief  De-assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8011bec:	b480      	push	{r7}
 8011bee:	b083      	sub	sp, #12
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8011bf6:	bf00      	nop
 8011bf8:	370c      	adds	r7, #12
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c00:	4770      	bx	lr
	...

08011c04 <USBPDM1_AssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRd(uint8_t PortNum)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8011c0e:	79fa      	ldrb	r2, [r7, #7]
 8011c10:	493e      	ldr	r1, [pc, #248]	@ (8011d0c <USBPDM1_AssertRd+0x108>)
 8011c12:	4613      	mov	r3, r2
 8011c14:	011b      	lsls	r3, r3, #4
 8011c16:	1a9b      	subs	r3, r3, r2
 8011c18:	009b      	lsls	r3, r3, #2
 8011c1a:	440b      	add	r3, r1
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7ff fc36 	bl	8011490 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8011c24:	79fa      	ldrb	r2, [r7, #7]
 8011c26:	4939      	ldr	r1, [pc, #228]	@ (8011d0c <USBPDM1_AssertRd+0x108>)
 8011c28:	4613      	mov	r3, r2
 8011c2a:	011b      	lsls	r3, r3, #4
 8011c2c:	1a9b      	subs	r3, r3, r2
 8011c2e:	009b      	lsls	r3, r3, #2
 8011c30:	440b      	add	r3, r1
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	4618      	mov	r0, r3
 8011c36:	f7ff fc4b 	bl	80114d0 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8011c3a:	79fa      	ldrb	r2, [r7, #7]
 8011c3c:	4933      	ldr	r1, [pc, #204]	@ (8011d0c <USBPDM1_AssertRd+0x108>)
 8011c3e:	4613      	mov	r3, r2
 8011c40:	011b      	lsls	r3, r3, #4
 8011c42:	1a9b      	subs	r3, r3, r2
 8011c44:	009b      	lsls	r3, r3, #2
 8011c46:	440b      	add	r3, r1
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2100      	movs	r1, #0
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7ff fc6f 	bl	8011530 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 8011c52:	79fa      	ldrb	r2, [r7, #7]
 8011c54:	492d      	ldr	r1, [pc, #180]	@ (8011d0c <USBPDM1_AssertRd+0x108>)
 8011c56:	4613      	mov	r3, r2
 8011c58:	011b      	lsls	r3, r3, #4
 8011c5a:	1a9b      	subs	r3, r3, r2
 8011c5c:	009b      	lsls	r3, r3, #2
 8011c5e:	440b      	add	r3, r1
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7ff fc77 	bl	8011556 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8011c68:	79fa      	ldrb	r2, [r7, #7]
 8011c6a:	4928      	ldr	r1, [pc, #160]	@ (8011d0c <USBPDM1_AssertRd+0x108>)
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	011b      	lsls	r3, r3, #4
 8011c70:	1a9b      	subs	r3, r3, r2
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	440b      	add	r3, r1
 8011c76:	3334      	adds	r3, #52	@ 0x34
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d10d      	bne.n	8011c9a <USBPDM1_AssertRd+0x96>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8011c7e:	79fa      	ldrb	r2, [r7, #7]
 8011c80:	4922      	ldr	r1, [pc, #136]	@ (8011d0c <USBPDM1_AssertRd+0x108>)
 8011c82:	4613      	mov	r3, r2
 8011c84:	011b      	lsls	r3, r3, #4
 8011c86:	1a9b      	subs	r3, r3, r2
 8011c88:	009b      	lsls	r3, r3, #2
 8011c8a:	440b      	add	r3, r1
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7ff fc4c 	bl	8011530 <LL_UCPD_SetccEnable>
 8011c98:	e01a      	b.n	8011cd0 <USBPDM1_AssertRd+0xcc>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8011c9a:	79fa      	ldrb	r2, [r7, #7]
 8011c9c:	491b      	ldr	r1, [pc, #108]	@ (8011d0c <USBPDM1_AssertRd+0x108>)
 8011c9e:	4613      	mov	r3, r2
 8011ca0:	011b      	lsls	r3, r3, #4
 8011ca2:	1a9b      	subs	r3, r3, r2
 8011ca4:	009b      	lsls	r3, r3, #2
 8011ca6:	440b      	add	r3, r1
 8011ca8:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8011caa:	79fa      	ldrb	r2, [r7, #7]
 8011cac:	4917      	ldr	r1, [pc, #92]	@ (8011d0c <USBPDM1_AssertRd+0x108>)
 8011cae:	4613      	mov	r3, r2
 8011cb0:	011b      	lsls	r3, r3, #4
 8011cb2:	1a9b      	subs	r3, r3, r2
 8011cb4:	009b      	lsls	r3, r3, #2
 8011cb6:	440b      	add	r3, r1
 8011cb8:	3334      	adds	r3, #52	@ 0x34
 8011cba:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8011cbc:	2b01      	cmp	r3, #1
 8011cbe:	d102      	bne.n	8011cc6 <USBPDM1_AssertRd+0xc2>
 8011cc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011cc4:	e001      	b.n	8011cca <USBPDM1_AssertRd+0xc6>
 8011cc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011cca:	4619      	mov	r1, r3
 8011ccc:	f7ff fc30 	bl	8011530 <LL_UCPD_SetccEnable>
  }

  HAL_Delay(1);
 8011cd0:	2001      	movs	r0, #1
 8011cd2:	f7f4 f995 	bl	8006000 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8011cd6:	79fa      	ldrb	r2, [r7, #7]
 8011cd8:	490c      	ldr	r1, [pc, #48]	@ (8011d0c <USBPDM1_AssertRd+0x108>)
 8011cda:	4613      	mov	r3, r2
 8011cdc:	011b      	lsls	r3, r3, #4
 8011cde:	1a9b      	subs	r3, r3, r2
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	440b      	add	r3, r1
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7ff fbc2 	bl	8011470 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8011cec:	79fa      	ldrb	r2, [r7, #7]
 8011cee:	4907      	ldr	r1, [pc, #28]	@ (8011d0c <USBPDM1_AssertRd+0x108>)
 8011cf0:	4613      	mov	r3, r2
 8011cf2:	011b      	lsls	r3, r3, #4
 8011cf4:	1a9b      	subs	r3, r3, r2
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	440b      	add	r3, r1
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7ff fbd7 	bl	80114b0 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8011d02:	bf00      	nop
 8011d04:	3708      	adds	r7, #8
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
 8011d0a:	bf00      	nop
 8011d0c:	200036cc 	.word	0x200036cc

08011d10 <USBPDM1_DeAssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval none
  */
void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8011d10:	b480      	push	{r7}
 8011d12:	b083      	sub	sp, #12
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	4603      	mov	r3, r0
 8011d18:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8011d1a:	bf00      	nop
 8011d1c:	370c      	adds	r7, #12
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d24:	4770      	bx	lr
	...

08011d28 <USBPDM1_EnterErrorRecovery>:
  * @brief  Enter error recovery
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	4603      	mov	r3, r0
 8011d30:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8011d32:	79fa      	ldrb	r2, [r7, #7]
 8011d34:	491f      	ldr	r1, [pc, #124]	@ (8011db4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8011d36:	4613      	mov	r3, r2
 8011d38:	011b      	lsls	r3, r3, #4
 8011d3a:	1a9b      	subs	r3, r3, r2
 8011d3c:	009b      	lsls	r3, r3, #2
 8011d3e:	440b      	add	r3, r1
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7ff fc17 	bl	8011576 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8011d48:	79fa      	ldrb	r2, [r7, #7]
 8011d4a:	491a      	ldr	r1, [pc, #104]	@ (8011db4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8011d4c:	4613      	mov	r3, r2
 8011d4e:	011b      	lsls	r3, r3, #4
 8011d50:	1a9b      	subs	r3, r3, r2
 8011d52:	009b      	lsls	r3, r3, #2
 8011d54:	440b      	add	r3, r1
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2100      	movs	r1, #0
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7ff fc1b 	bl	8011596 <LL_UCPD_SetRpResistor>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8011d60:	79fa      	ldrb	r2, [r7, #7]
 8011d62:	4914      	ldr	r1, [pc, #80]	@ (8011db4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8011d64:	4613      	mov	r3, r2
 8011d66:	011b      	lsls	r3, r3, #4
 8011d68:	1a9b      	subs	r3, r3, r2
 8011d6a:	009b      	lsls	r3, r3, #2
 8011d6c:	440b      	add	r3, r1
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	4618      	mov	r0, r3
 8011d72:	f7ff fc46 	bl	8011602 <LL_UCPD_RxDisable>

#if !defined(USBPDCORE_LIB_NO_PD)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8011d76:	79fa      	ldrb	r2, [r7, #7]
 8011d78:	490e      	ldr	r1, [pc, #56]	@ (8011db4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8011d7a:	4613      	mov	r3, r2
 8011d7c:	011b      	lsls	r3, r3, #4
 8011d7e:	1a9b      	subs	r3, r3, r2
 8011d80:	009b      	lsls	r3, r3, #2
 8011d82:	440b      	add	r3, r1
 8011d84:	330c      	adds	r3, #12
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	7a1b      	ldrb	r3, [r3, #8]
 8011d8a:	f003 0302 	and.w	r3, r3, #2
 8011d8e:	b2db      	uxtb	r3, r3
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d00a      	beq.n	8011daa <USBPDM1_EnterErrorRecovery+0x82>
  {
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8011d94:	79fa      	ldrb	r2, [r7, #7]
 8011d96:	4907      	ldr	r1, [pc, #28]	@ (8011db4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8011d98:	4613      	mov	r3, r2
 8011d9a:	011b      	lsls	r3, r3, #4
 8011d9c:	1a9b      	subs	r3, r3, r2
 8011d9e:	009b      	lsls	r3, r3, #2
 8011da0:	440b      	add	r3, r1
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7ff fbb3 	bl	8011510 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPDCORE_LIB_NO_PD */
}
 8011daa:	bf00      	nop
 8011dac:	3708      	adds	r7, #8
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	200036cc 	.word	0x200036cc

08011db8 <USBPD_HW_IF_EnableRX>:
  * @brief  Enable RX
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8011dc2:	79fa      	ldrb	r2, [r7, #7]
 8011dc4:	4906      	ldr	r1, [pc, #24]	@ (8011de0 <USBPD_HW_IF_EnableRX+0x28>)
 8011dc6:	4613      	mov	r3, r2
 8011dc8:	011b      	lsls	r3, r3, #4
 8011dca:	1a9b      	subs	r3, r3, r2
 8011dcc:	009b      	lsls	r3, r3, #2
 8011dce:	440b      	add	r3, r1
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7ff fc05 	bl	80115e2 <LL_UCPD_RxEnable>
}
 8011dd8:	bf00      	nop
 8011dda:	3708      	adds	r7, #8
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}
 8011de0:	200036cc 	.word	0x200036cc

08011de4 <USBPD_HW_IF_DisableRX>:
  * @brief  Disable RX
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b082      	sub	sp, #8
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	4603      	mov	r3, r0
 8011dec:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8011dee:	79fa      	ldrb	r2, [r7, #7]
 8011df0:	4906      	ldr	r1, [pc, #24]	@ (8011e0c <USBPD_HW_IF_DisableRX+0x28>)
 8011df2:	4613      	mov	r3, r2
 8011df4:	011b      	lsls	r3, r3, #4
 8011df6:	1a9b      	subs	r3, r3, r2
 8011df8:	009b      	lsls	r3, r3, #2
 8011dfa:	440b      	add	r3, r1
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7ff fbff 	bl	8011602 <LL_UCPD_RxDisable>
}
 8011e04:	bf00      	nop
 8011e06:	3708      	adds	r7, #8
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}
 8011e0c:	200036cc 	.word	0x200036cc

08011e10 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8011e10:	b590      	push	{r4, r7, lr}
 8011e12:	b085      	sub	sp, #20
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	4603      	mov	r3, r0
 8011e18:	6039      	str	r1, [r7, #0]
 8011e1a:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 8011e1c:	f000 fc08 	bl	8012630 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8011e20:	79fc      	ldrb	r4, [r7, #7]
 8011e22:	79fb      	ldrb	r3, [r7, #7]
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7fe fe73 	bl	8010b10 <USBPD_HW_Init_DMATxInstance>
 8011e2a:	4602      	mov	r2, r0
 8011e2c:	499d      	ldr	r1, [pc, #628]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011e2e:	4623      	mov	r3, r4
 8011e30:	011b      	lsls	r3, r3, #4
 8011e32:	1b1b      	subs	r3, r3, r4
 8011e34:	009b      	lsls	r3, r3, #2
 8011e36:	440b      	add	r3, r1
 8011e38:	3304      	adds	r3, #4
 8011e3a:	601a      	str	r2, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 8011e3c:	79fc      	ldrb	r4, [r7, #7]
 8011e3e:	79fb      	ldrb	r3, [r7, #7]
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7fe fe25 	bl	8010a90 <USBPD_HW_Init_DMARxInstance>
 8011e46:	4602      	mov	r2, r0
 8011e48:	4996      	ldr	r1, [pc, #600]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011e4a:	4623      	mov	r3, r4
 8011e4c:	011b      	lsls	r3, r3, #4
 8011e4e:	1b1b      	subs	r3, r3, r4
 8011e50:	009b      	lsls	r3, r3, #2
 8011e52:	440b      	add	r3, r1
 8011e54:	3308      	adds	r3, #8
 8011e56:	601a      	str	r2, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8011e58:	79fa      	ldrb	r2, [r7, #7]
 8011e5a:	4992      	ldr	r1, [pc, #584]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011e5c:	4613      	mov	r3, r2
 8011e5e:	011b      	lsls	r3, r3, #4
 8011e60:	1a9b      	subs	r3, r3, r2
 8011e62:	009b      	lsls	r3, r3, #2
 8011e64:	440b      	add	r3, r1
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	3330      	adds	r3, #48	@ 0x30
 8011e6a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 8011e6c:	79fa      	ldrb	r2, [r7, #7]
 8011e6e:	498d      	ldr	r1, [pc, #564]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011e70:	4613      	mov	r3, r2
 8011e72:	011b      	lsls	r3, r3, #4
 8011e74:	1a9b      	subs	r3, r3, r2
 8011e76:	009b      	lsls	r3, r3, #2
 8011e78:	440b      	add	r3, r1
 8011e7a:	3308      	adds	r3, #8
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	68fa      	ldr	r2, [r7, #12]
 8011e80:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8011e82:	79fa      	ldrb	r2, [r7, #7]
 8011e84:	4987      	ldr	r1, [pc, #540]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011e86:	4613      	mov	r3, r2
 8011e88:	011b      	lsls	r3, r3, #4
 8011e8a:	1a9b      	subs	r3, r3, r2
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	440b      	add	r3, r1
 8011e90:	3330      	adds	r3, #48	@ 0x30
 8011e92:	6818      	ldr	r0, [r3, #0]
 8011e94:	79fa      	ldrb	r2, [r7, #7]
 8011e96:	4983      	ldr	r1, [pc, #524]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011e98:	4613      	mov	r3, r2
 8011e9a:	011b      	lsls	r3, r3, #4
 8011e9c:	1a9b      	subs	r3, r3, r2
 8011e9e:	009b      	lsls	r3, r3, #2
 8011ea0:	440b      	add	r3, r1
 8011ea2:	3308      	adds	r3, #8
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 8011eaa:	79fa      	ldrb	r2, [r7, #7]
 8011eac:	497d      	ldr	r1, [pc, #500]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011eae:	4613      	mov	r3, r2
 8011eb0:	011b      	lsls	r3, r3, #4
 8011eb2:	1a9b      	subs	r3, r3, r2
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	440b      	add	r3, r1
 8011eb8:	3308      	adds	r3, #8
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8011ec0:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8011ec2:	79fa      	ldrb	r2, [r7, #7]
 8011ec4:	4977      	ldr	r1, [pc, #476]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011ec6:	4613      	mov	r3, r2
 8011ec8:	011b      	lsls	r3, r3, #4
 8011eca:	1a9b      	subs	r3, r3, r2
 8011ecc:	009b      	lsls	r3, r3, #2
 8011ece:	440b      	add	r3, r1
 8011ed0:	3308      	adds	r3, #8
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	6819      	ldr	r1, [r3, #0]
 8011ed6:	79fa      	ldrb	r2, [r7, #7]
 8011ed8:	4872      	ldr	r0, [pc, #456]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011eda:	4613      	mov	r3, r2
 8011edc:	011b      	lsls	r3, r3, #4
 8011ede:	1a9b      	subs	r3, r3, r2
 8011ee0:	009b      	lsls	r3, r3, #2
 8011ee2:	4403      	add	r3, r0
 8011ee4:	3308      	adds	r3, #8
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f041 0201 	orr.w	r2, r1, #1
 8011eec:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8011eee:	79fa      	ldrb	r2, [r7, #7]
 8011ef0:	496c      	ldr	r1, [pc, #432]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011ef2:	4613      	mov	r3, r2
 8011ef4:	011b      	lsls	r3, r3, #4
 8011ef6:	1a9b      	subs	r3, r3, r2
 8011ef8:	009b      	lsls	r3, r3, #2
 8011efa:	440b      	add	r3, r1
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	3324      	adds	r3, #36	@ 0x24
 8011f00:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8011f02:	79fa      	ldrb	r2, [r7, #7]
 8011f04:	4967      	ldr	r1, [pc, #412]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011f06:	4613      	mov	r3, r2
 8011f08:	011b      	lsls	r3, r3, #4
 8011f0a:	1a9b      	subs	r3, r3, r2
 8011f0c:	009b      	lsls	r3, r3, #2
 8011f0e:	440b      	add	r3, r1
 8011f10:	3304      	adds	r3, #4
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	68fa      	ldr	r2, [r7, #12]
 8011f16:	609a      	str	r2, [r3, #8]
  /* Disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 8011f18:	79fa      	ldrb	r2, [r7, #7]
 8011f1a:	4962      	ldr	r1, [pc, #392]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011f1c:	4613      	mov	r3, r2
 8011f1e:	011b      	lsls	r3, r3, #4
 8011f20:	1a9b      	subs	r3, r3, r2
 8011f22:	009b      	lsls	r3, r3, #2
 8011f24:	440b      	add	r3, r1
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	6919      	ldr	r1, [r3, #16]
 8011f2a:	79fa      	ldrb	r2, [r7, #7]
 8011f2c:	485d      	ldr	r0, [pc, #372]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011f2e:	4613      	mov	r3, r2
 8011f30:	011b      	lsls	r3, r3, #4
 8011f32:	1a9b      	subs	r3, r3, r2
 8011f34:	009b      	lsls	r3, r3, #2
 8011f36:	4403      	add	r3, r0
 8011f38:	681a      	ldr	r2, [r3, #0]
 8011f3a:	f441 53f3 	orr.w	r3, r1, #7776	@ 0x1e60
 8011f3e:	f043 031e 	orr.w	r3, r3, #30
 8011f42:	6113      	str	r3, [r2, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 8011f44:	79fa      	ldrb	r2, [r7, #7]
 8011f46:	4957      	ldr	r1, [pc, #348]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011f48:	4613      	mov	r3, r2
 8011f4a:	011b      	lsls	r3, r3, #4
 8011f4c:	1a9b      	subs	r3, r3, r2
 8011f4e:	009b      	lsls	r3, r3, #2
 8011f50:	440b      	add	r3, r1
 8011f52:	3334      	adds	r3, #52	@ 0x34
 8011f54:	683a      	ldr	r2, [r7, #0]
 8011f56:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 8011f58:	79fa      	ldrb	r2, [r7, #7]
 8011f5a:	4952      	ldr	r1, [pc, #328]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011f5c:	4613      	mov	r3, r2
 8011f5e:	011b      	lsls	r3, r3, #4
 8011f60:	1a9b      	subs	r3, r3, r2
 8011f62:	009b      	lsls	r3, r3, #2
 8011f64:	440b      	add	r3, r1
 8011f66:	6818      	ldr	r0, [r3, #0]
 8011f68:	79fa      	ldrb	r2, [r7, #7]
 8011f6a:	494e      	ldr	r1, [pc, #312]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	011b      	lsls	r3, r3, #4
 8011f70:	1a9b      	subs	r3, r3, r2
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	440b      	add	r3, r1
 8011f76:	3334      	adds	r3, #52	@ 0x34
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	2b01      	cmp	r3, #1
 8011f7c:	d101      	bne.n	8011f82 <HW_SignalAttachement+0x172>
 8011f7e:	2300      	movs	r3, #0
 8011f80:	e000      	b.n	8011f84 <HW_SignalAttachement+0x174>
 8011f82:	2340      	movs	r3, #64	@ 0x40
 8011f84:	4619      	mov	r1, r3
 8011f86:	f7ff fb19 	bl	80115bc <LL_UCPD_SetCCPin>
#if defined(_VCONN_SUPPORT)
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8011f8a:	79fa      	ldrb	r2, [r7, #7]
 8011f8c:	4945      	ldr	r1, [pc, #276]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011f8e:	4613      	mov	r3, r2
 8011f90:	011b      	lsls	r3, r3, #4
 8011f92:	1a9b      	subs	r3, r3, r2
 8011f94:	009b      	lsls	r3, r3, #2
 8011f96:	440b      	add	r3, r1
 8011f98:	330c      	adds	r3, #12
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	7a1b      	ldrb	r3, [r3, #8]
 8011f9e:	f003 0302 	and.w	r3, r3, #2
 8011fa2:	b2db      	uxtb	r3, r3
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d031      	beq.n	801200c <HW_SignalAttachement+0x1fc>
  {
    /* Set GPIO to allow the FRS TX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 8011fa8:	79fa      	ldrb	r2, [r7, #7]
 8011faa:	493e      	ldr	r1, [pc, #248]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011fac:	4613      	mov	r3, r2
 8011fae:	011b      	lsls	r3, r3, #4
 8011fb0:	1a9b      	subs	r3, r3, r2
 8011fb2:	009b      	lsls	r3, r3, #2
 8011fb4:	440b      	add	r3, r1
 8011fb6:	3334      	adds	r3, #52	@ 0x34
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d101      	bne.n	8011fc2 <HW_SignalAttachement+0x1b2>
 8011fbe:	2201      	movs	r2, #1
 8011fc0:	e000      	b.n	8011fc4 <HW_SignalAttachement+0x1b4>
 8011fc2:	2202      	movs	r2, #2
 8011fc4:	79fb      	ldrb	r3, [r7, #7]
 8011fc6:	4611      	mov	r1, r2
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7fe fde0 	bl	8010b8e <USBPD_HW_SetFRSSignalling>
    /* Enable FRS RX */
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8011fce:	79fa      	ldrb	r2, [r7, #7]
 8011fd0:	4934      	ldr	r1, [pc, #208]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011fd2:	4613      	mov	r3, r2
 8011fd4:	011b      	lsls	r3, r3, #4
 8011fd6:	1a9b      	subs	r3, r3, r2
 8011fd8:	009b      	lsls	r3, r3, #2
 8011fda:	440b      	add	r3, r1
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7ff fa86 	bl	80114f0 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 8011fe4:	79fa      	ldrb	r2, [r7, #7]
 8011fe6:	492f      	ldr	r1, [pc, #188]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011fe8:	4613      	mov	r3, r2
 8011fea:	011b      	lsls	r3, r3, #4
 8011fec:	1a9b      	subs	r3, r3, r2
 8011fee:	009b      	lsls	r3, r3, #2
 8011ff0:	440b      	add	r3, r1
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	6919      	ldr	r1, [r3, #16]
 8011ff6:	79fa      	ldrb	r2, [r7, #7]
 8011ff8:	482a      	ldr	r0, [pc, #168]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8011ffa:	4613      	mov	r3, r2
 8011ffc:	011b      	lsls	r3, r3, #4
 8011ffe:	1a9b      	subs	r3, r3, r2
 8012000:	009b      	lsls	r3, r3, #2
 8012002:	4403      	add	r3, r0
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	f441 1280 	orr.w	r2, r1, #1048576	@ 0x100000
 801200a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 801200c:	79fa      	ldrb	r2, [r7, #7]
 801200e:	4925      	ldr	r1, [pc, #148]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8012010:	4613      	mov	r3, r2
 8012012:	011b      	lsls	r3, r3, #4
 8012014:	1a9b      	subs	r3, r3, r2
 8012016:	009b      	lsls	r3, r3, #2
 8012018:	440b      	add	r3, r1
 801201a:	3334      	adds	r3, #52	@ 0x34
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	2b01      	cmp	r3, #1
 8012020:	d10d      	bne.n	801203e <HW_SignalAttachement+0x22e>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 8012022:	79fa      	ldrb	r2, [r7, #7]
 8012024:	491f      	ldr	r1, [pc, #124]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8012026:	4613      	mov	r3, r2
 8012028:	011b      	lsls	r3, r3, #4
 801202a:	1a9b      	subs	r3, r3, r2
 801202c:	009b      	lsls	r3, r3, #2
 801202e:	440b      	add	r3, r1
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012036:	4618      	mov	r0, r3
 8012038:	f7ff fa7a 	bl	8011530 <LL_UCPD_SetccEnable>
 801203c:	e00c      	b.n	8012058 <HW_SignalAttachement+0x248>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 801203e:	79fa      	ldrb	r2, [r7, #7]
 8012040:	4918      	ldr	r1, [pc, #96]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8012042:	4613      	mov	r3, r2
 8012044:	011b      	lsls	r3, r3, #4
 8012046:	1a9b      	subs	r3, r3, r2
 8012048:	009b      	lsls	r3, r3, #2
 801204a:	440b      	add	r3, r1
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8012052:	4618      	mov	r0, r3
 8012054:	f7ff fa6c 	bl	8011530 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 8012058:	79fa      	ldrb	r2, [r7, #7]
 801205a:	4912      	ldr	r1, [pc, #72]	@ (80120a4 <HW_SignalAttachement+0x294>)
 801205c:	4613      	mov	r3, r2
 801205e:	011b      	lsls	r3, r3, #4
 8012060:	1a9b      	subs	r3, r3, r2
 8012062:	009b      	lsls	r3, r3, #2
 8012064:	440b      	add	r3, r1
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	2100      	movs	r1, #0
 801206a:	4618      	mov	r0, r3
 801206c:	f7ff fad9 	bl	8011622 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 8012070:	79fa      	ldrb	r2, [r7, #7]
 8012072:	490c      	ldr	r1, [pc, #48]	@ (80120a4 <HW_SignalAttachement+0x294>)
 8012074:	4613      	mov	r3, r2
 8012076:	011b      	lsls	r3, r3, #4
 8012078:	1a9b      	subs	r3, r3, r2
 801207a:	009b      	lsls	r3, r3, #2
 801207c:	440b      	add	r3, r1
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	4618      	mov	r0, r3
 8012082:	f7ff fb14 	bl	80116ae <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 8012086:	79fa      	ldrb	r2, [r7, #7]
 8012088:	4906      	ldr	r1, [pc, #24]	@ (80120a4 <HW_SignalAttachement+0x294>)
 801208a:	4613      	mov	r3, r2
 801208c:	011b      	lsls	r3, r3, #4
 801208e:	1a9b      	subs	r3, r3, r2
 8012090:	009b      	lsls	r3, r3, #2
 8012092:	440b      	add	r3, r1
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	4618      	mov	r0, r3
 8012098:	f7ff fb29 	bl	80116ee <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 801209c:	bf00      	nop
 801209e:	3714      	adds	r7, #20
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd90      	pop	{r4, r7, pc}
 80120a4:	200036cc 	.word	0x200036cc

080120a8 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	4603      	mov	r3, r0
 80120b0:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* Stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 80120b2:	79fa      	ldrb	r2, [r7, #7]
 80120b4:	493e      	ldr	r1, [pc, #248]	@ (80121b0 <HW_SignalDetachment+0x108>)
 80120b6:	4613      	mov	r3, r2
 80120b8:	011b      	lsls	r3, r3, #4
 80120ba:	1a9b      	subs	r3, r3, r2
 80120bc:	009b      	lsls	r3, r3, #2
 80120be:	440b      	add	r3, r1
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7ff fb03 	bl	80116ce <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 80120c8:	79fa      	ldrb	r2, [r7, #7]
 80120ca:	4939      	ldr	r1, [pc, #228]	@ (80121b0 <HW_SignalDetachment+0x108>)
 80120cc:	4613      	mov	r3, r2
 80120ce:	011b      	lsls	r3, r3, #4
 80120d0:	1a9b      	subs	r3, r3, r2
 80120d2:	009b      	lsls	r3, r3, #2
 80120d4:	440b      	add	r3, r1
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	4618      	mov	r0, r3
 80120da:	f7ff fb18 	bl	801170e <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80120de:	79fa      	ldrb	r2, [r7, #7]
 80120e0:	4933      	ldr	r1, [pc, #204]	@ (80121b0 <HW_SignalDetachment+0x108>)
 80120e2:	4613      	mov	r3, r2
 80120e4:	011b      	lsls	r3, r3, #4
 80120e6:	1a9b      	subs	r3, r3, r2
 80120e8:	009b      	lsls	r3, r3, #2
 80120ea:	440b      	add	r3, r1
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	4618      	mov	r0, r3
 80120f0:	f7ff fa87 	bl	8011602 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 80120f4:	79fa      	ldrb	r2, [r7, #7]
 80120f6:	492e      	ldr	r1, [pc, #184]	@ (80121b0 <HW_SignalDetachment+0x108>)
 80120f8:	4613      	mov	r3, r2
 80120fa:	011b      	lsls	r3, r3, #4
 80120fc:	1a9b      	subs	r3, r3, r2
 80120fe:	009b      	lsls	r3, r3, #2
 8012100:	440b      	add	r3, r1
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012108:	611a      	str	r2, [r3, #16]
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_DRP */
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 801210a:	79fb      	ldrb	r3, [r7, #7]
 801210c:	4618      	mov	r0, r3
 801210e:	f7fe fd33 	bl	8010b78 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 8012112:	79fb      	ldrb	r3, [r7, #7]
 8012114:	4618      	mov	r0, r3
 8012116:	f7fe fcef 	bl	8010af8 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 801211a:	79fa      	ldrb	r2, [r7, #7]
 801211c:	4924      	ldr	r1, [pc, #144]	@ (80121b0 <HW_SignalDetachment+0x108>)
 801211e:	4613      	mov	r3, r2
 8012120:	011b      	lsls	r3, r3, #4
 8012122:	1a9b      	subs	r3, r3, r2
 8012124:	009b      	lsls	r3, r3, #2
 8012126:	440b      	add	r3, r1
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 801212e:	4618      	mov	r0, r3
 8012130:	f7ff f9fe 	bl	8011530 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 8012134:	79fa      	ldrb	r2, [r7, #7]
 8012136:	491e      	ldr	r1, [pc, #120]	@ (80121b0 <HW_SignalDetachment+0x108>)
 8012138:	4613      	mov	r3, r2
 801213a:	011b      	lsls	r3, r3, #4
 801213c:	1a9b      	subs	r3, r3, r2
 801213e:	009b      	lsls	r3, r3, #2
 8012140:	440b      	add	r3, r1
 8012142:	3310      	adds	r3, #16
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	781b      	ldrb	r3, [r3, #0]
 8012148:	f003 0304 	and.w	r3, r3, #4
 801214c:	b2db      	uxtb	r3, r3
 801214e:	2b00      	cmp	r3, #0
 8012150:	d103      	bne.n	801215a <HW_SignalDetachment+0xb2>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8012152:	79fb      	ldrb	r3, [r7, #7]
 8012154:	4618      	mov	r0, r3
 8012156:	f003 fe29 	bl	8015dac <BSP_USBPD_PWR_VBUSDeInit>
  }

  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801215a:	79fa      	ldrb	r2, [r7, #7]
 801215c:	4914      	ldr	r1, [pc, #80]	@ (80121b0 <HW_SignalDetachment+0x108>)
 801215e:	4613      	mov	r3, r2
 8012160:	011b      	lsls	r3, r3, #4
 8012162:	1a9b      	subs	r3, r3, r2
 8012164:	009b      	lsls	r3, r3, #2
 8012166:	440b      	add	r3, r1
 8012168:	330c      	adds	r3, #12
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	7a1b      	ldrb	r3, [r3, #8]
 801216e:	f003 0302 	and.w	r3, r3, #2
 8012172:	b2db      	uxtb	r3, r3
 8012174:	2b00      	cmp	r3, #0
 8012176:	d00a      	beq.n	801218e <HW_SignalDetachment+0xe6>
  {
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8012178:	79fa      	ldrb	r2, [r7, #7]
 801217a:	490d      	ldr	r1, [pc, #52]	@ (80121b0 <HW_SignalDetachment+0x108>)
 801217c:	4613      	mov	r3, r2
 801217e:	011b      	lsls	r3, r3, #4
 8012180:	1a9b      	subs	r3, r3, r2
 8012182:	009b      	lsls	r3, r3, #2
 8012184:	440b      	add	r3, r1
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	4618      	mov	r0, r3
 801218a:	f7ff f9c1 	bl	8011510 <LL_UCPD_FRSDetectionDisable>
  }

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 801218e:	79fa      	ldrb	r2, [r7, #7]
 8012190:	4907      	ldr	r1, [pc, #28]	@ (80121b0 <HW_SignalDetachment+0x108>)
 8012192:	4613      	mov	r3, r2
 8012194:	011b      	lsls	r3, r3, #4
 8012196:	1a9b      	subs	r3, r3, r2
 8012198:	009b      	lsls	r3, r3, #2
 801219a:	440b      	add	r3, r1
 801219c:	3334      	adds	r3, #52	@ 0x34
 801219e:	2200      	movs	r2, #0
 80121a0:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 80121a2:	f000 facd 	bl	8012740 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80121a6:	bf00      	nop
 80121a8:	3708      	adds	r7, #8
 80121aa:	46bd      	mov	sp, r7
 80121ac:	bd80      	pop	{r7, pc}
 80121ae:	bf00      	nop
 80121b0:	200036cc 	.word	0x200036cc

080121b4 <USBPD_HW_IF_IsResistor_SinkTxOk>:
  * @brief  Check if resistors are set to SinkTxOk
  * @param  PortNum Port
  * @retval USBPD_TRUE if resistor is set to SinkTxOk, else USBPD_FALSE
  */
uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80121b4:	b480      	push	{r7}
 80121b6:	b083      	sub	sp, #12
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	4603      	mov	r3, r0
 80121bc:	71fb      	strb	r3, [r7, #7]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 80121be:	79fa      	ldrb	r2, [r7, #7]
 80121c0:	491b      	ldr	r1, [pc, #108]	@ (8012230 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 80121c2:	4613      	mov	r3, r2
 80121c4:	011b      	lsls	r3, r3, #4
 80121c6:	1a9b      	subs	r3, r3, r2
 80121c8:	009b      	lsls	r3, r3, #2
 80121ca:	440b      	add	r3, r1
 80121cc:	3334      	adds	r3, #52	@ 0x34
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	d002      	beq.n	80121da <USBPD_HW_IF_IsResistor_SinkTxOk+0x26>
 80121d4:	2b02      	cmp	r3, #2
 80121d6:	d010      	beq.n	80121fa <USBPD_HW_IF_IsResistor_SinkTxOk+0x46>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 80121d8:	e022      	b.n	8012220 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 80121da:	79fa      	ldrb	r2, [r7, #7]
 80121dc:	4914      	ldr	r1, [pc, #80]	@ (8012230 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 80121de:	4613      	mov	r3, r2
 80121e0:	011b      	lsls	r3, r3, #4
 80121e2:	1a9b      	subs	r3, r3, r2
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	440b      	add	r3, r1
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	695b      	ldr	r3, [r3, #20]
 80121ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80121f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80121f4:	d111      	bne.n	801221a <USBPD_HW_IF_IsResistor_SinkTxOk+0x66>
        return USBPD_TRUE;
 80121f6:	2301      	movs	r3, #1
 80121f8:	e013      	b.n	8012222 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 80121fa:	79fa      	ldrb	r2, [r7, #7]
 80121fc:	490c      	ldr	r1, [pc, #48]	@ (8012230 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 80121fe:	4613      	mov	r3, r2
 8012200:	011b      	lsls	r3, r3, #4
 8012202:	1a9b      	subs	r3, r3, r2
 8012204:	009b      	lsls	r3, r3, #2
 8012206:	440b      	add	r3, r1
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	695b      	ldr	r3, [r3, #20]
 801220c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8012210:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8012214:	d103      	bne.n	801221e <USBPD_HW_IF_IsResistor_SinkTxOk+0x6a>
        return USBPD_TRUE;
 8012216:	2301      	movs	r3, #1
 8012218:	e003      	b.n	8012222 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      break;
 801221a:	bf00      	nop
 801221c:	e000      	b.n	8012220 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      break;
 801221e:	bf00      	nop
  }

  return USBPD_FALSE;
 8012220:	2300      	movs	r3, #0
}
 8012222:	4618      	mov	r0, r3
 8012224:	370c      	adds	r7, #12
 8012226:	46bd      	mov	sp, r7
 8012228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222c:	4770      	bx	lr
 801222e:	bf00      	nop
 8012230:	200036cc 	.word	0x200036cc

08012234 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b084      	sub	sp, #16
 8012238:	af00      	add	r7, sp, #0
 801223a:	4603      	mov	r3, r0
 801223c:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801223e:	79fb      	ldrb	r3, [r7, #7]
 8012240:	f107 020c 	add.w	r2, r7, #12
 8012244:	4611      	mov	r1, r2
 8012246:	4618      	mov	r0, r3
 8012248:	f003 fdc4 	bl	8015dd4 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	b29b      	uxth	r3, r3
}
 8012250:	4618      	mov	r0, r3
 8012252:	3710      	adds	r7, #16
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}

08012258 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8012258:	b480      	push	{r7}
 801225a:	b085      	sub	sp, #20
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8012260:	4b08      	ldr	r3, [pc, #32]	@ (8012284 <LL_APB2_GRP1_EnableClock+0x2c>)
 8012262:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012264:	4907      	ldr	r1, [pc, #28]	@ (8012284 <LL_APB2_GRP1_EnableClock+0x2c>)
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	4313      	orrs	r3, r2
 801226a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801226c:	4b05      	ldr	r3, [pc, #20]	@ (8012284 <LL_APB2_GRP1_EnableClock+0x2c>)
 801226e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	4013      	ands	r3, r2
 8012274:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012276:	68fb      	ldr	r3, [r7, #12]
}
 8012278:	bf00      	nop
 801227a:	3714      	adds	r7, #20
 801227c:	46bd      	mov	sp, r7
 801227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012282:	4770      	bx	lr
 8012284:	40021000 	.word	0x40021000

08012288 <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8012288:	b480      	push	{r7}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8012290:	4b06      	ldr	r3, [pc, #24]	@ (80122ac <LL_APB2_GRP1_DisableClock+0x24>)
 8012292:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	43db      	mvns	r3, r3
 8012298:	4904      	ldr	r1, [pc, #16]	@ (80122ac <LL_APB2_GRP1_DisableClock+0x24>)
 801229a:	4013      	ands	r3, r2
 801229c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 801229e:	bf00      	nop
 80122a0:	370c      	adds	r7, #12
 80122a2:	46bd      	mov	sp, r7
 80122a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a8:	4770      	bx	lr
 80122aa:	bf00      	nop
 80122ac:	40021000 	.word	0x40021000

080122b0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80122b0:	b480      	push	{r7}
 80122b2:	b083      	sub	sp, #12
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f043 0201 	orr.w	r2, r3, #1
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	601a      	str	r2, [r3, #0]
}
 80122c4:	bf00      	nop
 80122c6:	370c      	adds	r7, #12
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr

080122d0 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 80122d0:	b480      	push	{r7}
 80122d2:	b083      	sub	sp, #12
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	431a      	orrs	r2, r3
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	601a      	str	r2, [r3, #0]
}
 80122ea:	bf00      	nop
 80122ec:	370c      	adds	r7, #12
 80122ee:	46bd      	mov	sp, r7
 80122f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f4:	4770      	bx	lr

080122f6 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80122f6:	b480      	push	{r7}
 80122f8:	b083      	sub	sp, #12
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
 80122fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	683a      	ldr	r2, [r7, #0]
 8012304:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8012306:	bf00      	nop
 8012308:	370c      	adds	r7, #12
 801230a:	46bd      	mov	sp, r7
 801230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012310:	4770      	bx	lr

08012312 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 8012312:	b480      	push	{r7}
 8012314:	b083      	sub	sp, #12
 8012316:	af00      	add	r7, sp, #0
 8012318:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 801231e:	4618      	mov	r0, r3
 8012320:	370c      	adds	r7, #12
 8012322:	46bd      	mov	sp, r7
 8012324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012328:	4770      	bx	lr

0801232a <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 801232a:	b480      	push	{r7}
 801232c:	b083      	sub	sp, #12
 801232e:	af00      	add	r7, sp, #0
 8012330:	6078      	str	r0, [r7, #4]
 8012332:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	683a      	ldr	r2, [r7, #0]
 8012338:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 801233a:	bf00      	nop
 801233c:	370c      	adds	r7, #12
 801233e:	46bd      	mov	sp, r7
 8012340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012344:	4770      	bx	lr
	...

08012348 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PULSE_ON_COMPARE   (for channel 3 or channel 4 only)
  *         @arg @ref LL_TIM_OCMODE_DIRECTION_OUTPUT   (for channel 3 or channel 4 only)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8012348:	b480      	push	{r7}
 801234a:	b087      	sub	sp, #28
 801234c:	af00      	add	r7, sp, #0
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	2b01      	cmp	r3, #1
 8012358:	d02e      	beq.n	80123b8 <LL_TIM_OC_SetMode+0x70>
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	2b04      	cmp	r3, #4
 801235e:	d029      	beq.n	80123b4 <LL_TIM_OC_SetMode+0x6c>
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	2b10      	cmp	r3, #16
 8012364:	d024      	beq.n	80123b0 <LL_TIM_OC_SetMode+0x68>
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	2b40      	cmp	r3, #64	@ 0x40
 801236a:	d01f      	beq.n	80123ac <LL_TIM_OC_SetMode+0x64>
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012372:	d019      	beq.n	80123a8 <LL_TIM_OC_SetMode+0x60>
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801237a:	d013      	beq.n	80123a4 <LL_TIM_OC_SetMode+0x5c>
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012382:	d00d      	beq.n	80123a0 <LL_TIM_OC_SetMode+0x58>
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801238a:	d007      	beq.n	801239c <LL_TIM_OC_SetMode+0x54>
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012392:	d101      	bne.n	8012398 <LL_TIM_OC_SetMode+0x50>
 8012394:	2308      	movs	r3, #8
 8012396:	e010      	b.n	80123ba <LL_TIM_OC_SetMode+0x72>
 8012398:	2309      	movs	r3, #9
 801239a:	e00e      	b.n	80123ba <LL_TIM_OC_SetMode+0x72>
 801239c:	2307      	movs	r3, #7
 801239e:	e00c      	b.n	80123ba <LL_TIM_OC_SetMode+0x72>
 80123a0:	2306      	movs	r3, #6
 80123a2:	e00a      	b.n	80123ba <LL_TIM_OC_SetMode+0x72>
 80123a4:	2305      	movs	r3, #5
 80123a6:	e008      	b.n	80123ba <LL_TIM_OC_SetMode+0x72>
 80123a8:	2304      	movs	r3, #4
 80123aa:	e006      	b.n	80123ba <LL_TIM_OC_SetMode+0x72>
 80123ac:	2303      	movs	r3, #3
 80123ae:	e004      	b.n	80123ba <LL_TIM_OC_SetMode+0x72>
 80123b0:	2302      	movs	r3, #2
 80123b2:	e002      	b.n	80123ba <LL_TIM_OC_SetMode+0x72>
 80123b4:	2301      	movs	r3, #1
 80123b6:	e000      	b.n	80123ba <LL_TIM_OC_SetMode+0x72>
 80123b8:	2300      	movs	r3, #0
 80123ba:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	3318      	adds	r3, #24
 80123c0:	4619      	mov	r1, r3
 80123c2:	7dfb      	ldrb	r3, [r7, #23]
 80123c4:	4a0e      	ldr	r2, [pc, #56]	@ (8012400 <LL_TIM_OC_SetMode+0xb8>)
 80123c6:	5cd3      	ldrb	r3, [r2, r3]
 80123c8:	440b      	add	r3, r1
 80123ca:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	681a      	ldr	r2, [r3, #0]
 80123d0:	7dfb      	ldrb	r3, [r7, #23]
 80123d2:	490c      	ldr	r1, [pc, #48]	@ (8012404 <LL_TIM_OC_SetMode+0xbc>)
 80123d4:	5ccb      	ldrb	r3, [r1, r3]
 80123d6:	4619      	mov	r1, r3
 80123d8:	4b0b      	ldr	r3, [pc, #44]	@ (8012408 <LL_TIM_OC_SetMode+0xc0>)
 80123da:	408b      	lsls	r3, r1
 80123dc:	43db      	mvns	r3, r3
 80123de:	401a      	ands	r2, r3
 80123e0:	7dfb      	ldrb	r3, [r7, #23]
 80123e2:	4908      	ldr	r1, [pc, #32]	@ (8012404 <LL_TIM_OC_SetMode+0xbc>)
 80123e4:	5ccb      	ldrb	r3, [r1, r3]
 80123e6:	4619      	mov	r1, r3
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	408b      	lsls	r3, r1
 80123ec:	431a      	orrs	r2, r3
 80123ee:	693b      	ldr	r3, [r7, #16]
 80123f0:	601a      	str	r2, [r3, #0]
}
 80123f2:	bf00      	nop
 80123f4:	371c      	adds	r7, #28
 80123f6:	46bd      	mov	sp, r7
 80123f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fc:	4770      	bx	lr
 80123fe:	bf00      	nop
 8012400:	0801c320 	.word	0x0801c320
 8012404:	0801c32c 	.word	0x0801c32c
 8012408:	00010073 	.word	0x00010073

0801240c <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 801240c:	b480      	push	{r7}
 801240e:	b087      	sub	sp, #28
 8012410:	af00      	add	r7, sp, #0
 8012412:	60f8      	str	r0, [r7, #12]
 8012414:	60b9      	str	r1, [r7, #8]
 8012416:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	2b01      	cmp	r3, #1
 801241c:	d02e      	beq.n	801247c <LL_TIM_OC_SetPolarity+0x70>
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	2b04      	cmp	r3, #4
 8012422:	d029      	beq.n	8012478 <LL_TIM_OC_SetPolarity+0x6c>
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	2b10      	cmp	r3, #16
 8012428:	d024      	beq.n	8012474 <LL_TIM_OC_SetPolarity+0x68>
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	2b40      	cmp	r3, #64	@ 0x40
 801242e:	d01f      	beq.n	8012470 <LL_TIM_OC_SetPolarity+0x64>
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012436:	d019      	beq.n	801246c <LL_TIM_OC_SetPolarity+0x60>
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801243e:	d013      	beq.n	8012468 <LL_TIM_OC_SetPolarity+0x5c>
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012446:	d00d      	beq.n	8012464 <LL_TIM_OC_SetPolarity+0x58>
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801244e:	d007      	beq.n	8012460 <LL_TIM_OC_SetPolarity+0x54>
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012456:	d101      	bne.n	801245c <LL_TIM_OC_SetPolarity+0x50>
 8012458:	2308      	movs	r3, #8
 801245a:	e010      	b.n	801247e <LL_TIM_OC_SetPolarity+0x72>
 801245c:	2309      	movs	r3, #9
 801245e:	e00e      	b.n	801247e <LL_TIM_OC_SetPolarity+0x72>
 8012460:	2307      	movs	r3, #7
 8012462:	e00c      	b.n	801247e <LL_TIM_OC_SetPolarity+0x72>
 8012464:	2306      	movs	r3, #6
 8012466:	e00a      	b.n	801247e <LL_TIM_OC_SetPolarity+0x72>
 8012468:	2305      	movs	r3, #5
 801246a:	e008      	b.n	801247e <LL_TIM_OC_SetPolarity+0x72>
 801246c:	2304      	movs	r3, #4
 801246e:	e006      	b.n	801247e <LL_TIM_OC_SetPolarity+0x72>
 8012470:	2303      	movs	r3, #3
 8012472:	e004      	b.n	801247e <LL_TIM_OC_SetPolarity+0x72>
 8012474:	2302      	movs	r3, #2
 8012476:	e002      	b.n	801247e <LL_TIM_OC_SetPolarity+0x72>
 8012478:	2301      	movs	r3, #1
 801247a:	e000      	b.n	801247e <LL_TIM_OC_SetPolarity+0x72>
 801247c:	2300      	movs	r3, #0
 801247e:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	6a1a      	ldr	r2, [r3, #32]
 8012484:	7dfb      	ldrb	r3, [r7, #23]
 8012486:	490b      	ldr	r1, [pc, #44]	@ (80124b4 <LL_TIM_OC_SetPolarity+0xa8>)
 8012488:	5ccb      	ldrb	r3, [r1, r3]
 801248a:	4619      	mov	r1, r3
 801248c:	2302      	movs	r3, #2
 801248e:	408b      	lsls	r3, r1
 8012490:	43db      	mvns	r3, r3
 8012492:	401a      	ands	r2, r3
 8012494:	7dfb      	ldrb	r3, [r7, #23]
 8012496:	4907      	ldr	r1, [pc, #28]	@ (80124b4 <LL_TIM_OC_SetPolarity+0xa8>)
 8012498:	5ccb      	ldrb	r3, [r1, r3]
 801249a:	4619      	mov	r1, r3
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	408b      	lsls	r3, r1
 80124a0:	431a      	orrs	r2, r3
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	621a      	str	r2, [r3, #32]
}
 80124a6:	bf00      	nop
 80124a8:	371c      	adds	r7, #28
 80124aa:	46bd      	mov	sp, r7
 80124ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b0:	4770      	bx	lr
 80124b2:	bf00      	nop
 80124b4:	0801c338 	.word	0x0801c338

080124b8 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80124b8:	b480      	push	{r7}
 80124ba:	b083      	sub	sp, #12
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	683a      	ldr	r2, [r7, #0]
 80124c6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80124c8:	bf00      	nop
 80124ca:	370c      	adds	r7, #12
 80124cc:	46bd      	mov	sp, r7
 80124ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d2:	4770      	bx	lr

080124d4 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80124d4:	b480      	push	{r7}
 80124d6:	b083      	sub	sp, #12
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	683a      	ldr	r2, [r7, #0]
 80124e2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80124e4:	bf00      	nop
 80124e6:	370c      	adds	r7, #12
 80124e8:	46bd      	mov	sp, r7
 80124ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ee:	4770      	bx	lr

080124f0 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80124f0:	b480      	push	{r7}
 80124f2:	b083      	sub	sp, #12
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	683a      	ldr	r2, [r7, #0]
 80124fe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8012500:	bf00      	nop
 8012502:	370c      	adds	r7, #12
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr

0801250c <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 801250c:	b480      	push	{r7}
 801250e:	b083      	sub	sp, #12
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	683a      	ldr	r2, [r7, #0]
 801251a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801251c:	bf00      	nop
 801251e:	370c      	adds	r7, #12
 8012520:	46bd      	mov	sp, r7
 8012522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012526:	4770      	bx	lr

08012528 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8012528:	b480      	push	{r7}
 801252a:	b083      	sub	sp, #12
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f06f 0202 	mvn.w	r2, #2
 8012536:	611a      	str	r2, [r3, #16]
}
 8012538:	bf00      	nop
 801253a:	370c      	adds	r7, #12
 801253c:	46bd      	mov	sp, r7
 801253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012542:	4770      	bx	lr

08012544 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 8012544:	b480      	push	{r7}
 8012546:	b083      	sub	sp, #12
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	691b      	ldr	r3, [r3, #16]
 8012550:	f003 0302 	and.w	r3, r3, #2
 8012554:	2b02      	cmp	r3, #2
 8012556:	d101      	bne.n	801255c <LL_TIM_IsActiveFlag_CC1+0x18>
 8012558:	2301      	movs	r3, #1
 801255a:	e000      	b.n	801255e <LL_TIM_IsActiveFlag_CC1+0x1a>
 801255c:	2300      	movs	r3, #0
}
 801255e:	4618      	mov	r0, r3
 8012560:	370c      	adds	r7, #12
 8012562:	46bd      	mov	sp, r7
 8012564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012568:	4770      	bx	lr

0801256a <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 801256a:	b480      	push	{r7}
 801256c:	b083      	sub	sp, #12
 801256e:	af00      	add	r7, sp, #0
 8012570:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f06f 0204 	mvn.w	r2, #4
 8012578:	611a      	str	r2, [r3, #16]
}
 801257a:	bf00      	nop
 801257c:	370c      	adds	r7, #12
 801257e:	46bd      	mov	sp, r7
 8012580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012584:	4770      	bx	lr

08012586 <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 8012586:	b480      	push	{r7}
 8012588:	b083      	sub	sp, #12
 801258a:	af00      	add	r7, sp, #0
 801258c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	691b      	ldr	r3, [r3, #16]
 8012592:	f003 0304 	and.w	r3, r3, #4
 8012596:	2b04      	cmp	r3, #4
 8012598:	d101      	bne.n	801259e <LL_TIM_IsActiveFlag_CC2+0x18>
 801259a:	2301      	movs	r3, #1
 801259c:	e000      	b.n	80125a0 <LL_TIM_IsActiveFlag_CC2+0x1a>
 801259e:	2300      	movs	r3, #0
}
 80125a0:	4618      	mov	r0, r3
 80125a2:	370c      	adds	r7, #12
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr

080125ac <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b083      	sub	sp, #12
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f06f 0208 	mvn.w	r2, #8
 80125ba:	611a      	str	r2, [r3, #16]
}
 80125bc:	bf00      	nop
 80125be:	370c      	adds	r7, #12
 80125c0:	46bd      	mov	sp, r7
 80125c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c6:	4770      	bx	lr

080125c8 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 80125c8:	b480      	push	{r7}
 80125ca:	b083      	sub	sp, #12
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	691b      	ldr	r3, [r3, #16]
 80125d4:	f003 0308 	and.w	r3, r3, #8
 80125d8:	2b08      	cmp	r3, #8
 80125da:	d101      	bne.n	80125e0 <LL_TIM_IsActiveFlag_CC3+0x18>
 80125dc:	2301      	movs	r3, #1
 80125de:	e000      	b.n	80125e2 <LL_TIM_IsActiveFlag_CC3+0x1a>
 80125e0:	2300      	movs	r3, #0
}
 80125e2:	4618      	mov	r0, r3
 80125e4:	370c      	adds	r7, #12
 80125e6:	46bd      	mov	sp, r7
 80125e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ec:	4770      	bx	lr

080125ee <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 80125ee:	b480      	push	{r7}
 80125f0:	b083      	sub	sp, #12
 80125f2:	af00      	add	r7, sp, #0
 80125f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	f06f 0210 	mvn.w	r2, #16
 80125fc:	611a      	str	r2, [r3, #16]
}
 80125fe:	bf00      	nop
 8012600:	370c      	adds	r7, #12
 8012602:	46bd      	mov	sp, r7
 8012604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012608:	4770      	bx	lr

0801260a <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 801260a:	b480      	push	{r7}
 801260c:	b083      	sub	sp, #12
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	691b      	ldr	r3, [r3, #16]
 8012616:	f003 0310 	and.w	r3, r3, #16
 801261a:	2b10      	cmp	r3, #16
 801261c:	d101      	bne.n	8012622 <LL_TIM_IsActiveFlag_CC4+0x18>
 801261e:	2301      	movs	r3, #1
 8012620:	e000      	b.n	8012624 <LL_TIM_IsActiveFlag_CC4+0x1a>
 8012622:	2300      	movs	r3, #0
}
 8012624:	4618      	mov	r0, r3
 8012626:	370c      	adds	r7, #12
 8012628:	46bd      	mov	sp, r7
 801262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262e:	4770      	bx	lr

08012630 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8012630:	b598      	push	{r3, r4, r7, lr}
 8012632:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8012634:	4b3d      	ldr	r3, [pc, #244]	@ (801272c <USBPD_TIM_Init+0xfc>)
 8012636:	f993 3000 	ldrsb.w	r3, [r3]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d16a      	bne.n	8012714 <USBPD_TIM_Init+0xe4>
  {
    TIMX_CLK_ENABLE;
 801263e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8012642:	f7ff fe09 	bl	8012258 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 8012646:	2100      	movs	r1, #0
 8012648:	4839      	ldr	r0, [pc, #228]	@ (8012730 <USBPD_TIM_Init+0x100>)
 801264a:	f7ff fe41 	bl	80122d0 <LL_TIM_SetCounterMode>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(TIMX_CLK_FREQ, LL_TIM_GetPrescaler(TIMX), 100u));
#else
    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 801264e:	4b39      	ldr	r3, [pc, #228]	@ (8012734 <USBPD_TIM_Init+0x104>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	4a39      	ldr	r2, [pc, #228]	@ (8012738 <USBPD_TIM_Init+0x108>)
 8012654:	4293      	cmp	r3, r2
 8012656:	d90b      	bls.n	8012670 <USBPD_TIM_Init+0x40>
 8012658:	4b36      	ldr	r3, [pc, #216]	@ (8012734 <USBPD_TIM_Init+0x104>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	f503 23f4 	add.w	r3, r3, #499712	@ 0x7a000
 8012660:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012664:	4a35      	ldr	r2, [pc, #212]	@ (801273c <USBPD_TIM_Init+0x10c>)
 8012666:	fba2 2303 	umull	r2, r3, r2, r3
 801266a:	0c9b      	lsrs	r3, r3, #18
 801266c:	3b01      	subs	r3, #1
 801266e:	e000      	b.n	8012672 <USBPD_TIM_Init+0x42>
 8012670:	2300      	movs	r3, #0
 8012672:	4619      	mov	r1, r3
 8012674:	482e      	ldr	r0, [pc, #184]	@ (8012730 <USBPD_TIM_Init+0x100>)
 8012676:	f7ff fe3e 	bl	80122f6 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 801267a:	4b2e      	ldr	r3, [pc, #184]	@ (8012734 <USBPD_TIM_Init+0x104>)
 801267c:	681c      	ldr	r4, [r3, #0]
 801267e:	482c      	ldr	r0, [pc, #176]	@ (8012730 <USBPD_TIM_Init+0x100>)
 8012680:	f7ff fe47 	bl	8012312 <LL_TIM_GetPrescaler>
 8012684:	4603      	mov	r3, r0
 8012686:	3301      	adds	r3, #1
 8012688:	fbb4 f3f3 	udiv	r3, r4, r3
 801268c:	2b63      	cmp	r3, #99	@ 0x63
 801268e:	d90d      	bls.n	80126ac <USBPD_TIM_Init+0x7c>
 8012690:	4b28      	ldr	r3, [pc, #160]	@ (8012734 <USBPD_TIM_Init+0x104>)
 8012692:	681c      	ldr	r4, [r3, #0]
 8012694:	4826      	ldr	r0, [pc, #152]	@ (8012730 <USBPD_TIM_Init+0x100>)
 8012696:	f7ff fe3c 	bl	8012312 <LL_TIM_GetPrescaler>
 801269a:	4603      	mov	r3, r0
 801269c:	3301      	adds	r3, #1
 801269e:	2264      	movs	r2, #100	@ 0x64
 80126a0:	fb02 f303 	mul.w	r3, r2, r3
 80126a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80126a8:	3b01      	subs	r3, #1
 80126aa:	e000      	b.n	80126ae <USBPD_TIM_Init+0x7e>
 80126ac:	2300      	movs	r3, #0
 80126ae:	4619      	mov	r1, r3
 80126b0:	481f      	ldr	r0, [pc, #124]	@ (8012730 <USBPD_TIM_Init+0x100>)
 80126b2:	f7ff fe3a 	bl	801232a <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 80126b6:	2230      	movs	r2, #48	@ 0x30
 80126b8:	2101      	movs	r1, #1
 80126ba:	481d      	ldr	r0, [pc, #116]	@ (8012730 <USBPD_TIM_Init+0x100>)
 80126bc:	f7ff fe44 	bl	8012348 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 80126c0:	2230      	movs	r2, #48	@ 0x30
 80126c2:	2110      	movs	r1, #16
 80126c4:	481a      	ldr	r0, [pc, #104]	@ (8012730 <USBPD_TIM_Init+0x100>)
 80126c6:	f7ff fe3f 	bl	8012348 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 80126ca:	2230      	movs	r2, #48	@ 0x30
 80126cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80126d0:	4817      	ldr	r0, [pc, #92]	@ (8012730 <USBPD_TIM_Init+0x100>)
 80126d2:	f7ff fe39 	bl	8012348 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 80126d6:	2230      	movs	r2, #48	@ 0x30
 80126d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80126dc:	4814      	ldr	r0, [pc, #80]	@ (8012730 <USBPD_TIM_Init+0x100>)
 80126de:	f7ff fe33 	bl	8012348 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 80126e2:	2200      	movs	r2, #0
 80126e4:	2101      	movs	r1, #1
 80126e6:	4812      	ldr	r0, [pc, #72]	@ (8012730 <USBPD_TIM_Init+0x100>)
 80126e8:	f7ff fe90 	bl	801240c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 80126ec:	2200      	movs	r2, #0
 80126ee:	2110      	movs	r1, #16
 80126f0:	480f      	ldr	r0, [pc, #60]	@ (8012730 <USBPD_TIM_Init+0x100>)
 80126f2:	f7ff fe8b 	bl	801240c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 80126f6:	2200      	movs	r2, #0
 80126f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80126fc:	480c      	ldr	r0, [pc, #48]	@ (8012730 <USBPD_TIM_Init+0x100>)
 80126fe:	f7ff fe85 	bl	801240c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 8012702:	2200      	movs	r2, #0
 8012704:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8012708:	4809      	ldr	r0, [pc, #36]	@ (8012730 <USBPD_TIM_Init+0x100>)
 801270a:	f7ff fe7f 	bl	801240c <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 801270e:	4808      	ldr	r0, [pc, #32]	@ (8012730 <USBPD_TIM_Init+0x100>)
 8012710:	f7ff fdce 	bl	80122b0 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 8012714:	4b05      	ldr	r3, [pc, #20]	@ (801272c <USBPD_TIM_Init+0xfc>)
 8012716:	f993 3000 	ldrsb.w	r3, [r3]
 801271a:	b2db      	uxtb	r3, r3
 801271c:	3301      	adds	r3, #1
 801271e:	b2db      	uxtb	r3, r3
 8012720:	b25a      	sxtb	r2, r3
 8012722:	4b02      	ldr	r3, [pc, #8]	@ (801272c <USBPD_TIM_Init+0xfc>)
 8012724:	701a      	strb	r2, [r3, #0]
}
 8012726:	bf00      	nop
 8012728:	bd98      	pop	{r3, r4, r7, pc}
 801272a:	bf00      	nop
 801272c:	20003708 	.word	0x20003708
 8012730:	40012c00 	.word	0x40012c00
 8012734:	20000004 	.word	0x20000004
 8012738:	000f423f 	.word	0x000f423f
 801273c:	431bde83 	.word	0x431bde83

08012740 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8012744:	4b09      	ldr	r3, [pc, #36]	@ (801276c <USBPD_TIM_DeInit+0x2c>)
 8012746:	f993 3000 	ldrsb.w	r3, [r3]
 801274a:	b2db      	uxtb	r3, r3
 801274c:	3b01      	subs	r3, #1
 801274e:	b2db      	uxtb	r3, r3
 8012750:	b25a      	sxtb	r2, r3
 8012752:	4b06      	ldr	r3, [pc, #24]	@ (801276c <USBPD_TIM_DeInit+0x2c>)
 8012754:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 8012756:	4b05      	ldr	r3, [pc, #20]	@ (801276c <USBPD_TIM_DeInit+0x2c>)
 8012758:	f993 3000 	ldrsb.w	r3, [r3]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d103      	bne.n	8012768 <USBPD_TIM_DeInit+0x28>
  {
    TIMX_CLK_DISABLE;
 8012760:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8012764:	f7ff fd90 	bl	8012288 <LL_APB2_GRP1_DisableClock>
  }
}
 8012768:	bf00      	nop
 801276a:	bd80      	pop	{r7, pc}
 801276c:	20003708 	.word	0x20003708

08012770 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	4603      	mov	r3, r0
 8012778:	6039      	str	r1, [r7, #0]
 801277a:	71fb      	strb	r3, [r7, #7]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 801277c:	79fb      	ldrb	r3, [r7, #7]
 801277e:	2b03      	cmp	r3, #3
 8012780:	d85e      	bhi.n	8012840 <USBPD_TIM_Start+0xd0>
 8012782:	a201      	add	r2, pc, #4	@ (adr r2, 8012788 <USBPD_TIM_Start+0x18>)
 8012784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012788:	08012799 	.word	0x08012799
 801278c:	080127c3 	.word	0x080127c3
 8012790:	080127ed 	.word	0x080127ed
 8012794:	08012817 	.word	0x08012817
  {
    case TIM_PORT0_CRC:
      TIMX_CHANNEL1_SETEVENT;
 8012798:	4b2c      	ldr	r3, [pc, #176]	@ (801284c <USBPD_TIM_Start+0xdc>)
 801279a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	441a      	add	r2, r3
 80127a0:	4b2b      	ldr	r3, [pc, #172]	@ (8012850 <USBPD_TIM_Start+0xe0>)
 80127a2:	fba3 1302 	umull	r1, r3, r3, r2
 80127a6:	0b5b      	lsrs	r3, r3, #13
 80127a8:	f242 7110 	movw	r1, #10000	@ 0x2710
 80127ac:	fb01 f303 	mul.w	r3, r1, r3
 80127b0:	1ad3      	subs	r3, r2, r3
 80127b2:	4619      	mov	r1, r3
 80127b4:	4825      	ldr	r0, [pc, #148]	@ (801284c <USBPD_TIM_Start+0xdc>)
 80127b6:	f7ff fe7f 	bl	80124b8 <LL_TIM_OC_SetCompareCH1>
 80127ba:	4824      	ldr	r0, [pc, #144]	@ (801284c <USBPD_TIM_Start+0xdc>)
 80127bc:	f7ff feb4 	bl	8012528 <LL_TIM_ClearFlag_CC1>
      break;
 80127c0:	e03f      	b.n	8012842 <USBPD_TIM_Start+0xd2>
    case TIM_PORT0_RETRY:
      TIMX_CHANNEL2_SETEVENT;
 80127c2:	4b22      	ldr	r3, [pc, #136]	@ (801284c <USBPD_TIM_Start+0xdc>)
 80127c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	441a      	add	r2, r3
 80127ca:	4b21      	ldr	r3, [pc, #132]	@ (8012850 <USBPD_TIM_Start+0xe0>)
 80127cc:	fba3 1302 	umull	r1, r3, r3, r2
 80127d0:	0b5b      	lsrs	r3, r3, #13
 80127d2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80127d6:	fb01 f303 	mul.w	r3, r1, r3
 80127da:	1ad3      	subs	r3, r2, r3
 80127dc:	4619      	mov	r1, r3
 80127de:	481b      	ldr	r0, [pc, #108]	@ (801284c <USBPD_TIM_Start+0xdc>)
 80127e0:	f7ff fe78 	bl	80124d4 <LL_TIM_OC_SetCompareCH2>
 80127e4:	4819      	ldr	r0, [pc, #100]	@ (801284c <USBPD_TIM_Start+0xdc>)
 80127e6:	f7ff fec0 	bl	801256a <LL_TIM_ClearFlag_CC2>
      break;
 80127ea:	e02a      	b.n	8012842 <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_CRC:
      TIMX_CHANNEL3_SETEVENT;
 80127ec:	4b17      	ldr	r3, [pc, #92]	@ (801284c <USBPD_TIM_Start+0xdc>)
 80127ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	441a      	add	r2, r3
 80127f4:	4b16      	ldr	r3, [pc, #88]	@ (8012850 <USBPD_TIM_Start+0xe0>)
 80127f6:	fba3 1302 	umull	r1, r3, r3, r2
 80127fa:	0b5b      	lsrs	r3, r3, #13
 80127fc:	f242 7110 	movw	r1, #10000	@ 0x2710
 8012800:	fb01 f303 	mul.w	r3, r1, r3
 8012804:	1ad3      	subs	r3, r2, r3
 8012806:	4619      	mov	r1, r3
 8012808:	4810      	ldr	r0, [pc, #64]	@ (801284c <USBPD_TIM_Start+0xdc>)
 801280a:	f7ff fe71 	bl	80124f0 <LL_TIM_OC_SetCompareCH3>
 801280e:	480f      	ldr	r0, [pc, #60]	@ (801284c <USBPD_TIM_Start+0xdc>)
 8012810:	f7ff fecc 	bl	80125ac <LL_TIM_ClearFlag_CC3>
      break;
 8012814:	e015      	b.n	8012842 <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
 8012816:	4b0d      	ldr	r3, [pc, #52]	@ (801284c <USBPD_TIM_Start+0xdc>)
 8012818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	441a      	add	r2, r3
 801281e:	4b0c      	ldr	r3, [pc, #48]	@ (8012850 <USBPD_TIM_Start+0xe0>)
 8012820:	fba3 1302 	umull	r1, r3, r3, r2
 8012824:	0b5b      	lsrs	r3, r3, #13
 8012826:	f242 7110 	movw	r1, #10000	@ 0x2710
 801282a:	fb01 f303 	mul.w	r3, r1, r3
 801282e:	1ad3      	subs	r3, r2, r3
 8012830:	4619      	mov	r1, r3
 8012832:	4806      	ldr	r0, [pc, #24]	@ (801284c <USBPD_TIM_Start+0xdc>)
 8012834:	f7ff fe6a 	bl	801250c <LL_TIM_OC_SetCompareCH4>
 8012838:	4804      	ldr	r0, [pc, #16]	@ (801284c <USBPD_TIM_Start+0xdc>)
 801283a:	f7ff fed8 	bl	80125ee <LL_TIM_ClearFlag_CC4>
      break;
 801283e:	e000      	b.n	8012842 <USBPD_TIM_Start+0xd2>
    default:
      break;
 8012840:	bf00      	nop
  }
}
 8012842:	bf00      	nop
 8012844:	3708      	adds	r7, #8
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}
 801284a:	bf00      	nop
 801284c:	40012c00 	.word	0x40012c00
 8012850:	d1b71759 	.word	0xd1b71759

08012854 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
 801285a:	4603      	mov	r3, r0
 801285c:	71fb      	strb	r3, [r7, #7]
  uint32_t _expired = 1u;
 801285e:	2301      	movs	r3, #1
 8012860:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8012862:	79fb      	ldrb	r3, [r7, #7]
 8012864:	2b03      	cmp	r3, #3
 8012866:	d81f      	bhi.n	80128a8 <USBPD_TIM_IsExpired+0x54>
 8012868:	a201      	add	r2, pc, #4	@ (adr r2, 8012870 <USBPD_TIM_IsExpired+0x1c>)
 801286a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801286e:	bf00      	nop
 8012870:	08012881 	.word	0x08012881
 8012874:	0801288b 	.word	0x0801288b
 8012878:	08012895 	.word	0x08012895
 801287c:	0801289f 	.word	0x0801289f
  {
    case TIM_PORT0_CRC:
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8012880:	480c      	ldr	r0, [pc, #48]	@ (80128b4 <USBPD_TIM_IsExpired+0x60>)
 8012882:	f7ff fe5f 	bl	8012544 <LL_TIM_IsActiveFlag_CC1>
 8012886:	60f8      	str	r0, [r7, #12]
      break;
 8012888:	e00f      	b.n	80128aa <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT0_RETRY:
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 801288a:	480a      	ldr	r0, [pc, #40]	@ (80128b4 <USBPD_TIM_IsExpired+0x60>)
 801288c:	f7ff fe7b 	bl	8012586 <LL_TIM_IsActiveFlag_CC2>
 8012890:	60f8      	str	r0, [r7, #12]
      break;
 8012892:	e00a      	b.n	80128aa <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_CRC:
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 8012894:	4807      	ldr	r0, [pc, #28]	@ (80128b4 <USBPD_TIM_IsExpired+0x60>)
 8012896:	f7ff fe97 	bl	80125c8 <LL_TIM_IsActiveFlag_CC3>
 801289a:	60f8      	str	r0, [r7, #12]
      break;
 801289c:	e005      	b.n	80128aa <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 801289e:	4805      	ldr	r0, [pc, #20]	@ (80128b4 <USBPD_TIM_IsExpired+0x60>)
 80128a0:	f7ff feb3 	bl	801260a <LL_TIM_IsActiveFlag_CC4>
 80128a4:	60f8      	str	r0, [r7, #12]
      break;
 80128a6:	e000      	b.n	80128aa <USBPD_TIM_IsExpired+0x56>
    default:
      break;
 80128a8:	bf00      	nop
  }
  return _expired;
 80128aa:	68fb      	ldr	r3, [r7, #12]
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3710      	adds	r7, #16
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}
 80128b4:	40012c00 	.word	0x40012c00

080128b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80128b8:	b480      	push	{r7}
 80128ba:	b085      	sub	sp, #20
 80128bc:	af00      	add	r7, sp, #0
 80128be:	4603      	mov	r3, r0
 80128c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80128c2:	2300      	movs	r3, #0
 80128c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80128c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128ca:	2b84      	cmp	r3, #132	@ 0x84
 80128cc:	d005      	beq.n	80128da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80128ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	4413      	add	r3, r2
 80128d6:	3303      	adds	r3, #3
 80128d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80128da:	68fb      	ldr	r3, [r7, #12]
}
 80128dc:	4618      	mov	r0, r3
 80128de:	3714      	adds	r7, #20
 80128e0:	46bd      	mov	sp, r7
 80128e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e6:	4770      	bx	lr

080128e8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80128e8:	b480      	push	{r7}
 80128ea:	b083      	sub	sp, #12
 80128ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80128ee:	f3ef 8305 	mrs	r3, IPSR
 80128f2:	607b      	str	r3, [r7, #4]
  return(result);
 80128f4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	bf14      	ite	ne
 80128fa:	2301      	movne	r3, #1
 80128fc:	2300      	moveq	r3, #0
 80128fe:	b2db      	uxtb	r3, r3
}
 8012900:	4618      	mov	r0, r3
 8012902:	370c      	adds	r7, #12
 8012904:	46bd      	mov	sp, r7
 8012906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290a:	4770      	bx	lr

0801290c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012910:	f001 fadc 	bl	8013ecc <vTaskStartScheduler>
  
  return osOK;
 8012914:	2300      	movs	r3, #0
}
 8012916:	4618      	mov	r0, r3
 8012918:	bd80      	pop	{r7, pc}

0801291a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801291a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801291c:	b087      	sub	sp, #28
 801291e:	af02      	add	r7, sp, #8
 8012920:	6078      	str	r0, [r7, #4]
 8012922:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	685c      	ldr	r4, [r3, #4]
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012930:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012938:	4618      	mov	r0, r3
 801293a:	f7ff ffbd 	bl	80128b8 <makeFreeRtosPriority>
 801293e:	4602      	mov	r2, r0
 8012940:	f107 030c 	add.w	r3, r7, #12
 8012944:	9301      	str	r3, [sp, #4]
 8012946:	9200      	str	r2, [sp, #0]
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	4632      	mov	r2, r6
 801294c:	4629      	mov	r1, r5
 801294e:	4620      	mov	r0, r4
 8012950:	f001 f834 	bl	80139bc <xTaskCreate>
 8012954:	4603      	mov	r3, r0
 8012956:	2b01      	cmp	r3, #1
 8012958:	d001      	beq.n	801295e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 801295a:	2300      	movs	r3, #0
 801295c:	e000      	b.n	8012960 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 801295e:	68fb      	ldr	r3, [r7, #12]
}
 8012960:	4618      	mov	r0, r3
 8012962:	3714      	adds	r7, #20
 8012964:	46bd      	mov	sp, r7
 8012966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012968 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b082      	sub	sp, #8
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f001 f97d 	bl	8013c70 <vTaskDelete>
  return osOK;
 8012976:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8012978:	4618      	mov	r0, r3
 801297a:	3708      	adds	r7, #8
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}

08012980 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d001      	beq.n	8012996 <osDelay+0x16>
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	e000      	b.n	8012998 <osDelay+0x18>
 8012996:	2301      	movs	r3, #1
 8012998:	4618      	mov	r0, r3
 801299a:	f001 f9f9 	bl	8013d90 <vTaskDelay>
  
  return osOK;
 801299e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3710      	adds	r7, #16
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}

080129a8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6818      	ldr	r0, [r3, #0]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	2200      	movs	r2, #0
 80129bc:	4619      	mov	r1, r3
 80129be:	f000 f9d7 	bl	8012d70 <xQueueGenericCreate>
 80129c2:	4603      	mov	r3, r0
#endif
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	3708      	adds	r7, #8
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}

080129cc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b086      	sub	sp, #24
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	60f8      	str	r0, [r7, #12]
 80129d4:	60b9      	str	r1, [r7, #8]
 80129d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80129d8:	2300      	movs	r3, #0
 80129da:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d101      	bne.n	80129ea <osMessagePut+0x1e>
    ticks = 1;
 80129e6:	2301      	movs	r3, #1
 80129e8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80129ea:	f7ff ff7d 	bl	80128e8 <inHandlerMode>
 80129ee:	4603      	mov	r3, r0
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d018      	beq.n	8012a26 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80129f4:	f107 0210 	add.w	r2, r7, #16
 80129f8:	f107 0108 	add.w	r1, r7, #8
 80129fc:	2300      	movs	r3, #0
 80129fe:	68f8      	ldr	r0, [r7, #12]
 8012a00:	f000 fb12 	bl	8013028 <xQueueGenericSendFromISR>
 8012a04:	4603      	mov	r3, r0
 8012a06:	2b01      	cmp	r3, #1
 8012a08:	d001      	beq.n	8012a0e <osMessagePut+0x42>
      return osErrorOS;
 8012a0a:	23ff      	movs	r3, #255	@ 0xff
 8012a0c:	e018      	b.n	8012a40 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d014      	beq.n	8012a3e <osMessagePut+0x72>
 8012a14:	4b0c      	ldr	r3, [pc, #48]	@ (8012a48 <osMessagePut+0x7c>)
 8012a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a1a:	601a      	str	r2, [r3, #0]
 8012a1c:	f3bf 8f4f 	dsb	sy
 8012a20:	f3bf 8f6f 	isb	sy
 8012a24:	e00b      	b.n	8012a3e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012a26:	f107 0108 	add.w	r1, r7, #8
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	697a      	ldr	r2, [r7, #20]
 8012a2e:	68f8      	ldr	r0, [r7, #12]
 8012a30:	f000 f9f8 	bl	8012e24 <xQueueGenericSend>
 8012a34:	4603      	mov	r3, r0
 8012a36:	2b01      	cmp	r3, #1
 8012a38:	d001      	beq.n	8012a3e <osMessagePut+0x72>
      return osErrorOS;
 8012a3a:	23ff      	movs	r3, #255	@ 0xff
 8012a3c:	e000      	b.n	8012a40 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8012a3e:	2300      	movs	r3, #0
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3718      	adds	r7, #24
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}
 8012a48:	e000ed04 	.word	0xe000ed04

08012a4c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012a4c:	b590      	push	{r4, r7, lr}
 8012a4e:	b08b      	sub	sp, #44	@ 0x2c
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	60b9      	str	r1, [r7, #8]
 8012a56:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d10a      	bne.n	8012a7c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8012a66:	2380      	movs	r3, #128	@ 0x80
 8012a68:	617b      	str	r3, [r7, #20]
    return event;
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	461c      	mov	r4, r3
 8012a6e:	f107 0314 	add.w	r3, r7, #20
 8012a72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012a76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012a7a:	e054      	b.n	8012b26 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012a80:	2300      	movs	r3, #0
 8012a82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012a8a:	d103      	bne.n	8012a94 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8012a8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a92:	e009      	b.n	8012aa8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d006      	beq.n	8012aa8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8012a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d101      	bne.n	8012aa8 <osMessageGet+0x5c>
      ticks = 1;
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012aa8:	f7ff ff1e 	bl	80128e8 <inHandlerMode>
 8012aac:	4603      	mov	r3, r0
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d01c      	beq.n	8012aec <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012ab2:	f107 0220 	add.w	r2, r7, #32
 8012ab6:	f107 0314 	add.w	r3, r7, #20
 8012aba:	3304      	adds	r3, #4
 8012abc:	4619      	mov	r1, r3
 8012abe:	68b8      	ldr	r0, [r7, #8]
 8012ac0:	f000 fdd2 	bl	8013668 <xQueueReceiveFromISR>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	2b01      	cmp	r3, #1
 8012ac8:	d102      	bne.n	8012ad0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012aca:	2310      	movs	r3, #16
 8012acc:	617b      	str	r3, [r7, #20]
 8012ace:	e001      	b.n	8012ad4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012ad4:	6a3b      	ldr	r3, [r7, #32]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d01d      	beq.n	8012b16 <osMessageGet+0xca>
 8012ada:	4b15      	ldr	r3, [pc, #84]	@ (8012b30 <osMessageGet+0xe4>)
 8012adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ae0:	601a      	str	r2, [r3, #0]
 8012ae2:	f3bf 8f4f 	dsb	sy
 8012ae6:	f3bf 8f6f 	isb	sy
 8012aea:	e014      	b.n	8012b16 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012aec:	f107 0314 	add.w	r3, r7, #20
 8012af0:	3304      	adds	r3, #4
 8012af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012af4:	4619      	mov	r1, r3
 8012af6:	68b8      	ldr	r0, [r7, #8]
 8012af8:	f000 fbc4 	bl	8013284 <xQueueReceive>
 8012afc:	4603      	mov	r3, r0
 8012afe:	2b01      	cmp	r3, #1
 8012b00:	d102      	bne.n	8012b08 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8012b02:	2310      	movs	r3, #16
 8012b04:	617b      	str	r3, [r7, #20]
 8012b06:	e006      	b.n	8012b16 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d101      	bne.n	8012b12 <osMessageGet+0xc6>
 8012b0e:	2300      	movs	r3, #0
 8012b10:	e000      	b.n	8012b14 <osMessageGet+0xc8>
 8012b12:	2340      	movs	r3, #64	@ 0x40
 8012b14:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	461c      	mov	r4, r3
 8012b1a:	f107 0314 	add.w	r3, r7, #20
 8012b1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012b26:	68f8      	ldr	r0, [r7, #12]
 8012b28:	372c      	adds	r7, #44	@ 0x2c
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd90      	pop	{r4, r7, pc}
 8012b2e:	bf00      	nop
 8012b30:	e000ed04 	.word	0xe000ed04

08012b34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012b34:	b480      	push	{r7}
 8012b36:	b083      	sub	sp, #12
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f103 0208 	add.w	r2, r3, #8
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012b4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f103 0208 	add.w	r2, r3, #8
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f103 0208 	add.w	r2, r3, #8
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2200      	movs	r2, #0
 8012b66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012b68:	bf00      	nop
 8012b6a:	370c      	adds	r7, #12
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b72:	4770      	bx	lr

08012b74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012b74:	b480      	push	{r7}
 8012b76:	b083      	sub	sp, #12
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012b82:	bf00      	nop
 8012b84:	370c      	adds	r7, #12
 8012b86:	46bd      	mov	sp, r7
 8012b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8c:	4770      	bx	lr

08012b8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012b8e:	b480      	push	{r7}
 8012b90:	b085      	sub	sp, #20
 8012b92:	af00      	add	r7, sp, #0
 8012b94:	6078      	str	r0, [r7, #4]
 8012b96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	685b      	ldr	r3, [r3, #4]
 8012b9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	68fa      	ldr	r2, [r7, #12]
 8012ba2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	689a      	ldr	r2, [r3, #8]
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	689b      	ldr	r3, [r3, #8]
 8012bb0:	683a      	ldr	r2, [r7, #0]
 8012bb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	683a      	ldr	r2, [r7, #0]
 8012bb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	687a      	ldr	r2, [r7, #4]
 8012bbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	1c5a      	adds	r2, r3, #1
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	601a      	str	r2, [r3, #0]
}
 8012bca:	bf00      	nop
 8012bcc:	3714      	adds	r7, #20
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd4:	4770      	bx	lr

08012bd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012bd6:	b480      	push	{r7}
 8012bd8:	b085      	sub	sp, #20
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	6078      	str	r0, [r7, #4]
 8012bde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012bec:	d103      	bne.n	8012bf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	691b      	ldr	r3, [r3, #16]
 8012bf2:	60fb      	str	r3, [r7, #12]
 8012bf4:	e00c      	b.n	8012c10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	3308      	adds	r3, #8
 8012bfa:	60fb      	str	r3, [r7, #12]
 8012bfc:	e002      	b.n	8012c04 <vListInsert+0x2e>
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	60fb      	str	r3, [r7, #12]
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	685b      	ldr	r3, [r3, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	68ba      	ldr	r2, [r7, #8]
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d2f6      	bcs.n	8012bfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	685a      	ldr	r2, [r3, #4]
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	683a      	ldr	r2, [r7, #0]
 8012c1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	68fa      	ldr	r2, [r7, #12]
 8012c24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	683a      	ldr	r2, [r7, #0]
 8012c2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	687a      	ldr	r2, [r7, #4]
 8012c30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	1c5a      	adds	r2, r3, #1
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	601a      	str	r2, [r3, #0]
}
 8012c3c:	bf00      	nop
 8012c3e:	3714      	adds	r7, #20
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr

08012c48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b085      	sub	sp, #20
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	691b      	ldr	r3, [r3, #16]
 8012c54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	687a      	ldr	r2, [r7, #4]
 8012c5c:	6892      	ldr	r2, [r2, #8]
 8012c5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	689b      	ldr	r3, [r3, #8]
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	6852      	ldr	r2, [r2, #4]
 8012c68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	687a      	ldr	r2, [r7, #4]
 8012c70:	429a      	cmp	r2, r3
 8012c72:	d103      	bne.n	8012c7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	689a      	ldr	r2, [r3, #8]
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2200      	movs	r2, #0
 8012c80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	1e5a      	subs	r2, r3, #1
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	681b      	ldr	r3, [r3, #0]
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	3714      	adds	r7, #20
 8012c94:	46bd      	mov	sp, r7
 8012c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9a:	4770      	bx	lr

08012c9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b084      	sub	sp, #16
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d10b      	bne.n	8012cc8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cb4:	f383 8811 	msr	BASEPRI, r3
 8012cb8:	f3bf 8f6f 	isb	sy
 8012cbc:	f3bf 8f4f 	dsb	sy
 8012cc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012cc2:	bf00      	nop
 8012cc4:	bf00      	nop
 8012cc6:	e7fd      	b.n	8012cc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012cc8:	f002 f98e 	bl	8014fe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	681a      	ldr	r2, [r3, #0]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012cd4:	68f9      	ldr	r1, [r7, #12]
 8012cd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012cd8:	fb01 f303 	mul.w	r3, r1, r3
 8012cdc:	441a      	add	r2, r3
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	681a      	ldr	r2, [r3, #0]
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	681a      	ldr	r2, [r3, #0]
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012cf8:	3b01      	subs	r3, #1
 8012cfa:	68f9      	ldr	r1, [r7, #12]
 8012cfc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012cfe:	fb01 f303 	mul.w	r3, r1, r3
 8012d02:	441a      	add	r2, r3
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	22ff      	movs	r2, #255	@ 0xff
 8012d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	22ff      	movs	r2, #255	@ 0xff
 8012d14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d114      	bne.n	8012d48 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	691b      	ldr	r3, [r3, #16]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d01a      	beq.n	8012d5c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	3310      	adds	r3, #16
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f001 fb2c 	bl	8014388 <xTaskRemoveFromEventList>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d012      	beq.n	8012d5c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012d36:	4b0d      	ldr	r3, [pc, #52]	@ (8012d6c <xQueueGenericReset+0xd0>)
 8012d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d3c:	601a      	str	r2, [r3, #0]
 8012d3e:	f3bf 8f4f 	dsb	sy
 8012d42:	f3bf 8f6f 	isb	sy
 8012d46:	e009      	b.n	8012d5c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	3310      	adds	r3, #16
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7ff fef1 	bl	8012b34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	3324      	adds	r3, #36	@ 0x24
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7ff feec 	bl	8012b34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012d5c:	f002 f976 	bl	801504c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012d60:	2301      	movs	r3, #1
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3710      	adds	r7, #16
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
 8012d6a:	bf00      	nop
 8012d6c:	e000ed04 	.word	0xe000ed04

08012d70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b08a      	sub	sp, #40	@ 0x28
 8012d74:	af02      	add	r7, sp, #8
 8012d76:	60f8      	str	r0, [r7, #12]
 8012d78:	60b9      	str	r1, [r7, #8]
 8012d7a:	4613      	mov	r3, r2
 8012d7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d10b      	bne.n	8012d9c <xQueueGenericCreate+0x2c>
	__asm volatile
 8012d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d88:	f383 8811 	msr	BASEPRI, r3
 8012d8c:	f3bf 8f6f 	isb	sy
 8012d90:	f3bf 8f4f 	dsb	sy
 8012d94:	613b      	str	r3, [r7, #16]
}
 8012d96:	bf00      	nop
 8012d98:	bf00      	nop
 8012d9a:	e7fd      	b.n	8012d98 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	68ba      	ldr	r2, [r7, #8]
 8012da0:	fb02 f303 	mul.w	r3, r2, r3
 8012da4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012da6:	69fb      	ldr	r3, [r7, #28]
 8012da8:	3350      	adds	r3, #80	@ 0x50
 8012daa:	4618      	mov	r0, r3
 8012dac:	f002 fa3e 	bl	801522c <pvPortMalloc>
 8012db0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012db2:	69bb      	ldr	r3, [r7, #24]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d00d      	beq.n	8012dd4 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012db8:	69bb      	ldr	r3, [r7, #24]
 8012dba:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	3350      	adds	r3, #80	@ 0x50
 8012dc0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012dc2:	79fa      	ldrb	r2, [r7, #7]
 8012dc4:	69bb      	ldr	r3, [r7, #24]
 8012dc6:	9300      	str	r3, [sp, #0]
 8012dc8:	4613      	mov	r3, r2
 8012dca:	697a      	ldr	r2, [r7, #20]
 8012dcc:	68b9      	ldr	r1, [r7, #8]
 8012dce:	68f8      	ldr	r0, [r7, #12]
 8012dd0:	f000 f805 	bl	8012dde <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012dd4:	69bb      	ldr	r3, [r7, #24]
	}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3720      	adds	r7, #32
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}

08012dde <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012dde:	b580      	push	{r7, lr}
 8012de0:	b084      	sub	sp, #16
 8012de2:	af00      	add	r7, sp, #0
 8012de4:	60f8      	str	r0, [r7, #12]
 8012de6:	60b9      	str	r1, [r7, #8]
 8012de8:	607a      	str	r2, [r7, #4]
 8012dea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d103      	bne.n	8012dfa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012df2:	69bb      	ldr	r3, [r7, #24]
 8012df4:	69ba      	ldr	r2, [r7, #24]
 8012df6:	601a      	str	r2, [r3, #0]
 8012df8:	e002      	b.n	8012e00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012dfa:	69bb      	ldr	r3, [r7, #24]
 8012dfc:	687a      	ldr	r2, [r7, #4]
 8012dfe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012e00:	69bb      	ldr	r3, [r7, #24]
 8012e02:	68fa      	ldr	r2, [r7, #12]
 8012e04:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012e06:	69bb      	ldr	r3, [r7, #24]
 8012e08:	68ba      	ldr	r2, [r7, #8]
 8012e0a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012e0c:	2101      	movs	r1, #1
 8012e0e:	69b8      	ldr	r0, [r7, #24]
 8012e10:	f7ff ff44 	bl	8012c9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012e14:	69bb      	ldr	r3, [r7, #24]
 8012e16:	78fa      	ldrb	r2, [r7, #3]
 8012e18:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012e1c:	bf00      	nop
 8012e1e:	3710      	adds	r7, #16
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}

08012e24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b08e      	sub	sp, #56	@ 0x38
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	60f8      	str	r0, [r7, #12]
 8012e2c:	60b9      	str	r1, [r7, #8]
 8012e2e:	607a      	str	r2, [r7, #4]
 8012e30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012e32:	2300      	movs	r3, #0
 8012e34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d10b      	bne.n	8012e58 <xQueueGenericSend+0x34>
	__asm volatile
 8012e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e44:	f383 8811 	msr	BASEPRI, r3
 8012e48:	f3bf 8f6f 	isb	sy
 8012e4c:	f3bf 8f4f 	dsb	sy
 8012e50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012e52:	bf00      	nop
 8012e54:	bf00      	nop
 8012e56:	e7fd      	b.n	8012e54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d103      	bne.n	8012e66 <xQueueGenericSend+0x42>
 8012e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d101      	bne.n	8012e6a <xQueueGenericSend+0x46>
 8012e66:	2301      	movs	r3, #1
 8012e68:	e000      	b.n	8012e6c <xQueueGenericSend+0x48>
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d10b      	bne.n	8012e88 <xQueueGenericSend+0x64>
	__asm volatile
 8012e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e74:	f383 8811 	msr	BASEPRI, r3
 8012e78:	f3bf 8f6f 	isb	sy
 8012e7c:	f3bf 8f4f 	dsb	sy
 8012e80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012e82:	bf00      	nop
 8012e84:	bf00      	nop
 8012e86:	e7fd      	b.n	8012e84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	2b02      	cmp	r3, #2
 8012e8c:	d103      	bne.n	8012e96 <xQueueGenericSend+0x72>
 8012e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d101      	bne.n	8012e9a <xQueueGenericSend+0x76>
 8012e96:	2301      	movs	r3, #1
 8012e98:	e000      	b.n	8012e9c <xQueueGenericSend+0x78>
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d10b      	bne.n	8012eb8 <xQueueGenericSend+0x94>
	__asm volatile
 8012ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ea4:	f383 8811 	msr	BASEPRI, r3
 8012ea8:	f3bf 8f6f 	isb	sy
 8012eac:	f3bf 8f4f 	dsb	sy
 8012eb0:	623b      	str	r3, [r7, #32]
}
 8012eb2:	bf00      	nop
 8012eb4:	bf00      	nop
 8012eb6:	e7fd      	b.n	8012eb4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012eb8:	f001 fc0c 	bl	80146d4 <xTaskGetSchedulerState>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d102      	bne.n	8012ec8 <xQueueGenericSend+0xa4>
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d101      	bne.n	8012ecc <xQueueGenericSend+0xa8>
 8012ec8:	2301      	movs	r3, #1
 8012eca:	e000      	b.n	8012ece <xQueueGenericSend+0xaa>
 8012ecc:	2300      	movs	r3, #0
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d10b      	bne.n	8012eea <xQueueGenericSend+0xc6>
	__asm volatile
 8012ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ed6:	f383 8811 	msr	BASEPRI, r3
 8012eda:	f3bf 8f6f 	isb	sy
 8012ede:	f3bf 8f4f 	dsb	sy
 8012ee2:	61fb      	str	r3, [r7, #28]
}
 8012ee4:	bf00      	nop
 8012ee6:	bf00      	nop
 8012ee8:	e7fd      	b.n	8012ee6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012eea:	f002 f87d 	bl	8014fe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d302      	bcc.n	8012f00 <xQueueGenericSend+0xdc>
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	2b02      	cmp	r3, #2
 8012efe:	d129      	bne.n	8012f54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012f00:	683a      	ldr	r2, [r7, #0]
 8012f02:	68b9      	ldr	r1, [r7, #8]
 8012f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012f06:	f000 fc49 	bl	801379c <prvCopyDataToQueue>
 8012f0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d010      	beq.n	8012f36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f16:	3324      	adds	r3, #36	@ 0x24
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f001 fa35 	bl	8014388 <xTaskRemoveFromEventList>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d013      	beq.n	8012f4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012f24:	4b3f      	ldr	r3, [pc, #252]	@ (8013024 <xQueueGenericSend+0x200>)
 8012f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f2a:	601a      	str	r2, [r3, #0]
 8012f2c:	f3bf 8f4f 	dsb	sy
 8012f30:	f3bf 8f6f 	isb	sy
 8012f34:	e00a      	b.n	8012f4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d007      	beq.n	8012f4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012f3c:	4b39      	ldr	r3, [pc, #228]	@ (8013024 <xQueueGenericSend+0x200>)
 8012f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f42:	601a      	str	r2, [r3, #0]
 8012f44:	f3bf 8f4f 	dsb	sy
 8012f48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012f4c:	f002 f87e 	bl	801504c <vPortExitCritical>
				return pdPASS;
 8012f50:	2301      	movs	r3, #1
 8012f52:	e063      	b.n	801301c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d103      	bne.n	8012f62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012f5a:	f002 f877 	bl	801504c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	e05c      	b.n	801301c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d106      	bne.n	8012f76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012f68:	f107 0314 	add.w	r3, r7, #20
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f001 fa6f 	bl	8014450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012f72:	2301      	movs	r3, #1
 8012f74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012f76:	f002 f869 	bl	801504c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012f7a:	f000 fffb 	bl	8013f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012f7e:	f002 f833 	bl	8014fe8 <vPortEnterCritical>
 8012f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012f88:	b25b      	sxtb	r3, r3
 8012f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012f8e:	d103      	bne.n	8012f98 <xQueueGenericSend+0x174>
 8012f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f92:	2200      	movs	r2, #0
 8012f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012f9e:	b25b      	sxtb	r3, r3
 8012fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012fa4:	d103      	bne.n	8012fae <xQueueGenericSend+0x18a>
 8012fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fa8:	2200      	movs	r2, #0
 8012faa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012fae:	f002 f84d 	bl	801504c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012fb2:	1d3a      	adds	r2, r7, #4
 8012fb4:	f107 0314 	add.w	r3, r7, #20
 8012fb8:	4611      	mov	r1, r2
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f001 fa5e 	bl	801447c <xTaskCheckForTimeOut>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d124      	bne.n	8013010 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012fc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012fc8:	f000 fce0 	bl	801398c <prvIsQueueFull>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d018      	beq.n	8013004 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fd4:	3310      	adds	r3, #16
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	4611      	mov	r1, r2
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f001 f9ae 	bl	801433c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012fe0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012fe2:	f000 fc6b 	bl	80138bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012fe6:	f000 ffd3 	bl	8013f90 <xTaskResumeAll>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	f47f af7c 	bne.w	8012eea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8013024 <xQueueGenericSend+0x200>)
 8012ff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ff8:	601a      	str	r2, [r3, #0]
 8012ffa:	f3bf 8f4f 	dsb	sy
 8012ffe:	f3bf 8f6f 	isb	sy
 8013002:	e772      	b.n	8012eea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013006:	f000 fc59 	bl	80138bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801300a:	f000 ffc1 	bl	8013f90 <xTaskResumeAll>
 801300e:	e76c      	b.n	8012eea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013010:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013012:	f000 fc53 	bl	80138bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013016:	f000 ffbb 	bl	8013f90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801301a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801301c:	4618      	mov	r0, r3
 801301e:	3738      	adds	r7, #56	@ 0x38
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}
 8013024:	e000ed04 	.word	0xe000ed04

08013028 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b090      	sub	sp, #64	@ 0x40
 801302c:	af00      	add	r7, sp, #0
 801302e:	60f8      	str	r0, [r7, #12]
 8013030:	60b9      	str	r1, [r7, #8]
 8013032:	607a      	str	r2, [r7, #4]
 8013034:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801303a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801303c:	2b00      	cmp	r3, #0
 801303e:	d10b      	bne.n	8013058 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8013040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013044:	f383 8811 	msr	BASEPRI, r3
 8013048:	f3bf 8f6f 	isb	sy
 801304c:	f3bf 8f4f 	dsb	sy
 8013050:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013052:	bf00      	nop
 8013054:	bf00      	nop
 8013056:	e7fd      	b.n	8013054 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013058:	68bb      	ldr	r3, [r7, #8]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d103      	bne.n	8013066 <xQueueGenericSendFromISR+0x3e>
 801305e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013062:	2b00      	cmp	r3, #0
 8013064:	d101      	bne.n	801306a <xQueueGenericSendFromISR+0x42>
 8013066:	2301      	movs	r3, #1
 8013068:	e000      	b.n	801306c <xQueueGenericSendFromISR+0x44>
 801306a:	2300      	movs	r3, #0
 801306c:	2b00      	cmp	r3, #0
 801306e:	d10b      	bne.n	8013088 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8013070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013074:	f383 8811 	msr	BASEPRI, r3
 8013078:	f3bf 8f6f 	isb	sy
 801307c:	f3bf 8f4f 	dsb	sy
 8013080:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013082:	bf00      	nop
 8013084:	bf00      	nop
 8013086:	e7fd      	b.n	8013084 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	2b02      	cmp	r3, #2
 801308c:	d103      	bne.n	8013096 <xQueueGenericSendFromISR+0x6e>
 801308e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013092:	2b01      	cmp	r3, #1
 8013094:	d101      	bne.n	801309a <xQueueGenericSendFromISR+0x72>
 8013096:	2301      	movs	r3, #1
 8013098:	e000      	b.n	801309c <xQueueGenericSendFromISR+0x74>
 801309a:	2300      	movs	r3, #0
 801309c:	2b00      	cmp	r3, #0
 801309e:	d10b      	bne.n	80130b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80130a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130a4:	f383 8811 	msr	BASEPRI, r3
 80130a8:	f3bf 8f6f 	isb	sy
 80130ac:	f3bf 8f4f 	dsb	sy
 80130b0:	623b      	str	r3, [r7, #32]
}
 80130b2:	bf00      	nop
 80130b4:	bf00      	nop
 80130b6:	e7fd      	b.n	80130b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80130b8:	f002 f876 	bl	80151a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80130bc:	f3ef 8211 	mrs	r2, BASEPRI
 80130c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130c4:	f383 8811 	msr	BASEPRI, r3
 80130c8:	f3bf 8f6f 	isb	sy
 80130cc:	f3bf 8f4f 	dsb	sy
 80130d0:	61fa      	str	r2, [r7, #28]
 80130d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80130d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80130d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80130d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80130dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d302      	bcc.n	80130ea <xQueueGenericSendFromISR+0xc2>
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	2b02      	cmp	r3, #2
 80130e8:	d12f      	bne.n	801314a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80130ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80130f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80130f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80130fa:	683a      	ldr	r2, [r7, #0]
 80130fc:	68b9      	ldr	r1, [r7, #8]
 80130fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013100:	f000 fb4c 	bl	801379c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013104:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801310c:	d112      	bne.n	8013134 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801310e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013112:	2b00      	cmp	r3, #0
 8013114:	d016      	beq.n	8013144 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013118:	3324      	adds	r3, #36	@ 0x24
 801311a:	4618      	mov	r0, r3
 801311c:	f001 f934 	bl	8014388 <xTaskRemoveFromEventList>
 8013120:	4603      	mov	r3, r0
 8013122:	2b00      	cmp	r3, #0
 8013124:	d00e      	beq.n	8013144 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d00b      	beq.n	8013144 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2201      	movs	r2, #1
 8013130:	601a      	str	r2, [r3, #0]
 8013132:	e007      	b.n	8013144 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013134:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013138:	3301      	adds	r3, #1
 801313a:	b2db      	uxtb	r3, r3
 801313c:	b25a      	sxtb	r2, r3
 801313e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013144:	2301      	movs	r3, #1
 8013146:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8013148:	e001      	b.n	801314e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801314a:	2300      	movs	r3, #0
 801314c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801314e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013150:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013158:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801315a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801315c:	4618      	mov	r0, r3
 801315e:	3740      	adds	r7, #64	@ 0x40
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}

08013164 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b08e      	sub	sp, #56	@ 0x38
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
 801316c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013174:	2b00      	cmp	r3, #0
 8013176:	d10b      	bne.n	8013190 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8013178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801317c:	f383 8811 	msr	BASEPRI, r3
 8013180:	f3bf 8f6f 	isb	sy
 8013184:	f3bf 8f4f 	dsb	sy
 8013188:	623b      	str	r3, [r7, #32]
}
 801318a:	bf00      	nop
 801318c:	bf00      	nop
 801318e:	e7fd      	b.n	801318c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013194:	2b00      	cmp	r3, #0
 8013196:	d00b      	beq.n	80131b0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8013198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801319c:	f383 8811 	msr	BASEPRI, r3
 80131a0:	f3bf 8f6f 	isb	sy
 80131a4:	f3bf 8f4f 	dsb	sy
 80131a8:	61fb      	str	r3, [r7, #28]
}
 80131aa:	bf00      	nop
 80131ac:	bf00      	nop
 80131ae:	e7fd      	b.n	80131ac <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80131b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d103      	bne.n	80131c0 <xQueueGiveFromISR+0x5c>
 80131b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131ba:	689b      	ldr	r3, [r3, #8]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d101      	bne.n	80131c4 <xQueueGiveFromISR+0x60>
 80131c0:	2301      	movs	r3, #1
 80131c2:	e000      	b.n	80131c6 <xQueueGiveFromISR+0x62>
 80131c4:	2300      	movs	r3, #0
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d10b      	bne.n	80131e2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80131ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ce:	f383 8811 	msr	BASEPRI, r3
 80131d2:	f3bf 8f6f 	isb	sy
 80131d6:	f3bf 8f4f 	dsb	sy
 80131da:	61bb      	str	r3, [r7, #24]
}
 80131dc:	bf00      	nop
 80131de:	bf00      	nop
 80131e0:	e7fd      	b.n	80131de <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80131e2:	f001 ffe1 	bl	80151a8 <vPortValidateInterruptPriority>
	__asm volatile
 80131e6:	f3ef 8211 	mrs	r2, BASEPRI
 80131ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ee:	f383 8811 	msr	BASEPRI, r3
 80131f2:	f3bf 8f6f 	isb	sy
 80131f6:	f3bf 8f4f 	dsb	sy
 80131fa:	617a      	str	r2, [r7, #20]
 80131fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80131fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013200:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013206:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801320a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801320c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801320e:	429a      	cmp	r2, r3
 8013210:	d22b      	bcs.n	801326a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013214:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801321c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801321e:	1c5a      	adds	r2, r3, #1
 8013220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013222:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013224:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801322c:	d112      	bne.n	8013254 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013232:	2b00      	cmp	r3, #0
 8013234:	d016      	beq.n	8013264 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013238:	3324      	adds	r3, #36	@ 0x24
 801323a:	4618      	mov	r0, r3
 801323c:	f001 f8a4 	bl	8014388 <xTaskRemoveFromEventList>
 8013240:	4603      	mov	r3, r0
 8013242:	2b00      	cmp	r3, #0
 8013244:	d00e      	beq.n	8013264 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d00b      	beq.n	8013264 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	2201      	movs	r2, #1
 8013250:	601a      	str	r2, [r3, #0]
 8013252:	e007      	b.n	8013264 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013258:	3301      	adds	r3, #1
 801325a:	b2db      	uxtb	r3, r3
 801325c:	b25a      	sxtb	r2, r3
 801325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013264:	2301      	movs	r3, #1
 8013266:	637b      	str	r3, [r7, #52]	@ 0x34
 8013268:	e001      	b.n	801326e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801326a:	2300      	movs	r3, #0
 801326c:	637b      	str	r3, [r7, #52]	@ 0x34
 801326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013270:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f383 8811 	msr	BASEPRI, r3
}
 8013278:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801327a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801327c:	4618      	mov	r0, r3
 801327e:	3738      	adds	r7, #56	@ 0x38
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b08c      	sub	sp, #48	@ 0x30
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013290:	2300      	movs	r3, #0
 8013292:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801329a:	2b00      	cmp	r3, #0
 801329c:	d10b      	bne.n	80132b6 <xQueueReceive+0x32>
	__asm volatile
 801329e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132a2:	f383 8811 	msr	BASEPRI, r3
 80132a6:	f3bf 8f6f 	isb	sy
 80132aa:	f3bf 8f4f 	dsb	sy
 80132ae:	623b      	str	r3, [r7, #32]
}
 80132b0:	bf00      	nop
 80132b2:	bf00      	nop
 80132b4:	e7fd      	b.n	80132b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d103      	bne.n	80132c4 <xQueueReceive+0x40>
 80132bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d101      	bne.n	80132c8 <xQueueReceive+0x44>
 80132c4:	2301      	movs	r3, #1
 80132c6:	e000      	b.n	80132ca <xQueueReceive+0x46>
 80132c8:	2300      	movs	r3, #0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d10b      	bne.n	80132e6 <xQueueReceive+0x62>
	__asm volatile
 80132ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132d2:	f383 8811 	msr	BASEPRI, r3
 80132d6:	f3bf 8f6f 	isb	sy
 80132da:	f3bf 8f4f 	dsb	sy
 80132de:	61fb      	str	r3, [r7, #28]
}
 80132e0:	bf00      	nop
 80132e2:	bf00      	nop
 80132e4:	e7fd      	b.n	80132e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80132e6:	f001 f9f5 	bl	80146d4 <xTaskGetSchedulerState>
 80132ea:	4603      	mov	r3, r0
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d102      	bne.n	80132f6 <xQueueReceive+0x72>
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d101      	bne.n	80132fa <xQueueReceive+0x76>
 80132f6:	2301      	movs	r3, #1
 80132f8:	e000      	b.n	80132fc <xQueueReceive+0x78>
 80132fa:	2300      	movs	r3, #0
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d10b      	bne.n	8013318 <xQueueReceive+0x94>
	__asm volatile
 8013300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013304:	f383 8811 	msr	BASEPRI, r3
 8013308:	f3bf 8f6f 	isb	sy
 801330c:	f3bf 8f4f 	dsb	sy
 8013310:	61bb      	str	r3, [r7, #24]
}
 8013312:	bf00      	nop
 8013314:	bf00      	nop
 8013316:	e7fd      	b.n	8013314 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013318:	f001 fe66 	bl	8014fe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801331c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801331e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013320:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013324:	2b00      	cmp	r3, #0
 8013326:	d01f      	beq.n	8013368 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013328:	68b9      	ldr	r1, [r7, #8]
 801332a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801332c:	f000 faa0 	bl	8013870 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013332:	1e5a      	subs	r2, r3, #1
 8013334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013336:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801333a:	691b      	ldr	r3, [r3, #16]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d00f      	beq.n	8013360 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013342:	3310      	adds	r3, #16
 8013344:	4618      	mov	r0, r3
 8013346:	f001 f81f 	bl	8014388 <xTaskRemoveFromEventList>
 801334a:	4603      	mov	r3, r0
 801334c:	2b00      	cmp	r3, #0
 801334e:	d007      	beq.n	8013360 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013350:	4b3c      	ldr	r3, [pc, #240]	@ (8013444 <xQueueReceive+0x1c0>)
 8013352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013356:	601a      	str	r2, [r3, #0]
 8013358:	f3bf 8f4f 	dsb	sy
 801335c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013360:	f001 fe74 	bl	801504c <vPortExitCritical>
				return pdPASS;
 8013364:	2301      	movs	r3, #1
 8013366:	e069      	b.n	801343c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d103      	bne.n	8013376 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801336e:	f001 fe6d 	bl	801504c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013372:	2300      	movs	r3, #0
 8013374:	e062      	b.n	801343c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013378:	2b00      	cmp	r3, #0
 801337a:	d106      	bne.n	801338a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801337c:	f107 0310 	add.w	r3, r7, #16
 8013380:	4618      	mov	r0, r3
 8013382:	f001 f865 	bl	8014450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013386:	2301      	movs	r3, #1
 8013388:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801338a:	f001 fe5f 	bl	801504c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801338e:	f000 fdf1 	bl	8013f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013392:	f001 fe29 	bl	8014fe8 <vPortEnterCritical>
 8013396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013398:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801339c:	b25b      	sxtb	r3, r3
 801339e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80133a2:	d103      	bne.n	80133ac <xQueueReceive+0x128>
 80133a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133a6:	2200      	movs	r2, #0
 80133a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80133ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80133b2:	b25b      	sxtb	r3, r3
 80133b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80133b8:	d103      	bne.n	80133c2 <xQueueReceive+0x13e>
 80133ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133bc:	2200      	movs	r2, #0
 80133be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80133c2:	f001 fe43 	bl	801504c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80133c6:	1d3a      	adds	r2, r7, #4
 80133c8:	f107 0310 	add.w	r3, r7, #16
 80133cc:	4611      	mov	r1, r2
 80133ce:	4618      	mov	r0, r3
 80133d0:	f001 f854 	bl	801447c <xTaskCheckForTimeOut>
 80133d4:	4603      	mov	r3, r0
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d123      	bne.n	8013422 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80133da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133dc:	f000 fac0 	bl	8013960 <prvIsQueueEmpty>
 80133e0:	4603      	mov	r3, r0
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d017      	beq.n	8013416 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80133e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133e8:	3324      	adds	r3, #36	@ 0x24
 80133ea:	687a      	ldr	r2, [r7, #4]
 80133ec:	4611      	mov	r1, r2
 80133ee:	4618      	mov	r0, r3
 80133f0:	f000 ffa4 	bl	801433c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80133f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133f6:	f000 fa61 	bl	80138bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80133fa:	f000 fdc9 	bl	8013f90 <xTaskResumeAll>
 80133fe:	4603      	mov	r3, r0
 8013400:	2b00      	cmp	r3, #0
 8013402:	d189      	bne.n	8013318 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013404:	4b0f      	ldr	r3, [pc, #60]	@ (8013444 <xQueueReceive+0x1c0>)
 8013406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801340a:	601a      	str	r2, [r3, #0]
 801340c:	f3bf 8f4f 	dsb	sy
 8013410:	f3bf 8f6f 	isb	sy
 8013414:	e780      	b.n	8013318 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013418:	f000 fa50 	bl	80138bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801341c:	f000 fdb8 	bl	8013f90 <xTaskResumeAll>
 8013420:	e77a      	b.n	8013318 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013422:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013424:	f000 fa4a 	bl	80138bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013428:	f000 fdb2 	bl	8013f90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801342c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801342e:	f000 fa97 	bl	8013960 <prvIsQueueEmpty>
 8013432:	4603      	mov	r3, r0
 8013434:	2b00      	cmp	r3, #0
 8013436:	f43f af6f 	beq.w	8013318 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801343a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801343c:	4618      	mov	r0, r3
 801343e:	3730      	adds	r7, #48	@ 0x30
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}
 8013444:	e000ed04 	.word	0xe000ed04

08013448 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b08e      	sub	sp, #56	@ 0x38
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013452:	2300      	movs	r3, #0
 8013454:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801345a:	2300      	movs	r3, #0
 801345c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801345e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013460:	2b00      	cmp	r3, #0
 8013462:	d10b      	bne.n	801347c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8013464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013468:	f383 8811 	msr	BASEPRI, r3
 801346c:	f3bf 8f6f 	isb	sy
 8013470:	f3bf 8f4f 	dsb	sy
 8013474:	623b      	str	r3, [r7, #32]
}
 8013476:	bf00      	nop
 8013478:	bf00      	nop
 801347a:	e7fd      	b.n	8013478 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801347c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013480:	2b00      	cmp	r3, #0
 8013482:	d00b      	beq.n	801349c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8013484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013488:	f383 8811 	msr	BASEPRI, r3
 801348c:	f3bf 8f6f 	isb	sy
 8013490:	f3bf 8f4f 	dsb	sy
 8013494:	61fb      	str	r3, [r7, #28]
}
 8013496:	bf00      	nop
 8013498:	bf00      	nop
 801349a:	e7fd      	b.n	8013498 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801349c:	f001 f91a 	bl	80146d4 <xTaskGetSchedulerState>
 80134a0:	4603      	mov	r3, r0
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d102      	bne.n	80134ac <xQueueSemaphoreTake+0x64>
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d101      	bne.n	80134b0 <xQueueSemaphoreTake+0x68>
 80134ac:	2301      	movs	r3, #1
 80134ae:	e000      	b.n	80134b2 <xQueueSemaphoreTake+0x6a>
 80134b0:	2300      	movs	r3, #0
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d10b      	bne.n	80134ce <xQueueSemaphoreTake+0x86>
	__asm volatile
 80134b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134ba:	f383 8811 	msr	BASEPRI, r3
 80134be:	f3bf 8f6f 	isb	sy
 80134c2:	f3bf 8f4f 	dsb	sy
 80134c6:	61bb      	str	r3, [r7, #24]
}
 80134c8:	bf00      	nop
 80134ca:	bf00      	nop
 80134cc:	e7fd      	b.n	80134ca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80134ce:	f001 fd8b 	bl	8014fe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80134d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80134d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d024      	beq.n	8013528 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80134de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134e0:	1e5a      	subs	r2, r3, #1
 80134e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80134e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d104      	bne.n	80134f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80134ee:	f001 fa9d 	bl	8014a2c <pvTaskIncrementMutexHeldCount>
 80134f2:	4602      	mov	r2, r0
 80134f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80134f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134fa:	691b      	ldr	r3, [r3, #16]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d00f      	beq.n	8013520 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013502:	3310      	adds	r3, #16
 8013504:	4618      	mov	r0, r3
 8013506:	f000 ff3f 	bl	8014388 <xTaskRemoveFromEventList>
 801350a:	4603      	mov	r3, r0
 801350c:	2b00      	cmp	r3, #0
 801350e:	d007      	beq.n	8013520 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013510:	4b54      	ldr	r3, [pc, #336]	@ (8013664 <xQueueSemaphoreTake+0x21c>)
 8013512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013516:	601a      	str	r2, [r3, #0]
 8013518:	f3bf 8f4f 	dsb	sy
 801351c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013520:	f001 fd94 	bl	801504c <vPortExitCritical>
				return pdPASS;
 8013524:	2301      	movs	r3, #1
 8013526:	e098      	b.n	801365a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d112      	bne.n	8013554 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801352e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013530:	2b00      	cmp	r3, #0
 8013532:	d00b      	beq.n	801354c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8013534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013538:	f383 8811 	msr	BASEPRI, r3
 801353c:	f3bf 8f6f 	isb	sy
 8013540:	f3bf 8f4f 	dsb	sy
 8013544:	617b      	str	r3, [r7, #20]
}
 8013546:	bf00      	nop
 8013548:	bf00      	nop
 801354a:	e7fd      	b.n	8013548 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801354c:	f001 fd7e 	bl	801504c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013550:	2300      	movs	r3, #0
 8013552:	e082      	b.n	801365a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013556:	2b00      	cmp	r3, #0
 8013558:	d106      	bne.n	8013568 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801355a:	f107 030c 	add.w	r3, r7, #12
 801355e:	4618      	mov	r0, r3
 8013560:	f000 ff76 	bl	8014450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013564:	2301      	movs	r3, #1
 8013566:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013568:	f001 fd70 	bl	801504c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801356c:	f000 fd02 	bl	8013f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013570:	f001 fd3a 	bl	8014fe8 <vPortEnterCritical>
 8013574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013576:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801357a:	b25b      	sxtb	r3, r3
 801357c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013580:	d103      	bne.n	801358a <xQueueSemaphoreTake+0x142>
 8013582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013584:	2200      	movs	r2, #0
 8013586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801358a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801358c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013590:	b25b      	sxtb	r3, r3
 8013592:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013596:	d103      	bne.n	80135a0 <xQueueSemaphoreTake+0x158>
 8013598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801359a:	2200      	movs	r2, #0
 801359c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80135a0:	f001 fd54 	bl	801504c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80135a4:	463a      	mov	r2, r7
 80135a6:	f107 030c 	add.w	r3, r7, #12
 80135aa:	4611      	mov	r1, r2
 80135ac:	4618      	mov	r0, r3
 80135ae:	f000 ff65 	bl	801447c <xTaskCheckForTimeOut>
 80135b2:	4603      	mov	r3, r0
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d132      	bne.n	801361e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80135b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135ba:	f000 f9d1 	bl	8013960 <prvIsQueueEmpty>
 80135be:	4603      	mov	r3, r0
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d026      	beq.n	8013612 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80135c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d109      	bne.n	80135e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80135cc:	f001 fd0c 	bl	8014fe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80135d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135d2:	689b      	ldr	r3, [r3, #8]
 80135d4:	4618      	mov	r0, r3
 80135d6:	f001 f89b 	bl	8014710 <xTaskPriorityInherit>
 80135da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80135dc:	f001 fd36 	bl	801504c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80135e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135e2:	3324      	adds	r3, #36	@ 0x24
 80135e4:	683a      	ldr	r2, [r7, #0]
 80135e6:	4611      	mov	r1, r2
 80135e8:	4618      	mov	r0, r3
 80135ea:	f000 fea7 	bl	801433c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80135ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135f0:	f000 f964 	bl	80138bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80135f4:	f000 fccc 	bl	8013f90 <xTaskResumeAll>
 80135f8:	4603      	mov	r3, r0
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	f47f af67 	bne.w	80134ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013600:	4b18      	ldr	r3, [pc, #96]	@ (8013664 <xQueueSemaphoreTake+0x21c>)
 8013602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013606:	601a      	str	r2, [r3, #0]
 8013608:	f3bf 8f4f 	dsb	sy
 801360c:	f3bf 8f6f 	isb	sy
 8013610:	e75d      	b.n	80134ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013612:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013614:	f000 f952 	bl	80138bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013618:	f000 fcba 	bl	8013f90 <xTaskResumeAll>
 801361c:	e757      	b.n	80134ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801361e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013620:	f000 f94c 	bl	80138bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013624:	f000 fcb4 	bl	8013f90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013628:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801362a:	f000 f999 	bl	8013960 <prvIsQueueEmpty>
 801362e:	4603      	mov	r3, r0
 8013630:	2b00      	cmp	r3, #0
 8013632:	f43f af4c 	beq.w	80134ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013638:	2b00      	cmp	r3, #0
 801363a:	d00d      	beq.n	8013658 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801363c:	f001 fcd4 	bl	8014fe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013640:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013642:	f000 f893 	bl	801376c <prvGetDisinheritPriorityAfterTimeout>
 8013646:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801364a:	689b      	ldr	r3, [r3, #8]
 801364c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801364e:	4618      	mov	r0, r3
 8013650:	f001 f95c 	bl	801490c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013654:	f001 fcfa 	bl	801504c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013658:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801365a:	4618      	mov	r0, r3
 801365c:	3738      	adds	r7, #56	@ 0x38
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	e000ed04 	.word	0xe000ed04

08013668 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b08e      	sub	sp, #56	@ 0x38
 801366c:	af00      	add	r7, sp, #0
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801367a:	2b00      	cmp	r3, #0
 801367c:	d10b      	bne.n	8013696 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801367e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013682:	f383 8811 	msr	BASEPRI, r3
 8013686:	f3bf 8f6f 	isb	sy
 801368a:	f3bf 8f4f 	dsb	sy
 801368e:	623b      	str	r3, [r7, #32]
}
 8013690:	bf00      	nop
 8013692:	bf00      	nop
 8013694:	e7fd      	b.n	8013692 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d103      	bne.n	80136a4 <xQueueReceiveFromISR+0x3c>
 801369c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801369e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d101      	bne.n	80136a8 <xQueueReceiveFromISR+0x40>
 80136a4:	2301      	movs	r3, #1
 80136a6:	e000      	b.n	80136aa <xQueueReceiveFromISR+0x42>
 80136a8:	2300      	movs	r3, #0
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d10b      	bne.n	80136c6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80136ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136b2:	f383 8811 	msr	BASEPRI, r3
 80136b6:	f3bf 8f6f 	isb	sy
 80136ba:	f3bf 8f4f 	dsb	sy
 80136be:	61fb      	str	r3, [r7, #28]
}
 80136c0:	bf00      	nop
 80136c2:	bf00      	nop
 80136c4:	e7fd      	b.n	80136c2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80136c6:	f001 fd6f 	bl	80151a8 <vPortValidateInterruptPriority>
	__asm volatile
 80136ca:	f3ef 8211 	mrs	r2, BASEPRI
 80136ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136d2:	f383 8811 	msr	BASEPRI, r3
 80136d6:	f3bf 8f6f 	isb	sy
 80136da:	f3bf 8f4f 	dsb	sy
 80136de:	61ba      	str	r2, [r7, #24]
 80136e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80136e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80136e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80136e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80136ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d02f      	beq.n	8013752 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80136f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80136f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80136fc:	68b9      	ldr	r1, [r7, #8]
 80136fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013700:	f000 f8b6 	bl	8013870 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013706:	1e5a      	subs	r2, r3, #1
 8013708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801370a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801370c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013714:	d112      	bne.n	801373c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013718:	691b      	ldr	r3, [r3, #16]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d016      	beq.n	801374c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801371e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013720:	3310      	adds	r3, #16
 8013722:	4618      	mov	r0, r3
 8013724:	f000 fe30 	bl	8014388 <xTaskRemoveFromEventList>
 8013728:	4603      	mov	r3, r0
 801372a:	2b00      	cmp	r3, #0
 801372c:	d00e      	beq.n	801374c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d00b      	beq.n	801374c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2201      	movs	r2, #1
 8013738:	601a      	str	r2, [r3, #0]
 801373a:	e007      	b.n	801374c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801373c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013740:	3301      	adds	r3, #1
 8013742:	b2db      	uxtb	r3, r3
 8013744:	b25a      	sxtb	r2, r3
 8013746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801374c:	2301      	movs	r3, #1
 801374e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013750:	e001      	b.n	8013756 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8013752:	2300      	movs	r3, #0
 8013754:	637b      	str	r3, [r7, #52]	@ 0x34
 8013756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013758:	613b      	str	r3, [r7, #16]
	__asm volatile
 801375a:	693b      	ldr	r3, [r7, #16]
 801375c:	f383 8811 	msr	BASEPRI, r3
}
 8013760:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013764:	4618      	mov	r0, r3
 8013766:	3738      	adds	r7, #56	@ 0x38
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}

0801376c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801376c:	b480      	push	{r7}
 801376e:	b085      	sub	sp, #20
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013778:	2b00      	cmp	r3, #0
 801377a:	d006      	beq.n	801378a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	f1c3 0307 	rsb	r3, r3, #7
 8013786:	60fb      	str	r3, [r7, #12]
 8013788:	e001      	b.n	801378e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801378a:	2300      	movs	r3, #0
 801378c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801378e:	68fb      	ldr	r3, [r7, #12]
	}
 8013790:	4618      	mov	r0, r3
 8013792:	3714      	adds	r7, #20
 8013794:	46bd      	mov	sp, r7
 8013796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379a:	4770      	bx	lr

0801379c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b086      	sub	sp, #24
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	60f8      	str	r0, [r7, #12]
 80137a4:	60b9      	str	r1, [r7, #8]
 80137a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80137a8:	2300      	movs	r3, #0
 80137aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80137b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d10d      	bne.n	80137d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d14d      	bne.n	801385e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	689b      	ldr	r3, [r3, #8]
 80137c6:	4618      	mov	r0, r3
 80137c8:	f001 f818 	bl	80147fc <xTaskPriorityDisinherit>
 80137cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	2200      	movs	r2, #0
 80137d2:	609a      	str	r2, [r3, #8]
 80137d4:	e043      	b.n	801385e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d119      	bne.n	8013810 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	6858      	ldr	r0, [r3, #4]
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137e4:	461a      	mov	r2, r3
 80137e6:	68b9      	ldr	r1, [r7, #8]
 80137e8:	f005 fa14 	bl	8018c14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	685a      	ldr	r2, [r3, #4]
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137f4:	441a      	add	r2, r3
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	685a      	ldr	r2, [r3, #4]
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	689b      	ldr	r3, [r3, #8]
 8013802:	429a      	cmp	r2, r3
 8013804:	d32b      	bcc.n	801385e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	681a      	ldr	r2, [r3, #0]
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	605a      	str	r2, [r3, #4]
 801380e:	e026      	b.n	801385e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	68d8      	ldr	r0, [r3, #12]
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013818:	461a      	mov	r2, r3
 801381a:	68b9      	ldr	r1, [r7, #8]
 801381c:	f005 f9fa 	bl	8018c14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	68da      	ldr	r2, [r3, #12]
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013828:	425b      	negs	r3, r3
 801382a:	441a      	add	r2, r3
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	68da      	ldr	r2, [r3, #12]
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	429a      	cmp	r2, r3
 801383a:	d207      	bcs.n	801384c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	689a      	ldr	r2, [r3, #8]
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013844:	425b      	negs	r3, r3
 8013846:	441a      	add	r2, r3
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2b02      	cmp	r3, #2
 8013850:	d105      	bne.n	801385e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d002      	beq.n	801385e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	3b01      	subs	r3, #1
 801385c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	1c5a      	adds	r2, r3, #1
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013866:	697b      	ldr	r3, [r7, #20]
}
 8013868:	4618      	mov	r0, r3
 801386a:	3718      	adds	r7, #24
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}

08013870 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b082      	sub	sp, #8
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
 8013878:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801387e:	2b00      	cmp	r3, #0
 8013880:	d018      	beq.n	80138b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	68da      	ldr	r2, [r3, #12]
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801388a:	441a      	add	r2, r3
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	68da      	ldr	r2, [r3, #12]
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	689b      	ldr	r3, [r3, #8]
 8013898:	429a      	cmp	r2, r3
 801389a:	d303      	bcc.n	80138a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	68d9      	ldr	r1, [r3, #12]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80138ac:	461a      	mov	r2, r3
 80138ae:	6838      	ldr	r0, [r7, #0]
 80138b0:	f005 f9b0 	bl	8018c14 <memcpy>
	}
}
 80138b4:	bf00      	nop
 80138b6:	3708      	adds	r7, #8
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}

080138bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b084      	sub	sp, #16
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80138c4:	f001 fb90 	bl	8014fe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80138ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80138d0:	e011      	b.n	80138f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d012      	beq.n	8013900 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	3324      	adds	r3, #36	@ 0x24
 80138de:	4618      	mov	r0, r3
 80138e0:	f000 fd52 	bl	8014388 <xTaskRemoveFromEventList>
 80138e4:	4603      	mov	r3, r0
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d001      	beq.n	80138ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80138ea:	f000 fe2b 	bl	8014544 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80138ee:	7bfb      	ldrb	r3, [r7, #15]
 80138f0:	3b01      	subs	r3, #1
 80138f2:	b2db      	uxtb	r3, r3
 80138f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80138f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	dce9      	bgt.n	80138d2 <prvUnlockQueue+0x16>
 80138fe:	e000      	b.n	8013902 <prvUnlockQueue+0x46>
					break;
 8013900:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	22ff      	movs	r2, #255	@ 0xff
 8013906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801390a:	f001 fb9f 	bl	801504c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801390e:	f001 fb6b 	bl	8014fe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013918:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801391a:	e011      	b.n	8013940 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	691b      	ldr	r3, [r3, #16]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d012      	beq.n	801394a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	3310      	adds	r3, #16
 8013928:	4618      	mov	r0, r3
 801392a:	f000 fd2d 	bl	8014388 <xTaskRemoveFromEventList>
 801392e:	4603      	mov	r3, r0
 8013930:	2b00      	cmp	r3, #0
 8013932:	d001      	beq.n	8013938 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013934:	f000 fe06 	bl	8014544 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013938:	7bbb      	ldrb	r3, [r7, #14]
 801393a:	3b01      	subs	r3, #1
 801393c:	b2db      	uxtb	r3, r3
 801393e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013944:	2b00      	cmp	r3, #0
 8013946:	dce9      	bgt.n	801391c <prvUnlockQueue+0x60>
 8013948:	e000      	b.n	801394c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801394a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	22ff      	movs	r2, #255	@ 0xff
 8013950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013954:	f001 fb7a 	bl	801504c <vPortExitCritical>
}
 8013958:	bf00      	nop
 801395a:	3710      	adds	r7, #16
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}

08013960 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b084      	sub	sp, #16
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013968:	f001 fb3e 	bl	8014fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013970:	2b00      	cmp	r3, #0
 8013972:	d102      	bne.n	801397a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013974:	2301      	movs	r3, #1
 8013976:	60fb      	str	r3, [r7, #12]
 8013978:	e001      	b.n	801397e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801397a:	2300      	movs	r3, #0
 801397c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801397e:	f001 fb65 	bl	801504c <vPortExitCritical>

	return xReturn;
 8013982:	68fb      	ldr	r3, [r7, #12]
}
 8013984:	4618      	mov	r0, r3
 8013986:	3710      	adds	r7, #16
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}

0801398c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801398c:	b580      	push	{r7, lr}
 801398e:	b084      	sub	sp, #16
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013994:	f001 fb28 	bl	8014fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d102      	bne.n	80139aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80139a4:	2301      	movs	r3, #1
 80139a6:	60fb      	str	r3, [r7, #12]
 80139a8:	e001      	b.n	80139ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80139aa:	2300      	movs	r3, #0
 80139ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80139ae:	f001 fb4d 	bl	801504c <vPortExitCritical>

	return xReturn;
 80139b2:	68fb      	ldr	r3, [r7, #12]
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	3710      	adds	r7, #16
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}

080139bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b08c      	sub	sp, #48	@ 0x30
 80139c0:	af04      	add	r7, sp, #16
 80139c2:	60f8      	str	r0, [r7, #12]
 80139c4:	60b9      	str	r1, [r7, #8]
 80139c6:	603b      	str	r3, [r7, #0]
 80139c8:	4613      	mov	r3, r2
 80139ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80139cc:	88fb      	ldrh	r3, [r7, #6]
 80139ce:	009b      	lsls	r3, r3, #2
 80139d0:	4618      	mov	r0, r3
 80139d2:	f001 fc2b 	bl	801522c <pvPortMalloc>
 80139d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80139d8:	697b      	ldr	r3, [r7, #20]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d00e      	beq.n	80139fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80139de:	20ac      	movs	r0, #172	@ 0xac
 80139e0:	f001 fc24 	bl	801522c <pvPortMalloc>
 80139e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80139e6:	69fb      	ldr	r3, [r7, #28]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d003      	beq.n	80139f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80139ec:	69fb      	ldr	r3, [r7, #28]
 80139ee:	697a      	ldr	r2, [r7, #20]
 80139f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80139f2:	e005      	b.n	8013a00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80139f4:	6978      	ldr	r0, [r7, #20]
 80139f6:	f001 fce7 	bl	80153c8 <vPortFree>
 80139fa:	e001      	b.n	8013a00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80139fc:	2300      	movs	r3, #0
 80139fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013a00:	69fb      	ldr	r3, [r7, #28]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d013      	beq.n	8013a2e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013a06:	88fa      	ldrh	r2, [r7, #6]
 8013a08:	2300      	movs	r3, #0
 8013a0a:	9303      	str	r3, [sp, #12]
 8013a0c:	69fb      	ldr	r3, [r7, #28]
 8013a0e:	9302      	str	r3, [sp, #8]
 8013a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a12:	9301      	str	r3, [sp, #4]
 8013a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a16:	9300      	str	r3, [sp, #0]
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	68b9      	ldr	r1, [r7, #8]
 8013a1c:	68f8      	ldr	r0, [r7, #12]
 8013a1e:	f000 f80f 	bl	8013a40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013a22:	69f8      	ldr	r0, [r7, #28]
 8013a24:	f000 f8b6 	bl	8013b94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013a28:	2301      	movs	r3, #1
 8013a2a:	61bb      	str	r3, [r7, #24]
 8013a2c:	e002      	b.n	8013a34 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013a2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013a32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013a34:	69bb      	ldr	r3, [r7, #24]
	}
 8013a36:	4618      	mov	r0, r3
 8013a38:	3720      	adds	r7, #32
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}
	...

08013a40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b088      	sub	sp, #32
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	60f8      	str	r0, [r7, #12]
 8013a48:	60b9      	str	r1, [r7, #8]
 8013a4a:	607a      	str	r2, [r7, #4]
 8013a4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a50:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	009b      	lsls	r3, r3, #2
 8013a56:	461a      	mov	r2, r3
 8013a58:	21a5      	movs	r1, #165	@ 0xa5
 8013a5a:	f005 f839 	bl	8018ad0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013a68:	3b01      	subs	r3, #1
 8013a6a:	009b      	lsls	r3, r3, #2
 8013a6c:	4413      	add	r3, r2
 8013a6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013a70:	69bb      	ldr	r3, [r7, #24]
 8013a72:	f023 0307 	bic.w	r3, r3, #7
 8013a76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013a78:	69bb      	ldr	r3, [r7, #24]
 8013a7a:	f003 0307 	and.w	r3, r3, #7
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d00b      	beq.n	8013a9a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8013a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a86:	f383 8811 	msr	BASEPRI, r3
 8013a8a:	f3bf 8f6f 	isb	sy
 8013a8e:	f3bf 8f4f 	dsb	sy
 8013a92:	617b      	str	r3, [r7, #20]
}
 8013a94:	bf00      	nop
 8013a96:	bf00      	nop
 8013a98:	e7fd      	b.n	8013a96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d01f      	beq.n	8013ae0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	61fb      	str	r3, [r7, #28]
 8013aa4:	e012      	b.n	8013acc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013aa6:	68ba      	ldr	r2, [r7, #8]
 8013aa8:	69fb      	ldr	r3, [r7, #28]
 8013aaa:	4413      	add	r3, r2
 8013aac:	7819      	ldrb	r1, [r3, #0]
 8013aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013ab0:	69fb      	ldr	r3, [r7, #28]
 8013ab2:	4413      	add	r3, r2
 8013ab4:	3334      	adds	r3, #52	@ 0x34
 8013ab6:	460a      	mov	r2, r1
 8013ab8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013aba:	68ba      	ldr	r2, [r7, #8]
 8013abc:	69fb      	ldr	r3, [r7, #28]
 8013abe:	4413      	add	r3, r2
 8013ac0:	781b      	ldrb	r3, [r3, #0]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d006      	beq.n	8013ad4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013ac6:	69fb      	ldr	r3, [r7, #28]
 8013ac8:	3301      	adds	r3, #1
 8013aca:	61fb      	str	r3, [r7, #28]
 8013acc:	69fb      	ldr	r3, [r7, #28]
 8013ace:	2b0f      	cmp	r3, #15
 8013ad0:	d9e9      	bls.n	8013aa6 <prvInitialiseNewTask+0x66>
 8013ad2:	e000      	b.n	8013ad6 <prvInitialiseNewTask+0x96>
			{
				break;
 8013ad4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ad8:	2200      	movs	r2, #0
 8013ada:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013ade:	e003      	b.n	8013ae8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aea:	2b06      	cmp	r3, #6
 8013aec:	d901      	bls.n	8013af2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013aee:	2306      	movs	r3, #6
 8013af0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013af4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013af6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013afa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013afc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b00:	2200      	movs	r2, #0
 8013b02:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b06:	3304      	adds	r3, #4
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7ff f833 	bl	8012b74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b10:	3318      	adds	r3, #24
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7ff f82e 	bl	8012b74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013b1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b20:	f1c3 0207 	rsb	r2, r3, #7
 8013b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013b2c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b30:	2200      	movs	r2, #0
 8013b32:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b36:	2200      	movs	r2, #0
 8013b38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b3e:	2200      	movs	r2, #0
 8013b40:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b46:	3358      	adds	r3, #88	@ 0x58
 8013b48:	224c      	movs	r2, #76	@ 0x4c
 8013b4a:	2100      	movs	r1, #0
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f004 ffbf 	bl	8018ad0 <memset>
 8013b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b54:	4a0c      	ldr	r2, [pc, #48]	@ (8013b88 <prvInitialiseNewTask+0x148>)
 8013b56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8013b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8013b8c <prvInitialiseNewTask+0x14c>)
 8013b5c:	661a      	str	r2, [r3, #96]	@ 0x60
 8013b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b60:	4a0b      	ldr	r2, [pc, #44]	@ (8013b90 <prvInitialiseNewTask+0x150>)
 8013b62:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013b64:	683a      	ldr	r2, [r7, #0]
 8013b66:	68f9      	ldr	r1, [r7, #12]
 8013b68:	69b8      	ldr	r0, [r7, #24]
 8013b6a:	f001 f90b 	bl	8014d84 <pxPortInitialiseStack>
 8013b6e:	4602      	mov	r2, r0
 8013b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d002      	beq.n	8013b80 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013b7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b80:	bf00      	nop
 8013b82:	3720      	adds	r7, #32
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}
 8013b88:	200077f0 	.word	0x200077f0
 8013b8c:	20007858 	.word	0x20007858
 8013b90:	200078c0 	.word	0x200078c0

08013b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013b9c:	f001 fa24 	bl	8014fe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8013c54 <prvAddNewTaskToReadyList+0xc0>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	3301      	adds	r3, #1
 8013ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8013c54 <prvAddNewTaskToReadyList+0xc0>)
 8013ba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013baa:	4b2b      	ldr	r3, [pc, #172]	@ (8013c58 <prvAddNewTaskToReadyList+0xc4>)
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d109      	bne.n	8013bc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013bb2:	4a29      	ldr	r2, [pc, #164]	@ (8013c58 <prvAddNewTaskToReadyList+0xc4>)
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013bb8:	4b26      	ldr	r3, [pc, #152]	@ (8013c54 <prvAddNewTaskToReadyList+0xc0>)
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	2b01      	cmp	r3, #1
 8013bbe:	d110      	bne.n	8013be2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013bc0:	f000 fce4 	bl	801458c <prvInitialiseTaskLists>
 8013bc4:	e00d      	b.n	8013be2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013bc6:	4b25      	ldr	r3, [pc, #148]	@ (8013c5c <prvAddNewTaskToReadyList+0xc8>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d109      	bne.n	8013be2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013bce:	4b22      	ldr	r3, [pc, #136]	@ (8013c58 <prvAddNewTaskToReadyList+0xc4>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	d802      	bhi.n	8013be2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8013c58 <prvAddNewTaskToReadyList+0xc4>)
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013be2:	4b1f      	ldr	r3, [pc, #124]	@ (8013c60 <prvAddNewTaskToReadyList+0xcc>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	3301      	adds	r3, #1
 8013be8:	4a1d      	ldr	r2, [pc, #116]	@ (8013c60 <prvAddNewTaskToReadyList+0xcc>)
 8013bea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013bec:	4b1c      	ldr	r3, [pc, #112]	@ (8013c60 <prvAddNewTaskToReadyList+0xcc>)
 8013bee:	681a      	ldr	r2, [r3, #0]
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	409a      	lsls	r2, r3
 8013bfc:	4b19      	ldr	r3, [pc, #100]	@ (8013c64 <prvAddNewTaskToReadyList+0xd0>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	4313      	orrs	r3, r2
 8013c02:	4a18      	ldr	r2, [pc, #96]	@ (8013c64 <prvAddNewTaskToReadyList+0xd0>)
 8013c04:	6013      	str	r3, [r2, #0]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c0a:	4613      	mov	r3, r2
 8013c0c:	009b      	lsls	r3, r3, #2
 8013c0e:	4413      	add	r3, r2
 8013c10:	009b      	lsls	r3, r3, #2
 8013c12:	4a15      	ldr	r2, [pc, #84]	@ (8013c68 <prvAddNewTaskToReadyList+0xd4>)
 8013c14:	441a      	add	r2, r3
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	3304      	adds	r3, #4
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	4610      	mov	r0, r2
 8013c1e:	f7fe ffb6 	bl	8012b8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013c22:	f001 fa13 	bl	801504c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013c26:	4b0d      	ldr	r3, [pc, #52]	@ (8013c5c <prvAddNewTaskToReadyList+0xc8>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d00e      	beq.n	8013c4c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8013c58 <prvAddNewTaskToReadyList+0xc4>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d207      	bcs.n	8013c4c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8013c6c <prvAddNewTaskToReadyList+0xd8>)
 8013c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c42:	601a      	str	r2, [r3, #0]
 8013c44:	f3bf 8f4f 	dsb	sy
 8013c48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013c4c:	bf00      	nop
 8013c4e:	3708      	adds	r7, #8
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}
 8013c54:	2000380c 	.word	0x2000380c
 8013c58:	2000370c 	.word	0x2000370c
 8013c5c:	20003818 	.word	0x20003818
 8013c60:	20003828 	.word	0x20003828
 8013c64:	20003814 	.word	0x20003814
 8013c68:	20003710 	.word	0x20003710
 8013c6c:	e000ed04 	.word	0xe000ed04

08013c70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b084      	sub	sp, #16
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013c78:	f001 f9b6 	bl	8014fe8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d102      	bne.n	8013c88 <vTaskDelete+0x18>
 8013c82:	4b39      	ldr	r3, [pc, #228]	@ (8013d68 <vTaskDelete+0xf8>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	e000      	b.n	8013c8a <vTaskDelete+0x1a>
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	3304      	adds	r3, #4
 8013c90:	4618      	mov	r0, r3
 8013c92:	f7fe ffd9 	bl	8012c48 <uxListRemove>
 8013c96:	4603      	mov	r3, r0
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d115      	bne.n	8013cc8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ca0:	4932      	ldr	r1, [pc, #200]	@ (8013d6c <vTaskDelete+0xfc>)
 8013ca2:	4613      	mov	r3, r2
 8013ca4:	009b      	lsls	r3, r3, #2
 8013ca6:	4413      	add	r3, r2
 8013ca8:	009b      	lsls	r3, r3, #2
 8013caa:	440b      	add	r3, r1
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d10a      	bne.n	8013cc8 <vTaskDelete+0x58>
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cb6:	2201      	movs	r2, #1
 8013cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8013cbc:	43da      	mvns	r2, r3
 8013cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8013d70 <vTaskDelete+0x100>)
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	4013      	ands	r3, r2
 8013cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8013d70 <vTaskDelete+0x100>)
 8013cc6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d004      	beq.n	8013cda <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	3318      	adds	r3, #24
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7fe ffb7 	bl	8012c48 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8013cda:	4b26      	ldr	r3, [pc, #152]	@ (8013d74 <vTaskDelete+0x104>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	3301      	adds	r3, #1
 8013ce0:	4a24      	ldr	r2, [pc, #144]	@ (8013d74 <vTaskDelete+0x104>)
 8013ce2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8013ce4:	4b20      	ldr	r3, [pc, #128]	@ (8013d68 <vTaskDelete+0xf8>)
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	68fa      	ldr	r2, [r7, #12]
 8013cea:	429a      	cmp	r2, r3
 8013cec:	d10b      	bne.n	8013d06 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	3304      	adds	r3, #4
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	4820      	ldr	r0, [pc, #128]	@ (8013d78 <vTaskDelete+0x108>)
 8013cf6:	f7fe ff4a 	bl	8012b8e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8013cfa:	4b20      	ldr	r3, [pc, #128]	@ (8013d7c <vTaskDelete+0x10c>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	3301      	adds	r3, #1
 8013d00:	4a1e      	ldr	r2, [pc, #120]	@ (8013d7c <vTaskDelete+0x10c>)
 8013d02:	6013      	str	r3, [r2, #0]
 8013d04:	e009      	b.n	8013d1a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8013d06:	4b1e      	ldr	r3, [pc, #120]	@ (8013d80 <vTaskDelete+0x110>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	3b01      	subs	r3, #1
 8013d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8013d80 <vTaskDelete+0x110>)
 8013d0e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8013d10:	68f8      	ldr	r0, [r7, #12]
 8013d12:	f000 fca9 	bl	8014668 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8013d16:	f000 fcbd 	bl	8014694 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8013d1a:	f001 f997 	bl	801504c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8013d1e:	4b19      	ldr	r3, [pc, #100]	@ (8013d84 <vTaskDelete+0x114>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d01c      	beq.n	8013d60 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8013d26:	4b10      	ldr	r3, [pc, #64]	@ (8013d68 <vTaskDelete+0xf8>)
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	68fa      	ldr	r2, [r7, #12]
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d117      	bne.n	8013d60 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8013d30:	4b15      	ldr	r3, [pc, #84]	@ (8013d88 <vTaskDelete+0x118>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d00b      	beq.n	8013d50 <vTaskDelete+0xe0>
	__asm volatile
 8013d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d3c:	f383 8811 	msr	BASEPRI, r3
 8013d40:	f3bf 8f6f 	isb	sy
 8013d44:	f3bf 8f4f 	dsb	sy
 8013d48:	60bb      	str	r3, [r7, #8]
}
 8013d4a:	bf00      	nop
 8013d4c:	bf00      	nop
 8013d4e:	e7fd      	b.n	8013d4c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8013d50:	4b0e      	ldr	r3, [pc, #56]	@ (8013d8c <vTaskDelete+0x11c>)
 8013d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d56:	601a      	str	r2, [r3, #0]
 8013d58:	f3bf 8f4f 	dsb	sy
 8013d5c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013d60:	bf00      	nop
 8013d62:	3710      	adds	r7, #16
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}
 8013d68:	2000370c 	.word	0x2000370c
 8013d6c:	20003710 	.word	0x20003710
 8013d70:	20003814 	.word	0x20003814
 8013d74:	20003828 	.word	0x20003828
 8013d78:	200037e0 	.word	0x200037e0
 8013d7c:	200037f4 	.word	0x200037f4
 8013d80:	2000380c 	.word	0x2000380c
 8013d84:	20003818 	.word	0x20003818
 8013d88:	20003834 	.word	0x20003834
 8013d8c:	e000ed04 	.word	0xe000ed04

08013d90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b084      	sub	sp, #16
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013d98:	2300      	movs	r3, #0
 8013d9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d018      	beq.n	8013dd4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013da2:	4b14      	ldr	r3, [pc, #80]	@ (8013df4 <vTaskDelay+0x64>)
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d00b      	beq.n	8013dc2 <vTaskDelay+0x32>
	__asm volatile
 8013daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dae:	f383 8811 	msr	BASEPRI, r3
 8013db2:	f3bf 8f6f 	isb	sy
 8013db6:	f3bf 8f4f 	dsb	sy
 8013dba:	60bb      	str	r3, [r7, #8]
}
 8013dbc:	bf00      	nop
 8013dbe:	bf00      	nop
 8013dc0:	e7fd      	b.n	8013dbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013dc2:	f000 f8d7 	bl	8013f74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013dc6:	2100      	movs	r1, #0
 8013dc8:	6878      	ldr	r0, [r7, #4]
 8013dca:	f000 ff75 	bl	8014cb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013dce:	f000 f8df 	bl	8013f90 <xTaskResumeAll>
 8013dd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d107      	bne.n	8013dea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8013dda:	4b07      	ldr	r3, [pc, #28]	@ (8013df8 <vTaskDelay+0x68>)
 8013ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013de0:	601a      	str	r2, [r3, #0]
 8013de2:	f3bf 8f4f 	dsb	sy
 8013de6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013dea:	bf00      	nop
 8013dec:	3710      	adds	r7, #16
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
 8013df2:	bf00      	nop
 8013df4:	20003834 	.word	0x20003834
 8013df8:	e000ed04 	.word	0xe000ed04

08013dfc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b088      	sub	sp, #32
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8013e08:	69bb      	ldr	r3, [r7, #24]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d10b      	bne.n	8013e26 <eTaskGetState+0x2a>
	__asm volatile
 8013e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e12:	f383 8811 	msr	BASEPRI, r3
 8013e16:	f3bf 8f6f 	isb	sy
 8013e1a:	f3bf 8f4f 	dsb	sy
 8013e1e:	60bb      	str	r3, [r7, #8]
}
 8013e20:	bf00      	nop
 8013e22:	bf00      	nop
 8013e24:	e7fd      	b.n	8013e22 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8013e26:	4b24      	ldr	r3, [pc, #144]	@ (8013eb8 <eTaskGetState+0xbc>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	69ba      	ldr	r2, [r7, #24]
 8013e2c:	429a      	cmp	r2, r3
 8013e2e:	d102      	bne.n	8013e36 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8013e30:	2300      	movs	r3, #0
 8013e32:	77fb      	strb	r3, [r7, #31]
 8013e34:	e03a      	b.n	8013eac <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8013e36:	f001 f8d7 	bl	8014fe8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8013e3a:	69bb      	ldr	r3, [r7, #24]
 8013e3c:	695b      	ldr	r3, [r3, #20]
 8013e3e:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8013e40:	4b1e      	ldr	r3, [pc, #120]	@ (8013ebc <eTaskGetState+0xc0>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8013e46:	4b1e      	ldr	r3, [pc, #120]	@ (8013ec0 <eTaskGetState+0xc4>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8013e4c:	f001 f8fe 	bl	801504c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8013e50:	697a      	ldr	r2, [r7, #20]
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d003      	beq.n	8013e60 <eTaskGetState+0x64>
 8013e58:	697a      	ldr	r2, [r7, #20]
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d102      	bne.n	8013e66 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8013e60:	2302      	movs	r3, #2
 8013e62:	77fb      	strb	r3, [r7, #31]
 8013e64:	e022      	b.n	8013eac <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	4a16      	ldr	r2, [pc, #88]	@ (8013ec4 <eTaskGetState+0xc8>)
 8013e6a:	4293      	cmp	r3, r2
 8013e6c:	d112      	bne.n	8013e94 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8013e6e:	69bb      	ldr	r3, [r7, #24]
 8013e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d10b      	bne.n	8013e8e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013e76:	69bb      	ldr	r3, [r7, #24]
 8013e78:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8013e7c:	b2db      	uxtb	r3, r3
 8013e7e:	2b01      	cmp	r3, #1
 8013e80:	d102      	bne.n	8013e88 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8013e82:	2302      	movs	r3, #2
 8013e84:	77fb      	strb	r3, [r7, #31]
 8013e86:	e011      	b.n	8013eac <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8013e88:	2303      	movs	r3, #3
 8013e8a:	77fb      	strb	r3, [r7, #31]
 8013e8c:	e00e      	b.n	8013eac <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8013e8e:	2302      	movs	r3, #2
 8013e90:	77fb      	strb	r3, [r7, #31]
 8013e92:	e00b      	b.n	8013eac <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8013e94:	697b      	ldr	r3, [r7, #20]
 8013e96:	4a0c      	ldr	r2, [pc, #48]	@ (8013ec8 <eTaskGetState+0xcc>)
 8013e98:	4293      	cmp	r3, r2
 8013e9a:	d002      	beq.n	8013ea2 <eTaskGetState+0xa6>
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d102      	bne.n	8013ea8 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8013ea2:	2304      	movs	r3, #4
 8013ea4:	77fb      	strb	r3, [r7, #31]
 8013ea6:	e001      	b.n	8013eac <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8013eac:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3720      	adds	r7, #32
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	2000370c 	.word	0x2000370c
 8013ebc:	200037c4 	.word	0x200037c4
 8013ec0:	200037c8 	.word	0x200037c8
 8013ec4:	200037f8 	.word	0x200037f8
 8013ec8:	200037e0 	.word	0x200037e0

08013ecc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b086      	sub	sp, #24
 8013ed0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8013ed2:	4b20      	ldr	r3, [pc, #128]	@ (8013f54 <vTaskStartScheduler+0x88>)
 8013ed4:	9301      	str	r3, [sp, #4]
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	9300      	str	r3, [sp, #0]
 8013eda:	2300      	movs	r3, #0
 8013edc:	2240      	movs	r2, #64	@ 0x40
 8013ede:	491e      	ldr	r1, [pc, #120]	@ (8013f58 <vTaskStartScheduler+0x8c>)
 8013ee0:	481e      	ldr	r0, [pc, #120]	@ (8013f5c <vTaskStartScheduler+0x90>)
 8013ee2:	f7ff fd6b 	bl	80139bc <xTaskCreate>
 8013ee6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	2b01      	cmp	r3, #1
 8013eec:	d11d      	bne.n	8013f2a <vTaskStartScheduler+0x5e>
	__asm volatile
 8013eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ef2:	f383 8811 	msr	BASEPRI, r3
 8013ef6:	f3bf 8f6f 	isb	sy
 8013efa:	f3bf 8f4f 	dsb	sy
 8013efe:	60bb      	str	r3, [r7, #8]
}
 8013f00:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013f02:	4b17      	ldr	r3, [pc, #92]	@ (8013f60 <vTaskStartScheduler+0x94>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	3358      	adds	r3, #88	@ 0x58
 8013f08:	4a16      	ldr	r2, [pc, #88]	@ (8013f64 <vTaskStartScheduler+0x98>)
 8013f0a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013f0c:	4b16      	ldr	r3, [pc, #88]	@ (8013f68 <vTaskStartScheduler+0x9c>)
 8013f0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013f12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013f14:	4b15      	ldr	r3, [pc, #84]	@ (8013f6c <vTaskStartScheduler+0xa0>)
 8013f16:	2201      	movs	r2, #1
 8013f18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013f1a:	4b15      	ldr	r3, [pc, #84]	@ (8013f70 <vTaskStartScheduler+0xa4>)
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8013f20:	f7ef fb96 	bl	8003650 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013f24:	f000 ffbc 	bl	8014ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013f28:	e00f      	b.n	8013f4a <vTaskStartScheduler+0x7e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013f30:	d10b      	bne.n	8013f4a <vTaskStartScheduler+0x7e>
	__asm volatile
 8013f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f36:	f383 8811 	msr	BASEPRI, r3
 8013f3a:	f3bf 8f6f 	isb	sy
 8013f3e:	f3bf 8f4f 	dsb	sy
 8013f42:	607b      	str	r3, [r7, #4]
}
 8013f44:	bf00      	nop
 8013f46:	bf00      	nop
 8013f48:	e7fd      	b.n	8013f46 <vTaskStartScheduler+0x7a>
}
 8013f4a:	bf00      	nop
 8013f4c:	3710      	adds	r7, #16
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}
 8013f52:	bf00      	nop
 8013f54:	20003830 	.word	0x20003830
 8013f58:	0801bdd0 	.word	0x0801bdd0
 8013f5c:	0801455d 	.word	0x0801455d
 8013f60:	2000370c 	.word	0x2000370c
 8013f64:	20000494 	.word	0x20000494
 8013f68:	2000382c 	.word	0x2000382c
 8013f6c:	20003818 	.word	0x20003818
 8013f70:	20003810 	.word	0x20003810

08013f74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013f74:	b480      	push	{r7}
 8013f76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013f78:	4b04      	ldr	r3, [pc, #16]	@ (8013f8c <vTaskSuspendAll+0x18>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	3301      	adds	r3, #1
 8013f7e:	4a03      	ldr	r2, [pc, #12]	@ (8013f8c <vTaskSuspendAll+0x18>)
 8013f80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013f82:	bf00      	nop
 8013f84:	46bd      	mov	sp, r7
 8013f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8a:	4770      	bx	lr
 8013f8c:	20003834 	.word	0x20003834

08013f90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b084      	sub	sp, #16
 8013f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013f96:	2300      	movs	r3, #0
 8013f98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013f9e:	4b42      	ldr	r3, [pc, #264]	@ (80140a8 <xTaskResumeAll+0x118>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d10b      	bne.n	8013fbe <xTaskResumeAll+0x2e>
	__asm volatile
 8013fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013faa:	f383 8811 	msr	BASEPRI, r3
 8013fae:	f3bf 8f6f 	isb	sy
 8013fb2:	f3bf 8f4f 	dsb	sy
 8013fb6:	603b      	str	r3, [r7, #0]
}
 8013fb8:	bf00      	nop
 8013fba:	bf00      	nop
 8013fbc:	e7fd      	b.n	8013fba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013fbe:	f001 f813 	bl	8014fe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013fc2:	4b39      	ldr	r3, [pc, #228]	@ (80140a8 <xTaskResumeAll+0x118>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	3b01      	subs	r3, #1
 8013fc8:	4a37      	ldr	r2, [pc, #220]	@ (80140a8 <xTaskResumeAll+0x118>)
 8013fca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013fcc:	4b36      	ldr	r3, [pc, #216]	@ (80140a8 <xTaskResumeAll+0x118>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d161      	bne.n	8014098 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013fd4:	4b35      	ldr	r3, [pc, #212]	@ (80140ac <xTaskResumeAll+0x11c>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d05d      	beq.n	8014098 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013fdc:	e02e      	b.n	801403c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013fde:	4b34      	ldr	r3, [pc, #208]	@ (80140b0 <xTaskResumeAll+0x120>)
 8013fe0:	68db      	ldr	r3, [r3, #12]
 8013fe2:	68db      	ldr	r3, [r3, #12]
 8013fe4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	3318      	adds	r3, #24
 8013fea:	4618      	mov	r0, r3
 8013fec:	f7fe fe2c 	bl	8012c48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	3304      	adds	r3, #4
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7fe fe27 	bl	8012c48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ffe:	2201      	movs	r2, #1
 8014000:	409a      	lsls	r2, r3
 8014002:	4b2c      	ldr	r3, [pc, #176]	@ (80140b4 <xTaskResumeAll+0x124>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	4313      	orrs	r3, r2
 8014008:	4a2a      	ldr	r2, [pc, #168]	@ (80140b4 <xTaskResumeAll+0x124>)
 801400a:	6013      	str	r3, [r2, #0]
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014010:	4613      	mov	r3, r2
 8014012:	009b      	lsls	r3, r3, #2
 8014014:	4413      	add	r3, r2
 8014016:	009b      	lsls	r3, r3, #2
 8014018:	4a27      	ldr	r2, [pc, #156]	@ (80140b8 <xTaskResumeAll+0x128>)
 801401a:	441a      	add	r2, r3
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	3304      	adds	r3, #4
 8014020:	4619      	mov	r1, r3
 8014022:	4610      	mov	r0, r2
 8014024:	f7fe fdb3 	bl	8012b8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801402c:	4b23      	ldr	r3, [pc, #140]	@ (80140bc <xTaskResumeAll+0x12c>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014032:	429a      	cmp	r2, r3
 8014034:	d302      	bcc.n	801403c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014036:	4b22      	ldr	r3, [pc, #136]	@ (80140c0 <xTaskResumeAll+0x130>)
 8014038:	2201      	movs	r2, #1
 801403a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801403c:	4b1c      	ldr	r3, [pc, #112]	@ (80140b0 <xTaskResumeAll+0x120>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d1cc      	bne.n	8013fde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d001      	beq.n	801404e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801404a:	f000 fb23 	bl	8014694 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801404e:	4b1d      	ldr	r3, [pc, #116]	@ (80140c4 <xTaskResumeAll+0x134>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d010      	beq.n	801407c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801405a:	f000 f837 	bl	80140cc <xTaskIncrementTick>
 801405e:	4603      	mov	r3, r0
 8014060:	2b00      	cmp	r3, #0
 8014062:	d002      	beq.n	801406a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014064:	4b16      	ldr	r3, [pc, #88]	@ (80140c0 <xTaskResumeAll+0x130>)
 8014066:	2201      	movs	r2, #1
 8014068:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	3b01      	subs	r3, #1
 801406e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d1f1      	bne.n	801405a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014076:	4b13      	ldr	r3, [pc, #76]	@ (80140c4 <xTaskResumeAll+0x134>)
 8014078:	2200      	movs	r2, #0
 801407a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801407c:	4b10      	ldr	r3, [pc, #64]	@ (80140c0 <xTaskResumeAll+0x130>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d009      	beq.n	8014098 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014084:	2301      	movs	r3, #1
 8014086:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014088:	4b0f      	ldr	r3, [pc, #60]	@ (80140c8 <xTaskResumeAll+0x138>)
 801408a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801408e:	601a      	str	r2, [r3, #0]
 8014090:	f3bf 8f4f 	dsb	sy
 8014094:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014098:	f000 ffd8 	bl	801504c <vPortExitCritical>

	return xAlreadyYielded;
 801409c:	68bb      	ldr	r3, [r7, #8]
}
 801409e:	4618      	mov	r0, r3
 80140a0:	3710      	adds	r7, #16
 80140a2:	46bd      	mov	sp, r7
 80140a4:	bd80      	pop	{r7, pc}
 80140a6:	bf00      	nop
 80140a8:	20003834 	.word	0x20003834
 80140ac:	2000380c 	.word	0x2000380c
 80140b0:	200037cc 	.word	0x200037cc
 80140b4:	20003814 	.word	0x20003814
 80140b8:	20003710 	.word	0x20003710
 80140bc:	2000370c 	.word	0x2000370c
 80140c0:	20003820 	.word	0x20003820
 80140c4:	2000381c 	.word	0x2000381c
 80140c8:	e000ed04 	.word	0xe000ed04

080140cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b086      	sub	sp, #24
 80140d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80140d2:	2300      	movs	r3, #0
 80140d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80140d6:	4b4f      	ldr	r3, [pc, #316]	@ (8014214 <xTaskIncrementTick+0x148>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	f040 808f 	bne.w	80141fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80140e0:	4b4d      	ldr	r3, [pc, #308]	@ (8014218 <xTaskIncrementTick+0x14c>)
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	3301      	adds	r3, #1
 80140e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80140e8:	4a4b      	ldr	r2, [pc, #300]	@ (8014218 <xTaskIncrementTick+0x14c>)
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d121      	bne.n	8014138 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80140f4:	4b49      	ldr	r3, [pc, #292]	@ (801421c <xTaskIncrementTick+0x150>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d00b      	beq.n	8014116 <xTaskIncrementTick+0x4a>
	__asm volatile
 80140fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014102:	f383 8811 	msr	BASEPRI, r3
 8014106:	f3bf 8f6f 	isb	sy
 801410a:	f3bf 8f4f 	dsb	sy
 801410e:	603b      	str	r3, [r7, #0]
}
 8014110:	bf00      	nop
 8014112:	bf00      	nop
 8014114:	e7fd      	b.n	8014112 <xTaskIncrementTick+0x46>
 8014116:	4b41      	ldr	r3, [pc, #260]	@ (801421c <xTaskIncrementTick+0x150>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	60fb      	str	r3, [r7, #12]
 801411c:	4b40      	ldr	r3, [pc, #256]	@ (8014220 <xTaskIncrementTick+0x154>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	4a3e      	ldr	r2, [pc, #248]	@ (801421c <xTaskIncrementTick+0x150>)
 8014122:	6013      	str	r3, [r2, #0]
 8014124:	4a3e      	ldr	r2, [pc, #248]	@ (8014220 <xTaskIncrementTick+0x154>)
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	6013      	str	r3, [r2, #0]
 801412a:	4b3e      	ldr	r3, [pc, #248]	@ (8014224 <xTaskIncrementTick+0x158>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	3301      	adds	r3, #1
 8014130:	4a3c      	ldr	r2, [pc, #240]	@ (8014224 <xTaskIncrementTick+0x158>)
 8014132:	6013      	str	r3, [r2, #0]
 8014134:	f000 faae 	bl	8014694 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014138:	4b3b      	ldr	r3, [pc, #236]	@ (8014228 <xTaskIncrementTick+0x15c>)
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	693a      	ldr	r2, [r7, #16]
 801413e:	429a      	cmp	r2, r3
 8014140:	d348      	bcc.n	80141d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014142:	4b36      	ldr	r3, [pc, #216]	@ (801421c <xTaskIncrementTick+0x150>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d104      	bne.n	8014156 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801414c:	4b36      	ldr	r3, [pc, #216]	@ (8014228 <xTaskIncrementTick+0x15c>)
 801414e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014152:	601a      	str	r2, [r3, #0]
					break;
 8014154:	e03e      	b.n	80141d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014156:	4b31      	ldr	r3, [pc, #196]	@ (801421c <xTaskIncrementTick+0x150>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	68db      	ldr	r3, [r3, #12]
 801415c:	68db      	ldr	r3, [r3, #12]
 801415e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	685b      	ldr	r3, [r3, #4]
 8014164:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014166:	693a      	ldr	r2, [r7, #16]
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	429a      	cmp	r2, r3
 801416c:	d203      	bcs.n	8014176 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801416e:	4a2e      	ldr	r2, [pc, #184]	@ (8014228 <xTaskIncrementTick+0x15c>)
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014174:	e02e      	b.n	80141d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	3304      	adds	r3, #4
 801417a:	4618      	mov	r0, r3
 801417c:	f7fe fd64 	bl	8012c48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014184:	2b00      	cmp	r3, #0
 8014186:	d004      	beq.n	8014192 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	3318      	adds	r3, #24
 801418c:	4618      	mov	r0, r3
 801418e:	f7fe fd5b 	bl	8012c48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014196:	2201      	movs	r2, #1
 8014198:	409a      	lsls	r2, r3
 801419a:	4b24      	ldr	r3, [pc, #144]	@ (801422c <xTaskIncrementTick+0x160>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	4313      	orrs	r3, r2
 80141a0:	4a22      	ldr	r2, [pc, #136]	@ (801422c <xTaskIncrementTick+0x160>)
 80141a2:	6013      	str	r3, [r2, #0]
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141a8:	4613      	mov	r3, r2
 80141aa:	009b      	lsls	r3, r3, #2
 80141ac:	4413      	add	r3, r2
 80141ae:	009b      	lsls	r3, r3, #2
 80141b0:	4a1f      	ldr	r2, [pc, #124]	@ (8014230 <xTaskIncrementTick+0x164>)
 80141b2:	441a      	add	r2, r3
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	3304      	adds	r3, #4
 80141b8:	4619      	mov	r1, r3
 80141ba:	4610      	mov	r0, r2
 80141bc:	f7fe fce7 	bl	8012b8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141c4:	4b1b      	ldr	r3, [pc, #108]	@ (8014234 <xTaskIncrementTick+0x168>)
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d3b9      	bcc.n	8014142 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80141ce:	2301      	movs	r3, #1
 80141d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80141d2:	e7b6      	b.n	8014142 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80141d4:	4b17      	ldr	r3, [pc, #92]	@ (8014234 <xTaskIncrementTick+0x168>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141da:	4915      	ldr	r1, [pc, #84]	@ (8014230 <xTaskIncrementTick+0x164>)
 80141dc:	4613      	mov	r3, r2
 80141de:	009b      	lsls	r3, r3, #2
 80141e0:	4413      	add	r3, r2
 80141e2:	009b      	lsls	r3, r3, #2
 80141e4:	440b      	add	r3, r1
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	2b01      	cmp	r3, #1
 80141ea:	d901      	bls.n	80141f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80141ec:	2301      	movs	r3, #1
 80141ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80141f0:	4b11      	ldr	r3, [pc, #68]	@ (8014238 <xTaskIncrementTick+0x16c>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d007      	beq.n	8014208 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80141f8:	2301      	movs	r3, #1
 80141fa:	617b      	str	r3, [r7, #20]
 80141fc:	e004      	b.n	8014208 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80141fe:	4b0f      	ldr	r3, [pc, #60]	@ (801423c <xTaskIncrementTick+0x170>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	3301      	adds	r3, #1
 8014204:	4a0d      	ldr	r2, [pc, #52]	@ (801423c <xTaskIncrementTick+0x170>)
 8014206:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014208:	697b      	ldr	r3, [r7, #20]
}
 801420a:	4618      	mov	r0, r3
 801420c:	3718      	adds	r7, #24
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	20003834 	.word	0x20003834
 8014218:	20003810 	.word	0x20003810
 801421c:	200037c4 	.word	0x200037c4
 8014220:	200037c8 	.word	0x200037c8
 8014224:	20003824 	.word	0x20003824
 8014228:	2000382c 	.word	0x2000382c
 801422c:	20003814 	.word	0x20003814
 8014230:	20003710 	.word	0x20003710
 8014234:	2000370c 	.word	0x2000370c
 8014238:	20003820 	.word	0x20003820
 801423c:	2000381c 	.word	0x2000381c

08014240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b086      	sub	sp, #24
 8014244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014246:	4b35      	ldr	r3, [pc, #212]	@ (801431c <vTaskSwitchContext+0xdc>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d003      	beq.n	8014256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801424e:	4b34      	ldr	r3, [pc, #208]	@ (8014320 <vTaskSwitchContext+0xe0>)
 8014250:	2201      	movs	r2, #1
 8014252:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014254:	e05e      	b.n	8014314 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8014256:	4b32      	ldr	r3, [pc, #200]	@ (8014320 <vTaskSwitchContext+0xe0>)
 8014258:	2200      	movs	r2, #0
 801425a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801425c:	f7ef f9ff 	bl	800365e <getRunTimeCounterValue>
 8014260:	4603      	mov	r3, r0
 8014262:	4a30      	ldr	r2, [pc, #192]	@ (8014324 <vTaskSwitchContext+0xe4>)
 8014264:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8014266:	4b2f      	ldr	r3, [pc, #188]	@ (8014324 <vTaskSwitchContext+0xe4>)
 8014268:	681a      	ldr	r2, [r3, #0]
 801426a:	4b2f      	ldr	r3, [pc, #188]	@ (8014328 <vTaskSwitchContext+0xe8>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	429a      	cmp	r2, r3
 8014270:	d909      	bls.n	8014286 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8014272:	4b2e      	ldr	r3, [pc, #184]	@ (801432c <vTaskSwitchContext+0xec>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014278:	4a2a      	ldr	r2, [pc, #168]	@ (8014324 <vTaskSwitchContext+0xe4>)
 801427a:	6810      	ldr	r0, [r2, #0]
 801427c:	4a2a      	ldr	r2, [pc, #168]	@ (8014328 <vTaskSwitchContext+0xe8>)
 801427e:	6812      	ldr	r2, [r2, #0]
 8014280:	1a82      	subs	r2, r0, r2
 8014282:	440a      	add	r2, r1
 8014284:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8014286:	4b27      	ldr	r3, [pc, #156]	@ (8014324 <vTaskSwitchContext+0xe4>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	4a27      	ldr	r2, [pc, #156]	@ (8014328 <vTaskSwitchContext+0xe8>)
 801428c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801428e:	4b28      	ldr	r3, [pc, #160]	@ (8014330 <vTaskSwitchContext+0xf0>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	fab3 f383 	clz	r3, r3
 801429a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801429c:	7afb      	ldrb	r3, [r7, #11]
 801429e:	f1c3 031f 	rsb	r3, r3, #31
 80142a2:	617b      	str	r3, [r7, #20]
 80142a4:	4923      	ldr	r1, [pc, #140]	@ (8014334 <vTaskSwitchContext+0xf4>)
 80142a6:	697a      	ldr	r2, [r7, #20]
 80142a8:	4613      	mov	r3, r2
 80142aa:	009b      	lsls	r3, r3, #2
 80142ac:	4413      	add	r3, r2
 80142ae:	009b      	lsls	r3, r3, #2
 80142b0:	440b      	add	r3, r1
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d10b      	bne.n	80142d0 <vTaskSwitchContext+0x90>
	__asm volatile
 80142b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142bc:	f383 8811 	msr	BASEPRI, r3
 80142c0:	f3bf 8f6f 	isb	sy
 80142c4:	f3bf 8f4f 	dsb	sy
 80142c8:	607b      	str	r3, [r7, #4]
}
 80142ca:	bf00      	nop
 80142cc:	bf00      	nop
 80142ce:	e7fd      	b.n	80142cc <vTaskSwitchContext+0x8c>
 80142d0:	697a      	ldr	r2, [r7, #20]
 80142d2:	4613      	mov	r3, r2
 80142d4:	009b      	lsls	r3, r3, #2
 80142d6:	4413      	add	r3, r2
 80142d8:	009b      	lsls	r3, r3, #2
 80142da:	4a16      	ldr	r2, [pc, #88]	@ (8014334 <vTaskSwitchContext+0xf4>)
 80142dc:	4413      	add	r3, r2
 80142de:	613b      	str	r3, [r7, #16]
 80142e0:	693b      	ldr	r3, [r7, #16]
 80142e2:	685b      	ldr	r3, [r3, #4]
 80142e4:	685a      	ldr	r2, [r3, #4]
 80142e6:	693b      	ldr	r3, [r7, #16]
 80142e8:	605a      	str	r2, [r3, #4]
 80142ea:	693b      	ldr	r3, [r7, #16]
 80142ec:	685a      	ldr	r2, [r3, #4]
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	3308      	adds	r3, #8
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d104      	bne.n	8014300 <vTaskSwitchContext+0xc0>
 80142f6:	693b      	ldr	r3, [r7, #16]
 80142f8:	685b      	ldr	r3, [r3, #4]
 80142fa:	685a      	ldr	r2, [r3, #4]
 80142fc:	693b      	ldr	r3, [r7, #16]
 80142fe:	605a      	str	r2, [r3, #4]
 8014300:	693b      	ldr	r3, [r7, #16]
 8014302:	685b      	ldr	r3, [r3, #4]
 8014304:	68db      	ldr	r3, [r3, #12]
 8014306:	4a09      	ldr	r2, [pc, #36]	@ (801432c <vTaskSwitchContext+0xec>)
 8014308:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801430a:	4b08      	ldr	r3, [pc, #32]	@ (801432c <vTaskSwitchContext+0xec>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	3358      	adds	r3, #88	@ 0x58
 8014310:	4a09      	ldr	r2, [pc, #36]	@ (8014338 <vTaskSwitchContext+0xf8>)
 8014312:	6013      	str	r3, [r2, #0]
}
 8014314:	bf00      	nop
 8014316:	3718      	adds	r7, #24
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}
 801431c:	20003834 	.word	0x20003834
 8014320:	20003820 	.word	0x20003820
 8014324:	2000383c 	.word	0x2000383c
 8014328:	20003838 	.word	0x20003838
 801432c:	2000370c 	.word	0x2000370c
 8014330:	20003814 	.word	0x20003814
 8014334:	20003710 	.word	0x20003710
 8014338:	20000494 	.word	0x20000494

0801433c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b084      	sub	sp, #16
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
 8014344:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d10b      	bne.n	8014364 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801434c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014350:	f383 8811 	msr	BASEPRI, r3
 8014354:	f3bf 8f6f 	isb	sy
 8014358:	f3bf 8f4f 	dsb	sy
 801435c:	60fb      	str	r3, [r7, #12]
}
 801435e:	bf00      	nop
 8014360:	bf00      	nop
 8014362:	e7fd      	b.n	8014360 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014364:	4b07      	ldr	r3, [pc, #28]	@ (8014384 <vTaskPlaceOnEventList+0x48>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	3318      	adds	r3, #24
 801436a:	4619      	mov	r1, r3
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f7fe fc32 	bl	8012bd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014372:	2101      	movs	r1, #1
 8014374:	6838      	ldr	r0, [r7, #0]
 8014376:	f000 fc9f 	bl	8014cb8 <prvAddCurrentTaskToDelayedList>
}
 801437a:	bf00      	nop
 801437c:	3710      	adds	r7, #16
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}
 8014382:	bf00      	nop
 8014384:	2000370c 	.word	0x2000370c

08014388 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b086      	sub	sp, #24
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	68db      	ldr	r3, [r3, #12]
 8014394:	68db      	ldr	r3, [r3, #12]
 8014396:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d10b      	bne.n	80143b6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801439e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143a2:	f383 8811 	msr	BASEPRI, r3
 80143a6:	f3bf 8f6f 	isb	sy
 80143aa:	f3bf 8f4f 	dsb	sy
 80143ae:	60fb      	str	r3, [r7, #12]
}
 80143b0:	bf00      	nop
 80143b2:	bf00      	nop
 80143b4:	e7fd      	b.n	80143b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	3318      	adds	r3, #24
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7fe fc44 	bl	8012c48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143c0:	4b1d      	ldr	r3, [pc, #116]	@ (8014438 <xTaskRemoveFromEventList+0xb0>)
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d11c      	bne.n	8014402 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80143c8:	693b      	ldr	r3, [r7, #16]
 80143ca:	3304      	adds	r3, #4
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7fe fc3b 	bl	8012c48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80143d2:	693b      	ldr	r3, [r7, #16]
 80143d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143d6:	2201      	movs	r2, #1
 80143d8:	409a      	lsls	r2, r3
 80143da:	4b18      	ldr	r3, [pc, #96]	@ (801443c <xTaskRemoveFromEventList+0xb4>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	4313      	orrs	r3, r2
 80143e0:	4a16      	ldr	r2, [pc, #88]	@ (801443c <xTaskRemoveFromEventList+0xb4>)
 80143e2:	6013      	str	r3, [r2, #0]
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143e8:	4613      	mov	r3, r2
 80143ea:	009b      	lsls	r3, r3, #2
 80143ec:	4413      	add	r3, r2
 80143ee:	009b      	lsls	r3, r3, #2
 80143f0:	4a13      	ldr	r2, [pc, #76]	@ (8014440 <xTaskRemoveFromEventList+0xb8>)
 80143f2:	441a      	add	r2, r3
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	3304      	adds	r3, #4
 80143f8:	4619      	mov	r1, r3
 80143fa:	4610      	mov	r0, r2
 80143fc:	f7fe fbc7 	bl	8012b8e <vListInsertEnd>
 8014400:	e005      	b.n	801440e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014402:	693b      	ldr	r3, [r7, #16]
 8014404:	3318      	adds	r3, #24
 8014406:	4619      	mov	r1, r3
 8014408:	480e      	ldr	r0, [pc, #56]	@ (8014444 <xTaskRemoveFromEventList+0xbc>)
 801440a:	f7fe fbc0 	bl	8012b8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801440e:	693b      	ldr	r3, [r7, #16]
 8014410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014412:	4b0d      	ldr	r3, [pc, #52]	@ (8014448 <xTaskRemoveFromEventList+0xc0>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014418:	429a      	cmp	r2, r3
 801441a:	d905      	bls.n	8014428 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801441c:	2301      	movs	r3, #1
 801441e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014420:	4b0a      	ldr	r3, [pc, #40]	@ (801444c <xTaskRemoveFromEventList+0xc4>)
 8014422:	2201      	movs	r2, #1
 8014424:	601a      	str	r2, [r3, #0]
 8014426:	e001      	b.n	801442c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014428:	2300      	movs	r3, #0
 801442a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801442c:	697b      	ldr	r3, [r7, #20]
}
 801442e:	4618      	mov	r0, r3
 8014430:	3718      	adds	r7, #24
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}
 8014436:	bf00      	nop
 8014438:	20003834 	.word	0x20003834
 801443c:	20003814 	.word	0x20003814
 8014440:	20003710 	.word	0x20003710
 8014444:	200037cc 	.word	0x200037cc
 8014448:	2000370c 	.word	0x2000370c
 801444c:	20003820 	.word	0x20003820

08014450 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014450:	b480      	push	{r7}
 8014452:	b083      	sub	sp, #12
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014458:	4b06      	ldr	r3, [pc, #24]	@ (8014474 <vTaskInternalSetTimeOutState+0x24>)
 801445a:	681a      	ldr	r2, [r3, #0]
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014460:	4b05      	ldr	r3, [pc, #20]	@ (8014478 <vTaskInternalSetTimeOutState+0x28>)
 8014462:	681a      	ldr	r2, [r3, #0]
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	605a      	str	r2, [r3, #4]
}
 8014468:	bf00      	nop
 801446a:	370c      	adds	r7, #12
 801446c:	46bd      	mov	sp, r7
 801446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014472:	4770      	bx	lr
 8014474:	20003824 	.word	0x20003824
 8014478:	20003810 	.word	0x20003810

0801447c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b088      	sub	sp, #32
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
 8014484:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d10b      	bne.n	80144a4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801448c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014490:	f383 8811 	msr	BASEPRI, r3
 8014494:	f3bf 8f6f 	isb	sy
 8014498:	f3bf 8f4f 	dsb	sy
 801449c:	613b      	str	r3, [r7, #16]
}
 801449e:	bf00      	nop
 80144a0:	bf00      	nop
 80144a2:	e7fd      	b.n	80144a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80144a4:	683b      	ldr	r3, [r7, #0]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d10b      	bne.n	80144c2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80144aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144ae:	f383 8811 	msr	BASEPRI, r3
 80144b2:	f3bf 8f6f 	isb	sy
 80144b6:	f3bf 8f4f 	dsb	sy
 80144ba:	60fb      	str	r3, [r7, #12]
}
 80144bc:	bf00      	nop
 80144be:	bf00      	nop
 80144c0:	e7fd      	b.n	80144be <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80144c2:	f000 fd91 	bl	8014fe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80144c6:	4b1d      	ldr	r3, [pc, #116]	@ (801453c <xTaskCheckForTimeOut+0xc0>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	685b      	ldr	r3, [r3, #4]
 80144d0:	69ba      	ldr	r2, [r7, #24]
 80144d2:	1ad3      	subs	r3, r2, r3
 80144d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80144de:	d102      	bne.n	80144e6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80144e0:	2300      	movs	r3, #0
 80144e2:	61fb      	str	r3, [r7, #28]
 80144e4:	e023      	b.n	801452e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681a      	ldr	r2, [r3, #0]
 80144ea:	4b15      	ldr	r3, [pc, #84]	@ (8014540 <xTaskCheckForTimeOut+0xc4>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d007      	beq.n	8014502 <xTaskCheckForTimeOut+0x86>
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	685b      	ldr	r3, [r3, #4]
 80144f6:	69ba      	ldr	r2, [r7, #24]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d302      	bcc.n	8014502 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80144fc:	2301      	movs	r3, #1
 80144fe:	61fb      	str	r3, [r7, #28]
 8014500:	e015      	b.n	801452e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	697a      	ldr	r2, [r7, #20]
 8014508:	429a      	cmp	r2, r3
 801450a:	d20b      	bcs.n	8014524 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801450c:	683b      	ldr	r3, [r7, #0]
 801450e:	681a      	ldr	r2, [r3, #0]
 8014510:	697b      	ldr	r3, [r7, #20]
 8014512:	1ad2      	subs	r2, r2, r3
 8014514:	683b      	ldr	r3, [r7, #0]
 8014516:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f7ff ff99 	bl	8014450 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801451e:	2300      	movs	r3, #0
 8014520:	61fb      	str	r3, [r7, #28]
 8014522:	e004      	b.n	801452e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	2200      	movs	r2, #0
 8014528:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801452a:	2301      	movs	r3, #1
 801452c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801452e:	f000 fd8d 	bl	801504c <vPortExitCritical>

	return xReturn;
 8014532:	69fb      	ldr	r3, [r7, #28]
}
 8014534:	4618      	mov	r0, r3
 8014536:	3720      	adds	r7, #32
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}
 801453c:	20003810 	.word	0x20003810
 8014540:	20003824 	.word	0x20003824

08014544 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014544:	b480      	push	{r7}
 8014546:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014548:	4b03      	ldr	r3, [pc, #12]	@ (8014558 <vTaskMissedYield+0x14>)
 801454a:	2201      	movs	r2, #1
 801454c:	601a      	str	r2, [r3, #0]
}
 801454e:	bf00      	nop
 8014550:	46bd      	mov	sp, r7
 8014552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014556:	4770      	bx	lr
 8014558:	20003820 	.word	0x20003820

0801455c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b082      	sub	sp, #8
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014564:	f000 f852 	bl	801460c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014568:	4b06      	ldr	r3, [pc, #24]	@ (8014584 <prvIdleTask+0x28>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	2b01      	cmp	r3, #1
 801456e:	d9f9      	bls.n	8014564 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014570:	4b05      	ldr	r3, [pc, #20]	@ (8014588 <prvIdleTask+0x2c>)
 8014572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014576:	601a      	str	r2, [r3, #0]
 8014578:	f3bf 8f4f 	dsb	sy
 801457c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014580:	e7f0      	b.n	8014564 <prvIdleTask+0x8>
 8014582:	bf00      	nop
 8014584:	20003710 	.word	0x20003710
 8014588:	e000ed04 	.word	0xe000ed04

0801458c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b082      	sub	sp, #8
 8014590:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014592:	2300      	movs	r3, #0
 8014594:	607b      	str	r3, [r7, #4]
 8014596:	e00c      	b.n	80145b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014598:	687a      	ldr	r2, [r7, #4]
 801459a:	4613      	mov	r3, r2
 801459c:	009b      	lsls	r3, r3, #2
 801459e:	4413      	add	r3, r2
 80145a0:	009b      	lsls	r3, r3, #2
 80145a2:	4a12      	ldr	r2, [pc, #72]	@ (80145ec <prvInitialiseTaskLists+0x60>)
 80145a4:	4413      	add	r3, r2
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7fe fac4 	bl	8012b34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	3301      	adds	r3, #1
 80145b0:	607b      	str	r3, [r7, #4]
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2b06      	cmp	r3, #6
 80145b6:	d9ef      	bls.n	8014598 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80145b8:	480d      	ldr	r0, [pc, #52]	@ (80145f0 <prvInitialiseTaskLists+0x64>)
 80145ba:	f7fe fabb 	bl	8012b34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80145be:	480d      	ldr	r0, [pc, #52]	@ (80145f4 <prvInitialiseTaskLists+0x68>)
 80145c0:	f7fe fab8 	bl	8012b34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80145c4:	480c      	ldr	r0, [pc, #48]	@ (80145f8 <prvInitialiseTaskLists+0x6c>)
 80145c6:	f7fe fab5 	bl	8012b34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80145ca:	480c      	ldr	r0, [pc, #48]	@ (80145fc <prvInitialiseTaskLists+0x70>)
 80145cc:	f7fe fab2 	bl	8012b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80145d0:	480b      	ldr	r0, [pc, #44]	@ (8014600 <prvInitialiseTaskLists+0x74>)
 80145d2:	f7fe faaf 	bl	8012b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80145d6:	4b0b      	ldr	r3, [pc, #44]	@ (8014604 <prvInitialiseTaskLists+0x78>)
 80145d8:	4a05      	ldr	r2, [pc, #20]	@ (80145f0 <prvInitialiseTaskLists+0x64>)
 80145da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80145dc:	4b0a      	ldr	r3, [pc, #40]	@ (8014608 <prvInitialiseTaskLists+0x7c>)
 80145de:	4a05      	ldr	r2, [pc, #20]	@ (80145f4 <prvInitialiseTaskLists+0x68>)
 80145e0:	601a      	str	r2, [r3, #0]
}
 80145e2:	bf00      	nop
 80145e4:	3708      	adds	r7, #8
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}
 80145ea:	bf00      	nop
 80145ec:	20003710 	.word	0x20003710
 80145f0:	2000379c 	.word	0x2000379c
 80145f4:	200037b0 	.word	0x200037b0
 80145f8:	200037cc 	.word	0x200037cc
 80145fc:	200037e0 	.word	0x200037e0
 8014600:	200037f8 	.word	0x200037f8
 8014604:	200037c4 	.word	0x200037c4
 8014608:	200037c8 	.word	0x200037c8

0801460c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014612:	e019      	b.n	8014648 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014614:	f000 fce8 	bl	8014fe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014618:	4b10      	ldr	r3, [pc, #64]	@ (801465c <prvCheckTasksWaitingTermination+0x50>)
 801461a:	68db      	ldr	r3, [r3, #12]
 801461c:	68db      	ldr	r3, [r3, #12]
 801461e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	3304      	adds	r3, #4
 8014624:	4618      	mov	r0, r3
 8014626:	f7fe fb0f 	bl	8012c48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801462a:	4b0d      	ldr	r3, [pc, #52]	@ (8014660 <prvCheckTasksWaitingTermination+0x54>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	3b01      	subs	r3, #1
 8014630:	4a0b      	ldr	r2, [pc, #44]	@ (8014660 <prvCheckTasksWaitingTermination+0x54>)
 8014632:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014634:	4b0b      	ldr	r3, [pc, #44]	@ (8014664 <prvCheckTasksWaitingTermination+0x58>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	3b01      	subs	r3, #1
 801463a:	4a0a      	ldr	r2, [pc, #40]	@ (8014664 <prvCheckTasksWaitingTermination+0x58>)
 801463c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801463e:	f000 fd05 	bl	801504c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f000 f810 	bl	8014668 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014648:	4b06      	ldr	r3, [pc, #24]	@ (8014664 <prvCheckTasksWaitingTermination+0x58>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d1e1      	bne.n	8014614 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014650:	bf00      	nop
 8014652:	bf00      	nop
 8014654:	3708      	adds	r7, #8
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}
 801465a:	bf00      	nop
 801465c:	200037e0 	.word	0x200037e0
 8014660:	2000380c 	.word	0x2000380c
 8014664:	200037f4 	.word	0x200037f4

08014668 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014668:	b580      	push	{r7, lr}
 801466a:	b082      	sub	sp, #8
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	3358      	adds	r3, #88	@ 0x58
 8014674:	4618      	mov	r0, r3
 8014676:	f004 fa37 	bl	8018ae8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801467e:	4618      	mov	r0, r3
 8014680:	f000 fea2 	bl	80153c8 <vPortFree>
			vPortFree( pxTCB );
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f000 fe9f 	bl	80153c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801468a:	bf00      	nop
 801468c:	3708      	adds	r7, #8
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}
	...

08014694 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014694:	b480      	push	{r7}
 8014696:	b083      	sub	sp, #12
 8014698:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801469a:	4b0c      	ldr	r3, [pc, #48]	@ (80146cc <prvResetNextTaskUnblockTime+0x38>)
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d104      	bne.n	80146ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80146a4:	4b0a      	ldr	r3, [pc, #40]	@ (80146d0 <prvResetNextTaskUnblockTime+0x3c>)
 80146a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80146aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80146ac:	e008      	b.n	80146c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80146ae:	4b07      	ldr	r3, [pc, #28]	@ (80146cc <prvResetNextTaskUnblockTime+0x38>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	68db      	ldr	r3, [r3, #12]
 80146b4:	68db      	ldr	r3, [r3, #12]
 80146b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	685b      	ldr	r3, [r3, #4]
 80146bc:	4a04      	ldr	r2, [pc, #16]	@ (80146d0 <prvResetNextTaskUnblockTime+0x3c>)
 80146be:	6013      	str	r3, [r2, #0]
}
 80146c0:	bf00      	nop
 80146c2:	370c      	adds	r7, #12
 80146c4:	46bd      	mov	sp, r7
 80146c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ca:	4770      	bx	lr
 80146cc:	200037c4 	.word	0x200037c4
 80146d0:	2000382c 	.word	0x2000382c

080146d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80146d4:	b480      	push	{r7}
 80146d6:	b083      	sub	sp, #12
 80146d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80146da:	4b0b      	ldr	r3, [pc, #44]	@ (8014708 <xTaskGetSchedulerState+0x34>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d102      	bne.n	80146e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80146e2:	2301      	movs	r3, #1
 80146e4:	607b      	str	r3, [r7, #4]
 80146e6:	e008      	b.n	80146fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80146e8:	4b08      	ldr	r3, [pc, #32]	@ (801470c <xTaskGetSchedulerState+0x38>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d102      	bne.n	80146f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80146f0:	2302      	movs	r3, #2
 80146f2:	607b      	str	r3, [r7, #4]
 80146f4:	e001      	b.n	80146fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80146f6:	2300      	movs	r3, #0
 80146f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80146fa:	687b      	ldr	r3, [r7, #4]
	}
 80146fc:	4618      	mov	r0, r3
 80146fe:	370c      	adds	r7, #12
 8014700:	46bd      	mov	sp, r7
 8014702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014706:	4770      	bx	lr
 8014708:	20003818 	.word	0x20003818
 801470c:	20003834 	.word	0x20003834

08014710 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014710:	b580      	push	{r7, lr}
 8014712:	b084      	sub	sp, #16
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801471c:	2300      	movs	r3, #0
 801471e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d05e      	beq.n	80147e4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801472a:	4b31      	ldr	r3, [pc, #196]	@ (80147f0 <xTaskPriorityInherit+0xe0>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014730:	429a      	cmp	r2, r3
 8014732:	d24e      	bcs.n	80147d2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	699b      	ldr	r3, [r3, #24]
 8014738:	2b00      	cmp	r3, #0
 801473a:	db06      	blt.n	801474a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801473c:	4b2c      	ldr	r3, [pc, #176]	@ (80147f0 <xTaskPriorityInherit+0xe0>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014742:	f1c3 0207 	rsb	r2, r3, #7
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	6959      	ldr	r1, [r3, #20]
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014752:	4613      	mov	r3, r2
 8014754:	009b      	lsls	r3, r3, #2
 8014756:	4413      	add	r3, r2
 8014758:	009b      	lsls	r3, r3, #2
 801475a:	4a26      	ldr	r2, [pc, #152]	@ (80147f4 <xTaskPriorityInherit+0xe4>)
 801475c:	4413      	add	r3, r2
 801475e:	4299      	cmp	r1, r3
 8014760:	d12f      	bne.n	80147c2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014762:	68bb      	ldr	r3, [r7, #8]
 8014764:	3304      	adds	r3, #4
 8014766:	4618      	mov	r0, r3
 8014768:	f7fe fa6e 	bl	8012c48 <uxListRemove>
 801476c:	4603      	mov	r3, r0
 801476e:	2b00      	cmp	r3, #0
 8014770:	d10a      	bne.n	8014788 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014776:	2201      	movs	r2, #1
 8014778:	fa02 f303 	lsl.w	r3, r2, r3
 801477c:	43da      	mvns	r2, r3
 801477e:	4b1e      	ldr	r3, [pc, #120]	@ (80147f8 <xTaskPriorityInherit+0xe8>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	4013      	ands	r3, r2
 8014784:	4a1c      	ldr	r2, [pc, #112]	@ (80147f8 <xTaskPriorityInherit+0xe8>)
 8014786:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014788:	4b19      	ldr	r3, [pc, #100]	@ (80147f0 <xTaskPriorityInherit+0xe0>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014792:	68bb      	ldr	r3, [r7, #8]
 8014794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014796:	2201      	movs	r2, #1
 8014798:	409a      	lsls	r2, r3
 801479a:	4b17      	ldr	r3, [pc, #92]	@ (80147f8 <xTaskPriorityInherit+0xe8>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	4313      	orrs	r3, r2
 80147a0:	4a15      	ldr	r2, [pc, #84]	@ (80147f8 <xTaskPriorityInherit+0xe8>)
 80147a2:	6013      	str	r3, [r2, #0]
 80147a4:	68bb      	ldr	r3, [r7, #8]
 80147a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147a8:	4613      	mov	r3, r2
 80147aa:	009b      	lsls	r3, r3, #2
 80147ac:	4413      	add	r3, r2
 80147ae:	009b      	lsls	r3, r3, #2
 80147b0:	4a10      	ldr	r2, [pc, #64]	@ (80147f4 <xTaskPriorityInherit+0xe4>)
 80147b2:	441a      	add	r2, r3
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	3304      	adds	r3, #4
 80147b8:	4619      	mov	r1, r3
 80147ba:	4610      	mov	r0, r2
 80147bc:	f7fe f9e7 	bl	8012b8e <vListInsertEnd>
 80147c0:	e004      	b.n	80147cc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80147c2:	4b0b      	ldr	r3, [pc, #44]	@ (80147f0 <xTaskPriorityInherit+0xe0>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80147cc:	2301      	movs	r3, #1
 80147ce:	60fb      	str	r3, [r7, #12]
 80147d0:	e008      	b.n	80147e4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80147d2:	68bb      	ldr	r3, [r7, #8]
 80147d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80147d6:	4b06      	ldr	r3, [pc, #24]	@ (80147f0 <xTaskPriorityInherit+0xe0>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147dc:	429a      	cmp	r2, r3
 80147de:	d201      	bcs.n	80147e4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80147e0:	2301      	movs	r3, #1
 80147e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80147e4:	68fb      	ldr	r3, [r7, #12]
	}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3710      	adds	r7, #16
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}
 80147ee:	bf00      	nop
 80147f0:	2000370c 	.word	0x2000370c
 80147f4:	20003710 	.word	0x20003710
 80147f8:	20003814 	.word	0x20003814

080147fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b086      	sub	sp, #24
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014808:	2300      	movs	r3, #0
 801480a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d070      	beq.n	80148f4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014812:	4b3b      	ldr	r3, [pc, #236]	@ (8014900 <xTaskPriorityDisinherit+0x104>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	693a      	ldr	r2, [r7, #16]
 8014818:	429a      	cmp	r2, r3
 801481a:	d00b      	beq.n	8014834 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801481c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014820:	f383 8811 	msr	BASEPRI, r3
 8014824:	f3bf 8f6f 	isb	sy
 8014828:	f3bf 8f4f 	dsb	sy
 801482c:	60fb      	str	r3, [r7, #12]
}
 801482e:	bf00      	nop
 8014830:	bf00      	nop
 8014832:	e7fd      	b.n	8014830 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014838:	2b00      	cmp	r3, #0
 801483a:	d10b      	bne.n	8014854 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801483c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014840:	f383 8811 	msr	BASEPRI, r3
 8014844:	f3bf 8f6f 	isb	sy
 8014848:	f3bf 8f4f 	dsb	sy
 801484c:	60bb      	str	r3, [r7, #8]
}
 801484e:	bf00      	nop
 8014850:	bf00      	nop
 8014852:	e7fd      	b.n	8014850 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014854:	693b      	ldr	r3, [r7, #16]
 8014856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014858:	1e5a      	subs	r2, r3, #1
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014866:	429a      	cmp	r2, r3
 8014868:	d044      	beq.n	80148f4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801486e:	2b00      	cmp	r3, #0
 8014870:	d140      	bne.n	80148f4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014872:	693b      	ldr	r3, [r7, #16]
 8014874:	3304      	adds	r3, #4
 8014876:	4618      	mov	r0, r3
 8014878:	f7fe f9e6 	bl	8012c48 <uxListRemove>
 801487c:	4603      	mov	r3, r0
 801487e:	2b00      	cmp	r3, #0
 8014880:	d115      	bne.n	80148ae <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014882:	693b      	ldr	r3, [r7, #16]
 8014884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014886:	491f      	ldr	r1, [pc, #124]	@ (8014904 <xTaskPriorityDisinherit+0x108>)
 8014888:	4613      	mov	r3, r2
 801488a:	009b      	lsls	r3, r3, #2
 801488c:	4413      	add	r3, r2
 801488e:	009b      	lsls	r3, r3, #2
 8014890:	440b      	add	r3, r1
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d10a      	bne.n	80148ae <xTaskPriorityDisinherit+0xb2>
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801489c:	2201      	movs	r2, #1
 801489e:	fa02 f303 	lsl.w	r3, r2, r3
 80148a2:	43da      	mvns	r2, r3
 80148a4:	4b18      	ldr	r3, [pc, #96]	@ (8014908 <xTaskPriorityDisinherit+0x10c>)
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	4013      	ands	r3, r2
 80148aa:	4a17      	ldr	r2, [pc, #92]	@ (8014908 <xTaskPriorityDisinherit+0x10c>)
 80148ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80148ae:	693b      	ldr	r3, [r7, #16]
 80148b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80148b6:	693b      	ldr	r3, [r7, #16]
 80148b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148ba:	f1c3 0207 	rsb	r2, r3, #7
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80148c2:	693b      	ldr	r3, [r7, #16]
 80148c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148c6:	2201      	movs	r2, #1
 80148c8:	409a      	lsls	r2, r3
 80148ca:	4b0f      	ldr	r3, [pc, #60]	@ (8014908 <xTaskPriorityDisinherit+0x10c>)
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	4313      	orrs	r3, r2
 80148d0:	4a0d      	ldr	r2, [pc, #52]	@ (8014908 <xTaskPriorityDisinherit+0x10c>)
 80148d2:	6013      	str	r3, [r2, #0]
 80148d4:	693b      	ldr	r3, [r7, #16]
 80148d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148d8:	4613      	mov	r3, r2
 80148da:	009b      	lsls	r3, r3, #2
 80148dc:	4413      	add	r3, r2
 80148de:	009b      	lsls	r3, r3, #2
 80148e0:	4a08      	ldr	r2, [pc, #32]	@ (8014904 <xTaskPriorityDisinherit+0x108>)
 80148e2:	441a      	add	r2, r3
 80148e4:	693b      	ldr	r3, [r7, #16]
 80148e6:	3304      	adds	r3, #4
 80148e8:	4619      	mov	r1, r3
 80148ea:	4610      	mov	r0, r2
 80148ec:	f7fe f94f 	bl	8012b8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80148f0:	2301      	movs	r3, #1
 80148f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80148f4:	697b      	ldr	r3, [r7, #20]
	}
 80148f6:	4618      	mov	r0, r3
 80148f8:	3718      	adds	r7, #24
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}
 80148fe:	bf00      	nop
 8014900:	2000370c 	.word	0x2000370c
 8014904:	20003710 	.word	0x20003710
 8014908:	20003814 	.word	0x20003814

0801490c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801490c:	b580      	push	{r7, lr}
 801490e:	b088      	sub	sp, #32
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
 8014914:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801491a:	2301      	movs	r3, #1
 801491c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d079      	beq.n	8014a18 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014924:	69bb      	ldr	r3, [r7, #24]
 8014926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014928:	2b00      	cmp	r3, #0
 801492a:	d10b      	bne.n	8014944 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801492c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014930:	f383 8811 	msr	BASEPRI, r3
 8014934:	f3bf 8f6f 	isb	sy
 8014938:	f3bf 8f4f 	dsb	sy
 801493c:	60fb      	str	r3, [r7, #12]
}
 801493e:	bf00      	nop
 8014940:	bf00      	nop
 8014942:	e7fd      	b.n	8014940 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014944:	69bb      	ldr	r3, [r7, #24]
 8014946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014948:	683a      	ldr	r2, [r7, #0]
 801494a:	429a      	cmp	r2, r3
 801494c:	d902      	bls.n	8014954 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	61fb      	str	r3, [r7, #28]
 8014952:	e002      	b.n	801495a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014954:	69bb      	ldr	r3, [r7, #24]
 8014956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014958:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801495a:	69bb      	ldr	r3, [r7, #24]
 801495c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801495e:	69fa      	ldr	r2, [r7, #28]
 8014960:	429a      	cmp	r2, r3
 8014962:	d059      	beq.n	8014a18 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014964:	69bb      	ldr	r3, [r7, #24]
 8014966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014968:	697a      	ldr	r2, [r7, #20]
 801496a:	429a      	cmp	r2, r3
 801496c:	d154      	bne.n	8014a18 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801496e:	4b2c      	ldr	r3, [pc, #176]	@ (8014a20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	69ba      	ldr	r2, [r7, #24]
 8014974:	429a      	cmp	r2, r3
 8014976:	d10b      	bne.n	8014990 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801497c:	f383 8811 	msr	BASEPRI, r3
 8014980:	f3bf 8f6f 	isb	sy
 8014984:	f3bf 8f4f 	dsb	sy
 8014988:	60bb      	str	r3, [r7, #8]
}
 801498a:	bf00      	nop
 801498c:	bf00      	nop
 801498e:	e7fd      	b.n	801498c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014990:	69bb      	ldr	r3, [r7, #24]
 8014992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014994:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014996:	69bb      	ldr	r3, [r7, #24]
 8014998:	69fa      	ldr	r2, [r7, #28]
 801499a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801499c:	69bb      	ldr	r3, [r7, #24]
 801499e:	699b      	ldr	r3, [r3, #24]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	db04      	blt.n	80149ae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149a4:	69fb      	ldr	r3, [r7, #28]
 80149a6:	f1c3 0207 	rsb	r2, r3, #7
 80149aa:	69bb      	ldr	r3, [r7, #24]
 80149ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80149ae:	69bb      	ldr	r3, [r7, #24]
 80149b0:	6959      	ldr	r1, [r3, #20]
 80149b2:	693a      	ldr	r2, [r7, #16]
 80149b4:	4613      	mov	r3, r2
 80149b6:	009b      	lsls	r3, r3, #2
 80149b8:	4413      	add	r3, r2
 80149ba:	009b      	lsls	r3, r3, #2
 80149bc:	4a19      	ldr	r2, [pc, #100]	@ (8014a24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80149be:	4413      	add	r3, r2
 80149c0:	4299      	cmp	r1, r3
 80149c2:	d129      	bne.n	8014a18 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80149c4:	69bb      	ldr	r3, [r7, #24]
 80149c6:	3304      	adds	r3, #4
 80149c8:	4618      	mov	r0, r3
 80149ca:	f7fe f93d 	bl	8012c48 <uxListRemove>
 80149ce:	4603      	mov	r3, r0
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d10a      	bne.n	80149ea <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80149d4:	69bb      	ldr	r3, [r7, #24]
 80149d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149d8:	2201      	movs	r2, #1
 80149da:	fa02 f303 	lsl.w	r3, r2, r3
 80149de:	43da      	mvns	r2, r3
 80149e0:	4b11      	ldr	r3, [pc, #68]	@ (8014a28 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	4013      	ands	r3, r2
 80149e6:	4a10      	ldr	r2, [pc, #64]	@ (8014a28 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80149e8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80149ea:	69bb      	ldr	r3, [r7, #24]
 80149ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149ee:	2201      	movs	r2, #1
 80149f0:	409a      	lsls	r2, r3
 80149f2:	4b0d      	ldr	r3, [pc, #52]	@ (8014a28 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	4313      	orrs	r3, r2
 80149f8:	4a0b      	ldr	r2, [pc, #44]	@ (8014a28 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80149fa:	6013      	str	r3, [r2, #0]
 80149fc:	69bb      	ldr	r3, [r7, #24]
 80149fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a00:	4613      	mov	r3, r2
 8014a02:	009b      	lsls	r3, r3, #2
 8014a04:	4413      	add	r3, r2
 8014a06:	009b      	lsls	r3, r3, #2
 8014a08:	4a06      	ldr	r2, [pc, #24]	@ (8014a24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8014a0a:	441a      	add	r2, r3
 8014a0c:	69bb      	ldr	r3, [r7, #24]
 8014a0e:	3304      	adds	r3, #4
 8014a10:	4619      	mov	r1, r3
 8014a12:	4610      	mov	r0, r2
 8014a14:	f7fe f8bb 	bl	8012b8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014a18:	bf00      	nop
 8014a1a:	3720      	adds	r7, #32
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}
 8014a20:	2000370c 	.word	0x2000370c
 8014a24:	20003710 	.word	0x20003710
 8014a28:	20003814 	.word	0x20003814

08014a2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014a2c:	b480      	push	{r7}
 8014a2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014a30:	4b07      	ldr	r3, [pc, #28]	@ (8014a50 <pvTaskIncrementMutexHeldCount+0x24>)
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d004      	beq.n	8014a42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014a38:	4b05      	ldr	r3, [pc, #20]	@ (8014a50 <pvTaskIncrementMutexHeldCount+0x24>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a3e:	3201      	adds	r2, #1
 8014a40:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8014a42:	4b03      	ldr	r3, [pc, #12]	@ (8014a50 <pvTaskIncrementMutexHeldCount+0x24>)
 8014a44:	681b      	ldr	r3, [r3, #0]
	}
 8014a46:	4618      	mov	r0, r3
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4e:	4770      	bx	lr
 8014a50:	2000370c 	.word	0x2000370c

08014a54 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b084      	sub	sp, #16
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
 8014a5c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8014a5e:	f000 fac3 	bl	8014fe8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8014a62:	4b20      	ldr	r3, [pc, #128]	@ (8014ae4 <ulTaskNotifyTake+0x90>)
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d113      	bne.n	8014a96 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8014a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8014ae4 <ulTaskNotifyTake+0x90>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	2201      	movs	r2, #1
 8014a74:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d00b      	beq.n	8014a96 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014a7e:	2101      	movs	r1, #1
 8014a80:	6838      	ldr	r0, [r7, #0]
 8014a82:	f000 f919 	bl	8014cb8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014a86:	4b18      	ldr	r3, [pc, #96]	@ (8014ae8 <ulTaskNotifyTake+0x94>)
 8014a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014a8c:	601a      	str	r2, [r3, #0]
 8014a8e:	f3bf 8f4f 	dsb	sy
 8014a92:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014a96:	f000 fad9 	bl	801504c <vPortExitCritical>

		taskENTER_CRITICAL();
 8014a9a:	f000 faa5 	bl	8014fe8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8014a9e:	4b11      	ldr	r3, [pc, #68]	@ (8014ae4 <ulTaskNotifyTake+0x90>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014aa6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d00e      	beq.n	8014acc <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d005      	beq.n	8014ac0 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8014ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8014ae4 <ulTaskNotifyTake+0x90>)
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	2200      	movs	r2, #0
 8014aba:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8014abe:	e005      	b.n	8014acc <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8014ac0:	4b08      	ldr	r3, [pc, #32]	@ (8014ae4 <ulTaskNotifyTake+0x90>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	68fa      	ldr	r2, [r7, #12]
 8014ac6:	3a01      	subs	r2, #1
 8014ac8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014acc:	4b05      	ldr	r3, [pc, #20]	@ (8014ae4 <ulTaskNotifyTake+0x90>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
		}
		taskEXIT_CRITICAL();
 8014ad6:	f000 fab9 	bl	801504c <vPortExitCritical>

		return ulReturn;
 8014ada:	68fb      	ldr	r3, [r7, #12]
	}
 8014adc:	4618      	mov	r0, r3
 8014ade:	3710      	adds	r7, #16
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}
 8014ae4:	2000370c 	.word	0x2000370c
 8014ae8:	e000ed04 	.word	0xe000ed04

08014aec <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b08e      	sub	sp, #56	@ 0x38
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	603b      	str	r3, [r7, #0]
 8014af8:	4613      	mov	r3, r2
 8014afa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014afc:	2301      	movs	r3, #1
 8014afe:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d10b      	bne.n	8014b1e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8014b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b0a:	f383 8811 	msr	BASEPRI, r3
 8014b0e:	f3bf 8f6f 	isb	sy
 8014b12:	f3bf 8f4f 	dsb	sy
 8014b16:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014b18:	bf00      	nop
 8014b1a:	bf00      	nop
 8014b1c:	e7fd      	b.n	8014b1a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014b1e:	f000 fb43 	bl	80151a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8014b26:	f3ef 8211 	mrs	r2, BASEPRI
 8014b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b2e:	f383 8811 	msr	BASEPRI, r3
 8014b32:	f3bf 8f6f 	isb	sy
 8014b36:	f3bf 8f4f 	dsb	sy
 8014b3a:	623a      	str	r2, [r7, #32]
 8014b3c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014b3e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d004      	beq.n	8014b52 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b4a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b54:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8014b58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b5e:	2202      	movs	r2, #2
 8014b60:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

			switch( eAction )
 8014b64:	79fb      	ldrb	r3, [r7, #7]
 8014b66:	2b04      	cmp	r3, #4
 8014b68:	d82e      	bhi.n	8014bc8 <xTaskGenericNotifyFromISR+0xdc>
 8014b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8014b70 <xTaskGenericNotifyFromISR+0x84>)
 8014b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b70:	08014bed 	.word	0x08014bed
 8014b74:	08014b85 	.word	0x08014b85
 8014b78:	08014b97 	.word	0x08014b97
 8014b7c:	08014ba7 	.word	0x08014ba7
 8014b80:	08014bb1 	.word	0x08014bb1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b86:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8014b8a:	68bb      	ldr	r3, [r7, #8]
 8014b8c:	431a      	orrs	r2, r3
 8014b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b90:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8014b94:	e02d      	b.n	8014bf2 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014b9c:	1c5a      	adds	r2, r3, #1
 8014b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ba0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8014ba4:	e025      	b.n	8014bf2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ba8:	68ba      	ldr	r2, [r7, #8]
 8014baa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8014bae:	e020      	b.n	8014bf2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014bb0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014bb4:	2b02      	cmp	r3, #2
 8014bb6:	d004      	beq.n	8014bc2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bba:	68ba      	ldr	r2, [r7, #8]
 8014bbc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014bc0:	e017      	b.n	8014bf2 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8014bc6:	e014      	b.n	8014bf2 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014bce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014bd2:	d00d      	beq.n	8014bf0 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8014bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bd8:	f383 8811 	msr	BASEPRI, r3
 8014bdc:	f3bf 8f6f 	isb	sy
 8014be0:	f3bf 8f4f 	dsb	sy
 8014be4:	61bb      	str	r3, [r7, #24]
}
 8014be6:	bf00      	nop
 8014be8:	bf00      	nop
 8014bea:	e7fd      	b.n	8014be8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8014bec:	bf00      	nop
 8014bee:	e000      	b.n	8014bf2 <xTaskGenericNotifyFromISR+0x106>
					break;
 8014bf0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014bf2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014bf6:	2b01      	cmp	r3, #1
 8014bf8:	d146      	bne.n	8014c88 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d00b      	beq.n	8014c1a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8014c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c06:	f383 8811 	msr	BASEPRI, r3
 8014c0a:	f3bf 8f6f 	isb	sy
 8014c0e:	f3bf 8f4f 	dsb	sy
 8014c12:	617b      	str	r3, [r7, #20]
}
 8014c14:	bf00      	nop
 8014c16:	bf00      	nop
 8014c18:	e7fd      	b.n	8014c16 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c1a:	4b21      	ldr	r3, [pc, #132]	@ (8014ca0 <xTaskGenericNotifyFromISR+0x1b4>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d11c      	bne.n	8014c5c <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c24:	3304      	adds	r3, #4
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7fe f80e 	bl	8012c48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c30:	2201      	movs	r2, #1
 8014c32:	409a      	lsls	r2, r3
 8014c34:	4b1b      	ldr	r3, [pc, #108]	@ (8014ca4 <xTaskGenericNotifyFromISR+0x1b8>)
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	4313      	orrs	r3, r2
 8014c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8014ca4 <xTaskGenericNotifyFromISR+0x1b8>)
 8014c3c:	6013      	str	r3, [r2, #0]
 8014c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c42:	4613      	mov	r3, r2
 8014c44:	009b      	lsls	r3, r3, #2
 8014c46:	4413      	add	r3, r2
 8014c48:	009b      	lsls	r3, r3, #2
 8014c4a:	4a17      	ldr	r2, [pc, #92]	@ (8014ca8 <xTaskGenericNotifyFromISR+0x1bc>)
 8014c4c:	441a      	add	r2, r3
 8014c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c50:	3304      	adds	r3, #4
 8014c52:	4619      	mov	r1, r3
 8014c54:	4610      	mov	r0, r2
 8014c56:	f7fd ff9a 	bl	8012b8e <vListInsertEnd>
 8014c5a:	e005      	b.n	8014c68 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c5e:	3318      	adds	r3, #24
 8014c60:	4619      	mov	r1, r3
 8014c62:	4812      	ldr	r0, [pc, #72]	@ (8014cac <xTaskGenericNotifyFromISR+0x1c0>)
 8014c64:	f7fd ff93 	bl	8012b8e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c6c:	4b10      	ldr	r3, [pc, #64]	@ (8014cb0 <xTaskGenericNotifyFromISR+0x1c4>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c72:	429a      	cmp	r2, r3
 8014c74:	d908      	bls.n	8014c88 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d002      	beq.n	8014c82 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014c7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c7e:	2201      	movs	r2, #1
 8014c80:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014c82:	4b0c      	ldr	r3, [pc, #48]	@ (8014cb4 <xTaskGenericNotifyFromISR+0x1c8>)
 8014c84:	2201      	movs	r2, #1
 8014c86:	601a      	str	r2, [r3, #0]
 8014c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c8a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014c8c:	693b      	ldr	r3, [r7, #16]
 8014c8e:	f383 8811 	msr	BASEPRI, r3
}
 8014c92:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8014c96:	4618      	mov	r0, r3
 8014c98:	3738      	adds	r7, #56	@ 0x38
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	20003834 	.word	0x20003834
 8014ca4:	20003814 	.word	0x20003814
 8014ca8:	20003710 	.word	0x20003710
 8014cac:	200037cc 	.word	0x200037cc
 8014cb0:	2000370c 	.word	0x2000370c
 8014cb4:	20003820 	.word	0x20003820

08014cb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b084      	sub	sp, #16
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
 8014cc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014cc2:	4b29      	ldr	r3, [pc, #164]	@ (8014d68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014cc8:	4b28      	ldr	r3, [pc, #160]	@ (8014d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	3304      	adds	r3, #4
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7fd ffba 	bl	8012c48 <uxListRemove>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d10b      	bne.n	8014cf2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014cda:	4b24      	ldr	r3, [pc, #144]	@ (8014d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ce0:	2201      	movs	r2, #1
 8014ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8014ce6:	43da      	mvns	r2, r3
 8014ce8:	4b21      	ldr	r3, [pc, #132]	@ (8014d70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	4013      	ands	r3, r2
 8014cee:	4a20      	ldr	r2, [pc, #128]	@ (8014d70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014cf0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014cf8:	d10a      	bne.n	8014d10 <prvAddCurrentTaskToDelayedList+0x58>
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d007      	beq.n	8014d10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014d00:	4b1a      	ldr	r3, [pc, #104]	@ (8014d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	3304      	adds	r3, #4
 8014d06:	4619      	mov	r1, r3
 8014d08:	481a      	ldr	r0, [pc, #104]	@ (8014d74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014d0a:	f7fd ff40 	bl	8012b8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014d0e:	e026      	b.n	8014d5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014d10:	68fa      	ldr	r2, [r7, #12]
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	4413      	add	r3, r2
 8014d16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014d18:	4b14      	ldr	r3, [pc, #80]	@ (8014d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	68ba      	ldr	r2, [r7, #8]
 8014d1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014d20:	68ba      	ldr	r2, [r7, #8]
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d209      	bcs.n	8014d3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014d28:	4b13      	ldr	r3, [pc, #76]	@ (8014d78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014d2a:	681a      	ldr	r2, [r3, #0]
 8014d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8014d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	3304      	adds	r3, #4
 8014d32:	4619      	mov	r1, r3
 8014d34:	4610      	mov	r0, r2
 8014d36:	f7fd ff4e 	bl	8012bd6 <vListInsert>
}
 8014d3a:	e010      	b.n	8014d5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8014d7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8014d3e:	681a      	ldr	r2, [r3, #0]
 8014d40:	4b0a      	ldr	r3, [pc, #40]	@ (8014d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	3304      	adds	r3, #4
 8014d46:	4619      	mov	r1, r3
 8014d48:	4610      	mov	r0, r2
 8014d4a:	f7fd ff44 	bl	8012bd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8014d80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	68ba      	ldr	r2, [r7, #8]
 8014d54:	429a      	cmp	r2, r3
 8014d56:	d202      	bcs.n	8014d5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014d58:	4a09      	ldr	r2, [pc, #36]	@ (8014d80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	6013      	str	r3, [r2, #0]
}
 8014d5e:	bf00      	nop
 8014d60:	3710      	adds	r7, #16
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}
 8014d66:	bf00      	nop
 8014d68:	20003810 	.word	0x20003810
 8014d6c:	2000370c 	.word	0x2000370c
 8014d70:	20003814 	.word	0x20003814
 8014d74:	200037f8 	.word	0x200037f8
 8014d78:	200037c8 	.word	0x200037c8
 8014d7c:	200037c4 	.word	0x200037c4
 8014d80:	2000382c 	.word	0x2000382c

08014d84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014d84:	b480      	push	{r7}
 8014d86:	b085      	sub	sp, #20
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	60f8      	str	r0, [r7, #12]
 8014d8c:	60b9      	str	r1, [r7, #8]
 8014d8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	3b04      	subs	r3, #4
 8014d94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	3b04      	subs	r3, #4
 8014da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014da4:	68bb      	ldr	r3, [r7, #8]
 8014da6:	f023 0201 	bic.w	r2, r3, #1
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	3b04      	subs	r3, #4
 8014db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014db4:	4a0c      	ldr	r2, [pc, #48]	@ (8014de8 <pxPortInitialiseStack+0x64>)
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	3b14      	subs	r3, #20
 8014dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014dc0:	687a      	ldr	r2, [r7, #4]
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	3b04      	subs	r3, #4
 8014dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	f06f 0202 	mvn.w	r2, #2
 8014dd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	3b20      	subs	r3, #32
 8014dd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014dda:	68fb      	ldr	r3, [r7, #12]
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3714      	adds	r7, #20
 8014de0:	46bd      	mov	sp, r7
 8014de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de6:	4770      	bx	lr
 8014de8:	08014ded 	.word	0x08014ded

08014dec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014dec:	b480      	push	{r7}
 8014dee:	b085      	sub	sp, #20
 8014df0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014df2:	2300      	movs	r3, #0
 8014df4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014df6:	4b13      	ldr	r3, [pc, #76]	@ (8014e44 <prvTaskExitError+0x58>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014dfe:	d00b      	beq.n	8014e18 <prvTaskExitError+0x2c>
	__asm volatile
 8014e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e04:	f383 8811 	msr	BASEPRI, r3
 8014e08:	f3bf 8f6f 	isb	sy
 8014e0c:	f3bf 8f4f 	dsb	sy
 8014e10:	60fb      	str	r3, [r7, #12]
}
 8014e12:	bf00      	nop
 8014e14:	bf00      	nop
 8014e16:	e7fd      	b.n	8014e14 <prvTaskExitError+0x28>
	__asm volatile
 8014e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e1c:	f383 8811 	msr	BASEPRI, r3
 8014e20:	f3bf 8f6f 	isb	sy
 8014e24:	f3bf 8f4f 	dsb	sy
 8014e28:	60bb      	str	r3, [r7, #8]
}
 8014e2a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014e2c:	bf00      	nop
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d0fc      	beq.n	8014e2e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014e34:	bf00      	nop
 8014e36:	bf00      	nop
 8014e38:	3714      	adds	r7, #20
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e40:	4770      	bx	lr
 8014e42:	bf00      	nop
 8014e44:	20000140 	.word	0x20000140
	...

08014e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014e50:	4b07      	ldr	r3, [pc, #28]	@ (8014e70 <pxCurrentTCBConst2>)
 8014e52:	6819      	ldr	r1, [r3, #0]
 8014e54:	6808      	ldr	r0, [r1, #0]
 8014e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e5a:	f380 8809 	msr	PSP, r0
 8014e5e:	f3bf 8f6f 	isb	sy
 8014e62:	f04f 0000 	mov.w	r0, #0
 8014e66:	f380 8811 	msr	BASEPRI, r0
 8014e6a:	4770      	bx	lr
 8014e6c:	f3af 8000 	nop.w

08014e70 <pxCurrentTCBConst2>:
 8014e70:	2000370c 	.word	0x2000370c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014e74:	bf00      	nop
 8014e76:	bf00      	nop

08014e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014e78:	4808      	ldr	r0, [pc, #32]	@ (8014e9c <prvPortStartFirstTask+0x24>)
 8014e7a:	6800      	ldr	r0, [r0, #0]
 8014e7c:	6800      	ldr	r0, [r0, #0]
 8014e7e:	f380 8808 	msr	MSP, r0
 8014e82:	f04f 0000 	mov.w	r0, #0
 8014e86:	f380 8814 	msr	CONTROL, r0
 8014e8a:	b662      	cpsie	i
 8014e8c:	b661      	cpsie	f
 8014e8e:	f3bf 8f4f 	dsb	sy
 8014e92:	f3bf 8f6f 	isb	sy
 8014e96:	df00      	svc	0
 8014e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014e9a:	bf00      	nop
 8014e9c:	e000ed08 	.word	0xe000ed08

08014ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b086      	sub	sp, #24
 8014ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014ea6:	4b47      	ldr	r3, [pc, #284]	@ (8014fc4 <xPortStartScheduler+0x124>)
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	4a47      	ldr	r2, [pc, #284]	@ (8014fc8 <xPortStartScheduler+0x128>)
 8014eac:	4293      	cmp	r3, r2
 8014eae:	d10b      	bne.n	8014ec8 <xPortStartScheduler+0x28>
	__asm volatile
 8014eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014eb4:	f383 8811 	msr	BASEPRI, r3
 8014eb8:	f3bf 8f6f 	isb	sy
 8014ebc:	f3bf 8f4f 	dsb	sy
 8014ec0:	613b      	str	r3, [r7, #16]
}
 8014ec2:	bf00      	nop
 8014ec4:	bf00      	nop
 8014ec6:	e7fd      	b.n	8014ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8014fc4 <xPortStartScheduler+0x124>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8014fcc <xPortStartScheduler+0x12c>)
 8014ece:	4293      	cmp	r3, r2
 8014ed0:	d10b      	bne.n	8014eea <xPortStartScheduler+0x4a>
	__asm volatile
 8014ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ed6:	f383 8811 	msr	BASEPRI, r3
 8014eda:	f3bf 8f6f 	isb	sy
 8014ede:	f3bf 8f4f 	dsb	sy
 8014ee2:	60fb      	str	r3, [r7, #12]
}
 8014ee4:	bf00      	nop
 8014ee6:	bf00      	nop
 8014ee8:	e7fd      	b.n	8014ee6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014eea:	4b39      	ldr	r3, [pc, #228]	@ (8014fd0 <xPortStartScheduler+0x130>)
 8014eec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	781b      	ldrb	r3, [r3, #0]
 8014ef2:	b2db      	uxtb	r3, r3
 8014ef4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014ef6:	697b      	ldr	r3, [r7, #20]
 8014ef8:	22ff      	movs	r2, #255	@ 0xff
 8014efa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014efc:	697b      	ldr	r3, [r7, #20]
 8014efe:	781b      	ldrb	r3, [r3, #0]
 8014f00:	b2db      	uxtb	r3, r3
 8014f02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014f04:	78fb      	ldrb	r3, [r7, #3]
 8014f06:	b2db      	uxtb	r3, r3
 8014f08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014f0c:	b2da      	uxtb	r2, r3
 8014f0e:	4b31      	ldr	r3, [pc, #196]	@ (8014fd4 <xPortStartScheduler+0x134>)
 8014f10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014f12:	4b31      	ldr	r3, [pc, #196]	@ (8014fd8 <xPortStartScheduler+0x138>)
 8014f14:	2207      	movs	r2, #7
 8014f16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014f18:	e009      	b.n	8014f2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8014f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8014fd8 <xPortStartScheduler+0x138>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	3b01      	subs	r3, #1
 8014f20:	4a2d      	ldr	r2, [pc, #180]	@ (8014fd8 <xPortStartScheduler+0x138>)
 8014f22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014f24:	78fb      	ldrb	r3, [r7, #3]
 8014f26:	b2db      	uxtb	r3, r3
 8014f28:	005b      	lsls	r3, r3, #1
 8014f2a:	b2db      	uxtb	r3, r3
 8014f2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014f2e:	78fb      	ldrb	r3, [r7, #3]
 8014f30:	b2db      	uxtb	r3, r3
 8014f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014f36:	2b80      	cmp	r3, #128	@ 0x80
 8014f38:	d0ef      	beq.n	8014f1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014f3a:	4b27      	ldr	r3, [pc, #156]	@ (8014fd8 <xPortStartScheduler+0x138>)
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	f1c3 0307 	rsb	r3, r3, #7
 8014f42:	2b04      	cmp	r3, #4
 8014f44:	d00b      	beq.n	8014f5e <xPortStartScheduler+0xbe>
	__asm volatile
 8014f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f4a:	f383 8811 	msr	BASEPRI, r3
 8014f4e:	f3bf 8f6f 	isb	sy
 8014f52:	f3bf 8f4f 	dsb	sy
 8014f56:	60bb      	str	r3, [r7, #8]
}
 8014f58:	bf00      	nop
 8014f5a:	bf00      	nop
 8014f5c:	e7fd      	b.n	8014f5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8014fd8 <xPortStartScheduler+0x138>)
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	021b      	lsls	r3, r3, #8
 8014f64:	4a1c      	ldr	r2, [pc, #112]	@ (8014fd8 <xPortStartScheduler+0x138>)
 8014f66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014f68:	4b1b      	ldr	r3, [pc, #108]	@ (8014fd8 <xPortStartScheduler+0x138>)
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014f70:	4a19      	ldr	r2, [pc, #100]	@ (8014fd8 <xPortStartScheduler+0x138>)
 8014f72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	b2da      	uxtb	r2, r3
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014f7c:	4b17      	ldr	r3, [pc, #92]	@ (8014fdc <xPortStartScheduler+0x13c>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	4a16      	ldr	r2, [pc, #88]	@ (8014fdc <xPortStartScheduler+0x13c>)
 8014f82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014f86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014f88:	4b14      	ldr	r3, [pc, #80]	@ (8014fdc <xPortStartScheduler+0x13c>)
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	4a13      	ldr	r2, [pc, #76]	@ (8014fdc <xPortStartScheduler+0x13c>)
 8014f8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014f92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014f94:	f000 f8da 	bl	801514c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014f98:	4b11      	ldr	r3, [pc, #68]	@ (8014fe0 <xPortStartScheduler+0x140>)
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014f9e:	f000 f8f9 	bl	8015194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014fa2:	4b10      	ldr	r3, [pc, #64]	@ (8014fe4 <xPortStartScheduler+0x144>)
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8014fe4 <xPortStartScheduler+0x144>)
 8014fa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014fac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014fae:	f7ff ff63 	bl	8014e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014fb2:	f7ff f945 	bl	8014240 <vTaskSwitchContext>
	prvTaskExitError();
 8014fb6:	f7ff ff19 	bl	8014dec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014fba:	2300      	movs	r3, #0
}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	3718      	adds	r7, #24
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd80      	pop	{r7, pc}
 8014fc4:	e000ed00 	.word	0xe000ed00
 8014fc8:	410fc271 	.word	0x410fc271
 8014fcc:	410fc270 	.word	0x410fc270
 8014fd0:	e000e400 	.word	0xe000e400
 8014fd4:	20003840 	.word	0x20003840
 8014fd8:	20003844 	.word	0x20003844
 8014fdc:	e000ed20 	.word	0xe000ed20
 8014fe0:	20000140 	.word	0x20000140
 8014fe4:	e000ef34 	.word	0xe000ef34

08014fe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b083      	sub	sp, #12
 8014fec:	af00      	add	r7, sp, #0
	__asm volatile
 8014fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ff2:	f383 8811 	msr	BASEPRI, r3
 8014ff6:	f3bf 8f6f 	isb	sy
 8014ffa:	f3bf 8f4f 	dsb	sy
 8014ffe:	607b      	str	r3, [r7, #4]
}
 8015000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015002:	4b10      	ldr	r3, [pc, #64]	@ (8015044 <vPortEnterCritical+0x5c>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	3301      	adds	r3, #1
 8015008:	4a0e      	ldr	r2, [pc, #56]	@ (8015044 <vPortEnterCritical+0x5c>)
 801500a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801500c:	4b0d      	ldr	r3, [pc, #52]	@ (8015044 <vPortEnterCritical+0x5c>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	2b01      	cmp	r3, #1
 8015012:	d110      	bne.n	8015036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015014:	4b0c      	ldr	r3, [pc, #48]	@ (8015048 <vPortEnterCritical+0x60>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	b2db      	uxtb	r3, r3
 801501a:	2b00      	cmp	r3, #0
 801501c:	d00b      	beq.n	8015036 <vPortEnterCritical+0x4e>
	__asm volatile
 801501e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015022:	f383 8811 	msr	BASEPRI, r3
 8015026:	f3bf 8f6f 	isb	sy
 801502a:	f3bf 8f4f 	dsb	sy
 801502e:	603b      	str	r3, [r7, #0]
}
 8015030:	bf00      	nop
 8015032:	bf00      	nop
 8015034:	e7fd      	b.n	8015032 <vPortEnterCritical+0x4a>
	}
}
 8015036:	bf00      	nop
 8015038:	370c      	adds	r7, #12
 801503a:	46bd      	mov	sp, r7
 801503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015040:	4770      	bx	lr
 8015042:	bf00      	nop
 8015044:	20000140 	.word	0x20000140
 8015048:	e000ed04 	.word	0xe000ed04

0801504c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801504c:	b480      	push	{r7}
 801504e:	b083      	sub	sp, #12
 8015050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015052:	4b12      	ldr	r3, [pc, #72]	@ (801509c <vPortExitCritical+0x50>)
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d10b      	bne.n	8015072 <vPortExitCritical+0x26>
	__asm volatile
 801505a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801505e:	f383 8811 	msr	BASEPRI, r3
 8015062:	f3bf 8f6f 	isb	sy
 8015066:	f3bf 8f4f 	dsb	sy
 801506a:	607b      	str	r3, [r7, #4]
}
 801506c:	bf00      	nop
 801506e:	bf00      	nop
 8015070:	e7fd      	b.n	801506e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015072:	4b0a      	ldr	r3, [pc, #40]	@ (801509c <vPortExitCritical+0x50>)
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	3b01      	subs	r3, #1
 8015078:	4a08      	ldr	r2, [pc, #32]	@ (801509c <vPortExitCritical+0x50>)
 801507a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801507c:	4b07      	ldr	r3, [pc, #28]	@ (801509c <vPortExitCritical+0x50>)
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d105      	bne.n	8015090 <vPortExitCritical+0x44>
 8015084:	2300      	movs	r3, #0
 8015086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015088:	683b      	ldr	r3, [r7, #0]
 801508a:	f383 8811 	msr	BASEPRI, r3
}
 801508e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015090:	bf00      	nop
 8015092:	370c      	adds	r7, #12
 8015094:	46bd      	mov	sp, r7
 8015096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509a:	4770      	bx	lr
 801509c:	20000140 	.word	0x20000140

080150a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80150a0:	f3ef 8009 	mrs	r0, PSP
 80150a4:	f3bf 8f6f 	isb	sy
 80150a8:	4b15      	ldr	r3, [pc, #84]	@ (8015100 <pxCurrentTCBConst>)
 80150aa:	681a      	ldr	r2, [r3, #0]
 80150ac:	f01e 0f10 	tst.w	lr, #16
 80150b0:	bf08      	it	eq
 80150b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80150b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ba:	6010      	str	r0, [r2, #0]
 80150bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80150c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80150c4:	f380 8811 	msr	BASEPRI, r0
 80150c8:	f3bf 8f4f 	dsb	sy
 80150cc:	f3bf 8f6f 	isb	sy
 80150d0:	f7ff f8b6 	bl	8014240 <vTaskSwitchContext>
 80150d4:	f04f 0000 	mov.w	r0, #0
 80150d8:	f380 8811 	msr	BASEPRI, r0
 80150dc:	bc09      	pop	{r0, r3}
 80150de:	6819      	ldr	r1, [r3, #0]
 80150e0:	6808      	ldr	r0, [r1, #0]
 80150e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150e6:	f01e 0f10 	tst.w	lr, #16
 80150ea:	bf08      	it	eq
 80150ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80150f0:	f380 8809 	msr	PSP, r0
 80150f4:	f3bf 8f6f 	isb	sy
 80150f8:	4770      	bx	lr
 80150fa:	bf00      	nop
 80150fc:	f3af 8000 	nop.w

08015100 <pxCurrentTCBConst>:
 8015100:	2000370c 	.word	0x2000370c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015104:	bf00      	nop
 8015106:	bf00      	nop

08015108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
	__asm volatile
 801510e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015112:	f383 8811 	msr	BASEPRI, r3
 8015116:	f3bf 8f6f 	isb	sy
 801511a:	f3bf 8f4f 	dsb	sy
 801511e:	607b      	str	r3, [r7, #4]
}
 8015120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015122:	f7fe ffd3 	bl	80140cc <xTaskIncrementTick>
 8015126:	4603      	mov	r3, r0
 8015128:	2b00      	cmp	r3, #0
 801512a:	d003      	beq.n	8015134 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801512c:	4b06      	ldr	r3, [pc, #24]	@ (8015148 <SysTick_Handler+0x40>)
 801512e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015132:	601a      	str	r2, [r3, #0]
 8015134:	2300      	movs	r3, #0
 8015136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	f383 8811 	msr	BASEPRI, r3
}
 801513e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015140:	bf00      	nop
 8015142:	3708      	adds	r7, #8
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}
 8015148:	e000ed04 	.word	0xe000ed04

0801514c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801514c:	b480      	push	{r7}
 801514e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015150:	4b0b      	ldr	r3, [pc, #44]	@ (8015180 <vPortSetupTimerInterrupt+0x34>)
 8015152:	2200      	movs	r2, #0
 8015154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015156:	4b0b      	ldr	r3, [pc, #44]	@ (8015184 <vPortSetupTimerInterrupt+0x38>)
 8015158:	2200      	movs	r2, #0
 801515a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801515c:	4b0a      	ldr	r3, [pc, #40]	@ (8015188 <vPortSetupTimerInterrupt+0x3c>)
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	4a0a      	ldr	r2, [pc, #40]	@ (801518c <vPortSetupTimerInterrupt+0x40>)
 8015162:	fba2 2303 	umull	r2, r3, r2, r3
 8015166:	099b      	lsrs	r3, r3, #6
 8015168:	4a09      	ldr	r2, [pc, #36]	@ (8015190 <vPortSetupTimerInterrupt+0x44>)
 801516a:	3b01      	subs	r3, #1
 801516c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801516e:	4b04      	ldr	r3, [pc, #16]	@ (8015180 <vPortSetupTimerInterrupt+0x34>)
 8015170:	2207      	movs	r2, #7
 8015172:	601a      	str	r2, [r3, #0]
}
 8015174:	bf00      	nop
 8015176:	46bd      	mov	sp, r7
 8015178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517c:	4770      	bx	lr
 801517e:	bf00      	nop
 8015180:	e000e010 	.word	0xe000e010
 8015184:	e000e018 	.word	0xe000e018
 8015188:	20000004 	.word	0x20000004
 801518c:	10624dd3 	.word	0x10624dd3
 8015190:	e000e014 	.word	0xe000e014

08015194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80151a4 <vPortEnableVFP+0x10>
 8015198:	6801      	ldr	r1, [r0, #0]
 801519a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801519e:	6001      	str	r1, [r0, #0]
 80151a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80151a2:	bf00      	nop
 80151a4:	e000ed88 	.word	0xe000ed88

080151a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80151a8:	b480      	push	{r7}
 80151aa:	b085      	sub	sp, #20
 80151ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80151ae:	f3ef 8305 	mrs	r3, IPSR
 80151b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	2b0f      	cmp	r3, #15
 80151b8:	d915      	bls.n	80151e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80151ba:	4a18      	ldr	r2, [pc, #96]	@ (801521c <vPortValidateInterruptPriority+0x74>)
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	4413      	add	r3, r2
 80151c0:	781b      	ldrb	r3, [r3, #0]
 80151c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80151c4:	4b16      	ldr	r3, [pc, #88]	@ (8015220 <vPortValidateInterruptPriority+0x78>)
 80151c6:	781b      	ldrb	r3, [r3, #0]
 80151c8:	7afa      	ldrb	r2, [r7, #11]
 80151ca:	429a      	cmp	r2, r3
 80151cc:	d20b      	bcs.n	80151e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80151ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151d2:	f383 8811 	msr	BASEPRI, r3
 80151d6:	f3bf 8f6f 	isb	sy
 80151da:	f3bf 8f4f 	dsb	sy
 80151de:	607b      	str	r3, [r7, #4]
}
 80151e0:	bf00      	nop
 80151e2:	bf00      	nop
 80151e4:	e7fd      	b.n	80151e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80151e6:	4b0f      	ldr	r3, [pc, #60]	@ (8015224 <vPortValidateInterruptPriority+0x7c>)
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80151ee:	4b0e      	ldr	r3, [pc, #56]	@ (8015228 <vPortValidateInterruptPriority+0x80>)
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	429a      	cmp	r2, r3
 80151f4:	d90b      	bls.n	801520e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80151f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151fa:	f383 8811 	msr	BASEPRI, r3
 80151fe:	f3bf 8f6f 	isb	sy
 8015202:	f3bf 8f4f 	dsb	sy
 8015206:	603b      	str	r3, [r7, #0]
}
 8015208:	bf00      	nop
 801520a:	bf00      	nop
 801520c:	e7fd      	b.n	801520a <vPortValidateInterruptPriority+0x62>
	}
 801520e:	bf00      	nop
 8015210:	3714      	adds	r7, #20
 8015212:	46bd      	mov	sp, r7
 8015214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015218:	4770      	bx	lr
 801521a:	bf00      	nop
 801521c:	e000e3f0 	.word	0xe000e3f0
 8015220:	20003840 	.word	0x20003840
 8015224:	e000ed0c 	.word	0xe000ed0c
 8015228:	20003844 	.word	0x20003844

0801522c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b08a      	sub	sp, #40	@ 0x28
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015234:	2300      	movs	r3, #0
 8015236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015238:	f7fe fe9c 	bl	8013f74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801523c:	4b5c      	ldr	r3, [pc, #368]	@ (80153b0 <pvPortMalloc+0x184>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d101      	bne.n	8015248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015244:	f000 f924 	bl	8015490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015248:	4b5a      	ldr	r3, [pc, #360]	@ (80153b4 <pvPortMalloc+0x188>)
 801524a:	681a      	ldr	r2, [r3, #0]
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	4013      	ands	r3, r2
 8015250:	2b00      	cmp	r3, #0
 8015252:	f040 8095 	bne.w	8015380 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d01e      	beq.n	801529a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801525c:	2208      	movs	r2, #8
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	4413      	add	r3, r2
 8015262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f003 0307 	and.w	r3, r3, #7
 801526a:	2b00      	cmp	r3, #0
 801526c:	d015      	beq.n	801529a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	f023 0307 	bic.w	r3, r3, #7
 8015274:	3308      	adds	r3, #8
 8015276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f003 0307 	and.w	r3, r3, #7
 801527e:	2b00      	cmp	r3, #0
 8015280:	d00b      	beq.n	801529a <pvPortMalloc+0x6e>
	__asm volatile
 8015282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015286:	f383 8811 	msr	BASEPRI, r3
 801528a:	f3bf 8f6f 	isb	sy
 801528e:	f3bf 8f4f 	dsb	sy
 8015292:	617b      	str	r3, [r7, #20]
}
 8015294:	bf00      	nop
 8015296:	bf00      	nop
 8015298:	e7fd      	b.n	8015296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d06f      	beq.n	8015380 <pvPortMalloc+0x154>
 80152a0:	4b45      	ldr	r3, [pc, #276]	@ (80153b8 <pvPortMalloc+0x18c>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	687a      	ldr	r2, [r7, #4]
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d86a      	bhi.n	8015380 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80152aa:	4b44      	ldr	r3, [pc, #272]	@ (80153bc <pvPortMalloc+0x190>)
 80152ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80152ae:	4b43      	ldr	r3, [pc, #268]	@ (80153bc <pvPortMalloc+0x190>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80152b4:	e004      	b.n	80152c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80152b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80152ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80152c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152c2:	685b      	ldr	r3, [r3, #4]
 80152c4:	687a      	ldr	r2, [r7, #4]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d903      	bls.n	80152d2 <pvPortMalloc+0xa6>
 80152ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d1f1      	bne.n	80152b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80152d2:	4b37      	ldr	r3, [pc, #220]	@ (80153b0 <pvPortMalloc+0x184>)
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152d8:	429a      	cmp	r2, r3
 80152da:	d051      	beq.n	8015380 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80152dc:	6a3b      	ldr	r3, [r7, #32]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	2208      	movs	r2, #8
 80152e2:	4413      	add	r3, r2
 80152e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80152e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	6a3b      	ldr	r3, [r7, #32]
 80152ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80152ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152f0:	685a      	ldr	r2, [r3, #4]
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	1ad2      	subs	r2, r2, r3
 80152f6:	2308      	movs	r3, #8
 80152f8:	005b      	lsls	r3, r3, #1
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d920      	bls.n	8015340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80152fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	4413      	add	r3, r2
 8015304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015306:	69bb      	ldr	r3, [r7, #24]
 8015308:	f003 0307 	and.w	r3, r3, #7
 801530c:	2b00      	cmp	r3, #0
 801530e:	d00b      	beq.n	8015328 <pvPortMalloc+0xfc>
	__asm volatile
 8015310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015314:	f383 8811 	msr	BASEPRI, r3
 8015318:	f3bf 8f6f 	isb	sy
 801531c:	f3bf 8f4f 	dsb	sy
 8015320:	613b      	str	r3, [r7, #16]
}
 8015322:	bf00      	nop
 8015324:	bf00      	nop
 8015326:	e7fd      	b.n	8015324 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801532a:	685a      	ldr	r2, [r3, #4]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	1ad2      	subs	r2, r2, r3
 8015330:	69bb      	ldr	r3, [r7, #24]
 8015332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801533a:	69b8      	ldr	r0, [r7, #24]
 801533c:	f000 f90a 	bl	8015554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015340:	4b1d      	ldr	r3, [pc, #116]	@ (80153b8 <pvPortMalloc+0x18c>)
 8015342:	681a      	ldr	r2, [r3, #0]
 8015344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015346:	685b      	ldr	r3, [r3, #4]
 8015348:	1ad3      	subs	r3, r2, r3
 801534a:	4a1b      	ldr	r2, [pc, #108]	@ (80153b8 <pvPortMalloc+0x18c>)
 801534c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801534e:	4b1a      	ldr	r3, [pc, #104]	@ (80153b8 <pvPortMalloc+0x18c>)
 8015350:	681a      	ldr	r2, [r3, #0]
 8015352:	4b1b      	ldr	r3, [pc, #108]	@ (80153c0 <pvPortMalloc+0x194>)
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	429a      	cmp	r2, r3
 8015358:	d203      	bcs.n	8015362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801535a:	4b17      	ldr	r3, [pc, #92]	@ (80153b8 <pvPortMalloc+0x18c>)
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	4a18      	ldr	r2, [pc, #96]	@ (80153c0 <pvPortMalloc+0x194>)
 8015360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015364:	685a      	ldr	r2, [r3, #4]
 8015366:	4b13      	ldr	r3, [pc, #76]	@ (80153b4 <pvPortMalloc+0x188>)
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	431a      	orrs	r2, r3
 801536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801536e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015372:	2200      	movs	r2, #0
 8015374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015376:	4b13      	ldr	r3, [pc, #76]	@ (80153c4 <pvPortMalloc+0x198>)
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	3301      	adds	r3, #1
 801537c:	4a11      	ldr	r2, [pc, #68]	@ (80153c4 <pvPortMalloc+0x198>)
 801537e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015380:	f7fe fe06 	bl	8013f90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015384:	69fb      	ldr	r3, [r7, #28]
 8015386:	f003 0307 	and.w	r3, r3, #7
 801538a:	2b00      	cmp	r3, #0
 801538c:	d00b      	beq.n	80153a6 <pvPortMalloc+0x17a>
	__asm volatile
 801538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015392:	f383 8811 	msr	BASEPRI, r3
 8015396:	f3bf 8f6f 	isb	sy
 801539a:	f3bf 8f4f 	dsb	sy
 801539e:	60fb      	str	r3, [r7, #12]
}
 80153a0:	bf00      	nop
 80153a2:	bf00      	nop
 80153a4:	e7fd      	b.n	80153a2 <pvPortMalloc+0x176>
	return pvReturn;
 80153a6:	69fb      	ldr	r3, [r7, #28]
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	3728      	adds	r7, #40	@ 0x28
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}
 80153b0:	200076d0 	.word	0x200076d0
 80153b4:	200076e4 	.word	0x200076e4
 80153b8:	200076d4 	.word	0x200076d4
 80153bc:	200076c8 	.word	0x200076c8
 80153c0:	200076d8 	.word	0x200076d8
 80153c4:	200076dc 	.word	0x200076dc

080153c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b086      	sub	sp, #24
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d04f      	beq.n	801547a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80153da:	2308      	movs	r3, #8
 80153dc:	425b      	negs	r3, r3
 80153de:	697a      	ldr	r2, [r7, #20]
 80153e0:	4413      	add	r3, r2
 80153e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80153e4:	697b      	ldr	r3, [r7, #20]
 80153e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80153e8:	693b      	ldr	r3, [r7, #16]
 80153ea:	685a      	ldr	r2, [r3, #4]
 80153ec:	4b25      	ldr	r3, [pc, #148]	@ (8015484 <vPortFree+0xbc>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	4013      	ands	r3, r2
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d10b      	bne.n	801540e <vPortFree+0x46>
	__asm volatile
 80153f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153fa:	f383 8811 	msr	BASEPRI, r3
 80153fe:	f3bf 8f6f 	isb	sy
 8015402:	f3bf 8f4f 	dsb	sy
 8015406:	60fb      	str	r3, [r7, #12]
}
 8015408:	bf00      	nop
 801540a:	bf00      	nop
 801540c:	e7fd      	b.n	801540a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801540e:	693b      	ldr	r3, [r7, #16]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d00b      	beq.n	801542e <vPortFree+0x66>
	__asm volatile
 8015416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801541a:	f383 8811 	msr	BASEPRI, r3
 801541e:	f3bf 8f6f 	isb	sy
 8015422:	f3bf 8f4f 	dsb	sy
 8015426:	60bb      	str	r3, [r7, #8]
}
 8015428:	bf00      	nop
 801542a:	bf00      	nop
 801542c:	e7fd      	b.n	801542a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801542e:	693b      	ldr	r3, [r7, #16]
 8015430:	685a      	ldr	r2, [r3, #4]
 8015432:	4b14      	ldr	r3, [pc, #80]	@ (8015484 <vPortFree+0xbc>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	4013      	ands	r3, r2
 8015438:	2b00      	cmp	r3, #0
 801543a:	d01e      	beq.n	801547a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801543c:	693b      	ldr	r3, [r7, #16]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d11a      	bne.n	801547a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	685a      	ldr	r2, [r3, #4]
 8015448:	4b0e      	ldr	r3, [pc, #56]	@ (8015484 <vPortFree+0xbc>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	43db      	mvns	r3, r3
 801544e:	401a      	ands	r2, r3
 8015450:	693b      	ldr	r3, [r7, #16]
 8015452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015454:	f7fe fd8e 	bl	8013f74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015458:	693b      	ldr	r3, [r7, #16]
 801545a:	685a      	ldr	r2, [r3, #4]
 801545c:	4b0a      	ldr	r3, [pc, #40]	@ (8015488 <vPortFree+0xc0>)
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	4413      	add	r3, r2
 8015462:	4a09      	ldr	r2, [pc, #36]	@ (8015488 <vPortFree+0xc0>)
 8015464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015466:	6938      	ldr	r0, [r7, #16]
 8015468:	f000 f874 	bl	8015554 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801546c:	4b07      	ldr	r3, [pc, #28]	@ (801548c <vPortFree+0xc4>)
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	3301      	adds	r3, #1
 8015472:	4a06      	ldr	r2, [pc, #24]	@ (801548c <vPortFree+0xc4>)
 8015474:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015476:	f7fe fd8b 	bl	8013f90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801547a:	bf00      	nop
 801547c:	3718      	adds	r7, #24
 801547e:	46bd      	mov	sp, r7
 8015480:	bd80      	pop	{r7, pc}
 8015482:	bf00      	nop
 8015484:	200076e4 	.word	0x200076e4
 8015488:	200076d4 	.word	0x200076d4
 801548c:	200076e0 	.word	0x200076e0

08015490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015490:	b480      	push	{r7}
 8015492:	b085      	sub	sp, #20
 8015494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015496:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 801549a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801549c:	4b27      	ldr	r3, [pc, #156]	@ (801553c <prvHeapInit+0xac>)
 801549e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	f003 0307 	and.w	r3, r3, #7
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d00c      	beq.n	80154c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	3307      	adds	r3, #7
 80154ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	f023 0307 	bic.w	r3, r3, #7
 80154b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80154b8:	68ba      	ldr	r2, [r7, #8]
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	1ad3      	subs	r3, r2, r3
 80154be:	4a1f      	ldr	r2, [pc, #124]	@ (801553c <prvHeapInit+0xac>)
 80154c0:	4413      	add	r3, r2
 80154c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80154c8:	4a1d      	ldr	r2, [pc, #116]	@ (8015540 <prvHeapInit+0xb0>)
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80154ce:	4b1c      	ldr	r3, [pc, #112]	@ (8015540 <prvHeapInit+0xb0>)
 80154d0:	2200      	movs	r2, #0
 80154d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	68ba      	ldr	r2, [r7, #8]
 80154d8:	4413      	add	r3, r2
 80154da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80154dc:	2208      	movs	r2, #8
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	1a9b      	subs	r3, r3, r2
 80154e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	f023 0307 	bic.w	r3, r3, #7
 80154ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	4a15      	ldr	r2, [pc, #84]	@ (8015544 <prvHeapInit+0xb4>)
 80154f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80154f2:	4b14      	ldr	r3, [pc, #80]	@ (8015544 <prvHeapInit+0xb4>)
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	2200      	movs	r2, #0
 80154f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80154fa:	4b12      	ldr	r3, [pc, #72]	@ (8015544 <prvHeapInit+0xb4>)
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	2200      	movs	r2, #0
 8015500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	68fa      	ldr	r2, [r7, #12]
 801550a:	1ad2      	subs	r2, r2, r3
 801550c:	683b      	ldr	r3, [r7, #0]
 801550e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015510:	4b0c      	ldr	r3, [pc, #48]	@ (8015544 <prvHeapInit+0xb4>)
 8015512:	681a      	ldr	r2, [r3, #0]
 8015514:	683b      	ldr	r3, [r7, #0]
 8015516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	685b      	ldr	r3, [r3, #4]
 801551c:	4a0a      	ldr	r2, [pc, #40]	@ (8015548 <prvHeapInit+0xb8>)
 801551e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	685b      	ldr	r3, [r3, #4]
 8015524:	4a09      	ldr	r2, [pc, #36]	@ (801554c <prvHeapInit+0xbc>)
 8015526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015528:	4b09      	ldr	r3, [pc, #36]	@ (8015550 <prvHeapInit+0xc0>)
 801552a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801552e:	601a      	str	r2, [r3, #0]
}
 8015530:	bf00      	nop
 8015532:	3714      	adds	r7, #20
 8015534:	46bd      	mov	sp, r7
 8015536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553a:	4770      	bx	lr
 801553c:	20003848 	.word	0x20003848
 8015540:	200076c8 	.word	0x200076c8
 8015544:	200076d0 	.word	0x200076d0
 8015548:	200076d8 	.word	0x200076d8
 801554c:	200076d4 	.word	0x200076d4
 8015550:	200076e4 	.word	0x200076e4

08015554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015554:	b480      	push	{r7}
 8015556:	b085      	sub	sp, #20
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801555c:	4b28      	ldr	r3, [pc, #160]	@ (8015600 <prvInsertBlockIntoFreeList+0xac>)
 801555e:	60fb      	str	r3, [r7, #12]
 8015560:	e002      	b.n	8015568 <prvInsertBlockIntoFreeList+0x14>
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	60fb      	str	r3, [r7, #12]
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	687a      	ldr	r2, [r7, #4]
 801556e:	429a      	cmp	r2, r3
 8015570:	d8f7      	bhi.n	8015562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	685b      	ldr	r3, [r3, #4]
 801557a:	68ba      	ldr	r2, [r7, #8]
 801557c:	4413      	add	r3, r2
 801557e:	687a      	ldr	r2, [r7, #4]
 8015580:	429a      	cmp	r2, r3
 8015582:	d108      	bne.n	8015596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	685a      	ldr	r2, [r3, #4]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	685b      	ldr	r3, [r3, #4]
 801558c:	441a      	add	r2, r3
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	685b      	ldr	r3, [r3, #4]
 801559e:	68ba      	ldr	r2, [r7, #8]
 80155a0:	441a      	add	r2, r3
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	429a      	cmp	r2, r3
 80155a8:	d118      	bne.n	80155dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	681a      	ldr	r2, [r3, #0]
 80155ae:	4b15      	ldr	r3, [pc, #84]	@ (8015604 <prvInsertBlockIntoFreeList+0xb0>)
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	429a      	cmp	r2, r3
 80155b4:	d00d      	beq.n	80155d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	685a      	ldr	r2, [r3, #4]
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	685b      	ldr	r3, [r3, #4]
 80155c0:	441a      	add	r2, r3
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	681a      	ldr	r2, [r3, #0]
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	601a      	str	r2, [r3, #0]
 80155d0:	e008      	b.n	80155e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80155d2:	4b0c      	ldr	r3, [pc, #48]	@ (8015604 <prvInsertBlockIntoFreeList+0xb0>)
 80155d4:	681a      	ldr	r2, [r3, #0]
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	601a      	str	r2, [r3, #0]
 80155da:	e003      	b.n	80155e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	681a      	ldr	r2, [r3, #0]
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80155e4:	68fa      	ldr	r2, [r7, #12]
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d002      	beq.n	80155f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	687a      	ldr	r2, [r7, #4]
 80155f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80155f2:	bf00      	nop
 80155f4:	3714      	adds	r7, #20
 80155f6:	46bd      	mov	sp, r7
 80155f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fc:	4770      	bx	lr
 80155fe:	bf00      	nop
 8015600:	200076c8 	.word	0x200076c8
 8015604:	200076d0 	.word	0x200076d0

08015608 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b086      	sub	sp, #24
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 8015610:	2300      	movs	r3, #0
 8015612:	613b      	str	r3, [r7, #16]
 8015614:	2300      	movs	r3, #0
 8015616:	60fb      	str	r3, [r7, #12]
 8015618:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801561c:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 801561e:	f7fe fca9 	bl	8013f74 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 8015622:	4b22      	ldr	r3, [pc, #136]	@ (80156ac <vPortGetHeapStats+0xa4>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	617b      	str	r3, [r7, #20]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d01a      	beq.n	8015664 <vPortGetHeapStats+0x5c>
		{
			do
			{
				/* Increment the number of blocks and record the largest block seen
				so far. */
				xBlocks++;
 801562e:	693b      	ldr	r3, [r7, #16]
 8015630:	3301      	adds	r3, #1
 8015632:	613b      	str	r3, [r7, #16]

				if( pxBlock->xBlockSize > xMaxSize )
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	685b      	ldr	r3, [r3, #4]
 8015638:	68fa      	ldr	r2, [r7, #12]
 801563a:	429a      	cmp	r2, r3
 801563c:	d202      	bcs.n	8015644 <vPortGetHeapStats+0x3c>
				{
					xMaxSize = pxBlock->xBlockSize;
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	685b      	ldr	r3, [r3, #4]
 8015642:	60fb      	str	r3, [r7, #12]
				}

				if( pxBlock->xBlockSize < xMinSize )
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	685b      	ldr	r3, [r3, #4]
 8015648:	68ba      	ldr	r2, [r7, #8]
 801564a:	429a      	cmp	r2, r3
 801564c:	d902      	bls.n	8015654 <vPortGetHeapStats+0x4c>
				{
					xMinSize = pxBlock->xBlockSize;
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	685b      	ldr	r3, [r3, #4]
 8015652:	60bb      	str	r3, [r7, #8]
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	617b      	str	r3, [r7, #20]
			} while( pxBlock != pxEnd );
 801565a:	4b15      	ldr	r3, [pc, #84]	@ (80156b0 <vPortGetHeapStats+0xa8>)
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	697a      	ldr	r2, [r7, #20]
 8015660:	429a      	cmp	r2, r3
 8015662:	d1e4      	bne.n	801562e <vPortGetHeapStats+0x26>
		}
	}
	xTaskResumeAll();
 8015664:	f7fe fc94 	bl	8013f90 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	68fa      	ldr	r2, [r7, #12]
 801566c:	605a      	str	r2, [r3, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	68ba      	ldr	r2, [r7, #8]
 8015672:	609a      	str	r2, [r3, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	693a      	ldr	r2, [r7, #16]
 8015678:	60da      	str	r2, [r3, #12]

	taskENTER_CRITICAL();
 801567a:	f7ff fcb5 	bl	8014fe8 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801567e:	4b0d      	ldr	r3, [pc, #52]	@ (80156b4 <vPortGetHeapStats+0xac>)
 8015680:	681a      	ldr	r2, [r3, #0]
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	601a      	str	r2, [r3, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 8015686:	4b0c      	ldr	r3, [pc, #48]	@ (80156b8 <vPortGetHeapStats+0xb0>)
 8015688:	681a      	ldr	r2, [r3, #0]
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	615a      	str	r2, [r3, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801568e:	4b0b      	ldr	r3, [pc, #44]	@ (80156bc <vPortGetHeapStats+0xb4>)
 8015690:	681a      	ldr	r2, [r3, #0]
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	619a      	str	r2, [r3, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 8015696:	4b0a      	ldr	r3, [pc, #40]	@ (80156c0 <vPortGetHeapStats+0xb8>)
 8015698:	681a      	ldr	r2, [r3, #0]
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	611a      	str	r2, [r3, #16]
	}
	taskEXIT_CRITICAL();
 801569e:	f7ff fcd5 	bl	801504c <vPortExitCritical>
}
 80156a2:	bf00      	nop
 80156a4:	3718      	adds	r7, #24
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
 80156aa:	bf00      	nop
 80156ac:	200076c8 	.word	0x200076c8
 80156b0:	200076d0 	.word	0x200076d0
 80156b4:	200076d4 	.word	0x200076d4
 80156b8:	200076dc 	.word	0x200076dc
 80156bc:	200076e0 	.word	0x200076e0
 80156c0:	200076d8 	.word	0x200076d8

080156c4 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 80156c8:	f7fc f84d 	bl	8011766 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 80156cc:	f000 f818 	bl	8015700 <USBPD_DPM_InitCore>
 80156d0:	4603      	mov	r3, r0
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d001      	beq.n	80156da <MX_USBPD_Init+0x16>
  {
    while(1);
 80156d6:	bf00      	nop
 80156d8:	e7fd      	b.n	80156d6 <MX_USBPD_Init+0x12>
  }

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 80156da:	f000 fa01 	bl	8015ae0 <USBPD_DPM_UserInit>
 80156de:	4603      	mov	r3, r0
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d001      	beq.n	80156e8 <MX_USBPD_Init+0x24>
  {
    while(1);
 80156e4:	bf00      	nop
 80156e6:	e7fd      	b.n	80156e4 <MX_USBPD_Init+0x20>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 80156e8:	f000 f8b8 	bl	801585c <USBPD_DPM_InitOS>
 80156ec:	4603      	mov	r3, r0
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d001      	beq.n	80156f6 <MX_USBPD_Init+0x32>
  {
    while(1);
 80156f2:	bf00      	nop
 80156f4:	e7fd      	b.n	80156f2 <MX_USBPD_Init+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 80156f6:	b662      	cpsie	i
}
 80156f8:	bf00      	nop
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 80156fa:	bf00      	nop
 80156fc:	bd80      	pop	{r7, pc}
	...

08015700 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b082      	sub	sp, #8
 8015704:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 8015706:	2300      	movs	r3, #0
 8015708:	71fb      	strb	r3, [r7, #7]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 801570a:	484f      	ldr	r0, [pc, #316]	@ (8015848 <USBPD_DPM_InitCore+0x148>)
 801570c:	f7eb fb0d 	bl	8000d2a <USBPD_PE_CheckLIB>
 8015710:	4603      	mov	r3, r0
 8015712:	2b01      	cmp	r3, #1
 8015714:	d001      	beq.n	801571a <USBPD_DPM_InitCore+0x1a>
  {
    return USBPD_ERROR;
 8015716:	2302      	movs	r3, #2
 8015718:	e092      	b.n	8015840 <USBPD_DPM_InitCore+0x140>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 801571a:	f7eb fb11 	bl	8000d40 <USBPD_PE_GetMemoryConsumption>
 801571e:	6038      	str	r0, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8015720:	2300      	movs	r3, #0
 8015722:	71bb      	strb	r3, [r7, #6]
 8015724:	e087      	b.n	8015836 <USBPD_DPM_InitCore+0x136>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 8015726:	79bb      	ldrb	r3, [r7, #6]
 8015728:	4a48      	ldr	r2, [pc, #288]	@ (801584c <USBPD_DPM_InitCore+0x14c>)
 801572a:	009b      	lsls	r3, r3, #2
 801572c:	4413      	add	r3, r2
 801572e:	785a      	ldrb	r2, [r3, #1]
 8015730:	f36f 02c3 	bfc	r2, #3, #1
 8015734:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 8015736:	79b9      	ldrb	r1, [r7, #6]
 8015738:	79ba      	ldrb	r2, [r7, #6]
 801573a:	4845      	ldr	r0, [pc, #276]	@ (8015850 <USBPD_DPM_InitCore+0x150>)
 801573c:	460b      	mov	r3, r1
 801573e:	005b      	lsls	r3, r3, #1
 8015740:	440b      	add	r3, r1
 8015742:	009b      	lsls	r3, r3, #2
 8015744:	4403      	add	r3, r0
 8015746:	791b      	ldrb	r3, [r3, #4]
 8015748:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801574c:	b2d8      	uxtb	r0, r3
 801574e:	493f      	ldr	r1, [pc, #252]	@ (801584c <USBPD_DPM_InitCore+0x14c>)
 8015750:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015754:	f360 0301 	bfi	r3, r0, #0, #2
 8015758:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 801575c:	79b9      	ldrb	r1, [r7, #6]
 801575e:	79ba      	ldrb	r2, [r7, #6]
 8015760:	483b      	ldr	r0, [pc, #236]	@ (8015850 <USBPD_DPM_InitCore+0x150>)
 8015762:	460b      	mov	r3, r1
 8015764:	005b      	lsls	r3, r3, #1
 8015766:	440b      	add	r3, r1
 8015768:	009b      	lsls	r3, r3, #2
 801576a:	4403      	add	r3, r0
 801576c:	791b      	ldrb	r3, [r3, #4]
 801576e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015772:	b2d8      	uxtb	r0, r3
 8015774:	4935      	ldr	r1, [pc, #212]	@ (801584c <USBPD_DPM_InitCore+0x14c>)
 8015776:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801577a:	f360 0382 	bfi	r3, r0, #2, #1
 801577e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 8015782:	79ba      	ldrb	r2, [r7, #6]
 8015784:	4931      	ldr	r1, [pc, #196]	@ (801584c <USBPD_DPM_InitCore+0x14c>)
 8015786:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801578a:	f36f 1304 	bfc	r3, #4, #1
 801578e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 8015792:	79ba      	ldrb	r2, [r7, #6]
 8015794:	492d      	ldr	r1, [pc, #180]	@ (801584c <USBPD_DPM_InitCore+0x14c>)
 8015796:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801579a:	f36f 1387 	bfc	r3, #6, #2
 801579e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 80157a2:	79bb      	ldrb	r3, [r7, #6]
 80157a4:	4a29      	ldr	r2, [pc, #164]	@ (801584c <USBPD_DPM_InitCore+0x14c>)
 80157a6:	009b      	lsls	r3, r3, #2
 80157a8:	4413      	add	r3, r2
 80157aa:	785a      	ldrb	r2, [r3, #1]
 80157ac:	f36f 1246 	bfc	r2, #5, #2
 80157b0:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 80157b2:	79bb      	ldrb	r3, [r7, #6]
 80157b4:	4a25      	ldr	r2, [pc, #148]	@ (801584c <USBPD_DPM_InitCore+0x14c>)
 80157b6:	009b      	lsls	r3, r3, #2
 80157b8:	4413      	add	r3, r2
 80157ba:	785a      	ldrb	r2, [r3, #1]
 80157bc:	f36f 12c7 	bfc	r2, #7, #1
 80157c0:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index, (USBPD_CAD_Callbacks *)&CAD_cbs,
 80157c2:	79ba      	ldrb	r2, [r7, #6]
 80157c4:	4613      	mov	r3, r2
 80157c6:	005b      	lsls	r3, r3, #1
 80157c8:	4413      	add	r3, r2
 80157ca:	009b      	lsls	r3, r3, #2
 80157cc:	4a20      	ldr	r2, [pc, #128]	@ (8015850 <USBPD_DPM_InitCore+0x150>)
 80157ce:	441a      	add	r2, r3
 80157d0:	79bb      	ldrb	r3, [r7, #6]
 80157d2:	009b      	lsls	r3, r3, #2
 80157d4:	491d      	ldr	r1, [pc, #116]	@ (801584c <USBPD_DPM_InitCore+0x14c>)
 80157d6:	440b      	add	r3, r1
 80157d8:	79b8      	ldrb	r0, [r7, #6]
 80157da:	491e      	ldr	r1, [pc, #120]	@ (8015854 <USBPD_DPM_InitCore+0x154>)
 80157dc:	f7ea fd20 	bl	8000220 <USBPD_CAD_Init>
 80157e0:	4603      	mov	r3, r0
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d001      	beq.n	80157ea <USBPD_DPM_InitCore+0xea>
 80157e6:	2302      	movs	r3, #2
 80157e8:	e02a      	b.n	8015840 <USBPD_DPM_InitCore+0x140>
                                           (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index], &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 80157ea:	79ba      	ldrb	r2, [r7, #6]
 80157ec:	4613      	mov	r3, r2
 80157ee:	005b      	lsls	r3, r3, #1
 80157f0:	4413      	add	r3, r2
 80157f2:	009b      	lsls	r3, r3, #2
 80157f4:	4a16      	ldr	r2, [pc, #88]	@ (8015850 <USBPD_DPM_InitCore+0x150>)
 80157f6:	1899      	adds	r1, r3, r2
 80157f8:	79bb      	ldrb	r3, [r7, #6]
 80157fa:	009b      	lsls	r3, r3, #2
 80157fc:	4a13      	ldr	r2, [pc, #76]	@ (801584c <USBPD_DPM_InitCore+0x14c>)
 80157fe:	441a      	add	r2, r3
 8015800:	79b8      	ldrb	r0, [r7, #6]
 8015802:	4b15      	ldr	r3, [pc, #84]	@ (8015858 <USBPD_DPM_InitCore+0x158>)
 8015804:	f7ea fdc2 	bl	800038c <USBPD_PE_Init>
 8015808:	4603      	mov	r3, r0
 801580a:	71fb      	strb	r3, [r7, #7]
 801580c:	79fb      	ldrb	r3, [r7, #7]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d001      	beq.n	8015816 <USBPD_DPM_InitCore+0x116>
 8015812:	79fb      	ldrb	r3, [r7, #7]
 8015814:	e014      	b.n	8015840 <USBPD_DPM_InitCore+0x140>
                                         &DPM_Params[_port_index], &dpmCallbacks));

  /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 8015816:	79bb      	ldrb	r3, [r7, #6]
 8015818:	4a0c      	ldr	r2, [pc, #48]	@ (801584c <USBPD_DPM_InitCore+0x14c>)
 801581a:	009b      	lsls	r3, r3, #2
 801581c:	4413      	add	r3, r2
 801581e:	785a      	ldrb	r2, [r3, #1]
 8015820:	f042 0208 	orr.w	r2, r2, #8
 8015824:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 8015826:	79bb      	ldrb	r3, [r7, #6]
 8015828:	2101      	movs	r1, #1
 801582a:	4618      	mov	r0, r3
 801582c:	f7ea fd20 	bl	8000270 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8015830:	79bb      	ldrb	r3, [r7, #6]
 8015832:	3301      	adds	r3, #1
 8015834:	71bb      	strb	r3, [r7, #6]
 8015836:	79bb      	ldrb	r3, [r7, #6]
 8015838:	2b00      	cmp	r3, #0
 801583a:	f43f af74 	beq.w	8015726 <USBPD_DPM_InitCore+0x26>
  }

  return _retr;
 801583e:	79fb      	ldrb	r3, [r7, #7]
}
 8015840:	4618      	mov	r0, r3
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	30410004 	.word	0x30410004
 801584c:	200076f4 	.word	0x200076f4
 8015850:	20000144 	.word	0x20000144
 8015854:	0801c390 	.word	0x0801c390
 8015858:	0801c398 	.word	0x0801c398

0801585c <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  CADQueueId = osMessageCreate(osMessageQ(queueCAD), NULL);
 8015860:	2100      	movs	r1, #0
 8015862:	480e      	ldr	r0, [pc, #56]	@ (801589c <USBPD_DPM_InitOS+0x40>)
 8015864:	f7fd f8a0 	bl	80129a8 <osMessageCreate>
 8015868:	4603      	mov	r3, r0
 801586a:	4a0d      	ldr	r2, [pc, #52]	@ (80158a0 <USBPD_DPM_InitOS+0x44>)
 801586c:	6013      	str	r3, [r2, #0]
  if (osThreadCreate(osThread(CAD), NULL) == NULL)
 801586e:	2100      	movs	r1, #0
 8015870:	480c      	ldr	r0, [pc, #48]	@ (80158a4 <USBPD_DPM_InitOS+0x48>)
 8015872:	f7fd f852 	bl	801291a <osThreadCreate>
 8015876:	4603      	mov	r3, r0
 8015878:	2b00      	cmp	r3, #0
 801587a:	d101      	bne.n	8015880 <USBPD_DPM_InitOS+0x24>
#else
  CADQueueId = osMessageQueueNew (2, sizeof(uint16_t), NULL);
  if (NULL == osThreadNew(USBPD_CAD_Task, &CADQueueId, &CAD_Thread_Atrr))
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 801587c:	2302      	movs	r3, #2
 801587e:	e00a      	b.n	8015896 <USBPD_DPM_InitOS+0x3a>
  }

  /* Create the queue corresponding to PE task */
#if (osCMSIS < 0x20000U)
  PEQueueId[0] = osMessageCreate(osMessageQ(queuePE), NULL);
 8015880:	2100      	movs	r1, #0
 8015882:	4809      	ldr	r0, [pc, #36]	@ (80158a8 <USBPD_DPM_InitOS+0x4c>)
 8015884:	f7fd f890 	bl	80129a8 <osMessageCreate>
 8015888:	4603      	mov	r3, r0
 801588a:	4a08      	ldr	r2, [pc, #32]	@ (80158ac <USBPD_DPM_InitOS+0x50>)
 801588c:	6013      	str	r3, [r2, #0]
  PEQueueId[1] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#endif /* osCMSIS < 0x20000U */

  /* PE task to be created on attachment */
  DPM_PEThreadId_Table[USBPD_PORT_0] = NULL;
 801588e:	4b08      	ldr	r3, [pc, #32]	@ (80158b0 <USBPD_DPM_InitOS+0x54>)
 8015890:	2200      	movs	r2, #0
 8015892:	601a      	str	r2, [r3, #0]
#if USBPD_PORT_COUNT == 2
  DPM_PEThreadId_Table[USBPD_PORT_1] = NULL;
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 8015894:	2300      	movs	r3, #0
}
 8015896:	4618      	mov	r0, r3
 8015898:	bd80      	pop	{r7, pc}
 801589a:	bf00      	nop
 801589c:	0801c388 	.word	0x0801c388
 80158a0:	200076e8 	.word	0x200076e8
 80158a4:	0801c374 	.word	0x0801c374
 80158a8:	0801c36c 	.word	0x0801c36c
 80158ac:	200076f0 	.word	0x200076f0
 80158b0:	200076ec 	.word	0x200076ec

080158b4 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	4603      	mov	r3, r0
 80158bc:	71fb      	strb	r3, [r7, #7]
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(PEQueueId[PortNum], 0xFFFF, 0);
 80158be:	79fb      	ldrb	r3, [r7, #7]
 80158c0:	4a06      	ldr	r2, [pc, #24]	@ (80158dc <USBPD_PE_TaskWakeUp+0x28>)
 80158c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158c6:	2200      	movs	r2, #0
 80158c8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80158cc:	4618      	mov	r0, r3
 80158ce:	f7fd f87d 	bl	80129cc <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(PEQueueId[PortNum], &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 80158d2:	bf00      	nop
 80158d4:	3708      	adds	r7, #8
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}
 80158da:	bf00      	nop
 80158dc:	200076f0 	.word	0x200076f0

080158e0 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
 80158e4:	4b04      	ldr	r3, [pc, #16]	@ (80158f8 <USBPD_DPM_CADTaskWakeUp+0x18>)
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	2200      	movs	r2, #0
 80158ea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80158ee:	4618      	mov	r0, r3
 80158f0:	f7fd f86c 	bl	80129cc <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 80158f4:	bf00      	nop
 80158f6:	bd80      	pop	{r7, pc}
 80158f8:	200076e8 	.word	0x200076e8

080158fc <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task(void const *argument)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b088      	sub	sp, #32
 8015900:	af00      	add	r7, sp, #0
 8015902:	6178      	str	r0, [r7, #20]
  uint8_t _port = (uint32_t)argument;
 8015904:	697b      	ldr	r3, [r7, #20]
 8015906:	77fb      	strb	r3, [r7, #31]
  uint32_t _timing;

  for(;;)
  {
    _timing = USBPD_PE_StateMachine_SNK(_port);
 8015908:	7ffb      	ldrb	r3, [r7, #31]
 801590a:	4618      	mov	r0, r3
 801590c:	f7eb fce6 	bl	80012dc <USBPD_PE_StateMachine_SNK>
 8015910:	61b8      	str	r0, [r7, #24]
    osMessageGet(PEQueueId[_port],_timing);
 8015912:	7ffb      	ldrb	r3, [r7, #31]
 8015914:	4a04      	ldr	r2, [pc, #16]	@ (8015928 <USBPD_PE_Task+0x2c>)
 8015916:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801591a:	463b      	mov	r3, r7
 801591c:	69ba      	ldr	r2, [r7, #24]
 801591e:	4618      	mov	r0, r3
 8015920:	f7fd f894 	bl	8012a4c <osMessageGet>
    _timing = USBPD_PE_StateMachine_SNK(_port);
 8015924:	bf00      	nop
 8015926:	e7ef      	b.n	8015908 <USBPD_PE_Task+0xc>
 8015928:	200076f0 	.word	0x200076f0

0801592c <USBPD_CAD_Task>:
#if (osCMSIS < 0x20000U)
void USBPD_CAD_Task(void const *argument)
#else
void USBPD_CAD_Task(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 801592c:	b590      	push	{r4, r7, lr}
 801592e:	b087      	sub	sp, #28
 8015930:	af00      	add	r7, sp, #0
 8015932:	6178      	str	r0, [r7, #20]
  for (;;)
  {
#if (osCMSIS < 0x20000U)
    osMessageGet(CADQueueId, USBPD_CAD_Process());
 8015934:	4b05      	ldr	r3, [pc, #20]	@ (801594c <USBPD_CAD_Task+0x20>)
 8015936:	681c      	ldr	r4, [r3, #0]
 8015938:	f7ea fca1 	bl	800027e <USBPD_CAD_Process>
 801593c:	4602      	mov	r2, r0
 801593e:	463b      	mov	r3, r7
 8015940:	4621      	mov	r1, r4
 8015942:	4618      	mov	r0, r3
 8015944:	f7fd f882 	bl	8012a4c <osMessageGet>
 8015948:	e7f4      	b.n	8015934 <USBPD_CAD_Task+0x8>
 801594a:	bf00      	nop
 801594c:	200076e8 	.word	0x200076e8

08015950 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b084      	sub	sp, #16
 8015954:	af00      	add	r7, sp, #0
 8015956:	4603      	mov	r3, r0
 8015958:	603a      	str	r2, [r7, #0]
 801595a:	71fb      	strb	r3, [r7, #7]
 801595c:	460b      	mov	r3, r1
 801595e:	71bb      	strb	r3, [r7, #6]

  switch (State)
 8015960:	79bb      	ldrb	r3, [r7, #6]
 8015962:	3b01      	subs	r3, #1
 8015964:	2b03      	cmp	r3, #3
 8015966:	d867      	bhi.n	8015a38 <USBPD_DPM_CADCallback+0xe8>
 8015968:	a201      	add	r2, pc, #4	@ (adr r2, 8015970 <USBPD_DPM_CADCallback+0x20>)
 801596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801596e:	bf00      	nop
 8015970:	0801599d 	.word	0x0801599d
 8015974:	0801598f 	.word	0x0801598f
 8015978:	0801599d 	.word	0x0801599d
 801597c:	08015981 	.word	0x08015981
    case USBPD_CAD_EVENT_ATTEMC :
    {
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnStatus = USBPD_TRUE;
#endif /* _VCONN_SUPPORT */
      DPM_ManageAttachedState(PortNum, State, Cc);
 8015980:	79b9      	ldrb	r1, [r7, #6]
 8015982:	79fb      	ldrb	r3, [r7, #7]
 8015984:	683a      	ldr	r2, [r7, #0]
 8015986:	4618      	mov	r0, r3
 8015988:	f000 f860 	bl	8015a4c <DPM_ManageAttachedState>
#ifdef _VCONN_SUPPORT
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=TRUE");
#endif /* _VCONN_SUPPORT */
      break;
 801598c:	e055      	b.n	8015a3a <USBPD_DPM_CADCallback+0xea>
    }
    case USBPD_CAD_EVENT_ATTACHED :
      DPM_ManageAttachedState(PortNum, State, Cc);
 801598e:	79b9      	ldrb	r1, [r7, #6]
 8015990:	79fb      	ldrb	r3, [r7, #7]
 8015992:	683a      	ldr	r2, [r7, #0]
 8015994:	4618      	mov	r0, r3
 8015996:	f000 f859 	bl	8015a4c <DPM_ManageAttachedState>
      break;
 801599a:	e04e      	b.n	8015a3a <USBPD_DPM_CADCallback+0xea>
    case USBPD_CAD_EVENT_DETACHED :
    case USBPD_CAD_EVENT_EMC :
    {
      /* The ufp is detached */
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 801599c:	79fb      	ldrb	r3, [r7, #7]
 801599e:	2100      	movs	r1, #0
 80159a0:	4618      	mov	r0, r3
 80159a2:	f7ea fd59 	bl	8000458 <USBPD_PE_IsCableConnected>
      /* Terminate PE task */
      if (DPM_PEThreadId_Table[PortNum] != NULL)
 80159a6:	79fb      	ldrb	r3, [r7, #7]
 80159a8:	4a26      	ldr	r2, [pc, #152]	@ (8015a44 <USBPD_DPM_CADCallback+0xf4>)
 80159aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d023      	beq.n	80159fa <USBPD_DPM_CADCallback+0xaa>
      {
        uint8_t _timeout = 0;
 80159b2:	2300      	movs	r3, #0
 80159b4:	73fb      	strb	r3, [r7, #15]
        /* Let time to PE to complete the ongoing action */
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 80159b6:	e008      	b.n	80159ca <USBPD_DPM_CADCallback+0x7a>
        {
          osDelay(1);
 80159b8:	2001      	movs	r0, #1
 80159ba:	f7fc ffe1 	bl	8012980 <osDelay>
          _timeout++;
 80159be:	7bfb      	ldrb	r3, [r7, #15]
 80159c0:	3301      	adds	r3, #1
 80159c2:	73fb      	strb	r3, [r7, #15]
          if (_timeout > 30)
 80159c4:	7bfb      	ldrb	r3, [r7, #15]
 80159c6:	2b1e      	cmp	r3, #30
 80159c8:	d80a      	bhi.n	80159e0 <USBPD_DPM_CADCallback+0x90>
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 80159ca:	79fb      	ldrb	r3, [r7, #7]
 80159cc:	4a1d      	ldr	r2, [pc, #116]	@ (8015a44 <USBPD_DPM_CADCallback+0xf4>)
 80159ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159d2:	4618      	mov	r0, r3
 80159d4:	f7fe fa12 	bl	8013dfc <eTaskGetState>
 80159d8:	4603      	mov	r3, r0
 80159da:	2b02      	cmp	r3, #2
 80159dc:	d1ec      	bne.n	80159b8 <USBPD_DPM_CADCallback+0x68>
 80159de:	e000      	b.n	80159e2 <USBPD_DPM_CADCallback+0x92>
          {
            break;
 80159e0:	bf00      	nop
          }
        };

        /* Kill PE task */
        osThreadTerminate(DPM_PEThreadId_Table[PortNum]);
 80159e2:	79fb      	ldrb	r3, [r7, #7]
 80159e4:	4a17      	ldr	r2, [pc, #92]	@ (8015a44 <USBPD_DPM_CADCallback+0xf4>)
 80159e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7fc ffbc 	bl	8012968 <osThreadTerminate>
        DPM_PEThreadId_Table[PortNum] = NULL;
 80159f0:	79fb      	ldrb	r3, [r7, #7]
 80159f2:	4a14      	ldr	r2, [pc, #80]	@ (8015a44 <USBPD_DPM_CADCallback+0xf4>)
 80159f4:	2100      	movs	r1, #0
 80159f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 80159fa:	79fa      	ldrb	r2, [r7, #7]
 80159fc:	4912      	ldr	r1, [pc, #72]	@ (8015a48 <USBPD_DPM_CADCallback+0xf8>)
 80159fe:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015a02:	f36f 1304 	bfc	r3, #4, #1
 8015a06:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 8015a0a:	79fa      	ldrb	r2, [r7, #7]
 8015a0c:	490e      	ldr	r1, [pc, #56]	@ (8015a48 <USBPD_DPM_CADCallback+0xf8>)
 8015a0e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015a12:	f36f 1387 	bfc	r3, #6, #2
 8015a16:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 8015a1a:	79fb      	ldrb	r3, [r7, #7]
 8015a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8015a48 <USBPD_DPM_CADCallback+0xf8>)
 8015a1e:	009b      	lsls	r3, r3, #2
 8015a20:	4413      	add	r3, r2
 8015a22:	785a      	ldrb	r2, [r3, #1]
 8015a24:	f36f 0202 	bfc	r2, #0, #3
 8015a28:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 8015a2a:	79ba      	ldrb	r2, [r7, #6]
 8015a2c:	79fb      	ldrb	r3, [r7, #7]
 8015a2e:	4611      	mov	r1, r2
 8015a30:	4618      	mov	r0, r3
 8015a32:	f000 f85d 	bl	8015af0 <USBPD_DPM_UserCableDetection>
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnCCIs = CCNONE;
      DPM_Params[PortNum].VconnStatus = USBPD_FALSE;
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=FALSE");
#endif /* _VCONN_SUPPORT */
      break;
 8015a36:	e000      	b.n	8015a3a <USBPD_DPM_CADCallback+0xea>
    }
    default :
      /* nothing to do */
      break;
 8015a38:	bf00      	nop
  }
}
 8015a3a:	bf00      	nop
 8015a3c:	3710      	adds	r7, #16
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}
 8015a42:	bf00      	nop
 8015a44:	200076ec 	.word	0x200076ec
 8015a48:	200076f4 	.word	0x200076f4

08015a4c <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8015a4c:	b590      	push	{r4, r7, lr}
 8015a4e:	b083      	sub	sp, #12
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	4603      	mov	r3, r0
 8015a54:	603a      	str	r2, [r7, #0]
 8015a56:	71fb      	strb	r3, [r7, #7]
 8015a58:	460b      	mov	r3, r1
 8015a5a:	71bb      	strb	r3, [r7, #6]
  if (CC2 == Cc)
  {
    DPM_Params[PortNum].VconnCCIs = CC1;
  }
#endif /* _VCONN_SUPPORT */
  DPM_Params[PortNum].ActiveCCIs = Cc;
 8015a5c:	79fa      	ldrb	r2, [r7, #7]
 8015a5e:	683b      	ldr	r3, [r7, #0]
 8015a60:	f003 0303 	and.w	r3, r3, #3
 8015a64:	b2d8      	uxtb	r0, r3
 8015a66:	491a      	ldr	r1, [pc, #104]	@ (8015ad0 <DPM_ManageAttachedState+0x84>)
 8015a68:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015a6c:	f360 1387 	bfi	r3, r0, #6, #2
 8015a70:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 8015a74:	79fb      	ldrb	r3, [r7, #7]
 8015a76:	2101      	movs	r1, #1
 8015a78:	4618      	mov	r0, r3
 8015a7a:	f7ea fced 	bl	8000458 <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 8015a7e:	79ba      	ldrb	r2, [r7, #6]
 8015a80:	79fb      	ldrb	r3, [r7, #7]
 8015a82:	4611      	mov	r1, r2
 8015a84:	4618      	mov	r0, r3
 8015a86:	f000 f833 	bl	8015af0 <USBPD_DPM_UserCableDetection>

  /* Create PE task */
  if (DPM_PEThreadId_Table[PortNum] == NULL)
 8015a8a:	79fb      	ldrb	r3, [r7, #7]
 8015a8c:	4a11      	ldr	r2, [pc, #68]	@ (8015ad4 <DPM_ManageAttachedState+0x88>)
 8015a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d117      	bne.n	8015ac6 <DPM_ManageAttachedState+0x7a>
  {
#if (osCMSIS < 0x20000U)
    DPM_PEThreadId_Table[PortNum] = osThreadCreate(OSTHREAD_PE(PortNum), (void *)((uint32_t)PortNum));
 8015a96:	79fb      	ldrb	r3, [r7, #7]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d101      	bne.n	8015aa0 <DPM_ManageAttachedState+0x54>
 8015a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8015ad8 <DPM_ManageAttachedState+0x8c>)
 8015a9e:	e000      	b.n	8015aa2 <DPM_ManageAttachedState+0x56>
 8015aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8015adc <DPM_ManageAttachedState+0x90>)
 8015aa2:	79fa      	ldrb	r2, [r7, #7]
 8015aa4:	79fc      	ldrb	r4, [r7, #7]
 8015aa6:	4611      	mov	r1, r2
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7fc ff36 	bl	801291a <osThreadCreate>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	4a08      	ldr	r2, [pc, #32]	@ (8015ad4 <DPM_ManageAttachedState+0x88>)
 8015ab2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
#else
    DPM_PEThreadId_Table[PortNum] = osThreadNew(OSTHREAD_PE(PortNum), NULL, OSTHREAD_PE_ATTR(PortNum));
#endif /* osCMSIS < 0x20000U */
    if (DPM_PEThreadId_Table[PortNum] == NULL)
 8015ab6:	79fb      	ldrb	r3, [r7, #7]
 8015ab8:	4a06      	ldr	r2, [pc, #24]	@ (8015ad4 <DPM_ManageAttachedState+0x88>)
 8015aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d101      	bne.n	8015ac6 <DPM_ManageAttachedState+0x7a>
    {
      /* should not occur. May be an issue with FreeRTOS heap size too small */
      while (1);
 8015ac2:	bf00      	nop
 8015ac4:	e7fd      	b.n	8015ac2 <DPM_ManageAttachedState+0x76>
    }
  }
}
 8015ac6:	bf00      	nop
 8015ac8:	370c      	adds	r7, #12
 8015aca:	46bd      	mov	sp, r7
 8015acc:	bd90      	pop	{r4, r7, pc}
 8015ace:	bf00      	nop
 8015ad0:	200076f4 	.word	0x200076f4
 8015ad4:	200076ec 	.word	0x200076ec
 8015ad8:	0801c344 	.word	0x0801c344
 8015adc:	0801c358 	.word	0x0801c358

08015ae0 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 8015ae0:	b480      	push	{r7}
 8015ae2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 8015ae4:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aee:	4770      	bx	lr

08015af0 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 8015af0:	b480      	push	{r7}
 8015af2:	b083      	sub	sp, #12
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	4603      	mov	r3, r0
 8015af8:	460a      	mov	r2, r1
 8015afa:	71fb      	strb	r3, [r7, #7]
 8015afc:	4613      	mov	r3, r2
 8015afe:	71bb      	strb	r3, [r7, #6]
      // }
      // break;
    // }
  // }
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8015b00:	bf00      	nop
 8015b02:	370c      	adds	r7, #12
 8015b04:	46bd      	mov	sp, r7
 8015b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0a:	4770      	bx	lr

08015b0c <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8015b0c:	b480      	push	{r7}
 8015b0e:	b083      	sub	sp, #12
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	4603      	mov	r3, r0
 8015b14:	460a      	mov	r2, r1
 8015b16:	71fb      	strb	r3, [r7, #7]
 8015b18:	4613      	mov	r3, r2
 8015b1a:	71bb      	strb	r3, [r7, #6]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 8015b1c:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_Notification */
}
 8015b1e:	bf00      	nop
 8015b20:	370c      	adds	r7, #12
 8015b22:	46bd      	mov	sp, r7
 8015b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b28:	4770      	bx	lr

08015b2a <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 8015b2a:	b480      	push	{r7}
 8015b2c:	b083      	sub	sp, #12
 8015b2e:	af00      	add	r7, sp, #0
 8015b30:	4603      	mov	r3, r0
 8015b32:	6039      	str	r1, [r7, #0]
 8015b34:	71fb      	strb	r3, [r7, #7]
 8015b36:	4613      	mov	r3, r2
 8015b38:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 8015b3a:	bf00      	nop
 8015b3c:	370c      	adds	r7, #12
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b44:	4770      	bx	lr

08015b46 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8015b46:	b480      	push	{r7}
 8015b48:	b085      	sub	sp, #20
 8015b4a:	af00      	add	r7, sp, #0
 8015b4c:	60ba      	str	r2, [r7, #8]
 8015b4e:	607b      	str	r3, [r7, #4]
 8015b50:	4603      	mov	r3, r0
 8015b52:	73fb      	strb	r3, [r7, #15]
 8015b54:	460b      	mov	r3, r1
 8015b56:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 8015b58:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 8015b5a:	bf00      	nop
 8015b5c:	3714      	adds	r7, #20
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b64:	4770      	bx	lr

08015b66 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 8015b66:	b480      	push	{r7}
 8015b68:	b085      	sub	sp, #20
 8015b6a:	af00      	add	r7, sp, #0
 8015b6c:	60ba      	str	r2, [r7, #8]
 8015b6e:	607b      	str	r3, [r7, #4]
 8015b70:	4603      	mov	r3, r0
 8015b72:	73fb      	strb	r3, [r7, #15]
 8015b74:	460b      	mov	r3, r1
 8015b76:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 8015b78:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 8015b7a:	bf00      	nop
 8015b7c:	3714      	adds	r7, #20
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b84:	4770      	bx	lr

08015b86 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 8015b86:	b480      	push	{r7}
 8015b88:	b085      	sub	sp, #20
 8015b8a:	af00      	add	r7, sp, #0
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	60b9      	str	r1, [r7, #8]
 8015b90:	607a      	str	r2, [r7, #4]
 8015b92:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 8015b94:	bf00      	nop
 8015b96:	3714      	adds	r7, #20
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9e:	4770      	bx	lr

08015ba0 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 8015ba0:	b480      	push	{r7}
 8015ba2:	b083      	sub	sp, #12
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	603a      	str	r2, [r7, #0]
 8015ba8:	461a      	mov	r2, r3
 8015baa:	4603      	mov	r3, r0
 8015bac:	71fb      	strb	r3, [r7, #7]
 8015bae:	460b      	mov	r3, r1
 8015bb0:	71bb      	strb	r3, [r7, #6]
 8015bb2:	4613      	mov	r3, r2
 8015bb4:	80bb      	strh	r3, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 8015bb6:	bf00      	nop
 8015bb8:	370c      	adds	r7, #12
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc0:	4770      	bx	lr

08015bc2 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 8015bc2:	b580      	push	{r7, lr}
 8015bc4:	b082      	sub	sp, #8
 8015bc6:	af00      	add	r7, sp, #0
 8015bc8:	4603      	mov	r3, r0
 8015bca:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8015bcc:	79fb      	ldrb	r3, [r7, #7]
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7ea fbd8 	bl	8000384 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 8015bd4:	bf00      	nop
 8015bd6:	3708      	adds	r7, #8
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}

08015bdc <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8015bdc:	b480      	push	{r7}
 8015bde:	b085      	sub	sp, #20
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	4603      	mov	r3, r0
 8015be4:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 8015be6:	230c      	movs	r3, #12
 8015be8:	73fb      	strb	r3, [r7, #15]
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 8015bea:	79fb      	ldrb	r3, [r7, #7]
 8015bec:	4a18      	ldr	r2, [pc, #96]	@ (8015c50 <USBPD_DPM_EvaluateDataRoleSwap+0x74>)
 8015bee:	2158      	movs	r1, #88	@ 0x58
 8015bf0:	fb01 f303 	mul.w	r3, r1, r3
 8015bf4:	4413      	add	r3, r2
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015bfc:	b2db      	uxtb	r3, r3
 8015bfe:	2b01      	cmp	r3, #1
 8015c00:	d108      	bne.n	8015c14 <USBPD_DPM_EvaluateDataRoleSwap+0x38>
 8015c02:	79fb      	ldrb	r3, [r7, #7]
 8015c04:	4a13      	ldr	r2, [pc, #76]	@ (8015c54 <USBPD_DPM_EvaluateDataRoleSwap+0x78>)
 8015c06:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8015c0a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015c0e:	b2db      	uxtb	r3, r3
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d014      	beq.n	8015c3e <USBPD_DPM_EvaluateDataRoleSwap+0x62>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 8015c14:	79fb      	ldrb	r3, [r7, #7]
 8015c16:	4a0e      	ldr	r2, [pc, #56]	@ (8015c50 <USBPD_DPM_EvaluateDataRoleSwap+0x74>)
 8015c18:	2158      	movs	r1, #88	@ 0x58
 8015c1a:	fb01 f303 	mul.w	r3, r1, r3
 8015c1e:	4413      	add	r3, r2
 8015c20:	781b      	ldrb	r3, [r3, #0]
 8015c22:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015c26:	b2db      	uxtb	r3, r3
 8015c28:	2b01      	cmp	r3, #1
 8015c2a:	d10a      	bne.n	8015c42 <USBPD_DPM_EvaluateDataRoleSwap+0x66>
 8015c2c:	79fb      	ldrb	r3, [r7, #7]
 8015c2e:	4a09      	ldr	r2, [pc, #36]	@ (8015c54 <USBPD_DPM_EvaluateDataRoleSwap+0x78>)
 8015c30:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8015c34:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015c38:	b2db      	uxtb	r3, r3
 8015c3a:	2b01      	cmp	r3, #1
 8015c3c:	d101      	bne.n	8015c42 <USBPD_DPM_EvaluateDataRoleSwap+0x66>
    {
      status = USBPD_ACCEPT;
 8015c3e:	230a      	movs	r3, #10
 8015c40:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8015c42:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 8015c44:	4618      	mov	r0, r3
 8015c46:	3714      	adds	r7, #20
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4e:	4770      	bx	lr
 8015c50:	20000150 	.word	0x20000150
 8015c54:	200076f4 	.word	0x200076f4

08015c58 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b082      	sub	sp, #8
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	4603      	mov	r3, r0
 8015c60:	460a      	mov	r2, r1
 8015c62:	71fb      	strb	r3, [r7, #7]
 8015c64:	4613      	mov	r3, r2
 8015c66:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 8015c68:	79ba      	ldrb	r2, [r7, #6]
 8015c6a:	79fb      	ldrb	r3, [r7, #7]
 8015c6c:	4611      	mov	r1, r2
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f000 f80a 	bl	8015c88 <USBPD_PWR_IF_SupplyReady>
 8015c74:	4603      	mov	r3, r0
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	bf0c      	ite	eq
 8015c7a:	2301      	moveq	r3, #1
 8015c7c:	2300      	movne	r3, #0
 8015c7e:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 8015c80:	4618      	mov	r0, r3
 8015c82:	3708      	adds	r7, #8
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}

08015c88 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b084      	sub	sp, #16
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	4603      	mov	r3, r0
 8015c90:	460a      	mov	r2, r1
 8015c92:	71fb      	strb	r3, [r7, #7]
 8015c94:	4613      	mov	r3, r2
 8015c96:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8015c98:	2302      	movs	r3, #2
 8015c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 8015c9c:	79fb      	ldrb	r3, [r7, #7]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d001      	beq.n	8015ca6 <USBPD_PWR_IF_SupplyReady+0x1e>
  {
    return USBPD_ERROR;
 8015ca2:	2302      	movs	r3, #2
 8015ca4:	e01c      	b.n	8015ce0 <USBPD_PWR_IF_SupplyReady+0x58>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8015ca6:	79fb      	ldrb	r3, [r7, #7]
 8015ca8:	f107 0208 	add.w	r2, r7, #8
 8015cac:	4611      	mov	r1, r2
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f000 f890 	bl	8015dd4 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8015cb4:	79bb      	ldrb	r3, [r7, #6]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d109      	bne.n	8015cce <USBPD_PWR_IF_SupplyReady+0x46>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8015cba:	68bb      	ldr	r3, [r7, #8]
 8015cbc:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8015cc0:	4293      	cmp	r3, r2
 8015cc2:	d801      	bhi.n	8015cc8 <USBPD_PWR_IF_SupplyReady+0x40>
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	e000      	b.n	8015cca <USBPD_PWR_IF_SupplyReady+0x42>
 8015cc8:	2302      	movs	r3, #2
 8015cca:	73fb      	strb	r3, [r7, #15]
 8015ccc:	e007      	b.n	8015cde <USBPD_PWR_IF_SupplyReady+0x56>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8015cce:	68bb      	ldr	r3, [r7, #8]
 8015cd0:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8015cd4:	d901      	bls.n	8015cda <USBPD_PWR_IF_SupplyReady+0x52>
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	e000      	b.n	8015cdc <USBPD_PWR_IF_SupplyReady+0x54>
 8015cda:	2302      	movs	r3, #2
 8015cdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015cde:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3710      	adds	r7, #16
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}

08015ce8 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b084      	sub	sp, #16
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	4603      	mov	r3, r0
 8015cf0:	460a      	mov	r2, r1
 8015cf2:	71fb      	strb	r3, [r7, #7]
 8015cf4:	4613      	mov	r3, r2
 8015cf6:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 8015cfc:	79fb      	ldrb	r3, [r7, #7]
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f7fc fa98 	bl	8012234 <HW_IF_PWR_GetVoltage>
 8015d04:	4603      	mov	r3, r0
 8015d06:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 8015d08:	79bb      	ldrb	r3, [r7, #6]
 8015d0a:	2b02      	cmp	r3, #2
 8015d0c:	d015      	beq.n	8015d3a <USBPD_PWR_IF_GetVBUSStatus+0x52>
 8015d0e:	2b02      	cmp	r3, #2
 8015d10:	dc1a      	bgt.n	8015d48 <USBPD_PWR_IF_GetVBUSStatus+0x60>
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d002      	beq.n	8015d1c <USBPD_PWR_IF_GetVBUSStatus+0x34>
 8015d16:	2b01      	cmp	r3, #1
 8015d18:	d008      	beq.n	8015d2c <USBPD_PWR_IF_GetVBUSStatus+0x44>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 8015d1a:	e015      	b.n	8015d48 <USBPD_PWR_IF_GetVBUSStatus+0x60>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015d1c:	68bb      	ldr	r3, [r7, #8]
 8015d1e:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8015d22:	4293      	cmp	r3, r2
 8015d24:	d812      	bhi.n	8015d4c <USBPD_PWR_IF_GetVBUSStatus+0x64>
 8015d26:	2301      	movs	r3, #1
 8015d28:	73fb      	strb	r3, [r7, #15]
    break;
 8015d2a:	e00f      	b.n	8015d4c <USBPD_PWR_IF_GetVBUSStatus+0x64>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015d2c:	68bb      	ldr	r3, [r7, #8]
 8015d2e:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8015d32:	d30d      	bcc.n	8015d50 <USBPD_PWR_IF_GetVBUSStatus+0x68>
 8015d34:	2301      	movs	r3, #1
 8015d36:	73fb      	strb	r3, [r7, #15]
    break;
 8015d38:	e00a      	b.n	8015d50 <USBPD_PWR_IF_GetVBUSStatus+0x68>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8015d40:	d208      	bcs.n	8015d54 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
 8015d42:	2301      	movs	r3, #1
 8015d44:	73fb      	strb	r3, [r7, #15]
    break;
 8015d46:	e005      	b.n	8015d54 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
    break;
 8015d48:	bf00      	nop
 8015d4a:	e004      	b.n	8015d56 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8015d4c:	bf00      	nop
 8015d4e:	e002      	b.n	8015d56 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8015d50:	bf00      	nop
 8015d52:	e000      	b.n	8015d56 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8015d54:	bf00      	nop
  }
  return _status;
 8015d56:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 8015d58:	4618      	mov	r0, r3
 8015d5a:	3710      	adds	r7, #16
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bd80      	pop	{r7, pc}

08015d60 <BSP_USBPD_PWR_Init>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 8015d60:	b480      	push	{r7}
 8015d62:	b085      	sub	sp, #20
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d002      	beq.n	8015d78 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015d72:	f06f 0301 	mvn.w	r3, #1
 8015d76:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8015d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	3714      	adds	r7, #20
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d84:	4770      	bx	lr

08015d86 <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 8015d86:	b480      	push	{r7}
 8015d88:	b085      	sub	sp, #20
 8015d8a:	af00      	add	r7, sp, #0
 8015d8c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d002      	beq.n	8015d9e <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015d98:	f06f 0301 	mvn.w	r3, #1
 8015d9c:	60fb      	str	r3, [r7, #12]
  else
  {
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 8015da0:	4618      	mov	r0, r3
 8015da2:	3714      	adds	r7, #20
 8015da4:	46bd      	mov	sp, r7
 8015da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015daa:	4770      	bx	lr

08015dac <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 8015dac:	b480      	push	{r7}
 8015dae:	b085      	sub	sp, #20
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8015db4:	f06f 030a 	mvn.w	r3, #10
 8015db8:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d002      	beq.n	8015dc6 <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015dc0:	f06f 0301 	mvn.w	r3, #1
 8015dc4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8015dc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 8015dc8:	4618      	mov	r0, r3
 8015dca:	3714      	adds	r7, #20
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd2:	4770      	bx	lr

08015dd4 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 8015dd4:	b480      	push	{r7}
 8015dd6:	b085      	sub	sp, #20
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
 8015ddc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid       */
  int32_t ret;
  uint32_t val = 0U;
 8015dde:	2300      	movs	r3, #0
 8015de0:	60bb      	str	r3, [r7, #8]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d102      	bne.n	8015dee <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d103      	bne.n	8015df6 <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015dee:	f06f 0301 	mvn.w	r3, #1
 8015df2:	60fb      	str	r3, [r7, #12]
 8015df4:	e002      	b.n	8015dfc <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8015df6:	f06f 030a 	mvn.w	r3, #10
 8015dfa:	60fb      	str	r3, [r7, #12]
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  }
  *pVoltage = val;
 8015dfc:	683b      	ldr	r3, [r7, #0]
 8015dfe:	68ba      	ldr	r2, [r7, #8]
 8015e00:	601a      	str	r2, [r3, #0]
  return ret;
 8015e02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 8015e04:	4618      	mov	r0, r3
 8015e06:	3714      	adds	r7, #20
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0e:	4770      	bx	lr

08015e10 <asserv_init>:
extern uint16_t adc2_asserv_VAL[2];

int16_t I_cons_1 = 0;
int16_t I_cons_2 = 0;

void asserv_init(void){
 8015e10:	b480      	push	{r7}
 8015e12:	af00      	add	r7, sp, #0

}
 8015e14:	bf00      	nop
 8015e16:	46bd      	mov	sp, r7
 8015e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1c:	4770      	bx	lr
	...

08015e20 <CUSTOM_TIM_PeriodElapsedCallback>:
/*
 * We must declared here a function CUSTOM_ because main.c already use this callback
 */

/*********** PREEMPTION PRIORITY 14 ***********/
void CUSTOM_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b086      	sub	sp, #24
 8015e24:	af02      	add	r7, sp, #8
 8015e26:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM15) { //Every 1s
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	4a5d      	ldr	r2, [pc, #372]	@ (8015fa4 <CUSTOM_TIM_PeriodElapsedCallback+0x184>)
 8015e2e:	4293      	cmp	r3, r2
 8015e30:	d132      	bne.n	8015e98 <CUSTOM_TIM_PeriodElapsedCallback+0x78>
		if (isSeeIMU) {
 8015e32:	4b5d      	ldr	r3, [pc, #372]	@ (8015fa8 <CUSTOM_TIM_PeriodElapsedCallback+0x188>)
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d02e      	beq.n	8015e98 <CUSTOM_TIM_PeriodElapsedCallback+0x78>
			uint8_t ret_ADXL;
			uint8_t ret_GPIO;
			ADXL343_ReadRegister(0x2B, &ret_ADXL, 1);
 8015e3a:	f107 030e 	add.w	r3, r7, #14
 8015e3e:	2201      	movs	r2, #1
 8015e40:	4619      	mov	r1, r3
 8015e42:	202b      	movs	r0, #43	@ 0x2b
 8015e44:	f7ef fcf6 	bl	8005834 <ADXL343_ReadRegister>
			TCA9555_ReadRegister(0x01, &ret_GPIO, 1);
 8015e48:	f107 030d 	add.w	r3, r7, #13
 8015e4c:	2201      	movs	r2, #1
 8015e4e:	4619      	mov	r1, r3
 8015e50:	2001      	movs	r0, #1
 8015e52:	f7ef fe97 	bl	8005b84 <TCA9555_ReadRegister>
			printf("READ - ACP_TAP_STATUS :0x%02X\r\n",ret_ADXL);
 8015e56:	7bbb      	ldrb	r3, [r7, #14]
 8015e58:	4619      	mov	r1, r3
 8015e5a:	4854      	ldr	r0, [pc, #336]	@ (8015fac <CUSTOM_TIM_PeriodElapsedCallback+0x18c>)
 8015e5c:	f002 fd5a 	bl	8018914 <iprintf>
			printf("READ - OUTPUT Port Registers :0x%02X\r\n",ret_GPIO);
 8015e60:	7b7b      	ldrb	r3, [r7, #13]
 8015e62:	4619      	mov	r1, r3
 8015e64:	4852      	ldr	r0, [pc, #328]	@ (8015fb0 <CUSTOM_TIM_PeriodElapsedCallback+0x190>)
 8015e66:	f002 fd55 	bl	8018914 <iprintf>


			BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	60bb      	str	r3, [r7, #8]
			xTaskNotifyFromISR(h_task_asserv_XYZ,
 8015e6e:	4b51      	ldr	r3, [pc, #324]	@ (8015fb4 <CUSTOM_TIM_PeriodElapsedCallback+0x194>)
 8015e70:	6818      	ldr	r0, [r3, #0]
 8015e72:	f107 0308 	add.w	r3, r7, #8
 8015e76:	9300      	str	r3, [sp, #0]
 8015e78:	2300      	movs	r3, #0
 8015e7a:	2201      	movs	r2, #1
 8015e7c:	2101      	movs	r1, #1
 8015e7e:	f7fe fe35 	bl	8014aec <xTaskGenericNotifyFromISR>
					1,
					eSetBits,
					&pxHigherPriorityTaskWoken);
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8015e82:	68bb      	ldr	r3, [r7, #8]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d007      	beq.n	8015e98 <CUSTOM_TIM_PeriodElapsedCallback+0x78>
 8015e88:	4b4b      	ldr	r3, [pc, #300]	@ (8015fb8 <CUSTOM_TIM_PeriodElapsedCallback+0x198>)
 8015e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015e8e:	601a      	str	r2, [r3, #0]
 8015e90:	f3bf 8f4f 	dsb	sy
 8015e94:	f3bf 8f6f 	isb	sy

		}
	}
	if (htim->Instance == TIM16) { //Every 1ms
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	4a47      	ldr	r2, [pc, #284]	@ (8015fbc <CUSTOM_TIM_PeriodElapsedCallback+0x19c>)
 8015e9e:	4293      	cmp	r3, r2
 8015ea0:	d17c      	bne.n	8015f9c <CUSTOM_TIM_PeriodElapsedCallback+0x17c>
		if (isSpeedInit) {
 8015ea2:	4b47      	ldr	r3, [pc, #284]	@ (8015fc0 <CUSTOM_TIM_PeriodElapsedCallback+0x1a0>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d078      	beq.n	8015f9c <CUSTOM_TIM_PeriodElapsedCallback+0x17c>
			/*** SMOOTH SPEED CHANGE ***/
			uint8_t isSMOOTHspeed = 0;
 8015eaa:	2300      	movs	r3, #0
 8015eac:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver1.FWD->pulseGoal != *(MDriver1.FWD->CCR_Channel) ? 1: 0; //Stocke sur un bit si on doit changer une valeur de pulse
 8015eae:	4b45      	ldr	r3, [pc, #276]	@ (8015fc4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	689a      	ldr	r2, [r3, #8]
 8015eb4:	4b43      	ldr	r3, [pc, #268]	@ (8015fc4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015eb6:	685b      	ldr	r3, [r3, #4]
 8015eb8:	685b      	ldr	r3, [r3, #4]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	429a      	cmp	r2, r3
 8015ebe:	bf14      	ite	ne
 8015ec0:	2301      	movne	r3, #1
 8015ec2:	2300      	moveq	r3, #0
 8015ec4:	b2db      	uxtb	r3, r3
 8015ec6:	b25a      	sxtb	r2, r3
 8015ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ecc:	4313      	orrs	r3, r2
 8015ece:	b25b      	sxtb	r3, r3
 8015ed0:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver1.REV->pulseGoal != *(MDriver1.REV->CCR_Channel) ? 1<<1: 0;
 8015ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8015fc4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015ed4:	689b      	ldr	r3, [r3, #8]
 8015ed6:	689a      	ldr	r2, [r3, #8]
 8015ed8:	4b3a      	ldr	r3, [pc, #232]	@ (8015fc4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015eda:	689b      	ldr	r3, [r3, #8]
 8015edc:	685b      	ldr	r3, [r3, #4]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	429a      	cmp	r2, r3
 8015ee2:	d001      	beq.n	8015ee8 <CUSTOM_TIM_PeriodElapsedCallback+0xc8>
 8015ee4:	2302      	movs	r3, #2
 8015ee6:	e000      	b.n	8015eea <CUSTOM_TIM_PeriodElapsedCallback+0xca>
 8015ee8:	2300      	movs	r3, #0
 8015eea:	b25a      	sxtb	r2, r3
 8015eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ef0:	4313      	orrs	r3, r2
 8015ef2:	b25b      	sxtb	r3, r3
 8015ef4:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver2.FWD->pulseGoal != *(MDriver2.FWD->CCR_Channel) ? 1<<2: 0;
 8015ef6:	4b34      	ldr	r3, [pc, #208]	@ (8015fc8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015ef8:	685b      	ldr	r3, [r3, #4]
 8015efa:	689a      	ldr	r2, [r3, #8]
 8015efc:	4b32      	ldr	r3, [pc, #200]	@ (8015fc8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015efe:	685b      	ldr	r3, [r3, #4]
 8015f00:	685b      	ldr	r3, [r3, #4]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d001      	beq.n	8015f0c <CUSTOM_TIM_PeriodElapsedCallback+0xec>
 8015f08:	2304      	movs	r3, #4
 8015f0a:	e000      	b.n	8015f0e <CUSTOM_TIM_PeriodElapsedCallback+0xee>
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	b25a      	sxtb	r2, r3
 8015f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f14:	4313      	orrs	r3, r2
 8015f16:	b25b      	sxtb	r3, r3
 8015f18:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver2.REV->pulseGoal != *(MDriver2.REV->CCR_Channel) ? 1<<3: 0;
 8015f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8015fc8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015f1c:	689b      	ldr	r3, [r3, #8]
 8015f1e:	689a      	ldr	r2, [r3, #8]
 8015f20:	4b29      	ldr	r3, [pc, #164]	@ (8015fc8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015f22:	689b      	ldr	r3, [r3, #8]
 8015f24:	685b      	ldr	r3, [r3, #4]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	429a      	cmp	r2, r3
 8015f2a:	d001      	beq.n	8015f30 <CUSTOM_TIM_PeriodElapsedCallback+0x110>
 8015f2c:	2308      	movs	r3, #8
 8015f2e:	e000      	b.n	8015f32 <CUSTOM_TIM_PeriodElapsedCallback+0x112>
 8015f30:	2300      	movs	r3, #0
 8015f32:	b25a      	sxtb	r2, r3
 8015f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f38:	4313      	orrs	r3, r2
 8015f3a:	b25b      	sxtb	r3, r3
 8015f3c:	73fb      	strb	r3, [r7, #15]


			if(isSMOOTHspeed){ // Si un seul 1 est présent aloir la condition est vrai
 8015f3e:	7bfb      	ldrb	r3, [r7, #15]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d02b      	beq.n	8015f9c <CUSTOM_TIM_PeriodElapsedCallback+0x17c>
				(isSMOOTHspeed & 0b1)>> 0 ? // Si on a detecter une erreur
 8015f44:	7bfb      	ldrb	r3, [r7, #15]
 8015f46:	f003 0301 	and.w	r3, r3, #1
						IT_ZXB5210_speed_UPDATE(&MDriver1, MDriver1.FWD):(void)0;
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d005      	beq.n	8015f5a <CUSTOM_TIM_PeriodElapsedCallback+0x13a>
 8015f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8015fc4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015f50:	685b      	ldr	r3, [r3, #4]
 8015f52:	4619      	mov	r1, r3
 8015f54:	481b      	ldr	r0, [pc, #108]	@ (8015fc4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015f56:	f7ef ff89 	bl	8005e6c <IT_ZXB5210_speed_UPDATE>
				(isSMOOTHspeed & 0b10)>> 1 ?
 8015f5a:	7bfb      	ldrb	r3, [r7, #15]
 8015f5c:	f003 0302 	and.w	r3, r3, #2
						IT_ZXB5210_speed_UPDATE(&MDriver1, MDriver1.REV):(void)0;
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d005      	beq.n	8015f70 <CUSTOM_TIM_PeriodElapsedCallback+0x150>
 8015f64:	4b17      	ldr	r3, [pc, #92]	@ (8015fc4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015f66:	689b      	ldr	r3, [r3, #8]
 8015f68:	4619      	mov	r1, r3
 8015f6a:	4816      	ldr	r0, [pc, #88]	@ (8015fc4 <CUSTOM_TIM_PeriodElapsedCallback+0x1a4>)
 8015f6c:	f7ef ff7e 	bl	8005e6c <IT_ZXB5210_speed_UPDATE>
				(isSMOOTHspeed & 0b100)>> 2 ?
 8015f70:	7bfb      	ldrb	r3, [r7, #15]
 8015f72:	f003 0304 	and.w	r3, r3, #4
						IT_ZXB5210_speed_UPDATE(&MDriver2, MDriver2.FWD):(void)0;
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d005      	beq.n	8015f86 <CUSTOM_TIM_PeriodElapsedCallback+0x166>
 8015f7a:	4b13      	ldr	r3, [pc, #76]	@ (8015fc8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015f7c:	685b      	ldr	r3, [r3, #4]
 8015f7e:	4619      	mov	r1, r3
 8015f80:	4811      	ldr	r0, [pc, #68]	@ (8015fc8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015f82:	f7ef ff73 	bl	8005e6c <IT_ZXB5210_speed_UPDATE>
				(isSMOOTHspeed & 0b1000)>> 3 ?
 8015f86:	7bfb      	ldrb	r3, [r7, #15]
 8015f88:	f003 0308 	and.w	r3, r3, #8
						IT_ZXB5210_speed_UPDATE(&MDriver2, MDriver2.REV):(void)0;
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d005      	beq.n	8015f9c <CUSTOM_TIM_PeriodElapsedCallback+0x17c>
 8015f90:	4b0d      	ldr	r3, [pc, #52]	@ (8015fc8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015f92:	689b      	ldr	r3, [r3, #8]
 8015f94:	4619      	mov	r1, r3
 8015f96:	480c      	ldr	r0, [pc, #48]	@ (8015fc8 <CUSTOM_TIM_PeriodElapsedCallback+0x1a8>)
 8015f98:	f7ef ff68 	bl	8005e6c <IT_ZXB5210_speed_UPDATE>
			}
		}
	}
}
 8015f9c:	bf00      	nop
 8015f9e:	3710      	adds	r7, #16
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}
 8015fa4:	40014000 	.word	0x40014000
 8015fa8:	200077dc 	.word	0x200077dc
 8015fac:	0801be14 	.word	0x0801be14
 8015fb0:	0801be34 	.word	0x0801be34
 8015fb4:	20000734 	.word	0x20000734
 8015fb8:	e000ed04 	.word	0xe000ed04
 8015fbc:	40014400 	.word	0x40014400
 8015fc0:	20000ec4 	.word	0x20000ec4
 8015fc4:	20000e6c 	.word	0x20000e6c
 8015fc8:	20000e78 	.word	0x20000e78

08015fcc <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b084      	sub	sp, #16
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART2) {
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8016010 <HAL_UART_RxHalfCpltCallback+0x44>)
 8015fda:	4293      	cmp	r3, r2
 8015fdc:	d114      	bne.n	8016008 <HAL_UART_RxHalfCpltCallback+0x3c>
    	BaseType_t higher_priority_task_woken = pdFALSE;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	60fb      	str	r3, [r7, #12]
    	xSemaphoreGiveFromISR(semb_halfCllbck, &higher_priority_task_woken);
 8015fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8016014 <HAL_UART_RxHalfCpltCallback+0x48>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	f107 020c 	add.w	r2, r7, #12
 8015fea:	4611      	mov	r1, r2
 8015fec:	4618      	mov	r0, r3
 8015fee:	f7fd f8b9 	bl	8013164 <xQueueGiveFromISR>
    	portYIELD_FROM_ISR(higher_priority_task_woken);
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d007      	beq.n	8016008 <HAL_UART_RxHalfCpltCallback+0x3c>
 8015ff8:	4b07      	ldr	r3, [pc, #28]	@ (8016018 <HAL_UART_RxHalfCpltCallback+0x4c>)
 8015ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015ffe:	601a      	str	r2, [r3, #0]
 8016000:	f3bf 8f4f 	dsb	sy
 8016004:	f3bf 8f6f 	isb	sy
    }
}
 8016008:	bf00      	nop
 801600a:	3710      	adds	r7, #16
 801600c:	46bd      	mov	sp, r7
 801600e:	bd80      	pop	{r7, pc}
 8016010:	40004400 	.word	0x40004400
 8016014:	20000744 	.word	0x20000744
 8016018:	e000ed04 	.word	0xe000ed04

0801601c <HAL_UART_RxCpltCallback>:

/*********** PREEMPTION PRIORITY 5 ***********/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801601c:	b580      	push	{r7, lr}
 801601e:	b084      	sub	sp, #16
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]

	/** SHELL INTERRUPTIONS **/
	if (huart->Instance == USART1) {
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	4a1a      	ldr	r2, [pc, #104]	@ (8016094 <HAL_UART_RxCpltCallback+0x78>)
 801602a:	4293      	cmp	r3, r2
 801602c:	d114      	bne.n	8016058 <HAL_UART_RxCpltCallback+0x3c>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 801602e:	2300      	movs	r3, #0
 8016030:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8016032:	4b19      	ldr	r3, [pc, #100]	@ (8016098 <HAL_UART_RxCpltCallback+0x7c>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	f107 020c 	add.w	r2, r7, #12
 801603a:	4611      	mov	r1, r2
 801603c:	4618      	mov	r0, r3
 801603e:	f7fd f891 	bl	8013164 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d007      	beq.n	8016058 <HAL_UART_RxCpltCallback+0x3c>
 8016048:	4b14      	ldr	r3, [pc, #80]	@ (801609c <HAL_UART_RxCpltCallback+0x80>)
 801604a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801604e:	601a      	str	r2, [r3, #0]
 8016050:	f3bf 8f4f 	dsb	sy
 8016054:	f3bf 8f6f 	isb	sy
	}

    if (huart->Instance == USART2){
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	4a10      	ldr	r2, [pc, #64]	@ (80160a0 <HAL_UART_RxCpltCallback+0x84>)
 801605e:	4293      	cmp	r3, r2
 8016060:	d114      	bne.n	801608c <HAL_UART_RxCpltCallback+0x70>
		BaseType_t higher_priority_task_woken = pdFALSE;
 8016062:	2300      	movs	r3, #0
 8016064:	60bb      	str	r3, [r7, #8]
    	xSemaphoreGiveFromISR(semb_cpltCllbck, &higher_priority_task_woken);
 8016066:	4b0f      	ldr	r3, [pc, #60]	@ (80160a4 <HAL_UART_RxCpltCallback+0x88>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	f107 0208 	add.w	r2, r7, #8
 801606e:	4611      	mov	r1, r2
 8016070:	4618      	mov	r0, r3
 8016072:	f7fd f877 	bl	8013164 <xQueueGiveFromISR>
    	portYIELD_FROM_ISR(higher_priority_task_woken);
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d007      	beq.n	801608c <HAL_UART_RxCpltCallback+0x70>
 801607c:	4b07      	ldr	r3, [pc, #28]	@ (801609c <HAL_UART_RxCpltCallback+0x80>)
 801607e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016082:	601a      	str	r2, [r3, #0]
 8016084:	f3bf 8f4f 	dsb	sy
 8016088:	f3bf 8f6f 	isb	sy
    }
}
 801608c:	bf00      	nop
 801608e:	3710      	adds	r7, #16
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}
 8016094:	40013800 	.word	0x40013800
 8016098:	200076f8 	.word	0x200076f8
 801609c:	e000ed04 	.word	0xe000ed04
 80160a0:	40004400 	.word	0x40004400
 80160a4:	20000748 	.word	0x20000748

080160a8 <HAL_ADC_ConvCpltCallback>:
/*********** PREEMPTION PRIORITY 5 ***********/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b086      	sub	sp, #24
 80160ac:	af02      	add	r7, sp, #8
 80160ae:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC2) {
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	4a0e      	ldr	r2, [pc, #56]	@ (80160f0 <HAL_ADC_ConvCpltCallback+0x48>)
 80160b6:	4293      	cmp	r3, r2
 80160b8:	d116      	bne.n	80160e8 <HAL_ADC_ConvCpltCallback+0x40>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80160ba:	2300      	movs	r3, #0
 80160bc:	60fb      	str	r3, [r7, #12]
		xTaskNotifyFromISR(h_task_asserv_I,
 80160be:	4b0d      	ldr	r3, [pc, #52]	@ (80160f4 <HAL_ADC_ConvCpltCallback+0x4c>)
 80160c0:	6818      	ldr	r0, [r3, #0]
 80160c2:	f107 030c 	add.w	r3, r7, #12
 80160c6:	9300      	str	r3, [sp, #0]
 80160c8:	2300      	movs	r3, #0
 80160ca:	2201      	movs	r2, #1
 80160cc:	2101      	movs	r1, #1
 80160ce:	f7fe fd0d 	bl	8014aec <xTaskGenericNotifyFromISR>
				1,
				eSetBits,
				&pxHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d007      	beq.n	80160e8 <HAL_ADC_ConvCpltCallback+0x40>
 80160d8:	4b07      	ldr	r3, [pc, #28]	@ (80160f8 <HAL_ADC_ConvCpltCallback+0x50>)
 80160da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80160de:	601a      	str	r2, [r3, #0]
 80160e0:	f3bf 8f4f 	dsb	sy
 80160e4:	f3bf 8f6f 	isb	sy
	}
}
 80160e8:	bf00      	nop
 80160ea:	3710      	adds	r7, #16
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}
 80160f0:	50000100 	.word	0x50000100
 80160f4:	20000730 	.word	0x20000730
 80160f8:	e000ed04 	.word	0xe000ed04

080160fc <changement_mode_init>:
#include "dac.h"


static int  workMode =0;

void changement_mode_init(void){
 80160fc:	b480      	push	{r7}
 80160fe:	af00      	add	r7, sp, #0

}
 8016100:	bf00      	nop
 8016102:	46bd      	mov	sp, r7
 8016104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016108:	4770      	bx	lr
	...

0801610c <changeMode_run>:
void changeMode_run(void*){
 801610c:	b580      	push	{r7, lr}
 801610e:	b084      	sub	sp, #16
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]

	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8016114:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8016118:	2001      	movs	r0, #1
 801611a:	f7fe fc9b 	bl	8014a54 <ulTaskNotifyTake>

		// Lire dans les registre du Ge
		uint8_t ret=0;
 801611e:	2300      	movs	r3, #0
 8016120:	73bb      	strb	r3, [r7, #14]
		TCA9555_ReadRegister(0x03,&ret,1);
 8016122:	f107 030e 	add.w	r3, r7, #14
 8016126:	2201      	movs	r2, #1
 8016128:	4619      	mov	r1, r3
 801612a:	2003      	movs	r0, #3
 801612c:	f7ef fd2a 	bl	8005b84 <TCA9555_ReadRegister>
		uint8_t INT_IMU2 =  (ret >> 7) & 0b1;
 8016130:	7bbb      	ldrb	r3, [r7, #14]
 8016132:	09db      	lsrs	r3, r3, #7
 8016134:	73fb      	strb	r3, [r7, #15]
		// Prendre decision
		if (INT_IMU2==1){
 8016136:	7bfb      	ldrb	r3, [r7, #15]
 8016138:	2b01      	cmp	r3, #1
 801613a:	d109      	bne.n	8016150 <changeMode_run+0x44>
			workMode = workMode ==0 ? 1 : 0;
 801613c:	4b14      	ldr	r3, [pc, #80]	@ (8016190 <changeMode_run+0x84>)
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	2b00      	cmp	r3, #0
 8016142:	bf0c      	ite	eq
 8016144:	2301      	moveq	r3, #1
 8016146:	2300      	movne	r3, #0
 8016148:	b2db      	uxtb	r3, r3
 801614a:	461a      	mov	r2, r3
 801614c:	4b10      	ldr	r3, [pc, #64]	@ (8016190 <changeMode_run+0x84>)
 801614e:	601a      	str	r2, [r3, #0]
		}
		if (workMode){
 8016150:	4b0f      	ldr	r3, [pc, #60]	@ (8016190 <changeMode_run+0x84>)
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d008      	beq.n	801616a <changeMode_run+0x5e>
			LP5812_WriteRegister(0x044,125);
 8016158:	217d      	movs	r1, #125	@ 0x7d
 801615a:	2044      	movs	r0, #68	@ 0x44
 801615c:	f7ef fc64 	bl	8005a28 <LP5812_WriteRegister>
			LP5812_WriteRegister(0x049,0);
 8016160:	2100      	movs	r1, #0
 8016162:	2049      	movs	r0, #73	@ 0x49
 8016164:	f7ef fc60 	bl	8005a28 <LP5812_WriteRegister>
 8016168:	e007      	b.n	801617a <changeMode_run+0x6e>

		}
		else{
			LP5812_WriteRegister(0x049,125);
 801616a:	217d      	movs	r1, #125	@ 0x7d
 801616c:	2049      	movs	r0, #73	@ 0x49
 801616e:	f7ef fc5b 	bl	8005a28 <LP5812_WriteRegister>
			LP5812_WriteRegister(0x044,0);
 8016172:	2100      	movs	r1, #0
 8016174:	2044      	movs	r0, #68	@ 0x44
 8016176:	f7ef fc57 	bl	8005a28 <LP5812_WriteRegister>
		}
		uint8_t retADXL=0;
 801617a:	2300      	movs	r3, #0
 801617c:	737b      	strb	r3, [r7, #13]
		ADXL343_ReadRegister(0x30,&retADXL,1); //Permet de reinitialiser le registre de l'adxl
 801617e:	f107 030d 	add.w	r3, r7, #13
 8016182:	2201      	movs	r2, #1
 8016184:	4619      	mov	r1, r3
 8016186:	2030      	movs	r0, #48	@ 0x30
 8016188:	f7ef fb54 	bl	8005834 <ADXL343_ReadRegister>
	for(;;){
 801618c:	e7c2      	b.n	8016114 <changeMode_run+0x8>
 801618e:	bf00      	nop
 8016190:	200076fc 	.word	0x200076fc

08016194 <shell_init>:
int isStarted = 0;
int isADC_cplt =0;
uint8_t PWMLed = 255;


void shell_init(void) {
 8016194:	b580      	push	{r7, lr}
 8016196:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS * sizeof(char*));
 8016198:	2220      	movs	r2, #32
 801619a:	2100      	movs	r1, #0
 801619c:	481c      	ldr	r0, [pc, #112]	@ (8016210 <shell_init+0x7c>)
 801619e:	f002 fc97 	bl	8018ad0 <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 80161a2:	2240      	movs	r2, #64	@ 0x40
 80161a4:	2100      	movs	r1, #0
 80161a6:	481b      	ldr	r0, [pc, #108]	@ (8016214 <shell_init+0x80>)
 80161a8:	f002 fc92 	bl	8018ad0 <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
 80161ac:	4b1a      	ldr	r3, [pc, #104]	@ (8016218 <shell_init+0x84>)
 80161ae:	2200      	movs	r2, #0
 80161b0:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 80161b2:	2240      	movs	r2, #64	@ 0x40
 80161b4:	2100      	movs	r1, #0
 80161b6:	4819      	ldr	r0, [pc, #100]	@ (801621c <shell_init+0x88>)
 80161b8:	f002 fc8a 	bl	8018ad0 <memset>
	sem_uart_read = xSemaphoreCreateBinary();
 80161bc:	2203      	movs	r2, #3
 80161be:	2100      	movs	r1, #0
 80161c0:	2001      	movs	r0, #1
 80161c2:	f7fc fdd5 	bl	8012d70 <xQueueGenericCreate>
 80161c6:	4603      	mov	r3, r0
 80161c8:	4a15      	ldr	r2, [pc, #84]	@ (8016220 <shell_init+0x8c>)
 80161ca:	6013      	str	r3, [r2, #0]
	sem_uart_read == NULL ? Error_Handler() : (void) 0;
 80161cc:	4b14      	ldr	r3, [pc, #80]	@ (8016220 <shell_init+0x8c>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d101      	bne.n	80161d8 <shell_init+0x44>
 80161d4:	f7ed fecc 	bl	8003f70 <Error_Handler>

	HAL_UART_Transmit(&UART_DEVICE, started, strlen((char*) started),
 80161d8:	4812      	ldr	r0, [pc, #72]	@ (8016224 <shell_init+0x90>)
 80161da:	f7ec fa71 	bl	80026c0 <strlen>
 80161de:	4603      	mov	r3, r0
 80161e0:	b29a      	uxth	r2, r3
 80161e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80161e6:	490f      	ldr	r1, [pc, #60]	@ (8016224 <shell_init+0x90>)
 80161e8:	480f      	ldr	r0, [pc, #60]	@ (8016228 <shell_init+0x94>)
 80161ea:	f7f6 f975 	bl	800c4d8 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	HAL_UART_Transmit(&UART_DEVICE, prompt, strlen((char*) prompt),
 80161ee:	480f      	ldr	r0, [pc, #60]	@ (801622c <shell_init+0x98>)
 80161f0:	f7ec fa66 	bl	80026c0 <strlen>
 80161f4:	4603      	mov	r3, r0
 80161f6:	b29a      	uxth	r2, r3
 80161f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80161fc:	490b      	ldr	r1, [pc, #44]	@ (801622c <shell_init+0x98>)
 80161fe:	480a      	ldr	r0, [pc, #40]	@ (8016228 <shell_init+0x94>)
 8016200:	f7f6 f96a 	bl	800c4d8 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	subfunct_start(0);
 8016204:	2000      	movs	r0, #0
 8016206:	f000 f95b 	bl	80164c0 <subfunct_start>
}
 801620a:	bf00      	nop
 801620c:	bd80      	pop	{r7, pc}
 801620e:	bf00      	nop
 8016210:	200077b0 	.word	0x200077b0
 8016214:	2000776c 	.word	0x2000776c
 8016218:	20007724 	.word	0x20007724
 801621c:	20007728 	.word	0x20007728
 8016220:	200076f8 	.word	0x200076f8
 8016224:	20000278 	.word	0x20000278
 8016228:	20000ce4 	.word	0x20000ce4
 801622c:	200002fc 	.word	0x200002fc

08016230 <shell_run>:

void shell_run(void*) {
 8016230:	b580      	push	{r7, lr}
 8016232:	b084      	sub	sp, #16
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8016238:	2300      	movs	r3, #0
 801623a:	60fb      	str	r3, [r7, #12]
	for (;;) {
		reading = 1;
 801623c:	2301      	movs	r3, #1
 801623e:	60fb      	str	r3, [r7, #12]
		idx_cmd = 0;
 8016240:	4b5d      	ldr	r3, [pc, #372]	@ (80163b8 <shell_run+0x188>)
 8016242:	2200      	movs	r2, #0
 8016244:	601a      	str	r2, [r3, #0]
		while (reading) {
 8016246:	e070      	b.n	801632a <shell_run+0xfa>
			HAL_UART_Receive_IT(&UART_DEVICE, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8016248:	2201      	movs	r2, #1
 801624a:	495c      	ldr	r1, [pc, #368]	@ (80163bc <shell_run+0x18c>)
 801624c:	485c      	ldr	r0, [pc, #368]	@ (80163c0 <shell_run+0x190>)
 801624e:	f7f6 fb2d 	bl	800c8ac <HAL_UART_Receive_IT>
			xSemaphoreTake(sem_uart_read, portMAX_DELAY)!=pdPASS ? Error_Handler():(void)0;
 8016252:	4b5c      	ldr	r3, [pc, #368]	@ (80163c4 <shell_run+0x194>)
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801625a:	4618      	mov	r0, r3
 801625c:	f7fd f8f4 	bl	8013448 <xQueueSemaphoreTake>
 8016260:	4603      	mov	r3, r0
 8016262:	2b01      	cmp	r3, #1
 8016264:	d001      	beq.n	801626a <shell_run+0x3a>
 8016266:	f7ed fe83 	bl	8003f70 <Error_Handler>

			switch (uartRxBuffer[0]) {
 801626a:	4b54      	ldr	r3, [pc, #336]	@ (80163bc <shell_run+0x18c>)
 801626c:	781b      	ldrb	r3, [r3, #0]
 801626e:	2b7f      	cmp	r3, #127	@ 0x7f
 8016270:	d035      	beq.n	80162de <shell_run+0xae>
 8016272:	2b7f      	cmp	r3, #127	@ 0x7f
 8016274:	dc47      	bgt.n	8016306 <shell_run+0xd6>
 8016276:	2b08      	cmp	r3, #8
 8016278:	d031      	beq.n	80162de <shell_run+0xae>
 801627a:	2b0d      	cmp	r3, #13
 801627c:	d143      	bne.n	8016306 <shell_run+0xd6>
			case ASCII_CR: // Nouvelle ligne, instruction à traiter
				HAL_UART_Transmit(&UART_DEVICE, newline, sizeof(newline),
 801627e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016282:	2203      	movs	r2, #3
 8016284:	4950      	ldr	r1, [pc, #320]	@ (80163c8 <shell_run+0x198>)
 8016286:	484e      	ldr	r0, [pc, #312]	@ (80163c0 <shell_run+0x190>)
 8016288:	f7f6 f926 	bl	800c4d8 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				//cmdBuffer[idx_cmd] = '\0';
				//On copie la commande dans l'historique
				//strcpy(cmdHistory[cmdHistory_index_save % CMD_HISTORY_SIZE], cmdBuffer);
				//cmdHistory_index_save++;
				argc = 0;
 801628c:	4b4f      	ldr	r3, [pc, #316]	@ (80163cc <shell_run+0x19c>)
 801628e:	2200      	movs	r2, #0
 8016290:	601a      	str	r2, [r3, #0]
				token = strtok(cmdBuffer, " ");
 8016292:	494f      	ldr	r1, [pc, #316]	@ (80163d0 <shell_run+0x1a0>)
 8016294:	484f      	ldr	r0, [pc, #316]	@ (80163d4 <shell_run+0x1a4>)
 8016296:	f002 fbbf 	bl	8018a18 <strtok>
 801629a:	4603      	mov	r3, r0
 801629c:	4a4e      	ldr	r2, [pc, #312]	@ (80163d8 <shell_run+0x1a8>)
 801629e:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 80162a0:	e010      	b.n	80162c4 <shell_run+0x94>
					argv[argc++] = token;
 80162a2:	4b4a      	ldr	r3, [pc, #296]	@ (80163cc <shell_run+0x19c>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	1c5a      	adds	r2, r3, #1
 80162a8:	4948      	ldr	r1, [pc, #288]	@ (80163cc <shell_run+0x19c>)
 80162aa:	600a      	str	r2, [r1, #0]
 80162ac:	4a4a      	ldr	r2, [pc, #296]	@ (80163d8 <shell_run+0x1a8>)
 80162ae:	6812      	ldr	r2, [r2, #0]
 80162b0:	494a      	ldr	r1, [pc, #296]	@ (80163dc <shell_run+0x1ac>)
 80162b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					token = strtok(NULL, " ");
 80162b6:	4946      	ldr	r1, [pc, #280]	@ (80163d0 <shell_run+0x1a0>)
 80162b8:	2000      	movs	r0, #0
 80162ba:	f002 fbad 	bl	8018a18 <strtok>
 80162be:	4603      	mov	r3, r0
 80162c0:	4a45      	ldr	r2, [pc, #276]	@ (80163d8 <shell_run+0x1a8>)
 80162c2:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 80162c4:	4b44      	ldr	r3, [pc, #272]	@ (80163d8 <shell_run+0x1a8>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d1ea      	bne.n	80162a2 <shell_run+0x72>
				}
				idx_cmd = 0;
 80162cc:	4b3a      	ldr	r3, [pc, #232]	@ (80163b8 <shell_run+0x188>)
 80162ce:	2200      	movs	r2, #0
 80162d0:	601a      	str	r2, [r3, #0]
				reading = 0;        //exit read loop
 80162d2:	2300      	movs	r3, #0
 80162d4:	60fb      	str	r3, [r7, #12]
				newCmdReady = 1;
 80162d6:	4b42      	ldr	r3, [pc, #264]	@ (80163e0 <shell_run+0x1b0>)
 80162d8:	2201      	movs	r2, #1
 80162da:	601a      	str	r2, [r3, #0]
				break;
 80162dc:	e025      	b.n	801632a <shell_run+0xfa>
			case ASCII_BACK:
			case ASCII_BACK_BIS: // Suppression du dernier caractère
				if (idx_cmd == 0) {
 80162de:	4b36      	ldr	r3, [pc, #216]	@ (80163b8 <shell_run+0x188>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d020      	beq.n	8016328 <shell_run+0xf8>
					break;
				}
				cmdBuffer[idx_cmd--] = '\0';
 80162e6:	4b34      	ldr	r3, [pc, #208]	@ (80163b8 <shell_run+0x188>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	1e5a      	subs	r2, r3, #1
 80162ec:	4932      	ldr	r1, [pc, #200]	@ (80163b8 <shell_run+0x188>)
 80162ee:	600a      	str	r2, [r1, #0]
 80162f0:	4a38      	ldr	r2, [pc, #224]	@ (80163d4 <shell_run+0x1a4>)
 80162f2:	2100      	movs	r1, #0
 80162f4:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, backspace, sizeof(backspace),
 80162f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80162fa:	2204      	movs	r2, #4
 80162fc:	4939      	ldr	r1, [pc, #228]	@ (80163e4 <shell_run+0x1b4>)
 80162fe:	4830      	ldr	r0, [pc, #192]	@ (80163c0 <shell_run+0x190>)
 8016300:	f7f6 f8ea 	bl	800c4d8 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				break;
 8016304:	e011      	b.n	801632a <shell_run+0xfa>
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8016306:	4b2c      	ldr	r3, [pc, #176]	@ (80163b8 <shell_run+0x188>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	1c5a      	adds	r2, r3, #1
 801630c:	492a      	ldr	r1, [pc, #168]	@ (80163b8 <shell_run+0x188>)
 801630e:	600a      	str	r2, [r1, #0]
 8016310:	4a2a      	ldr	r2, [pc, #168]	@ (80163bc <shell_run+0x18c>)
 8016312:	7811      	ldrb	r1, [r2, #0]
 8016314:	4a2f      	ldr	r2, [pc, #188]	@ (80163d4 <shell_run+0x1a4>)
 8016316:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, uartRxBuffer,
 8016318:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801631c:	2201      	movs	r2, #1
 801631e:	4927      	ldr	r1, [pc, #156]	@ (80163bc <shell_run+0x18c>)
 8016320:	4827      	ldr	r0, [pc, #156]	@ (80163c0 <shell_run+0x190>)
 8016322:	f7f6 f8d9 	bl	800c4d8 <HAL_UART_Transmit>
 8016326:	e000      	b.n	801632a <shell_run+0xfa>
					break;
 8016328:	bf00      	nop
		while (reading) {
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d18b      	bne.n	8016248 <shell_run+0x18>
						UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
			}
		}
		if (newCmdReady) {
 8016330:	4b2b      	ldr	r3, [pc, #172]	@ (80163e0 <shell_run+0x1b0>)
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d081      	beq.n	801623c <shell_run+0xc>
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8016338:	2300      	movs	r3, #0
 801633a:	60bb      	str	r3, [r7, #8]
 801633c:	e01b      	b.n	8016376 <shell_run+0x146>
				if (strcmp(argv[0], mapping[i].name) == 0) {
 801633e:	4b27      	ldr	r3, [pc, #156]	@ (80163dc <shell_run+0x1ac>)
 8016340:	681a      	ldr	r2, [r3, #0]
 8016342:	4929      	ldr	r1, [pc, #164]	@ (80163e8 <shell_run+0x1b8>)
 8016344:	68bb      	ldr	r3, [r7, #8]
 8016346:	011b      	lsls	r3, r3, #4
 8016348:	440b      	add	r3, r1
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	4619      	mov	r1, r3
 801634e:	4610      	mov	r0, r2
 8016350:	f7ec f9be 	bl	80026d0 <strcmp>
 8016354:	4603      	mov	r3, r0
 8016356:	2b00      	cmp	r3, #0
 8016358:	d10a      	bne.n	8016370 <shell_run+0x140>
					isFind = 1;
 801635a:	4b24      	ldr	r3, [pc, #144]	@ (80163ec <shell_run+0x1bc>)
 801635c:	2201      	movs	r2, #1
 801635e:	601a      	str	r2, [r3, #0]
					mapping[i].funct(argv);
 8016360:	4a21      	ldr	r2, [pc, #132]	@ (80163e8 <shell_run+0x1b8>)
 8016362:	68bb      	ldr	r3, [r7, #8]
 8016364:	011b      	lsls	r3, r3, #4
 8016366:	4413      	add	r3, r2
 8016368:	330c      	adds	r3, #12
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	481b      	ldr	r0, [pc, #108]	@ (80163dc <shell_run+0x1ac>)
 801636e:	4798      	blx	r3
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8016370:	68bb      	ldr	r3, [r7, #8]
 8016372:	3301      	adds	r3, #1
 8016374:	60bb      	str	r3, [r7, #8]
 8016376:	68bb      	ldr	r3, [r7, #8]
 8016378:	2b0c      	cmp	r3, #12
 801637a:	d9e0      	bls.n	801633e <shell_run+0x10e>
				}
			}
			if (!isFind) {
 801637c:	4b1b      	ldr	r3, [pc, #108]	@ (80163ec <shell_run+0x1bc>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d106      	bne.n	8016392 <shell_run+0x162>
				HAL_UART_Transmit(&UART_DEVICE, cmdNotFound,
 8016384:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016388:	2214      	movs	r2, #20
 801638a:	4919      	ldr	r1, [pc, #100]	@ (80163f0 <shell_run+0x1c0>)
 801638c:	480c      	ldr	r0, [pc, #48]	@ (80163c0 <shell_run+0x190>)
 801638e:	f7f6 f8a3 	bl	800c4d8 <HAL_UART_Transmit>
						sizeof(cmdNotFound), HAL_MAX_DELAY);
			}

			HAL_UART_Transmit(&UART_DEVICE, prompt, sizeof(prompt),
 8016392:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016396:	2212      	movs	r2, #18
 8016398:	4916      	ldr	r1, [pc, #88]	@ (80163f4 <shell_run+0x1c4>)
 801639a:	4809      	ldr	r0, [pc, #36]	@ (80163c0 <shell_run+0x190>)
 801639c:	f7f6 f89c 	bl	800c4d8 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			newCmdReady = 0;
 80163a0:	4b0f      	ldr	r3, [pc, #60]	@ (80163e0 <shell_run+0x1b0>)
 80163a2:	2200      	movs	r2, #0
 80163a4:	601a      	str	r2, [r3, #0]
			isFind = 0;
 80163a6:	4b11      	ldr	r3, [pc, #68]	@ (80163ec <shell_run+0x1bc>)
 80163a8:	2200      	movs	r2, #0
 80163aa:	601a      	str	r2, [r3, #0]
			memset(cmdBuffer, 0, MAX_ARGS * sizeof(char*));
 80163ac:	2220      	movs	r2, #32
 80163ae:	2100      	movs	r1, #0
 80163b0:	4808      	ldr	r0, [pc, #32]	@ (80163d4 <shell_run+0x1a4>)
 80163b2:	f002 fb8d 	bl	8018ad0 <memset>
		reading = 1;
 80163b6:	e741      	b.n	801623c <shell_run+0xc>
 80163b8:	200077ac 	.word	0x200077ac
 80163bc:	20007724 	.word	0x20007724
 80163c0:	20000ce4 	.word	0x20000ce4
 80163c4:	200076f8 	.word	0x200076f8
 80163c8:	200002e0 	.word	0x200002e0
 80163cc:	200077d0 	.word	0x200077d0
 80163d0:	0801c010 	.word	0x0801c010
 80163d4:	2000776c 	.word	0x2000776c
 80163d8:	200077d4 	.word	0x200077d4
 80163dc:	200077b0 	.word	0x200077b0
 80163e0:	200077d8 	.word	0x200077d8
 80163e4:	200002e4 	.word	0x200002e4
 80163e8:	200001a8 	.word	0x200001a8
 80163ec:	200077e4 	.word	0x200077e4
 80163f0:	200002e8 	.word	0x200002e8
 80163f4:	200002fc 	.word	0x200002fc

080163f8 <subfunct_help>:

/*
 * ***********************************************************************************************
 * 										SUBFUNCTIONS
 *************************************************************************************************/
void subfunct_help(char **argv) {
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b088      	sub	sp, #32
 80163fc:	af04      	add	r7, sp, #16
 80163fe:	6078      	str	r0, [r7, #4]
	printf("%s%-15s | %-30s | %-50s\r\n%s%s", GRAS, "Fonctions", "Params",
 8016400:	4b1a      	ldr	r3, [pc, #104]	@ (801646c <subfunct_help+0x74>)
 8016402:	9302      	str	r3, [sp, #8]
 8016404:	4b1a      	ldr	r3, [pc, #104]	@ (8016470 <subfunct_help+0x78>)
 8016406:	9301      	str	r3, [sp, #4]
 8016408:	4b1a      	ldr	r3, [pc, #104]	@ (8016474 <subfunct_help+0x7c>)
 801640a:	9300      	str	r3, [sp, #0]
 801640c:	4b1a      	ldr	r3, [pc, #104]	@ (8016478 <subfunct_help+0x80>)
 801640e:	4a1b      	ldr	r2, [pc, #108]	@ (801647c <subfunct_help+0x84>)
 8016410:	491b      	ldr	r1, [pc, #108]	@ (8016480 <subfunct_help+0x88>)
 8016412:	481c      	ldr	r0, [pc, #112]	@ (8016484 <subfunct_help+0x8c>)
 8016414:	f002 fa7e 	bl	8018914 <iprintf>
			"Description", D_RESET, separator);
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8016418:	2300      	movs	r3, #0
 801641a:	60fb      	str	r3, [r7, #12]
 801641c:	e01b      	b.n	8016456 <subfunct_help+0x5e>
		printf("%s%-15s%s | %-30s | %-50s\r\n", FUNCTION, mapping[i].name,
 801641e:	4a1a      	ldr	r2, [pc, #104]	@ (8016488 <subfunct_help+0x90>)
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	011b      	lsls	r3, r3, #4
 8016424:	4413      	add	r3, r2
 8016426:	6819      	ldr	r1, [r3, #0]
 8016428:	4a17      	ldr	r2, [pc, #92]	@ (8016488 <subfunct_help+0x90>)
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	011b      	lsls	r3, r3, #4
 801642e:	4413      	add	r3, r2
 8016430:	3308      	adds	r3, #8
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	4814      	ldr	r0, [pc, #80]	@ (8016488 <subfunct_help+0x90>)
 8016436:	68fa      	ldr	r2, [r7, #12]
 8016438:	0112      	lsls	r2, r2, #4
 801643a:	4402      	add	r2, r0
 801643c:	3204      	adds	r2, #4
 801643e:	6812      	ldr	r2, [r2, #0]
 8016440:	9201      	str	r2, [sp, #4]
 8016442:	9300      	str	r3, [sp, #0]
 8016444:	4b0a      	ldr	r3, [pc, #40]	@ (8016470 <subfunct_help+0x78>)
 8016446:	460a      	mov	r2, r1
 8016448:	4910      	ldr	r1, [pc, #64]	@ (801648c <subfunct_help+0x94>)
 801644a:	4811      	ldr	r0, [pc, #68]	@ (8016490 <subfunct_help+0x98>)
 801644c:	f002 fa62 	bl	8018914 <iprintf>
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	3301      	adds	r3, #1
 8016454:	60fb      	str	r3, [r7, #12]
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	2b0c      	cmp	r3, #12
 801645a:	d9e0      	bls.n	801641e <subfunct_help+0x26>
				D_RESET, mapping[i].params, mapping[i].resume);
	}
	printf(separator);
 801645c:	480d      	ldr	r0, [pc, #52]	@ (8016494 <subfunct_help+0x9c>)
 801645e:	f002 fac1 	bl	80189e4 <puts>
}
 8016462:	bf00      	nop
 8016464:	3710      	adds	r7, #16
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}
 801646a:	bf00      	nop
 801646c:	0801c050 	.word	0x0801c050
 8016470:	0801c0a0 	.word	0x0801c0a0
 8016474:	0801c0a8 	.word	0x0801c0a8
 8016478:	0801c014 	.word	0x0801c014
 801647c:	0801c01c 	.word	0x0801c01c
 8016480:	0801c028 	.word	0x0801c028
 8016484:	0801c030 	.word	0x0801c030
 8016488:	200001a8 	.word	0x200001a8
 801648c:	0801c0b4 	.word	0x0801c0b4
 8016490:	0801c0bc 	.word	0x0801c0bc
 8016494:	0801c0d8 	.word	0x0801c0d8

08016498 <subfunct_clear>:
void subfunct_clear(char **argv) {
 8016498:	b580      	push	{r7, lr}
 801649a:	b082      	sub	sp, #8
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, clear, sizeof(clear), HAL_MAX_DELAY);
 80164a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80164a4:	2208      	movs	r2, #8
 80164a6:	4904      	ldr	r1, [pc, #16]	@ (80164b8 <subfunct_clear+0x20>)
 80164a8:	4804      	ldr	r0, [pc, #16]	@ (80164bc <subfunct_clear+0x24>)
 80164aa:	f7f6 f815 	bl	800c4d8 <HAL_UART_Transmit>
}
 80164ae:	bf00      	nop
 80164b0:	3708      	adds	r7, #8
 80164b2:	46bd      	mov	sp, r7
 80164b4:	bd80      	pop	{r7, pc}
 80164b6:	bf00      	nop
 80164b8:	20000310 	.word	0x20000310
 80164bc:	20000ce4 	.word	0x20000ce4

080164c0 <subfunct_start>:
void subfunct_start(char **argv) {
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b082      	sub	sp, #8
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(&htim15) == HAL_OK ?
 80164c8:	4832      	ldr	r0, [pc, #200]	@ (8016594 <subfunct_start+0xd4>)
 80164ca:	f7f4 fa73 	bl	800a9b4 <HAL_TIM_Base_Start_IT>
 80164ce:	4603      	mov	r3, r0
			debug(START, "TIMER 15 - CALCUL IMU") : (void) 0;
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d103      	bne.n	80164dc <subfunct_start+0x1c>
 80164d4:	4930      	ldr	r1, [pc, #192]	@ (8016598 <subfunct_start+0xd8>)
 80164d6:	4831      	ldr	r0, [pc, #196]	@ (801659c <subfunct_start+0xdc>)
 80164d8:	f000 fb76 	bl	8016bc8 <debug>
	HAL_TIM_Base_Start_IT(&htim16) == HAL_OK ?
 80164dc:	4830      	ldr	r0, [pc, #192]	@ (80165a0 <subfunct_start+0xe0>)
 80164de:	f7f4 fa69 	bl	800a9b4 <HAL_TIM_Base_Start_IT>
 80164e2:	4603      	mov	r3, r0
			debug(START, "TIMER 16 - SMOOTH SPEED") : (void) 0;
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d103      	bne.n	80164f0 <subfunct_start+0x30>
 80164e8:	492e      	ldr	r1, [pc, #184]	@ (80165a4 <subfunct_start+0xe4>)
 80164ea:	482c      	ldr	r0, [pc, #176]	@ (801659c <subfunct_start+0xdc>)
 80164ec:	f000 fb6c 	bl	8016bc8 <debug>
	HAL_TIM_Base_Start(&htim2) == HAL_OK ?
 80164f0:	482d      	ldr	r0, [pc, #180]	@ (80165a8 <subfunct_start+0xe8>)
 80164f2:	f7f4 f9d5 	bl	800a8a0 <HAL_TIM_Base_Start>
 80164f6:	4603      	mov	r3, r0
			debug(START, "TIMER 2 for PWM" ) : debug(D_ERROR, "TIMER 2 for PWM");
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d104      	bne.n	8016506 <subfunct_start+0x46>
 80164fc:	492b      	ldr	r1, [pc, #172]	@ (80165ac <subfunct_start+0xec>)
 80164fe:	4827      	ldr	r0, [pc, #156]	@ (801659c <subfunct_start+0xdc>)
 8016500:	f000 fb62 	bl	8016bc8 <debug>
 8016504:	e003      	b.n	801650e <subfunct_start+0x4e>
 8016506:	4929      	ldr	r1, [pc, #164]	@ (80165ac <subfunct_start+0xec>)
 8016508:	4829      	ldr	r0, [pc, #164]	@ (80165b0 <subfunct_start+0xf0>)
 801650a:	f000 fb5d 	bl	8016bc8 <debug>
	HAL_TIM_Base_Start(&htim3) == HAL_OK ?
 801650e:	4829      	ldr	r0, [pc, #164]	@ (80165b4 <subfunct_start+0xf4>)
 8016510:	f7f4 f9c6 	bl	800a8a0 <HAL_TIM_Base_Start>
 8016514:	4603      	mov	r3, r0
			debug(START, "TIMER 3 for PWM") : debug(D_ERROR, "TIMER 3 for PWM");
 8016516:	2b00      	cmp	r3, #0
 8016518:	d104      	bne.n	8016524 <subfunct_start+0x64>
 801651a:	4927      	ldr	r1, [pc, #156]	@ (80165b8 <subfunct_start+0xf8>)
 801651c:	481f      	ldr	r0, [pc, #124]	@ (801659c <subfunct_start+0xdc>)
 801651e:	f000 fb53 	bl	8016bc8 <debug>
 8016522:	e003      	b.n	801652c <subfunct_start+0x6c>
 8016524:	4924      	ldr	r1, [pc, #144]	@ (80165b8 <subfunct_start+0xf8>)
 8016526:	4822      	ldr	r0, [pc, #136]	@ (80165b0 <subfunct_start+0xf0>)
 8016528:	f000 fb4e 	bl	8016bc8 <debug>
	HAL_ADCEx_Calibration_Start(&hadc2,ADC_SINGLE_ENDED) == HAL_OK ?
 801652c:	217f      	movs	r1, #127	@ 0x7f
 801652e:	4823      	ldr	r0, [pc, #140]	@ (80165bc <subfunct_start+0xfc>)
 8016530:	f7f1 fb3a 	bl	8007ba8 <HAL_ADCEx_Calibration_Start>
 8016534:	4603      	mov	r3, r0
			debug(START, "ADC2 CALIBRATION") : debug(D_ERROR, "ADC2 CALIBRATION");
 8016536:	2b00      	cmp	r3, #0
 8016538:	d104      	bne.n	8016544 <subfunct_start+0x84>
 801653a:	4921      	ldr	r1, [pc, #132]	@ (80165c0 <subfunct_start+0x100>)
 801653c:	4817      	ldr	r0, [pc, #92]	@ (801659c <subfunct_start+0xdc>)
 801653e:	f000 fb43 	bl	8016bc8 <debug>
 8016542:	e003      	b.n	801654c <subfunct_start+0x8c>
 8016544:	491e      	ldr	r1, [pc, #120]	@ (80165c0 <subfunct_start+0x100>)
 8016546:	481a      	ldr	r0, [pc, #104]	@ (80165b0 <subfunct_start+0xf0>)
 8016548:	f000 fb3e 	bl	8016bc8 <debug>

	LP5812_WriteRegister(0x049,0);//LED HAUTE VERTE
 801654c:	2100      	movs	r1, #0
 801654e:	2049      	movs	r0, #73	@ 0x49
 8016550:	f7ef fa6a 	bl	8005a28 <LP5812_WriteRegister>
	LP5812_WriteRegister(0x048,0);
 8016554:	2100      	movs	r1, #0
 8016556:	2048      	movs	r0, #72	@ 0x48
 8016558:	f7ef fa66 	bl	8005a28 <LP5812_WriteRegister>
	LP5812_WriteRegister(0x047,0);
 801655c:	2100      	movs	r1, #0
 801655e:	2047      	movs	r0, #71	@ 0x47
 8016560:	f7ef fa62 	bl	8005a28 <LP5812_WriteRegister>
	LP5812_WriteRegister(0x046,0);
 8016564:	2100      	movs	r1, #0
 8016566:	2046      	movs	r0, #70	@ 0x46
 8016568:	f7ef fa5e 	bl	8005a28 <LP5812_WriteRegister>
	LP5812_WriteRegister(0x045,0);
 801656c:	2100      	movs	r1, #0
 801656e:	2045      	movs	r0, #69	@ 0x45
 8016570:	f7ef fa5a 	bl	8005a28 <LP5812_WriteRegister>
	LP5812_WriteRegister(0x044,0);
 8016574:	2100      	movs	r1, #0
 8016576:	2044      	movs	r0, #68	@ 0x44
 8016578:	f7ef fa56 	bl	8005a28 <LP5812_WriteRegister>
	//To-Do : Chenillard des LEDs
	TCA9555_init();
 801657c:	f7ef fa80 	bl	8005a80 <TCA9555_init>
	LP5812_Init();
 8016580:	f7ef f986 	bl	8005890 <LP5812_Init>
	ADXL343_init();
 8016584:	f7ee fe34 	bl	80051f0 <ADXL343_init>
	ZXB5210_init();
 8016588:	f7ef fb2a 	bl	8005be0 <ZXB5210_init>

	return;
 801658c:	bf00      	nop
}
 801658e:	3708      	adds	r7, #8
 8016590:	46bd      	mov	sp, r7
 8016592:	bd80      	pop	{r7, pc}
 8016594:	20000b4c 	.word	0x20000b4c
 8016598:	0801c124 	.word	0x0801c124
 801659c:	0801c13c 	.word	0x0801c13c
 80165a0:	20000c18 	.word	0x20000c18
 80165a4:	0801c148 	.word	0x0801c148
 80165a8:	2000081c 	.word	0x2000081c
 80165ac:	0801c160 	.word	0x0801c160
 80165b0:	0801c170 	.word	0x0801c170
 80165b4:	200008e8 	.word	0x200008e8
 80165b8:	0801c17c 	.word	0x0801c17c
 80165bc:	20000524 	.word	0x20000524
 80165c0:	0801c18c 	.word	0x0801c18c

080165c4 <subfunct_stop>:
void subfunct_stop(char **argv) {
 80165c4:	b580      	push	{r7, lr}
 80165c6:	b082      	sub	sp, #8
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim15) == HAL_OK ?
 80165cc:	4813      	ldr	r0, [pc, #76]	@ (801661c <subfunct_stop+0x58>)
 80165ce:	f7f4 f9c9 	bl	800a964 <HAL_TIM_Base_Stop>
 80165d2:	4603      	mov	r3, r0
			debug(STOP, "TIMER 15 - CALCUL IMU") : (void) 0;
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d103      	bne.n	80165e0 <subfunct_stop+0x1c>
 80165d8:	4911      	ldr	r1, [pc, #68]	@ (8016620 <subfunct_stop+0x5c>)
 80165da:	4812      	ldr	r0, [pc, #72]	@ (8016624 <subfunct_stop+0x60>)
 80165dc:	f000 faf4 	bl	8016bc8 <debug>
	ZXB5210_speed_FWD(&MDriver1,0);
 80165e0:	2100      	movs	r1, #0
 80165e2:	4811      	ldr	r0, [pc, #68]	@ (8016628 <subfunct_stop+0x64>)
 80165e4:	f7ef fc02 	bl	8005dec <ZXB5210_speed_FWD>
	ZXB5210_speed_FWD(&MDriver2,0);
 80165e8:	2100      	movs	r1, #0
 80165ea:	4810      	ldr	r0, [pc, #64]	@ (801662c <subfunct_stop+0x68>)
 80165ec:	f7ef fbfe 	bl	8005dec <ZXB5210_speed_FWD>

	//	HAL_TIM_Base_Stop(&htim2) == HAL_OK ?
	//			debug(STOP, "TIMER 2") : debug(D_ERROR, "TIMER 2");
	//	HAL_TIM_Base_Stop(&htim3) == HAL_OK ?
	//			debug(STOP, "TIMER 3") : debug(D_ERROR, "TIMER 3");
	HAL_ADC_Stop_DMA(&hadc2) == HAL_OK ?
 80165f0:	480f      	ldr	r0, [pc, #60]	@ (8016630 <subfunct_stop+0x6c>)
 80165f2:	f7f0 f9ed 	bl	80069d0 <HAL_ADC_Stop_DMA>
 80165f6:	4603      	mov	r3, r0
			debug(STOP, "ADC DMA") : debug(D_ERROR, "ADC2 DMA");
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d104      	bne.n	8016606 <subfunct_stop+0x42>
 80165fc:	490d      	ldr	r1, [pc, #52]	@ (8016634 <subfunct_stop+0x70>)
 80165fe:	4809      	ldr	r0, [pc, #36]	@ (8016624 <subfunct_stop+0x60>)
 8016600:	f000 fae2 	bl	8016bc8 <debug>
 8016604:	e003      	b.n	801660e <subfunct_stop+0x4a>
 8016606:	490c      	ldr	r1, [pc, #48]	@ (8016638 <subfunct_stop+0x74>)
 8016608:	480c      	ldr	r0, [pc, #48]	@ (801663c <subfunct_stop+0x78>)
 801660a:	f000 fadd 	bl	8016bc8 <debug>

	ZXB5210_deinit();
 801660e:	f7ef fb9b 	bl	8005d48 <ZXB5210_deinit>
	return;
 8016612:	bf00      	nop
}
 8016614:	3708      	adds	r7, #8
 8016616:	46bd      	mov	sp, r7
 8016618:	bd80      	pop	{r7, pc}
 801661a:	bf00      	nop
 801661c:	20000b4c 	.word	0x20000b4c
 8016620:	0801c124 	.word	0x0801c124
 8016624:	0801c1a0 	.word	0x0801c1a0
 8016628:	20000e6c 	.word	0x20000e6c
 801662c:	20000e78 	.word	0x20000e78
 8016630:	20000524 	.word	0x20000524
 8016634:	0801c1ac 	.word	0x0801c1ac
 8016638:	0801c1b4 	.word	0x0801c1b4
 801663c:	0801c170 	.word	0x0801c170

08016640 <subfunct_speed>:
void subfunct_speed(char **argv) {
 8016640:	b580      	push	{r7, lr}
 8016642:	b084      	sub	sp, #16
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
	/*
	 * int:MotorID 	int:speed
	 * ex:	speed 1 90
	 */
	MDriver_t* MDriver;
	if (argv[1] == NULL || argv[2] == NULL) {
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	3304      	adds	r3, #4
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d004      	beq.n	801665c <subfunct_speed+0x1c>
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	3308      	adds	r3, #8
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d104      	bne.n	8016666 <subfunct_speed+0x26>
		debug(INFORMATION,"SPEED - ARGUMENTS NEEDED");
 801665c:	491a      	ldr	r1, [pc, #104]	@ (80166c8 <subfunct_speed+0x88>)
 801665e:	481b      	ldr	r0, [pc, #108]	@ (80166cc <subfunct_speed+0x8c>)
 8016660:	f000 fab2 	bl	8016bc8 <debug>
		return;
 8016664:	e02c      	b.n	80166c0 <subfunct_speed+0x80>
	}
	uint8_t driver_id = (uint8_t) strtol(argv[1], NULL, 10); // Base 10
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	3304      	adds	r3, #4
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	220a      	movs	r2, #10
 801666e:	2100      	movs	r1, #0
 8016670:	4618      	mov	r0, r3
 8016672:	f002 f927 	bl	80188c4 <strtol>
 8016676:	4603      	mov	r3, r0
 8016678:	73fb      	strb	r3, [r7, #15]
	int8_t s_alpha = (int8_t) strtol(argv[2], NULL, 10); //Prends des valeurs entre -128 et 127
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	3308      	adds	r3, #8
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	220a      	movs	r2, #10
 8016682:	2100      	movs	r1, #0
 8016684:	4618      	mov	r0, r3
 8016686:	f002 f91d 	bl	80188c4 <strtol>
 801668a:	4603      	mov	r3, r0
 801668c:	73bb      	strb	r3, [r7, #14]

	MDriver = driver_id==1 ? &MDriver1 : &MDriver2;
 801668e:	7bfb      	ldrb	r3, [r7, #15]
 8016690:	2b01      	cmp	r3, #1
 8016692:	d101      	bne.n	8016698 <subfunct_speed+0x58>
 8016694:	4b0e      	ldr	r3, [pc, #56]	@ (80166d0 <subfunct_speed+0x90>)
 8016696:	e000      	b.n	801669a <subfunct_speed+0x5a>
 8016698:	4b0e      	ldr	r3, [pc, #56]	@ (80166d4 <subfunct_speed+0x94>)
 801669a:	60bb      	str	r3, [r7, #8]
	s_alpha > 0 ? ZXB5210_speed_FWD(MDriver, (uint8_t)s_alpha) : ZXB5210_speed_REV(MDriver, (uint8_t)-s_alpha);
 801669c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	dd05      	ble.n	80166b0 <subfunct_speed+0x70>
 80166a4:	7bbb      	ldrb	r3, [r7, #14]
 80166a6:	4619      	mov	r1, r3
 80166a8:	68b8      	ldr	r0, [r7, #8]
 80166aa:	f7ef fb9f 	bl	8005dec <ZXB5210_speed_FWD>

	return;
 80166ae:	e006      	b.n	80166be <subfunct_speed+0x7e>
	s_alpha > 0 ? ZXB5210_speed_FWD(MDriver, (uint8_t)s_alpha) : ZXB5210_speed_REV(MDriver, (uint8_t)-s_alpha);
 80166b0:	7bbb      	ldrb	r3, [r7, #14]
 80166b2:	425b      	negs	r3, r3
 80166b4:	b2db      	uxtb	r3, r3
 80166b6:	4619      	mov	r1, r3
 80166b8:	68b8      	ldr	r0, [r7, #8]
 80166ba:	f7ef fbb7 	bl	8005e2c <ZXB5210_speed_REV>
	return;
 80166be:	bf00      	nop
}
 80166c0:	3710      	adds	r7, #16
 80166c2:	46bd      	mov	sp, r7
 80166c4:	bd80      	pop	{r7, pc}
 80166c6:	bf00      	nop
 80166c8:	0801c1c0 	.word	0x0801c1c0
 80166cc:	0801c1dc 	.word	0x0801c1dc
 80166d0:	20000e6c 	.word	0x20000e6c
 80166d4:	20000e78 	.word	0x20000e78

080166d8 <subfunct_Iasserv>:
void subfunct_Iasserv(char **argv) {
 80166d8:	b580      	push	{r7, lr}
 80166da:	b082      	sub	sp, #8
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
	/** THIS DMA REQUEST IS SYNC WITH THE TIM15 EVENT **/

	HAL_ADC_Start_DMA(&hadc2,(uint32_t*)adc2_asserv_VAL,NUM_CHANNEL_ADC2) == HAL_OK ?
 80166e0:	2202      	movs	r2, #2
 80166e2:	490a      	ldr	r1, [pc, #40]	@ (801670c <subfunct_Iasserv+0x34>)
 80166e4:	480a      	ldr	r0, [pc, #40]	@ (8016710 <subfunct_Iasserv+0x38>)
 80166e6:	f7f0 f8bf 	bl	8006868 <HAL_ADC_Start_DMA>
 80166ea:	4603      	mov	r3, r0
			debug(START, "ADC2 DMA") : debug(D_ERROR, "ADC2 DMA");
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d104      	bne.n	80166fa <subfunct_Iasserv+0x22>
 80166f0:	4908      	ldr	r1, [pc, #32]	@ (8016714 <subfunct_Iasserv+0x3c>)
 80166f2:	4809      	ldr	r0, [pc, #36]	@ (8016718 <subfunct_Iasserv+0x40>)
 80166f4:	f000 fa68 	bl	8016bc8 <debug>
	return;
 80166f8:	e004      	b.n	8016704 <subfunct_Iasserv+0x2c>
			debug(START, "ADC2 DMA") : debug(D_ERROR, "ADC2 DMA");
 80166fa:	4906      	ldr	r1, [pc, #24]	@ (8016714 <subfunct_Iasserv+0x3c>)
 80166fc:	4807      	ldr	r0, [pc, #28]	@ (801671c <subfunct_Iasserv+0x44>)
 80166fe:	f000 fa63 	bl	8016bc8 <debug>
	return;
 8016702:	bf00      	nop
}
 8016704:	3708      	adds	r7, #8
 8016706:	46bd      	mov	sp, r7
 8016708:	bd80      	pop	{r7, pc}
 801670a:	bf00      	nop
 801670c:	20007768 	.word	0x20007768
 8016710:	20000524 	.word	0x20000524
 8016714:	0801c1b4 	.word	0x0801c1b4
 8016718:	0801c13c 	.word	0x0801c13c
 801671c:	0801c170 	.word	0x0801c170

08016720 <subfunct_setLed>:
void subfunct_setLed(char **argv) {
 8016720:	b580      	push	{r7, lr}
 8016722:	b084      	sub	sp, #16
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
	 * int: LedId	int: %PWM(0-255)
	 */

	//uint8_t unused = argv[0];
	//uint8_t LedID = (uint8_t) strtol(argv[1], NULL, 10); // Base 10
	uint8_t PWM = (uint8_t) strtol(argv[2], NULL, 10); // Base 10
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	3308      	adds	r3, #8
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	220a      	movs	r2, #10
 8016730:	2100      	movs	r1, #0
 8016732:	4618      	mov	r0, r3
 8016734:	f002 f8c6 	bl	80188c4 <strtol>
 8016738:	4603      	mov	r3, r0
 801673a:	73fb      	strb	r3, [r7, #15]
	/* Set chip_en = 1 to enable the device*/
	LP5812_WriteRegister(0x000, 0x01) == HAL_OK ?
 801673c:	2101      	movs	r1, #1
 801673e:	2000      	movs	r0, #0
 8016740:	f7ef f972 	bl	8005a28 <LP5812_WriteRegister>
 8016744:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 8016746:	2b00      	cmp	r3, #0
 8016748:	d103      	bne.n	8016752 <subfunct_setLed+0x32>
 801674a:	4877      	ldr	r0, [pc, #476]	@ (8016928 <subfunct_setLed+0x208>)
 801674c:	f002 f8e2 	bl	8018914 <iprintf>
 8016750:	e002      	b.n	8016758 <subfunct_setLed+0x38>
 8016752:	4876      	ldr	r0, [pc, #472]	@ (801692c <subfunct_setLed+0x20c>)
 8016754:	f002 f8de 	bl	8018914 <iprintf>
	/* Set led_mode = 4h to configure the LED drive mode as direct drive mode*/
	LP5812_WriteRegister(0x002, 0x40) == HAL_OK ?
 8016758:	2140      	movs	r1, #64	@ 0x40
 801675a:	2002      	movs	r0, #2
 801675c:	f7ef f964 	bl	8005a28 <LP5812_WriteRegister>
 8016760:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 8016762:	2b00      	cmp	r3, #0
 8016764:	d103      	bne.n	801676e <subfunct_setLed+0x4e>
 8016766:	4870      	ldr	r0, [pc, #448]	@ (8016928 <subfunct_setLed+0x208>)
 8016768:	f002 f8d4 	bl	8018914 <iprintf>
 801676c:	e002      	b.n	8016774 <subfunct_setLed+0x54>
 801676e:	486f      	ldr	r0, [pc, #444]	@ (801692c <subfunct_setLed+0x20c>)
 8016770:	f002 f8d0 	bl	8018914 <iprintf>
	/* Send update command to complete configuration settings*/
	LP5812_WriteRegister(0x010, 0x55) == HAL_OK ?
 8016774:	2155      	movs	r1, #85	@ 0x55
 8016776:	2010      	movs	r0, #16
 8016778:	f7ef f956 	bl	8005a28 <LP5812_WriteRegister>
 801677c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801677e:	2b00      	cmp	r3, #0
 8016780:	d103      	bne.n	801678a <subfunct_setLed+0x6a>
 8016782:	4869      	ldr	r0, [pc, #420]	@ (8016928 <subfunct_setLed+0x208>)
 8016784:	f002 f8c6 	bl	8018914 <iprintf>
 8016788:	e002      	b.n	8016790 <subfunct_setLed+0x70>
 801678a:	4868      	ldr	r0, [pc, #416]	@ (801692c <subfunct_setLed+0x20c>)
 801678c:	f002 f8c2 	bl	8018914 <iprintf>

	/* Set duty cycle for LEDs*/
	PWMLed = PWM < 255 ? 255 : 0;
 8016790:	7bfb      	ldrb	r3, [r7, #15]
 8016792:	2bff      	cmp	r3, #255	@ 0xff
 8016794:	d001      	beq.n	801679a <subfunct_setLed+0x7a>
 8016796:	22ff      	movs	r2, #255	@ 0xff
 8016798:	e000      	b.n	801679c <subfunct_setLed+0x7c>
 801679a:	2200      	movs	r2, #0
 801679c:	4b64      	ldr	r3, [pc, #400]	@ (8016930 <subfunct_setLed+0x210>)
 801679e:	701a      	strb	r2, [r3, #0]
	LP5812_WriteRegister(0x044, PWMLed) == HAL_OK ?
 80167a0:	4b63      	ldr	r3, [pc, #396]	@ (8016930 <subfunct_setLed+0x210>)
 80167a2:	781b      	ldrb	r3, [r3, #0]
 80167a4:	4619      	mov	r1, r3
 80167a6:	2044      	movs	r0, #68	@ 0x44
 80167a8:	f7ef f93e 	bl	8005a28 <LP5812_WriteRegister>
 80167ac:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d103      	bne.n	80167ba <subfunct_setLed+0x9a>
 80167b2:	485d      	ldr	r0, [pc, #372]	@ (8016928 <subfunct_setLed+0x208>)
 80167b4:	f002 f8ae 	bl	8018914 <iprintf>
 80167b8:	e002      	b.n	80167c0 <subfunct_setLed+0xa0>
 80167ba:	485c      	ldr	r0, [pc, #368]	@ (801692c <subfunct_setLed+0x20c>)
 80167bc:	f002 f8aa 	bl	8018914 <iprintf>
	LP5812_WriteRegister(0x045, PWMLed) == HAL_OK ?
 80167c0:	4b5b      	ldr	r3, [pc, #364]	@ (8016930 <subfunct_setLed+0x210>)
 80167c2:	781b      	ldrb	r3, [r3, #0]
 80167c4:	4619      	mov	r1, r3
 80167c6:	2045      	movs	r0, #69	@ 0x45
 80167c8:	f7ef f92e 	bl	8005a28 <LP5812_WriteRegister>
 80167cc:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d103      	bne.n	80167da <subfunct_setLed+0xba>
 80167d2:	4855      	ldr	r0, [pc, #340]	@ (8016928 <subfunct_setLed+0x208>)
 80167d4:	f002 f89e 	bl	8018914 <iprintf>
 80167d8:	e002      	b.n	80167e0 <subfunct_setLed+0xc0>
 80167da:	4854      	ldr	r0, [pc, #336]	@ (801692c <subfunct_setLed+0x20c>)
 80167dc:	f002 f89a 	bl	8018914 <iprintf>
	LP5812_WriteRegister(0x046, PWMLed) == HAL_OK ?
 80167e0:	4b53      	ldr	r3, [pc, #332]	@ (8016930 <subfunct_setLed+0x210>)
 80167e2:	781b      	ldrb	r3, [r3, #0]
 80167e4:	4619      	mov	r1, r3
 80167e6:	2046      	movs	r0, #70	@ 0x46
 80167e8:	f7ef f91e 	bl	8005a28 <LP5812_WriteRegister>
 80167ec:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d103      	bne.n	80167fa <subfunct_setLed+0xda>
 80167f2:	484d      	ldr	r0, [pc, #308]	@ (8016928 <subfunct_setLed+0x208>)
 80167f4:	f002 f88e 	bl	8018914 <iprintf>
 80167f8:	e002      	b.n	8016800 <subfunct_setLed+0xe0>
 80167fa:	484c      	ldr	r0, [pc, #304]	@ (801692c <subfunct_setLed+0x20c>)
 80167fc:	f002 f88a 	bl	8018914 <iprintf>
	LP5812_WriteRegister(0x047, PWMLed) == HAL_OK ?
 8016800:	4b4b      	ldr	r3, [pc, #300]	@ (8016930 <subfunct_setLed+0x210>)
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	4619      	mov	r1, r3
 8016806:	2047      	movs	r0, #71	@ 0x47
 8016808:	f7ef f90e 	bl	8005a28 <LP5812_WriteRegister>
 801680c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801680e:	2b00      	cmp	r3, #0
 8016810:	d103      	bne.n	801681a <subfunct_setLed+0xfa>
 8016812:	4845      	ldr	r0, [pc, #276]	@ (8016928 <subfunct_setLed+0x208>)
 8016814:	f002 f87e 	bl	8018914 <iprintf>
 8016818:	e002      	b.n	8016820 <subfunct_setLed+0x100>
 801681a:	4844      	ldr	r0, [pc, #272]	@ (801692c <subfunct_setLed+0x20c>)
 801681c:	f002 f87a 	bl	8018914 <iprintf>
	LP5812_WriteRegister(0x048, PWMLed) == HAL_OK ?
 8016820:	4b43      	ldr	r3, [pc, #268]	@ (8016930 <subfunct_setLed+0x210>)
 8016822:	781b      	ldrb	r3, [r3, #0]
 8016824:	4619      	mov	r1, r3
 8016826:	2048      	movs	r0, #72	@ 0x48
 8016828:	f7ef f8fe 	bl	8005a28 <LP5812_WriteRegister>
 801682c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801682e:	2b00      	cmp	r3, #0
 8016830:	d103      	bne.n	801683a <subfunct_setLed+0x11a>
 8016832:	483d      	ldr	r0, [pc, #244]	@ (8016928 <subfunct_setLed+0x208>)
 8016834:	f002 f86e 	bl	8018914 <iprintf>
 8016838:	e002      	b.n	8016840 <subfunct_setLed+0x120>
 801683a:	483c      	ldr	r0, [pc, #240]	@ (801692c <subfunct_setLed+0x20c>)
 801683c:	f002 f86a 	bl	8018914 <iprintf>
	LP5812_WriteRegister(0x049, PWMLed) == HAL_OK ?
 8016840:	4b3b      	ldr	r3, [pc, #236]	@ (8016930 <subfunct_setLed+0x210>)
 8016842:	781b      	ldrb	r3, [r3, #0]
 8016844:	4619      	mov	r1, r3
 8016846:	2049      	movs	r0, #73	@ 0x49
 8016848:	f7ef f8ee 	bl	8005a28 <LP5812_WriteRegister>
 801684c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801684e:	2b00      	cmp	r3, #0
 8016850:	d103      	bne.n	801685a <subfunct_setLed+0x13a>
 8016852:	4835      	ldr	r0, [pc, #212]	@ (8016928 <subfunct_setLed+0x208>)
 8016854:	f002 f85e 	bl	8018914 <iprintf>
 8016858:	e002      	b.n	8016860 <subfunct_setLed+0x140>
 801685a:	4834      	ldr	r0, [pc, #208]	@ (801692c <subfunct_setLed+0x20c>)
 801685c:	f002 f85a 	bl	8018914 <iprintf>
	LP5812_WriteRegister(0x04A, PWMLed) == HAL_OK ?
 8016860:	4b33      	ldr	r3, [pc, #204]	@ (8016930 <subfunct_setLed+0x210>)
 8016862:	781b      	ldrb	r3, [r3, #0]
 8016864:	4619      	mov	r1, r3
 8016866:	204a      	movs	r0, #74	@ 0x4a
 8016868:	f7ef f8de 	bl	8005a28 <LP5812_WriteRegister>
 801686c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801686e:	2b00      	cmp	r3, #0
 8016870:	d103      	bne.n	801687a <subfunct_setLed+0x15a>
 8016872:	482d      	ldr	r0, [pc, #180]	@ (8016928 <subfunct_setLed+0x208>)
 8016874:	f002 f84e 	bl	8018914 <iprintf>
 8016878:	e002      	b.n	8016880 <subfunct_setLed+0x160>
 801687a:	482c      	ldr	r0, [pc, #176]	@ (801692c <subfunct_setLed+0x20c>)
 801687c:	f002 f84a 	bl	8018914 <iprintf>
	LP5812_WriteRegister(0x04B, PWMLed) == HAL_OK ?
 8016880:	4b2b      	ldr	r3, [pc, #172]	@ (8016930 <subfunct_setLed+0x210>)
 8016882:	781b      	ldrb	r3, [r3, #0]
 8016884:	4619      	mov	r1, r3
 8016886:	204b      	movs	r0, #75	@ 0x4b
 8016888:	f7ef f8ce 	bl	8005a28 <LP5812_WriteRegister>
 801688c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801688e:	2b00      	cmp	r3, #0
 8016890:	d103      	bne.n	801689a <subfunct_setLed+0x17a>
 8016892:	4825      	ldr	r0, [pc, #148]	@ (8016928 <subfunct_setLed+0x208>)
 8016894:	f002 f83e 	bl	8018914 <iprintf>
 8016898:	e002      	b.n	80168a0 <subfunct_setLed+0x180>
 801689a:	4824      	ldr	r0, [pc, #144]	@ (801692c <subfunct_setLed+0x20c>)
 801689c:	f002 f83a 	bl	8018914 <iprintf>
	LP5812_WriteRegister(0x04C, PWMLed) == HAL_OK ?
 80168a0:	4b23      	ldr	r3, [pc, #140]	@ (8016930 <subfunct_setLed+0x210>)
 80168a2:	781b      	ldrb	r3, [r3, #0]
 80168a4:	4619      	mov	r1, r3
 80168a6:	204c      	movs	r0, #76	@ 0x4c
 80168a8:	f7ef f8be 	bl	8005a28 <LP5812_WriteRegister>
 80168ac:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d103      	bne.n	80168ba <subfunct_setLed+0x19a>
 80168b2:	481d      	ldr	r0, [pc, #116]	@ (8016928 <subfunct_setLed+0x208>)
 80168b4:	f002 f82e 	bl	8018914 <iprintf>
 80168b8:	e002      	b.n	80168c0 <subfunct_setLed+0x1a0>
 80168ba:	481c      	ldr	r0, [pc, #112]	@ (801692c <subfunct_setLed+0x20c>)
 80168bc:	f002 f82a 	bl	8018914 <iprintf>
	LP5812_WriteRegister(0x04D, PWMLed) == HAL_OK ?
 80168c0:	4b1b      	ldr	r3, [pc, #108]	@ (8016930 <subfunct_setLed+0x210>)
 80168c2:	781b      	ldrb	r3, [r3, #0]
 80168c4:	4619      	mov	r1, r3
 80168c6:	204d      	movs	r0, #77	@ 0x4d
 80168c8:	f7ef f8ae 	bl	8005a28 <LP5812_WriteRegister>
 80168cc:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d103      	bne.n	80168da <subfunct_setLed+0x1ba>
 80168d2:	4815      	ldr	r0, [pc, #84]	@ (8016928 <subfunct_setLed+0x208>)
 80168d4:	f002 f81e 	bl	8018914 <iprintf>
 80168d8:	e002      	b.n	80168e0 <subfunct_setLed+0x1c0>
 80168da:	4814      	ldr	r0, [pc, #80]	@ (801692c <subfunct_setLed+0x20c>)
 80168dc:	f002 f81a 	bl	8018914 <iprintf>
	LP5812_WriteRegister(0x04E, PWMLed) == HAL_OK ?
 80168e0:	4b13      	ldr	r3, [pc, #76]	@ (8016930 <subfunct_setLed+0x210>)
 80168e2:	781b      	ldrb	r3, [r3, #0]
 80168e4:	4619      	mov	r1, r3
 80168e6:	204e      	movs	r0, #78	@ 0x4e
 80168e8:	f7ef f89e 	bl	8005a28 <LP5812_WriteRegister>
 80168ec:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d103      	bne.n	80168fa <subfunct_setLed+0x1da>
 80168f2:	480d      	ldr	r0, [pc, #52]	@ (8016928 <subfunct_setLed+0x208>)
 80168f4:	f002 f80e 	bl	8018914 <iprintf>
 80168f8:	e002      	b.n	8016900 <subfunct_setLed+0x1e0>
 80168fa:	480c      	ldr	r0, [pc, #48]	@ (801692c <subfunct_setLed+0x20c>)
 80168fc:	f002 f80a 	bl	8018914 <iprintf>
	LP5812_WriteRegister(0x04F, PWMLed) == HAL_OK ?
 8016900:	4b0b      	ldr	r3, [pc, #44]	@ (8016930 <subfunct_setLed+0x210>)
 8016902:	781b      	ldrb	r3, [r3, #0]
 8016904:	4619      	mov	r1, r3
 8016906:	204f      	movs	r0, #79	@ 0x4f
 8016908:	f7ef f88e 	bl	8005a28 <LP5812_WriteRegister>
 801690c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801690e:	2b00      	cmp	r3, #0
 8016910:	d103      	bne.n	801691a <subfunct_setLed+0x1fa>
 8016912:	4805      	ldr	r0, [pc, #20]	@ (8016928 <subfunct_setLed+0x208>)
 8016914:	f001 fffe 	bl	8018914 <iprintf>
}
 8016918:	e002      	b.n	8016920 <subfunct_setLed+0x200>
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801691a:	4804      	ldr	r0, [pc, #16]	@ (801692c <subfunct_setLed+0x20c>)
 801691c:	f001 fffa 	bl	8018914 <iprintf>
}
 8016920:	bf00      	nop
 8016922:	3710      	adds	r7, #16
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}
 8016928:	0801c1f0 	.word	0x0801c1f0
 801692c:	0801c1fc 	.word	0x0801c1fc
 8016930:	20000318 	.word	0x20000318

08016934 <subfunct_seeIMU>:
void subfunct_seeIMU(char **argv) {
 8016934:	b480      	push	{r7}
 8016936:	b083      	sub	sp, #12
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	isSeeIMU = isSeeIMU == 1 ? 0 : 1;
 801693c:	4b07      	ldr	r3, [pc, #28]	@ (801695c <subfunct_seeIMU+0x28>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	2b01      	cmp	r3, #1
 8016942:	bf14      	ite	ne
 8016944:	2301      	movne	r3, #1
 8016946:	2300      	moveq	r3, #0
 8016948:	b2db      	uxtb	r3, r3
 801694a:	461a      	mov	r2, r3
 801694c:	4b03      	ldr	r3, [pc, #12]	@ (801695c <subfunct_seeIMU+0x28>)
 801694e:	601a      	str	r2, [r3, #0]

	/* in main.c : TIM16 permet de faire calculer la vitesse et la position   */
}
 8016950:	bf00      	nop
 8016952:	370c      	adds	r7, #12
 8016954:	46bd      	mov	sp, r7
 8016956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695a:	4770      	bx	lr
 801695c:	200077dc 	.word	0x200077dc

08016960 <subfunct_IMU_Update>:
void subfunct_IMU_Update(char **argv) {
 8016960:	b580      	push	{r7, lr}
 8016962:	b084      	sub	sp, #16
 8016964:	af00      	add	r7, sp, #0
 8016966:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	uint8_t startReg = 0x1D;
 8016968:	231d      	movs	r3, #29
 801696a:	72fb      	strb	r3, [r7, #11]
	uint8_t endReg = 0x39;
 801696c:	2339      	movs	r3, #57	@ 0x39
 801696e:	72bb      	strb	r3, [r7, #10]
	for (int i = 1; i <= endReg - startReg + 1; i++) {
 8016970:	2301      	movs	r3, #1
 8016972:	60fb      	str	r3, [r7, #12]
 8016974:	e01d      	b.n	80169b2 <subfunct_IMU_Update+0x52>
		uint8_t ret = 0;
 8016976:	2300      	movs	r3, #0
 8016978:	727b      	strb	r3, [r7, #9]
		ADXL343_ReadRegister(IMURegister[i].reg, &ret, 1);
 801697a:	4a14      	ldr	r2, [pc, #80]	@ (80169cc <subfunct_IMU_Update+0x6c>)
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	00db      	lsls	r3, r3, #3
 8016980:	4413      	add	r3, r2
 8016982:	791b      	ldrb	r3, [r3, #4]
 8016984:	f107 0109 	add.w	r1, r7, #9
 8016988:	2201      	movs	r2, #1
 801698a:	4618      	mov	r0, r3
 801698c:	f7ee ff52 	bl	8005834 <ADXL343_ReadRegister>
		printf("READ - 0x%02X (%s): 0x%02X\r\n", IMURegister[i].reg,
 8016990:	4a0e      	ldr	r2, [pc, #56]	@ (80169cc <subfunct_IMU_Update+0x6c>)
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	00db      	lsls	r3, r3, #3
 8016996:	4413      	add	r3, r2
 8016998:	791b      	ldrb	r3, [r3, #4]
 801699a:	4619      	mov	r1, r3
 801699c:	4a0b      	ldr	r2, [pc, #44]	@ (80169cc <subfunct_IMU_Update+0x6c>)
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80169a4:	7a7b      	ldrb	r3, [r7, #9]
 80169a6:	480a      	ldr	r0, [pc, #40]	@ (80169d0 <subfunct_IMU_Update+0x70>)
 80169a8:	f001 ffb4 	bl	8018914 <iprintf>
	for (int i = 1; i <= endReg - startReg + 1; i++) {
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	3301      	adds	r3, #1
 80169b0:	60fb      	str	r3, [r7, #12]
 80169b2:	7aba      	ldrb	r2, [r7, #10]
 80169b4:	7afb      	ldrb	r3, [r7, #11]
 80169b6:	1ad3      	subs	r3, r2, r3
 80169b8:	3301      	adds	r3, #1
 80169ba:	68fa      	ldr	r2, [r7, #12]
 80169bc:	429a      	cmp	r2, r3
 80169be:	ddda      	ble.n	8016976 <subfunct_IMU_Update+0x16>
				IMURegister[i].name, ret);
	}
	/* in main.c : TIM16 permet de faire calculer la vitesse et la position   */
}
 80169c0:	bf00      	nop
 80169c2:	bf00      	nop
 80169c4:	3710      	adds	r7, #16
 80169c6:	46bd      	mov	sp, r7
 80169c8:	bd80      	pop	{r7, pc}
 80169ca:	bf00      	nop
 80169cc:	20000008 	.word	0x20000008
 80169d0:	0801c208 	.word	0x0801c208

080169d4 <subfunct_IMU_SelfTest>:
void subfunct_IMU_SelfTest(char **argv) {
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b084      	sub	sp, #16
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	uint8_t ret;

	isSeeIMUFORCE = isSeeIMUFORCE == 1 ? 0 : 1;
 80169dc:	4b1f      	ldr	r3, [pc, #124]	@ (8016a5c <subfunct_IMU_SelfTest+0x88>)
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	2b01      	cmp	r3, #1
 80169e2:	bf14      	ite	ne
 80169e4:	2301      	movne	r3, #1
 80169e6:	2300      	moveq	r3, #0
 80169e8:	b2db      	uxtb	r3, r3
 80169ea:	461a      	mov	r2, r3
 80169ec:	4b1b      	ldr	r3, [pc, #108]	@ (8016a5c <subfunct_IMU_SelfTest+0x88>)
 80169ee:	601a      	str	r2, [r3, #0]
	char *debugType = isSeeIMUFORCE == 1 ? START : STOP;
 80169f0:	4b1a      	ldr	r3, [pc, #104]	@ (8016a5c <subfunct_IMU_SelfTest+0x88>)
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	2b01      	cmp	r3, #1
 80169f6:	d101      	bne.n	80169fc <subfunct_IMU_SelfTest+0x28>
 80169f8:	4b19      	ldr	r3, [pc, #100]	@ (8016a60 <subfunct_IMU_SelfTest+0x8c>)
 80169fa:	e000      	b.n	80169fe <subfunct_IMU_SelfTest+0x2a>
 80169fc:	4b19      	ldr	r3, [pc, #100]	@ (8016a64 <subfunct_IMU_SelfTest+0x90>)
 80169fe:	60fb      	str	r3, [r7, #12]

	ADXL343_ReadRegister(0x31, &ret, 1) != HAL_OK ?
 8016a00:	f107 030b 	add.w	r3, r7, #11
 8016a04:	2201      	movs	r2, #1
 8016a06:	4619      	mov	r1, r3
 8016a08:	2031      	movs	r0, #49	@ 0x31
 8016a0a:	f7ee ff13 	bl	8005834 <ADXL343_ReadRegister>
 8016a0e:	4603      	mov	r3, r0
			debug(D_ERROR, "I2C READ in IMUFORCE") : (void) 0;
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d003      	beq.n	8016a1c <subfunct_IMU_SelfTest+0x48>
 8016a14:	4914      	ldr	r1, [pc, #80]	@ (8016a68 <subfunct_IMU_SelfTest+0x94>)
 8016a16:	4815      	ldr	r0, [pc, #84]	@ (8016a6c <subfunct_IMU_SelfTest+0x98>)
 8016a18:	f000 f8d6 	bl	8016bc8 <debug>
	ADXL343_WriteRegister(0x31, ((isSeeIMUFORCE << 7) | (ret & 0x7F)))
 8016a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8016a5c <subfunct_IMU_SelfTest+0x88>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	01db      	lsls	r3, r3, #7
 8016a22:	b25a      	sxtb	r2, r3
 8016a24:	7afb      	ldrb	r3, [r7, #11]
 8016a26:	b25b      	sxtb	r3, r3
 8016a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016a2c:	b25b      	sxtb	r3, r3
 8016a2e:	4313      	orrs	r3, r2
 8016a30:	b25b      	sxtb	r3, r3
 8016a32:	b2db      	uxtb	r3, r3
 8016a34:	4619      	mov	r1, r3
 8016a36:	2031      	movs	r0, #49	@ 0x31
 8016a38:	f7ee fede 	bl	80057f8 <ADXL343_WriteRegister>
 8016a3c:	4603      	mov	r3, r0
	!= HAL_OK ? debug(D_ERROR, "I2C WRITE in IMUFORCE") : (void) 0;
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d003      	beq.n	8016a4a <subfunct_IMU_SelfTest+0x76>
 8016a42:	490b      	ldr	r1, [pc, #44]	@ (8016a70 <subfunct_IMU_SelfTest+0x9c>)
 8016a44:	4809      	ldr	r0, [pc, #36]	@ (8016a6c <subfunct_IMU_SelfTest+0x98>)
 8016a46:	f000 f8bf 	bl	8016bc8 <debug>
	debug(debugType, "IMU FORCE - Self Test");
 8016a4a:	490a      	ldr	r1, [pc, #40]	@ (8016a74 <subfunct_IMU_SelfTest+0xa0>)
 8016a4c:	68f8      	ldr	r0, [r7, #12]
 8016a4e:	f000 f8bb 	bl	8016bc8 <debug>
	/* in main.c : TIM16 permet de calculer la vitesse et la position   */
}
 8016a52:	bf00      	nop
 8016a54:	3710      	adds	r7, #16
 8016a56:	46bd      	mov	sp, r7
 8016a58:	bd80      	pop	{r7, pc}
 8016a5a:	bf00      	nop
 8016a5c:	200077e0 	.word	0x200077e0
 8016a60:	0801c13c 	.word	0x0801c13c
 8016a64:	0801c1a0 	.word	0x0801c1a0
 8016a68:	0801c228 	.word	0x0801c228
 8016a6c:	0801c170 	.word	0x0801c170
 8016a70:	0801c240 	.word	0x0801c240
 8016a74:	0801c258 	.word	0x0801c258

08016a78 <subfunct_IMU_GET>:
void subfunct_IMU_GET(char **argv) {
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b08e      	sub	sp, #56	@ 0x38
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	XYZ_t accPREV = accXYZ;
 8016a80:	4a2b      	ldr	r2, [pc, #172]	@ (8016b30 <subfunct_IMU_GET+0xb8>)
 8016a82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	XYZ_t vitPREV = vitXYZ;
 8016a8c:	4a29      	ldr	r2, [pc, #164]	@ (8016b34 <subfunct_IMU_GET+0xbc>)
 8016a8e:	f107 0320 	add.w	r3, r7, #32
 8016a92:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a94:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	accXYZ = ADXL343_getAcc();
 8016a98:	f7ee fe00 	bl	800569c <ADXL343_getAcc>
 8016a9c:	eef0 6a40 	vmov.f32	s13, s0
 8016aa0:	eeb0 7a60 	vmov.f32	s14, s1
 8016aa4:	eef0 7a41 	vmov.f32	s15, s2
 8016aa8:	4b21      	ldr	r3, [pc, #132]	@ (8016b30 <subfunct_IMU_GET+0xb8>)
 8016aaa:	edc3 6a00 	vstr	s13, [r3]
 8016aae:	ed83 7a01 	vstr	s14, [r3, #4]
 8016ab2:	edc3 7a02 	vstr	s15, [r3, #8]

	vitXYZ = (XYZ_t ) { accPREV.X - accXYZ.X, accPREV.Y - accXYZ.Y, accPREV.Z
 8016ab6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8016aba:	4b1d      	ldr	r3, [pc, #116]	@ (8016b30 <subfunct_IMU_GET+0xb8>)
 8016abc:	edd3 7a00 	vldr	s15, [r3]
 8016ac0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8016ac4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8016ac8:	4b19      	ldr	r3, [pc, #100]	@ (8016b30 <subfunct_IMU_GET+0xb8>)
 8016aca:	edd3 7a01 	vldr	s15, [r3, #4]
 8016ace:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016ad2:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
		- accXYZ.Z };
 8016ad6:	4b16      	ldr	r3, [pc, #88]	@ (8016b30 <subfunct_IMU_GET+0xb8>)
 8016ad8:	edd3 7a02 	vldr	s15, [r3, #8]
 8016adc:	ee76 7a67 	vsub.f32	s15, s12, s15
	vitXYZ = (XYZ_t ) { accPREV.X - accXYZ.X, accPREV.Y - accXYZ.Y, accPREV.Z
 8016ae0:	4b14      	ldr	r3, [pc, #80]	@ (8016b34 <subfunct_IMU_GET+0xbc>)
 8016ae2:	edc3 6a00 	vstr	s13, [r3]
 8016ae6:	4b13      	ldr	r3, [pc, #76]	@ (8016b34 <subfunct_IMU_GET+0xbc>)
 8016ae8:	ed83 7a01 	vstr	s14, [r3, #4]
 8016aec:	4b11      	ldr	r3, [pc, #68]	@ (8016b34 <subfunct_IMU_GET+0xbc>)
 8016aee:	edc3 7a02 	vstr	s15, [r3, #8]
	posXYZ = (XYZ_t ) { vitPREV.X - vitPREV.X, vitPREV.Y - vitPREV.Y, vitPREV.Z
 8016af2:	ed97 7a08 	vldr	s14, [r7, #32]
 8016af6:	edd7 7a08 	vldr	s15, [r7, #32]
 8016afa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8016afe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8016b02:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8016b06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016b0a:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
		- vitPREV.Z };
 8016b0e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8016b12:	ee76 7a67 	vsub.f32	s15, s12, s15
	posXYZ = (XYZ_t ) { vitPREV.X - vitPREV.X, vitPREV.Y - vitPREV.Y, vitPREV.Z
 8016b16:	4b08      	ldr	r3, [pc, #32]	@ (8016b38 <subfunct_IMU_GET+0xc0>)
 8016b18:	edc3 6a00 	vstr	s13, [r3]
 8016b1c:	4b06      	ldr	r3, [pc, #24]	@ (8016b38 <subfunct_IMU_GET+0xc0>)
 8016b1e:	ed83 7a01 	vstr	s14, [r3, #4]
 8016b22:	4b05      	ldr	r3, [pc, #20]	@ (8016b38 <subfunct_IMU_GET+0xc0>)
 8016b24:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8016b28:	bf00      	nop
 8016b2a:	3738      	adds	r7, #56	@ 0x38
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bd80      	pop	{r7, pc}
 8016b30:	20007700 	.word	0x20007700
 8016b34:	2000770c 	.word	0x2000770c
 8016b38:	20007718 	.word	0x20007718

08016b3c <subfunct_MIAOU>:
void subfunct_MIAOU(char **argv) {
 8016b3c:	b480      	push	{r7}
 8016b3e:	b083      	sub	sp, #12
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
	return;
 8016b44:	bf00      	nop
}
 8016b46:	370c      	adds	r7, #12
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4e:	4770      	bx	lr

08016b50 <subfunct_modify_calc_speed>:
void subfunct_modify_calc_speed(char**argv){
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b088      	sub	sp, #32
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
	MDriver_t* MDriver;
	MDriver_Config_t* MDriver_Config;
	uint8_t driver_id = (uint8_t) strtol(argv[1], NULL, 10); // Base 10
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	3304      	adds	r3, #4
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	220a      	movs	r2, #10
 8016b60:	2100      	movs	r1, #0
 8016b62:	4618      	mov	r0, r3
 8016b64:	f001 feae 	bl	80188c4 <strtol>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	77fb      	strb	r3, [r7, #31]
	char* sens_motor = argv[2];
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	689b      	ldr	r3, [r3, #8]
 8016b70:	61bb      	str	r3, [r7, #24]
	int32_t offset_user = (int32_t) strtol(argv[3], NULL, 10); //Prends des valeurs entre -128 et 127
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	330c      	adds	r3, #12
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	220a      	movs	r2, #10
 8016b7a:	2100      	movs	r1, #0
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	f001 fea1 	bl	80188c4 <strtol>
 8016b82:	6178      	str	r0, [r7, #20]
	MDriver = driver_id==1 ? &MDriver1 : &MDriver2;
 8016b84:	7ffb      	ldrb	r3, [r7, #31]
 8016b86:	2b01      	cmp	r3, #1
 8016b88:	d101      	bne.n	8016b8e <subfunct_modify_calc_speed+0x3e>
 8016b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8016bbc <subfunct_modify_calc_speed+0x6c>)
 8016b8c:	e000      	b.n	8016b90 <subfunct_modify_calc_speed+0x40>
 8016b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8016bc0 <subfunct_modify_calc_speed+0x70>)
 8016b90:	613b      	str	r3, [r7, #16]
	MDriver_Config = strcmp(sens_motor, "FWD") == 0 ? MDriver->FWD : MDriver->REV;
 8016b92:	490c      	ldr	r1, [pc, #48]	@ (8016bc4 <subfunct_modify_calc_speed+0x74>)
 8016b94:	69b8      	ldr	r0, [r7, #24]
 8016b96:	f7eb fd9b 	bl	80026d0 <strcmp>
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d102      	bne.n	8016ba6 <subfunct_modify_calc_speed+0x56>
 8016ba0:	693b      	ldr	r3, [r7, #16]
 8016ba2:	685b      	ldr	r3, [r3, #4]
 8016ba4:	e001      	b.n	8016baa <subfunct_modify_calc_speed+0x5a>
 8016ba6:	693b      	ldr	r3, [r7, #16]
 8016ba8:	689b      	ldr	r3, [r3, #8]
 8016baa:	60fb      	str	r3, [r7, #12]
	MDriver_Config->offset=offset_user;
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	697a      	ldr	r2, [r7, #20]
 8016bb0:	60da      	str	r2, [r3, #12]

}
 8016bb2:	bf00      	nop
 8016bb4:	3720      	adds	r7, #32
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}
 8016bba:	bf00      	nop
 8016bbc:	20000e6c 	.word	0x20000e6c
 8016bc0:	20000e78 	.word	0x20000e78
 8016bc4:	0801c270 	.word	0x0801c270

08016bc8 <debug>:
}
/************************************************************************************************
 * 										DEBUG
 *************************************************************************************************/

void debug(char *debugType, char *message) {
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b082      	sub	sp, #8
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
 8016bd0:	6039      	str	r1, [r7, #0]

	printf("%-15s%s| %s\r\n", debugType, D_RESET, message);
 8016bd2:	683b      	ldr	r3, [r7, #0]
 8016bd4:	4a04      	ldr	r2, [pc, #16]	@ (8016be8 <debug+0x20>)
 8016bd6:	6879      	ldr	r1, [r7, #4]
 8016bd8:	4804      	ldr	r0, [pc, #16]	@ (8016bec <debug+0x24>)
 8016bda:	f001 fe9b 	bl	8018914 <iprintf>

}
 8016bde:	bf00      	nop
 8016be0:	3708      	adds	r7, #8
 8016be2:	46bd      	mov	sp, r7
 8016be4:	bd80      	pop	{r7, pc}
 8016be6:	bf00      	nop
 8016be8:	0801c0a0 	.word	0x0801c0a0
 8016bec:	0801c274 	.word	0x0801c274

08016bf0 <__cvt>:
 8016bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016bf4:	ec57 6b10 	vmov	r6, r7, d0
 8016bf8:	2f00      	cmp	r7, #0
 8016bfa:	460c      	mov	r4, r1
 8016bfc:	4619      	mov	r1, r3
 8016bfe:	463b      	mov	r3, r7
 8016c00:	bfbb      	ittet	lt
 8016c02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8016c06:	461f      	movlt	r7, r3
 8016c08:	2300      	movge	r3, #0
 8016c0a:	232d      	movlt	r3, #45	@ 0x2d
 8016c0c:	700b      	strb	r3, [r1, #0]
 8016c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016c10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8016c14:	4691      	mov	r9, r2
 8016c16:	f023 0820 	bic.w	r8, r3, #32
 8016c1a:	bfbc      	itt	lt
 8016c1c:	4632      	movlt	r2, r6
 8016c1e:	4616      	movlt	r6, r2
 8016c20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016c24:	d005      	beq.n	8016c32 <__cvt+0x42>
 8016c26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8016c2a:	d100      	bne.n	8016c2e <__cvt+0x3e>
 8016c2c:	3401      	adds	r4, #1
 8016c2e:	2102      	movs	r1, #2
 8016c30:	e000      	b.n	8016c34 <__cvt+0x44>
 8016c32:	2103      	movs	r1, #3
 8016c34:	ab03      	add	r3, sp, #12
 8016c36:	9301      	str	r3, [sp, #4]
 8016c38:	ab02      	add	r3, sp, #8
 8016c3a:	9300      	str	r3, [sp, #0]
 8016c3c:	ec47 6b10 	vmov	d0, r6, r7
 8016c40:	4653      	mov	r3, sl
 8016c42:	4622      	mov	r2, r4
 8016c44:	f002 f8ac 	bl	8018da0 <_dtoa_r>
 8016c48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8016c4c:	4605      	mov	r5, r0
 8016c4e:	d119      	bne.n	8016c84 <__cvt+0x94>
 8016c50:	f019 0f01 	tst.w	r9, #1
 8016c54:	d00e      	beq.n	8016c74 <__cvt+0x84>
 8016c56:	eb00 0904 	add.w	r9, r0, r4
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	4630      	mov	r0, r6
 8016c60:	4639      	mov	r1, r7
 8016c62:	f7ec f963 	bl	8002f2c <__aeabi_dcmpeq>
 8016c66:	b108      	cbz	r0, 8016c6c <__cvt+0x7c>
 8016c68:	f8cd 900c 	str.w	r9, [sp, #12]
 8016c6c:	2230      	movs	r2, #48	@ 0x30
 8016c6e:	9b03      	ldr	r3, [sp, #12]
 8016c70:	454b      	cmp	r3, r9
 8016c72:	d31e      	bcc.n	8016cb2 <__cvt+0xc2>
 8016c74:	9b03      	ldr	r3, [sp, #12]
 8016c76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016c78:	1b5b      	subs	r3, r3, r5
 8016c7a:	4628      	mov	r0, r5
 8016c7c:	6013      	str	r3, [r2, #0]
 8016c7e:	b004      	add	sp, #16
 8016c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016c88:	eb00 0904 	add.w	r9, r0, r4
 8016c8c:	d1e5      	bne.n	8016c5a <__cvt+0x6a>
 8016c8e:	7803      	ldrb	r3, [r0, #0]
 8016c90:	2b30      	cmp	r3, #48	@ 0x30
 8016c92:	d10a      	bne.n	8016caa <__cvt+0xba>
 8016c94:	2200      	movs	r2, #0
 8016c96:	2300      	movs	r3, #0
 8016c98:	4630      	mov	r0, r6
 8016c9a:	4639      	mov	r1, r7
 8016c9c:	f7ec f946 	bl	8002f2c <__aeabi_dcmpeq>
 8016ca0:	b918      	cbnz	r0, 8016caa <__cvt+0xba>
 8016ca2:	f1c4 0401 	rsb	r4, r4, #1
 8016ca6:	f8ca 4000 	str.w	r4, [sl]
 8016caa:	f8da 3000 	ldr.w	r3, [sl]
 8016cae:	4499      	add	r9, r3
 8016cb0:	e7d3      	b.n	8016c5a <__cvt+0x6a>
 8016cb2:	1c59      	adds	r1, r3, #1
 8016cb4:	9103      	str	r1, [sp, #12]
 8016cb6:	701a      	strb	r2, [r3, #0]
 8016cb8:	e7d9      	b.n	8016c6e <__cvt+0x7e>

08016cba <__exponent>:
 8016cba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016cbc:	2900      	cmp	r1, #0
 8016cbe:	bfba      	itte	lt
 8016cc0:	4249      	neglt	r1, r1
 8016cc2:	232d      	movlt	r3, #45	@ 0x2d
 8016cc4:	232b      	movge	r3, #43	@ 0x2b
 8016cc6:	2909      	cmp	r1, #9
 8016cc8:	7002      	strb	r2, [r0, #0]
 8016cca:	7043      	strb	r3, [r0, #1]
 8016ccc:	dd29      	ble.n	8016d22 <__exponent+0x68>
 8016cce:	f10d 0307 	add.w	r3, sp, #7
 8016cd2:	461d      	mov	r5, r3
 8016cd4:	270a      	movs	r7, #10
 8016cd6:	461a      	mov	r2, r3
 8016cd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8016cdc:	fb07 1416 	mls	r4, r7, r6, r1
 8016ce0:	3430      	adds	r4, #48	@ 0x30
 8016ce2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8016ce6:	460c      	mov	r4, r1
 8016ce8:	2c63      	cmp	r4, #99	@ 0x63
 8016cea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8016cee:	4631      	mov	r1, r6
 8016cf0:	dcf1      	bgt.n	8016cd6 <__exponent+0x1c>
 8016cf2:	3130      	adds	r1, #48	@ 0x30
 8016cf4:	1e94      	subs	r4, r2, #2
 8016cf6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016cfa:	1c41      	adds	r1, r0, #1
 8016cfc:	4623      	mov	r3, r4
 8016cfe:	42ab      	cmp	r3, r5
 8016d00:	d30a      	bcc.n	8016d18 <__exponent+0x5e>
 8016d02:	f10d 0309 	add.w	r3, sp, #9
 8016d06:	1a9b      	subs	r3, r3, r2
 8016d08:	42ac      	cmp	r4, r5
 8016d0a:	bf88      	it	hi
 8016d0c:	2300      	movhi	r3, #0
 8016d0e:	3302      	adds	r3, #2
 8016d10:	4403      	add	r3, r0
 8016d12:	1a18      	subs	r0, r3, r0
 8016d14:	b003      	add	sp, #12
 8016d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d18:	f813 6b01 	ldrb.w	r6, [r3], #1
 8016d1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8016d20:	e7ed      	b.n	8016cfe <__exponent+0x44>
 8016d22:	2330      	movs	r3, #48	@ 0x30
 8016d24:	3130      	adds	r1, #48	@ 0x30
 8016d26:	7083      	strb	r3, [r0, #2]
 8016d28:	70c1      	strb	r1, [r0, #3]
 8016d2a:	1d03      	adds	r3, r0, #4
 8016d2c:	e7f1      	b.n	8016d12 <__exponent+0x58>
	...

08016d30 <_printf_float>:
 8016d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d34:	b08d      	sub	sp, #52	@ 0x34
 8016d36:	460c      	mov	r4, r1
 8016d38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016d3c:	4616      	mov	r6, r2
 8016d3e:	461f      	mov	r7, r3
 8016d40:	4605      	mov	r5, r0
 8016d42:	f001 fecd 	bl	8018ae0 <_localeconv_r>
 8016d46:	6803      	ldr	r3, [r0, #0]
 8016d48:	9304      	str	r3, [sp, #16]
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f7eb fcb8 	bl	80026c0 <strlen>
 8016d50:	2300      	movs	r3, #0
 8016d52:	930a      	str	r3, [sp, #40]	@ 0x28
 8016d54:	f8d8 3000 	ldr.w	r3, [r8]
 8016d58:	9005      	str	r0, [sp, #20]
 8016d5a:	3307      	adds	r3, #7
 8016d5c:	f023 0307 	bic.w	r3, r3, #7
 8016d60:	f103 0208 	add.w	r2, r3, #8
 8016d64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016d68:	f8d4 b000 	ldr.w	fp, [r4]
 8016d6c:	f8c8 2000 	str.w	r2, [r8]
 8016d70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016d74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8016d78:	9307      	str	r3, [sp, #28]
 8016d7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8016d7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8016d82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016d86:	4b9c      	ldr	r3, [pc, #624]	@ (8016ff8 <_printf_float+0x2c8>)
 8016d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016d8c:	f7ec f900 	bl	8002f90 <__aeabi_dcmpun>
 8016d90:	bb70      	cbnz	r0, 8016df0 <_printf_float+0xc0>
 8016d92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016d96:	4b98      	ldr	r3, [pc, #608]	@ (8016ff8 <_printf_float+0x2c8>)
 8016d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016d9c:	f7ec f8da 	bl	8002f54 <__aeabi_dcmple>
 8016da0:	bb30      	cbnz	r0, 8016df0 <_printf_float+0xc0>
 8016da2:	2200      	movs	r2, #0
 8016da4:	2300      	movs	r3, #0
 8016da6:	4640      	mov	r0, r8
 8016da8:	4649      	mov	r1, r9
 8016daa:	f7ec f8c9 	bl	8002f40 <__aeabi_dcmplt>
 8016dae:	b110      	cbz	r0, 8016db6 <_printf_float+0x86>
 8016db0:	232d      	movs	r3, #45	@ 0x2d
 8016db2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016db6:	4a91      	ldr	r2, [pc, #580]	@ (8016ffc <_printf_float+0x2cc>)
 8016db8:	4b91      	ldr	r3, [pc, #580]	@ (8017000 <_printf_float+0x2d0>)
 8016dba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016dbe:	bf94      	ite	ls
 8016dc0:	4690      	movls	r8, r2
 8016dc2:	4698      	movhi	r8, r3
 8016dc4:	2303      	movs	r3, #3
 8016dc6:	6123      	str	r3, [r4, #16]
 8016dc8:	f02b 0304 	bic.w	r3, fp, #4
 8016dcc:	6023      	str	r3, [r4, #0]
 8016dce:	f04f 0900 	mov.w	r9, #0
 8016dd2:	9700      	str	r7, [sp, #0]
 8016dd4:	4633      	mov	r3, r6
 8016dd6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8016dd8:	4621      	mov	r1, r4
 8016dda:	4628      	mov	r0, r5
 8016ddc:	f000 fa7c 	bl	80172d8 <_printf_common>
 8016de0:	3001      	adds	r0, #1
 8016de2:	f040 808d 	bne.w	8016f00 <_printf_float+0x1d0>
 8016de6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016dea:	b00d      	add	sp, #52	@ 0x34
 8016dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016df0:	4642      	mov	r2, r8
 8016df2:	464b      	mov	r3, r9
 8016df4:	4640      	mov	r0, r8
 8016df6:	4649      	mov	r1, r9
 8016df8:	f7ec f8ca 	bl	8002f90 <__aeabi_dcmpun>
 8016dfc:	b140      	cbz	r0, 8016e10 <_printf_float+0xe0>
 8016dfe:	464b      	mov	r3, r9
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	bfbc      	itt	lt
 8016e04:	232d      	movlt	r3, #45	@ 0x2d
 8016e06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8016e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8017004 <_printf_float+0x2d4>)
 8016e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8017008 <_printf_float+0x2d8>)
 8016e0e:	e7d4      	b.n	8016dba <_printf_float+0x8a>
 8016e10:	6863      	ldr	r3, [r4, #4]
 8016e12:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8016e16:	9206      	str	r2, [sp, #24]
 8016e18:	1c5a      	adds	r2, r3, #1
 8016e1a:	d13b      	bne.n	8016e94 <_printf_float+0x164>
 8016e1c:	2306      	movs	r3, #6
 8016e1e:	6063      	str	r3, [r4, #4]
 8016e20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8016e24:	2300      	movs	r3, #0
 8016e26:	6022      	str	r2, [r4, #0]
 8016e28:	9303      	str	r3, [sp, #12]
 8016e2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8016e2c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8016e30:	ab09      	add	r3, sp, #36	@ 0x24
 8016e32:	9300      	str	r3, [sp, #0]
 8016e34:	6861      	ldr	r1, [r4, #4]
 8016e36:	ec49 8b10 	vmov	d0, r8, r9
 8016e3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8016e3e:	4628      	mov	r0, r5
 8016e40:	f7ff fed6 	bl	8016bf0 <__cvt>
 8016e44:	9b06      	ldr	r3, [sp, #24]
 8016e46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016e48:	2b47      	cmp	r3, #71	@ 0x47
 8016e4a:	4680      	mov	r8, r0
 8016e4c:	d129      	bne.n	8016ea2 <_printf_float+0x172>
 8016e4e:	1cc8      	adds	r0, r1, #3
 8016e50:	db02      	blt.n	8016e58 <_printf_float+0x128>
 8016e52:	6863      	ldr	r3, [r4, #4]
 8016e54:	4299      	cmp	r1, r3
 8016e56:	dd41      	ble.n	8016edc <_printf_float+0x1ac>
 8016e58:	f1aa 0a02 	sub.w	sl, sl, #2
 8016e5c:	fa5f fa8a 	uxtb.w	sl, sl
 8016e60:	3901      	subs	r1, #1
 8016e62:	4652      	mov	r2, sl
 8016e64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8016e68:	9109      	str	r1, [sp, #36]	@ 0x24
 8016e6a:	f7ff ff26 	bl	8016cba <__exponent>
 8016e6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016e70:	1813      	adds	r3, r2, r0
 8016e72:	2a01      	cmp	r2, #1
 8016e74:	4681      	mov	r9, r0
 8016e76:	6123      	str	r3, [r4, #16]
 8016e78:	dc02      	bgt.n	8016e80 <_printf_float+0x150>
 8016e7a:	6822      	ldr	r2, [r4, #0]
 8016e7c:	07d2      	lsls	r2, r2, #31
 8016e7e:	d501      	bpl.n	8016e84 <_printf_float+0x154>
 8016e80:	3301      	adds	r3, #1
 8016e82:	6123      	str	r3, [r4, #16]
 8016e84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d0a2      	beq.n	8016dd2 <_printf_float+0xa2>
 8016e8c:	232d      	movs	r3, #45	@ 0x2d
 8016e8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016e92:	e79e      	b.n	8016dd2 <_printf_float+0xa2>
 8016e94:	9a06      	ldr	r2, [sp, #24]
 8016e96:	2a47      	cmp	r2, #71	@ 0x47
 8016e98:	d1c2      	bne.n	8016e20 <_printf_float+0xf0>
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d1c0      	bne.n	8016e20 <_printf_float+0xf0>
 8016e9e:	2301      	movs	r3, #1
 8016ea0:	e7bd      	b.n	8016e1e <_printf_float+0xee>
 8016ea2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8016ea6:	d9db      	bls.n	8016e60 <_printf_float+0x130>
 8016ea8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8016eac:	d118      	bne.n	8016ee0 <_printf_float+0x1b0>
 8016eae:	2900      	cmp	r1, #0
 8016eb0:	6863      	ldr	r3, [r4, #4]
 8016eb2:	dd0b      	ble.n	8016ecc <_printf_float+0x19c>
 8016eb4:	6121      	str	r1, [r4, #16]
 8016eb6:	b913      	cbnz	r3, 8016ebe <_printf_float+0x18e>
 8016eb8:	6822      	ldr	r2, [r4, #0]
 8016eba:	07d0      	lsls	r0, r2, #31
 8016ebc:	d502      	bpl.n	8016ec4 <_printf_float+0x194>
 8016ebe:	3301      	adds	r3, #1
 8016ec0:	440b      	add	r3, r1
 8016ec2:	6123      	str	r3, [r4, #16]
 8016ec4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8016ec6:	f04f 0900 	mov.w	r9, #0
 8016eca:	e7db      	b.n	8016e84 <_printf_float+0x154>
 8016ecc:	b913      	cbnz	r3, 8016ed4 <_printf_float+0x1a4>
 8016ece:	6822      	ldr	r2, [r4, #0]
 8016ed0:	07d2      	lsls	r2, r2, #31
 8016ed2:	d501      	bpl.n	8016ed8 <_printf_float+0x1a8>
 8016ed4:	3302      	adds	r3, #2
 8016ed6:	e7f4      	b.n	8016ec2 <_printf_float+0x192>
 8016ed8:	2301      	movs	r3, #1
 8016eda:	e7f2      	b.n	8016ec2 <_printf_float+0x192>
 8016edc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8016ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ee2:	4299      	cmp	r1, r3
 8016ee4:	db05      	blt.n	8016ef2 <_printf_float+0x1c2>
 8016ee6:	6823      	ldr	r3, [r4, #0]
 8016ee8:	6121      	str	r1, [r4, #16]
 8016eea:	07d8      	lsls	r0, r3, #31
 8016eec:	d5ea      	bpl.n	8016ec4 <_printf_float+0x194>
 8016eee:	1c4b      	adds	r3, r1, #1
 8016ef0:	e7e7      	b.n	8016ec2 <_printf_float+0x192>
 8016ef2:	2900      	cmp	r1, #0
 8016ef4:	bfd4      	ite	le
 8016ef6:	f1c1 0202 	rsble	r2, r1, #2
 8016efa:	2201      	movgt	r2, #1
 8016efc:	4413      	add	r3, r2
 8016efe:	e7e0      	b.n	8016ec2 <_printf_float+0x192>
 8016f00:	6823      	ldr	r3, [r4, #0]
 8016f02:	055a      	lsls	r2, r3, #21
 8016f04:	d407      	bmi.n	8016f16 <_printf_float+0x1e6>
 8016f06:	6923      	ldr	r3, [r4, #16]
 8016f08:	4642      	mov	r2, r8
 8016f0a:	4631      	mov	r1, r6
 8016f0c:	4628      	mov	r0, r5
 8016f0e:	47b8      	blx	r7
 8016f10:	3001      	adds	r0, #1
 8016f12:	d12b      	bne.n	8016f6c <_printf_float+0x23c>
 8016f14:	e767      	b.n	8016de6 <_printf_float+0xb6>
 8016f16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8016f1a:	f240 80dd 	bls.w	80170d8 <_printf_float+0x3a8>
 8016f1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8016f22:	2200      	movs	r2, #0
 8016f24:	2300      	movs	r3, #0
 8016f26:	f7ec f801 	bl	8002f2c <__aeabi_dcmpeq>
 8016f2a:	2800      	cmp	r0, #0
 8016f2c:	d033      	beq.n	8016f96 <_printf_float+0x266>
 8016f2e:	4a37      	ldr	r2, [pc, #220]	@ (801700c <_printf_float+0x2dc>)
 8016f30:	2301      	movs	r3, #1
 8016f32:	4631      	mov	r1, r6
 8016f34:	4628      	mov	r0, r5
 8016f36:	47b8      	blx	r7
 8016f38:	3001      	adds	r0, #1
 8016f3a:	f43f af54 	beq.w	8016de6 <_printf_float+0xb6>
 8016f3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8016f42:	4543      	cmp	r3, r8
 8016f44:	db02      	blt.n	8016f4c <_printf_float+0x21c>
 8016f46:	6823      	ldr	r3, [r4, #0]
 8016f48:	07d8      	lsls	r0, r3, #31
 8016f4a:	d50f      	bpl.n	8016f6c <_printf_float+0x23c>
 8016f4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016f50:	4631      	mov	r1, r6
 8016f52:	4628      	mov	r0, r5
 8016f54:	47b8      	blx	r7
 8016f56:	3001      	adds	r0, #1
 8016f58:	f43f af45 	beq.w	8016de6 <_printf_float+0xb6>
 8016f5c:	f04f 0900 	mov.w	r9, #0
 8016f60:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8016f64:	f104 0a1a 	add.w	sl, r4, #26
 8016f68:	45c8      	cmp	r8, r9
 8016f6a:	dc09      	bgt.n	8016f80 <_printf_float+0x250>
 8016f6c:	6823      	ldr	r3, [r4, #0]
 8016f6e:	079b      	lsls	r3, r3, #30
 8016f70:	f100 8103 	bmi.w	801717a <_printf_float+0x44a>
 8016f74:	68e0      	ldr	r0, [r4, #12]
 8016f76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016f78:	4298      	cmp	r0, r3
 8016f7a:	bfb8      	it	lt
 8016f7c:	4618      	movlt	r0, r3
 8016f7e:	e734      	b.n	8016dea <_printf_float+0xba>
 8016f80:	2301      	movs	r3, #1
 8016f82:	4652      	mov	r2, sl
 8016f84:	4631      	mov	r1, r6
 8016f86:	4628      	mov	r0, r5
 8016f88:	47b8      	blx	r7
 8016f8a:	3001      	adds	r0, #1
 8016f8c:	f43f af2b 	beq.w	8016de6 <_printf_float+0xb6>
 8016f90:	f109 0901 	add.w	r9, r9, #1
 8016f94:	e7e8      	b.n	8016f68 <_printf_float+0x238>
 8016f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	dc39      	bgt.n	8017010 <_printf_float+0x2e0>
 8016f9c:	4a1b      	ldr	r2, [pc, #108]	@ (801700c <_printf_float+0x2dc>)
 8016f9e:	2301      	movs	r3, #1
 8016fa0:	4631      	mov	r1, r6
 8016fa2:	4628      	mov	r0, r5
 8016fa4:	47b8      	blx	r7
 8016fa6:	3001      	adds	r0, #1
 8016fa8:	f43f af1d 	beq.w	8016de6 <_printf_float+0xb6>
 8016fac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8016fb0:	ea59 0303 	orrs.w	r3, r9, r3
 8016fb4:	d102      	bne.n	8016fbc <_printf_float+0x28c>
 8016fb6:	6823      	ldr	r3, [r4, #0]
 8016fb8:	07d9      	lsls	r1, r3, #31
 8016fba:	d5d7      	bpl.n	8016f6c <_printf_float+0x23c>
 8016fbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016fc0:	4631      	mov	r1, r6
 8016fc2:	4628      	mov	r0, r5
 8016fc4:	47b8      	blx	r7
 8016fc6:	3001      	adds	r0, #1
 8016fc8:	f43f af0d 	beq.w	8016de6 <_printf_float+0xb6>
 8016fcc:	f04f 0a00 	mov.w	sl, #0
 8016fd0:	f104 0b1a 	add.w	fp, r4, #26
 8016fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fd6:	425b      	negs	r3, r3
 8016fd8:	4553      	cmp	r3, sl
 8016fda:	dc01      	bgt.n	8016fe0 <_printf_float+0x2b0>
 8016fdc:	464b      	mov	r3, r9
 8016fde:	e793      	b.n	8016f08 <_printf_float+0x1d8>
 8016fe0:	2301      	movs	r3, #1
 8016fe2:	465a      	mov	r2, fp
 8016fe4:	4631      	mov	r1, r6
 8016fe6:	4628      	mov	r0, r5
 8016fe8:	47b8      	blx	r7
 8016fea:	3001      	adds	r0, #1
 8016fec:	f43f aefb 	beq.w	8016de6 <_printf_float+0xb6>
 8016ff0:	f10a 0a01 	add.w	sl, sl, #1
 8016ff4:	e7ee      	b.n	8016fd4 <_printf_float+0x2a4>
 8016ff6:	bf00      	nop
 8016ff8:	7fefffff 	.word	0x7fefffff
 8016ffc:	0801c3d8 	.word	0x0801c3d8
 8017000:	0801c3dc 	.word	0x0801c3dc
 8017004:	0801c3e0 	.word	0x0801c3e0
 8017008:	0801c3e4 	.word	0x0801c3e4
 801700c:	0801c3e8 	.word	0x0801c3e8
 8017010:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017012:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017016:	4553      	cmp	r3, sl
 8017018:	bfa8      	it	ge
 801701a:	4653      	movge	r3, sl
 801701c:	2b00      	cmp	r3, #0
 801701e:	4699      	mov	r9, r3
 8017020:	dc36      	bgt.n	8017090 <_printf_float+0x360>
 8017022:	f04f 0b00 	mov.w	fp, #0
 8017026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801702a:	f104 021a 	add.w	r2, r4, #26
 801702e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017030:	9306      	str	r3, [sp, #24]
 8017032:	eba3 0309 	sub.w	r3, r3, r9
 8017036:	455b      	cmp	r3, fp
 8017038:	dc31      	bgt.n	801709e <_printf_float+0x36e>
 801703a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801703c:	459a      	cmp	sl, r3
 801703e:	dc3a      	bgt.n	80170b6 <_printf_float+0x386>
 8017040:	6823      	ldr	r3, [r4, #0]
 8017042:	07da      	lsls	r2, r3, #31
 8017044:	d437      	bmi.n	80170b6 <_printf_float+0x386>
 8017046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017048:	ebaa 0903 	sub.w	r9, sl, r3
 801704c:	9b06      	ldr	r3, [sp, #24]
 801704e:	ebaa 0303 	sub.w	r3, sl, r3
 8017052:	4599      	cmp	r9, r3
 8017054:	bfa8      	it	ge
 8017056:	4699      	movge	r9, r3
 8017058:	f1b9 0f00 	cmp.w	r9, #0
 801705c:	dc33      	bgt.n	80170c6 <_printf_float+0x396>
 801705e:	f04f 0800 	mov.w	r8, #0
 8017062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017066:	f104 0b1a 	add.w	fp, r4, #26
 801706a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801706c:	ebaa 0303 	sub.w	r3, sl, r3
 8017070:	eba3 0309 	sub.w	r3, r3, r9
 8017074:	4543      	cmp	r3, r8
 8017076:	f77f af79 	ble.w	8016f6c <_printf_float+0x23c>
 801707a:	2301      	movs	r3, #1
 801707c:	465a      	mov	r2, fp
 801707e:	4631      	mov	r1, r6
 8017080:	4628      	mov	r0, r5
 8017082:	47b8      	blx	r7
 8017084:	3001      	adds	r0, #1
 8017086:	f43f aeae 	beq.w	8016de6 <_printf_float+0xb6>
 801708a:	f108 0801 	add.w	r8, r8, #1
 801708e:	e7ec      	b.n	801706a <_printf_float+0x33a>
 8017090:	4642      	mov	r2, r8
 8017092:	4631      	mov	r1, r6
 8017094:	4628      	mov	r0, r5
 8017096:	47b8      	blx	r7
 8017098:	3001      	adds	r0, #1
 801709a:	d1c2      	bne.n	8017022 <_printf_float+0x2f2>
 801709c:	e6a3      	b.n	8016de6 <_printf_float+0xb6>
 801709e:	2301      	movs	r3, #1
 80170a0:	4631      	mov	r1, r6
 80170a2:	4628      	mov	r0, r5
 80170a4:	9206      	str	r2, [sp, #24]
 80170a6:	47b8      	blx	r7
 80170a8:	3001      	adds	r0, #1
 80170aa:	f43f ae9c 	beq.w	8016de6 <_printf_float+0xb6>
 80170ae:	9a06      	ldr	r2, [sp, #24]
 80170b0:	f10b 0b01 	add.w	fp, fp, #1
 80170b4:	e7bb      	b.n	801702e <_printf_float+0x2fe>
 80170b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80170ba:	4631      	mov	r1, r6
 80170bc:	4628      	mov	r0, r5
 80170be:	47b8      	blx	r7
 80170c0:	3001      	adds	r0, #1
 80170c2:	d1c0      	bne.n	8017046 <_printf_float+0x316>
 80170c4:	e68f      	b.n	8016de6 <_printf_float+0xb6>
 80170c6:	9a06      	ldr	r2, [sp, #24]
 80170c8:	464b      	mov	r3, r9
 80170ca:	4442      	add	r2, r8
 80170cc:	4631      	mov	r1, r6
 80170ce:	4628      	mov	r0, r5
 80170d0:	47b8      	blx	r7
 80170d2:	3001      	adds	r0, #1
 80170d4:	d1c3      	bne.n	801705e <_printf_float+0x32e>
 80170d6:	e686      	b.n	8016de6 <_printf_float+0xb6>
 80170d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80170dc:	f1ba 0f01 	cmp.w	sl, #1
 80170e0:	dc01      	bgt.n	80170e6 <_printf_float+0x3b6>
 80170e2:	07db      	lsls	r3, r3, #31
 80170e4:	d536      	bpl.n	8017154 <_printf_float+0x424>
 80170e6:	2301      	movs	r3, #1
 80170e8:	4642      	mov	r2, r8
 80170ea:	4631      	mov	r1, r6
 80170ec:	4628      	mov	r0, r5
 80170ee:	47b8      	blx	r7
 80170f0:	3001      	adds	r0, #1
 80170f2:	f43f ae78 	beq.w	8016de6 <_printf_float+0xb6>
 80170f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80170fa:	4631      	mov	r1, r6
 80170fc:	4628      	mov	r0, r5
 80170fe:	47b8      	blx	r7
 8017100:	3001      	adds	r0, #1
 8017102:	f43f ae70 	beq.w	8016de6 <_printf_float+0xb6>
 8017106:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801710a:	2200      	movs	r2, #0
 801710c:	2300      	movs	r3, #0
 801710e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8017112:	f7eb ff0b 	bl	8002f2c <__aeabi_dcmpeq>
 8017116:	b9c0      	cbnz	r0, 801714a <_printf_float+0x41a>
 8017118:	4653      	mov	r3, sl
 801711a:	f108 0201 	add.w	r2, r8, #1
 801711e:	4631      	mov	r1, r6
 8017120:	4628      	mov	r0, r5
 8017122:	47b8      	blx	r7
 8017124:	3001      	adds	r0, #1
 8017126:	d10c      	bne.n	8017142 <_printf_float+0x412>
 8017128:	e65d      	b.n	8016de6 <_printf_float+0xb6>
 801712a:	2301      	movs	r3, #1
 801712c:	465a      	mov	r2, fp
 801712e:	4631      	mov	r1, r6
 8017130:	4628      	mov	r0, r5
 8017132:	47b8      	blx	r7
 8017134:	3001      	adds	r0, #1
 8017136:	f43f ae56 	beq.w	8016de6 <_printf_float+0xb6>
 801713a:	f108 0801 	add.w	r8, r8, #1
 801713e:	45d0      	cmp	r8, sl
 8017140:	dbf3      	blt.n	801712a <_printf_float+0x3fa>
 8017142:	464b      	mov	r3, r9
 8017144:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017148:	e6df      	b.n	8016f0a <_printf_float+0x1da>
 801714a:	f04f 0800 	mov.w	r8, #0
 801714e:	f104 0b1a 	add.w	fp, r4, #26
 8017152:	e7f4      	b.n	801713e <_printf_float+0x40e>
 8017154:	2301      	movs	r3, #1
 8017156:	4642      	mov	r2, r8
 8017158:	e7e1      	b.n	801711e <_printf_float+0x3ee>
 801715a:	2301      	movs	r3, #1
 801715c:	464a      	mov	r2, r9
 801715e:	4631      	mov	r1, r6
 8017160:	4628      	mov	r0, r5
 8017162:	47b8      	blx	r7
 8017164:	3001      	adds	r0, #1
 8017166:	f43f ae3e 	beq.w	8016de6 <_printf_float+0xb6>
 801716a:	f108 0801 	add.w	r8, r8, #1
 801716e:	68e3      	ldr	r3, [r4, #12]
 8017170:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017172:	1a5b      	subs	r3, r3, r1
 8017174:	4543      	cmp	r3, r8
 8017176:	dcf0      	bgt.n	801715a <_printf_float+0x42a>
 8017178:	e6fc      	b.n	8016f74 <_printf_float+0x244>
 801717a:	f04f 0800 	mov.w	r8, #0
 801717e:	f104 0919 	add.w	r9, r4, #25
 8017182:	e7f4      	b.n	801716e <_printf_float+0x43e>

08017184 <malloc>:
 8017184:	4b02      	ldr	r3, [pc, #8]	@ (8017190 <malloc+0xc>)
 8017186:	4601      	mov	r1, r0
 8017188:	6818      	ldr	r0, [r3, #0]
 801718a:	f000 b825 	b.w	80171d8 <_malloc_r>
 801718e:	bf00      	nop
 8017190:	20000494 	.word	0x20000494

08017194 <sbrk_aligned>:
 8017194:	b570      	push	{r4, r5, r6, lr}
 8017196:	4e0f      	ldr	r6, [pc, #60]	@ (80171d4 <sbrk_aligned+0x40>)
 8017198:	460c      	mov	r4, r1
 801719a:	6831      	ldr	r1, [r6, #0]
 801719c:	4605      	mov	r5, r0
 801719e:	b911      	cbnz	r1, 80171a6 <sbrk_aligned+0x12>
 80171a0:	f001 fcf8 	bl	8018b94 <_sbrk_r>
 80171a4:	6030      	str	r0, [r6, #0]
 80171a6:	4621      	mov	r1, r4
 80171a8:	4628      	mov	r0, r5
 80171aa:	f001 fcf3 	bl	8018b94 <_sbrk_r>
 80171ae:	1c43      	adds	r3, r0, #1
 80171b0:	d103      	bne.n	80171ba <sbrk_aligned+0x26>
 80171b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80171b6:	4620      	mov	r0, r4
 80171b8:	bd70      	pop	{r4, r5, r6, pc}
 80171ba:	1cc4      	adds	r4, r0, #3
 80171bc:	f024 0403 	bic.w	r4, r4, #3
 80171c0:	42a0      	cmp	r0, r4
 80171c2:	d0f8      	beq.n	80171b6 <sbrk_aligned+0x22>
 80171c4:	1a21      	subs	r1, r4, r0
 80171c6:	4628      	mov	r0, r5
 80171c8:	f001 fce4 	bl	8018b94 <_sbrk_r>
 80171cc:	3001      	adds	r0, #1
 80171ce:	d1f2      	bne.n	80171b6 <sbrk_aligned+0x22>
 80171d0:	e7ef      	b.n	80171b2 <sbrk_aligned+0x1e>
 80171d2:	bf00      	nop
 80171d4:	200077e8 	.word	0x200077e8

080171d8 <_malloc_r>:
 80171d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171dc:	1ccd      	adds	r5, r1, #3
 80171de:	f025 0503 	bic.w	r5, r5, #3
 80171e2:	3508      	adds	r5, #8
 80171e4:	2d0c      	cmp	r5, #12
 80171e6:	bf38      	it	cc
 80171e8:	250c      	movcc	r5, #12
 80171ea:	2d00      	cmp	r5, #0
 80171ec:	4606      	mov	r6, r0
 80171ee:	db01      	blt.n	80171f4 <_malloc_r+0x1c>
 80171f0:	42a9      	cmp	r1, r5
 80171f2:	d904      	bls.n	80171fe <_malloc_r+0x26>
 80171f4:	230c      	movs	r3, #12
 80171f6:	6033      	str	r3, [r6, #0]
 80171f8:	2000      	movs	r0, #0
 80171fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80172d4 <_malloc_r+0xfc>
 8017202:	f000 fc0b 	bl	8017a1c <__malloc_lock>
 8017206:	f8d8 3000 	ldr.w	r3, [r8]
 801720a:	461c      	mov	r4, r3
 801720c:	bb44      	cbnz	r4, 8017260 <_malloc_r+0x88>
 801720e:	4629      	mov	r1, r5
 8017210:	4630      	mov	r0, r6
 8017212:	f7ff ffbf 	bl	8017194 <sbrk_aligned>
 8017216:	1c43      	adds	r3, r0, #1
 8017218:	4604      	mov	r4, r0
 801721a:	d158      	bne.n	80172ce <_malloc_r+0xf6>
 801721c:	f8d8 4000 	ldr.w	r4, [r8]
 8017220:	4627      	mov	r7, r4
 8017222:	2f00      	cmp	r7, #0
 8017224:	d143      	bne.n	80172ae <_malloc_r+0xd6>
 8017226:	2c00      	cmp	r4, #0
 8017228:	d04b      	beq.n	80172c2 <_malloc_r+0xea>
 801722a:	6823      	ldr	r3, [r4, #0]
 801722c:	4639      	mov	r1, r7
 801722e:	4630      	mov	r0, r6
 8017230:	eb04 0903 	add.w	r9, r4, r3
 8017234:	f001 fcae 	bl	8018b94 <_sbrk_r>
 8017238:	4581      	cmp	r9, r0
 801723a:	d142      	bne.n	80172c2 <_malloc_r+0xea>
 801723c:	6821      	ldr	r1, [r4, #0]
 801723e:	1a6d      	subs	r5, r5, r1
 8017240:	4629      	mov	r1, r5
 8017242:	4630      	mov	r0, r6
 8017244:	f7ff ffa6 	bl	8017194 <sbrk_aligned>
 8017248:	3001      	adds	r0, #1
 801724a:	d03a      	beq.n	80172c2 <_malloc_r+0xea>
 801724c:	6823      	ldr	r3, [r4, #0]
 801724e:	442b      	add	r3, r5
 8017250:	6023      	str	r3, [r4, #0]
 8017252:	f8d8 3000 	ldr.w	r3, [r8]
 8017256:	685a      	ldr	r2, [r3, #4]
 8017258:	bb62      	cbnz	r2, 80172b4 <_malloc_r+0xdc>
 801725a:	f8c8 7000 	str.w	r7, [r8]
 801725e:	e00f      	b.n	8017280 <_malloc_r+0xa8>
 8017260:	6822      	ldr	r2, [r4, #0]
 8017262:	1b52      	subs	r2, r2, r5
 8017264:	d420      	bmi.n	80172a8 <_malloc_r+0xd0>
 8017266:	2a0b      	cmp	r2, #11
 8017268:	d917      	bls.n	801729a <_malloc_r+0xc2>
 801726a:	1961      	adds	r1, r4, r5
 801726c:	42a3      	cmp	r3, r4
 801726e:	6025      	str	r5, [r4, #0]
 8017270:	bf18      	it	ne
 8017272:	6059      	strne	r1, [r3, #4]
 8017274:	6863      	ldr	r3, [r4, #4]
 8017276:	bf08      	it	eq
 8017278:	f8c8 1000 	streq.w	r1, [r8]
 801727c:	5162      	str	r2, [r4, r5]
 801727e:	604b      	str	r3, [r1, #4]
 8017280:	4630      	mov	r0, r6
 8017282:	f000 fbd1 	bl	8017a28 <__malloc_unlock>
 8017286:	f104 000b 	add.w	r0, r4, #11
 801728a:	1d23      	adds	r3, r4, #4
 801728c:	f020 0007 	bic.w	r0, r0, #7
 8017290:	1ac2      	subs	r2, r0, r3
 8017292:	bf1c      	itt	ne
 8017294:	1a1b      	subne	r3, r3, r0
 8017296:	50a3      	strne	r3, [r4, r2]
 8017298:	e7af      	b.n	80171fa <_malloc_r+0x22>
 801729a:	6862      	ldr	r2, [r4, #4]
 801729c:	42a3      	cmp	r3, r4
 801729e:	bf0c      	ite	eq
 80172a0:	f8c8 2000 	streq.w	r2, [r8]
 80172a4:	605a      	strne	r2, [r3, #4]
 80172a6:	e7eb      	b.n	8017280 <_malloc_r+0xa8>
 80172a8:	4623      	mov	r3, r4
 80172aa:	6864      	ldr	r4, [r4, #4]
 80172ac:	e7ae      	b.n	801720c <_malloc_r+0x34>
 80172ae:	463c      	mov	r4, r7
 80172b0:	687f      	ldr	r7, [r7, #4]
 80172b2:	e7b6      	b.n	8017222 <_malloc_r+0x4a>
 80172b4:	461a      	mov	r2, r3
 80172b6:	685b      	ldr	r3, [r3, #4]
 80172b8:	42a3      	cmp	r3, r4
 80172ba:	d1fb      	bne.n	80172b4 <_malloc_r+0xdc>
 80172bc:	2300      	movs	r3, #0
 80172be:	6053      	str	r3, [r2, #4]
 80172c0:	e7de      	b.n	8017280 <_malloc_r+0xa8>
 80172c2:	230c      	movs	r3, #12
 80172c4:	6033      	str	r3, [r6, #0]
 80172c6:	4630      	mov	r0, r6
 80172c8:	f000 fbae 	bl	8017a28 <__malloc_unlock>
 80172cc:	e794      	b.n	80171f8 <_malloc_r+0x20>
 80172ce:	6005      	str	r5, [r0, #0]
 80172d0:	e7d6      	b.n	8017280 <_malloc_r+0xa8>
 80172d2:	bf00      	nop
 80172d4:	200077ec 	.word	0x200077ec

080172d8 <_printf_common>:
 80172d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172dc:	4616      	mov	r6, r2
 80172de:	4698      	mov	r8, r3
 80172e0:	688a      	ldr	r2, [r1, #8]
 80172e2:	690b      	ldr	r3, [r1, #16]
 80172e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80172e8:	4293      	cmp	r3, r2
 80172ea:	bfb8      	it	lt
 80172ec:	4613      	movlt	r3, r2
 80172ee:	6033      	str	r3, [r6, #0]
 80172f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80172f4:	4607      	mov	r7, r0
 80172f6:	460c      	mov	r4, r1
 80172f8:	b10a      	cbz	r2, 80172fe <_printf_common+0x26>
 80172fa:	3301      	adds	r3, #1
 80172fc:	6033      	str	r3, [r6, #0]
 80172fe:	6823      	ldr	r3, [r4, #0]
 8017300:	0699      	lsls	r1, r3, #26
 8017302:	bf42      	ittt	mi
 8017304:	6833      	ldrmi	r3, [r6, #0]
 8017306:	3302      	addmi	r3, #2
 8017308:	6033      	strmi	r3, [r6, #0]
 801730a:	6825      	ldr	r5, [r4, #0]
 801730c:	f015 0506 	ands.w	r5, r5, #6
 8017310:	d106      	bne.n	8017320 <_printf_common+0x48>
 8017312:	f104 0a19 	add.w	sl, r4, #25
 8017316:	68e3      	ldr	r3, [r4, #12]
 8017318:	6832      	ldr	r2, [r6, #0]
 801731a:	1a9b      	subs	r3, r3, r2
 801731c:	42ab      	cmp	r3, r5
 801731e:	dc26      	bgt.n	801736e <_printf_common+0x96>
 8017320:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017324:	6822      	ldr	r2, [r4, #0]
 8017326:	3b00      	subs	r3, #0
 8017328:	bf18      	it	ne
 801732a:	2301      	movne	r3, #1
 801732c:	0692      	lsls	r2, r2, #26
 801732e:	d42b      	bmi.n	8017388 <_printf_common+0xb0>
 8017330:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017334:	4641      	mov	r1, r8
 8017336:	4638      	mov	r0, r7
 8017338:	47c8      	blx	r9
 801733a:	3001      	adds	r0, #1
 801733c:	d01e      	beq.n	801737c <_printf_common+0xa4>
 801733e:	6823      	ldr	r3, [r4, #0]
 8017340:	6922      	ldr	r2, [r4, #16]
 8017342:	f003 0306 	and.w	r3, r3, #6
 8017346:	2b04      	cmp	r3, #4
 8017348:	bf02      	ittt	eq
 801734a:	68e5      	ldreq	r5, [r4, #12]
 801734c:	6833      	ldreq	r3, [r6, #0]
 801734e:	1aed      	subeq	r5, r5, r3
 8017350:	68a3      	ldr	r3, [r4, #8]
 8017352:	bf0c      	ite	eq
 8017354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017358:	2500      	movne	r5, #0
 801735a:	4293      	cmp	r3, r2
 801735c:	bfc4      	itt	gt
 801735e:	1a9b      	subgt	r3, r3, r2
 8017360:	18ed      	addgt	r5, r5, r3
 8017362:	2600      	movs	r6, #0
 8017364:	341a      	adds	r4, #26
 8017366:	42b5      	cmp	r5, r6
 8017368:	d11a      	bne.n	80173a0 <_printf_common+0xc8>
 801736a:	2000      	movs	r0, #0
 801736c:	e008      	b.n	8017380 <_printf_common+0xa8>
 801736e:	2301      	movs	r3, #1
 8017370:	4652      	mov	r2, sl
 8017372:	4641      	mov	r1, r8
 8017374:	4638      	mov	r0, r7
 8017376:	47c8      	blx	r9
 8017378:	3001      	adds	r0, #1
 801737a:	d103      	bne.n	8017384 <_printf_common+0xac>
 801737c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017384:	3501      	adds	r5, #1
 8017386:	e7c6      	b.n	8017316 <_printf_common+0x3e>
 8017388:	18e1      	adds	r1, r4, r3
 801738a:	1c5a      	adds	r2, r3, #1
 801738c:	2030      	movs	r0, #48	@ 0x30
 801738e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017392:	4422      	add	r2, r4
 8017394:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801739c:	3302      	adds	r3, #2
 801739e:	e7c7      	b.n	8017330 <_printf_common+0x58>
 80173a0:	2301      	movs	r3, #1
 80173a2:	4622      	mov	r2, r4
 80173a4:	4641      	mov	r1, r8
 80173a6:	4638      	mov	r0, r7
 80173a8:	47c8      	blx	r9
 80173aa:	3001      	adds	r0, #1
 80173ac:	d0e6      	beq.n	801737c <_printf_common+0xa4>
 80173ae:	3601      	adds	r6, #1
 80173b0:	e7d9      	b.n	8017366 <_printf_common+0x8e>
	...

080173b4 <_printf_i>:
 80173b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80173b8:	7e0f      	ldrb	r7, [r1, #24]
 80173ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80173bc:	2f78      	cmp	r7, #120	@ 0x78
 80173be:	4691      	mov	r9, r2
 80173c0:	4680      	mov	r8, r0
 80173c2:	460c      	mov	r4, r1
 80173c4:	469a      	mov	sl, r3
 80173c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80173ca:	d807      	bhi.n	80173dc <_printf_i+0x28>
 80173cc:	2f62      	cmp	r7, #98	@ 0x62
 80173ce:	d80a      	bhi.n	80173e6 <_printf_i+0x32>
 80173d0:	2f00      	cmp	r7, #0
 80173d2:	f000 80d2 	beq.w	801757a <_printf_i+0x1c6>
 80173d6:	2f58      	cmp	r7, #88	@ 0x58
 80173d8:	f000 80b9 	beq.w	801754e <_printf_i+0x19a>
 80173dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80173e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80173e4:	e03a      	b.n	801745c <_printf_i+0xa8>
 80173e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80173ea:	2b15      	cmp	r3, #21
 80173ec:	d8f6      	bhi.n	80173dc <_printf_i+0x28>
 80173ee:	a101      	add	r1, pc, #4	@ (adr r1, 80173f4 <_printf_i+0x40>)
 80173f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80173f4:	0801744d 	.word	0x0801744d
 80173f8:	08017461 	.word	0x08017461
 80173fc:	080173dd 	.word	0x080173dd
 8017400:	080173dd 	.word	0x080173dd
 8017404:	080173dd 	.word	0x080173dd
 8017408:	080173dd 	.word	0x080173dd
 801740c:	08017461 	.word	0x08017461
 8017410:	080173dd 	.word	0x080173dd
 8017414:	080173dd 	.word	0x080173dd
 8017418:	080173dd 	.word	0x080173dd
 801741c:	080173dd 	.word	0x080173dd
 8017420:	08017561 	.word	0x08017561
 8017424:	0801748b 	.word	0x0801748b
 8017428:	0801751b 	.word	0x0801751b
 801742c:	080173dd 	.word	0x080173dd
 8017430:	080173dd 	.word	0x080173dd
 8017434:	08017583 	.word	0x08017583
 8017438:	080173dd 	.word	0x080173dd
 801743c:	0801748b 	.word	0x0801748b
 8017440:	080173dd 	.word	0x080173dd
 8017444:	080173dd 	.word	0x080173dd
 8017448:	08017523 	.word	0x08017523
 801744c:	6833      	ldr	r3, [r6, #0]
 801744e:	1d1a      	adds	r2, r3, #4
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	6032      	str	r2, [r6, #0]
 8017454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017458:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801745c:	2301      	movs	r3, #1
 801745e:	e09d      	b.n	801759c <_printf_i+0x1e8>
 8017460:	6833      	ldr	r3, [r6, #0]
 8017462:	6820      	ldr	r0, [r4, #0]
 8017464:	1d19      	adds	r1, r3, #4
 8017466:	6031      	str	r1, [r6, #0]
 8017468:	0606      	lsls	r6, r0, #24
 801746a:	d501      	bpl.n	8017470 <_printf_i+0xbc>
 801746c:	681d      	ldr	r5, [r3, #0]
 801746e:	e003      	b.n	8017478 <_printf_i+0xc4>
 8017470:	0645      	lsls	r5, r0, #25
 8017472:	d5fb      	bpl.n	801746c <_printf_i+0xb8>
 8017474:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017478:	2d00      	cmp	r5, #0
 801747a:	da03      	bge.n	8017484 <_printf_i+0xd0>
 801747c:	232d      	movs	r3, #45	@ 0x2d
 801747e:	426d      	negs	r5, r5
 8017480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017484:	4859      	ldr	r0, [pc, #356]	@ (80175ec <_printf_i+0x238>)
 8017486:	230a      	movs	r3, #10
 8017488:	e011      	b.n	80174ae <_printf_i+0xfa>
 801748a:	6821      	ldr	r1, [r4, #0]
 801748c:	6833      	ldr	r3, [r6, #0]
 801748e:	0608      	lsls	r0, r1, #24
 8017490:	f853 5b04 	ldr.w	r5, [r3], #4
 8017494:	d402      	bmi.n	801749c <_printf_i+0xe8>
 8017496:	0649      	lsls	r1, r1, #25
 8017498:	bf48      	it	mi
 801749a:	b2ad      	uxthmi	r5, r5
 801749c:	2f6f      	cmp	r7, #111	@ 0x6f
 801749e:	4853      	ldr	r0, [pc, #332]	@ (80175ec <_printf_i+0x238>)
 80174a0:	6033      	str	r3, [r6, #0]
 80174a2:	bf14      	ite	ne
 80174a4:	230a      	movne	r3, #10
 80174a6:	2308      	moveq	r3, #8
 80174a8:	2100      	movs	r1, #0
 80174aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80174ae:	6866      	ldr	r6, [r4, #4]
 80174b0:	60a6      	str	r6, [r4, #8]
 80174b2:	2e00      	cmp	r6, #0
 80174b4:	bfa2      	ittt	ge
 80174b6:	6821      	ldrge	r1, [r4, #0]
 80174b8:	f021 0104 	bicge.w	r1, r1, #4
 80174bc:	6021      	strge	r1, [r4, #0]
 80174be:	b90d      	cbnz	r5, 80174c4 <_printf_i+0x110>
 80174c0:	2e00      	cmp	r6, #0
 80174c2:	d04b      	beq.n	801755c <_printf_i+0x1a8>
 80174c4:	4616      	mov	r6, r2
 80174c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80174ca:	fb03 5711 	mls	r7, r3, r1, r5
 80174ce:	5dc7      	ldrb	r7, [r0, r7]
 80174d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80174d4:	462f      	mov	r7, r5
 80174d6:	42bb      	cmp	r3, r7
 80174d8:	460d      	mov	r5, r1
 80174da:	d9f4      	bls.n	80174c6 <_printf_i+0x112>
 80174dc:	2b08      	cmp	r3, #8
 80174de:	d10b      	bne.n	80174f8 <_printf_i+0x144>
 80174e0:	6823      	ldr	r3, [r4, #0]
 80174e2:	07df      	lsls	r7, r3, #31
 80174e4:	d508      	bpl.n	80174f8 <_printf_i+0x144>
 80174e6:	6923      	ldr	r3, [r4, #16]
 80174e8:	6861      	ldr	r1, [r4, #4]
 80174ea:	4299      	cmp	r1, r3
 80174ec:	bfde      	ittt	le
 80174ee:	2330      	movle	r3, #48	@ 0x30
 80174f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80174f4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80174f8:	1b92      	subs	r2, r2, r6
 80174fa:	6122      	str	r2, [r4, #16]
 80174fc:	f8cd a000 	str.w	sl, [sp]
 8017500:	464b      	mov	r3, r9
 8017502:	aa03      	add	r2, sp, #12
 8017504:	4621      	mov	r1, r4
 8017506:	4640      	mov	r0, r8
 8017508:	f7ff fee6 	bl	80172d8 <_printf_common>
 801750c:	3001      	adds	r0, #1
 801750e:	d14a      	bne.n	80175a6 <_printf_i+0x1f2>
 8017510:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017514:	b004      	add	sp, #16
 8017516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801751a:	6823      	ldr	r3, [r4, #0]
 801751c:	f043 0320 	orr.w	r3, r3, #32
 8017520:	6023      	str	r3, [r4, #0]
 8017522:	4833      	ldr	r0, [pc, #204]	@ (80175f0 <_printf_i+0x23c>)
 8017524:	2778      	movs	r7, #120	@ 0x78
 8017526:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801752a:	6823      	ldr	r3, [r4, #0]
 801752c:	6831      	ldr	r1, [r6, #0]
 801752e:	061f      	lsls	r7, r3, #24
 8017530:	f851 5b04 	ldr.w	r5, [r1], #4
 8017534:	d402      	bmi.n	801753c <_printf_i+0x188>
 8017536:	065f      	lsls	r7, r3, #25
 8017538:	bf48      	it	mi
 801753a:	b2ad      	uxthmi	r5, r5
 801753c:	6031      	str	r1, [r6, #0]
 801753e:	07d9      	lsls	r1, r3, #31
 8017540:	bf44      	itt	mi
 8017542:	f043 0320 	orrmi.w	r3, r3, #32
 8017546:	6023      	strmi	r3, [r4, #0]
 8017548:	b11d      	cbz	r5, 8017552 <_printf_i+0x19e>
 801754a:	2310      	movs	r3, #16
 801754c:	e7ac      	b.n	80174a8 <_printf_i+0xf4>
 801754e:	4827      	ldr	r0, [pc, #156]	@ (80175ec <_printf_i+0x238>)
 8017550:	e7e9      	b.n	8017526 <_printf_i+0x172>
 8017552:	6823      	ldr	r3, [r4, #0]
 8017554:	f023 0320 	bic.w	r3, r3, #32
 8017558:	6023      	str	r3, [r4, #0]
 801755a:	e7f6      	b.n	801754a <_printf_i+0x196>
 801755c:	4616      	mov	r6, r2
 801755e:	e7bd      	b.n	80174dc <_printf_i+0x128>
 8017560:	6833      	ldr	r3, [r6, #0]
 8017562:	6825      	ldr	r5, [r4, #0]
 8017564:	6961      	ldr	r1, [r4, #20]
 8017566:	1d18      	adds	r0, r3, #4
 8017568:	6030      	str	r0, [r6, #0]
 801756a:	062e      	lsls	r6, r5, #24
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	d501      	bpl.n	8017574 <_printf_i+0x1c0>
 8017570:	6019      	str	r1, [r3, #0]
 8017572:	e002      	b.n	801757a <_printf_i+0x1c6>
 8017574:	0668      	lsls	r0, r5, #25
 8017576:	d5fb      	bpl.n	8017570 <_printf_i+0x1bc>
 8017578:	8019      	strh	r1, [r3, #0]
 801757a:	2300      	movs	r3, #0
 801757c:	6123      	str	r3, [r4, #16]
 801757e:	4616      	mov	r6, r2
 8017580:	e7bc      	b.n	80174fc <_printf_i+0x148>
 8017582:	6833      	ldr	r3, [r6, #0]
 8017584:	1d1a      	adds	r2, r3, #4
 8017586:	6032      	str	r2, [r6, #0]
 8017588:	681e      	ldr	r6, [r3, #0]
 801758a:	6862      	ldr	r2, [r4, #4]
 801758c:	2100      	movs	r1, #0
 801758e:	4630      	mov	r0, r6
 8017590:	f7eb f846 	bl	8002620 <memchr>
 8017594:	b108      	cbz	r0, 801759a <_printf_i+0x1e6>
 8017596:	1b80      	subs	r0, r0, r6
 8017598:	6060      	str	r0, [r4, #4]
 801759a:	6863      	ldr	r3, [r4, #4]
 801759c:	6123      	str	r3, [r4, #16]
 801759e:	2300      	movs	r3, #0
 80175a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80175a4:	e7aa      	b.n	80174fc <_printf_i+0x148>
 80175a6:	6923      	ldr	r3, [r4, #16]
 80175a8:	4632      	mov	r2, r6
 80175aa:	4649      	mov	r1, r9
 80175ac:	4640      	mov	r0, r8
 80175ae:	47d0      	blx	sl
 80175b0:	3001      	adds	r0, #1
 80175b2:	d0ad      	beq.n	8017510 <_printf_i+0x15c>
 80175b4:	6823      	ldr	r3, [r4, #0]
 80175b6:	079b      	lsls	r3, r3, #30
 80175b8:	d413      	bmi.n	80175e2 <_printf_i+0x22e>
 80175ba:	68e0      	ldr	r0, [r4, #12]
 80175bc:	9b03      	ldr	r3, [sp, #12]
 80175be:	4298      	cmp	r0, r3
 80175c0:	bfb8      	it	lt
 80175c2:	4618      	movlt	r0, r3
 80175c4:	e7a6      	b.n	8017514 <_printf_i+0x160>
 80175c6:	2301      	movs	r3, #1
 80175c8:	4632      	mov	r2, r6
 80175ca:	4649      	mov	r1, r9
 80175cc:	4640      	mov	r0, r8
 80175ce:	47d0      	blx	sl
 80175d0:	3001      	adds	r0, #1
 80175d2:	d09d      	beq.n	8017510 <_printf_i+0x15c>
 80175d4:	3501      	adds	r5, #1
 80175d6:	68e3      	ldr	r3, [r4, #12]
 80175d8:	9903      	ldr	r1, [sp, #12]
 80175da:	1a5b      	subs	r3, r3, r1
 80175dc:	42ab      	cmp	r3, r5
 80175de:	dcf2      	bgt.n	80175c6 <_printf_i+0x212>
 80175e0:	e7eb      	b.n	80175ba <_printf_i+0x206>
 80175e2:	2500      	movs	r5, #0
 80175e4:	f104 0619 	add.w	r6, r4, #25
 80175e8:	e7f5      	b.n	80175d6 <_printf_i+0x222>
 80175ea:	bf00      	nop
 80175ec:	0801c3ea 	.word	0x0801c3ea
 80175f0:	0801c3fb 	.word	0x0801c3fb

080175f4 <_scanf_float>:
 80175f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175f8:	b087      	sub	sp, #28
 80175fa:	4617      	mov	r7, r2
 80175fc:	9303      	str	r3, [sp, #12]
 80175fe:	688b      	ldr	r3, [r1, #8]
 8017600:	1e5a      	subs	r2, r3, #1
 8017602:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017606:	bf81      	itttt	hi
 8017608:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801760c:	eb03 0b05 	addhi.w	fp, r3, r5
 8017610:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017614:	608b      	strhi	r3, [r1, #8]
 8017616:	680b      	ldr	r3, [r1, #0]
 8017618:	460a      	mov	r2, r1
 801761a:	f04f 0500 	mov.w	r5, #0
 801761e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8017622:	f842 3b1c 	str.w	r3, [r2], #28
 8017626:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801762a:	4680      	mov	r8, r0
 801762c:	460c      	mov	r4, r1
 801762e:	bf98      	it	ls
 8017630:	f04f 0b00 	movls.w	fp, #0
 8017634:	9201      	str	r2, [sp, #4]
 8017636:	4616      	mov	r6, r2
 8017638:	46aa      	mov	sl, r5
 801763a:	46a9      	mov	r9, r5
 801763c:	9502      	str	r5, [sp, #8]
 801763e:	68a2      	ldr	r2, [r4, #8]
 8017640:	b152      	cbz	r2, 8017658 <_scanf_float+0x64>
 8017642:	683b      	ldr	r3, [r7, #0]
 8017644:	781b      	ldrb	r3, [r3, #0]
 8017646:	2b4e      	cmp	r3, #78	@ 0x4e
 8017648:	d864      	bhi.n	8017714 <_scanf_float+0x120>
 801764a:	2b40      	cmp	r3, #64	@ 0x40
 801764c:	d83c      	bhi.n	80176c8 <_scanf_float+0xd4>
 801764e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8017652:	b2c8      	uxtb	r0, r1
 8017654:	280e      	cmp	r0, #14
 8017656:	d93a      	bls.n	80176ce <_scanf_float+0xda>
 8017658:	f1b9 0f00 	cmp.w	r9, #0
 801765c:	d003      	beq.n	8017666 <_scanf_float+0x72>
 801765e:	6823      	ldr	r3, [r4, #0]
 8017660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017664:	6023      	str	r3, [r4, #0]
 8017666:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801766a:	f1ba 0f01 	cmp.w	sl, #1
 801766e:	f200 8117 	bhi.w	80178a0 <_scanf_float+0x2ac>
 8017672:	9b01      	ldr	r3, [sp, #4]
 8017674:	429e      	cmp	r6, r3
 8017676:	f200 8108 	bhi.w	801788a <_scanf_float+0x296>
 801767a:	2001      	movs	r0, #1
 801767c:	b007      	add	sp, #28
 801767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017682:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8017686:	2a0d      	cmp	r2, #13
 8017688:	d8e6      	bhi.n	8017658 <_scanf_float+0x64>
 801768a:	a101      	add	r1, pc, #4	@ (adr r1, 8017690 <_scanf_float+0x9c>)
 801768c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017690:	080177d7 	.word	0x080177d7
 8017694:	08017659 	.word	0x08017659
 8017698:	08017659 	.word	0x08017659
 801769c:	08017659 	.word	0x08017659
 80176a0:	08017837 	.word	0x08017837
 80176a4:	0801780f 	.word	0x0801780f
 80176a8:	08017659 	.word	0x08017659
 80176ac:	08017659 	.word	0x08017659
 80176b0:	080177e5 	.word	0x080177e5
 80176b4:	08017659 	.word	0x08017659
 80176b8:	08017659 	.word	0x08017659
 80176bc:	08017659 	.word	0x08017659
 80176c0:	08017659 	.word	0x08017659
 80176c4:	0801779d 	.word	0x0801779d
 80176c8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80176cc:	e7db      	b.n	8017686 <_scanf_float+0x92>
 80176ce:	290e      	cmp	r1, #14
 80176d0:	d8c2      	bhi.n	8017658 <_scanf_float+0x64>
 80176d2:	a001      	add	r0, pc, #4	@ (adr r0, 80176d8 <_scanf_float+0xe4>)
 80176d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80176d8:	0801778d 	.word	0x0801778d
 80176dc:	08017659 	.word	0x08017659
 80176e0:	0801778d 	.word	0x0801778d
 80176e4:	08017823 	.word	0x08017823
 80176e8:	08017659 	.word	0x08017659
 80176ec:	08017735 	.word	0x08017735
 80176f0:	08017773 	.word	0x08017773
 80176f4:	08017773 	.word	0x08017773
 80176f8:	08017773 	.word	0x08017773
 80176fc:	08017773 	.word	0x08017773
 8017700:	08017773 	.word	0x08017773
 8017704:	08017773 	.word	0x08017773
 8017708:	08017773 	.word	0x08017773
 801770c:	08017773 	.word	0x08017773
 8017710:	08017773 	.word	0x08017773
 8017714:	2b6e      	cmp	r3, #110	@ 0x6e
 8017716:	d809      	bhi.n	801772c <_scanf_float+0x138>
 8017718:	2b60      	cmp	r3, #96	@ 0x60
 801771a:	d8b2      	bhi.n	8017682 <_scanf_float+0x8e>
 801771c:	2b54      	cmp	r3, #84	@ 0x54
 801771e:	d07b      	beq.n	8017818 <_scanf_float+0x224>
 8017720:	2b59      	cmp	r3, #89	@ 0x59
 8017722:	d199      	bne.n	8017658 <_scanf_float+0x64>
 8017724:	2d07      	cmp	r5, #7
 8017726:	d197      	bne.n	8017658 <_scanf_float+0x64>
 8017728:	2508      	movs	r5, #8
 801772a:	e02c      	b.n	8017786 <_scanf_float+0x192>
 801772c:	2b74      	cmp	r3, #116	@ 0x74
 801772e:	d073      	beq.n	8017818 <_scanf_float+0x224>
 8017730:	2b79      	cmp	r3, #121	@ 0x79
 8017732:	e7f6      	b.n	8017722 <_scanf_float+0x12e>
 8017734:	6821      	ldr	r1, [r4, #0]
 8017736:	05c8      	lsls	r0, r1, #23
 8017738:	d51b      	bpl.n	8017772 <_scanf_float+0x17e>
 801773a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801773e:	6021      	str	r1, [r4, #0]
 8017740:	f109 0901 	add.w	r9, r9, #1
 8017744:	f1bb 0f00 	cmp.w	fp, #0
 8017748:	d003      	beq.n	8017752 <_scanf_float+0x15e>
 801774a:	3201      	adds	r2, #1
 801774c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8017750:	60a2      	str	r2, [r4, #8]
 8017752:	68a3      	ldr	r3, [r4, #8]
 8017754:	3b01      	subs	r3, #1
 8017756:	60a3      	str	r3, [r4, #8]
 8017758:	6923      	ldr	r3, [r4, #16]
 801775a:	3301      	adds	r3, #1
 801775c:	6123      	str	r3, [r4, #16]
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	3b01      	subs	r3, #1
 8017762:	2b00      	cmp	r3, #0
 8017764:	607b      	str	r3, [r7, #4]
 8017766:	f340 8087 	ble.w	8017878 <_scanf_float+0x284>
 801776a:	683b      	ldr	r3, [r7, #0]
 801776c:	3301      	adds	r3, #1
 801776e:	603b      	str	r3, [r7, #0]
 8017770:	e765      	b.n	801763e <_scanf_float+0x4a>
 8017772:	eb1a 0105 	adds.w	r1, sl, r5
 8017776:	f47f af6f 	bne.w	8017658 <_scanf_float+0x64>
 801777a:	6822      	ldr	r2, [r4, #0]
 801777c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8017780:	6022      	str	r2, [r4, #0]
 8017782:	460d      	mov	r5, r1
 8017784:	468a      	mov	sl, r1
 8017786:	f806 3b01 	strb.w	r3, [r6], #1
 801778a:	e7e2      	b.n	8017752 <_scanf_float+0x15e>
 801778c:	6822      	ldr	r2, [r4, #0]
 801778e:	0610      	lsls	r0, r2, #24
 8017790:	f57f af62 	bpl.w	8017658 <_scanf_float+0x64>
 8017794:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8017798:	6022      	str	r2, [r4, #0]
 801779a:	e7f4      	b.n	8017786 <_scanf_float+0x192>
 801779c:	f1ba 0f00 	cmp.w	sl, #0
 80177a0:	d10e      	bne.n	80177c0 <_scanf_float+0x1cc>
 80177a2:	f1b9 0f00 	cmp.w	r9, #0
 80177a6:	d10e      	bne.n	80177c6 <_scanf_float+0x1d2>
 80177a8:	6822      	ldr	r2, [r4, #0]
 80177aa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80177ae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80177b2:	d108      	bne.n	80177c6 <_scanf_float+0x1d2>
 80177b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80177b8:	6022      	str	r2, [r4, #0]
 80177ba:	f04f 0a01 	mov.w	sl, #1
 80177be:	e7e2      	b.n	8017786 <_scanf_float+0x192>
 80177c0:	f1ba 0f02 	cmp.w	sl, #2
 80177c4:	d055      	beq.n	8017872 <_scanf_float+0x27e>
 80177c6:	2d01      	cmp	r5, #1
 80177c8:	d002      	beq.n	80177d0 <_scanf_float+0x1dc>
 80177ca:	2d04      	cmp	r5, #4
 80177cc:	f47f af44 	bne.w	8017658 <_scanf_float+0x64>
 80177d0:	3501      	adds	r5, #1
 80177d2:	b2ed      	uxtb	r5, r5
 80177d4:	e7d7      	b.n	8017786 <_scanf_float+0x192>
 80177d6:	f1ba 0f01 	cmp.w	sl, #1
 80177da:	f47f af3d 	bne.w	8017658 <_scanf_float+0x64>
 80177de:	f04f 0a02 	mov.w	sl, #2
 80177e2:	e7d0      	b.n	8017786 <_scanf_float+0x192>
 80177e4:	b97d      	cbnz	r5, 8017806 <_scanf_float+0x212>
 80177e6:	f1b9 0f00 	cmp.w	r9, #0
 80177ea:	f47f af38 	bne.w	801765e <_scanf_float+0x6a>
 80177ee:	6822      	ldr	r2, [r4, #0]
 80177f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80177f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80177f8:	f040 8108 	bne.w	8017a0c <_scanf_float+0x418>
 80177fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8017800:	6022      	str	r2, [r4, #0]
 8017802:	2501      	movs	r5, #1
 8017804:	e7bf      	b.n	8017786 <_scanf_float+0x192>
 8017806:	2d03      	cmp	r5, #3
 8017808:	d0e2      	beq.n	80177d0 <_scanf_float+0x1dc>
 801780a:	2d05      	cmp	r5, #5
 801780c:	e7de      	b.n	80177cc <_scanf_float+0x1d8>
 801780e:	2d02      	cmp	r5, #2
 8017810:	f47f af22 	bne.w	8017658 <_scanf_float+0x64>
 8017814:	2503      	movs	r5, #3
 8017816:	e7b6      	b.n	8017786 <_scanf_float+0x192>
 8017818:	2d06      	cmp	r5, #6
 801781a:	f47f af1d 	bne.w	8017658 <_scanf_float+0x64>
 801781e:	2507      	movs	r5, #7
 8017820:	e7b1      	b.n	8017786 <_scanf_float+0x192>
 8017822:	6822      	ldr	r2, [r4, #0]
 8017824:	0591      	lsls	r1, r2, #22
 8017826:	f57f af17 	bpl.w	8017658 <_scanf_float+0x64>
 801782a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801782e:	6022      	str	r2, [r4, #0]
 8017830:	f8cd 9008 	str.w	r9, [sp, #8]
 8017834:	e7a7      	b.n	8017786 <_scanf_float+0x192>
 8017836:	6822      	ldr	r2, [r4, #0]
 8017838:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801783c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017840:	d006      	beq.n	8017850 <_scanf_float+0x25c>
 8017842:	0550      	lsls	r0, r2, #21
 8017844:	f57f af08 	bpl.w	8017658 <_scanf_float+0x64>
 8017848:	f1b9 0f00 	cmp.w	r9, #0
 801784c:	f000 80de 	beq.w	8017a0c <_scanf_float+0x418>
 8017850:	0591      	lsls	r1, r2, #22
 8017852:	bf58      	it	pl
 8017854:	9902      	ldrpl	r1, [sp, #8]
 8017856:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801785a:	bf58      	it	pl
 801785c:	eba9 0101 	subpl.w	r1, r9, r1
 8017860:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8017864:	bf58      	it	pl
 8017866:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801786a:	6022      	str	r2, [r4, #0]
 801786c:	f04f 0900 	mov.w	r9, #0
 8017870:	e789      	b.n	8017786 <_scanf_float+0x192>
 8017872:	f04f 0a03 	mov.w	sl, #3
 8017876:	e786      	b.n	8017786 <_scanf_float+0x192>
 8017878:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801787c:	4639      	mov	r1, r7
 801787e:	4640      	mov	r0, r8
 8017880:	4798      	blx	r3
 8017882:	2800      	cmp	r0, #0
 8017884:	f43f aedb 	beq.w	801763e <_scanf_float+0x4a>
 8017888:	e6e6      	b.n	8017658 <_scanf_float+0x64>
 801788a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801788e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017892:	463a      	mov	r2, r7
 8017894:	4640      	mov	r0, r8
 8017896:	4798      	blx	r3
 8017898:	6923      	ldr	r3, [r4, #16]
 801789a:	3b01      	subs	r3, #1
 801789c:	6123      	str	r3, [r4, #16]
 801789e:	e6e8      	b.n	8017672 <_scanf_float+0x7e>
 80178a0:	1e6b      	subs	r3, r5, #1
 80178a2:	2b06      	cmp	r3, #6
 80178a4:	d824      	bhi.n	80178f0 <_scanf_float+0x2fc>
 80178a6:	2d02      	cmp	r5, #2
 80178a8:	d836      	bhi.n	8017918 <_scanf_float+0x324>
 80178aa:	9b01      	ldr	r3, [sp, #4]
 80178ac:	429e      	cmp	r6, r3
 80178ae:	f67f aee4 	bls.w	801767a <_scanf_float+0x86>
 80178b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80178b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80178ba:	463a      	mov	r2, r7
 80178bc:	4640      	mov	r0, r8
 80178be:	4798      	blx	r3
 80178c0:	6923      	ldr	r3, [r4, #16]
 80178c2:	3b01      	subs	r3, #1
 80178c4:	6123      	str	r3, [r4, #16]
 80178c6:	e7f0      	b.n	80178aa <_scanf_float+0x2b6>
 80178c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80178cc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80178d0:	463a      	mov	r2, r7
 80178d2:	4640      	mov	r0, r8
 80178d4:	4798      	blx	r3
 80178d6:	6923      	ldr	r3, [r4, #16]
 80178d8:	3b01      	subs	r3, #1
 80178da:	6123      	str	r3, [r4, #16]
 80178dc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80178e0:	fa5f fa8a 	uxtb.w	sl, sl
 80178e4:	f1ba 0f02 	cmp.w	sl, #2
 80178e8:	d1ee      	bne.n	80178c8 <_scanf_float+0x2d4>
 80178ea:	3d03      	subs	r5, #3
 80178ec:	b2ed      	uxtb	r5, r5
 80178ee:	1b76      	subs	r6, r6, r5
 80178f0:	6823      	ldr	r3, [r4, #0]
 80178f2:	05da      	lsls	r2, r3, #23
 80178f4:	d530      	bpl.n	8017958 <_scanf_float+0x364>
 80178f6:	055b      	lsls	r3, r3, #21
 80178f8:	d511      	bpl.n	801791e <_scanf_float+0x32a>
 80178fa:	9b01      	ldr	r3, [sp, #4]
 80178fc:	429e      	cmp	r6, r3
 80178fe:	f67f aebc 	bls.w	801767a <_scanf_float+0x86>
 8017902:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017906:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801790a:	463a      	mov	r2, r7
 801790c:	4640      	mov	r0, r8
 801790e:	4798      	blx	r3
 8017910:	6923      	ldr	r3, [r4, #16]
 8017912:	3b01      	subs	r3, #1
 8017914:	6123      	str	r3, [r4, #16]
 8017916:	e7f0      	b.n	80178fa <_scanf_float+0x306>
 8017918:	46aa      	mov	sl, r5
 801791a:	46b3      	mov	fp, r6
 801791c:	e7de      	b.n	80178dc <_scanf_float+0x2e8>
 801791e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017922:	6923      	ldr	r3, [r4, #16]
 8017924:	2965      	cmp	r1, #101	@ 0x65
 8017926:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801792a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 801792e:	6123      	str	r3, [r4, #16]
 8017930:	d00c      	beq.n	801794c <_scanf_float+0x358>
 8017932:	2945      	cmp	r1, #69	@ 0x45
 8017934:	d00a      	beq.n	801794c <_scanf_float+0x358>
 8017936:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801793a:	463a      	mov	r2, r7
 801793c:	4640      	mov	r0, r8
 801793e:	4798      	blx	r3
 8017940:	6923      	ldr	r3, [r4, #16]
 8017942:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017946:	3b01      	subs	r3, #1
 8017948:	1eb5      	subs	r5, r6, #2
 801794a:	6123      	str	r3, [r4, #16]
 801794c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017950:	463a      	mov	r2, r7
 8017952:	4640      	mov	r0, r8
 8017954:	4798      	blx	r3
 8017956:	462e      	mov	r6, r5
 8017958:	6822      	ldr	r2, [r4, #0]
 801795a:	f012 0210 	ands.w	r2, r2, #16
 801795e:	d001      	beq.n	8017964 <_scanf_float+0x370>
 8017960:	2000      	movs	r0, #0
 8017962:	e68b      	b.n	801767c <_scanf_float+0x88>
 8017964:	7032      	strb	r2, [r6, #0]
 8017966:	6823      	ldr	r3, [r4, #0]
 8017968:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801796c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017970:	d11c      	bne.n	80179ac <_scanf_float+0x3b8>
 8017972:	9b02      	ldr	r3, [sp, #8]
 8017974:	454b      	cmp	r3, r9
 8017976:	eba3 0209 	sub.w	r2, r3, r9
 801797a:	d123      	bne.n	80179c4 <_scanf_float+0x3d0>
 801797c:	9901      	ldr	r1, [sp, #4]
 801797e:	2200      	movs	r2, #0
 8017980:	4640      	mov	r0, r8
 8017982:	f000 ff1d 	bl	80187c0 <_strtod_r>
 8017986:	9b03      	ldr	r3, [sp, #12]
 8017988:	6821      	ldr	r1, [r4, #0]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	f011 0f02 	tst.w	r1, #2
 8017990:	ec57 6b10 	vmov	r6, r7, d0
 8017994:	f103 0204 	add.w	r2, r3, #4
 8017998:	d01f      	beq.n	80179da <_scanf_float+0x3e6>
 801799a:	9903      	ldr	r1, [sp, #12]
 801799c:	600a      	str	r2, [r1, #0]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	e9c3 6700 	strd	r6, r7, [r3]
 80179a4:	68e3      	ldr	r3, [r4, #12]
 80179a6:	3301      	adds	r3, #1
 80179a8:	60e3      	str	r3, [r4, #12]
 80179aa:	e7d9      	b.n	8017960 <_scanf_float+0x36c>
 80179ac:	9b04      	ldr	r3, [sp, #16]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d0e4      	beq.n	801797c <_scanf_float+0x388>
 80179b2:	9905      	ldr	r1, [sp, #20]
 80179b4:	230a      	movs	r3, #10
 80179b6:	3101      	adds	r1, #1
 80179b8:	4640      	mov	r0, r8
 80179ba:	f000 ff81 	bl	80188c0 <_strtol_r>
 80179be:	9b04      	ldr	r3, [sp, #16]
 80179c0:	9e05      	ldr	r6, [sp, #20]
 80179c2:	1ac2      	subs	r2, r0, r3
 80179c4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80179c8:	429e      	cmp	r6, r3
 80179ca:	bf28      	it	cs
 80179cc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80179d0:	4910      	ldr	r1, [pc, #64]	@ (8017a14 <_scanf_float+0x420>)
 80179d2:	4630      	mov	r0, r6
 80179d4:	f000 f82e 	bl	8017a34 <siprintf>
 80179d8:	e7d0      	b.n	801797c <_scanf_float+0x388>
 80179da:	f011 0f04 	tst.w	r1, #4
 80179de:	9903      	ldr	r1, [sp, #12]
 80179e0:	600a      	str	r2, [r1, #0]
 80179e2:	d1dc      	bne.n	801799e <_scanf_float+0x3aa>
 80179e4:	681d      	ldr	r5, [r3, #0]
 80179e6:	4632      	mov	r2, r6
 80179e8:	463b      	mov	r3, r7
 80179ea:	4630      	mov	r0, r6
 80179ec:	4639      	mov	r1, r7
 80179ee:	f7eb facf 	bl	8002f90 <__aeabi_dcmpun>
 80179f2:	b128      	cbz	r0, 8017a00 <_scanf_float+0x40c>
 80179f4:	4808      	ldr	r0, [pc, #32]	@ (8017a18 <_scanf_float+0x424>)
 80179f6:	f001 f927 	bl	8018c48 <nanf>
 80179fa:	ed85 0a00 	vstr	s0, [r5]
 80179fe:	e7d1      	b.n	80179a4 <_scanf_float+0x3b0>
 8017a00:	4630      	mov	r0, r6
 8017a02:	4639      	mov	r1, r7
 8017a04:	f7eb fb22 	bl	800304c <__aeabi_d2f>
 8017a08:	6028      	str	r0, [r5, #0]
 8017a0a:	e7cb      	b.n	80179a4 <_scanf_float+0x3b0>
 8017a0c:	f04f 0900 	mov.w	r9, #0
 8017a10:	e629      	b.n	8017666 <_scanf_float+0x72>
 8017a12:	bf00      	nop
 8017a14:	0801c40c 	.word	0x0801c40c
 8017a18:	0801c61d 	.word	0x0801c61d

08017a1c <__malloc_lock>:
 8017a1c:	4801      	ldr	r0, [pc, #4]	@ (8017a24 <__malloc_lock+0x8>)
 8017a1e:	f001 b8f4 	b.w	8018c0a <__retarget_lock_acquire_recursive>
 8017a22:	bf00      	nop
 8017a24:	20007930 	.word	0x20007930

08017a28 <__malloc_unlock>:
 8017a28:	4801      	ldr	r0, [pc, #4]	@ (8017a30 <__malloc_unlock+0x8>)
 8017a2a:	f001 b8ef 	b.w	8018c0c <__retarget_lock_release_recursive>
 8017a2e:	bf00      	nop
 8017a30:	20007930 	.word	0x20007930

08017a34 <siprintf>:
 8017a34:	b40e      	push	{r1, r2, r3}
 8017a36:	b500      	push	{lr}
 8017a38:	b09c      	sub	sp, #112	@ 0x70
 8017a3a:	ab1d      	add	r3, sp, #116	@ 0x74
 8017a3c:	9002      	str	r0, [sp, #8]
 8017a3e:	9006      	str	r0, [sp, #24]
 8017a40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017a44:	4809      	ldr	r0, [pc, #36]	@ (8017a6c <siprintf+0x38>)
 8017a46:	9107      	str	r1, [sp, #28]
 8017a48:	9104      	str	r1, [sp, #16]
 8017a4a:	4909      	ldr	r1, [pc, #36]	@ (8017a70 <siprintf+0x3c>)
 8017a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a50:	9105      	str	r1, [sp, #20]
 8017a52:	6800      	ldr	r0, [r0, #0]
 8017a54:	9301      	str	r3, [sp, #4]
 8017a56:	a902      	add	r1, sp, #8
 8017a58:	f002 fb44 	bl	801a0e4 <_svfiprintf_r>
 8017a5c:	9b02      	ldr	r3, [sp, #8]
 8017a5e:	2200      	movs	r2, #0
 8017a60:	701a      	strb	r2, [r3, #0]
 8017a62:	b01c      	add	sp, #112	@ 0x70
 8017a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8017a68:	b003      	add	sp, #12
 8017a6a:	4770      	bx	lr
 8017a6c:	20000494 	.word	0x20000494
 8017a70:	ffff0208 	.word	0xffff0208

08017a74 <std>:
 8017a74:	2300      	movs	r3, #0
 8017a76:	b510      	push	{r4, lr}
 8017a78:	4604      	mov	r4, r0
 8017a7a:	e9c0 3300 	strd	r3, r3, [r0]
 8017a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017a82:	6083      	str	r3, [r0, #8]
 8017a84:	8181      	strh	r1, [r0, #12]
 8017a86:	6643      	str	r3, [r0, #100]	@ 0x64
 8017a88:	81c2      	strh	r2, [r0, #14]
 8017a8a:	6183      	str	r3, [r0, #24]
 8017a8c:	4619      	mov	r1, r3
 8017a8e:	2208      	movs	r2, #8
 8017a90:	305c      	adds	r0, #92	@ 0x5c
 8017a92:	f001 f81d 	bl	8018ad0 <memset>
 8017a96:	4b0d      	ldr	r3, [pc, #52]	@ (8017acc <std+0x58>)
 8017a98:	6263      	str	r3, [r4, #36]	@ 0x24
 8017a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8017ad0 <std+0x5c>)
 8017a9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8017ad4 <std+0x60>)
 8017aa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8017ad8 <std+0x64>)
 8017aa4:	6323      	str	r3, [r4, #48]	@ 0x30
 8017aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8017adc <std+0x68>)
 8017aa8:	6224      	str	r4, [r4, #32]
 8017aaa:	429c      	cmp	r4, r3
 8017aac:	d006      	beq.n	8017abc <std+0x48>
 8017aae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017ab2:	4294      	cmp	r4, r2
 8017ab4:	d002      	beq.n	8017abc <std+0x48>
 8017ab6:	33d0      	adds	r3, #208	@ 0xd0
 8017ab8:	429c      	cmp	r4, r3
 8017aba:	d105      	bne.n	8017ac8 <std+0x54>
 8017abc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ac4:	f001 b8a0 	b.w	8018c08 <__retarget_lock_init_recursive>
 8017ac8:	bd10      	pop	{r4, pc}
 8017aca:	bf00      	nop
 8017acc:	0801b041 	.word	0x0801b041
 8017ad0:	0801b063 	.word	0x0801b063
 8017ad4:	0801b09b 	.word	0x0801b09b
 8017ad8:	0801b0bf 	.word	0x0801b0bf
 8017adc:	200077f0 	.word	0x200077f0

08017ae0 <stdio_exit_handler>:
 8017ae0:	4a02      	ldr	r2, [pc, #8]	@ (8017aec <stdio_exit_handler+0xc>)
 8017ae2:	4903      	ldr	r1, [pc, #12]	@ (8017af0 <stdio_exit_handler+0x10>)
 8017ae4:	4803      	ldr	r0, [pc, #12]	@ (8017af4 <stdio_exit_handler+0x14>)
 8017ae6:	f000 bef7 	b.w	80188d8 <_fwalk_sglue>
 8017aea:	bf00      	nop
 8017aec:	2000031c 	.word	0x2000031c
 8017af0:	0801a68d 	.word	0x0801a68d
 8017af4:	20000498 	.word	0x20000498

08017af8 <cleanup_stdio>:
 8017af8:	6841      	ldr	r1, [r0, #4]
 8017afa:	4b0c      	ldr	r3, [pc, #48]	@ (8017b2c <cleanup_stdio+0x34>)
 8017afc:	4299      	cmp	r1, r3
 8017afe:	b510      	push	{r4, lr}
 8017b00:	4604      	mov	r4, r0
 8017b02:	d001      	beq.n	8017b08 <cleanup_stdio+0x10>
 8017b04:	f002 fdc2 	bl	801a68c <_fflush_r>
 8017b08:	68a1      	ldr	r1, [r4, #8]
 8017b0a:	4b09      	ldr	r3, [pc, #36]	@ (8017b30 <cleanup_stdio+0x38>)
 8017b0c:	4299      	cmp	r1, r3
 8017b0e:	d002      	beq.n	8017b16 <cleanup_stdio+0x1e>
 8017b10:	4620      	mov	r0, r4
 8017b12:	f002 fdbb 	bl	801a68c <_fflush_r>
 8017b16:	68e1      	ldr	r1, [r4, #12]
 8017b18:	4b06      	ldr	r3, [pc, #24]	@ (8017b34 <cleanup_stdio+0x3c>)
 8017b1a:	4299      	cmp	r1, r3
 8017b1c:	d004      	beq.n	8017b28 <cleanup_stdio+0x30>
 8017b1e:	4620      	mov	r0, r4
 8017b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b24:	f002 bdb2 	b.w	801a68c <_fflush_r>
 8017b28:	bd10      	pop	{r4, pc}
 8017b2a:	bf00      	nop
 8017b2c:	200077f0 	.word	0x200077f0
 8017b30:	20007858 	.word	0x20007858
 8017b34:	200078c0 	.word	0x200078c0

08017b38 <global_stdio_init.part.0>:
 8017b38:	b510      	push	{r4, lr}
 8017b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8017b68 <global_stdio_init.part.0+0x30>)
 8017b3c:	4c0b      	ldr	r4, [pc, #44]	@ (8017b6c <global_stdio_init.part.0+0x34>)
 8017b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8017b70 <global_stdio_init.part.0+0x38>)
 8017b40:	601a      	str	r2, [r3, #0]
 8017b42:	4620      	mov	r0, r4
 8017b44:	2200      	movs	r2, #0
 8017b46:	2104      	movs	r1, #4
 8017b48:	f7ff ff94 	bl	8017a74 <std>
 8017b4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017b50:	2201      	movs	r2, #1
 8017b52:	2109      	movs	r1, #9
 8017b54:	f7ff ff8e 	bl	8017a74 <std>
 8017b58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017b5c:	2202      	movs	r2, #2
 8017b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b62:	2112      	movs	r1, #18
 8017b64:	f7ff bf86 	b.w	8017a74 <std>
 8017b68:	20007928 	.word	0x20007928
 8017b6c:	200077f0 	.word	0x200077f0
 8017b70:	08017ae1 	.word	0x08017ae1

08017b74 <__sfp_lock_acquire>:
 8017b74:	4801      	ldr	r0, [pc, #4]	@ (8017b7c <__sfp_lock_acquire+0x8>)
 8017b76:	f001 b848 	b.w	8018c0a <__retarget_lock_acquire_recursive>
 8017b7a:	bf00      	nop
 8017b7c:	20007931 	.word	0x20007931

08017b80 <__sfp_lock_release>:
 8017b80:	4801      	ldr	r0, [pc, #4]	@ (8017b88 <__sfp_lock_release+0x8>)
 8017b82:	f001 b843 	b.w	8018c0c <__retarget_lock_release_recursive>
 8017b86:	bf00      	nop
 8017b88:	20007931 	.word	0x20007931

08017b8c <__sinit>:
 8017b8c:	b510      	push	{r4, lr}
 8017b8e:	4604      	mov	r4, r0
 8017b90:	f7ff fff0 	bl	8017b74 <__sfp_lock_acquire>
 8017b94:	6a23      	ldr	r3, [r4, #32]
 8017b96:	b11b      	cbz	r3, 8017ba0 <__sinit+0x14>
 8017b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b9c:	f7ff bff0 	b.w	8017b80 <__sfp_lock_release>
 8017ba0:	4b04      	ldr	r3, [pc, #16]	@ (8017bb4 <__sinit+0x28>)
 8017ba2:	6223      	str	r3, [r4, #32]
 8017ba4:	4b04      	ldr	r3, [pc, #16]	@ (8017bb8 <__sinit+0x2c>)
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d1f5      	bne.n	8017b98 <__sinit+0xc>
 8017bac:	f7ff ffc4 	bl	8017b38 <global_stdio_init.part.0>
 8017bb0:	e7f2      	b.n	8017b98 <__sinit+0xc>
 8017bb2:	bf00      	nop
 8017bb4:	08017af9 	.word	0x08017af9
 8017bb8:	20007928 	.word	0x20007928

08017bbc <sulp>:
 8017bbc:	b570      	push	{r4, r5, r6, lr}
 8017bbe:	4604      	mov	r4, r0
 8017bc0:	460d      	mov	r5, r1
 8017bc2:	ec45 4b10 	vmov	d0, r4, r5
 8017bc6:	4616      	mov	r6, r2
 8017bc8:	f003 f8fc 	bl	801adc4 <__ulp>
 8017bcc:	ec51 0b10 	vmov	r0, r1, d0
 8017bd0:	b17e      	cbz	r6, 8017bf2 <sulp+0x36>
 8017bd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017bd6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	dd09      	ble.n	8017bf2 <sulp+0x36>
 8017bde:	051b      	lsls	r3, r3, #20
 8017be0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8017be4:	2400      	movs	r4, #0
 8017be6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8017bea:	4622      	mov	r2, r4
 8017bec:	462b      	mov	r3, r5
 8017bee:	f7ea ff35 	bl	8002a5c <__aeabi_dmul>
 8017bf2:	ec41 0b10 	vmov	d0, r0, r1
 8017bf6:	bd70      	pop	{r4, r5, r6, pc}

08017bf8 <_strtod_l>:
 8017bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bfc:	b09f      	sub	sp, #124	@ 0x7c
 8017bfe:	460c      	mov	r4, r1
 8017c00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8017c02:	2200      	movs	r2, #0
 8017c04:	921a      	str	r2, [sp, #104]	@ 0x68
 8017c06:	9005      	str	r0, [sp, #20]
 8017c08:	f04f 0a00 	mov.w	sl, #0
 8017c0c:	f04f 0b00 	mov.w	fp, #0
 8017c10:	460a      	mov	r2, r1
 8017c12:	9219      	str	r2, [sp, #100]	@ 0x64
 8017c14:	7811      	ldrb	r1, [r2, #0]
 8017c16:	292b      	cmp	r1, #43	@ 0x2b
 8017c18:	d04a      	beq.n	8017cb0 <_strtod_l+0xb8>
 8017c1a:	d838      	bhi.n	8017c8e <_strtod_l+0x96>
 8017c1c:	290d      	cmp	r1, #13
 8017c1e:	d832      	bhi.n	8017c86 <_strtod_l+0x8e>
 8017c20:	2908      	cmp	r1, #8
 8017c22:	d832      	bhi.n	8017c8a <_strtod_l+0x92>
 8017c24:	2900      	cmp	r1, #0
 8017c26:	d03b      	beq.n	8017ca0 <_strtod_l+0xa8>
 8017c28:	2200      	movs	r2, #0
 8017c2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017c2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8017c2e:	782a      	ldrb	r2, [r5, #0]
 8017c30:	2a30      	cmp	r2, #48	@ 0x30
 8017c32:	f040 80b3 	bne.w	8017d9c <_strtod_l+0x1a4>
 8017c36:	786a      	ldrb	r2, [r5, #1]
 8017c38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017c3c:	2a58      	cmp	r2, #88	@ 0x58
 8017c3e:	d16e      	bne.n	8017d1e <_strtod_l+0x126>
 8017c40:	9302      	str	r3, [sp, #8]
 8017c42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017c44:	9301      	str	r3, [sp, #4]
 8017c46:	ab1a      	add	r3, sp, #104	@ 0x68
 8017c48:	9300      	str	r3, [sp, #0]
 8017c4a:	4a8e      	ldr	r2, [pc, #568]	@ (8017e84 <_strtod_l+0x28c>)
 8017c4c:	9805      	ldr	r0, [sp, #20]
 8017c4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8017c50:	a919      	add	r1, sp, #100	@ 0x64
 8017c52:	f001 ff1b 	bl	8019a8c <__gethex>
 8017c56:	f010 060f 	ands.w	r6, r0, #15
 8017c5a:	4604      	mov	r4, r0
 8017c5c:	d005      	beq.n	8017c6a <_strtod_l+0x72>
 8017c5e:	2e06      	cmp	r6, #6
 8017c60:	d128      	bne.n	8017cb4 <_strtod_l+0xbc>
 8017c62:	3501      	adds	r5, #1
 8017c64:	2300      	movs	r3, #0
 8017c66:	9519      	str	r5, [sp, #100]	@ 0x64
 8017c68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017c6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	f040 858e 	bne.w	801878e <_strtod_l+0xb96>
 8017c72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017c74:	b1cb      	cbz	r3, 8017caa <_strtod_l+0xb2>
 8017c76:	4652      	mov	r2, sl
 8017c78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8017c7c:	ec43 2b10 	vmov	d0, r2, r3
 8017c80:	b01f      	add	sp, #124	@ 0x7c
 8017c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c86:	2920      	cmp	r1, #32
 8017c88:	d1ce      	bne.n	8017c28 <_strtod_l+0x30>
 8017c8a:	3201      	adds	r2, #1
 8017c8c:	e7c1      	b.n	8017c12 <_strtod_l+0x1a>
 8017c8e:	292d      	cmp	r1, #45	@ 0x2d
 8017c90:	d1ca      	bne.n	8017c28 <_strtod_l+0x30>
 8017c92:	2101      	movs	r1, #1
 8017c94:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017c96:	1c51      	adds	r1, r2, #1
 8017c98:	9119      	str	r1, [sp, #100]	@ 0x64
 8017c9a:	7852      	ldrb	r2, [r2, #1]
 8017c9c:	2a00      	cmp	r2, #0
 8017c9e:	d1c5      	bne.n	8017c2c <_strtod_l+0x34>
 8017ca0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017ca2:	9419      	str	r4, [sp, #100]	@ 0x64
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	f040 8570 	bne.w	801878a <_strtod_l+0xb92>
 8017caa:	4652      	mov	r2, sl
 8017cac:	465b      	mov	r3, fp
 8017cae:	e7e5      	b.n	8017c7c <_strtod_l+0x84>
 8017cb0:	2100      	movs	r1, #0
 8017cb2:	e7ef      	b.n	8017c94 <_strtod_l+0x9c>
 8017cb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017cb6:	b13a      	cbz	r2, 8017cc8 <_strtod_l+0xd0>
 8017cb8:	2135      	movs	r1, #53	@ 0x35
 8017cba:	a81c      	add	r0, sp, #112	@ 0x70
 8017cbc:	f003 f97c 	bl	801afb8 <__copybits>
 8017cc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017cc2:	9805      	ldr	r0, [sp, #20]
 8017cc4:	f002 fd4a 	bl	801a75c <_Bfree>
 8017cc8:	3e01      	subs	r6, #1
 8017cca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8017ccc:	2e04      	cmp	r6, #4
 8017cce:	d806      	bhi.n	8017cde <_strtod_l+0xe6>
 8017cd0:	e8df f006 	tbb	[pc, r6]
 8017cd4:	201d0314 	.word	0x201d0314
 8017cd8:	14          	.byte	0x14
 8017cd9:	00          	.byte	0x00
 8017cda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8017cde:	05e1      	lsls	r1, r4, #23
 8017ce0:	bf48      	it	mi
 8017ce2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8017ce6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017cea:	0d1b      	lsrs	r3, r3, #20
 8017cec:	051b      	lsls	r3, r3, #20
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d1bb      	bne.n	8017c6a <_strtod_l+0x72>
 8017cf2:	f000 ff5f 	bl	8018bb4 <__errno>
 8017cf6:	2322      	movs	r3, #34	@ 0x22
 8017cf8:	6003      	str	r3, [r0, #0]
 8017cfa:	e7b6      	b.n	8017c6a <_strtod_l+0x72>
 8017cfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8017d00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8017d04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8017d08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017d0c:	e7e7      	b.n	8017cde <_strtod_l+0xe6>
 8017d0e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8017e8c <_strtod_l+0x294>
 8017d12:	e7e4      	b.n	8017cde <_strtod_l+0xe6>
 8017d14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8017d18:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8017d1c:	e7df      	b.n	8017cde <_strtod_l+0xe6>
 8017d1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017d20:	1c5a      	adds	r2, r3, #1
 8017d22:	9219      	str	r2, [sp, #100]	@ 0x64
 8017d24:	785b      	ldrb	r3, [r3, #1]
 8017d26:	2b30      	cmp	r3, #48	@ 0x30
 8017d28:	d0f9      	beq.n	8017d1e <_strtod_l+0x126>
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d09d      	beq.n	8017c6a <_strtod_l+0x72>
 8017d2e:	2301      	movs	r3, #1
 8017d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017d34:	930c      	str	r3, [sp, #48]	@ 0x30
 8017d36:	2300      	movs	r3, #0
 8017d38:	9308      	str	r3, [sp, #32]
 8017d3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8017d3c:	461f      	mov	r7, r3
 8017d3e:	220a      	movs	r2, #10
 8017d40:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8017d42:	7805      	ldrb	r5, [r0, #0]
 8017d44:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8017d48:	b2d9      	uxtb	r1, r3
 8017d4a:	2909      	cmp	r1, #9
 8017d4c:	d928      	bls.n	8017da0 <_strtod_l+0x1a8>
 8017d4e:	494e      	ldr	r1, [pc, #312]	@ (8017e88 <_strtod_l+0x290>)
 8017d50:	2201      	movs	r2, #1
 8017d52:	f000 fe4f 	bl	80189f4 <strncmp>
 8017d56:	2800      	cmp	r0, #0
 8017d58:	d032      	beq.n	8017dc0 <_strtod_l+0x1c8>
 8017d5a:	2000      	movs	r0, #0
 8017d5c:	462a      	mov	r2, r5
 8017d5e:	4681      	mov	r9, r0
 8017d60:	463d      	mov	r5, r7
 8017d62:	4603      	mov	r3, r0
 8017d64:	2a65      	cmp	r2, #101	@ 0x65
 8017d66:	d001      	beq.n	8017d6c <_strtod_l+0x174>
 8017d68:	2a45      	cmp	r2, #69	@ 0x45
 8017d6a:	d114      	bne.n	8017d96 <_strtod_l+0x19e>
 8017d6c:	b91d      	cbnz	r5, 8017d76 <_strtod_l+0x17e>
 8017d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d70:	4302      	orrs	r2, r0
 8017d72:	d095      	beq.n	8017ca0 <_strtod_l+0xa8>
 8017d74:	2500      	movs	r5, #0
 8017d76:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8017d78:	1c62      	adds	r2, r4, #1
 8017d7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8017d7c:	7862      	ldrb	r2, [r4, #1]
 8017d7e:	2a2b      	cmp	r2, #43	@ 0x2b
 8017d80:	d077      	beq.n	8017e72 <_strtod_l+0x27a>
 8017d82:	2a2d      	cmp	r2, #45	@ 0x2d
 8017d84:	d07b      	beq.n	8017e7e <_strtod_l+0x286>
 8017d86:	f04f 0c00 	mov.w	ip, #0
 8017d8a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8017d8e:	2909      	cmp	r1, #9
 8017d90:	f240 8082 	bls.w	8017e98 <_strtod_l+0x2a0>
 8017d94:	9419      	str	r4, [sp, #100]	@ 0x64
 8017d96:	f04f 0800 	mov.w	r8, #0
 8017d9a:	e0a2      	b.n	8017ee2 <_strtod_l+0x2ea>
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	e7c7      	b.n	8017d30 <_strtod_l+0x138>
 8017da0:	2f08      	cmp	r7, #8
 8017da2:	bfd5      	itete	le
 8017da4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8017da6:	9908      	ldrgt	r1, [sp, #32]
 8017da8:	fb02 3301 	mlale	r3, r2, r1, r3
 8017dac:	fb02 3301 	mlagt	r3, r2, r1, r3
 8017db0:	f100 0001 	add.w	r0, r0, #1
 8017db4:	bfd4      	ite	le
 8017db6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8017db8:	9308      	strgt	r3, [sp, #32]
 8017dba:	3701      	adds	r7, #1
 8017dbc:	9019      	str	r0, [sp, #100]	@ 0x64
 8017dbe:	e7bf      	b.n	8017d40 <_strtod_l+0x148>
 8017dc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017dc2:	1c5a      	adds	r2, r3, #1
 8017dc4:	9219      	str	r2, [sp, #100]	@ 0x64
 8017dc6:	785a      	ldrb	r2, [r3, #1]
 8017dc8:	b37f      	cbz	r7, 8017e2a <_strtod_l+0x232>
 8017dca:	4681      	mov	r9, r0
 8017dcc:	463d      	mov	r5, r7
 8017dce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8017dd2:	2b09      	cmp	r3, #9
 8017dd4:	d912      	bls.n	8017dfc <_strtod_l+0x204>
 8017dd6:	2301      	movs	r3, #1
 8017dd8:	e7c4      	b.n	8017d64 <_strtod_l+0x16c>
 8017dda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017ddc:	1c5a      	adds	r2, r3, #1
 8017dde:	9219      	str	r2, [sp, #100]	@ 0x64
 8017de0:	785a      	ldrb	r2, [r3, #1]
 8017de2:	3001      	adds	r0, #1
 8017de4:	2a30      	cmp	r2, #48	@ 0x30
 8017de6:	d0f8      	beq.n	8017dda <_strtod_l+0x1e2>
 8017de8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8017dec:	2b08      	cmp	r3, #8
 8017dee:	f200 84d3 	bhi.w	8018798 <_strtod_l+0xba0>
 8017df2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017df4:	930c      	str	r3, [sp, #48]	@ 0x30
 8017df6:	4681      	mov	r9, r0
 8017df8:	2000      	movs	r0, #0
 8017dfa:	4605      	mov	r5, r0
 8017dfc:	3a30      	subs	r2, #48	@ 0x30
 8017dfe:	f100 0301 	add.w	r3, r0, #1
 8017e02:	d02a      	beq.n	8017e5a <_strtod_l+0x262>
 8017e04:	4499      	add	r9, r3
 8017e06:	eb00 0c05 	add.w	ip, r0, r5
 8017e0a:	462b      	mov	r3, r5
 8017e0c:	210a      	movs	r1, #10
 8017e0e:	4563      	cmp	r3, ip
 8017e10:	d10d      	bne.n	8017e2e <_strtod_l+0x236>
 8017e12:	1c69      	adds	r1, r5, #1
 8017e14:	4401      	add	r1, r0
 8017e16:	4428      	add	r0, r5
 8017e18:	2808      	cmp	r0, #8
 8017e1a:	dc16      	bgt.n	8017e4a <_strtod_l+0x252>
 8017e1c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017e1e:	230a      	movs	r3, #10
 8017e20:	fb03 2300 	mla	r3, r3, r0, r2
 8017e24:	930a      	str	r3, [sp, #40]	@ 0x28
 8017e26:	2300      	movs	r3, #0
 8017e28:	e018      	b.n	8017e5c <_strtod_l+0x264>
 8017e2a:	4638      	mov	r0, r7
 8017e2c:	e7da      	b.n	8017de4 <_strtod_l+0x1ec>
 8017e2e:	2b08      	cmp	r3, #8
 8017e30:	f103 0301 	add.w	r3, r3, #1
 8017e34:	dc03      	bgt.n	8017e3e <_strtod_l+0x246>
 8017e36:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017e38:	434e      	muls	r6, r1
 8017e3a:	960a      	str	r6, [sp, #40]	@ 0x28
 8017e3c:	e7e7      	b.n	8017e0e <_strtod_l+0x216>
 8017e3e:	2b10      	cmp	r3, #16
 8017e40:	bfde      	ittt	le
 8017e42:	9e08      	ldrle	r6, [sp, #32]
 8017e44:	434e      	mulle	r6, r1
 8017e46:	9608      	strle	r6, [sp, #32]
 8017e48:	e7e1      	b.n	8017e0e <_strtod_l+0x216>
 8017e4a:	280f      	cmp	r0, #15
 8017e4c:	dceb      	bgt.n	8017e26 <_strtod_l+0x22e>
 8017e4e:	9808      	ldr	r0, [sp, #32]
 8017e50:	230a      	movs	r3, #10
 8017e52:	fb03 2300 	mla	r3, r3, r0, r2
 8017e56:	9308      	str	r3, [sp, #32]
 8017e58:	e7e5      	b.n	8017e26 <_strtod_l+0x22e>
 8017e5a:	4629      	mov	r1, r5
 8017e5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017e5e:	1c50      	adds	r0, r2, #1
 8017e60:	9019      	str	r0, [sp, #100]	@ 0x64
 8017e62:	7852      	ldrb	r2, [r2, #1]
 8017e64:	4618      	mov	r0, r3
 8017e66:	460d      	mov	r5, r1
 8017e68:	e7b1      	b.n	8017dce <_strtod_l+0x1d6>
 8017e6a:	f04f 0900 	mov.w	r9, #0
 8017e6e:	2301      	movs	r3, #1
 8017e70:	e77d      	b.n	8017d6e <_strtod_l+0x176>
 8017e72:	f04f 0c00 	mov.w	ip, #0
 8017e76:	1ca2      	adds	r2, r4, #2
 8017e78:	9219      	str	r2, [sp, #100]	@ 0x64
 8017e7a:	78a2      	ldrb	r2, [r4, #2]
 8017e7c:	e785      	b.n	8017d8a <_strtod_l+0x192>
 8017e7e:	f04f 0c01 	mov.w	ip, #1
 8017e82:	e7f8      	b.n	8017e76 <_strtod_l+0x27e>
 8017e84:	0801c428 	.word	0x0801c428
 8017e88:	0801c411 	.word	0x0801c411
 8017e8c:	7ff00000 	.word	0x7ff00000
 8017e90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017e92:	1c51      	adds	r1, r2, #1
 8017e94:	9119      	str	r1, [sp, #100]	@ 0x64
 8017e96:	7852      	ldrb	r2, [r2, #1]
 8017e98:	2a30      	cmp	r2, #48	@ 0x30
 8017e9a:	d0f9      	beq.n	8017e90 <_strtod_l+0x298>
 8017e9c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8017ea0:	2908      	cmp	r1, #8
 8017ea2:	f63f af78 	bhi.w	8017d96 <_strtod_l+0x19e>
 8017ea6:	3a30      	subs	r2, #48	@ 0x30
 8017ea8:	920e      	str	r2, [sp, #56]	@ 0x38
 8017eaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017eac:	920f      	str	r2, [sp, #60]	@ 0x3c
 8017eae:	f04f 080a 	mov.w	r8, #10
 8017eb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017eb4:	1c56      	adds	r6, r2, #1
 8017eb6:	9619      	str	r6, [sp, #100]	@ 0x64
 8017eb8:	7852      	ldrb	r2, [r2, #1]
 8017eba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017ebe:	f1be 0f09 	cmp.w	lr, #9
 8017ec2:	d939      	bls.n	8017f38 <_strtod_l+0x340>
 8017ec4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017ec6:	1a76      	subs	r6, r6, r1
 8017ec8:	2e08      	cmp	r6, #8
 8017eca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8017ece:	dc03      	bgt.n	8017ed8 <_strtod_l+0x2e0>
 8017ed0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017ed2:	4588      	cmp	r8, r1
 8017ed4:	bfa8      	it	ge
 8017ed6:	4688      	movge	r8, r1
 8017ed8:	f1bc 0f00 	cmp.w	ip, #0
 8017edc:	d001      	beq.n	8017ee2 <_strtod_l+0x2ea>
 8017ede:	f1c8 0800 	rsb	r8, r8, #0
 8017ee2:	2d00      	cmp	r5, #0
 8017ee4:	d14e      	bne.n	8017f84 <_strtod_l+0x38c>
 8017ee6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017ee8:	4308      	orrs	r0, r1
 8017eea:	f47f aebe 	bne.w	8017c6a <_strtod_l+0x72>
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	f47f aed6 	bne.w	8017ca0 <_strtod_l+0xa8>
 8017ef4:	2a69      	cmp	r2, #105	@ 0x69
 8017ef6:	d028      	beq.n	8017f4a <_strtod_l+0x352>
 8017ef8:	dc25      	bgt.n	8017f46 <_strtod_l+0x34e>
 8017efa:	2a49      	cmp	r2, #73	@ 0x49
 8017efc:	d025      	beq.n	8017f4a <_strtod_l+0x352>
 8017efe:	2a4e      	cmp	r2, #78	@ 0x4e
 8017f00:	f47f aece 	bne.w	8017ca0 <_strtod_l+0xa8>
 8017f04:	499b      	ldr	r1, [pc, #620]	@ (8018174 <_strtod_l+0x57c>)
 8017f06:	a819      	add	r0, sp, #100	@ 0x64
 8017f08:	f001 ffe2 	bl	8019ed0 <__match>
 8017f0c:	2800      	cmp	r0, #0
 8017f0e:	f43f aec7 	beq.w	8017ca0 <_strtod_l+0xa8>
 8017f12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017f14:	781b      	ldrb	r3, [r3, #0]
 8017f16:	2b28      	cmp	r3, #40	@ 0x28
 8017f18:	d12e      	bne.n	8017f78 <_strtod_l+0x380>
 8017f1a:	4997      	ldr	r1, [pc, #604]	@ (8018178 <_strtod_l+0x580>)
 8017f1c:	aa1c      	add	r2, sp, #112	@ 0x70
 8017f1e:	a819      	add	r0, sp, #100	@ 0x64
 8017f20:	f001 ffea 	bl	8019ef8 <__hexnan>
 8017f24:	2805      	cmp	r0, #5
 8017f26:	d127      	bne.n	8017f78 <_strtod_l+0x380>
 8017f28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017f2a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8017f2e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8017f32:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8017f36:	e698      	b.n	8017c6a <_strtod_l+0x72>
 8017f38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017f3a:	fb08 2101 	mla	r1, r8, r1, r2
 8017f3e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8017f42:	920e      	str	r2, [sp, #56]	@ 0x38
 8017f44:	e7b5      	b.n	8017eb2 <_strtod_l+0x2ba>
 8017f46:	2a6e      	cmp	r2, #110	@ 0x6e
 8017f48:	e7da      	b.n	8017f00 <_strtod_l+0x308>
 8017f4a:	498c      	ldr	r1, [pc, #560]	@ (801817c <_strtod_l+0x584>)
 8017f4c:	a819      	add	r0, sp, #100	@ 0x64
 8017f4e:	f001 ffbf 	bl	8019ed0 <__match>
 8017f52:	2800      	cmp	r0, #0
 8017f54:	f43f aea4 	beq.w	8017ca0 <_strtod_l+0xa8>
 8017f58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017f5a:	4989      	ldr	r1, [pc, #548]	@ (8018180 <_strtod_l+0x588>)
 8017f5c:	3b01      	subs	r3, #1
 8017f5e:	a819      	add	r0, sp, #100	@ 0x64
 8017f60:	9319      	str	r3, [sp, #100]	@ 0x64
 8017f62:	f001 ffb5 	bl	8019ed0 <__match>
 8017f66:	b910      	cbnz	r0, 8017f6e <_strtod_l+0x376>
 8017f68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017f6a:	3301      	adds	r3, #1
 8017f6c:	9319      	str	r3, [sp, #100]	@ 0x64
 8017f6e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8018190 <_strtod_l+0x598>
 8017f72:	f04f 0a00 	mov.w	sl, #0
 8017f76:	e678      	b.n	8017c6a <_strtod_l+0x72>
 8017f78:	4882      	ldr	r0, [pc, #520]	@ (8018184 <_strtod_l+0x58c>)
 8017f7a:	f000 fe5d 	bl	8018c38 <nan>
 8017f7e:	ec5b ab10 	vmov	sl, fp, d0
 8017f82:	e672      	b.n	8017c6a <_strtod_l+0x72>
 8017f84:	eba8 0309 	sub.w	r3, r8, r9
 8017f88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f8c:	2f00      	cmp	r7, #0
 8017f8e:	bf08      	it	eq
 8017f90:	462f      	moveq	r7, r5
 8017f92:	2d10      	cmp	r5, #16
 8017f94:	462c      	mov	r4, r5
 8017f96:	bfa8      	it	ge
 8017f98:	2410      	movge	r4, #16
 8017f9a:	f7ea fce5 	bl	8002968 <__aeabi_ui2d>
 8017f9e:	2d09      	cmp	r5, #9
 8017fa0:	4682      	mov	sl, r0
 8017fa2:	468b      	mov	fp, r1
 8017fa4:	dc13      	bgt.n	8017fce <_strtod_l+0x3d6>
 8017fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	f43f ae5e 	beq.w	8017c6a <_strtod_l+0x72>
 8017fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017fb0:	dd78      	ble.n	80180a4 <_strtod_l+0x4ac>
 8017fb2:	2b16      	cmp	r3, #22
 8017fb4:	dc5f      	bgt.n	8018076 <_strtod_l+0x47e>
 8017fb6:	4974      	ldr	r1, [pc, #464]	@ (8018188 <_strtod_l+0x590>)
 8017fb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017fc0:	4652      	mov	r2, sl
 8017fc2:	465b      	mov	r3, fp
 8017fc4:	f7ea fd4a 	bl	8002a5c <__aeabi_dmul>
 8017fc8:	4682      	mov	sl, r0
 8017fca:	468b      	mov	fp, r1
 8017fcc:	e64d      	b.n	8017c6a <_strtod_l+0x72>
 8017fce:	4b6e      	ldr	r3, [pc, #440]	@ (8018188 <_strtod_l+0x590>)
 8017fd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017fd4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8017fd8:	f7ea fd40 	bl	8002a5c <__aeabi_dmul>
 8017fdc:	4682      	mov	sl, r0
 8017fde:	9808      	ldr	r0, [sp, #32]
 8017fe0:	468b      	mov	fp, r1
 8017fe2:	f7ea fcc1 	bl	8002968 <__aeabi_ui2d>
 8017fe6:	4602      	mov	r2, r0
 8017fe8:	460b      	mov	r3, r1
 8017fea:	4650      	mov	r0, sl
 8017fec:	4659      	mov	r1, fp
 8017fee:	f7ea fb7f 	bl	80026f0 <__adddf3>
 8017ff2:	2d0f      	cmp	r5, #15
 8017ff4:	4682      	mov	sl, r0
 8017ff6:	468b      	mov	fp, r1
 8017ff8:	ddd5      	ble.n	8017fa6 <_strtod_l+0x3ae>
 8017ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ffc:	1b2c      	subs	r4, r5, r4
 8017ffe:	441c      	add	r4, r3
 8018000:	2c00      	cmp	r4, #0
 8018002:	f340 8096 	ble.w	8018132 <_strtod_l+0x53a>
 8018006:	f014 030f 	ands.w	r3, r4, #15
 801800a:	d00a      	beq.n	8018022 <_strtod_l+0x42a>
 801800c:	495e      	ldr	r1, [pc, #376]	@ (8018188 <_strtod_l+0x590>)
 801800e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018012:	4652      	mov	r2, sl
 8018014:	465b      	mov	r3, fp
 8018016:	e9d1 0100 	ldrd	r0, r1, [r1]
 801801a:	f7ea fd1f 	bl	8002a5c <__aeabi_dmul>
 801801e:	4682      	mov	sl, r0
 8018020:	468b      	mov	fp, r1
 8018022:	f034 040f 	bics.w	r4, r4, #15
 8018026:	d073      	beq.n	8018110 <_strtod_l+0x518>
 8018028:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801802c:	dd48      	ble.n	80180c0 <_strtod_l+0x4c8>
 801802e:	2400      	movs	r4, #0
 8018030:	46a0      	mov	r8, r4
 8018032:	940a      	str	r4, [sp, #40]	@ 0x28
 8018034:	46a1      	mov	r9, r4
 8018036:	9a05      	ldr	r2, [sp, #20]
 8018038:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8018190 <_strtod_l+0x598>
 801803c:	2322      	movs	r3, #34	@ 0x22
 801803e:	6013      	str	r3, [r2, #0]
 8018040:	f04f 0a00 	mov.w	sl, #0
 8018044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018046:	2b00      	cmp	r3, #0
 8018048:	f43f ae0f 	beq.w	8017c6a <_strtod_l+0x72>
 801804c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801804e:	9805      	ldr	r0, [sp, #20]
 8018050:	f002 fb84 	bl	801a75c <_Bfree>
 8018054:	9805      	ldr	r0, [sp, #20]
 8018056:	4649      	mov	r1, r9
 8018058:	f002 fb80 	bl	801a75c <_Bfree>
 801805c:	9805      	ldr	r0, [sp, #20]
 801805e:	4641      	mov	r1, r8
 8018060:	f002 fb7c 	bl	801a75c <_Bfree>
 8018064:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018066:	9805      	ldr	r0, [sp, #20]
 8018068:	f002 fb78 	bl	801a75c <_Bfree>
 801806c:	9805      	ldr	r0, [sp, #20]
 801806e:	4621      	mov	r1, r4
 8018070:	f002 fb74 	bl	801a75c <_Bfree>
 8018074:	e5f9      	b.n	8017c6a <_strtod_l+0x72>
 8018076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018078:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801807c:	4293      	cmp	r3, r2
 801807e:	dbbc      	blt.n	8017ffa <_strtod_l+0x402>
 8018080:	4c41      	ldr	r4, [pc, #260]	@ (8018188 <_strtod_l+0x590>)
 8018082:	f1c5 050f 	rsb	r5, r5, #15
 8018086:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801808a:	4652      	mov	r2, sl
 801808c:	465b      	mov	r3, fp
 801808e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018092:	f7ea fce3 	bl	8002a5c <__aeabi_dmul>
 8018096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018098:	1b5d      	subs	r5, r3, r5
 801809a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801809e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80180a2:	e78f      	b.n	8017fc4 <_strtod_l+0x3cc>
 80180a4:	3316      	adds	r3, #22
 80180a6:	dba8      	blt.n	8017ffa <_strtod_l+0x402>
 80180a8:	4b37      	ldr	r3, [pc, #220]	@ (8018188 <_strtod_l+0x590>)
 80180aa:	eba9 0808 	sub.w	r8, r9, r8
 80180ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80180b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80180b6:	4650      	mov	r0, sl
 80180b8:	4659      	mov	r1, fp
 80180ba:	f7ea fdf9 	bl	8002cb0 <__aeabi_ddiv>
 80180be:	e783      	b.n	8017fc8 <_strtod_l+0x3d0>
 80180c0:	4b32      	ldr	r3, [pc, #200]	@ (801818c <_strtod_l+0x594>)
 80180c2:	9308      	str	r3, [sp, #32]
 80180c4:	2300      	movs	r3, #0
 80180c6:	1124      	asrs	r4, r4, #4
 80180c8:	4650      	mov	r0, sl
 80180ca:	4659      	mov	r1, fp
 80180cc:	461e      	mov	r6, r3
 80180ce:	2c01      	cmp	r4, #1
 80180d0:	dc21      	bgt.n	8018116 <_strtod_l+0x51e>
 80180d2:	b10b      	cbz	r3, 80180d8 <_strtod_l+0x4e0>
 80180d4:	4682      	mov	sl, r0
 80180d6:	468b      	mov	fp, r1
 80180d8:	492c      	ldr	r1, [pc, #176]	@ (801818c <_strtod_l+0x594>)
 80180da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80180de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80180e2:	4652      	mov	r2, sl
 80180e4:	465b      	mov	r3, fp
 80180e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80180ea:	f7ea fcb7 	bl	8002a5c <__aeabi_dmul>
 80180ee:	4b28      	ldr	r3, [pc, #160]	@ (8018190 <_strtod_l+0x598>)
 80180f0:	460a      	mov	r2, r1
 80180f2:	400b      	ands	r3, r1
 80180f4:	4927      	ldr	r1, [pc, #156]	@ (8018194 <_strtod_l+0x59c>)
 80180f6:	428b      	cmp	r3, r1
 80180f8:	4682      	mov	sl, r0
 80180fa:	d898      	bhi.n	801802e <_strtod_l+0x436>
 80180fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8018100:	428b      	cmp	r3, r1
 8018102:	bf86      	itte	hi
 8018104:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8018198 <_strtod_l+0x5a0>
 8018108:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 801810c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8018110:	2300      	movs	r3, #0
 8018112:	9308      	str	r3, [sp, #32]
 8018114:	e07a      	b.n	801820c <_strtod_l+0x614>
 8018116:	07e2      	lsls	r2, r4, #31
 8018118:	d505      	bpl.n	8018126 <_strtod_l+0x52e>
 801811a:	9b08      	ldr	r3, [sp, #32]
 801811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018120:	f7ea fc9c 	bl	8002a5c <__aeabi_dmul>
 8018124:	2301      	movs	r3, #1
 8018126:	9a08      	ldr	r2, [sp, #32]
 8018128:	3208      	adds	r2, #8
 801812a:	3601      	adds	r6, #1
 801812c:	1064      	asrs	r4, r4, #1
 801812e:	9208      	str	r2, [sp, #32]
 8018130:	e7cd      	b.n	80180ce <_strtod_l+0x4d6>
 8018132:	d0ed      	beq.n	8018110 <_strtod_l+0x518>
 8018134:	4264      	negs	r4, r4
 8018136:	f014 020f 	ands.w	r2, r4, #15
 801813a:	d00a      	beq.n	8018152 <_strtod_l+0x55a>
 801813c:	4b12      	ldr	r3, [pc, #72]	@ (8018188 <_strtod_l+0x590>)
 801813e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018142:	4650      	mov	r0, sl
 8018144:	4659      	mov	r1, fp
 8018146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801814a:	f7ea fdb1 	bl	8002cb0 <__aeabi_ddiv>
 801814e:	4682      	mov	sl, r0
 8018150:	468b      	mov	fp, r1
 8018152:	1124      	asrs	r4, r4, #4
 8018154:	d0dc      	beq.n	8018110 <_strtod_l+0x518>
 8018156:	2c1f      	cmp	r4, #31
 8018158:	dd20      	ble.n	801819c <_strtod_l+0x5a4>
 801815a:	2400      	movs	r4, #0
 801815c:	46a0      	mov	r8, r4
 801815e:	940a      	str	r4, [sp, #40]	@ 0x28
 8018160:	46a1      	mov	r9, r4
 8018162:	9a05      	ldr	r2, [sp, #20]
 8018164:	2322      	movs	r3, #34	@ 0x22
 8018166:	f04f 0a00 	mov.w	sl, #0
 801816a:	f04f 0b00 	mov.w	fp, #0
 801816e:	6013      	str	r3, [r2, #0]
 8018170:	e768      	b.n	8018044 <_strtod_l+0x44c>
 8018172:	bf00      	nop
 8018174:	0801c3e5 	.word	0x0801c3e5
 8018178:	0801c414 	.word	0x0801c414
 801817c:	0801c3dd 	.word	0x0801c3dd
 8018180:	0801c621 	.word	0x0801c621
 8018184:	0801c61d 	.word	0x0801c61d
 8018188:	0801c798 	.word	0x0801c798
 801818c:	0801c770 	.word	0x0801c770
 8018190:	7ff00000 	.word	0x7ff00000
 8018194:	7ca00000 	.word	0x7ca00000
 8018198:	7fefffff 	.word	0x7fefffff
 801819c:	f014 0310 	ands.w	r3, r4, #16
 80181a0:	bf18      	it	ne
 80181a2:	236a      	movne	r3, #106	@ 0x6a
 80181a4:	4ea9      	ldr	r6, [pc, #676]	@ (801844c <_strtod_l+0x854>)
 80181a6:	9308      	str	r3, [sp, #32]
 80181a8:	4650      	mov	r0, sl
 80181aa:	4659      	mov	r1, fp
 80181ac:	2300      	movs	r3, #0
 80181ae:	07e2      	lsls	r2, r4, #31
 80181b0:	d504      	bpl.n	80181bc <_strtod_l+0x5c4>
 80181b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80181b6:	f7ea fc51 	bl	8002a5c <__aeabi_dmul>
 80181ba:	2301      	movs	r3, #1
 80181bc:	1064      	asrs	r4, r4, #1
 80181be:	f106 0608 	add.w	r6, r6, #8
 80181c2:	d1f4      	bne.n	80181ae <_strtod_l+0x5b6>
 80181c4:	b10b      	cbz	r3, 80181ca <_strtod_l+0x5d2>
 80181c6:	4682      	mov	sl, r0
 80181c8:	468b      	mov	fp, r1
 80181ca:	9b08      	ldr	r3, [sp, #32]
 80181cc:	b1b3      	cbz	r3, 80181fc <_strtod_l+0x604>
 80181ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80181d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	4659      	mov	r1, fp
 80181da:	dd0f      	ble.n	80181fc <_strtod_l+0x604>
 80181dc:	2b1f      	cmp	r3, #31
 80181de:	dd55      	ble.n	801828c <_strtod_l+0x694>
 80181e0:	2b34      	cmp	r3, #52	@ 0x34
 80181e2:	bfde      	ittt	le
 80181e4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80181e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80181ec:	4093      	lslle	r3, r2
 80181ee:	f04f 0a00 	mov.w	sl, #0
 80181f2:	bfcc      	ite	gt
 80181f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80181f8:	ea03 0b01 	andle.w	fp, r3, r1
 80181fc:	2200      	movs	r2, #0
 80181fe:	2300      	movs	r3, #0
 8018200:	4650      	mov	r0, sl
 8018202:	4659      	mov	r1, fp
 8018204:	f7ea fe92 	bl	8002f2c <__aeabi_dcmpeq>
 8018208:	2800      	cmp	r0, #0
 801820a:	d1a6      	bne.n	801815a <_strtod_l+0x562>
 801820c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801820e:	9300      	str	r3, [sp, #0]
 8018210:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018212:	9805      	ldr	r0, [sp, #20]
 8018214:	462b      	mov	r3, r5
 8018216:	463a      	mov	r2, r7
 8018218:	f002 fb08 	bl	801a82c <__s2b>
 801821c:	900a      	str	r0, [sp, #40]	@ 0x28
 801821e:	2800      	cmp	r0, #0
 8018220:	f43f af05 	beq.w	801802e <_strtod_l+0x436>
 8018224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018226:	2a00      	cmp	r2, #0
 8018228:	eba9 0308 	sub.w	r3, r9, r8
 801822c:	bfa8      	it	ge
 801822e:	2300      	movge	r3, #0
 8018230:	9312      	str	r3, [sp, #72]	@ 0x48
 8018232:	2400      	movs	r4, #0
 8018234:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8018238:	9316      	str	r3, [sp, #88]	@ 0x58
 801823a:	46a0      	mov	r8, r4
 801823c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801823e:	9805      	ldr	r0, [sp, #20]
 8018240:	6859      	ldr	r1, [r3, #4]
 8018242:	f002 fa4b 	bl	801a6dc <_Balloc>
 8018246:	4681      	mov	r9, r0
 8018248:	2800      	cmp	r0, #0
 801824a:	f43f aef4 	beq.w	8018036 <_strtod_l+0x43e>
 801824e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018250:	691a      	ldr	r2, [r3, #16]
 8018252:	3202      	adds	r2, #2
 8018254:	f103 010c 	add.w	r1, r3, #12
 8018258:	0092      	lsls	r2, r2, #2
 801825a:	300c      	adds	r0, #12
 801825c:	f000 fcda 	bl	8018c14 <memcpy>
 8018260:	ec4b ab10 	vmov	d0, sl, fp
 8018264:	9805      	ldr	r0, [sp, #20]
 8018266:	aa1c      	add	r2, sp, #112	@ 0x70
 8018268:	a91b      	add	r1, sp, #108	@ 0x6c
 801826a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801826e:	f002 fe19 	bl	801aea4 <__d2b>
 8018272:	901a      	str	r0, [sp, #104]	@ 0x68
 8018274:	2800      	cmp	r0, #0
 8018276:	f43f aede 	beq.w	8018036 <_strtod_l+0x43e>
 801827a:	9805      	ldr	r0, [sp, #20]
 801827c:	2101      	movs	r1, #1
 801827e:	f002 fb6b 	bl	801a958 <__i2b>
 8018282:	4680      	mov	r8, r0
 8018284:	b948      	cbnz	r0, 801829a <_strtod_l+0x6a2>
 8018286:	f04f 0800 	mov.w	r8, #0
 801828a:	e6d4      	b.n	8018036 <_strtod_l+0x43e>
 801828c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018290:	fa02 f303 	lsl.w	r3, r2, r3
 8018294:	ea03 0a0a 	and.w	sl, r3, sl
 8018298:	e7b0      	b.n	80181fc <_strtod_l+0x604>
 801829a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801829c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801829e:	2d00      	cmp	r5, #0
 80182a0:	bfab      	itete	ge
 80182a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80182a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80182a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80182a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80182aa:	bfac      	ite	ge
 80182ac:	18ef      	addge	r7, r5, r3
 80182ae:	1b5e      	sublt	r6, r3, r5
 80182b0:	9b08      	ldr	r3, [sp, #32]
 80182b2:	1aed      	subs	r5, r5, r3
 80182b4:	4415      	add	r5, r2
 80182b6:	4b66      	ldr	r3, [pc, #408]	@ (8018450 <_strtod_l+0x858>)
 80182b8:	3d01      	subs	r5, #1
 80182ba:	429d      	cmp	r5, r3
 80182bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80182c0:	da50      	bge.n	8018364 <_strtod_l+0x76c>
 80182c2:	1b5b      	subs	r3, r3, r5
 80182c4:	2b1f      	cmp	r3, #31
 80182c6:	eba2 0203 	sub.w	r2, r2, r3
 80182ca:	f04f 0101 	mov.w	r1, #1
 80182ce:	dc3d      	bgt.n	801834c <_strtod_l+0x754>
 80182d0:	fa01 f303 	lsl.w	r3, r1, r3
 80182d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80182d6:	2300      	movs	r3, #0
 80182d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80182da:	18bd      	adds	r5, r7, r2
 80182dc:	9b08      	ldr	r3, [sp, #32]
 80182de:	42af      	cmp	r7, r5
 80182e0:	4416      	add	r6, r2
 80182e2:	441e      	add	r6, r3
 80182e4:	463b      	mov	r3, r7
 80182e6:	bfa8      	it	ge
 80182e8:	462b      	movge	r3, r5
 80182ea:	42b3      	cmp	r3, r6
 80182ec:	bfa8      	it	ge
 80182ee:	4633      	movge	r3, r6
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	bfc2      	ittt	gt
 80182f4:	1aed      	subgt	r5, r5, r3
 80182f6:	1af6      	subgt	r6, r6, r3
 80182f8:	1aff      	subgt	r7, r7, r3
 80182fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	dd16      	ble.n	801832e <_strtod_l+0x736>
 8018300:	4641      	mov	r1, r8
 8018302:	9805      	ldr	r0, [sp, #20]
 8018304:	461a      	mov	r2, r3
 8018306:	f002 fbe7 	bl	801aad8 <__pow5mult>
 801830a:	4680      	mov	r8, r0
 801830c:	2800      	cmp	r0, #0
 801830e:	d0ba      	beq.n	8018286 <_strtod_l+0x68e>
 8018310:	4601      	mov	r1, r0
 8018312:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8018314:	9805      	ldr	r0, [sp, #20]
 8018316:	f002 fb35 	bl	801a984 <__multiply>
 801831a:	900e      	str	r0, [sp, #56]	@ 0x38
 801831c:	2800      	cmp	r0, #0
 801831e:	f43f ae8a 	beq.w	8018036 <_strtod_l+0x43e>
 8018322:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018324:	9805      	ldr	r0, [sp, #20]
 8018326:	f002 fa19 	bl	801a75c <_Bfree>
 801832a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801832c:	931a      	str	r3, [sp, #104]	@ 0x68
 801832e:	2d00      	cmp	r5, #0
 8018330:	dc1d      	bgt.n	801836e <_strtod_l+0x776>
 8018332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018334:	2b00      	cmp	r3, #0
 8018336:	dd23      	ble.n	8018380 <_strtod_l+0x788>
 8018338:	4649      	mov	r1, r9
 801833a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801833c:	9805      	ldr	r0, [sp, #20]
 801833e:	f002 fbcb 	bl	801aad8 <__pow5mult>
 8018342:	4681      	mov	r9, r0
 8018344:	b9e0      	cbnz	r0, 8018380 <_strtod_l+0x788>
 8018346:	f04f 0900 	mov.w	r9, #0
 801834a:	e674      	b.n	8018036 <_strtod_l+0x43e>
 801834c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8018350:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8018354:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8018358:	35e2      	adds	r5, #226	@ 0xe2
 801835a:	fa01 f305 	lsl.w	r3, r1, r5
 801835e:	9310      	str	r3, [sp, #64]	@ 0x40
 8018360:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018362:	e7ba      	b.n	80182da <_strtod_l+0x6e2>
 8018364:	2300      	movs	r3, #0
 8018366:	9310      	str	r3, [sp, #64]	@ 0x40
 8018368:	2301      	movs	r3, #1
 801836a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801836c:	e7b5      	b.n	80182da <_strtod_l+0x6e2>
 801836e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018370:	9805      	ldr	r0, [sp, #20]
 8018372:	462a      	mov	r2, r5
 8018374:	f002 fc0a 	bl	801ab8c <__lshift>
 8018378:	901a      	str	r0, [sp, #104]	@ 0x68
 801837a:	2800      	cmp	r0, #0
 801837c:	d1d9      	bne.n	8018332 <_strtod_l+0x73a>
 801837e:	e65a      	b.n	8018036 <_strtod_l+0x43e>
 8018380:	2e00      	cmp	r6, #0
 8018382:	dd07      	ble.n	8018394 <_strtod_l+0x79c>
 8018384:	4649      	mov	r1, r9
 8018386:	9805      	ldr	r0, [sp, #20]
 8018388:	4632      	mov	r2, r6
 801838a:	f002 fbff 	bl	801ab8c <__lshift>
 801838e:	4681      	mov	r9, r0
 8018390:	2800      	cmp	r0, #0
 8018392:	d0d8      	beq.n	8018346 <_strtod_l+0x74e>
 8018394:	2f00      	cmp	r7, #0
 8018396:	dd08      	ble.n	80183aa <_strtod_l+0x7b2>
 8018398:	4641      	mov	r1, r8
 801839a:	9805      	ldr	r0, [sp, #20]
 801839c:	463a      	mov	r2, r7
 801839e:	f002 fbf5 	bl	801ab8c <__lshift>
 80183a2:	4680      	mov	r8, r0
 80183a4:	2800      	cmp	r0, #0
 80183a6:	f43f ae46 	beq.w	8018036 <_strtod_l+0x43e>
 80183aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80183ac:	9805      	ldr	r0, [sp, #20]
 80183ae:	464a      	mov	r2, r9
 80183b0:	f002 fc74 	bl	801ac9c <__mdiff>
 80183b4:	4604      	mov	r4, r0
 80183b6:	2800      	cmp	r0, #0
 80183b8:	f43f ae3d 	beq.w	8018036 <_strtod_l+0x43e>
 80183bc:	68c3      	ldr	r3, [r0, #12]
 80183be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80183c0:	2300      	movs	r3, #0
 80183c2:	60c3      	str	r3, [r0, #12]
 80183c4:	4641      	mov	r1, r8
 80183c6:	f002 fc4d 	bl	801ac64 <__mcmp>
 80183ca:	2800      	cmp	r0, #0
 80183cc:	da46      	bge.n	801845c <_strtod_l+0x864>
 80183ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80183d0:	ea53 030a 	orrs.w	r3, r3, sl
 80183d4:	d16c      	bne.n	80184b0 <_strtod_l+0x8b8>
 80183d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d168      	bne.n	80184b0 <_strtod_l+0x8b8>
 80183de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80183e2:	0d1b      	lsrs	r3, r3, #20
 80183e4:	051b      	lsls	r3, r3, #20
 80183e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80183ea:	d961      	bls.n	80184b0 <_strtod_l+0x8b8>
 80183ec:	6963      	ldr	r3, [r4, #20]
 80183ee:	b913      	cbnz	r3, 80183f6 <_strtod_l+0x7fe>
 80183f0:	6923      	ldr	r3, [r4, #16]
 80183f2:	2b01      	cmp	r3, #1
 80183f4:	dd5c      	ble.n	80184b0 <_strtod_l+0x8b8>
 80183f6:	4621      	mov	r1, r4
 80183f8:	2201      	movs	r2, #1
 80183fa:	9805      	ldr	r0, [sp, #20]
 80183fc:	f002 fbc6 	bl	801ab8c <__lshift>
 8018400:	4641      	mov	r1, r8
 8018402:	4604      	mov	r4, r0
 8018404:	f002 fc2e 	bl	801ac64 <__mcmp>
 8018408:	2800      	cmp	r0, #0
 801840a:	dd51      	ble.n	80184b0 <_strtod_l+0x8b8>
 801840c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018410:	9a08      	ldr	r2, [sp, #32]
 8018412:	0d1b      	lsrs	r3, r3, #20
 8018414:	051b      	lsls	r3, r3, #20
 8018416:	2a00      	cmp	r2, #0
 8018418:	d06b      	beq.n	80184f2 <_strtod_l+0x8fa>
 801841a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801841e:	d868      	bhi.n	80184f2 <_strtod_l+0x8fa>
 8018420:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8018424:	f67f ae9d 	bls.w	8018162 <_strtod_l+0x56a>
 8018428:	4b0a      	ldr	r3, [pc, #40]	@ (8018454 <_strtod_l+0x85c>)
 801842a:	4650      	mov	r0, sl
 801842c:	4659      	mov	r1, fp
 801842e:	2200      	movs	r2, #0
 8018430:	f7ea fb14 	bl	8002a5c <__aeabi_dmul>
 8018434:	4b08      	ldr	r3, [pc, #32]	@ (8018458 <_strtod_l+0x860>)
 8018436:	400b      	ands	r3, r1
 8018438:	4682      	mov	sl, r0
 801843a:	468b      	mov	fp, r1
 801843c:	2b00      	cmp	r3, #0
 801843e:	f47f ae05 	bne.w	801804c <_strtod_l+0x454>
 8018442:	9a05      	ldr	r2, [sp, #20]
 8018444:	2322      	movs	r3, #34	@ 0x22
 8018446:	6013      	str	r3, [r2, #0]
 8018448:	e600      	b.n	801804c <_strtod_l+0x454>
 801844a:	bf00      	nop
 801844c:	0801c440 	.word	0x0801c440
 8018450:	fffffc02 	.word	0xfffffc02
 8018454:	39500000 	.word	0x39500000
 8018458:	7ff00000 	.word	0x7ff00000
 801845c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8018460:	d165      	bne.n	801852e <_strtod_l+0x936>
 8018462:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018468:	b35a      	cbz	r2, 80184c2 <_strtod_l+0x8ca>
 801846a:	4a9f      	ldr	r2, [pc, #636]	@ (80186e8 <_strtod_l+0xaf0>)
 801846c:	4293      	cmp	r3, r2
 801846e:	d12b      	bne.n	80184c8 <_strtod_l+0x8d0>
 8018470:	9b08      	ldr	r3, [sp, #32]
 8018472:	4651      	mov	r1, sl
 8018474:	b303      	cbz	r3, 80184b8 <_strtod_l+0x8c0>
 8018476:	4b9d      	ldr	r3, [pc, #628]	@ (80186ec <_strtod_l+0xaf4>)
 8018478:	465a      	mov	r2, fp
 801847a:	4013      	ands	r3, r2
 801847c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8018480:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018484:	d81b      	bhi.n	80184be <_strtod_l+0x8c6>
 8018486:	0d1b      	lsrs	r3, r3, #20
 8018488:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801848c:	fa02 f303 	lsl.w	r3, r2, r3
 8018490:	4299      	cmp	r1, r3
 8018492:	d119      	bne.n	80184c8 <_strtod_l+0x8d0>
 8018494:	4b96      	ldr	r3, [pc, #600]	@ (80186f0 <_strtod_l+0xaf8>)
 8018496:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018498:	429a      	cmp	r2, r3
 801849a:	d102      	bne.n	80184a2 <_strtod_l+0x8aa>
 801849c:	3101      	adds	r1, #1
 801849e:	f43f adca 	beq.w	8018036 <_strtod_l+0x43e>
 80184a2:	4b92      	ldr	r3, [pc, #584]	@ (80186ec <_strtod_l+0xaf4>)
 80184a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80184a6:	401a      	ands	r2, r3
 80184a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80184ac:	f04f 0a00 	mov.w	sl, #0
 80184b0:	9b08      	ldr	r3, [sp, #32]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d1b8      	bne.n	8018428 <_strtod_l+0x830>
 80184b6:	e5c9      	b.n	801804c <_strtod_l+0x454>
 80184b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80184bc:	e7e8      	b.n	8018490 <_strtod_l+0x898>
 80184be:	4613      	mov	r3, r2
 80184c0:	e7e6      	b.n	8018490 <_strtod_l+0x898>
 80184c2:	ea53 030a 	orrs.w	r3, r3, sl
 80184c6:	d0a1      	beq.n	801840c <_strtod_l+0x814>
 80184c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80184ca:	b1db      	cbz	r3, 8018504 <_strtod_l+0x90c>
 80184cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80184ce:	4213      	tst	r3, r2
 80184d0:	d0ee      	beq.n	80184b0 <_strtod_l+0x8b8>
 80184d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80184d4:	9a08      	ldr	r2, [sp, #32]
 80184d6:	4650      	mov	r0, sl
 80184d8:	4659      	mov	r1, fp
 80184da:	b1bb      	cbz	r3, 801850c <_strtod_l+0x914>
 80184dc:	f7ff fb6e 	bl	8017bbc <sulp>
 80184e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80184e4:	ec53 2b10 	vmov	r2, r3, d0
 80184e8:	f7ea f902 	bl	80026f0 <__adddf3>
 80184ec:	4682      	mov	sl, r0
 80184ee:	468b      	mov	fp, r1
 80184f0:	e7de      	b.n	80184b0 <_strtod_l+0x8b8>
 80184f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80184f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80184fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80184fe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8018502:	e7d5      	b.n	80184b0 <_strtod_l+0x8b8>
 8018504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018506:	ea13 0f0a 	tst.w	r3, sl
 801850a:	e7e1      	b.n	80184d0 <_strtod_l+0x8d8>
 801850c:	f7ff fb56 	bl	8017bbc <sulp>
 8018510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018514:	ec53 2b10 	vmov	r2, r3, d0
 8018518:	f7ea f8e8 	bl	80026ec <__aeabi_dsub>
 801851c:	2200      	movs	r2, #0
 801851e:	2300      	movs	r3, #0
 8018520:	4682      	mov	sl, r0
 8018522:	468b      	mov	fp, r1
 8018524:	f7ea fd02 	bl	8002f2c <__aeabi_dcmpeq>
 8018528:	2800      	cmp	r0, #0
 801852a:	d0c1      	beq.n	80184b0 <_strtod_l+0x8b8>
 801852c:	e619      	b.n	8018162 <_strtod_l+0x56a>
 801852e:	4641      	mov	r1, r8
 8018530:	4620      	mov	r0, r4
 8018532:	f002 fd0f 	bl	801af54 <__ratio>
 8018536:	ec57 6b10 	vmov	r6, r7, d0
 801853a:	2200      	movs	r2, #0
 801853c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018540:	4630      	mov	r0, r6
 8018542:	4639      	mov	r1, r7
 8018544:	f7ea fd06 	bl	8002f54 <__aeabi_dcmple>
 8018548:	2800      	cmp	r0, #0
 801854a:	d06f      	beq.n	801862c <_strtod_l+0xa34>
 801854c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801854e:	2b00      	cmp	r3, #0
 8018550:	d17a      	bne.n	8018648 <_strtod_l+0xa50>
 8018552:	f1ba 0f00 	cmp.w	sl, #0
 8018556:	d158      	bne.n	801860a <_strtod_l+0xa12>
 8018558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801855a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801855e:	2b00      	cmp	r3, #0
 8018560:	d15a      	bne.n	8018618 <_strtod_l+0xa20>
 8018562:	4b64      	ldr	r3, [pc, #400]	@ (80186f4 <_strtod_l+0xafc>)
 8018564:	2200      	movs	r2, #0
 8018566:	4630      	mov	r0, r6
 8018568:	4639      	mov	r1, r7
 801856a:	f7ea fce9 	bl	8002f40 <__aeabi_dcmplt>
 801856e:	2800      	cmp	r0, #0
 8018570:	d159      	bne.n	8018626 <_strtod_l+0xa2e>
 8018572:	4630      	mov	r0, r6
 8018574:	4639      	mov	r1, r7
 8018576:	4b60      	ldr	r3, [pc, #384]	@ (80186f8 <_strtod_l+0xb00>)
 8018578:	2200      	movs	r2, #0
 801857a:	f7ea fa6f 	bl	8002a5c <__aeabi_dmul>
 801857e:	4606      	mov	r6, r0
 8018580:	460f      	mov	r7, r1
 8018582:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8018586:	9606      	str	r6, [sp, #24]
 8018588:	9307      	str	r3, [sp, #28]
 801858a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801858e:	4d57      	ldr	r5, [pc, #348]	@ (80186ec <_strtod_l+0xaf4>)
 8018590:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8018594:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018596:	401d      	ands	r5, r3
 8018598:	4b58      	ldr	r3, [pc, #352]	@ (80186fc <_strtod_l+0xb04>)
 801859a:	429d      	cmp	r5, r3
 801859c:	f040 80b2 	bne.w	8018704 <_strtod_l+0xb0c>
 80185a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80185a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80185a6:	ec4b ab10 	vmov	d0, sl, fp
 80185aa:	f002 fc0b 	bl	801adc4 <__ulp>
 80185ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80185b2:	ec51 0b10 	vmov	r0, r1, d0
 80185b6:	f7ea fa51 	bl	8002a5c <__aeabi_dmul>
 80185ba:	4652      	mov	r2, sl
 80185bc:	465b      	mov	r3, fp
 80185be:	f7ea f897 	bl	80026f0 <__adddf3>
 80185c2:	460b      	mov	r3, r1
 80185c4:	4949      	ldr	r1, [pc, #292]	@ (80186ec <_strtod_l+0xaf4>)
 80185c6:	4a4e      	ldr	r2, [pc, #312]	@ (8018700 <_strtod_l+0xb08>)
 80185c8:	4019      	ands	r1, r3
 80185ca:	4291      	cmp	r1, r2
 80185cc:	4682      	mov	sl, r0
 80185ce:	d942      	bls.n	8018656 <_strtod_l+0xa5e>
 80185d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80185d2:	4b47      	ldr	r3, [pc, #284]	@ (80186f0 <_strtod_l+0xaf8>)
 80185d4:	429a      	cmp	r2, r3
 80185d6:	d103      	bne.n	80185e0 <_strtod_l+0x9e8>
 80185d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80185da:	3301      	adds	r3, #1
 80185dc:	f43f ad2b 	beq.w	8018036 <_strtod_l+0x43e>
 80185e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80186f0 <_strtod_l+0xaf8>
 80185e4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80185e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80185ea:	9805      	ldr	r0, [sp, #20]
 80185ec:	f002 f8b6 	bl	801a75c <_Bfree>
 80185f0:	9805      	ldr	r0, [sp, #20]
 80185f2:	4649      	mov	r1, r9
 80185f4:	f002 f8b2 	bl	801a75c <_Bfree>
 80185f8:	9805      	ldr	r0, [sp, #20]
 80185fa:	4641      	mov	r1, r8
 80185fc:	f002 f8ae 	bl	801a75c <_Bfree>
 8018600:	9805      	ldr	r0, [sp, #20]
 8018602:	4621      	mov	r1, r4
 8018604:	f002 f8aa 	bl	801a75c <_Bfree>
 8018608:	e618      	b.n	801823c <_strtod_l+0x644>
 801860a:	f1ba 0f01 	cmp.w	sl, #1
 801860e:	d103      	bne.n	8018618 <_strtod_l+0xa20>
 8018610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018612:	2b00      	cmp	r3, #0
 8018614:	f43f ada5 	beq.w	8018162 <_strtod_l+0x56a>
 8018618:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80186c8 <_strtod_l+0xad0>
 801861c:	4f35      	ldr	r7, [pc, #212]	@ (80186f4 <_strtod_l+0xafc>)
 801861e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018622:	2600      	movs	r6, #0
 8018624:	e7b1      	b.n	801858a <_strtod_l+0x992>
 8018626:	4f34      	ldr	r7, [pc, #208]	@ (80186f8 <_strtod_l+0xb00>)
 8018628:	2600      	movs	r6, #0
 801862a:	e7aa      	b.n	8018582 <_strtod_l+0x98a>
 801862c:	4b32      	ldr	r3, [pc, #200]	@ (80186f8 <_strtod_l+0xb00>)
 801862e:	4630      	mov	r0, r6
 8018630:	4639      	mov	r1, r7
 8018632:	2200      	movs	r2, #0
 8018634:	f7ea fa12 	bl	8002a5c <__aeabi_dmul>
 8018638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801863a:	4606      	mov	r6, r0
 801863c:	460f      	mov	r7, r1
 801863e:	2b00      	cmp	r3, #0
 8018640:	d09f      	beq.n	8018582 <_strtod_l+0x98a>
 8018642:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8018646:	e7a0      	b.n	801858a <_strtod_l+0x992>
 8018648:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80186d0 <_strtod_l+0xad8>
 801864c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018650:	ec57 6b17 	vmov	r6, r7, d7
 8018654:	e799      	b.n	801858a <_strtod_l+0x992>
 8018656:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801865a:	9b08      	ldr	r3, [sp, #32]
 801865c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8018660:	2b00      	cmp	r3, #0
 8018662:	d1c1      	bne.n	80185e8 <_strtod_l+0x9f0>
 8018664:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018668:	0d1b      	lsrs	r3, r3, #20
 801866a:	051b      	lsls	r3, r3, #20
 801866c:	429d      	cmp	r5, r3
 801866e:	d1bb      	bne.n	80185e8 <_strtod_l+0x9f0>
 8018670:	4630      	mov	r0, r6
 8018672:	4639      	mov	r1, r7
 8018674:	f7ea fd52 	bl	800311c <__aeabi_d2lz>
 8018678:	f7ea f9c2 	bl	8002a00 <__aeabi_l2d>
 801867c:	4602      	mov	r2, r0
 801867e:	460b      	mov	r3, r1
 8018680:	4630      	mov	r0, r6
 8018682:	4639      	mov	r1, r7
 8018684:	f7ea f832 	bl	80026ec <__aeabi_dsub>
 8018688:	460b      	mov	r3, r1
 801868a:	4602      	mov	r2, r0
 801868c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8018690:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8018694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018696:	ea46 060a 	orr.w	r6, r6, sl
 801869a:	431e      	orrs	r6, r3
 801869c:	d06f      	beq.n	801877e <_strtod_l+0xb86>
 801869e:	a30e      	add	r3, pc, #56	@ (adr r3, 80186d8 <_strtod_l+0xae0>)
 80186a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186a4:	f7ea fc4c 	bl	8002f40 <__aeabi_dcmplt>
 80186a8:	2800      	cmp	r0, #0
 80186aa:	f47f accf 	bne.w	801804c <_strtod_l+0x454>
 80186ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80186e0 <_strtod_l+0xae8>)
 80186b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80186b8:	f7ea fc60 	bl	8002f7c <__aeabi_dcmpgt>
 80186bc:	2800      	cmp	r0, #0
 80186be:	d093      	beq.n	80185e8 <_strtod_l+0x9f0>
 80186c0:	e4c4      	b.n	801804c <_strtod_l+0x454>
 80186c2:	bf00      	nop
 80186c4:	f3af 8000 	nop.w
 80186c8:	00000000 	.word	0x00000000
 80186cc:	bff00000 	.word	0xbff00000
 80186d0:	00000000 	.word	0x00000000
 80186d4:	3ff00000 	.word	0x3ff00000
 80186d8:	94a03595 	.word	0x94a03595
 80186dc:	3fdfffff 	.word	0x3fdfffff
 80186e0:	35afe535 	.word	0x35afe535
 80186e4:	3fe00000 	.word	0x3fe00000
 80186e8:	000fffff 	.word	0x000fffff
 80186ec:	7ff00000 	.word	0x7ff00000
 80186f0:	7fefffff 	.word	0x7fefffff
 80186f4:	3ff00000 	.word	0x3ff00000
 80186f8:	3fe00000 	.word	0x3fe00000
 80186fc:	7fe00000 	.word	0x7fe00000
 8018700:	7c9fffff 	.word	0x7c9fffff
 8018704:	9b08      	ldr	r3, [sp, #32]
 8018706:	b323      	cbz	r3, 8018752 <_strtod_l+0xb5a>
 8018708:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801870c:	d821      	bhi.n	8018752 <_strtod_l+0xb5a>
 801870e:	a328      	add	r3, pc, #160	@ (adr r3, 80187b0 <_strtod_l+0xbb8>)
 8018710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018714:	4630      	mov	r0, r6
 8018716:	4639      	mov	r1, r7
 8018718:	f7ea fc1c 	bl	8002f54 <__aeabi_dcmple>
 801871c:	b1a0      	cbz	r0, 8018748 <_strtod_l+0xb50>
 801871e:	4639      	mov	r1, r7
 8018720:	4630      	mov	r0, r6
 8018722:	f7ea fc73 	bl	800300c <__aeabi_d2uiz>
 8018726:	2801      	cmp	r0, #1
 8018728:	bf38      	it	cc
 801872a:	2001      	movcc	r0, #1
 801872c:	f7ea f91c 	bl	8002968 <__aeabi_ui2d>
 8018730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018732:	4606      	mov	r6, r0
 8018734:	460f      	mov	r7, r1
 8018736:	b9fb      	cbnz	r3, 8018778 <_strtod_l+0xb80>
 8018738:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801873c:	9014      	str	r0, [sp, #80]	@ 0x50
 801873e:	9315      	str	r3, [sp, #84]	@ 0x54
 8018740:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8018744:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8018748:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801874a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801874e:	1b5b      	subs	r3, r3, r5
 8018750:	9311      	str	r3, [sp, #68]	@ 0x44
 8018752:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018756:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801875a:	f002 fb33 	bl	801adc4 <__ulp>
 801875e:	4650      	mov	r0, sl
 8018760:	ec53 2b10 	vmov	r2, r3, d0
 8018764:	4659      	mov	r1, fp
 8018766:	f7ea f979 	bl	8002a5c <__aeabi_dmul>
 801876a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801876e:	f7e9 ffbf 	bl	80026f0 <__adddf3>
 8018772:	4682      	mov	sl, r0
 8018774:	468b      	mov	fp, r1
 8018776:	e770      	b.n	801865a <_strtod_l+0xa62>
 8018778:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801877c:	e7e0      	b.n	8018740 <_strtod_l+0xb48>
 801877e:	a30e      	add	r3, pc, #56	@ (adr r3, 80187b8 <_strtod_l+0xbc0>)
 8018780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018784:	f7ea fbdc 	bl	8002f40 <__aeabi_dcmplt>
 8018788:	e798      	b.n	80186bc <_strtod_l+0xac4>
 801878a:	2300      	movs	r3, #0
 801878c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801878e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8018790:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018792:	6013      	str	r3, [r2, #0]
 8018794:	f7ff ba6d 	b.w	8017c72 <_strtod_l+0x7a>
 8018798:	2a65      	cmp	r2, #101	@ 0x65
 801879a:	f43f ab66 	beq.w	8017e6a <_strtod_l+0x272>
 801879e:	2a45      	cmp	r2, #69	@ 0x45
 80187a0:	f43f ab63 	beq.w	8017e6a <_strtod_l+0x272>
 80187a4:	2301      	movs	r3, #1
 80187a6:	f7ff bb9e 	b.w	8017ee6 <_strtod_l+0x2ee>
 80187aa:	bf00      	nop
 80187ac:	f3af 8000 	nop.w
 80187b0:	ffc00000 	.word	0xffc00000
 80187b4:	41dfffff 	.word	0x41dfffff
 80187b8:	94a03595 	.word	0x94a03595
 80187bc:	3fcfffff 	.word	0x3fcfffff

080187c0 <_strtod_r>:
 80187c0:	4b01      	ldr	r3, [pc, #4]	@ (80187c8 <_strtod_r+0x8>)
 80187c2:	f7ff ba19 	b.w	8017bf8 <_strtod_l>
 80187c6:	bf00      	nop
 80187c8:	20000328 	.word	0x20000328

080187cc <_strtol_l.constprop.0>:
 80187cc:	2b24      	cmp	r3, #36	@ 0x24
 80187ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187d2:	4686      	mov	lr, r0
 80187d4:	4690      	mov	r8, r2
 80187d6:	d801      	bhi.n	80187dc <_strtol_l.constprop.0+0x10>
 80187d8:	2b01      	cmp	r3, #1
 80187da:	d106      	bne.n	80187ea <_strtol_l.constprop.0+0x1e>
 80187dc:	f000 f9ea 	bl	8018bb4 <__errno>
 80187e0:	2316      	movs	r3, #22
 80187e2:	6003      	str	r3, [r0, #0]
 80187e4:	2000      	movs	r0, #0
 80187e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187ea:	4834      	ldr	r0, [pc, #208]	@ (80188bc <_strtol_l.constprop.0+0xf0>)
 80187ec:	460d      	mov	r5, r1
 80187ee:	462a      	mov	r2, r5
 80187f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80187f4:	5d06      	ldrb	r6, [r0, r4]
 80187f6:	f016 0608 	ands.w	r6, r6, #8
 80187fa:	d1f8      	bne.n	80187ee <_strtol_l.constprop.0+0x22>
 80187fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80187fe:	d12d      	bne.n	801885c <_strtol_l.constprop.0+0x90>
 8018800:	782c      	ldrb	r4, [r5, #0]
 8018802:	2601      	movs	r6, #1
 8018804:	1c95      	adds	r5, r2, #2
 8018806:	f033 0210 	bics.w	r2, r3, #16
 801880a:	d109      	bne.n	8018820 <_strtol_l.constprop.0+0x54>
 801880c:	2c30      	cmp	r4, #48	@ 0x30
 801880e:	d12a      	bne.n	8018866 <_strtol_l.constprop.0+0x9a>
 8018810:	782a      	ldrb	r2, [r5, #0]
 8018812:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018816:	2a58      	cmp	r2, #88	@ 0x58
 8018818:	d125      	bne.n	8018866 <_strtol_l.constprop.0+0x9a>
 801881a:	786c      	ldrb	r4, [r5, #1]
 801881c:	2310      	movs	r3, #16
 801881e:	3502      	adds	r5, #2
 8018820:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8018824:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8018828:	2200      	movs	r2, #0
 801882a:	fbbc f9f3 	udiv	r9, ip, r3
 801882e:	4610      	mov	r0, r2
 8018830:	fb03 ca19 	mls	sl, r3, r9, ip
 8018834:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8018838:	2f09      	cmp	r7, #9
 801883a:	d81b      	bhi.n	8018874 <_strtol_l.constprop.0+0xa8>
 801883c:	463c      	mov	r4, r7
 801883e:	42a3      	cmp	r3, r4
 8018840:	dd27      	ble.n	8018892 <_strtol_l.constprop.0+0xc6>
 8018842:	1c57      	adds	r7, r2, #1
 8018844:	d007      	beq.n	8018856 <_strtol_l.constprop.0+0x8a>
 8018846:	4581      	cmp	r9, r0
 8018848:	d320      	bcc.n	801888c <_strtol_l.constprop.0+0xc0>
 801884a:	d101      	bne.n	8018850 <_strtol_l.constprop.0+0x84>
 801884c:	45a2      	cmp	sl, r4
 801884e:	db1d      	blt.n	801888c <_strtol_l.constprop.0+0xc0>
 8018850:	fb00 4003 	mla	r0, r0, r3, r4
 8018854:	2201      	movs	r2, #1
 8018856:	f815 4b01 	ldrb.w	r4, [r5], #1
 801885a:	e7eb      	b.n	8018834 <_strtol_l.constprop.0+0x68>
 801885c:	2c2b      	cmp	r4, #43	@ 0x2b
 801885e:	bf04      	itt	eq
 8018860:	782c      	ldrbeq	r4, [r5, #0]
 8018862:	1c95      	addeq	r5, r2, #2
 8018864:	e7cf      	b.n	8018806 <_strtol_l.constprop.0+0x3a>
 8018866:	2b00      	cmp	r3, #0
 8018868:	d1da      	bne.n	8018820 <_strtol_l.constprop.0+0x54>
 801886a:	2c30      	cmp	r4, #48	@ 0x30
 801886c:	bf0c      	ite	eq
 801886e:	2308      	moveq	r3, #8
 8018870:	230a      	movne	r3, #10
 8018872:	e7d5      	b.n	8018820 <_strtol_l.constprop.0+0x54>
 8018874:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8018878:	2f19      	cmp	r7, #25
 801887a:	d801      	bhi.n	8018880 <_strtol_l.constprop.0+0xb4>
 801887c:	3c37      	subs	r4, #55	@ 0x37
 801887e:	e7de      	b.n	801883e <_strtol_l.constprop.0+0x72>
 8018880:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8018884:	2f19      	cmp	r7, #25
 8018886:	d804      	bhi.n	8018892 <_strtol_l.constprop.0+0xc6>
 8018888:	3c57      	subs	r4, #87	@ 0x57
 801888a:	e7d8      	b.n	801883e <_strtol_l.constprop.0+0x72>
 801888c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018890:	e7e1      	b.n	8018856 <_strtol_l.constprop.0+0x8a>
 8018892:	1c53      	adds	r3, r2, #1
 8018894:	d108      	bne.n	80188a8 <_strtol_l.constprop.0+0xdc>
 8018896:	2322      	movs	r3, #34	@ 0x22
 8018898:	f8ce 3000 	str.w	r3, [lr]
 801889c:	4660      	mov	r0, ip
 801889e:	f1b8 0f00 	cmp.w	r8, #0
 80188a2:	d0a0      	beq.n	80187e6 <_strtol_l.constprop.0+0x1a>
 80188a4:	1e69      	subs	r1, r5, #1
 80188a6:	e006      	b.n	80188b6 <_strtol_l.constprop.0+0xea>
 80188a8:	b106      	cbz	r6, 80188ac <_strtol_l.constprop.0+0xe0>
 80188aa:	4240      	negs	r0, r0
 80188ac:	f1b8 0f00 	cmp.w	r8, #0
 80188b0:	d099      	beq.n	80187e6 <_strtol_l.constprop.0+0x1a>
 80188b2:	2a00      	cmp	r2, #0
 80188b4:	d1f6      	bne.n	80188a4 <_strtol_l.constprop.0+0xd8>
 80188b6:	f8c8 1000 	str.w	r1, [r8]
 80188ba:	e794      	b.n	80187e6 <_strtol_l.constprop.0+0x1a>
 80188bc:	0801c4e2 	.word	0x0801c4e2

080188c0 <_strtol_r>:
 80188c0:	f7ff bf84 	b.w	80187cc <_strtol_l.constprop.0>

080188c4 <strtol>:
 80188c4:	4613      	mov	r3, r2
 80188c6:	460a      	mov	r2, r1
 80188c8:	4601      	mov	r1, r0
 80188ca:	4802      	ldr	r0, [pc, #8]	@ (80188d4 <strtol+0x10>)
 80188cc:	6800      	ldr	r0, [r0, #0]
 80188ce:	f7ff bf7d 	b.w	80187cc <_strtol_l.constprop.0>
 80188d2:	bf00      	nop
 80188d4:	20000494 	.word	0x20000494

080188d8 <_fwalk_sglue>:
 80188d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188dc:	4607      	mov	r7, r0
 80188de:	4688      	mov	r8, r1
 80188e0:	4614      	mov	r4, r2
 80188e2:	2600      	movs	r6, #0
 80188e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80188e8:	f1b9 0901 	subs.w	r9, r9, #1
 80188ec:	d505      	bpl.n	80188fa <_fwalk_sglue+0x22>
 80188ee:	6824      	ldr	r4, [r4, #0]
 80188f0:	2c00      	cmp	r4, #0
 80188f2:	d1f7      	bne.n	80188e4 <_fwalk_sglue+0xc>
 80188f4:	4630      	mov	r0, r6
 80188f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80188fa:	89ab      	ldrh	r3, [r5, #12]
 80188fc:	2b01      	cmp	r3, #1
 80188fe:	d907      	bls.n	8018910 <_fwalk_sglue+0x38>
 8018900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018904:	3301      	adds	r3, #1
 8018906:	d003      	beq.n	8018910 <_fwalk_sglue+0x38>
 8018908:	4629      	mov	r1, r5
 801890a:	4638      	mov	r0, r7
 801890c:	47c0      	blx	r8
 801890e:	4306      	orrs	r6, r0
 8018910:	3568      	adds	r5, #104	@ 0x68
 8018912:	e7e9      	b.n	80188e8 <_fwalk_sglue+0x10>

08018914 <iprintf>:
 8018914:	b40f      	push	{r0, r1, r2, r3}
 8018916:	b507      	push	{r0, r1, r2, lr}
 8018918:	4906      	ldr	r1, [pc, #24]	@ (8018934 <iprintf+0x20>)
 801891a:	ab04      	add	r3, sp, #16
 801891c:	6808      	ldr	r0, [r1, #0]
 801891e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018922:	6881      	ldr	r1, [r0, #8]
 8018924:	9301      	str	r3, [sp, #4]
 8018926:	f001 fd03 	bl	801a330 <_vfiprintf_r>
 801892a:	b003      	add	sp, #12
 801892c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018930:	b004      	add	sp, #16
 8018932:	4770      	bx	lr
 8018934:	20000494 	.word	0x20000494

08018938 <_puts_r>:
 8018938:	6a03      	ldr	r3, [r0, #32]
 801893a:	b570      	push	{r4, r5, r6, lr}
 801893c:	6884      	ldr	r4, [r0, #8]
 801893e:	4605      	mov	r5, r0
 8018940:	460e      	mov	r6, r1
 8018942:	b90b      	cbnz	r3, 8018948 <_puts_r+0x10>
 8018944:	f7ff f922 	bl	8017b8c <__sinit>
 8018948:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801894a:	07db      	lsls	r3, r3, #31
 801894c:	d405      	bmi.n	801895a <_puts_r+0x22>
 801894e:	89a3      	ldrh	r3, [r4, #12]
 8018950:	0598      	lsls	r0, r3, #22
 8018952:	d402      	bmi.n	801895a <_puts_r+0x22>
 8018954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018956:	f000 f958 	bl	8018c0a <__retarget_lock_acquire_recursive>
 801895a:	89a3      	ldrh	r3, [r4, #12]
 801895c:	0719      	lsls	r1, r3, #28
 801895e:	d502      	bpl.n	8018966 <_puts_r+0x2e>
 8018960:	6923      	ldr	r3, [r4, #16]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d135      	bne.n	80189d2 <_puts_r+0x9a>
 8018966:	4621      	mov	r1, r4
 8018968:	4628      	mov	r0, r5
 801896a:	f002 fc2b 	bl	801b1c4 <__swsetup_r>
 801896e:	b380      	cbz	r0, 80189d2 <_puts_r+0x9a>
 8018970:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8018974:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018976:	07da      	lsls	r2, r3, #31
 8018978:	d405      	bmi.n	8018986 <_puts_r+0x4e>
 801897a:	89a3      	ldrh	r3, [r4, #12]
 801897c:	059b      	lsls	r3, r3, #22
 801897e:	d402      	bmi.n	8018986 <_puts_r+0x4e>
 8018980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018982:	f000 f943 	bl	8018c0c <__retarget_lock_release_recursive>
 8018986:	4628      	mov	r0, r5
 8018988:	bd70      	pop	{r4, r5, r6, pc}
 801898a:	2b00      	cmp	r3, #0
 801898c:	da04      	bge.n	8018998 <_puts_r+0x60>
 801898e:	69a2      	ldr	r2, [r4, #24]
 8018990:	429a      	cmp	r2, r3
 8018992:	dc17      	bgt.n	80189c4 <_puts_r+0x8c>
 8018994:	290a      	cmp	r1, #10
 8018996:	d015      	beq.n	80189c4 <_puts_r+0x8c>
 8018998:	6823      	ldr	r3, [r4, #0]
 801899a:	1c5a      	adds	r2, r3, #1
 801899c:	6022      	str	r2, [r4, #0]
 801899e:	7019      	strb	r1, [r3, #0]
 80189a0:	68a3      	ldr	r3, [r4, #8]
 80189a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80189a6:	3b01      	subs	r3, #1
 80189a8:	60a3      	str	r3, [r4, #8]
 80189aa:	2900      	cmp	r1, #0
 80189ac:	d1ed      	bne.n	801898a <_puts_r+0x52>
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	da11      	bge.n	80189d6 <_puts_r+0x9e>
 80189b2:	4622      	mov	r2, r4
 80189b4:	210a      	movs	r1, #10
 80189b6:	4628      	mov	r0, r5
 80189b8:	f002 fbc6 	bl	801b148 <__swbuf_r>
 80189bc:	3001      	adds	r0, #1
 80189be:	d0d7      	beq.n	8018970 <_puts_r+0x38>
 80189c0:	250a      	movs	r5, #10
 80189c2:	e7d7      	b.n	8018974 <_puts_r+0x3c>
 80189c4:	4622      	mov	r2, r4
 80189c6:	4628      	mov	r0, r5
 80189c8:	f002 fbbe 	bl	801b148 <__swbuf_r>
 80189cc:	3001      	adds	r0, #1
 80189ce:	d1e7      	bne.n	80189a0 <_puts_r+0x68>
 80189d0:	e7ce      	b.n	8018970 <_puts_r+0x38>
 80189d2:	3e01      	subs	r6, #1
 80189d4:	e7e4      	b.n	80189a0 <_puts_r+0x68>
 80189d6:	6823      	ldr	r3, [r4, #0]
 80189d8:	1c5a      	adds	r2, r3, #1
 80189da:	6022      	str	r2, [r4, #0]
 80189dc:	220a      	movs	r2, #10
 80189de:	701a      	strb	r2, [r3, #0]
 80189e0:	e7ee      	b.n	80189c0 <_puts_r+0x88>
	...

080189e4 <puts>:
 80189e4:	4b02      	ldr	r3, [pc, #8]	@ (80189f0 <puts+0xc>)
 80189e6:	4601      	mov	r1, r0
 80189e8:	6818      	ldr	r0, [r3, #0]
 80189ea:	f7ff bfa5 	b.w	8018938 <_puts_r>
 80189ee:	bf00      	nop
 80189f0:	20000494 	.word	0x20000494

080189f4 <strncmp>:
 80189f4:	b510      	push	{r4, lr}
 80189f6:	b16a      	cbz	r2, 8018a14 <strncmp+0x20>
 80189f8:	3901      	subs	r1, #1
 80189fa:	1884      	adds	r4, r0, r2
 80189fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018a04:	429a      	cmp	r2, r3
 8018a06:	d103      	bne.n	8018a10 <strncmp+0x1c>
 8018a08:	42a0      	cmp	r0, r4
 8018a0a:	d001      	beq.n	8018a10 <strncmp+0x1c>
 8018a0c:	2a00      	cmp	r2, #0
 8018a0e:	d1f5      	bne.n	80189fc <strncmp+0x8>
 8018a10:	1ad0      	subs	r0, r2, r3
 8018a12:	bd10      	pop	{r4, pc}
 8018a14:	4610      	mov	r0, r2
 8018a16:	e7fc      	b.n	8018a12 <strncmp+0x1e>

08018a18 <strtok>:
 8018a18:	4b16      	ldr	r3, [pc, #88]	@ (8018a74 <strtok+0x5c>)
 8018a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a1e:	681f      	ldr	r7, [r3, #0]
 8018a20:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8018a22:	4605      	mov	r5, r0
 8018a24:	460e      	mov	r6, r1
 8018a26:	b9ec      	cbnz	r4, 8018a64 <strtok+0x4c>
 8018a28:	2050      	movs	r0, #80	@ 0x50
 8018a2a:	f7fe fbab 	bl	8017184 <malloc>
 8018a2e:	4602      	mov	r2, r0
 8018a30:	6478      	str	r0, [r7, #68]	@ 0x44
 8018a32:	b920      	cbnz	r0, 8018a3e <strtok+0x26>
 8018a34:	4b10      	ldr	r3, [pc, #64]	@ (8018a78 <strtok+0x60>)
 8018a36:	4811      	ldr	r0, [pc, #68]	@ (8018a7c <strtok+0x64>)
 8018a38:	215b      	movs	r1, #91	@ 0x5b
 8018a3a:	f000 f90b 	bl	8018c54 <__assert_func>
 8018a3e:	e9c0 4400 	strd	r4, r4, [r0]
 8018a42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8018a46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8018a4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8018a4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8018a52:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8018a56:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8018a5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8018a5e:	6184      	str	r4, [r0, #24]
 8018a60:	7704      	strb	r4, [r0, #28]
 8018a62:	6244      	str	r4, [r0, #36]	@ 0x24
 8018a64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018a66:	4631      	mov	r1, r6
 8018a68:	4628      	mov	r0, r5
 8018a6a:	2301      	movs	r3, #1
 8018a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a70:	f000 b806 	b.w	8018a80 <__strtok_r>
 8018a74:	20000494 	.word	0x20000494
 8018a78:	0801c468 	.word	0x0801c468
 8018a7c:	0801c47f 	.word	0x0801c47f

08018a80 <__strtok_r>:
 8018a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a82:	4604      	mov	r4, r0
 8018a84:	b908      	cbnz	r0, 8018a8a <__strtok_r+0xa>
 8018a86:	6814      	ldr	r4, [r2, #0]
 8018a88:	b144      	cbz	r4, 8018a9c <__strtok_r+0x1c>
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018a90:	460f      	mov	r7, r1
 8018a92:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018a96:	b91e      	cbnz	r6, 8018aa0 <__strtok_r+0x20>
 8018a98:	b965      	cbnz	r5, 8018ab4 <__strtok_r+0x34>
 8018a9a:	6015      	str	r5, [r2, #0]
 8018a9c:	2000      	movs	r0, #0
 8018a9e:	e005      	b.n	8018aac <__strtok_r+0x2c>
 8018aa0:	42b5      	cmp	r5, r6
 8018aa2:	d1f6      	bne.n	8018a92 <__strtok_r+0x12>
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d1f0      	bne.n	8018a8a <__strtok_r+0xa>
 8018aa8:	6014      	str	r4, [r2, #0]
 8018aaa:	7003      	strb	r3, [r0, #0]
 8018aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018aae:	461c      	mov	r4, r3
 8018ab0:	e00c      	b.n	8018acc <__strtok_r+0x4c>
 8018ab2:	b915      	cbnz	r5, 8018aba <__strtok_r+0x3a>
 8018ab4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018ab8:	460e      	mov	r6, r1
 8018aba:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018abe:	42ab      	cmp	r3, r5
 8018ac0:	d1f7      	bne.n	8018ab2 <__strtok_r+0x32>
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d0f3      	beq.n	8018aae <__strtok_r+0x2e>
 8018ac6:	2300      	movs	r3, #0
 8018ac8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018acc:	6014      	str	r4, [r2, #0]
 8018ace:	e7ed      	b.n	8018aac <__strtok_r+0x2c>

08018ad0 <memset>:
 8018ad0:	4402      	add	r2, r0
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	4293      	cmp	r3, r2
 8018ad6:	d100      	bne.n	8018ada <memset+0xa>
 8018ad8:	4770      	bx	lr
 8018ada:	f803 1b01 	strb.w	r1, [r3], #1
 8018ade:	e7f9      	b.n	8018ad4 <memset+0x4>

08018ae0 <_localeconv_r>:
 8018ae0:	4800      	ldr	r0, [pc, #0]	@ (8018ae4 <_localeconv_r+0x4>)
 8018ae2:	4770      	bx	lr
 8018ae4:	20000418 	.word	0x20000418

08018ae8 <_reclaim_reent>:
 8018ae8:	4b29      	ldr	r3, [pc, #164]	@ (8018b90 <_reclaim_reent+0xa8>)
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	4283      	cmp	r3, r0
 8018aee:	b570      	push	{r4, r5, r6, lr}
 8018af0:	4604      	mov	r4, r0
 8018af2:	d04b      	beq.n	8018b8c <_reclaim_reent+0xa4>
 8018af4:	69c3      	ldr	r3, [r0, #28]
 8018af6:	b1ab      	cbz	r3, 8018b24 <_reclaim_reent+0x3c>
 8018af8:	68db      	ldr	r3, [r3, #12]
 8018afa:	b16b      	cbz	r3, 8018b18 <_reclaim_reent+0x30>
 8018afc:	2500      	movs	r5, #0
 8018afe:	69e3      	ldr	r3, [r4, #28]
 8018b00:	68db      	ldr	r3, [r3, #12]
 8018b02:	5959      	ldr	r1, [r3, r5]
 8018b04:	2900      	cmp	r1, #0
 8018b06:	d13b      	bne.n	8018b80 <_reclaim_reent+0x98>
 8018b08:	3504      	adds	r5, #4
 8018b0a:	2d80      	cmp	r5, #128	@ 0x80
 8018b0c:	d1f7      	bne.n	8018afe <_reclaim_reent+0x16>
 8018b0e:	69e3      	ldr	r3, [r4, #28]
 8018b10:	4620      	mov	r0, r4
 8018b12:	68d9      	ldr	r1, [r3, #12]
 8018b14:	f000 ff08 	bl	8019928 <_free_r>
 8018b18:	69e3      	ldr	r3, [r4, #28]
 8018b1a:	6819      	ldr	r1, [r3, #0]
 8018b1c:	b111      	cbz	r1, 8018b24 <_reclaim_reent+0x3c>
 8018b1e:	4620      	mov	r0, r4
 8018b20:	f000 ff02 	bl	8019928 <_free_r>
 8018b24:	6961      	ldr	r1, [r4, #20]
 8018b26:	b111      	cbz	r1, 8018b2e <_reclaim_reent+0x46>
 8018b28:	4620      	mov	r0, r4
 8018b2a:	f000 fefd 	bl	8019928 <_free_r>
 8018b2e:	69e1      	ldr	r1, [r4, #28]
 8018b30:	b111      	cbz	r1, 8018b38 <_reclaim_reent+0x50>
 8018b32:	4620      	mov	r0, r4
 8018b34:	f000 fef8 	bl	8019928 <_free_r>
 8018b38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018b3a:	b111      	cbz	r1, 8018b42 <_reclaim_reent+0x5a>
 8018b3c:	4620      	mov	r0, r4
 8018b3e:	f000 fef3 	bl	8019928 <_free_r>
 8018b42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018b44:	b111      	cbz	r1, 8018b4c <_reclaim_reent+0x64>
 8018b46:	4620      	mov	r0, r4
 8018b48:	f000 feee 	bl	8019928 <_free_r>
 8018b4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8018b4e:	b111      	cbz	r1, 8018b56 <_reclaim_reent+0x6e>
 8018b50:	4620      	mov	r0, r4
 8018b52:	f000 fee9 	bl	8019928 <_free_r>
 8018b56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8018b58:	b111      	cbz	r1, 8018b60 <_reclaim_reent+0x78>
 8018b5a:	4620      	mov	r0, r4
 8018b5c:	f000 fee4 	bl	8019928 <_free_r>
 8018b60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8018b62:	b111      	cbz	r1, 8018b6a <_reclaim_reent+0x82>
 8018b64:	4620      	mov	r0, r4
 8018b66:	f000 fedf 	bl	8019928 <_free_r>
 8018b6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018b6c:	b111      	cbz	r1, 8018b74 <_reclaim_reent+0x8c>
 8018b6e:	4620      	mov	r0, r4
 8018b70:	f000 feda 	bl	8019928 <_free_r>
 8018b74:	6a23      	ldr	r3, [r4, #32]
 8018b76:	b14b      	cbz	r3, 8018b8c <_reclaim_reent+0xa4>
 8018b78:	4620      	mov	r0, r4
 8018b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b7e:	4718      	bx	r3
 8018b80:	680e      	ldr	r6, [r1, #0]
 8018b82:	4620      	mov	r0, r4
 8018b84:	f000 fed0 	bl	8019928 <_free_r>
 8018b88:	4631      	mov	r1, r6
 8018b8a:	e7bb      	b.n	8018b04 <_reclaim_reent+0x1c>
 8018b8c:	bd70      	pop	{r4, r5, r6, pc}
 8018b8e:	bf00      	nop
 8018b90:	20000494 	.word	0x20000494

08018b94 <_sbrk_r>:
 8018b94:	b538      	push	{r3, r4, r5, lr}
 8018b96:	4d06      	ldr	r5, [pc, #24]	@ (8018bb0 <_sbrk_r+0x1c>)
 8018b98:	2300      	movs	r3, #0
 8018b9a:	4604      	mov	r4, r0
 8018b9c:	4608      	mov	r0, r1
 8018b9e:	602b      	str	r3, [r5, #0]
 8018ba0:	f7eb fbf0 	bl	8004384 <_sbrk>
 8018ba4:	1c43      	adds	r3, r0, #1
 8018ba6:	d102      	bne.n	8018bae <_sbrk_r+0x1a>
 8018ba8:	682b      	ldr	r3, [r5, #0]
 8018baa:	b103      	cbz	r3, 8018bae <_sbrk_r+0x1a>
 8018bac:	6023      	str	r3, [r4, #0]
 8018bae:	bd38      	pop	{r3, r4, r5, pc}
 8018bb0:	2000792c 	.word	0x2000792c

08018bb4 <__errno>:
 8018bb4:	4b01      	ldr	r3, [pc, #4]	@ (8018bbc <__errno+0x8>)
 8018bb6:	6818      	ldr	r0, [r3, #0]
 8018bb8:	4770      	bx	lr
 8018bba:	bf00      	nop
 8018bbc:	20000494 	.word	0x20000494

08018bc0 <__libc_init_array>:
 8018bc0:	b570      	push	{r4, r5, r6, lr}
 8018bc2:	4d0d      	ldr	r5, [pc, #52]	@ (8018bf8 <__libc_init_array+0x38>)
 8018bc4:	4c0d      	ldr	r4, [pc, #52]	@ (8018bfc <__libc_init_array+0x3c>)
 8018bc6:	1b64      	subs	r4, r4, r5
 8018bc8:	10a4      	asrs	r4, r4, #2
 8018bca:	2600      	movs	r6, #0
 8018bcc:	42a6      	cmp	r6, r4
 8018bce:	d109      	bne.n	8018be4 <__libc_init_array+0x24>
 8018bd0:	4d0b      	ldr	r5, [pc, #44]	@ (8018c00 <__libc_init_array+0x40>)
 8018bd2:	4c0c      	ldr	r4, [pc, #48]	@ (8018c04 <__libc_init_array+0x44>)
 8018bd4:	f002 fcec 	bl	801b5b0 <_init>
 8018bd8:	1b64      	subs	r4, r4, r5
 8018bda:	10a4      	asrs	r4, r4, #2
 8018bdc:	2600      	movs	r6, #0
 8018bde:	42a6      	cmp	r6, r4
 8018be0:	d105      	bne.n	8018bee <__libc_init_array+0x2e>
 8018be2:	bd70      	pop	{r4, r5, r6, pc}
 8018be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8018be8:	4798      	blx	r3
 8018bea:	3601      	adds	r6, #1
 8018bec:	e7ee      	b.n	8018bcc <__libc_init_array+0xc>
 8018bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8018bf2:	4798      	blx	r3
 8018bf4:	3601      	adds	r6, #1
 8018bf6:	e7f2      	b.n	8018bde <__libc_init_array+0x1e>
 8018bf8:	0801c868 	.word	0x0801c868
 8018bfc:	0801c868 	.word	0x0801c868
 8018c00:	0801c868 	.word	0x0801c868
 8018c04:	0801c86c 	.word	0x0801c86c

08018c08 <__retarget_lock_init_recursive>:
 8018c08:	4770      	bx	lr

08018c0a <__retarget_lock_acquire_recursive>:
 8018c0a:	4770      	bx	lr

08018c0c <__retarget_lock_release_recursive>:
 8018c0c:	4770      	bx	lr

08018c0e <__aeabi_memclr>:
 8018c0e:	2200      	movs	r2, #0
 8018c10:	f7e9 bcb9 	b.w	8002586 <__aeabi_memset>

08018c14 <memcpy>:
 8018c14:	440a      	add	r2, r1
 8018c16:	4291      	cmp	r1, r2
 8018c18:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8018c1c:	d100      	bne.n	8018c20 <memcpy+0xc>
 8018c1e:	4770      	bx	lr
 8018c20:	b510      	push	{r4, lr}
 8018c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018c2a:	4291      	cmp	r1, r2
 8018c2c:	d1f9      	bne.n	8018c22 <memcpy+0xe>
 8018c2e:	bd10      	pop	{r4, pc}

08018c30 <__aeabi_memcpy>:
 8018c30:	f7ff bff0 	b.w	8018c14 <memcpy>
 8018c34:	0000      	movs	r0, r0
	...

08018c38 <nan>:
 8018c38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018c40 <nan+0x8>
 8018c3c:	4770      	bx	lr
 8018c3e:	bf00      	nop
 8018c40:	00000000 	.word	0x00000000
 8018c44:	7ff80000 	.word	0x7ff80000

08018c48 <nanf>:
 8018c48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018c50 <nanf+0x8>
 8018c4c:	4770      	bx	lr
 8018c4e:	bf00      	nop
 8018c50:	7fc00000 	.word	0x7fc00000

08018c54 <__assert_func>:
 8018c54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018c56:	4614      	mov	r4, r2
 8018c58:	461a      	mov	r2, r3
 8018c5a:	4b09      	ldr	r3, [pc, #36]	@ (8018c80 <__assert_func+0x2c>)
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	4605      	mov	r5, r0
 8018c60:	68d8      	ldr	r0, [r3, #12]
 8018c62:	b954      	cbnz	r4, 8018c7a <__assert_func+0x26>
 8018c64:	4b07      	ldr	r3, [pc, #28]	@ (8018c84 <__assert_func+0x30>)
 8018c66:	461c      	mov	r4, r3
 8018c68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018c6c:	9100      	str	r1, [sp, #0]
 8018c6e:	462b      	mov	r3, r5
 8018c70:	4905      	ldr	r1, [pc, #20]	@ (8018c88 <__assert_func+0x34>)
 8018c72:	f002 fa29 	bl	801b0c8 <fiprintf>
 8018c76:	f002 fbed 	bl	801b454 <abort>
 8018c7a:	4b04      	ldr	r3, [pc, #16]	@ (8018c8c <__assert_func+0x38>)
 8018c7c:	e7f4      	b.n	8018c68 <__assert_func+0x14>
 8018c7e:	bf00      	nop
 8018c80:	20000494 	.word	0x20000494
 8018c84:	0801c61d 	.word	0x0801c61d
 8018c88:	0801c5ef 	.word	0x0801c5ef
 8018c8c:	0801c5e2 	.word	0x0801c5e2

08018c90 <quorem>:
 8018c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c94:	6903      	ldr	r3, [r0, #16]
 8018c96:	690c      	ldr	r4, [r1, #16]
 8018c98:	42a3      	cmp	r3, r4
 8018c9a:	4607      	mov	r7, r0
 8018c9c:	db7e      	blt.n	8018d9c <quorem+0x10c>
 8018c9e:	3c01      	subs	r4, #1
 8018ca0:	f101 0814 	add.w	r8, r1, #20
 8018ca4:	00a3      	lsls	r3, r4, #2
 8018ca6:	f100 0514 	add.w	r5, r0, #20
 8018caa:	9300      	str	r3, [sp, #0]
 8018cac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018cb0:	9301      	str	r3, [sp, #4]
 8018cb2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018cb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018cba:	3301      	adds	r3, #1
 8018cbc:	429a      	cmp	r2, r3
 8018cbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018cc2:	fbb2 f6f3 	udiv	r6, r2, r3
 8018cc6:	d32e      	bcc.n	8018d26 <quorem+0x96>
 8018cc8:	f04f 0a00 	mov.w	sl, #0
 8018ccc:	46c4      	mov	ip, r8
 8018cce:	46ae      	mov	lr, r5
 8018cd0:	46d3      	mov	fp, sl
 8018cd2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018cd6:	b298      	uxth	r0, r3
 8018cd8:	fb06 a000 	mla	r0, r6, r0, sl
 8018cdc:	0c02      	lsrs	r2, r0, #16
 8018cde:	0c1b      	lsrs	r3, r3, #16
 8018ce0:	fb06 2303 	mla	r3, r6, r3, r2
 8018ce4:	f8de 2000 	ldr.w	r2, [lr]
 8018ce8:	b280      	uxth	r0, r0
 8018cea:	b292      	uxth	r2, r2
 8018cec:	1a12      	subs	r2, r2, r0
 8018cee:	445a      	add	r2, fp
 8018cf0:	f8de 0000 	ldr.w	r0, [lr]
 8018cf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018cf8:	b29b      	uxth	r3, r3
 8018cfa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8018cfe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8018d02:	b292      	uxth	r2, r2
 8018d04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8018d08:	45e1      	cmp	r9, ip
 8018d0a:	f84e 2b04 	str.w	r2, [lr], #4
 8018d0e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8018d12:	d2de      	bcs.n	8018cd2 <quorem+0x42>
 8018d14:	9b00      	ldr	r3, [sp, #0]
 8018d16:	58eb      	ldr	r3, [r5, r3]
 8018d18:	b92b      	cbnz	r3, 8018d26 <quorem+0x96>
 8018d1a:	9b01      	ldr	r3, [sp, #4]
 8018d1c:	3b04      	subs	r3, #4
 8018d1e:	429d      	cmp	r5, r3
 8018d20:	461a      	mov	r2, r3
 8018d22:	d32f      	bcc.n	8018d84 <quorem+0xf4>
 8018d24:	613c      	str	r4, [r7, #16]
 8018d26:	4638      	mov	r0, r7
 8018d28:	f001 ff9c 	bl	801ac64 <__mcmp>
 8018d2c:	2800      	cmp	r0, #0
 8018d2e:	db25      	blt.n	8018d7c <quorem+0xec>
 8018d30:	4629      	mov	r1, r5
 8018d32:	2000      	movs	r0, #0
 8018d34:	f858 2b04 	ldr.w	r2, [r8], #4
 8018d38:	f8d1 c000 	ldr.w	ip, [r1]
 8018d3c:	fa1f fe82 	uxth.w	lr, r2
 8018d40:	fa1f f38c 	uxth.w	r3, ip
 8018d44:	eba3 030e 	sub.w	r3, r3, lr
 8018d48:	4403      	add	r3, r0
 8018d4a:	0c12      	lsrs	r2, r2, #16
 8018d4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8018d50:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8018d54:	b29b      	uxth	r3, r3
 8018d56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018d5a:	45c1      	cmp	r9, r8
 8018d5c:	f841 3b04 	str.w	r3, [r1], #4
 8018d60:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018d64:	d2e6      	bcs.n	8018d34 <quorem+0xa4>
 8018d66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018d6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018d6e:	b922      	cbnz	r2, 8018d7a <quorem+0xea>
 8018d70:	3b04      	subs	r3, #4
 8018d72:	429d      	cmp	r5, r3
 8018d74:	461a      	mov	r2, r3
 8018d76:	d30b      	bcc.n	8018d90 <quorem+0x100>
 8018d78:	613c      	str	r4, [r7, #16]
 8018d7a:	3601      	adds	r6, #1
 8018d7c:	4630      	mov	r0, r6
 8018d7e:	b003      	add	sp, #12
 8018d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d84:	6812      	ldr	r2, [r2, #0]
 8018d86:	3b04      	subs	r3, #4
 8018d88:	2a00      	cmp	r2, #0
 8018d8a:	d1cb      	bne.n	8018d24 <quorem+0x94>
 8018d8c:	3c01      	subs	r4, #1
 8018d8e:	e7c6      	b.n	8018d1e <quorem+0x8e>
 8018d90:	6812      	ldr	r2, [r2, #0]
 8018d92:	3b04      	subs	r3, #4
 8018d94:	2a00      	cmp	r2, #0
 8018d96:	d1ef      	bne.n	8018d78 <quorem+0xe8>
 8018d98:	3c01      	subs	r4, #1
 8018d9a:	e7ea      	b.n	8018d72 <quorem+0xe2>
 8018d9c:	2000      	movs	r0, #0
 8018d9e:	e7ee      	b.n	8018d7e <quorem+0xee>

08018da0 <_dtoa_r>:
 8018da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018da4:	69c7      	ldr	r7, [r0, #28]
 8018da6:	b099      	sub	sp, #100	@ 0x64
 8018da8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018dac:	ec55 4b10 	vmov	r4, r5, d0
 8018db0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8018db2:	9109      	str	r1, [sp, #36]	@ 0x24
 8018db4:	4683      	mov	fp, r0
 8018db6:	920e      	str	r2, [sp, #56]	@ 0x38
 8018db8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018dba:	b97f      	cbnz	r7, 8018ddc <_dtoa_r+0x3c>
 8018dbc:	2010      	movs	r0, #16
 8018dbe:	f7fe f9e1 	bl	8017184 <malloc>
 8018dc2:	4602      	mov	r2, r0
 8018dc4:	f8cb 001c 	str.w	r0, [fp, #28]
 8018dc8:	b920      	cbnz	r0, 8018dd4 <_dtoa_r+0x34>
 8018dca:	4ba7      	ldr	r3, [pc, #668]	@ (8019068 <_dtoa_r+0x2c8>)
 8018dcc:	21ef      	movs	r1, #239	@ 0xef
 8018dce:	48a7      	ldr	r0, [pc, #668]	@ (801906c <_dtoa_r+0x2cc>)
 8018dd0:	f7ff ff40 	bl	8018c54 <__assert_func>
 8018dd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8018dd8:	6007      	str	r7, [r0, #0]
 8018dda:	60c7      	str	r7, [r0, #12]
 8018ddc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018de0:	6819      	ldr	r1, [r3, #0]
 8018de2:	b159      	cbz	r1, 8018dfc <_dtoa_r+0x5c>
 8018de4:	685a      	ldr	r2, [r3, #4]
 8018de6:	604a      	str	r2, [r1, #4]
 8018de8:	2301      	movs	r3, #1
 8018dea:	4093      	lsls	r3, r2
 8018dec:	608b      	str	r3, [r1, #8]
 8018dee:	4658      	mov	r0, fp
 8018df0:	f001 fcb4 	bl	801a75c <_Bfree>
 8018df4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018df8:	2200      	movs	r2, #0
 8018dfa:	601a      	str	r2, [r3, #0]
 8018dfc:	1e2b      	subs	r3, r5, #0
 8018dfe:	bfb9      	ittee	lt
 8018e00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8018e04:	9303      	strlt	r3, [sp, #12]
 8018e06:	2300      	movge	r3, #0
 8018e08:	6033      	strge	r3, [r6, #0]
 8018e0a:	9f03      	ldr	r7, [sp, #12]
 8018e0c:	4b98      	ldr	r3, [pc, #608]	@ (8019070 <_dtoa_r+0x2d0>)
 8018e0e:	bfbc      	itt	lt
 8018e10:	2201      	movlt	r2, #1
 8018e12:	6032      	strlt	r2, [r6, #0]
 8018e14:	43bb      	bics	r3, r7
 8018e16:	d112      	bne.n	8018e3e <_dtoa_r+0x9e>
 8018e18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018e1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8018e1e:	6013      	str	r3, [r2, #0]
 8018e20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018e24:	4323      	orrs	r3, r4
 8018e26:	f000 854d 	beq.w	80198c4 <_dtoa_r+0xb24>
 8018e2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018e2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8019084 <_dtoa_r+0x2e4>
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	f000 854f 	beq.w	80198d4 <_dtoa_r+0xb34>
 8018e36:	f10a 0303 	add.w	r3, sl, #3
 8018e3a:	f000 bd49 	b.w	80198d0 <_dtoa_r+0xb30>
 8018e3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018e42:	2200      	movs	r2, #0
 8018e44:	ec51 0b17 	vmov	r0, r1, d7
 8018e48:	2300      	movs	r3, #0
 8018e4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8018e4e:	f7ea f86d 	bl	8002f2c <__aeabi_dcmpeq>
 8018e52:	4680      	mov	r8, r0
 8018e54:	b158      	cbz	r0, 8018e6e <_dtoa_r+0xce>
 8018e56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018e58:	2301      	movs	r3, #1
 8018e5a:	6013      	str	r3, [r2, #0]
 8018e5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018e5e:	b113      	cbz	r3, 8018e66 <_dtoa_r+0xc6>
 8018e60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018e62:	4b84      	ldr	r3, [pc, #528]	@ (8019074 <_dtoa_r+0x2d4>)
 8018e64:	6013      	str	r3, [r2, #0]
 8018e66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8019088 <_dtoa_r+0x2e8>
 8018e6a:	f000 bd33 	b.w	80198d4 <_dtoa_r+0xb34>
 8018e6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018e72:	aa16      	add	r2, sp, #88	@ 0x58
 8018e74:	a917      	add	r1, sp, #92	@ 0x5c
 8018e76:	4658      	mov	r0, fp
 8018e78:	f002 f814 	bl	801aea4 <__d2b>
 8018e7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8018e80:	4681      	mov	r9, r0
 8018e82:	2e00      	cmp	r6, #0
 8018e84:	d077      	beq.n	8018f76 <_dtoa_r+0x1d6>
 8018e86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018e88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8018e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018e94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8018e98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8018e9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8018ea0:	4619      	mov	r1, r3
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	4b74      	ldr	r3, [pc, #464]	@ (8019078 <_dtoa_r+0x2d8>)
 8018ea6:	f7e9 fc21 	bl	80026ec <__aeabi_dsub>
 8018eaa:	a369      	add	r3, pc, #420	@ (adr r3, 8019050 <_dtoa_r+0x2b0>)
 8018eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eb0:	f7e9 fdd4 	bl	8002a5c <__aeabi_dmul>
 8018eb4:	a368      	add	r3, pc, #416	@ (adr r3, 8019058 <_dtoa_r+0x2b8>)
 8018eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eba:	f7e9 fc19 	bl	80026f0 <__adddf3>
 8018ebe:	4604      	mov	r4, r0
 8018ec0:	4630      	mov	r0, r6
 8018ec2:	460d      	mov	r5, r1
 8018ec4:	f7e9 fd60 	bl	8002988 <__aeabi_i2d>
 8018ec8:	a365      	add	r3, pc, #404	@ (adr r3, 8019060 <_dtoa_r+0x2c0>)
 8018eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ece:	f7e9 fdc5 	bl	8002a5c <__aeabi_dmul>
 8018ed2:	4602      	mov	r2, r0
 8018ed4:	460b      	mov	r3, r1
 8018ed6:	4620      	mov	r0, r4
 8018ed8:	4629      	mov	r1, r5
 8018eda:	f7e9 fc09 	bl	80026f0 <__adddf3>
 8018ede:	4604      	mov	r4, r0
 8018ee0:	460d      	mov	r5, r1
 8018ee2:	f7ea f86b 	bl	8002fbc <__aeabi_d2iz>
 8018ee6:	2200      	movs	r2, #0
 8018ee8:	4607      	mov	r7, r0
 8018eea:	2300      	movs	r3, #0
 8018eec:	4620      	mov	r0, r4
 8018eee:	4629      	mov	r1, r5
 8018ef0:	f7ea f826 	bl	8002f40 <__aeabi_dcmplt>
 8018ef4:	b140      	cbz	r0, 8018f08 <_dtoa_r+0x168>
 8018ef6:	4638      	mov	r0, r7
 8018ef8:	f7e9 fd46 	bl	8002988 <__aeabi_i2d>
 8018efc:	4622      	mov	r2, r4
 8018efe:	462b      	mov	r3, r5
 8018f00:	f7ea f814 	bl	8002f2c <__aeabi_dcmpeq>
 8018f04:	b900      	cbnz	r0, 8018f08 <_dtoa_r+0x168>
 8018f06:	3f01      	subs	r7, #1
 8018f08:	2f16      	cmp	r7, #22
 8018f0a:	d851      	bhi.n	8018fb0 <_dtoa_r+0x210>
 8018f0c:	4b5b      	ldr	r3, [pc, #364]	@ (801907c <_dtoa_r+0x2dc>)
 8018f0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018f1a:	f7ea f811 	bl	8002f40 <__aeabi_dcmplt>
 8018f1e:	2800      	cmp	r0, #0
 8018f20:	d048      	beq.n	8018fb4 <_dtoa_r+0x214>
 8018f22:	3f01      	subs	r7, #1
 8018f24:	2300      	movs	r3, #0
 8018f26:	9312      	str	r3, [sp, #72]	@ 0x48
 8018f28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018f2a:	1b9b      	subs	r3, r3, r6
 8018f2c:	1e5a      	subs	r2, r3, #1
 8018f2e:	bf44      	itt	mi
 8018f30:	f1c3 0801 	rsbmi	r8, r3, #1
 8018f34:	2300      	movmi	r3, #0
 8018f36:	9208      	str	r2, [sp, #32]
 8018f38:	bf54      	ite	pl
 8018f3a:	f04f 0800 	movpl.w	r8, #0
 8018f3e:	9308      	strmi	r3, [sp, #32]
 8018f40:	2f00      	cmp	r7, #0
 8018f42:	db39      	blt.n	8018fb8 <_dtoa_r+0x218>
 8018f44:	9b08      	ldr	r3, [sp, #32]
 8018f46:	970f      	str	r7, [sp, #60]	@ 0x3c
 8018f48:	443b      	add	r3, r7
 8018f4a:	9308      	str	r3, [sp, #32]
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f52:	2b09      	cmp	r3, #9
 8018f54:	d864      	bhi.n	8019020 <_dtoa_r+0x280>
 8018f56:	2b05      	cmp	r3, #5
 8018f58:	bfc4      	itt	gt
 8018f5a:	3b04      	subgt	r3, #4
 8018f5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8018f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f60:	f1a3 0302 	sub.w	r3, r3, #2
 8018f64:	bfcc      	ite	gt
 8018f66:	2400      	movgt	r4, #0
 8018f68:	2401      	movle	r4, #1
 8018f6a:	2b03      	cmp	r3, #3
 8018f6c:	d863      	bhi.n	8019036 <_dtoa_r+0x296>
 8018f6e:	e8df f003 	tbb	[pc, r3]
 8018f72:	372a      	.short	0x372a
 8018f74:	5535      	.short	0x5535
 8018f76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8018f7a:	441e      	add	r6, r3
 8018f7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8018f80:	2b20      	cmp	r3, #32
 8018f82:	bfc1      	itttt	gt
 8018f84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8018f88:	409f      	lslgt	r7, r3
 8018f8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8018f8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8018f92:	bfd6      	itet	le
 8018f94:	f1c3 0320 	rsble	r3, r3, #32
 8018f98:	ea47 0003 	orrgt.w	r0, r7, r3
 8018f9c:	fa04 f003 	lslle.w	r0, r4, r3
 8018fa0:	f7e9 fce2 	bl	8002968 <__aeabi_ui2d>
 8018fa4:	2201      	movs	r2, #1
 8018fa6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8018faa:	3e01      	subs	r6, #1
 8018fac:	9214      	str	r2, [sp, #80]	@ 0x50
 8018fae:	e777      	b.n	8018ea0 <_dtoa_r+0x100>
 8018fb0:	2301      	movs	r3, #1
 8018fb2:	e7b8      	b.n	8018f26 <_dtoa_r+0x186>
 8018fb4:	9012      	str	r0, [sp, #72]	@ 0x48
 8018fb6:	e7b7      	b.n	8018f28 <_dtoa_r+0x188>
 8018fb8:	427b      	negs	r3, r7
 8018fba:	930a      	str	r3, [sp, #40]	@ 0x28
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	eba8 0807 	sub.w	r8, r8, r7
 8018fc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018fc4:	e7c4      	b.n	8018f50 <_dtoa_r+0x1b0>
 8018fc6:	2300      	movs	r3, #0
 8018fc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018fca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	dc35      	bgt.n	801903c <_dtoa_r+0x29c>
 8018fd0:	2301      	movs	r3, #1
 8018fd2:	9300      	str	r3, [sp, #0]
 8018fd4:	9307      	str	r3, [sp, #28]
 8018fd6:	461a      	mov	r2, r3
 8018fd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8018fda:	e00b      	b.n	8018ff4 <_dtoa_r+0x254>
 8018fdc:	2301      	movs	r3, #1
 8018fde:	e7f3      	b.n	8018fc8 <_dtoa_r+0x228>
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018fe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018fe6:	18fb      	adds	r3, r7, r3
 8018fe8:	9300      	str	r3, [sp, #0]
 8018fea:	3301      	adds	r3, #1
 8018fec:	2b01      	cmp	r3, #1
 8018fee:	9307      	str	r3, [sp, #28]
 8018ff0:	bfb8      	it	lt
 8018ff2:	2301      	movlt	r3, #1
 8018ff4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8018ff8:	2100      	movs	r1, #0
 8018ffa:	2204      	movs	r2, #4
 8018ffc:	f102 0514 	add.w	r5, r2, #20
 8019000:	429d      	cmp	r5, r3
 8019002:	d91f      	bls.n	8019044 <_dtoa_r+0x2a4>
 8019004:	6041      	str	r1, [r0, #4]
 8019006:	4658      	mov	r0, fp
 8019008:	f001 fb68 	bl	801a6dc <_Balloc>
 801900c:	4682      	mov	sl, r0
 801900e:	2800      	cmp	r0, #0
 8019010:	d13c      	bne.n	801908c <_dtoa_r+0x2ec>
 8019012:	4b1b      	ldr	r3, [pc, #108]	@ (8019080 <_dtoa_r+0x2e0>)
 8019014:	4602      	mov	r2, r0
 8019016:	f240 11af 	movw	r1, #431	@ 0x1af
 801901a:	e6d8      	b.n	8018dce <_dtoa_r+0x2e>
 801901c:	2301      	movs	r3, #1
 801901e:	e7e0      	b.n	8018fe2 <_dtoa_r+0x242>
 8019020:	2401      	movs	r4, #1
 8019022:	2300      	movs	r3, #0
 8019024:	9309      	str	r3, [sp, #36]	@ 0x24
 8019026:	940b      	str	r4, [sp, #44]	@ 0x2c
 8019028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801902c:	9300      	str	r3, [sp, #0]
 801902e:	9307      	str	r3, [sp, #28]
 8019030:	2200      	movs	r2, #0
 8019032:	2312      	movs	r3, #18
 8019034:	e7d0      	b.n	8018fd8 <_dtoa_r+0x238>
 8019036:	2301      	movs	r3, #1
 8019038:	930b      	str	r3, [sp, #44]	@ 0x2c
 801903a:	e7f5      	b.n	8019028 <_dtoa_r+0x288>
 801903c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801903e:	9300      	str	r3, [sp, #0]
 8019040:	9307      	str	r3, [sp, #28]
 8019042:	e7d7      	b.n	8018ff4 <_dtoa_r+0x254>
 8019044:	3101      	adds	r1, #1
 8019046:	0052      	lsls	r2, r2, #1
 8019048:	e7d8      	b.n	8018ffc <_dtoa_r+0x25c>
 801904a:	bf00      	nop
 801904c:	f3af 8000 	nop.w
 8019050:	636f4361 	.word	0x636f4361
 8019054:	3fd287a7 	.word	0x3fd287a7
 8019058:	8b60c8b3 	.word	0x8b60c8b3
 801905c:	3fc68a28 	.word	0x3fc68a28
 8019060:	509f79fb 	.word	0x509f79fb
 8019064:	3fd34413 	.word	0x3fd34413
 8019068:	0801c468 	.word	0x0801c468
 801906c:	0801c62b 	.word	0x0801c62b
 8019070:	7ff00000 	.word	0x7ff00000
 8019074:	0801c3e9 	.word	0x0801c3e9
 8019078:	3ff80000 	.word	0x3ff80000
 801907c:	0801c798 	.word	0x0801c798
 8019080:	0801c683 	.word	0x0801c683
 8019084:	0801c627 	.word	0x0801c627
 8019088:	0801c3e8 	.word	0x0801c3e8
 801908c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8019090:	6018      	str	r0, [r3, #0]
 8019092:	9b07      	ldr	r3, [sp, #28]
 8019094:	2b0e      	cmp	r3, #14
 8019096:	f200 80a4 	bhi.w	80191e2 <_dtoa_r+0x442>
 801909a:	2c00      	cmp	r4, #0
 801909c:	f000 80a1 	beq.w	80191e2 <_dtoa_r+0x442>
 80190a0:	2f00      	cmp	r7, #0
 80190a2:	dd33      	ble.n	801910c <_dtoa_r+0x36c>
 80190a4:	4bad      	ldr	r3, [pc, #692]	@ (801935c <_dtoa_r+0x5bc>)
 80190a6:	f007 020f 	and.w	r2, r7, #15
 80190aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80190ae:	ed93 7b00 	vldr	d7, [r3]
 80190b2:	05f8      	lsls	r0, r7, #23
 80190b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80190b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80190bc:	d516      	bpl.n	80190ec <_dtoa_r+0x34c>
 80190be:	4ba8      	ldr	r3, [pc, #672]	@ (8019360 <_dtoa_r+0x5c0>)
 80190c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80190c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80190c8:	f7e9 fdf2 	bl	8002cb0 <__aeabi_ddiv>
 80190cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80190d0:	f004 040f 	and.w	r4, r4, #15
 80190d4:	2603      	movs	r6, #3
 80190d6:	4da2      	ldr	r5, [pc, #648]	@ (8019360 <_dtoa_r+0x5c0>)
 80190d8:	b954      	cbnz	r4, 80190f0 <_dtoa_r+0x350>
 80190da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80190de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80190e2:	f7e9 fde5 	bl	8002cb0 <__aeabi_ddiv>
 80190e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80190ea:	e028      	b.n	801913e <_dtoa_r+0x39e>
 80190ec:	2602      	movs	r6, #2
 80190ee:	e7f2      	b.n	80190d6 <_dtoa_r+0x336>
 80190f0:	07e1      	lsls	r1, r4, #31
 80190f2:	d508      	bpl.n	8019106 <_dtoa_r+0x366>
 80190f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80190f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80190fc:	f7e9 fcae 	bl	8002a5c <__aeabi_dmul>
 8019100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019104:	3601      	adds	r6, #1
 8019106:	1064      	asrs	r4, r4, #1
 8019108:	3508      	adds	r5, #8
 801910a:	e7e5      	b.n	80190d8 <_dtoa_r+0x338>
 801910c:	f000 80d2 	beq.w	80192b4 <_dtoa_r+0x514>
 8019110:	427c      	negs	r4, r7
 8019112:	4b92      	ldr	r3, [pc, #584]	@ (801935c <_dtoa_r+0x5bc>)
 8019114:	4d92      	ldr	r5, [pc, #584]	@ (8019360 <_dtoa_r+0x5c0>)
 8019116:	f004 020f 	and.w	r2, r4, #15
 801911a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019122:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019126:	f7e9 fc99 	bl	8002a5c <__aeabi_dmul>
 801912a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801912e:	1124      	asrs	r4, r4, #4
 8019130:	2300      	movs	r3, #0
 8019132:	2602      	movs	r6, #2
 8019134:	2c00      	cmp	r4, #0
 8019136:	f040 80b2 	bne.w	801929e <_dtoa_r+0x4fe>
 801913a:	2b00      	cmp	r3, #0
 801913c:	d1d3      	bne.n	80190e6 <_dtoa_r+0x346>
 801913e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019140:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8019144:	2b00      	cmp	r3, #0
 8019146:	f000 80b7 	beq.w	80192b8 <_dtoa_r+0x518>
 801914a:	4b86      	ldr	r3, [pc, #536]	@ (8019364 <_dtoa_r+0x5c4>)
 801914c:	2200      	movs	r2, #0
 801914e:	4620      	mov	r0, r4
 8019150:	4629      	mov	r1, r5
 8019152:	f7e9 fef5 	bl	8002f40 <__aeabi_dcmplt>
 8019156:	2800      	cmp	r0, #0
 8019158:	f000 80ae 	beq.w	80192b8 <_dtoa_r+0x518>
 801915c:	9b07      	ldr	r3, [sp, #28]
 801915e:	2b00      	cmp	r3, #0
 8019160:	f000 80aa 	beq.w	80192b8 <_dtoa_r+0x518>
 8019164:	9b00      	ldr	r3, [sp, #0]
 8019166:	2b00      	cmp	r3, #0
 8019168:	dd37      	ble.n	80191da <_dtoa_r+0x43a>
 801916a:	1e7b      	subs	r3, r7, #1
 801916c:	9304      	str	r3, [sp, #16]
 801916e:	4620      	mov	r0, r4
 8019170:	4b7d      	ldr	r3, [pc, #500]	@ (8019368 <_dtoa_r+0x5c8>)
 8019172:	2200      	movs	r2, #0
 8019174:	4629      	mov	r1, r5
 8019176:	f7e9 fc71 	bl	8002a5c <__aeabi_dmul>
 801917a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801917e:	9c00      	ldr	r4, [sp, #0]
 8019180:	3601      	adds	r6, #1
 8019182:	4630      	mov	r0, r6
 8019184:	f7e9 fc00 	bl	8002988 <__aeabi_i2d>
 8019188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801918c:	f7e9 fc66 	bl	8002a5c <__aeabi_dmul>
 8019190:	4b76      	ldr	r3, [pc, #472]	@ (801936c <_dtoa_r+0x5cc>)
 8019192:	2200      	movs	r2, #0
 8019194:	f7e9 faac 	bl	80026f0 <__adddf3>
 8019198:	4605      	mov	r5, r0
 801919a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801919e:	2c00      	cmp	r4, #0
 80191a0:	f040 808d 	bne.w	80192be <_dtoa_r+0x51e>
 80191a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80191a8:	4b71      	ldr	r3, [pc, #452]	@ (8019370 <_dtoa_r+0x5d0>)
 80191aa:	2200      	movs	r2, #0
 80191ac:	f7e9 fa9e 	bl	80026ec <__aeabi_dsub>
 80191b0:	4602      	mov	r2, r0
 80191b2:	460b      	mov	r3, r1
 80191b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80191b8:	462a      	mov	r2, r5
 80191ba:	4633      	mov	r3, r6
 80191bc:	f7e9 fede 	bl	8002f7c <__aeabi_dcmpgt>
 80191c0:	2800      	cmp	r0, #0
 80191c2:	f040 828b 	bne.w	80196dc <_dtoa_r+0x93c>
 80191c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80191ca:	462a      	mov	r2, r5
 80191cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80191d0:	f7e9 feb6 	bl	8002f40 <__aeabi_dcmplt>
 80191d4:	2800      	cmp	r0, #0
 80191d6:	f040 8128 	bne.w	801942a <_dtoa_r+0x68a>
 80191da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80191de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80191e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	f2c0 815a 	blt.w	801949e <_dtoa_r+0x6fe>
 80191ea:	2f0e      	cmp	r7, #14
 80191ec:	f300 8157 	bgt.w	801949e <_dtoa_r+0x6fe>
 80191f0:	4b5a      	ldr	r3, [pc, #360]	@ (801935c <_dtoa_r+0x5bc>)
 80191f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80191f6:	ed93 7b00 	vldr	d7, [r3]
 80191fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	ed8d 7b00 	vstr	d7, [sp]
 8019202:	da03      	bge.n	801920c <_dtoa_r+0x46c>
 8019204:	9b07      	ldr	r3, [sp, #28]
 8019206:	2b00      	cmp	r3, #0
 8019208:	f340 8101 	ble.w	801940e <_dtoa_r+0x66e>
 801920c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8019210:	4656      	mov	r6, sl
 8019212:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019216:	4620      	mov	r0, r4
 8019218:	4629      	mov	r1, r5
 801921a:	f7e9 fd49 	bl	8002cb0 <__aeabi_ddiv>
 801921e:	f7e9 fecd 	bl	8002fbc <__aeabi_d2iz>
 8019222:	4680      	mov	r8, r0
 8019224:	f7e9 fbb0 	bl	8002988 <__aeabi_i2d>
 8019228:	e9dd 2300 	ldrd	r2, r3, [sp]
 801922c:	f7e9 fc16 	bl	8002a5c <__aeabi_dmul>
 8019230:	4602      	mov	r2, r0
 8019232:	460b      	mov	r3, r1
 8019234:	4620      	mov	r0, r4
 8019236:	4629      	mov	r1, r5
 8019238:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801923c:	f7e9 fa56 	bl	80026ec <__aeabi_dsub>
 8019240:	f806 4b01 	strb.w	r4, [r6], #1
 8019244:	9d07      	ldr	r5, [sp, #28]
 8019246:	eba6 040a 	sub.w	r4, r6, sl
 801924a:	42a5      	cmp	r5, r4
 801924c:	4602      	mov	r2, r0
 801924e:	460b      	mov	r3, r1
 8019250:	f040 8117 	bne.w	8019482 <_dtoa_r+0x6e2>
 8019254:	f7e9 fa4c 	bl	80026f0 <__adddf3>
 8019258:	e9dd 2300 	ldrd	r2, r3, [sp]
 801925c:	4604      	mov	r4, r0
 801925e:	460d      	mov	r5, r1
 8019260:	f7e9 fe8c 	bl	8002f7c <__aeabi_dcmpgt>
 8019264:	2800      	cmp	r0, #0
 8019266:	f040 80f9 	bne.w	801945c <_dtoa_r+0x6bc>
 801926a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801926e:	4620      	mov	r0, r4
 8019270:	4629      	mov	r1, r5
 8019272:	f7e9 fe5b 	bl	8002f2c <__aeabi_dcmpeq>
 8019276:	b118      	cbz	r0, 8019280 <_dtoa_r+0x4e0>
 8019278:	f018 0f01 	tst.w	r8, #1
 801927c:	f040 80ee 	bne.w	801945c <_dtoa_r+0x6bc>
 8019280:	4649      	mov	r1, r9
 8019282:	4658      	mov	r0, fp
 8019284:	f001 fa6a 	bl	801a75c <_Bfree>
 8019288:	2300      	movs	r3, #0
 801928a:	7033      	strb	r3, [r6, #0]
 801928c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801928e:	3701      	adds	r7, #1
 8019290:	601f      	str	r7, [r3, #0]
 8019292:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8019294:	2b00      	cmp	r3, #0
 8019296:	f000 831d 	beq.w	80198d4 <_dtoa_r+0xb34>
 801929a:	601e      	str	r6, [r3, #0]
 801929c:	e31a      	b.n	80198d4 <_dtoa_r+0xb34>
 801929e:	07e2      	lsls	r2, r4, #31
 80192a0:	d505      	bpl.n	80192ae <_dtoa_r+0x50e>
 80192a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80192a6:	f7e9 fbd9 	bl	8002a5c <__aeabi_dmul>
 80192aa:	3601      	adds	r6, #1
 80192ac:	2301      	movs	r3, #1
 80192ae:	1064      	asrs	r4, r4, #1
 80192b0:	3508      	adds	r5, #8
 80192b2:	e73f      	b.n	8019134 <_dtoa_r+0x394>
 80192b4:	2602      	movs	r6, #2
 80192b6:	e742      	b.n	801913e <_dtoa_r+0x39e>
 80192b8:	9c07      	ldr	r4, [sp, #28]
 80192ba:	9704      	str	r7, [sp, #16]
 80192bc:	e761      	b.n	8019182 <_dtoa_r+0x3e2>
 80192be:	4b27      	ldr	r3, [pc, #156]	@ (801935c <_dtoa_r+0x5bc>)
 80192c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80192c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80192c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80192ca:	4454      	add	r4, sl
 80192cc:	2900      	cmp	r1, #0
 80192ce:	d053      	beq.n	8019378 <_dtoa_r+0x5d8>
 80192d0:	4928      	ldr	r1, [pc, #160]	@ (8019374 <_dtoa_r+0x5d4>)
 80192d2:	2000      	movs	r0, #0
 80192d4:	f7e9 fcec 	bl	8002cb0 <__aeabi_ddiv>
 80192d8:	4633      	mov	r3, r6
 80192da:	462a      	mov	r2, r5
 80192dc:	f7e9 fa06 	bl	80026ec <__aeabi_dsub>
 80192e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80192e4:	4656      	mov	r6, sl
 80192e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80192ea:	f7e9 fe67 	bl	8002fbc <__aeabi_d2iz>
 80192ee:	4605      	mov	r5, r0
 80192f0:	f7e9 fb4a 	bl	8002988 <__aeabi_i2d>
 80192f4:	4602      	mov	r2, r0
 80192f6:	460b      	mov	r3, r1
 80192f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80192fc:	f7e9 f9f6 	bl	80026ec <__aeabi_dsub>
 8019300:	3530      	adds	r5, #48	@ 0x30
 8019302:	4602      	mov	r2, r0
 8019304:	460b      	mov	r3, r1
 8019306:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801930a:	f806 5b01 	strb.w	r5, [r6], #1
 801930e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8019312:	f7e9 fe15 	bl	8002f40 <__aeabi_dcmplt>
 8019316:	2800      	cmp	r0, #0
 8019318:	d171      	bne.n	80193fe <_dtoa_r+0x65e>
 801931a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801931e:	4911      	ldr	r1, [pc, #68]	@ (8019364 <_dtoa_r+0x5c4>)
 8019320:	2000      	movs	r0, #0
 8019322:	f7e9 f9e3 	bl	80026ec <__aeabi_dsub>
 8019326:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801932a:	f7e9 fe09 	bl	8002f40 <__aeabi_dcmplt>
 801932e:	2800      	cmp	r0, #0
 8019330:	f040 8095 	bne.w	801945e <_dtoa_r+0x6be>
 8019334:	42a6      	cmp	r6, r4
 8019336:	f43f af50 	beq.w	80191da <_dtoa_r+0x43a>
 801933a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801933e:	4b0a      	ldr	r3, [pc, #40]	@ (8019368 <_dtoa_r+0x5c8>)
 8019340:	2200      	movs	r2, #0
 8019342:	f7e9 fb8b 	bl	8002a5c <__aeabi_dmul>
 8019346:	4b08      	ldr	r3, [pc, #32]	@ (8019368 <_dtoa_r+0x5c8>)
 8019348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801934c:	2200      	movs	r2, #0
 801934e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019352:	f7e9 fb83 	bl	8002a5c <__aeabi_dmul>
 8019356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801935a:	e7c4      	b.n	80192e6 <_dtoa_r+0x546>
 801935c:	0801c798 	.word	0x0801c798
 8019360:	0801c770 	.word	0x0801c770
 8019364:	3ff00000 	.word	0x3ff00000
 8019368:	40240000 	.word	0x40240000
 801936c:	401c0000 	.word	0x401c0000
 8019370:	40140000 	.word	0x40140000
 8019374:	3fe00000 	.word	0x3fe00000
 8019378:	4631      	mov	r1, r6
 801937a:	4628      	mov	r0, r5
 801937c:	f7e9 fb6e 	bl	8002a5c <__aeabi_dmul>
 8019380:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8019384:	9415      	str	r4, [sp, #84]	@ 0x54
 8019386:	4656      	mov	r6, sl
 8019388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801938c:	f7e9 fe16 	bl	8002fbc <__aeabi_d2iz>
 8019390:	4605      	mov	r5, r0
 8019392:	f7e9 faf9 	bl	8002988 <__aeabi_i2d>
 8019396:	4602      	mov	r2, r0
 8019398:	460b      	mov	r3, r1
 801939a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801939e:	f7e9 f9a5 	bl	80026ec <__aeabi_dsub>
 80193a2:	3530      	adds	r5, #48	@ 0x30
 80193a4:	f806 5b01 	strb.w	r5, [r6], #1
 80193a8:	4602      	mov	r2, r0
 80193aa:	460b      	mov	r3, r1
 80193ac:	42a6      	cmp	r6, r4
 80193ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80193b2:	f04f 0200 	mov.w	r2, #0
 80193b6:	d124      	bne.n	8019402 <_dtoa_r+0x662>
 80193b8:	4bac      	ldr	r3, [pc, #688]	@ (801966c <_dtoa_r+0x8cc>)
 80193ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80193be:	f7e9 f997 	bl	80026f0 <__adddf3>
 80193c2:	4602      	mov	r2, r0
 80193c4:	460b      	mov	r3, r1
 80193c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80193ca:	f7e9 fdd7 	bl	8002f7c <__aeabi_dcmpgt>
 80193ce:	2800      	cmp	r0, #0
 80193d0:	d145      	bne.n	801945e <_dtoa_r+0x6be>
 80193d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80193d6:	49a5      	ldr	r1, [pc, #660]	@ (801966c <_dtoa_r+0x8cc>)
 80193d8:	2000      	movs	r0, #0
 80193da:	f7e9 f987 	bl	80026ec <__aeabi_dsub>
 80193de:	4602      	mov	r2, r0
 80193e0:	460b      	mov	r3, r1
 80193e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80193e6:	f7e9 fdab 	bl	8002f40 <__aeabi_dcmplt>
 80193ea:	2800      	cmp	r0, #0
 80193ec:	f43f aef5 	beq.w	80191da <_dtoa_r+0x43a>
 80193f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80193f2:	1e73      	subs	r3, r6, #1
 80193f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80193f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80193fa:	2b30      	cmp	r3, #48	@ 0x30
 80193fc:	d0f8      	beq.n	80193f0 <_dtoa_r+0x650>
 80193fe:	9f04      	ldr	r7, [sp, #16]
 8019400:	e73e      	b.n	8019280 <_dtoa_r+0x4e0>
 8019402:	4b9b      	ldr	r3, [pc, #620]	@ (8019670 <_dtoa_r+0x8d0>)
 8019404:	f7e9 fb2a 	bl	8002a5c <__aeabi_dmul>
 8019408:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801940c:	e7bc      	b.n	8019388 <_dtoa_r+0x5e8>
 801940e:	d10c      	bne.n	801942a <_dtoa_r+0x68a>
 8019410:	4b98      	ldr	r3, [pc, #608]	@ (8019674 <_dtoa_r+0x8d4>)
 8019412:	2200      	movs	r2, #0
 8019414:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019418:	f7e9 fb20 	bl	8002a5c <__aeabi_dmul>
 801941c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019420:	f7e9 fda2 	bl	8002f68 <__aeabi_dcmpge>
 8019424:	2800      	cmp	r0, #0
 8019426:	f000 8157 	beq.w	80196d8 <_dtoa_r+0x938>
 801942a:	2400      	movs	r4, #0
 801942c:	4625      	mov	r5, r4
 801942e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019430:	43db      	mvns	r3, r3
 8019432:	9304      	str	r3, [sp, #16]
 8019434:	4656      	mov	r6, sl
 8019436:	2700      	movs	r7, #0
 8019438:	4621      	mov	r1, r4
 801943a:	4658      	mov	r0, fp
 801943c:	f001 f98e 	bl	801a75c <_Bfree>
 8019440:	2d00      	cmp	r5, #0
 8019442:	d0dc      	beq.n	80193fe <_dtoa_r+0x65e>
 8019444:	b12f      	cbz	r7, 8019452 <_dtoa_r+0x6b2>
 8019446:	42af      	cmp	r7, r5
 8019448:	d003      	beq.n	8019452 <_dtoa_r+0x6b2>
 801944a:	4639      	mov	r1, r7
 801944c:	4658      	mov	r0, fp
 801944e:	f001 f985 	bl	801a75c <_Bfree>
 8019452:	4629      	mov	r1, r5
 8019454:	4658      	mov	r0, fp
 8019456:	f001 f981 	bl	801a75c <_Bfree>
 801945a:	e7d0      	b.n	80193fe <_dtoa_r+0x65e>
 801945c:	9704      	str	r7, [sp, #16]
 801945e:	4633      	mov	r3, r6
 8019460:	461e      	mov	r6, r3
 8019462:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019466:	2a39      	cmp	r2, #57	@ 0x39
 8019468:	d107      	bne.n	801947a <_dtoa_r+0x6da>
 801946a:	459a      	cmp	sl, r3
 801946c:	d1f8      	bne.n	8019460 <_dtoa_r+0x6c0>
 801946e:	9a04      	ldr	r2, [sp, #16]
 8019470:	3201      	adds	r2, #1
 8019472:	9204      	str	r2, [sp, #16]
 8019474:	2230      	movs	r2, #48	@ 0x30
 8019476:	f88a 2000 	strb.w	r2, [sl]
 801947a:	781a      	ldrb	r2, [r3, #0]
 801947c:	3201      	adds	r2, #1
 801947e:	701a      	strb	r2, [r3, #0]
 8019480:	e7bd      	b.n	80193fe <_dtoa_r+0x65e>
 8019482:	4b7b      	ldr	r3, [pc, #492]	@ (8019670 <_dtoa_r+0x8d0>)
 8019484:	2200      	movs	r2, #0
 8019486:	f7e9 fae9 	bl	8002a5c <__aeabi_dmul>
 801948a:	2200      	movs	r2, #0
 801948c:	2300      	movs	r3, #0
 801948e:	4604      	mov	r4, r0
 8019490:	460d      	mov	r5, r1
 8019492:	f7e9 fd4b 	bl	8002f2c <__aeabi_dcmpeq>
 8019496:	2800      	cmp	r0, #0
 8019498:	f43f aebb 	beq.w	8019212 <_dtoa_r+0x472>
 801949c:	e6f0      	b.n	8019280 <_dtoa_r+0x4e0>
 801949e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80194a0:	2a00      	cmp	r2, #0
 80194a2:	f000 80db 	beq.w	801965c <_dtoa_r+0x8bc>
 80194a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80194a8:	2a01      	cmp	r2, #1
 80194aa:	f300 80bf 	bgt.w	801962c <_dtoa_r+0x88c>
 80194ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80194b0:	2a00      	cmp	r2, #0
 80194b2:	f000 80b7 	beq.w	8019624 <_dtoa_r+0x884>
 80194b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80194ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80194bc:	4646      	mov	r6, r8
 80194be:	9a08      	ldr	r2, [sp, #32]
 80194c0:	2101      	movs	r1, #1
 80194c2:	441a      	add	r2, r3
 80194c4:	4658      	mov	r0, fp
 80194c6:	4498      	add	r8, r3
 80194c8:	9208      	str	r2, [sp, #32]
 80194ca:	f001 fa45 	bl	801a958 <__i2b>
 80194ce:	4605      	mov	r5, r0
 80194d0:	b15e      	cbz	r6, 80194ea <_dtoa_r+0x74a>
 80194d2:	9b08      	ldr	r3, [sp, #32]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	dd08      	ble.n	80194ea <_dtoa_r+0x74a>
 80194d8:	42b3      	cmp	r3, r6
 80194da:	9a08      	ldr	r2, [sp, #32]
 80194dc:	bfa8      	it	ge
 80194de:	4633      	movge	r3, r6
 80194e0:	eba8 0803 	sub.w	r8, r8, r3
 80194e4:	1af6      	subs	r6, r6, r3
 80194e6:	1ad3      	subs	r3, r2, r3
 80194e8:	9308      	str	r3, [sp, #32]
 80194ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80194ec:	b1f3      	cbz	r3, 801952c <_dtoa_r+0x78c>
 80194ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	f000 80b7 	beq.w	8019664 <_dtoa_r+0x8c4>
 80194f6:	b18c      	cbz	r4, 801951c <_dtoa_r+0x77c>
 80194f8:	4629      	mov	r1, r5
 80194fa:	4622      	mov	r2, r4
 80194fc:	4658      	mov	r0, fp
 80194fe:	f001 faeb 	bl	801aad8 <__pow5mult>
 8019502:	464a      	mov	r2, r9
 8019504:	4601      	mov	r1, r0
 8019506:	4605      	mov	r5, r0
 8019508:	4658      	mov	r0, fp
 801950a:	f001 fa3b 	bl	801a984 <__multiply>
 801950e:	4649      	mov	r1, r9
 8019510:	9004      	str	r0, [sp, #16]
 8019512:	4658      	mov	r0, fp
 8019514:	f001 f922 	bl	801a75c <_Bfree>
 8019518:	9b04      	ldr	r3, [sp, #16]
 801951a:	4699      	mov	r9, r3
 801951c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801951e:	1b1a      	subs	r2, r3, r4
 8019520:	d004      	beq.n	801952c <_dtoa_r+0x78c>
 8019522:	4649      	mov	r1, r9
 8019524:	4658      	mov	r0, fp
 8019526:	f001 fad7 	bl	801aad8 <__pow5mult>
 801952a:	4681      	mov	r9, r0
 801952c:	2101      	movs	r1, #1
 801952e:	4658      	mov	r0, fp
 8019530:	f001 fa12 	bl	801a958 <__i2b>
 8019534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019536:	4604      	mov	r4, r0
 8019538:	2b00      	cmp	r3, #0
 801953a:	f000 81cf 	beq.w	80198dc <_dtoa_r+0xb3c>
 801953e:	461a      	mov	r2, r3
 8019540:	4601      	mov	r1, r0
 8019542:	4658      	mov	r0, fp
 8019544:	f001 fac8 	bl	801aad8 <__pow5mult>
 8019548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801954a:	2b01      	cmp	r3, #1
 801954c:	4604      	mov	r4, r0
 801954e:	f300 8095 	bgt.w	801967c <_dtoa_r+0x8dc>
 8019552:	9b02      	ldr	r3, [sp, #8]
 8019554:	2b00      	cmp	r3, #0
 8019556:	f040 8087 	bne.w	8019668 <_dtoa_r+0x8c8>
 801955a:	9b03      	ldr	r3, [sp, #12]
 801955c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019560:	2b00      	cmp	r3, #0
 8019562:	f040 8089 	bne.w	8019678 <_dtoa_r+0x8d8>
 8019566:	9b03      	ldr	r3, [sp, #12]
 8019568:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801956c:	0d1b      	lsrs	r3, r3, #20
 801956e:	051b      	lsls	r3, r3, #20
 8019570:	b12b      	cbz	r3, 801957e <_dtoa_r+0x7de>
 8019572:	9b08      	ldr	r3, [sp, #32]
 8019574:	3301      	adds	r3, #1
 8019576:	9308      	str	r3, [sp, #32]
 8019578:	f108 0801 	add.w	r8, r8, #1
 801957c:	2301      	movs	r3, #1
 801957e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019582:	2b00      	cmp	r3, #0
 8019584:	f000 81b0 	beq.w	80198e8 <_dtoa_r+0xb48>
 8019588:	6923      	ldr	r3, [r4, #16]
 801958a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801958e:	6918      	ldr	r0, [r3, #16]
 8019590:	f001 f996 	bl	801a8c0 <__hi0bits>
 8019594:	f1c0 0020 	rsb	r0, r0, #32
 8019598:	9b08      	ldr	r3, [sp, #32]
 801959a:	4418      	add	r0, r3
 801959c:	f010 001f 	ands.w	r0, r0, #31
 80195a0:	d077      	beq.n	8019692 <_dtoa_r+0x8f2>
 80195a2:	f1c0 0320 	rsb	r3, r0, #32
 80195a6:	2b04      	cmp	r3, #4
 80195a8:	dd6b      	ble.n	8019682 <_dtoa_r+0x8e2>
 80195aa:	9b08      	ldr	r3, [sp, #32]
 80195ac:	f1c0 001c 	rsb	r0, r0, #28
 80195b0:	4403      	add	r3, r0
 80195b2:	4480      	add	r8, r0
 80195b4:	4406      	add	r6, r0
 80195b6:	9308      	str	r3, [sp, #32]
 80195b8:	f1b8 0f00 	cmp.w	r8, #0
 80195bc:	dd05      	ble.n	80195ca <_dtoa_r+0x82a>
 80195be:	4649      	mov	r1, r9
 80195c0:	4642      	mov	r2, r8
 80195c2:	4658      	mov	r0, fp
 80195c4:	f001 fae2 	bl	801ab8c <__lshift>
 80195c8:	4681      	mov	r9, r0
 80195ca:	9b08      	ldr	r3, [sp, #32]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	dd05      	ble.n	80195dc <_dtoa_r+0x83c>
 80195d0:	4621      	mov	r1, r4
 80195d2:	461a      	mov	r2, r3
 80195d4:	4658      	mov	r0, fp
 80195d6:	f001 fad9 	bl	801ab8c <__lshift>
 80195da:	4604      	mov	r4, r0
 80195dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d059      	beq.n	8019696 <_dtoa_r+0x8f6>
 80195e2:	4621      	mov	r1, r4
 80195e4:	4648      	mov	r0, r9
 80195e6:	f001 fb3d 	bl	801ac64 <__mcmp>
 80195ea:	2800      	cmp	r0, #0
 80195ec:	da53      	bge.n	8019696 <_dtoa_r+0x8f6>
 80195ee:	1e7b      	subs	r3, r7, #1
 80195f0:	9304      	str	r3, [sp, #16]
 80195f2:	4649      	mov	r1, r9
 80195f4:	2300      	movs	r3, #0
 80195f6:	220a      	movs	r2, #10
 80195f8:	4658      	mov	r0, fp
 80195fa:	f001 f8d1 	bl	801a7a0 <__multadd>
 80195fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019600:	4681      	mov	r9, r0
 8019602:	2b00      	cmp	r3, #0
 8019604:	f000 8172 	beq.w	80198ec <_dtoa_r+0xb4c>
 8019608:	2300      	movs	r3, #0
 801960a:	4629      	mov	r1, r5
 801960c:	220a      	movs	r2, #10
 801960e:	4658      	mov	r0, fp
 8019610:	f001 f8c6 	bl	801a7a0 <__multadd>
 8019614:	9b00      	ldr	r3, [sp, #0]
 8019616:	2b00      	cmp	r3, #0
 8019618:	4605      	mov	r5, r0
 801961a:	dc67      	bgt.n	80196ec <_dtoa_r+0x94c>
 801961c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801961e:	2b02      	cmp	r3, #2
 8019620:	dc41      	bgt.n	80196a6 <_dtoa_r+0x906>
 8019622:	e063      	b.n	80196ec <_dtoa_r+0x94c>
 8019624:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8019626:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801962a:	e746      	b.n	80194ba <_dtoa_r+0x71a>
 801962c:	9b07      	ldr	r3, [sp, #28]
 801962e:	1e5c      	subs	r4, r3, #1
 8019630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019632:	42a3      	cmp	r3, r4
 8019634:	bfbf      	itttt	lt
 8019636:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8019638:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801963a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801963c:	1ae3      	sublt	r3, r4, r3
 801963e:	bfb4      	ite	lt
 8019640:	18d2      	addlt	r2, r2, r3
 8019642:	1b1c      	subge	r4, r3, r4
 8019644:	9b07      	ldr	r3, [sp, #28]
 8019646:	bfbc      	itt	lt
 8019648:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801964a:	2400      	movlt	r4, #0
 801964c:	2b00      	cmp	r3, #0
 801964e:	bfb5      	itete	lt
 8019650:	eba8 0603 	sublt.w	r6, r8, r3
 8019654:	9b07      	ldrge	r3, [sp, #28]
 8019656:	2300      	movlt	r3, #0
 8019658:	4646      	movge	r6, r8
 801965a:	e730      	b.n	80194be <_dtoa_r+0x71e>
 801965c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801965e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8019660:	4646      	mov	r6, r8
 8019662:	e735      	b.n	80194d0 <_dtoa_r+0x730>
 8019664:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019666:	e75c      	b.n	8019522 <_dtoa_r+0x782>
 8019668:	2300      	movs	r3, #0
 801966a:	e788      	b.n	801957e <_dtoa_r+0x7de>
 801966c:	3fe00000 	.word	0x3fe00000
 8019670:	40240000 	.word	0x40240000
 8019674:	40140000 	.word	0x40140000
 8019678:	9b02      	ldr	r3, [sp, #8]
 801967a:	e780      	b.n	801957e <_dtoa_r+0x7de>
 801967c:	2300      	movs	r3, #0
 801967e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019680:	e782      	b.n	8019588 <_dtoa_r+0x7e8>
 8019682:	d099      	beq.n	80195b8 <_dtoa_r+0x818>
 8019684:	9a08      	ldr	r2, [sp, #32]
 8019686:	331c      	adds	r3, #28
 8019688:	441a      	add	r2, r3
 801968a:	4498      	add	r8, r3
 801968c:	441e      	add	r6, r3
 801968e:	9208      	str	r2, [sp, #32]
 8019690:	e792      	b.n	80195b8 <_dtoa_r+0x818>
 8019692:	4603      	mov	r3, r0
 8019694:	e7f6      	b.n	8019684 <_dtoa_r+0x8e4>
 8019696:	9b07      	ldr	r3, [sp, #28]
 8019698:	9704      	str	r7, [sp, #16]
 801969a:	2b00      	cmp	r3, #0
 801969c:	dc20      	bgt.n	80196e0 <_dtoa_r+0x940>
 801969e:	9300      	str	r3, [sp, #0]
 80196a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80196a2:	2b02      	cmp	r3, #2
 80196a4:	dd1e      	ble.n	80196e4 <_dtoa_r+0x944>
 80196a6:	9b00      	ldr	r3, [sp, #0]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	f47f aec0 	bne.w	801942e <_dtoa_r+0x68e>
 80196ae:	4621      	mov	r1, r4
 80196b0:	2205      	movs	r2, #5
 80196b2:	4658      	mov	r0, fp
 80196b4:	f001 f874 	bl	801a7a0 <__multadd>
 80196b8:	4601      	mov	r1, r0
 80196ba:	4604      	mov	r4, r0
 80196bc:	4648      	mov	r0, r9
 80196be:	f001 fad1 	bl	801ac64 <__mcmp>
 80196c2:	2800      	cmp	r0, #0
 80196c4:	f77f aeb3 	ble.w	801942e <_dtoa_r+0x68e>
 80196c8:	4656      	mov	r6, sl
 80196ca:	2331      	movs	r3, #49	@ 0x31
 80196cc:	f806 3b01 	strb.w	r3, [r6], #1
 80196d0:	9b04      	ldr	r3, [sp, #16]
 80196d2:	3301      	adds	r3, #1
 80196d4:	9304      	str	r3, [sp, #16]
 80196d6:	e6ae      	b.n	8019436 <_dtoa_r+0x696>
 80196d8:	9c07      	ldr	r4, [sp, #28]
 80196da:	9704      	str	r7, [sp, #16]
 80196dc:	4625      	mov	r5, r4
 80196de:	e7f3      	b.n	80196c8 <_dtoa_r+0x928>
 80196e0:	9b07      	ldr	r3, [sp, #28]
 80196e2:	9300      	str	r3, [sp, #0]
 80196e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	f000 8104 	beq.w	80198f4 <_dtoa_r+0xb54>
 80196ec:	2e00      	cmp	r6, #0
 80196ee:	dd05      	ble.n	80196fc <_dtoa_r+0x95c>
 80196f0:	4629      	mov	r1, r5
 80196f2:	4632      	mov	r2, r6
 80196f4:	4658      	mov	r0, fp
 80196f6:	f001 fa49 	bl	801ab8c <__lshift>
 80196fa:	4605      	mov	r5, r0
 80196fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d05a      	beq.n	80197b8 <_dtoa_r+0xa18>
 8019702:	6869      	ldr	r1, [r5, #4]
 8019704:	4658      	mov	r0, fp
 8019706:	f000 ffe9 	bl	801a6dc <_Balloc>
 801970a:	4606      	mov	r6, r0
 801970c:	b928      	cbnz	r0, 801971a <_dtoa_r+0x97a>
 801970e:	4b84      	ldr	r3, [pc, #528]	@ (8019920 <_dtoa_r+0xb80>)
 8019710:	4602      	mov	r2, r0
 8019712:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8019716:	f7ff bb5a 	b.w	8018dce <_dtoa_r+0x2e>
 801971a:	692a      	ldr	r2, [r5, #16]
 801971c:	3202      	adds	r2, #2
 801971e:	0092      	lsls	r2, r2, #2
 8019720:	f105 010c 	add.w	r1, r5, #12
 8019724:	300c      	adds	r0, #12
 8019726:	f7ff fa75 	bl	8018c14 <memcpy>
 801972a:	2201      	movs	r2, #1
 801972c:	4631      	mov	r1, r6
 801972e:	4658      	mov	r0, fp
 8019730:	f001 fa2c 	bl	801ab8c <__lshift>
 8019734:	f10a 0301 	add.w	r3, sl, #1
 8019738:	9307      	str	r3, [sp, #28]
 801973a:	9b00      	ldr	r3, [sp, #0]
 801973c:	4453      	add	r3, sl
 801973e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019740:	9b02      	ldr	r3, [sp, #8]
 8019742:	f003 0301 	and.w	r3, r3, #1
 8019746:	462f      	mov	r7, r5
 8019748:	930a      	str	r3, [sp, #40]	@ 0x28
 801974a:	4605      	mov	r5, r0
 801974c:	9b07      	ldr	r3, [sp, #28]
 801974e:	4621      	mov	r1, r4
 8019750:	3b01      	subs	r3, #1
 8019752:	4648      	mov	r0, r9
 8019754:	9300      	str	r3, [sp, #0]
 8019756:	f7ff fa9b 	bl	8018c90 <quorem>
 801975a:	4639      	mov	r1, r7
 801975c:	9002      	str	r0, [sp, #8]
 801975e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8019762:	4648      	mov	r0, r9
 8019764:	f001 fa7e 	bl	801ac64 <__mcmp>
 8019768:	462a      	mov	r2, r5
 801976a:	9008      	str	r0, [sp, #32]
 801976c:	4621      	mov	r1, r4
 801976e:	4658      	mov	r0, fp
 8019770:	f001 fa94 	bl	801ac9c <__mdiff>
 8019774:	68c2      	ldr	r2, [r0, #12]
 8019776:	4606      	mov	r6, r0
 8019778:	bb02      	cbnz	r2, 80197bc <_dtoa_r+0xa1c>
 801977a:	4601      	mov	r1, r0
 801977c:	4648      	mov	r0, r9
 801977e:	f001 fa71 	bl	801ac64 <__mcmp>
 8019782:	4602      	mov	r2, r0
 8019784:	4631      	mov	r1, r6
 8019786:	4658      	mov	r0, fp
 8019788:	920e      	str	r2, [sp, #56]	@ 0x38
 801978a:	f000 ffe7 	bl	801a75c <_Bfree>
 801978e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019790:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019792:	9e07      	ldr	r6, [sp, #28]
 8019794:	ea43 0102 	orr.w	r1, r3, r2
 8019798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801979a:	4319      	orrs	r1, r3
 801979c:	d110      	bne.n	80197c0 <_dtoa_r+0xa20>
 801979e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80197a2:	d029      	beq.n	80197f8 <_dtoa_r+0xa58>
 80197a4:	9b08      	ldr	r3, [sp, #32]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	dd02      	ble.n	80197b0 <_dtoa_r+0xa10>
 80197aa:	9b02      	ldr	r3, [sp, #8]
 80197ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80197b0:	9b00      	ldr	r3, [sp, #0]
 80197b2:	f883 8000 	strb.w	r8, [r3]
 80197b6:	e63f      	b.n	8019438 <_dtoa_r+0x698>
 80197b8:	4628      	mov	r0, r5
 80197ba:	e7bb      	b.n	8019734 <_dtoa_r+0x994>
 80197bc:	2201      	movs	r2, #1
 80197be:	e7e1      	b.n	8019784 <_dtoa_r+0x9e4>
 80197c0:	9b08      	ldr	r3, [sp, #32]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	db04      	blt.n	80197d0 <_dtoa_r+0xa30>
 80197c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80197c8:	430b      	orrs	r3, r1
 80197ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80197cc:	430b      	orrs	r3, r1
 80197ce:	d120      	bne.n	8019812 <_dtoa_r+0xa72>
 80197d0:	2a00      	cmp	r2, #0
 80197d2:	dded      	ble.n	80197b0 <_dtoa_r+0xa10>
 80197d4:	4649      	mov	r1, r9
 80197d6:	2201      	movs	r2, #1
 80197d8:	4658      	mov	r0, fp
 80197da:	f001 f9d7 	bl	801ab8c <__lshift>
 80197de:	4621      	mov	r1, r4
 80197e0:	4681      	mov	r9, r0
 80197e2:	f001 fa3f 	bl	801ac64 <__mcmp>
 80197e6:	2800      	cmp	r0, #0
 80197e8:	dc03      	bgt.n	80197f2 <_dtoa_r+0xa52>
 80197ea:	d1e1      	bne.n	80197b0 <_dtoa_r+0xa10>
 80197ec:	f018 0f01 	tst.w	r8, #1
 80197f0:	d0de      	beq.n	80197b0 <_dtoa_r+0xa10>
 80197f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80197f6:	d1d8      	bne.n	80197aa <_dtoa_r+0xa0a>
 80197f8:	9a00      	ldr	r2, [sp, #0]
 80197fa:	2339      	movs	r3, #57	@ 0x39
 80197fc:	7013      	strb	r3, [r2, #0]
 80197fe:	4633      	mov	r3, r6
 8019800:	461e      	mov	r6, r3
 8019802:	3b01      	subs	r3, #1
 8019804:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019808:	2a39      	cmp	r2, #57	@ 0x39
 801980a:	d052      	beq.n	80198b2 <_dtoa_r+0xb12>
 801980c:	3201      	adds	r2, #1
 801980e:	701a      	strb	r2, [r3, #0]
 8019810:	e612      	b.n	8019438 <_dtoa_r+0x698>
 8019812:	2a00      	cmp	r2, #0
 8019814:	dd07      	ble.n	8019826 <_dtoa_r+0xa86>
 8019816:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801981a:	d0ed      	beq.n	80197f8 <_dtoa_r+0xa58>
 801981c:	9a00      	ldr	r2, [sp, #0]
 801981e:	f108 0301 	add.w	r3, r8, #1
 8019822:	7013      	strb	r3, [r2, #0]
 8019824:	e608      	b.n	8019438 <_dtoa_r+0x698>
 8019826:	9b07      	ldr	r3, [sp, #28]
 8019828:	9a07      	ldr	r2, [sp, #28]
 801982a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801982e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019830:	4293      	cmp	r3, r2
 8019832:	d028      	beq.n	8019886 <_dtoa_r+0xae6>
 8019834:	4649      	mov	r1, r9
 8019836:	2300      	movs	r3, #0
 8019838:	220a      	movs	r2, #10
 801983a:	4658      	mov	r0, fp
 801983c:	f000 ffb0 	bl	801a7a0 <__multadd>
 8019840:	42af      	cmp	r7, r5
 8019842:	4681      	mov	r9, r0
 8019844:	f04f 0300 	mov.w	r3, #0
 8019848:	f04f 020a 	mov.w	r2, #10
 801984c:	4639      	mov	r1, r7
 801984e:	4658      	mov	r0, fp
 8019850:	d107      	bne.n	8019862 <_dtoa_r+0xac2>
 8019852:	f000 ffa5 	bl	801a7a0 <__multadd>
 8019856:	4607      	mov	r7, r0
 8019858:	4605      	mov	r5, r0
 801985a:	9b07      	ldr	r3, [sp, #28]
 801985c:	3301      	adds	r3, #1
 801985e:	9307      	str	r3, [sp, #28]
 8019860:	e774      	b.n	801974c <_dtoa_r+0x9ac>
 8019862:	f000 ff9d 	bl	801a7a0 <__multadd>
 8019866:	4629      	mov	r1, r5
 8019868:	4607      	mov	r7, r0
 801986a:	2300      	movs	r3, #0
 801986c:	220a      	movs	r2, #10
 801986e:	4658      	mov	r0, fp
 8019870:	f000 ff96 	bl	801a7a0 <__multadd>
 8019874:	4605      	mov	r5, r0
 8019876:	e7f0      	b.n	801985a <_dtoa_r+0xaba>
 8019878:	9b00      	ldr	r3, [sp, #0]
 801987a:	2b00      	cmp	r3, #0
 801987c:	bfcc      	ite	gt
 801987e:	461e      	movgt	r6, r3
 8019880:	2601      	movle	r6, #1
 8019882:	4456      	add	r6, sl
 8019884:	2700      	movs	r7, #0
 8019886:	4649      	mov	r1, r9
 8019888:	2201      	movs	r2, #1
 801988a:	4658      	mov	r0, fp
 801988c:	f001 f97e 	bl	801ab8c <__lshift>
 8019890:	4621      	mov	r1, r4
 8019892:	4681      	mov	r9, r0
 8019894:	f001 f9e6 	bl	801ac64 <__mcmp>
 8019898:	2800      	cmp	r0, #0
 801989a:	dcb0      	bgt.n	80197fe <_dtoa_r+0xa5e>
 801989c:	d102      	bne.n	80198a4 <_dtoa_r+0xb04>
 801989e:	f018 0f01 	tst.w	r8, #1
 80198a2:	d1ac      	bne.n	80197fe <_dtoa_r+0xa5e>
 80198a4:	4633      	mov	r3, r6
 80198a6:	461e      	mov	r6, r3
 80198a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80198ac:	2a30      	cmp	r2, #48	@ 0x30
 80198ae:	d0fa      	beq.n	80198a6 <_dtoa_r+0xb06>
 80198b0:	e5c2      	b.n	8019438 <_dtoa_r+0x698>
 80198b2:	459a      	cmp	sl, r3
 80198b4:	d1a4      	bne.n	8019800 <_dtoa_r+0xa60>
 80198b6:	9b04      	ldr	r3, [sp, #16]
 80198b8:	3301      	adds	r3, #1
 80198ba:	9304      	str	r3, [sp, #16]
 80198bc:	2331      	movs	r3, #49	@ 0x31
 80198be:	f88a 3000 	strb.w	r3, [sl]
 80198c2:	e5b9      	b.n	8019438 <_dtoa_r+0x698>
 80198c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80198c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8019924 <_dtoa_r+0xb84>
 80198ca:	b11b      	cbz	r3, 80198d4 <_dtoa_r+0xb34>
 80198cc:	f10a 0308 	add.w	r3, sl, #8
 80198d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80198d2:	6013      	str	r3, [r2, #0]
 80198d4:	4650      	mov	r0, sl
 80198d6:	b019      	add	sp, #100	@ 0x64
 80198d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198de:	2b01      	cmp	r3, #1
 80198e0:	f77f ae37 	ble.w	8019552 <_dtoa_r+0x7b2>
 80198e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80198e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80198e8:	2001      	movs	r0, #1
 80198ea:	e655      	b.n	8019598 <_dtoa_r+0x7f8>
 80198ec:	9b00      	ldr	r3, [sp, #0]
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	f77f aed6 	ble.w	80196a0 <_dtoa_r+0x900>
 80198f4:	4656      	mov	r6, sl
 80198f6:	4621      	mov	r1, r4
 80198f8:	4648      	mov	r0, r9
 80198fa:	f7ff f9c9 	bl	8018c90 <quorem>
 80198fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8019902:	f806 8b01 	strb.w	r8, [r6], #1
 8019906:	9b00      	ldr	r3, [sp, #0]
 8019908:	eba6 020a 	sub.w	r2, r6, sl
 801990c:	4293      	cmp	r3, r2
 801990e:	ddb3      	ble.n	8019878 <_dtoa_r+0xad8>
 8019910:	4649      	mov	r1, r9
 8019912:	2300      	movs	r3, #0
 8019914:	220a      	movs	r2, #10
 8019916:	4658      	mov	r0, fp
 8019918:	f000 ff42 	bl	801a7a0 <__multadd>
 801991c:	4681      	mov	r9, r0
 801991e:	e7ea      	b.n	80198f6 <_dtoa_r+0xb56>
 8019920:	0801c683 	.word	0x0801c683
 8019924:	0801c61e 	.word	0x0801c61e

08019928 <_free_r>:
 8019928:	b538      	push	{r3, r4, r5, lr}
 801992a:	4605      	mov	r5, r0
 801992c:	2900      	cmp	r1, #0
 801992e:	d041      	beq.n	80199b4 <_free_r+0x8c>
 8019930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019934:	1f0c      	subs	r4, r1, #4
 8019936:	2b00      	cmp	r3, #0
 8019938:	bfb8      	it	lt
 801993a:	18e4      	addlt	r4, r4, r3
 801993c:	f7fe f86e 	bl	8017a1c <__malloc_lock>
 8019940:	4a1d      	ldr	r2, [pc, #116]	@ (80199b8 <_free_r+0x90>)
 8019942:	6813      	ldr	r3, [r2, #0]
 8019944:	b933      	cbnz	r3, 8019954 <_free_r+0x2c>
 8019946:	6063      	str	r3, [r4, #4]
 8019948:	6014      	str	r4, [r2, #0]
 801994a:	4628      	mov	r0, r5
 801994c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019950:	f7fe b86a 	b.w	8017a28 <__malloc_unlock>
 8019954:	42a3      	cmp	r3, r4
 8019956:	d908      	bls.n	801996a <_free_r+0x42>
 8019958:	6820      	ldr	r0, [r4, #0]
 801995a:	1821      	adds	r1, r4, r0
 801995c:	428b      	cmp	r3, r1
 801995e:	bf01      	itttt	eq
 8019960:	6819      	ldreq	r1, [r3, #0]
 8019962:	685b      	ldreq	r3, [r3, #4]
 8019964:	1809      	addeq	r1, r1, r0
 8019966:	6021      	streq	r1, [r4, #0]
 8019968:	e7ed      	b.n	8019946 <_free_r+0x1e>
 801996a:	461a      	mov	r2, r3
 801996c:	685b      	ldr	r3, [r3, #4]
 801996e:	b10b      	cbz	r3, 8019974 <_free_r+0x4c>
 8019970:	42a3      	cmp	r3, r4
 8019972:	d9fa      	bls.n	801996a <_free_r+0x42>
 8019974:	6811      	ldr	r1, [r2, #0]
 8019976:	1850      	adds	r0, r2, r1
 8019978:	42a0      	cmp	r0, r4
 801997a:	d10b      	bne.n	8019994 <_free_r+0x6c>
 801997c:	6820      	ldr	r0, [r4, #0]
 801997e:	4401      	add	r1, r0
 8019980:	1850      	adds	r0, r2, r1
 8019982:	4283      	cmp	r3, r0
 8019984:	6011      	str	r1, [r2, #0]
 8019986:	d1e0      	bne.n	801994a <_free_r+0x22>
 8019988:	6818      	ldr	r0, [r3, #0]
 801998a:	685b      	ldr	r3, [r3, #4]
 801998c:	6053      	str	r3, [r2, #4]
 801998e:	4408      	add	r0, r1
 8019990:	6010      	str	r0, [r2, #0]
 8019992:	e7da      	b.n	801994a <_free_r+0x22>
 8019994:	d902      	bls.n	801999c <_free_r+0x74>
 8019996:	230c      	movs	r3, #12
 8019998:	602b      	str	r3, [r5, #0]
 801999a:	e7d6      	b.n	801994a <_free_r+0x22>
 801999c:	6820      	ldr	r0, [r4, #0]
 801999e:	1821      	adds	r1, r4, r0
 80199a0:	428b      	cmp	r3, r1
 80199a2:	bf04      	itt	eq
 80199a4:	6819      	ldreq	r1, [r3, #0]
 80199a6:	685b      	ldreq	r3, [r3, #4]
 80199a8:	6063      	str	r3, [r4, #4]
 80199aa:	bf04      	itt	eq
 80199ac:	1809      	addeq	r1, r1, r0
 80199ae:	6021      	streq	r1, [r4, #0]
 80199b0:	6054      	str	r4, [r2, #4]
 80199b2:	e7ca      	b.n	801994a <_free_r+0x22>
 80199b4:	bd38      	pop	{r3, r4, r5, pc}
 80199b6:	bf00      	nop
 80199b8:	200077ec 	.word	0x200077ec

080199bc <rshift>:
 80199bc:	6903      	ldr	r3, [r0, #16]
 80199be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80199c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80199ca:	f100 0414 	add.w	r4, r0, #20
 80199ce:	dd45      	ble.n	8019a5c <rshift+0xa0>
 80199d0:	f011 011f 	ands.w	r1, r1, #31
 80199d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80199d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80199dc:	d10c      	bne.n	80199f8 <rshift+0x3c>
 80199de:	f100 0710 	add.w	r7, r0, #16
 80199e2:	4629      	mov	r1, r5
 80199e4:	42b1      	cmp	r1, r6
 80199e6:	d334      	bcc.n	8019a52 <rshift+0x96>
 80199e8:	1a9b      	subs	r3, r3, r2
 80199ea:	009b      	lsls	r3, r3, #2
 80199ec:	1eea      	subs	r2, r5, #3
 80199ee:	4296      	cmp	r6, r2
 80199f0:	bf38      	it	cc
 80199f2:	2300      	movcc	r3, #0
 80199f4:	4423      	add	r3, r4
 80199f6:	e015      	b.n	8019a24 <rshift+0x68>
 80199f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80199fc:	f1c1 0820 	rsb	r8, r1, #32
 8019a00:	40cf      	lsrs	r7, r1
 8019a02:	f105 0e04 	add.w	lr, r5, #4
 8019a06:	46a1      	mov	r9, r4
 8019a08:	4576      	cmp	r6, lr
 8019a0a:	46f4      	mov	ip, lr
 8019a0c:	d815      	bhi.n	8019a3a <rshift+0x7e>
 8019a0e:	1a9a      	subs	r2, r3, r2
 8019a10:	0092      	lsls	r2, r2, #2
 8019a12:	3a04      	subs	r2, #4
 8019a14:	3501      	adds	r5, #1
 8019a16:	42ae      	cmp	r6, r5
 8019a18:	bf38      	it	cc
 8019a1a:	2200      	movcc	r2, #0
 8019a1c:	18a3      	adds	r3, r4, r2
 8019a1e:	50a7      	str	r7, [r4, r2]
 8019a20:	b107      	cbz	r7, 8019a24 <rshift+0x68>
 8019a22:	3304      	adds	r3, #4
 8019a24:	1b1a      	subs	r2, r3, r4
 8019a26:	42a3      	cmp	r3, r4
 8019a28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019a2c:	bf08      	it	eq
 8019a2e:	2300      	moveq	r3, #0
 8019a30:	6102      	str	r2, [r0, #16]
 8019a32:	bf08      	it	eq
 8019a34:	6143      	streq	r3, [r0, #20]
 8019a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a3a:	f8dc c000 	ldr.w	ip, [ip]
 8019a3e:	fa0c fc08 	lsl.w	ip, ip, r8
 8019a42:	ea4c 0707 	orr.w	r7, ip, r7
 8019a46:	f849 7b04 	str.w	r7, [r9], #4
 8019a4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019a4e:	40cf      	lsrs	r7, r1
 8019a50:	e7da      	b.n	8019a08 <rshift+0x4c>
 8019a52:	f851 cb04 	ldr.w	ip, [r1], #4
 8019a56:	f847 cf04 	str.w	ip, [r7, #4]!
 8019a5a:	e7c3      	b.n	80199e4 <rshift+0x28>
 8019a5c:	4623      	mov	r3, r4
 8019a5e:	e7e1      	b.n	8019a24 <rshift+0x68>

08019a60 <__hexdig_fun>:
 8019a60:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8019a64:	2b09      	cmp	r3, #9
 8019a66:	d802      	bhi.n	8019a6e <__hexdig_fun+0xe>
 8019a68:	3820      	subs	r0, #32
 8019a6a:	b2c0      	uxtb	r0, r0
 8019a6c:	4770      	bx	lr
 8019a6e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8019a72:	2b05      	cmp	r3, #5
 8019a74:	d801      	bhi.n	8019a7a <__hexdig_fun+0x1a>
 8019a76:	3847      	subs	r0, #71	@ 0x47
 8019a78:	e7f7      	b.n	8019a6a <__hexdig_fun+0xa>
 8019a7a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8019a7e:	2b05      	cmp	r3, #5
 8019a80:	d801      	bhi.n	8019a86 <__hexdig_fun+0x26>
 8019a82:	3827      	subs	r0, #39	@ 0x27
 8019a84:	e7f1      	b.n	8019a6a <__hexdig_fun+0xa>
 8019a86:	2000      	movs	r0, #0
 8019a88:	4770      	bx	lr
	...

08019a8c <__gethex>:
 8019a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a90:	b085      	sub	sp, #20
 8019a92:	468a      	mov	sl, r1
 8019a94:	9302      	str	r3, [sp, #8]
 8019a96:	680b      	ldr	r3, [r1, #0]
 8019a98:	9001      	str	r0, [sp, #4]
 8019a9a:	4690      	mov	r8, r2
 8019a9c:	1c9c      	adds	r4, r3, #2
 8019a9e:	46a1      	mov	r9, r4
 8019aa0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8019aa4:	2830      	cmp	r0, #48	@ 0x30
 8019aa6:	d0fa      	beq.n	8019a9e <__gethex+0x12>
 8019aa8:	eba9 0303 	sub.w	r3, r9, r3
 8019aac:	f1a3 0b02 	sub.w	fp, r3, #2
 8019ab0:	f7ff ffd6 	bl	8019a60 <__hexdig_fun>
 8019ab4:	4605      	mov	r5, r0
 8019ab6:	2800      	cmp	r0, #0
 8019ab8:	d168      	bne.n	8019b8c <__gethex+0x100>
 8019aba:	49a0      	ldr	r1, [pc, #640]	@ (8019d3c <__gethex+0x2b0>)
 8019abc:	2201      	movs	r2, #1
 8019abe:	4648      	mov	r0, r9
 8019ac0:	f7fe ff98 	bl	80189f4 <strncmp>
 8019ac4:	4607      	mov	r7, r0
 8019ac6:	2800      	cmp	r0, #0
 8019ac8:	d167      	bne.n	8019b9a <__gethex+0x10e>
 8019aca:	f899 0001 	ldrb.w	r0, [r9, #1]
 8019ace:	4626      	mov	r6, r4
 8019ad0:	f7ff ffc6 	bl	8019a60 <__hexdig_fun>
 8019ad4:	2800      	cmp	r0, #0
 8019ad6:	d062      	beq.n	8019b9e <__gethex+0x112>
 8019ad8:	4623      	mov	r3, r4
 8019ada:	7818      	ldrb	r0, [r3, #0]
 8019adc:	2830      	cmp	r0, #48	@ 0x30
 8019ade:	4699      	mov	r9, r3
 8019ae0:	f103 0301 	add.w	r3, r3, #1
 8019ae4:	d0f9      	beq.n	8019ada <__gethex+0x4e>
 8019ae6:	f7ff ffbb 	bl	8019a60 <__hexdig_fun>
 8019aea:	fab0 f580 	clz	r5, r0
 8019aee:	096d      	lsrs	r5, r5, #5
 8019af0:	f04f 0b01 	mov.w	fp, #1
 8019af4:	464a      	mov	r2, r9
 8019af6:	4616      	mov	r6, r2
 8019af8:	3201      	adds	r2, #1
 8019afa:	7830      	ldrb	r0, [r6, #0]
 8019afc:	f7ff ffb0 	bl	8019a60 <__hexdig_fun>
 8019b00:	2800      	cmp	r0, #0
 8019b02:	d1f8      	bne.n	8019af6 <__gethex+0x6a>
 8019b04:	498d      	ldr	r1, [pc, #564]	@ (8019d3c <__gethex+0x2b0>)
 8019b06:	2201      	movs	r2, #1
 8019b08:	4630      	mov	r0, r6
 8019b0a:	f7fe ff73 	bl	80189f4 <strncmp>
 8019b0e:	2800      	cmp	r0, #0
 8019b10:	d13f      	bne.n	8019b92 <__gethex+0x106>
 8019b12:	b944      	cbnz	r4, 8019b26 <__gethex+0x9a>
 8019b14:	1c74      	adds	r4, r6, #1
 8019b16:	4622      	mov	r2, r4
 8019b18:	4616      	mov	r6, r2
 8019b1a:	3201      	adds	r2, #1
 8019b1c:	7830      	ldrb	r0, [r6, #0]
 8019b1e:	f7ff ff9f 	bl	8019a60 <__hexdig_fun>
 8019b22:	2800      	cmp	r0, #0
 8019b24:	d1f8      	bne.n	8019b18 <__gethex+0x8c>
 8019b26:	1ba4      	subs	r4, r4, r6
 8019b28:	00a7      	lsls	r7, r4, #2
 8019b2a:	7833      	ldrb	r3, [r6, #0]
 8019b2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8019b30:	2b50      	cmp	r3, #80	@ 0x50
 8019b32:	d13e      	bne.n	8019bb2 <__gethex+0x126>
 8019b34:	7873      	ldrb	r3, [r6, #1]
 8019b36:	2b2b      	cmp	r3, #43	@ 0x2b
 8019b38:	d033      	beq.n	8019ba2 <__gethex+0x116>
 8019b3a:	2b2d      	cmp	r3, #45	@ 0x2d
 8019b3c:	d034      	beq.n	8019ba8 <__gethex+0x11c>
 8019b3e:	1c71      	adds	r1, r6, #1
 8019b40:	2400      	movs	r4, #0
 8019b42:	7808      	ldrb	r0, [r1, #0]
 8019b44:	f7ff ff8c 	bl	8019a60 <__hexdig_fun>
 8019b48:	1e43      	subs	r3, r0, #1
 8019b4a:	b2db      	uxtb	r3, r3
 8019b4c:	2b18      	cmp	r3, #24
 8019b4e:	d830      	bhi.n	8019bb2 <__gethex+0x126>
 8019b50:	f1a0 0210 	sub.w	r2, r0, #16
 8019b54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019b58:	f7ff ff82 	bl	8019a60 <__hexdig_fun>
 8019b5c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8019b60:	fa5f fc8c 	uxtb.w	ip, ip
 8019b64:	f1bc 0f18 	cmp.w	ip, #24
 8019b68:	f04f 030a 	mov.w	r3, #10
 8019b6c:	d91e      	bls.n	8019bac <__gethex+0x120>
 8019b6e:	b104      	cbz	r4, 8019b72 <__gethex+0xe6>
 8019b70:	4252      	negs	r2, r2
 8019b72:	4417      	add	r7, r2
 8019b74:	f8ca 1000 	str.w	r1, [sl]
 8019b78:	b1ed      	cbz	r5, 8019bb6 <__gethex+0x12a>
 8019b7a:	f1bb 0f00 	cmp.w	fp, #0
 8019b7e:	bf0c      	ite	eq
 8019b80:	2506      	moveq	r5, #6
 8019b82:	2500      	movne	r5, #0
 8019b84:	4628      	mov	r0, r5
 8019b86:	b005      	add	sp, #20
 8019b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b8c:	2500      	movs	r5, #0
 8019b8e:	462c      	mov	r4, r5
 8019b90:	e7b0      	b.n	8019af4 <__gethex+0x68>
 8019b92:	2c00      	cmp	r4, #0
 8019b94:	d1c7      	bne.n	8019b26 <__gethex+0x9a>
 8019b96:	4627      	mov	r7, r4
 8019b98:	e7c7      	b.n	8019b2a <__gethex+0x9e>
 8019b9a:	464e      	mov	r6, r9
 8019b9c:	462f      	mov	r7, r5
 8019b9e:	2501      	movs	r5, #1
 8019ba0:	e7c3      	b.n	8019b2a <__gethex+0x9e>
 8019ba2:	2400      	movs	r4, #0
 8019ba4:	1cb1      	adds	r1, r6, #2
 8019ba6:	e7cc      	b.n	8019b42 <__gethex+0xb6>
 8019ba8:	2401      	movs	r4, #1
 8019baa:	e7fb      	b.n	8019ba4 <__gethex+0x118>
 8019bac:	fb03 0002 	mla	r0, r3, r2, r0
 8019bb0:	e7ce      	b.n	8019b50 <__gethex+0xc4>
 8019bb2:	4631      	mov	r1, r6
 8019bb4:	e7de      	b.n	8019b74 <__gethex+0xe8>
 8019bb6:	eba6 0309 	sub.w	r3, r6, r9
 8019bba:	3b01      	subs	r3, #1
 8019bbc:	4629      	mov	r1, r5
 8019bbe:	2b07      	cmp	r3, #7
 8019bc0:	dc0a      	bgt.n	8019bd8 <__gethex+0x14c>
 8019bc2:	9801      	ldr	r0, [sp, #4]
 8019bc4:	f000 fd8a 	bl	801a6dc <_Balloc>
 8019bc8:	4604      	mov	r4, r0
 8019bca:	b940      	cbnz	r0, 8019bde <__gethex+0x152>
 8019bcc:	4b5c      	ldr	r3, [pc, #368]	@ (8019d40 <__gethex+0x2b4>)
 8019bce:	4602      	mov	r2, r0
 8019bd0:	21e4      	movs	r1, #228	@ 0xe4
 8019bd2:	485c      	ldr	r0, [pc, #368]	@ (8019d44 <__gethex+0x2b8>)
 8019bd4:	f7ff f83e 	bl	8018c54 <__assert_func>
 8019bd8:	3101      	adds	r1, #1
 8019bda:	105b      	asrs	r3, r3, #1
 8019bdc:	e7ef      	b.n	8019bbe <__gethex+0x132>
 8019bde:	f100 0a14 	add.w	sl, r0, #20
 8019be2:	2300      	movs	r3, #0
 8019be4:	4655      	mov	r5, sl
 8019be6:	469b      	mov	fp, r3
 8019be8:	45b1      	cmp	r9, r6
 8019bea:	d337      	bcc.n	8019c5c <__gethex+0x1d0>
 8019bec:	f845 bb04 	str.w	fp, [r5], #4
 8019bf0:	eba5 050a 	sub.w	r5, r5, sl
 8019bf4:	10ad      	asrs	r5, r5, #2
 8019bf6:	6125      	str	r5, [r4, #16]
 8019bf8:	4658      	mov	r0, fp
 8019bfa:	f000 fe61 	bl	801a8c0 <__hi0bits>
 8019bfe:	016d      	lsls	r5, r5, #5
 8019c00:	f8d8 6000 	ldr.w	r6, [r8]
 8019c04:	1a2d      	subs	r5, r5, r0
 8019c06:	42b5      	cmp	r5, r6
 8019c08:	dd54      	ble.n	8019cb4 <__gethex+0x228>
 8019c0a:	1bad      	subs	r5, r5, r6
 8019c0c:	4629      	mov	r1, r5
 8019c0e:	4620      	mov	r0, r4
 8019c10:	f001 f9f5 	bl	801affe <__any_on>
 8019c14:	4681      	mov	r9, r0
 8019c16:	b178      	cbz	r0, 8019c38 <__gethex+0x1ac>
 8019c18:	1e6b      	subs	r3, r5, #1
 8019c1a:	1159      	asrs	r1, r3, #5
 8019c1c:	f003 021f 	and.w	r2, r3, #31
 8019c20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019c24:	f04f 0901 	mov.w	r9, #1
 8019c28:	fa09 f202 	lsl.w	r2, r9, r2
 8019c2c:	420a      	tst	r2, r1
 8019c2e:	d003      	beq.n	8019c38 <__gethex+0x1ac>
 8019c30:	454b      	cmp	r3, r9
 8019c32:	dc36      	bgt.n	8019ca2 <__gethex+0x216>
 8019c34:	f04f 0902 	mov.w	r9, #2
 8019c38:	4629      	mov	r1, r5
 8019c3a:	4620      	mov	r0, r4
 8019c3c:	f7ff febe 	bl	80199bc <rshift>
 8019c40:	442f      	add	r7, r5
 8019c42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019c46:	42bb      	cmp	r3, r7
 8019c48:	da42      	bge.n	8019cd0 <__gethex+0x244>
 8019c4a:	9801      	ldr	r0, [sp, #4]
 8019c4c:	4621      	mov	r1, r4
 8019c4e:	f000 fd85 	bl	801a75c <_Bfree>
 8019c52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019c54:	2300      	movs	r3, #0
 8019c56:	6013      	str	r3, [r2, #0]
 8019c58:	25a3      	movs	r5, #163	@ 0xa3
 8019c5a:	e793      	b.n	8019b84 <__gethex+0xf8>
 8019c5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8019c60:	2a2e      	cmp	r2, #46	@ 0x2e
 8019c62:	d012      	beq.n	8019c8a <__gethex+0x1fe>
 8019c64:	2b20      	cmp	r3, #32
 8019c66:	d104      	bne.n	8019c72 <__gethex+0x1e6>
 8019c68:	f845 bb04 	str.w	fp, [r5], #4
 8019c6c:	f04f 0b00 	mov.w	fp, #0
 8019c70:	465b      	mov	r3, fp
 8019c72:	7830      	ldrb	r0, [r6, #0]
 8019c74:	9303      	str	r3, [sp, #12]
 8019c76:	f7ff fef3 	bl	8019a60 <__hexdig_fun>
 8019c7a:	9b03      	ldr	r3, [sp, #12]
 8019c7c:	f000 000f 	and.w	r0, r0, #15
 8019c80:	4098      	lsls	r0, r3
 8019c82:	ea4b 0b00 	orr.w	fp, fp, r0
 8019c86:	3304      	adds	r3, #4
 8019c88:	e7ae      	b.n	8019be8 <__gethex+0x15c>
 8019c8a:	45b1      	cmp	r9, r6
 8019c8c:	d8ea      	bhi.n	8019c64 <__gethex+0x1d8>
 8019c8e:	492b      	ldr	r1, [pc, #172]	@ (8019d3c <__gethex+0x2b0>)
 8019c90:	9303      	str	r3, [sp, #12]
 8019c92:	2201      	movs	r2, #1
 8019c94:	4630      	mov	r0, r6
 8019c96:	f7fe fead 	bl	80189f4 <strncmp>
 8019c9a:	9b03      	ldr	r3, [sp, #12]
 8019c9c:	2800      	cmp	r0, #0
 8019c9e:	d1e1      	bne.n	8019c64 <__gethex+0x1d8>
 8019ca0:	e7a2      	b.n	8019be8 <__gethex+0x15c>
 8019ca2:	1ea9      	subs	r1, r5, #2
 8019ca4:	4620      	mov	r0, r4
 8019ca6:	f001 f9aa 	bl	801affe <__any_on>
 8019caa:	2800      	cmp	r0, #0
 8019cac:	d0c2      	beq.n	8019c34 <__gethex+0x1a8>
 8019cae:	f04f 0903 	mov.w	r9, #3
 8019cb2:	e7c1      	b.n	8019c38 <__gethex+0x1ac>
 8019cb4:	da09      	bge.n	8019cca <__gethex+0x23e>
 8019cb6:	1b75      	subs	r5, r6, r5
 8019cb8:	4621      	mov	r1, r4
 8019cba:	9801      	ldr	r0, [sp, #4]
 8019cbc:	462a      	mov	r2, r5
 8019cbe:	f000 ff65 	bl	801ab8c <__lshift>
 8019cc2:	1b7f      	subs	r7, r7, r5
 8019cc4:	4604      	mov	r4, r0
 8019cc6:	f100 0a14 	add.w	sl, r0, #20
 8019cca:	f04f 0900 	mov.w	r9, #0
 8019cce:	e7b8      	b.n	8019c42 <__gethex+0x1b6>
 8019cd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019cd4:	42bd      	cmp	r5, r7
 8019cd6:	dd6f      	ble.n	8019db8 <__gethex+0x32c>
 8019cd8:	1bed      	subs	r5, r5, r7
 8019cda:	42ae      	cmp	r6, r5
 8019cdc:	dc34      	bgt.n	8019d48 <__gethex+0x2bc>
 8019cde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019ce2:	2b02      	cmp	r3, #2
 8019ce4:	d022      	beq.n	8019d2c <__gethex+0x2a0>
 8019ce6:	2b03      	cmp	r3, #3
 8019ce8:	d024      	beq.n	8019d34 <__gethex+0x2a8>
 8019cea:	2b01      	cmp	r3, #1
 8019cec:	d115      	bne.n	8019d1a <__gethex+0x28e>
 8019cee:	42ae      	cmp	r6, r5
 8019cf0:	d113      	bne.n	8019d1a <__gethex+0x28e>
 8019cf2:	2e01      	cmp	r6, #1
 8019cf4:	d10b      	bne.n	8019d0e <__gethex+0x282>
 8019cf6:	9a02      	ldr	r2, [sp, #8]
 8019cf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019cfc:	6013      	str	r3, [r2, #0]
 8019cfe:	2301      	movs	r3, #1
 8019d00:	6123      	str	r3, [r4, #16]
 8019d02:	f8ca 3000 	str.w	r3, [sl]
 8019d06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019d08:	2562      	movs	r5, #98	@ 0x62
 8019d0a:	601c      	str	r4, [r3, #0]
 8019d0c:	e73a      	b.n	8019b84 <__gethex+0xf8>
 8019d0e:	1e71      	subs	r1, r6, #1
 8019d10:	4620      	mov	r0, r4
 8019d12:	f001 f974 	bl	801affe <__any_on>
 8019d16:	2800      	cmp	r0, #0
 8019d18:	d1ed      	bne.n	8019cf6 <__gethex+0x26a>
 8019d1a:	9801      	ldr	r0, [sp, #4]
 8019d1c:	4621      	mov	r1, r4
 8019d1e:	f000 fd1d 	bl	801a75c <_Bfree>
 8019d22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019d24:	2300      	movs	r3, #0
 8019d26:	6013      	str	r3, [r2, #0]
 8019d28:	2550      	movs	r5, #80	@ 0x50
 8019d2a:	e72b      	b.n	8019b84 <__gethex+0xf8>
 8019d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d1f3      	bne.n	8019d1a <__gethex+0x28e>
 8019d32:	e7e0      	b.n	8019cf6 <__gethex+0x26a>
 8019d34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d1dd      	bne.n	8019cf6 <__gethex+0x26a>
 8019d3a:	e7ee      	b.n	8019d1a <__gethex+0x28e>
 8019d3c:	0801c411 	.word	0x0801c411
 8019d40:	0801c683 	.word	0x0801c683
 8019d44:	0801c694 	.word	0x0801c694
 8019d48:	1e6f      	subs	r7, r5, #1
 8019d4a:	f1b9 0f00 	cmp.w	r9, #0
 8019d4e:	d130      	bne.n	8019db2 <__gethex+0x326>
 8019d50:	b127      	cbz	r7, 8019d5c <__gethex+0x2d0>
 8019d52:	4639      	mov	r1, r7
 8019d54:	4620      	mov	r0, r4
 8019d56:	f001 f952 	bl	801affe <__any_on>
 8019d5a:	4681      	mov	r9, r0
 8019d5c:	117a      	asrs	r2, r7, #5
 8019d5e:	2301      	movs	r3, #1
 8019d60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8019d64:	f007 071f 	and.w	r7, r7, #31
 8019d68:	40bb      	lsls	r3, r7
 8019d6a:	4213      	tst	r3, r2
 8019d6c:	4629      	mov	r1, r5
 8019d6e:	4620      	mov	r0, r4
 8019d70:	bf18      	it	ne
 8019d72:	f049 0902 	orrne.w	r9, r9, #2
 8019d76:	f7ff fe21 	bl	80199bc <rshift>
 8019d7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8019d7e:	1b76      	subs	r6, r6, r5
 8019d80:	2502      	movs	r5, #2
 8019d82:	f1b9 0f00 	cmp.w	r9, #0
 8019d86:	d047      	beq.n	8019e18 <__gethex+0x38c>
 8019d88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019d8c:	2b02      	cmp	r3, #2
 8019d8e:	d015      	beq.n	8019dbc <__gethex+0x330>
 8019d90:	2b03      	cmp	r3, #3
 8019d92:	d017      	beq.n	8019dc4 <__gethex+0x338>
 8019d94:	2b01      	cmp	r3, #1
 8019d96:	d109      	bne.n	8019dac <__gethex+0x320>
 8019d98:	f019 0f02 	tst.w	r9, #2
 8019d9c:	d006      	beq.n	8019dac <__gethex+0x320>
 8019d9e:	f8da 3000 	ldr.w	r3, [sl]
 8019da2:	ea49 0903 	orr.w	r9, r9, r3
 8019da6:	f019 0f01 	tst.w	r9, #1
 8019daa:	d10e      	bne.n	8019dca <__gethex+0x33e>
 8019dac:	f045 0510 	orr.w	r5, r5, #16
 8019db0:	e032      	b.n	8019e18 <__gethex+0x38c>
 8019db2:	f04f 0901 	mov.w	r9, #1
 8019db6:	e7d1      	b.n	8019d5c <__gethex+0x2d0>
 8019db8:	2501      	movs	r5, #1
 8019dba:	e7e2      	b.n	8019d82 <__gethex+0x2f6>
 8019dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019dbe:	f1c3 0301 	rsb	r3, r3, #1
 8019dc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d0f0      	beq.n	8019dac <__gethex+0x320>
 8019dca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019dce:	f104 0314 	add.w	r3, r4, #20
 8019dd2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019dd6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019dda:	f04f 0c00 	mov.w	ip, #0
 8019dde:	4618      	mov	r0, r3
 8019de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8019de4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8019de8:	d01b      	beq.n	8019e22 <__gethex+0x396>
 8019dea:	3201      	adds	r2, #1
 8019dec:	6002      	str	r2, [r0, #0]
 8019dee:	2d02      	cmp	r5, #2
 8019df0:	f104 0314 	add.w	r3, r4, #20
 8019df4:	d13c      	bne.n	8019e70 <__gethex+0x3e4>
 8019df6:	f8d8 2000 	ldr.w	r2, [r8]
 8019dfa:	3a01      	subs	r2, #1
 8019dfc:	42b2      	cmp	r2, r6
 8019dfe:	d109      	bne.n	8019e14 <__gethex+0x388>
 8019e00:	1171      	asrs	r1, r6, #5
 8019e02:	2201      	movs	r2, #1
 8019e04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019e08:	f006 061f 	and.w	r6, r6, #31
 8019e0c:	fa02 f606 	lsl.w	r6, r2, r6
 8019e10:	421e      	tst	r6, r3
 8019e12:	d13a      	bne.n	8019e8a <__gethex+0x3fe>
 8019e14:	f045 0520 	orr.w	r5, r5, #32
 8019e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019e1a:	601c      	str	r4, [r3, #0]
 8019e1c:	9b02      	ldr	r3, [sp, #8]
 8019e1e:	601f      	str	r7, [r3, #0]
 8019e20:	e6b0      	b.n	8019b84 <__gethex+0xf8>
 8019e22:	4299      	cmp	r1, r3
 8019e24:	f843 cc04 	str.w	ip, [r3, #-4]
 8019e28:	d8d9      	bhi.n	8019dde <__gethex+0x352>
 8019e2a:	68a3      	ldr	r3, [r4, #8]
 8019e2c:	459b      	cmp	fp, r3
 8019e2e:	db17      	blt.n	8019e60 <__gethex+0x3d4>
 8019e30:	6861      	ldr	r1, [r4, #4]
 8019e32:	9801      	ldr	r0, [sp, #4]
 8019e34:	3101      	adds	r1, #1
 8019e36:	f000 fc51 	bl	801a6dc <_Balloc>
 8019e3a:	4681      	mov	r9, r0
 8019e3c:	b918      	cbnz	r0, 8019e46 <__gethex+0x3ba>
 8019e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8019ea8 <__gethex+0x41c>)
 8019e40:	4602      	mov	r2, r0
 8019e42:	2184      	movs	r1, #132	@ 0x84
 8019e44:	e6c5      	b.n	8019bd2 <__gethex+0x146>
 8019e46:	6922      	ldr	r2, [r4, #16]
 8019e48:	3202      	adds	r2, #2
 8019e4a:	f104 010c 	add.w	r1, r4, #12
 8019e4e:	0092      	lsls	r2, r2, #2
 8019e50:	300c      	adds	r0, #12
 8019e52:	f7fe fedf 	bl	8018c14 <memcpy>
 8019e56:	4621      	mov	r1, r4
 8019e58:	9801      	ldr	r0, [sp, #4]
 8019e5a:	f000 fc7f 	bl	801a75c <_Bfree>
 8019e5e:	464c      	mov	r4, r9
 8019e60:	6923      	ldr	r3, [r4, #16]
 8019e62:	1c5a      	adds	r2, r3, #1
 8019e64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019e68:	6122      	str	r2, [r4, #16]
 8019e6a:	2201      	movs	r2, #1
 8019e6c:	615a      	str	r2, [r3, #20]
 8019e6e:	e7be      	b.n	8019dee <__gethex+0x362>
 8019e70:	6922      	ldr	r2, [r4, #16]
 8019e72:	455a      	cmp	r2, fp
 8019e74:	dd0b      	ble.n	8019e8e <__gethex+0x402>
 8019e76:	2101      	movs	r1, #1
 8019e78:	4620      	mov	r0, r4
 8019e7a:	f7ff fd9f 	bl	80199bc <rshift>
 8019e7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019e82:	3701      	adds	r7, #1
 8019e84:	42bb      	cmp	r3, r7
 8019e86:	f6ff aee0 	blt.w	8019c4a <__gethex+0x1be>
 8019e8a:	2501      	movs	r5, #1
 8019e8c:	e7c2      	b.n	8019e14 <__gethex+0x388>
 8019e8e:	f016 061f 	ands.w	r6, r6, #31
 8019e92:	d0fa      	beq.n	8019e8a <__gethex+0x3fe>
 8019e94:	4453      	add	r3, sl
 8019e96:	f1c6 0620 	rsb	r6, r6, #32
 8019e9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8019e9e:	f000 fd0f 	bl	801a8c0 <__hi0bits>
 8019ea2:	42b0      	cmp	r0, r6
 8019ea4:	dbe7      	blt.n	8019e76 <__gethex+0x3ea>
 8019ea6:	e7f0      	b.n	8019e8a <__gethex+0x3fe>
 8019ea8:	0801c683 	.word	0x0801c683

08019eac <L_shift>:
 8019eac:	f1c2 0208 	rsb	r2, r2, #8
 8019eb0:	0092      	lsls	r2, r2, #2
 8019eb2:	b570      	push	{r4, r5, r6, lr}
 8019eb4:	f1c2 0620 	rsb	r6, r2, #32
 8019eb8:	6843      	ldr	r3, [r0, #4]
 8019eba:	6804      	ldr	r4, [r0, #0]
 8019ebc:	fa03 f506 	lsl.w	r5, r3, r6
 8019ec0:	432c      	orrs	r4, r5
 8019ec2:	40d3      	lsrs	r3, r2
 8019ec4:	6004      	str	r4, [r0, #0]
 8019ec6:	f840 3f04 	str.w	r3, [r0, #4]!
 8019eca:	4288      	cmp	r0, r1
 8019ecc:	d3f4      	bcc.n	8019eb8 <L_shift+0xc>
 8019ece:	bd70      	pop	{r4, r5, r6, pc}

08019ed0 <__match>:
 8019ed0:	b530      	push	{r4, r5, lr}
 8019ed2:	6803      	ldr	r3, [r0, #0]
 8019ed4:	3301      	adds	r3, #1
 8019ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019eda:	b914      	cbnz	r4, 8019ee2 <__match+0x12>
 8019edc:	6003      	str	r3, [r0, #0]
 8019ede:	2001      	movs	r0, #1
 8019ee0:	bd30      	pop	{r4, r5, pc}
 8019ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ee6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8019eea:	2d19      	cmp	r5, #25
 8019eec:	bf98      	it	ls
 8019eee:	3220      	addls	r2, #32
 8019ef0:	42a2      	cmp	r2, r4
 8019ef2:	d0f0      	beq.n	8019ed6 <__match+0x6>
 8019ef4:	2000      	movs	r0, #0
 8019ef6:	e7f3      	b.n	8019ee0 <__match+0x10>

08019ef8 <__hexnan>:
 8019ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019efc:	680b      	ldr	r3, [r1, #0]
 8019efe:	6801      	ldr	r1, [r0, #0]
 8019f00:	115e      	asrs	r6, r3, #5
 8019f02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019f06:	f013 031f 	ands.w	r3, r3, #31
 8019f0a:	b087      	sub	sp, #28
 8019f0c:	bf18      	it	ne
 8019f0e:	3604      	addne	r6, #4
 8019f10:	2500      	movs	r5, #0
 8019f12:	1f37      	subs	r7, r6, #4
 8019f14:	4682      	mov	sl, r0
 8019f16:	4690      	mov	r8, r2
 8019f18:	9301      	str	r3, [sp, #4]
 8019f1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8019f1e:	46b9      	mov	r9, r7
 8019f20:	463c      	mov	r4, r7
 8019f22:	9502      	str	r5, [sp, #8]
 8019f24:	46ab      	mov	fp, r5
 8019f26:	784a      	ldrb	r2, [r1, #1]
 8019f28:	1c4b      	adds	r3, r1, #1
 8019f2a:	9303      	str	r3, [sp, #12]
 8019f2c:	b342      	cbz	r2, 8019f80 <__hexnan+0x88>
 8019f2e:	4610      	mov	r0, r2
 8019f30:	9105      	str	r1, [sp, #20]
 8019f32:	9204      	str	r2, [sp, #16]
 8019f34:	f7ff fd94 	bl	8019a60 <__hexdig_fun>
 8019f38:	2800      	cmp	r0, #0
 8019f3a:	d151      	bne.n	8019fe0 <__hexnan+0xe8>
 8019f3c:	9a04      	ldr	r2, [sp, #16]
 8019f3e:	9905      	ldr	r1, [sp, #20]
 8019f40:	2a20      	cmp	r2, #32
 8019f42:	d818      	bhi.n	8019f76 <__hexnan+0x7e>
 8019f44:	9b02      	ldr	r3, [sp, #8]
 8019f46:	459b      	cmp	fp, r3
 8019f48:	dd13      	ble.n	8019f72 <__hexnan+0x7a>
 8019f4a:	454c      	cmp	r4, r9
 8019f4c:	d206      	bcs.n	8019f5c <__hexnan+0x64>
 8019f4e:	2d07      	cmp	r5, #7
 8019f50:	dc04      	bgt.n	8019f5c <__hexnan+0x64>
 8019f52:	462a      	mov	r2, r5
 8019f54:	4649      	mov	r1, r9
 8019f56:	4620      	mov	r0, r4
 8019f58:	f7ff ffa8 	bl	8019eac <L_shift>
 8019f5c:	4544      	cmp	r4, r8
 8019f5e:	d952      	bls.n	801a006 <__hexnan+0x10e>
 8019f60:	2300      	movs	r3, #0
 8019f62:	f1a4 0904 	sub.w	r9, r4, #4
 8019f66:	f844 3c04 	str.w	r3, [r4, #-4]
 8019f6a:	f8cd b008 	str.w	fp, [sp, #8]
 8019f6e:	464c      	mov	r4, r9
 8019f70:	461d      	mov	r5, r3
 8019f72:	9903      	ldr	r1, [sp, #12]
 8019f74:	e7d7      	b.n	8019f26 <__hexnan+0x2e>
 8019f76:	2a29      	cmp	r2, #41	@ 0x29
 8019f78:	d157      	bne.n	801a02a <__hexnan+0x132>
 8019f7a:	3102      	adds	r1, #2
 8019f7c:	f8ca 1000 	str.w	r1, [sl]
 8019f80:	f1bb 0f00 	cmp.w	fp, #0
 8019f84:	d051      	beq.n	801a02a <__hexnan+0x132>
 8019f86:	454c      	cmp	r4, r9
 8019f88:	d206      	bcs.n	8019f98 <__hexnan+0xa0>
 8019f8a:	2d07      	cmp	r5, #7
 8019f8c:	dc04      	bgt.n	8019f98 <__hexnan+0xa0>
 8019f8e:	462a      	mov	r2, r5
 8019f90:	4649      	mov	r1, r9
 8019f92:	4620      	mov	r0, r4
 8019f94:	f7ff ff8a 	bl	8019eac <L_shift>
 8019f98:	4544      	cmp	r4, r8
 8019f9a:	d936      	bls.n	801a00a <__hexnan+0x112>
 8019f9c:	f1a8 0204 	sub.w	r2, r8, #4
 8019fa0:	4623      	mov	r3, r4
 8019fa2:	f853 1b04 	ldr.w	r1, [r3], #4
 8019fa6:	f842 1f04 	str.w	r1, [r2, #4]!
 8019faa:	429f      	cmp	r7, r3
 8019fac:	d2f9      	bcs.n	8019fa2 <__hexnan+0xaa>
 8019fae:	1b3b      	subs	r3, r7, r4
 8019fb0:	f023 0303 	bic.w	r3, r3, #3
 8019fb4:	3304      	adds	r3, #4
 8019fb6:	3401      	adds	r4, #1
 8019fb8:	3e03      	subs	r6, #3
 8019fba:	42b4      	cmp	r4, r6
 8019fbc:	bf88      	it	hi
 8019fbe:	2304      	movhi	r3, #4
 8019fc0:	4443      	add	r3, r8
 8019fc2:	2200      	movs	r2, #0
 8019fc4:	f843 2b04 	str.w	r2, [r3], #4
 8019fc8:	429f      	cmp	r7, r3
 8019fca:	d2fb      	bcs.n	8019fc4 <__hexnan+0xcc>
 8019fcc:	683b      	ldr	r3, [r7, #0]
 8019fce:	b91b      	cbnz	r3, 8019fd8 <__hexnan+0xe0>
 8019fd0:	4547      	cmp	r7, r8
 8019fd2:	d128      	bne.n	801a026 <__hexnan+0x12e>
 8019fd4:	2301      	movs	r3, #1
 8019fd6:	603b      	str	r3, [r7, #0]
 8019fd8:	2005      	movs	r0, #5
 8019fda:	b007      	add	sp, #28
 8019fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fe0:	3501      	adds	r5, #1
 8019fe2:	2d08      	cmp	r5, #8
 8019fe4:	f10b 0b01 	add.w	fp, fp, #1
 8019fe8:	dd06      	ble.n	8019ff8 <__hexnan+0x100>
 8019fea:	4544      	cmp	r4, r8
 8019fec:	d9c1      	bls.n	8019f72 <__hexnan+0x7a>
 8019fee:	2300      	movs	r3, #0
 8019ff0:	f844 3c04 	str.w	r3, [r4, #-4]
 8019ff4:	2501      	movs	r5, #1
 8019ff6:	3c04      	subs	r4, #4
 8019ff8:	6822      	ldr	r2, [r4, #0]
 8019ffa:	f000 000f 	and.w	r0, r0, #15
 8019ffe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801a002:	6020      	str	r0, [r4, #0]
 801a004:	e7b5      	b.n	8019f72 <__hexnan+0x7a>
 801a006:	2508      	movs	r5, #8
 801a008:	e7b3      	b.n	8019f72 <__hexnan+0x7a>
 801a00a:	9b01      	ldr	r3, [sp, #4]
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d0dd      	beq.n	8019fcc <__hexnan+0xd4>
 801a010:	f1c3 0320 	rsb	r3, r3, #32
 801a014:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a018:	40da      	lsrs	r2, r3
 801a01a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801a01e:	4013      	ands	r3, r2
 801a020:	f846 3c04 	str.w	r3, [r6, #-4]
 801a024:	e7d2      	b.n	8019fcc <__hexnan+0xd4>
 801a026:	3f04      	subs	r7, #4
 801a028:	e7d0      	b.n	8019fcc <__hexnan+0xd4>
 801a02a:	2004      	movs	r0, #4
 801a02c:	e7d5      	b.n	8019fda <__hexnan+0xe2>

0801a02e <__ssputs_r>:
 801a02e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a032:	688e      	ldr	r6, [r1, #8]
 801a034:	461f      	mov	r7, r3
 801a036:	42be      	cmp	r6, r7
 801a038:	680b      	ldr	r3, [r1, #0]
 801a03a:	4682      	mov	sl, r0
 801a03c:	460c      	mov	r4, r1
 801a03e:	4690      	mov	r8, r2
 801a040:	d82d      	bhi.n	801a09e <__ssputs_r+0x70>
 801a042:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a046:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a04a:	d026      	beq.n	801a09a <__ssputs_r+0x6c>
 801a04c:	6965      	ldr	r5, [r4, #20]
 801a04e:	6909      	ldr	r1, [r1, #16]
 801a050:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a054:	eba3 0901 	sub.w	r9, r3, r1
 801a058:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a05c:	1c7b      	adds	r3, r7, #1
 801a05e:	444b      	add	r3, r9
 801a060:	106d      	asrs	r5, r5, #1
 801a062:	429d      	cmp	r5, r3
 801a064:	bf38      	it	cc
 801a066:	461d      	movcc	r5, r3
 801a068:	0553      	lsls	r3, r2, #21
 801a06a:	d527      	bpl.n	801a0bc <__ssputs_r+0x8e>
 801a06c:	4629      	mov	r1, r5
 801a06e:	f7fd f8b3 	bl	80171d8 <_malloc_r>
 801a072:	4606      	mov	r6, r0
 801a074:	b360      	cbz	r0, 801a0d0 <__ssputs_r+0xa2>
 801a076:	6921      	ldr	r1, [r4, #16]
 801a078:	464a      	mov	r2, r9
 801a07a:	f7fe fdcb 	bl	8018c14 <memcpy>
 801a07e:	89a3      	ldrh	r3, [r4, #12]
 801a080:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a088:	81a3      	strh	r3, [r4, #12]
 801a08a:	6126      	str	r6, [r4, #16]
 801a08c:	6165      	str	r5, [r4, #20]
 801a08e:	444e      	add	r6, r9
 801a090:	eba5 0509 	sub.w	r5, r5, r9
 801a094:	6026      	str	r6, [r4, #0]
 801a096:	60a5      	str	r5, [r4, #8]
 801a098:	463e      	mov	r6, r7
 801a09a:	42be      	cmp	r6, r7
 801a09c:	d900      	bls.n	801a0a0 <__ssputs_r+0x72>
 801a09e:	463e      	mov	r6, r7
 801a0a0:	6820      	ldr	r0, [r4, #0]
 801a0a2:	4632      	mov	r2, r6
 801a0a4:	4641      	mov	r1, r8
 801a0a6:	f001 f952 	bl	801b34e <memmove>
 801a0aa:	68a3      	ldr	r3, [r4, #8]
 801a0ac:	1b9b      	subs	r3, r3, r6
 801a0ae:	60a3      	str	r3, [r4, #8]
 801a0b0:	6823      	ldr	r3, [r4, #0]
 801a0b2:	4433      	add	r3, r6
 801a0b4:	6023      	str	r3, [r4, #0]
 801a0b6:	2000      	movs	r0, #0
 801a0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0bc:	462a      	mov	r2, r5
 801a0be:	f001 f815 	bl	801b0ec <_realloc_r>
 801a0c2:	4606      	mov	r6, r0
 801a0c4:	2800      	cmp	r0, #0
 801a0c6:	d1e0      	bne.n	801a08a <__ssputs_r+0x5c>
 801a0c8:	6921      	ldr	r1, [r4, #16]
 801a0ca:	4650      	mov	r0, sl
 801a0cc:	f7ff fc2c 	bl	8019928 <_free_r>
 801a0d0:	230c      	movs	r3, #12
 801a0d2:	f8ca 3000 	str.w	r3, [sl]
 801a0d6:	89a3      	ldrh	r3, [r4, #12]
 801a0d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a0dc:	81a3      	strh	r3, [r4, #12]
 801a0de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a0e2:	e7e9      	b.n	801a0b8 <__ssputs_r+0x8a>

0801a0e4 <_svfiprintf_r>:
 801a0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0e8:	4698      	mov	r8, r3
 801a0ea:	898b      	ldrh	r3, [r1, #12]
 801a0ec:	061b      	lsls	r3, r3, #24
 801a0ee:	b09d      	sub	sp, #116	@ 0x74
 801a0f0:	4607      	mov	r7, r0
 801a0f2:	460d      	mov	r5, r1
 801a0f4:	4614      	mov	r4, r2
 801a0f6:	d510      	bpl.n	801a11a <_svfiprintf_r+0x36>
 801a0f8:	690b      	ldr	r3, [r1, #16]
 801a0fa:	b973      	cbnz	r3, 801a11a <_svfiprintf_r+0x36>
 801a0fc:	2140      	movs	r1, #64	@ 0x40
 801a0fe:	f7fd f86b 	bl	80171d8 <_malloc_r>
 801a102:	6028      	str	r0, [r5, #0]
 801a104:	6128      	str	r0, [r5, #16]
 801a106:	b930      	cbnz	r0, 801a116 <_svfiprintf_r+0x32>
 801a108:	230c      	movs	r3, #12
 801a10a:	603b      	str	r3, [r7, #0]
 801a10c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a110:	b01d      	add	sp, #116	@ 0x74
 801a112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a116:	2340      	movs	r3, #64	@ 0x40
 801a118:	616b      	str	r3, [r5, #20]
 801a11a:	2300      	movs	r3, #0
 801a11c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a11e:	2320      	movs	r3, #32
 801a120:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a124:	f8cd 800c 	str.w	r8, [sp, #12]
 801a128:	2330      	movs	r3, #48	@ 0x30
 801a12a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a2c8 <_svfiprintf_r+0x1e4>
 801a12e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a132:	f04f 0901 	mov.w	r9, #1
 801a136:	4623      	mov	r3, r4
 801a138:	469a      	mov	sl, r3
 801a13a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a13e:	b10a      	cbz	r2, 801a144 <_svfiprintf_r+0x60>
 801a140:	2a25      	cmp	r2, #37	@ 0x25
 801a142:	d1f9      	bne.n	801a138 <_svfiprintf_r+0x54>
 801a144:	ebba 0b04 	subs.w	fp, sl, r4
 801a148:	d00b      	beq.n	801a162 <_svfiprintf_r+0x7e>
 801a14a:	465b      	mov	r3, fp
 801a14c:	4622      	mov	r2, r4
 801a14e:	4629      	mov	r1, r5
 801a150:	4638      	mov	r0, r7
 801a152:	f7ff ff6c 	bl	801a02e <__ssputs_r>
 801a156:	3001      	adds	r0, #1
 801a158:	f000 80a7 	beq.w	801a2aa <_svfiprintf_r+0x1c6>
 801a15c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a15e:	445a      	add	r2, fp
 801a160:	9209      	str	r2, [sp, #36]	@ 0x24
 801a162:	f89a 3000 	ldrb.w	r3, [sl]
 801a166:	2b00      	cmp	r3, #0
 801a168:	f000 809f 	beq.w	801a2aa <_svfiprintf_r+0x1c6>
 801a16c:	2300      	movs	r3, #0
 801a16e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a176:	f10a 0a01 	add.w	sl, sl, #1
 801a17a:	9304      	str	r3, [sp, #16]
 801a17c:	9307      	str	r3, [sp, #28]
 801a17e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a182:	931a      	str	r3, [sp, #104]	@ 0x68
 801a184:	4654      	mov	r4, sl
 801a186:	2205      	movs	r2, #5
 801a188:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a18c:	484e      	ldr	r0, [pc, #312]	@ (801a2c8 <_svfiprintf_r+0x1e4>)
 801a18e:	f7e8 fa47 	bl	8002620 <memchr>
 801a192:	9a04      	ldr	r2, [sp, #16]
 801a194:	b9d8      	cbnz	r0, 801a1ce <_svfiprintf_r+0xea>
 801a196:	06d0      	lsls	r0, r2, #27
 801a198:	bf44      	itt	mi
 801a19a:	2320      	movmi	r3, #32
 801a19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a1a0:	0711      	lsls	r1, r2, #28
 801a1a2:	bf44      	itt	mi
 801a1a4:	232b      	movmi	r3, #43	@ 0x2b
 801a1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a1aa:	f89a 3000 	ldrb.w	r3, [sl]
 801a1ae:	2b2a      	cmp	r3, #42	@ 0x2a
 801a1b0:	d015      	beq.n	801a1de <_svfiprintf_r+0xfa>
 801a1b2:	9a07      	ldr	r2, [sp, #28]
 801a1b4:	4654      	mov	r4, sl
 801a1b6:	2000      	movs	r0, #0
 801a1b8:	f04f 0c0a 	mov.w	ip, #10
 801a1bc:	4621      	mov	r1, r4
 801a1be:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a1c2:	3b30      	subs	r3, #48	@ 0x30
 801a1c4:	2b09      	cmp	r3, #9
 801a1c6:	d94b      	bls.n	801a260 <_svfiprintf_r+0x17c>
 801a1c8:	b1b0      	cbz	r0, 801a1f8 <_svfiprintf_r+0x114>
 801a1ca:	9207      	str	r2, [sp, #28]
 801a1cc:	e014      	b.n	801a1f8 <_svfiprintf_r+0x114>
 801a1ce:	eba0 0308 	sub.w	r3, r0, r8
 801a1d2:	fa09 f303 	lsl.w	r3, r9, r3
 801a1d6:	4313      	orrs	r3, r2
 801a1d8:	9304      	str	r3, [sp, #16]
 801a1da:	46a2      	mov	sl, r4
 801a1dc:	e7d2      	b.n	801a184 <_svfiprintf_r+0xa0>
 801a1de:	9b03      	ldr	r3, [sp, #12]
 801a1e0:	1d19      	adds	r1, r3, #4
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	9103      	str	r1, [sp, #12]
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	bfbb      	ittet	lt
 801a1ea:	425b      	neglt	r3, r3
 801a1ec:	f042 0202 	orrlt.w	r2, r2, #2
 801a1f0:	9307      	strge	r3, [sp, #28]
 801a1f2:	9307      	strlt	r3, [sp, #28]
 801a1f4:	bfb8      	it	lt
 801a1f6:	9204      	strlt	r2, [sp, #16]
 801a1f8:	7823      	ldrb	r3, [r4, #0]
 801a1fa:	2b2e      	cmp	r3, #46	@ 0x2e
 801a1fc:	d10a      	bne.n	801a214 <_svfiprintf_r+0x130>
 801a1fe:	7863      	ldrb	r3, [r4, #1]
 801a200:	2b2a      	cmp	r3, #42	@ 0x2a
 801a202:	d132      	bne.n	801a26a <_svfiprintf_r+0x186>
 801a204:	9b03      	ldr	r3, [sp, #12]
 801a206:	1d1a      	adds	r2, r3, #4
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	9203      	str	r2, [sp, #12]
 801a20c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a210:	3402      	adds	r4, #2
 801a212:	9305      	str	r3, [sp, #20]
 801a214:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a2d8 <_svfiprintf_r+0x1f4>
 801a218:	7821      	ldrb	r1, [r4, #0]
 801a21a:	2203      	movs	r2, #3
 801a21c:	4650      	mov	r0, sl
 801a21e:	f7e8 f9ff 	bl	8002620 <memchr>
 801a222:	b138      	cbz	r0, 801a234 <_svfiprintf_r+0x150>
 801a224:	9b04      	ldr	r3, [sp, #16]
 801a226:	eba0 000a 	sub.w	r0, r0, sl
 801a22a:	2240      	movs	r2, #64	@ 0x40
 801a22c:	4082      	lsls	r2, r0
 801a22e:	4313      	orrs	r3, r2
 801a230:	3401      	adds	r4, #1
 801a232:	9304      	str	r3, [sp, #16]
 801a234:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a238:	4824      	ldr	r0, [pc, #144]	@ (801a2cc <_svfiprintf_r+0x1e8>)
 801a23a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a23e:	2206      	movs	r2, #6
 801a240:	f7e8 f9ee 	bl	8002620 <memchr>
 801a244:	2800      	cmp	r0, #0
 801a246:	d036      	beq.n	801a2b6 <_svfiprintf_r+0x1d2>
 801a248:	4b21      	ldr	r3, [pc, #132]	@ (801a2d0 <_svfiprintf_r+0x1ec>)
 801a24a:	bb1b      	cbnz	r3, 801a294 <_svfiprintf_r+0x1b0>
 801a24c:	9b03      	ldr	r3, [sp, #12]
 801a24e:	3307      	adds	r3, #7
 801a250:	f023 0307 	bic.w	r3, r3, #7
 801a254:	3308      	adds	r3, #8
 801a256:	9303      	str	r3, [sp, #12]
 801a258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a25a:	4433      	add	r3, r6
 801a25c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a25e:	e76a      	b.n	801a136 <_svfiprintf_r+0x52>
 801a260:	fb0c 3202 	mla	r2, ip, r2, r3
 801a264:	460c      	mov	r4, r1
 801a266:	2001      	movs	r0, #1
 801a268:	e7a8      	b.n	801a1bc <_svfiprintf_r+0xd8>
 801a26a:	2300      	movs	r3, #0
 801a26c:	3401      	adds	r4, #1
 801a26e:	9305      	str	r3, [sp, #20]
 801a270:	4619      	mov	r1, r3
 801a272:	f04f 0c0a 	mov.w	ip, #10
 801a276:	4620      	mov	r0, r4
 801a278:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a27c:	3a30      	subs	r2, #48	@ 0x30
 801a27e:	2a09      	cmp	r2, #9
 801a280:	d903      	bls.n	801a28a <_svfiprintf_r+0x1a6>
 801a282:	2b00      	cmp	r3, #0
 801a284:	d0c6      	beq.n	801a214 <_svfiprintf_r+0x130>
 801a286:	9105      	str	r1, [sp, #20]
 801a288:	e7c4      	b.n	801a214 <_svfiprintf_r+0x130>
 801a28a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a28e:	4604      	mov	r4, r0
 801a290:	2301      	movs	r3, #1
 801a292:	e7f0      	b.n	801a276 <_svfiprintf_r+0x192>
 801a294:	ab03      	add	r3, sp, #12
 801a296:	9300      	str	r3, [sp, #0]
 801a298:	462a      	mov	r2, r5
 801a29a:	4b0e      	ldr	r3, [pc, #56]	@ (801a2d4 <_svfiprintf_r+0x1f0>)
 801a29c:	a904      	add	r1, sp, #16
 801a29e:	4638      	mov	r0, r7
 801a2a0:	f7fc fd46 	bl	8016d30 <_printf_float>
 801a2a4:	1c42      	adds	r2, r0, #1
 801a2a6:	4606      	mov	r6, r0
 801a2a8:	d1d6      	bne.n	801a258 <_svfiprintf_r+0x174>
 801a2aa:	89ab      	ldrh	r3, [r5, #12]
 801a2ac:	065b      	lsls	r3, r3, #25
 801a2ae:	f53f af2d 	bmi.w	801a10c <_svfiprintf_r+0x28>
 801a2b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a2b4:	e72c      	b.n	801a110 <_svfiprintf_r+0x2c>
 801a2b6:	ab03      	add	r3, sp, #12
 801a2b8:	9300      	str	r3, [sp, #0]
 801a2ba:	462a      	mov	r2, r5
 801a2bc:	4b05      	ldr	r3, [pc, #20]	@ (801a2d4 <_svfiprintf_r+0x1f0>)
 801a2be:	a904      	add	r1, sp, #16
 801a2c0:	4638      	mov	r0, r7
 801a2c2:	f7fd f877 	bl	80173b4 <_printf_i>
 801a2c6:	e7ed      	b.n	801a2a4 <_svfiprintf_r+0x1c0>
 801a2c8:	0801c6f4 	.word	0x0801c6f4
 801a2cc:	0801c6fe 	.word	0x0801c6fe
 801a2d0:	08016d31 	.word	0x08016d31
 801a2d4:	0801a02f 	.word	0x0801a02f
 801a2d8:	0801c6fa 	.word	0x0801c6fa

0801a2dc <__sfputc_r>:
 801a2dc:	6893      	ldr	r3, [r2, #8]
 801a2de:	3b01      	subs	r3, #1
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	b410      	push	{r4}
 801a2e4:	6093      	str	r3, [r2, #8]
 801a2e6:	da08      	bge.n	801a2fa <__sfputc_r+0x1e>
 801a2e8:	6994      	ldr	r4, [r2, #24]
 801a2ea:	42a3      	cmp	r3, r4
 801a2ec:	db01      	blt.n	801a2f2 <__sfputc_r+0x16>
 801a2ee:	290a      	cmp	r1, #10
 801a2f0:	d103      	bne.n	801a2fa <__sfputc_r+0x1e>
 801a2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2f6:	f000 bf27 	b.w	801b148 <__swbuf_r>
 801a2fa:	6813      	ldr	r3, [r2, #0]
 801a2fc:	1c58      	adds	r0, r3, #1
 801a2fe:	6010      	str	r0, [r2, #0]
 801a300:	7019      	strb	r1, [r3, #0]
 801a302:	4608      	mov	r0, r1
 801a304:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a308:	4770      	bx	lr

0801a30a <__sfputs_r>:
 801a30a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a30c:	4606      	mov	r6, r0
 801a30e:	460f      	mov	r7, r1
 801a310:	4614      	mov	r4, r2
 801a312:	18d5      	adds	r5, r2, r3
 801a314:	42ac      	cmp	r4, r5
 801a316:	d101      	bne.n	801a31c <__sfputs_r+0x12>
 801a318:	2000      	movs	r0, #0
 801a31a:	e007      	b.n	801a32c <__sfputs_r+0x22>
 801a31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a320:	463a      	mov	r2, r7
 801a322:	4630      	mov	r0, r6
 801a324:	f7ff ffda 	bl	801a2dc <__sfputc_r>
 801a328:	1c43      	adds	r3, r0, #1
 801a32a:	d1f3      	bne.n	801a314 <__sfputs_r+0xa>
 801a32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a330 <_vfiprintf_r>:
 801a330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a334:	460d      	mov	r5, r1
 801a336:	b09d      	sub	sp, #116	@ 0x74
 801a338:	4614      	mov	r4, r2
 801a33a:	4698      	mov	r8, r3
 801a33c:	4606      	mov	r6, r0
 801a33e:	b118      	cbz	r0, 801a348 <_vfiprintf_r+0x18>
 801a340:	6a03      	ldr	r3, [r0, #32]
 801a342:	b90b      	cbnz	r3, 801a348 <_vfiprintf_r+0x18>
 801a344:	f7fd fc22 	bl	8017b8c <__sinit>
 801a348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a34a:	07d9      	lsls	r1, r3, #31
 801a34c:	d405      	bmi.n	801a35a <_vfiprintf_r+0x2a>
 801a34e:	89ab      	ldrh	r3, [r5, #12]
 801a350:	059a      	lsls	r2, r3, #22
 801a352:	d402      	bmi.n	801a35a <_vfiprintf_r+0x2a>
 801a354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a356:	f7fe fc58 	bl	8018c0a <__retarget_lock_acquire_recursive>
 801a35a:	89ab      	ldrh	r3, [r5, #12]
 801a35c:	071b      	lsls	r3, r3, #28
 801a35e:	d501      	bpl.n	801a364 <_vfiprintf_r+0x34>
 801a360:	692b      	ldr	r3, [r5, #16]
 801a362:	b99b      	cbnz	r3, 801a38c <_vfiprintf_r+0x5c>
 801a364:	4629      	mov	r1, r5
 801a366:	4630      	mov	r0, r6
 801a368:	f000 ff2c 	bl	801b1c4 <__swsetup_r>
 801a36c:	b170      	cbz	r0, 801a38c <_vfiprintf_r+0x5c>
 801a36e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a370:	07dc      	lsls	r4, r3, #31
 801a372:	d504      	bpl.n	801a37e <_vfiprintf_r+0x4e>
 801a374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a378:	b01d      	add	sp, #116	@ 0x74
 801a37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a37e:	89ab      	ldrh	r3, [r5, #12]
 801a380:	0598      	lsls	r0, r3, #22
 801a382:	d4f7      	bmi.n	801a374 <_vfiprintf_r+0x44>
 801a384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a386:	f7fe fc41 	bl	8018c0c <__retarget_lock_release_recursive>
 801a38a:	e7f3      	b.n	801a374 <_vfiprintf_r+0x44>
 801a38c:	2300      	movs	r3, #0
 801a38e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a390:	2320      	movs	r3, #32
 801a392:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a396:	f8cd 800c 	str.w	r8, [sp, #12]
 801a39a:	2330      	movs	r3, #48	@ 0x30
 801a39c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a54c <_vfiprintf_r+0x21c>
 801a3a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a3a4:	f04f 0901 	mov.w	r9, #1
 801a3a8:	4623      	mov	r3, r4
 801a3aa:	469a      	mov	sl, r3
 801a3ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a3b0:	b10a      	cbz	r2, 801a3b6 <_vfiprintf_r+0x86>
 801a3b2:	2a25      	cmp	r2, #37	@ 0x25
 801a3b4:	d1f9      	bne.n	801a3aa <_vfiprintf_r+0x7a>
 801a3b6:	ebba 0b04 	subs.w	fp, sl, r4
 801a3ba:	d00b      	beq.n	801a3d4 <_vfiprintf_r+0xa4>
 801a3bc:	465b      	mov	r3, fp
 801a3be:	4622      	mov	r2, r4
 801a3c0:	4629      	mov	r1, r5
 801a3c2:	4630      	mov	r0, r6
 801a3c4:	f7ff ffa1 	bl	801a30a <__sfputs_r>
 801a3c8:	3001      	adds	r0, #1
 801a3ca:	f000 80a7 	beq.w	801a51c <_vfiprintf_r+0x1ec>
 801a3ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a3d0:	445a      	add	r2, fp
 801a3d2:	9209      	str	r2, [sp, #36]	@ 0x24
 801a3d4:	f89a 3000 	ldrb.w	r3, [sl]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	f000 809f 	beq.w	801a51c <_vfiprintf_r+0x1ec>
 801a3de:	2300      	movs	r3, #0
 801a3e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a3e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a3e8:	f10a 0a01 	add.w	sl, sl, #1
 801a3ec:	9304      	str	r3, [sp, #16]
 801a3ee:	9307      	str	r3, [sp, #28]
 801a3f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a3f4:	931a      	str	r3, [sp, #104]	@ 0x68
 801a3f6:	4654      	mov	r4, sl
 801a3f8:	2205      	movs	r2, #5
 801a3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3fe:	4853      	ldr	r0, [pc, #332]	@ (801a54c <_vfiprintf_r+0x21c>)
 801a400:	f7e8 f90e 	bl	8002620 <memchr>
 801a404:	9a04      	ldr	r2, [sp, #16]
 801a406:	b9d8      	cbnz	r0, 801a440 <_vfiprintf_r+0x110>
 801a408:	06d1      	lsls	r1, r2, #27
 801a40a:	bf44      	itt	mi
 801a40c:	2320      	movmi	r3, #32
 801a40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a412:	0713      	lsls	r3, r2, #28
 801a414:	bf44      	itt	mi
 801a416:	232b      	movmi	r3, #43	@ 0x2b
 801a418:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a41c:	f89a 3000 	ldrb.w	r3, [sl]
 801a420:	2b2a      	cmp	r3, #42	@ 0x2a
 801a422:	d015      	beq.n	801a450 <_vfiprintf_r+0x120>
 801a424:	9a07      	ldr	r2, [sp, #28]
 801a426:	4654      	mov	r4, sl
 801a428:	2000      	movs	r0, #0
 801a42a:	f04f 0c0a 	mov.w	ip, #10
 801a42e:	4621      	mov	r1, r4
 801a430:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a434:	3b30      	subs	r3, #48	@ 0x30
 801a436:	2b09      	cmp	r3, #9
 801a438:	d94b      	bls.n	801a4d2 <_vfiprintf_r+0x1a2>
 801a43a:	b1b0      	cbz	r0, 801a46a <_vfiprintf_r+0x13a>
 801a43c:	9207      	str	r2, [sp, #28]
 801a43e:	e014      	b.n	801a46a <_vfiprintf_r+0x13a>
 801a440:	eba0 0308 	sub.w	r3, r0, r8
 801a444:	fa09 f303 	lsl.w	r3, r9, r3
 801a448:	4313      	orrs	r3, r2
 801a44a:	9304      	str	r3, [sp, #16]
 801a44c:	46a2      	mov	sl, r4
 801a44e:	e7d2      	b.n	801a3f6 <_vfiprintf_r+0xc6>
 801a450:	9b03      	ldr	r3, [sp, #12]
 801a452:	1d19      	adds	r1, r3, #4
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	9103      	str	r1, [sp, #12]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	bfbb      	ittet	lt
 801a45c:	425b      	neglt	r3, r3
 801a45e:	f042 0202 	orrlt.w	r2, r2, #2
 801a462:	9307      	strge	r3, [sp, #28]
 801a464:	9307      	strlt	r3, [sp, #28]
 801a466:	bfb8      	it	lt
 801a468:	9204      	strlt	r2, [sp, #16]
 801a46a:	7823      	ldrb	r3, [r4, #0]
 801a46c:	2b2e      	cmp	r3, #46	@ 0x2e
 801a46e:	d10a      	bne.n	801a486 <_vfiprintf_r+0x156>
 801a470:	7863      	ldrb	r3, [r4, #1]
 801a472:	2b2a      	cmp	r3, #42	@ 0x2a
 801a474:	d132      	bne.n	801a4dc <_vfiprintf_r+0x1ac>
 801a476:	9b03      	ldr	r3, [sp, #12]
 801a478:	1d1a      	adds	r2, r3, #4
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	9203      	str	r2, [sp, #12]
 801a47e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a482:	3402      	adds	r4, #2
 801a484:	9305      	str	r3, [sp, #20]
 801a486:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a55c <_vfiprintf_r+0x22c>
 801a48a:	7821      	ldrb	r1, [r4, #0]
 801a48c:	2203      	movs	r2, #3
 801a48e:	4650      	mov	r0, sl
 801a490:	f7e8 f8c6 	bl	8002620 <memchr>
 801a494:	b138      	cbz	r0, 801a4a6 <_vfiprintf_r+0x176>
 801a496:	9b04      	ldr	r3, [sp, #16]
 801a498:	eba0 000a 	sub.w	r0, r0, sl
 801a49c:	2240      	movs	r2, #64	@ 0x40
 801a49e:	4082      	lsls	r2, r0
 801a4a0:	4313      	orrs	r3, r2
 801a4a2:	3401      	adds	r4, #1
 801a4a4:	9304      	str	r3, [sp, #16]
 801a4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4aa:	4829      	ldr	r0, [pc, #164]	@ (801a550 <_vfiprintf_r+0x220>)
 801a4ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a4b0:	2206      	movs	r2, #6
 801a4b2:	f7e8 f8b5 	bl	8002620 <memchr>
 801a4b6:	2800      	cmp	r0, #0
 801a4b8:	d03f      	beq.n	801a53a <_vfiprintf_r+0x20a>
 801a4ba:	4b26      	ldr	r3, [pc, #152]	@ (801a554 <_vfiprintf_r+0x224>)
 801a4bc:	bb1b      	cbnz	r3, 801a506 <_vfiprintf_r+0x1d6>
 801a4be:	9b03      	ldr	r3, [sp, #12]
 801a4c0:	3307      	adds	r3, #7
 801a4c2:	f023 0307 	bic.w	r3, r3, #7
 801a4c6:	3308      	adds	r3, #8
 801a4c8:	9303      	str	r3, [sp, #12]
 801a4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a4cc:	443b      	add	r3, r7
 801a4ce:	9309      	str	r3, [sp, #36]	@ 0x24
 801a4d0:	e76a      	b.n	801a3a8 <_vfiprintf_r+0x78>
 801a4d2:	fb0c 3202 	mla	r2, ip, r2, r3
 801a4d6:	460c      	mov	r4, r1
 801a4d8:	2001      	movs	r0, #1
 801a4da:	e7a8      	b.n	801a42e <_vfiprintf_r+0xfe>
 801a4dc:	2300      	movs	r3, #0
 801a4de:	3401      	adds	r4, #1
 801a4e0:	9305      	str	r3, [sp, #20]
 801a4e2:	4619      	mov	r1, r3
 801a4e4:	f04f 0c0a 	mov.w	ip, #10
 801a4e8:	4620      	mov	r0, r4
 801a4ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a4ee:	3a30      	subs	r2, #48	@ 0x30
 801a4f0:	2a09      	cmp	r2, #9
 801a4f2:	d903      	bls.n	801a4fc <_vfiprintf_r+0x1cc>
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d0c6      	beq.n	801a486 <_vfiprintf_r+0x156>
 801a4f8:	9105      	str	r1, [sp, #20]
 801a4fa:	e7c4      	b.n	801a486 <_vfiprintf_r+0x156>
 801a4fc:	fb0c 2101 	mla	r1, ip, r1, r2
 801a500:	4604      	mov	r4, r0
 801a502:	2301      	movs	r3, #1
 801a504:	e7f0      	b.n	801a4e8 <_vfiprintf_r+0x1b8>
 801a506:	ab03      	add	r3, sp, #12
 801a508:	9300      	str	r3, [sp, #0]
 801a50a:	462a      	mov	r2, r5
 801a50c:	4b12      	ldr	r3, [pc, #72]	@ (801a558 <_vfiprintf_r+0x228>)
 801a50e:	a904      	add	r1, sp, #16
 801a510:	4630      	mov	r0, r6
 801a512:	f7fc fc0d 	bl	8016d30 <_printf_float>
 801a516:	4607      	mov	r7, r0
 801a518:	1c78      	adds	r0, r7, #1
 801a51a:	d1d6      	bne.n	801a4ca <_vfiprintf_r+0x19a>
 801a51c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a51e:	07d9      	lsls	r1, r3, #31
 801a520:	d405      	bmi.n	801a52e <_vfiprintf_r+0x1fe>
 801a522:	89ab      	ldrh	r3, [r5, #12]
 801a524:	059a      	lsls	r2, r3, #22
 801a526:	d402      	bmi.n	801a52e <_vfiprintf_r+0x1fe>
 801a528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a52a:	f7fe fb6f 	bl	8018c0c <__retarget_lock_release_recursive>
 801a52e:	89ab      	ldrh	r3, [r5, #12]
 801a530:	065b      	lsls	r3, r3, #25
 801a532:	f53f af1f 	bmi.w	801a374 <_vfiprintf_r+0x44>
 801a536:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a538:	e71e      	b.n	801a378 <_vfiprintf_r+0x48>
 801a53a:	ab03      	add	r3, sp, #12
 801a53c:	9300      	str	r3, [sp, #0]
 801a53e:	462a      	mov	r2, r5
 801a540:	4b05      	ldr	r3, [pc, #20]	@ (801a558 <_vfiprintf_r+0x228>)
 801a542:	a904      	add	r1, sp, #16
 801a544:	4630      	mov	r0, r6
 801a546:	f7fc ff35 	bl	80173b4 <_printf_i>
 801a54a:	e7e4      	b.n	801a516 <_vfiprintf_r+0x1e6>
 801a54c:	0801c6f4 	.word	0x0801c6f4
 801a550:	0801c6fe 	.word	0x0801c6fe
 801a554:	08016d31 	.word	0x08016d31
 801a558:	0801a30b 	.word	0x0801a30b
 801a55c:	0801c6fa 	.word	0x0801c6fa

0801a560 <__ascii_mbtowc>:
 801a560:	b082      	sub	sp, #8
 801a562:	b901      	cbnz	r1, 801a566 <__ascii_mbtowc+0x6>
 801a564:	a901      	add	r1, sp, #4
 801a566:	b142      	cbz	r2, 801a57a <__ascii_mbtowc+0x1a>
 801a568:	b14b      	cbz	r3, 801a57e <__ascii_mbtowc+0x1e>
 801a56a:	7813      	ldrb	r3, [r2, #0]
 801a56c:	600b      	str	r3, [r1, #0]
 801a56e:	7812      	ldrb	r2, [r2, #0]
 801a570:	1e10      	subs	r0, r2, #0
 801a572:	bf18      	it	ne
 801a574:	2001      	movne	r0, #1
 801a576:	b002      	add	sp, #8
 801a578:	4770      	bx	lr
 801a57a:	4610      	mov	r0, r2
 801a57c:	e7fb      	b.n	801a576 <__ascii_mbtowc+0x16>
 801a57e:	f06f 0001 	mvn.w	r0, #1
 801a582:	e7f8      	b.n	801a576 <__ascii_mbtowc+0x16>

0801a584 <__sflush_r>:
 801a584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a58c:	0716      	lsls	r6, r2, #28
 801a58e:	4605      	mov	r5, r0
 801a590:	460c      	mov	r4, r1
 801a592:	d454      	bmi.n	801a63e <__sflush_r+0xba>
 801a594:	684b      	ldr	r3, [r1, #4]
 801a596:	2b00      	cmp	r3, #0
 801a598:	dc02      	bgt.n	801a5a0 <__sflush_r+0x1c>
 801a59a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	dd48      	ble.n	801a632 <__sflush_r+0xae>
 801a5a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a5a2:	2e00      	cmp	r6, #0
 801a5a4:	d045      	beq.n	801a632 <__sflush_r+0xae>
 801a5a6:	2300      	movs	r3, #0
 801a5a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a5ac:	682f      	ldr	r7, [r5, #0]
 801a5ae:	6a21      	ldr	r1, [r4, #32]
 801a5b0:	602b      	str	r3, [r5, #0]
 801a5b2:	d030      	beq.n	801a616 <__sflush_r+0x92>
 801a5b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a5b6:	89a3      	ldrh	r3, [r4, #12]
 801a5b8:	0759      	lsls	r1, r3, #29
 801a5ba:	d505      	bpl.n	801a5c8 <__sflush_r+0x44>
 801a5bc:	6863      	ldr	r3, [r4, #4]
 801a5be:	1ad2      	subs	r2, r2, r3
 801a5c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a5c2:	b10b      	cbz	r3, 801a5c8 <__sflush_r+0x44>
 801a5c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a5c6:	1ad2      	subs	r2, r2, r3
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a5cc:	6a21      	ldr	r1, [r4, #32]
 801a5ce:	4628      	mov	r0, r5
 801a5d0:	47b0      	blx	r6
 801a5d2:	1c43      	adds	r3, r0, #1
 801a5d4:	89a3      	ldrh	r3, [r4, #12]
 801a5d6:	d106      	bne.n	801a5e6 <__sflush_r+0x62>
 801a5d8:	6829      	ldr	r1, [r5, #0]
 801a5da:	291d      	cmp	r1, #29
 801a5dc:	d82b      	bhi.n	801a636 <__sflush_r+0xb2>
 801a5de:	4a2a      	ldr	r2, [pc, #168]	@ (801a688 <__sflush_r+0x104>)
 801a5e0:	410a      	asrs	r2, r1
 801a5e2:	07d6      	lsls	r6, r2, #31
 801a5e4:	d427      	bmi.n	801a636 <__sflush_r+0xb2>
 801a5e6:	2200      	movs	r2, #0
 801a5e8:	6062      	str	r2, [r4, #4]
 801a5ea:	04d9      	lsls	r1, r3, #19
 801a5ec:	6922      	ldr	r2, [r4, #16]
 801a5ee:	6022      	str	r2, [r4, #0]
 801a5f0:	d504      	bpl.n	801a5fc <__sflush_r+0x78>
 801a5f2:	1c42      	adds	r2, r0, #1
 801a5f4:	d101      	bne.n	801a5fa <__sflush_r+0x76>
 801a5f6:	682b      	ldr	r3, [r5, #0]
 801a5f8:	b903      	cbnz	r3, 801a5fc <__sflush_r+0x78>
 801a5fa:	6560      	str	r0, [r4, #84]	@ 0x54
 801a5fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a5fe:	602f      	str	r7, [r5, #0]
 801a600:	b1b9      	cbz	r1, 801a632 <__sflush_r+0xae>
 801a602:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a606:	4299      	cmp	r1, r3
 801a608:	d002      	beq.n	801a610 <__sflush_r+0x8c>
 801a60a:	4628      	mov	r0, r5
 801a60c:	f7ff f98c 	bl	8019928 <_free_r>
 801a610:	2300      	movs	r3, #0
 801a612:	6363      	str	r3, [r4, #52]	@ 0x34
 801a614:	e00d      	b.n	801a632 <__sflush_r+0xae>
 801a616:	2301      	movs	r3, #1
 801a618:	4628      	mov	r0, r5
 801a61a:	47b0      	blx	r6
 801a61c:	4602      	mov	r2, r0
 801a61e:	1c50      	adds	r0, r2, #1
 801a620:	d1c9      	bne.n	801a5b6 <__sflush_r+0x32>
 801a622:	682b      	ldr	r3, [r5, #0]
 801a624:	2b00      	cmp	r3, #0
 801a626:	d0c6      	beq.n	801a5b6 <__sflush_r+0x32>
 801a628:	2b1d      	cmp	r3, #29
 801a62a:	d001      	beq.n	801a630 <__sflush_r+0xac>
 801a62c:	2b16      	cmp	r3, #22
 801a62e:	d11e      	bne.n	801a66e <__sflush_r+0xea>
 801a630:	602f      	str	r7, [r5, #0]
 801a632:	2000      	movs	r0, #0
 801a634:	e022      	b.n	801a67c <__sflush_r+0xf8>
 801a636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a63a:	b21b      	sxth	r3, r3
 801a63c:	e01b      	b.n	801a676 <__sflush_r+0xf2>
 801a63e:	690f      	ldr	r7, [r1, #16]
 801a640:	2f00      	cmp	r7, #0
 801a642:	d0f6      	beq.n	801a632 <__sflush_r+0xae>
 801a644:	0793      	lsls	r3, r2, #30
 801a646:	680e      	ldr	r6, [r1, #0]
 801a648:	bf08      	it	eq
 801a64a:	694b      	ldreq	r3, [r1, #20]
 801a64c:	600f      	str	r7, [r1, #0]
 801a64e:	bf18      	it	ne
 801a650:	2300      	movne	r3, #0
 801a652:	eba6 0807 	sub.w	r8, r6, r7
 801a656:	608b      	str	r3, [r1, #8]
 801a658:	f1b8 0f00 	cmp.w	r8, #0
 801a65c:	dde9      	ble.n	801a632 <__sflush_r+0xae>
 801a65e:	6a21      	ldr	r1, [r4, #32]
 801a660:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a662:	4643      	mov	r3, r8
 801a664:	463a      	mov	r2, r7
 801a666:	4628      	mov	r0, r5
 801a668:	47b0      	blx	r6
 801a66a:	2800      	cmp	r0, #0
 801a66c:	dc08      	bgt.n	801a680 <__sflush_r+0xfc>
 801a66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a676:	81a3      	strh	r3, [r4, #12]
 801a678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a680:	4407      	add	r7, r0
 801a682:	eba8 0800 	sub.w	r8, r8, r0
 801a686:	e7e7      	b.n	801a658 <__sflush_r+0xd4>
 801a688:	dfbffffe 	.word	0xdfbffffe

0801a68c <_fflush_r>:
 801a68c:	b538      	push	{r3, r4, r5, lr}
 801a68e:	690b      	ldr	r3, [r1, #16]
 801a690:	4605      	mov	r5, r0
 801a692:	460c      	mov	r4, r1
 801a694:	b913      	cbnz	r3, 801a69c <_fflush_r+0x10>
 801a696:	2500      	movs	r5, #0
 801a698:	4628      	mov	r0, r5
 801a69a:	bd38      	pop	{r3, r4, r5, pc}
 801a69c:	b118      	cbz	r0, 801a6a6 <_fflush_r+0x1a>
 801a69e:	6a03      	ldr	r3, [r0, #32]
 801a6a0:	b90b      	cbnz	r3, 801a6a6 <_fflush_r+0x1a>
 801a6a2:	f7fd fa73 	bl	8017b8c <__sinit>
 801a6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d0f3      	beq.n	801a696 <_fflush_r+0xa>
 801a6ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a6b0:	07d0      	lsls	r0, r2, #31
 801a6b2:	d404      	bmi.n	801a6be <_fflush_r+0x32>
 801a6b4:	0599      	lsls	r1, r3, #22
 801a6b6:	d402      	bmi.n	801a6be <_fflush_r+0x32>
 801a6b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a6ba:	f7fe faa6 	bl	8018c0a <__retarget_lock_acquire_recursive>
 801a6be:	4628      	mov	r0, r5
 801a6c0:	4621      	mov	r1, r4
 801a6c2:	f7ff ff5f 	bl	801a584 <__sflush_r>
 801a6c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a6c8:	07da      	lsls	r2, r3, #31
 801a6ca:	4605      	mov	r5, r0
 801a6cc:	d4e4      	bmi.n	801a698 <_fflush_r+0xc>
 801a6ce:	89a3      	ldrh	r3, [r4, #12]
 801a6d0:	059b      	lsls	r3, r3, #22
 801a6d2:	d4e1      	bmi.n	801a698 <_fflush_r+0xc>
 801a6d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a6d6:	f7fe fa99 	bl	8018c0c <__retarget_lock_release_recursive>
 801a6da:	e7dd      	b.n	801a698 <_fflush_r+0xc>

0801a6dc <_Balloc>:
 801a6dc:	b570      	push	{r4, r5, r6, lr}
 801a6de:	69c6      	ldr	r6, [r0, #28]
 801a6e0:	4604      	mov	r4, r0
 801a6e2:	460d      	mov	r5, r1
 801a6e4:	b976      	cbnz	r6, 801a704 <_Balloc+0x28>
 801a6e6:	2010      	movs	r0, #16
 801a6e8:	f7fc fd4c 	bl	8017184 <malloc>
 801a6ec:	4602      	mov	r2, r0
 801a6ee:	61e0      	str	r0, [r4, #28]
 801a6f0:	b920      	cbnz	r0, 801a6fc <_Balloc+0x20>
 801a6f2:	4b18      	ldr	r3, [pc, #96]	@ (801a754 <_Balloc+0x78>)
 801a6f4:	4818      	ldr	r0, [pc, #96]	@ (801a758 <_Balloc+0x7c>)
 801a6f6:	216b      	movs	r1, #107	@ 0x6b
 801a6f8:	f7fe faac 	bl	8018c54 <__assert_func>
 801a6fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a700:	6006      	str	r6, [r0, #0]
 801a702:	60c6      	str	r6, [r0, #12]
 801a704:	69e6      	ldr	r6, [r4, #28]
 801a706:	68f3      	ldr	r3, [r6, #12]
 801a708:	b183      	cbz	r3, 801a72c <_Balloc+0x50>
 801a70a:	69e3      	ldr	r3, [r4, #28]
 801a70c:	68db      	ldr	r3, [r3, #12]
 801a70e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a712:	b9b8      	cbnz	r0, 801a744 <_Balloc+0x68>
 801a714:	2101      	movs	r1, #1
 801a716:	fa01 f605 	lsl.w	r6, r1, r5
 801a71a:	1d72      	adds	r2, r6, #5
 801a71c:	0092      	lsls	r2, r2, #2
 801a71e:	4620      	mov	r0, r4
 801a720:	f000 fe9f 	bl	801b462 <_calloc_r>
 801a724:	b160      	cbz	r0, 801a740 <_Balloc+0x64>
 801a726:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a72a:	e00e      	b.n	801a74a <_Balloc+0x6e>
 801a72c:	2221      	movs	r2, #33	@ 0x21
 801a72e:	2104      	movs	r1, #4
 801a730:	4620      	mov	r0, r4
 801a732:	f000 fe96 	bl	801b462 <_calloc_r>
 801a736:	69e3      	ldr	r3, [r4, #28]
 801a738:	60f0      	str	r0, [r6, #12]
 801a73a:	68db      	ldr	r3, [r3, #12]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d1e4      	bne.n	801a70a <_Balloc+0x2e>
 801a740:	2000      	movs	r0, #0
 801a742:	bd70      	pop	{r4, r5, r6, pc}
 801a744:	6802      	ldr	r2, [r0, #0]
 801a746:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a74a:	2300      	movs	r3, #0
 801a74c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a750:	e7f7      	b.n	801a742 <_Balloc+0x66>
 801a752:	bf00      	nop
 801a754:	0801c468 	.word	0x0801c468
 801a758:	0801c705 	.word	0x0801c705

0801a75c <_Bfree>:
 801a75c:	b570      	push	{r4, r5, r6, lr}
 801a75e:	69c6      	ldr	r6, [r0, #28]
 801a760:	4605      	mov	r5, r0
 801a762:	460c      	mov	r4, r1
 801a764:	b976      	cbnz	r6, 801a784 <_Bfree+0x28>
 801a766:	2010      	movs	r0, #16
 801a768:	f7fc fd0c 	bl	8017184 <malloc>
 801a76c:	4602      	mov	r2, r0
 801a76e:	61e8      	str	r0, [r5, #28]
 801a770:	b920      	cbnz	r0, 801a77c <_Bfree+0x20>
 801a772:	4b09      	ldr	r3, [pc, #36]	@ (801a798 <_Bfree+0x3c>)
 801a774:	4809      	ldr	r0, [pc, #36]	@ (801a79c <_Bfree+0x40>)
 801a776:	218f      	movs	r1, #143	@ 0x8f
 801a778:	f7fe fa6c 	bl	8018c54 <__assert_func>
 801a77c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a780:	6006      	str	r6, [r0, #0]
 801a782:	60c6      	str	r6, [r0, #12]
 801a784:	b13c      	cbz	r4, 801a796 <_Bfree+0x3a>
 801a786:	69eb      	ldr	r3, [r5, #28]
 801a788:	6862      	ldr	r2, [r4, #4]
 801a78a:	68db      	ldr	r3, [r3, #12]
 801a78c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a790:	6021      	str	r1, [r4, #0]
 801a792:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a796:	bd70      	pop	{r4, r5, r6, pc}
 801a798:	0801c468 	.word	0x0801c468
 801a79c:	0801c705 	.word	0x0801c705

0801a7a0 <__multadd>:
 801a7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7a4:	690d      	ldr	r5, [r1, #16]
 801a7a6:	4607      	mov	r7, r0
 801a7a8:	460c      	mov	r4, r1
 801a7aa:	461e      	mov	r6, r3
 801a7ac:	f101 0c14 	add.w	ip, r1, #20
 801a7b0:	2000      	movs	r0, #0
 801a7b2:	f8dc 3000 	ldr.w	r3, [ip]
 801a7b6:	b299      	uxth	r1, r3
 801a7b8:	fb02 6101 	mla	r1, r2, r1, r6
 801a7bc:	0c1e      	lsrs	r6, r3, #16
 801a7be:	0c0b      	lsrs	r3, r1, #16
 801a7c0:	fb02 3306 	mla	r3, r2, r6, r3
 801a7c4:	b289      	uxth	r1, r1
 801a7c6:	3001      	adds	r0, #1
 801a7c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a7cc:	4285      	cmp	r5, r0
 801a7ce:	f84c 1b04 	str.w	r1, [ip], #4
 801a7d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a7d6:	dcec      	bgt.n	801a7b2 <__multadd+0x12>
 801a7d8:	b30e      	cbz	r6, 801a81e <__multadd+0x7e>
 801a7da:	68a3      	ldr	r3, [r4, #8]
 801a7dc:	42ab      	cmp	r3, r5
 801a7de:	dc19      	bgt.n	801a814 <__multadd+0x74>
 801a7e0:	6861      	ldr	r1, [r4, #4]
 801a7e2:	4638      	mov	r0, r7
 801a7e4:	3101      	adds	r1, #1
 801a7e6:	f7ff ff79 	bl	801a6dc <_Balloc>
 801a7ea:	4680      	mov	r8, r0
 801a7ec:	b928      	cbnz	r0, 801a7fa <__multadd+0x5a>
 801a7ee:	4602      	mov	r2, r0
 801a7f0:	4b0c      	ldr	r3, [pc, #48]	@ (801a824 <__multadd+0x84>)
 801a7f2:	480d      	ldr	r0, [pc, #52]	@ (801a828 <__multadd+0x88>)
 801a7f4:	21ba      	movs	r1, #186	@ 0xba
 801a7f6:	f7fe fa2d 	bl	8018c54 <__assert_func>
 801a7fa:	6922      	ldr	r2, [r4, #16]
 801a7fc:	3202      	adds	r2, #2
 801a7fe:	f104 010c 	add.w	r1, r4, #12
 801a802:	0092      	lsls	r2, r2, #2
 801a804:	300c      	adds	r0, #12
 801a806:	f7fe fa05 	bl	8018c14 <memcpy>
 801a80a:	4621      	mov	r1, r4
 801a80c:	4638      	mov	r0, r7
 801a80e:	f7ff ffa5 	bl	801a75c <_Bfree>
 801a812:	4644      	mov	r4, r8
 801a814:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a818:	3501      	adds	r5, #1
 801a81a:	615e      	str	r6, [r3, #20]
 801a81c:	6125      	str	r5, [r4, #16]
 801a81e:	4620      	mov	r0, r4
 801a820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a824:	0801c683 	.word	0x0801c683
 801a828:	0801c705 	.word	0x0801c705

0801a82c <__s2b>:
 801a82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a830:	460c      	mov	r4, r1
 801a832:	4615      	mov	r5, r2
 801a834:	461f      	mov	r7, r3
 801a836:	2209      	movs	r2, #9
 801a838:	3308      	adds	r3, #8
 801a83a:	4606      	mov	r6, r0
 801a83c:	fb93 f3f2 	sdiv	r3, r3, r2
 801a840:	2100      	movs	r1, #0
 801a842:	2201      	movs	r2, #1
 801a844:	429a      	cmp	r2, r3
 801a846:	db09      	blt.n	801a85c <__s2b+0x30>
 801a848:	4630      	mov	r0, r6
 801a84a:	f7ff ff47 	bl	801a6dc <_Balloc>
 801a84e:	b940      	cbnz	r0, 801a862 <__s2b+0x36>
 801a850:	4602      	mov	r2, r0
 801a852:	4b19      	ldr	r3, [pc, #100]	@ (801a8b8 <__s2b+0x8c>)
 801a854:	4819      	ldr	r0, [pc, #100]	@ (801a8bc <__s2b+0x90>)
 801a856:	21d3      	movs	r1, #211	@ 0xd3
 801a858:	f7fe f9fc 	bl	8018c54 <__assert_func>
 801a85c:	0052      	lsls	r2, r2, #1
 801a85e:	3101      	adds	r1, #1
 801a860:	e7f0      	b.n	801a844 <__s2b+0x18>
 801a862:	9b08      	ldr	r3, [sp, #32]
 801a864:	6143      	str	r3, [r0, #20]
 801a866:	2d09      	cmp	r5, #9
 801a868:	f04f 0301 	mov.w	r3, #1
 801a86c:	6103      	str	r3, [r0, #16]
 801a86e:	dd16      	ble.n	801a89e <__s2b+0x72>
 801a870:	f104 0909 	add.w	r9, r4, #9
 801a874:	46c8      	mov	r8, r9
 801a876:	442c      	add	r4, r5
 801a878:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a87c:	4601      	mov	r1, r0
 801a87e:	3b30      	subs	r3, #48	@ 0x30
 801a880:	220a      	movs	r2, #10
 801a882:	4630      	mov	r0, r6
 801a884:	f7ff ff8c 	bl	801a7a0 <__multadd>
 801a888:	45a0      	cmp	r8, r4
 801a88a:	d1f5      	bne.n	801a878 <__s2b+0x4c>
 801a88c:	f1a5 0408 	sub.w	r4, r5, #8
 801a890:	444c      	add	r4, r9
 801a892:	1b2d      	subs	r5, r5, r4
 801a894:	1963      	adds	r3, r4, r5
 801a896:	42bb      	cmp	r3, r7
 801a898:	db04      	blt.n	801a8a4 <__s2b+0x78>
 801a89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a89e:	340a      	adds	r4, #10
 801a8a0:	2509      	movs	r5, #9
 801a8a2:	e7f6      	b.n	801a892 <__s2b+0x66>
 801a8a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a8a8:	4601      	mov	r1, r0
 801a8aa:	3b30      	subs	r3, #48	@ 0x30
 801a8ac:	220a      	movs	r2, #10
 801a8ae:	4630      	mov	r0, r6
 801a8b0:	f7ff ff76 	bl	801a7a0 <__multadd>
 801a8b4:	e7ee      	b.n	801a894 <__s2b+0x68>
 801a8b6:	bf00      	nop
 801a8b8:	0801c683 	.word	0x0801c683
 801a8bc:	0801c705 	.word	0x0801c705

0801a8c0 <__hi0bits>:
 801a8c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a8c4:	4603      	mov	r3, r0
 801a8c6:	bf36      	itet	cc
 801a8c8:	0403      	lslcc	r3, r0, #16
 801a8ca:	2000      	movcs	r0, #0
 801a8cc:	2010      	movcc	r0, #16
 801a8ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a8d2:	bf3c      	itt	cc
 801a8d4:	021b      	lslcc	r3, r3, #8
 801a8d6:	3008      	addcc	r0, #8
 801a8d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a8dc:	bf3c      	itt	cc
 801a8de:	011b      	lslcc	r3, r3, #4
 801a8e0:	3004      	addcc	r0, #4
 801a8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a8e6:	bf3c      	itt	cc
 801a8e8:	009b      	lslcc	r3, r3, #2
 801a8ea:	3002      	addcc	r0, #2
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	db05      	blt.n	801a8fc <__hi0bits+0x3c>
 801a8f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a8f4:	f100 0001 	add.w	r0, r0, #1
 801a8f8:	bf08      	it	eq
 801a8fa:	2020      	moveq	r0, #32
 801a8fc:	4770      	bx	lr

0801a8fe <__lo0bits>:
 801a8fe:	6803      	ldr	r3, [r0, #0]
 801a900:	4602      	mov	r2, r0
 801a902:	f013 0007 	ands.w	r0, r3, #7
 801a906:	d00b      	beq.n	801a920 <__lo0bits+0x22>
 801a908:	07d9      	lsls	r1, r3, #31
 801a90a:	d421      	bmi.n	801a950 <__lo0bits+0x52>
 801a90c:	0798      	lsls	r0, r3, #30
 801a90e:	bf49      	itett	mi
 801a910:	085b      	lsrmi	r3, r3, #1
 801a912:	089b      	lsrpl	r3, r3, #2
 801a914:	2001      	movmi	r0, #1
 801a916:	6013      	strmi	r3, [r2, #0]
 801a918:	bf5c      	itt	pl
 801a91a:	6013      	strpl	r3, [r2, #0]
 801a91c:	2002      	movpl	r0, #2
 801a91e:	4770      	bx	lr
 801a920:	b299      	uxth	r1, r3
 801a922:	b909      	cbnz	r1, 801a928 <__lo0bits+0x2a>
 801a924:	0c1b      	lsrs	r3, r3, #16
 801a926:	2010      	movs	r0, #16
 801a928:	b2d9      	uxtb	r1, r3
 801a92a:	b909      	cbnz	r1, 801a930 <__lo0bits+0x32>
 801a92c:	3008      	adds	r0, #8
 801a92e:	0a1b      	lsrs	r3, r3, #8
 801a930:	0719      	lsls	r1, r3, #28
 801a932:	bf04      	itt	eq
 801a934:	091b      	lsreq	r3, r3, #4
 801a936:	3004      	addeq	r0, #4
 801a938:	0799      	lsls	r1, r3, #30
 801a93a:	bf04      	itt	eq
 801a93c:	089b      	lsreq	r3, r3, #2
 801a93e:	3002      	addeq	r0, #2
 801a940:	07d9      	lsls	r1, r3, #31
 801a942:	d403      	bmi.n	801a94c <__lo0bits+0x4e>
 801a944:	085b      	lsrs	r3, r3, #1
 801a946:	f100 0001 	add.w	r0, r0, #1
 801a94a:	d003      	beq.n	801a954 <__lo0bits+0x56>
 801a94c:	6013      	str	r3, [r2, #0]
 801a94e:	4770      	bx	lr
 801a950:	2000      	movs	r0, #0
 801a952:	4770      	bx	lr
 801a954:	2020      	movs	r0, #32
 801a956:	4770      	bx	lr

0801a958 <__i2b>:
 801a958:	b510      	push	{r4, lr}
 801a95a:	460c      	mov	r4, r1
 801a95c:	2101      	movs	r1, #1
 801a95e:	f7ff febd 	bl	801a6dc <_Balloc>
 801a962:	4602      	mov	r2, r0
 801a964:	b928      	cbnz	r0, 801a972 <__i2b+0x1a>
 801a966:	4b05      	ldr	r3, [pc, #20]	@ (801a97c <__i2b+0x24>)
 801a968:	4805      	ldr	r0, [pc, #20]	@ (801a980 <__i2b+0x28>)
 801a96a:	f240 1145 	movw	r1, #325	@ 0x145
 801a96e:	f7fe f971 	bl	8018c54 <__assert_func>
 801a972:	2301      	movs	r3, #1
 801a974:	6144      	str	r4, [r0, #20]
 801a976:	6103      	str	r3, [r0, #16]
 801a978:	bd10      	pop	{r4, pc}
 801a97a:	bf00      	nop
 801a97c:	0801c683 	.word	0x0801c683
 801a980:	0801c705 	.word	0x0801c705

0801a984 <__multiply>:
 801a984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a988:	4614      	mov	r4, r2
 801a98a:	690a      	ldr	r2, [r1, #16]
 801a98c:	6923      	ldr	r3, [r4, #16]
 801a98e:	429a      	cmp	r2, r3
 801a990:	bfa8      	it	ge
 801a992:	4623      	movge	r3, r4
 801a994:	460f      	mov	r7, r1
 801a996:	bfa4      	itt	ge
 801a998:	460c      	movge	r4, r1
 801a99a:	461f      	movge	r7, r3
 801a99c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801a9a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801a9a4:	68a3      	ldr	r3, [r4, #8]
 801a9a6:	6861      	ldr	r1, [r4, #4]
 801a9a8:	eb0a 0609 	add.w	r6, sl, r9
 801a9ac:	42b3      	cmp	r3, r6
 801a9ae:	b085      	sub	sp, #20
 801a9b0:	bfb8      	it	lt
 801a9b2:	3101      	addlt	r1, #1
 801a9b4:	f7ff fe92 	bl	801a6dc <_Balloc>
 801a9b8:	b930      	cbnz	r0, 801a9c8 <__multiply+0x44>
 801a9ba:	4602      	mov	r2, r0
 801a9bc:	4b44      	ldr	r3, [pc, #272]	@ (801aad0 <__multiply+0x14c>)
 801a9be:	4845      	ldr	r0, [pc, #276]	@ (801aad4 <__multiply+0x150>)
 801a9c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a9c4:	f7fe f946 	bl	8018c54 <__assert_func>
 801a9c8:	f100 0514 	add.w	r5, r0, #20
 801a9cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a9d0:	462b      	mov	r3, r5
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	4543      	cmp	r3, r8
 801a9d6:	d321      	bcc.n	801aa1c <__multiply+0x98>
 801a9d8:	f107 0114 	add.w	r1, r7, #20
 801a9dc:	f104 0214 	add.w	r2, r4, #20
 801a9e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801a9e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801a9e8:	9302      	str	r3, [sp, #8]
 801a9ea:	1b13      	subs	r3, r2, r4
 801a9ec:	3b15      	subs	r3, #21
 801a9ee:	f023 0303 	bic.w	r3, r3, #3
 801a9f2:	3304      	adds	r3, #4
 801a9f4:	f104 0715 	add.w	r7, r4, #21
 801a9f8:	42ba      	cmp	r2, r7
 801a9fa:	bf38      	it	cc
 801a9fc:	2304      	movcc	r3, #4
 801a9fe:	9301      	str	r3, [sp, #4]
 801aa00:	9b02      	ldr	r3, [sp, #8]
 801aa02:	9103      	str	r1, [sp, #12]
 801aa04:	428b      	cmp	r3, r1
 801aa06:	d80c      	bhi.n	801aa22 <__multiply+0x9e>
 801aa08:	2e00      	cmp	r6, #0
 801aa0a:	dd03      	ble.n	801aa14 <__multiply+0x90>
 801aa0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d05b      	beq.n	801aacc <__multiply+0x148>
 801aa14:	6106      	str	r6, [r0, #16]
 801aa16:	b005      	add	sp, #20
 801aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa1c:	f843 2b04 	str.w	r2, [r3], #4
 801aa20:	e7d8      	b.n	801a9d4 <__multiply+0x50>
 801aa22:	f8b1 a000 	ldrh.w	sl, [r1]
 801aa26:	f1ba 0f00 	cmp.w	sl, #0
 801aa2a:	d024      	beq.n	801aa76 <__multiply+0xf2>
 801aa2c:	f104 0e14 	add.w	lr, r4, #20
 801aa30:	46a9      	mov	r9, r5
 801aa32:	f04f 0c00 	mov.w	ip, #0
 801aa36:	f85e 7b04 	ldr.w	r7, [lr], #4
 801aa3a:	f8d9 3000 	ldr.w	r3, [r9]
 801aa3e:	fa1f fb87 	uxth.w	fp, r7
 801aa42:	b29b      	uxth	r3, r3
 801aa44:	fb0a 330b 	mla	r3, sl, fp, r3
 801aa48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801aa4c:	f8d9 7000 	ldr.w	r7, [r9]
 801aa50:	4463      	add	r3, ip
 801aa52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801aa56:	fb0a c70b 	mla	r7, sl, fp, ip
 801aa5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801aa5e:	b29b      	uxth	r3, r3
 801aa60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801aa64:	4572      	cmp	r2, lr
 801aa66:	f849 3b04 	str.w	r3, [r9], #4
 801aa6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801aa6e:	d8e2      	bhi.n	801aa36 <__multiply+0xb2>
 801aa70:	9b01      	ldr	r3, [sp, #4]
 801aa72:	f845 c003 	str.w	ip, [r5, r3]
 801aa76:	9b03      	ldr	r3, [sp, #12]
 801aa78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801aa7c:	3104      	adds	r1, #4
 801aa7e:	f1b9 0f00 	cmp.w	r9, #0
 801aa82:	d021      	beq.n	801aac8 <__multiply+0x144>
 801aa84:	682b      	ldr	r3, [r5, #0]
 801aa86:	f104 0c14 	add.w	ip, r4, #20
 801aa8a:	46ae      	mov	lr, r5
 801aa8c:	f04f 0a00 	mov.w	sl, #0
 801aa90:	f8bc b000 	ldrh.w	fp, [ip]
 801aa94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801aa98:	fb09 770b 	mla	r7, r9, fp, r7
 801aa9c:	4457      	add	r7, sl
 801aa9e:	b29b      	uxth	r3, r3
 801aaa0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801aaa4:	f84e 3b04 	str.w	r3, [lr], #4
 801aaa8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801aaac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801aab0:	f8be 3000 	ldrh.w	r3, [lr]
 801aab4:	fb09 330a 	mla	r3, r9, sl, r3
 801aab8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801aabc:	4562      	cmp	r2, ip
 801aabe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801aac2:	d8e5      	bhi.n	801aa90 <__multiply+0x10c>
 801aac4:	9f01      	ldr	r7, [sp, #4]
 801aac6:	51eb      	str	r3, [r5, r7]
 801aac8:	3504      	adds	r5, #4
 801aaca:	e799      	b.n	801aa00 <__multiply+0x7c>
 801aacc:	3e01      	subs	r6, #1
 801aace:	e79b      	b.n	801aa08 <__multiply+0x84>
 801aad0:	0801c683 	.word	0x0801c683
 801aad4:	0801c705 	.word	0x0801c705

0801aad8 <__pow5mult>:
 801aad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aadc:	4615      	mov	r5, r2
 801aade:	f012 0203 	ands.w	r2, r2, #3
 801aae2:	4607      	mov	r7, r0
 801aae4:	460e      	mov	r6, r1
 801aae6:	d007      	beq.n	801aaf8 <__pow5mult+0x20>
 801aae8:	4c25      	ldr	r4, [pc, #148]	@ (801ab80 <__pow5mult+0xa8>)
 801aaea:	3a01      	subs	r2, #1
 801aaec:	2300      	movs	r3, #0
 801aaee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801aaf2:	f7ff fe55 	bl	801a7a0 <__multadd>
 801aaf6:	4606      	mov	r6, r0
 801aaf8:	10ad      	asrs	r5, r5, #2
 801aafa:	d03d      	beq.n	801ab78 <__pow5mult+0xa0>
 801aafc:	69fc      	ldr	r4, [r7, #28]
 801aafe:	b97c      	cbnz	r4, 801ab20 <__pow5mult+0x48>
 801ab00:	2010      	movs	r0, #16
 801ab02:	f7fc fb3f 	bl	8017184 <malloc>
 801ab06:	4602      	mov	r2, r0
 801ab08:	61f8      	str	r0, [r7, #28]
 801ab0a:	b928      	cbnz	r0, 801ab18 <__pow5mult+0x40>
 801ab0c:	4b1d      	ldr	r3, [pc, #116]	@ (801ab84 <__pow5mult+0xac>)
 801ab0e:	481e      	ldr	r0, [pc, #120]	@ (801ab88 <__pow5mult+0xb0>)
 801ab10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801ab14:	f7fe f89e 	bl	8018c54 <__assert_func>
 801ab18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ab1c:	6004      	str	r4, [r0, #0]
 801ab1e:	60c4      	str	r4, [r0, #12]
 801ab20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801ab24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ab28:	b94c      	cbnz	r4, 801ab3e <__pow5mult+0x66>
 801ab2a:	f240 2171 	movw	r1, #625	@ 0x271
 801ab2e:	4638      	mov	r0, r7
 801ab30:	f7ff ff12 	bl	801a958 <__i2b>
 801ab34:	2300      	movs	r3, #0
 801ab36:	f8c8 0008 	str.w	r0, [r8, #8]
 801ab3a:	4604      	mov	r4, r0
 801ab3c:	6003      	str	r3, [r0, #0]
 801ab3e:	f04f 0900 	mov.w	r9, #0
 801ab42:	07eb      	lsls	r3, r5, #31
 801ab44:	d50a      	bpl.n	801ab5c <__pow5mult+0x84>
 801ab46:	4631      	mov	r1, r6
 801ab48:	4622      	mov	r2, r4
 801ab4a:	4638      	mov	r0, r7
 801ab4c:	f7ff ff1a 	bl	801a984 <__multiply>
 801ab50:	4631      	mov	r1, r6
 801ab52:	4680      	mov	r8, r0
 801ab54:	4638      	mov	r0, r7
 801ab56:	f7ff fe01 	bl	801a75c <_Bfree>
 801ab5a:	4646      	mov	r6, r8
 801ab5c:	106d      	asrs	r5, r5, #1
 801ab5e:	d00b      	beq.n	801ab78 <__pow5mult+0xa0>
 801ab60:	6820      	ldr	r0, [r4, #0]
 801ab62:	b938      	cbnz	r0, 801ab74 <__pow5mult+0x9c>
 801ab64:	4622      	mov	r2, r4
 801ab66:	4621      	mov	r1, r4
 801ab68:	4638      	mov	r0, r7
 801ab6a:	f7ff ff0b 	bl	801a984 <__multiply>
 801ab6e:	6020      	str	r0, [r4, #0]
 801ab70:	f8c0 9000 	str.w	r9, [r0]
 801ab74:	4604      	mov	r4, r0
 801ab76:	e7e4      	b.n	801ab42 <__pow5mult+0x6a>
 801ab78:	4630      	mov	r0, r6
 801ab7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab7e:	bf00      	nop
 801ab80:	0801c760 	.word	0x0801c760
 801ab84:	0801c468 	.word	0x0801c468
 801ab88:	0801c705 	.word	0x0801c705

0801ab8c <__lshift>:
 801ab8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab90:	460c      	mov	r4, r1
 801ab92:	6849      	ldr	r1, [r1, #4]
 801ab94:	6923      	ldr	r3, [r4, #16]
 801ab96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ab9a:	68a3      	ldr	r3, [r4, #8]
 801ab9c:	4607      	mov	r7, r0
 801ab9e:	4691      	mov	r9, r2
 801aba0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801aba4:	f108 0601 	add.w	r6, r8, #1
 801aba8:	42b3      	cmp	r3, r6
 801abaa:	db0b      	blt.n	801abc4 <__lshift+0x38>
 801abac:	4638      	mov	r0, r7
 801abae:	f7ff fd95 	bl	801a6dc <_Balloc>
 801abb2:	4605      	mov	r5, r0
 801abb4:	b948      	cbnz	r0, 801abca <__lshift+0x3e>
 801abb6:	4602      	mov	r2, r0
 801abb8:	4b28      	ldr	r3, [pc, #160]	@ (801ac5c <__lshift+0xd0>)
 801abba:	4829      	ldr	r0, [pc, #164]	@ (801ac60 <__lshift+0xd4>)
 801abbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801abc0:	f7fe f848 	bl	8018c54 <__assert_func>
 801abc4:	3101      	adds	r1, #1
 801abc6:	005b      	lsls	r3, r3, #1
 801abc8:	e7ee      	b.n	801aba8 <__lshift+0x1c>
 801abca:	2300      	movs	r3, #0
 801abcc:	f100 0114 	add.w	r1, r0, #20
 801abd0:	f100 0210 	add.w	r2, r0, #16
 801abd4:	4618      	mov	r0, r3
 801abd6:	4553      	cmp	r3, sl
 801abd8:	db33      	blt.n	801ac42 <__lshift+0xb6>
 801abda:	6920      	ldr	r0, [r4, #16]
 801abdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801abe0:	f104 0314 	add.w	r3, r4, #20
 801abe4:	f019 091f 	ands.w	r9, r9, #31
 801abe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801abec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801abf0:	d02b      	beq.n	801ac4a <__lshift+0xbe>
 801abf2:	f1c9 0e20 	rsb	lr, r9, #32
 801abf6:	468a      	mov	sl, r1
 801abf8:	2200      	movs	r2, #0
 801abfa:	6818      	ldr	r0, [r3, #0]
 801abfc:	fa00 f009 	lsl.w	r0, r0, r9
 801ac00:	4310      	orrs	r0, r2
 801ac02:	f84a 0b04 	str.w	r0, [sl], #4
 801ac06:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac0a:	459c      	cmp	ip, r3
 801ac0c:	fa22 f20e 	lsr.w	r2, r2, lr
 801ac10:	d8f3      	bhi.n	801abfa <__lshift+0x6e>
 801ac12:	ebac 0304 	sub.w	r3, ip, r4
 801ac16:	3b15      	subs	r3, #21
 801ac18:	f023 0303 	bic.w	r3, r3, #3
 801ac1c:	3304      	adds	r3, #4
 801ac1e:	f104 0015 	add.w	r0, r4, #21
 801ac22:	4584      	cmp	ip, r0
 801ac24:	bf38      	it	cc
 801ac26:	2304      	movcc	r3, #4
 801ac28:	50ca      	str	r2, [r1, r3]
 801ac2a:	b10a      	cbz	r2, 801ac30 <__lshift+0xa4>
 801ac2c:	f108 0602 	add.w	r6, r8, #2
 801ac30:	3e01      	subs	r6, #1
 801ac32:	4638      	mov	r0, r7
 801ac34:	612e      	str	r6, [r5, #16]
 801ac36:	4621      	mov	r1, r4
 801ac38:	f7ff fd90 	bl	801a75c <_Bfree>
 801ac3c:	4628      	mov	r0, r5
 801ac3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac42:	f842 0f04 	str.w	r0, [r2, #4]!
 801ac46:	3301      	adds	r3, #1
 801ac48:	e7c5      	b.n	801abd6 <__lshift+0x4a>
 801ac4a:	3904      	subs	r1, #4
 801ac4c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac50:	f841 2f04 	str.w	r2, [r1, #4]!
 801ac54:	459c      	cmp	ip, r3
 801ac56:	d8f9      	bhi.n	801ac4c <__lshift+0xc0>
 801ac58:	e7ea      	b.n	801ac30 <__lshift+0xa4>
 801ac5a:	bf00      	nop
 801ac5c:	0801c683 	.word	0x0801c683
 801ac60:	0801c705 	.word	0x0801c705

0801ac64 <__mcmp>:
 801ac64:	690a      	ldr	r2, [r1, #16]
 801ac66:	4603      	mov	r3, r0
 801ac68:	6900      	ldr	r0, [r0, #16]
 801ac6a:	1a80      	subs	r0, r0, r2
 801ac6c:	b530      	push	{r4, r5, lr}
 801ac6e:	d10e      	bne.n	801ac8e <__mcmp+0x2a>
 801ac70:	3314      	adds	r3, #20
 801ac72:	3114      	adds	r1, #20
 801ac74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ac78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ac7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ac80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ac84:	4295      	cmp	r5, r2
 801ac86:	d003      	beq.n	801ac90 <__mcmp+0x2c>
 801ac88:	d205      	bcs.n	801ac96 <__mcmp+0x32>
 801ac8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ac8e:	bd30      	pop	{r4, r5, pc}
 801ac90:	42a3      	cmp	r3, r4
 801ac92:	d3f3      	bcc.n	801ac7c <__mcmp+0x18>
 801ac94:	e7fb      	b.n	801ac8e <__mcmp+0x2a>
 801ac96:	2001      	movs	r0, #1
 801ac98:	e7f9      	b.n	801ac8e <__mcmp+0x2a>
	...

0801ac9c <__mdiff>:
 801ac9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aca0:	4689      	mov	r9, r1
 801aca2:	4606      	mov	r6, r0
 801aca4:	4611      	mov	r1, r2
 801aca6:	4648      	mov	r0, r9
 801aca8:	4614      	mov	r4, r2
 801acaa:	f7ff ffdb 	bl	801ac64 <__mcmp>
 801acae:	1e05      	subs	r5, r0, #0
 801acb0:	d112      	bne.n	801acd8 <__mdiff+0x3c>
 801acb2:	4629      	mov	r1, r5
 801acb4:	4630      	mov	r0, r6
 801acb6:	f7ff fd11 	bl	801a6dc <_Balloc>
 801acba:	4602      	mov	r2, r0
 801acbc:	b928      	cbnz	r0, 801acca <__mdiff+0x2e>
 801acbe:	4b3f      	ldr	r3, [pc, #252]	@ (801adbc <__mdiff+0x120>)
 801acc0:	f240 2137 	movw	r1, #567	@ 0x237
 801acc4:	483e      	ldr	r0, [pc, #248]	@ (801adc0 <__mdiff+0x124>)
 801acc6:	f7fd ffc5 	bl	8018c54 <__assert_func>
 801acca:	2301      	movs	r3, #1
 801accc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801acd0:	4610      	mov	r0, r2
 801acd2:	b003      	add	sp, #12
 801acd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acd8:	bfbc      	itt	lt
 801acda:	464b      	movlt	r3, r9
 801acdc:	46a1      	movlt	r9, r4
 801acde:	4630      	mov	r0, r6
 801ace0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ace4:	bfba      	itte	lt
 801ace6:	461c      	movlt	r4, r3
 801ace8:	2501      	movlt	r5, #1
 801acea:	2500      	movge	r5, #0
 801acec:	f7ff fcf6 	bl	801a6dc <_Balloc>
 801acf0:	4602      	mov	r2, r0
 801acf2:	b918      	cbnz	r0, 801acfc <__mdiff+0x60>
 801acf4:	4b31      	ldr	r3, [pc, #196]	@ (801adbc <__mdiff+0x120>)
 801acf6:	f240 2145 	movw	r1, #581	@ 0x245
 801acfa:	e7e3      	b.n	801acc4 <__mdiff+0x28>
 801acfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801ad00:	6926      	ldr	r6, [r4, #16]
 801ad02:	60c5      	str	r5, [r0, #12]
 801ad04:	f109 0310 	add.w	r3, r9, #16
 801ad08:	f109 0514 	add.w	r5, r9, #20
 801ad0c:	f104 0e14 	add.w	lr, r4, #20
 801ad10:	f100 0b14 	add.w	fp, r0, #20
 801ad14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801ad18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801ad1c:	9301      	str	r3, [sp, #4]
 801ad1e:	46d9      	mov	r9, fp
 801ad20:	f04f 0c00 	mov.w	ip, #0
 801ad24:	9b01      	ldr	r3, [sp, #4]
 801ad26:	f85e 0b04 	ldr.w	r0, [lr], #4
 801ad2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801ad2e:	9301      	str	r3, [sp, #4]
 801ad30:	fa1f f38a 	uxth.w	r3, sl
 801ad34:	4619      	mov	r1, r3
 801ad36:	b283      	uxth	r3, r0
 801ad38:	1acb      	subs	r3, r1, r3
 801ad3a:	0c00      	lsrs	r0, r0, #16
 801ad3c:	4463      	add	r3, ip
 801ad3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801ad42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801ad46:	b29b      	uxth	r3, r3
 801ad48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801ad4c:	4576      	cmp	r6, lr
 801ad4e:	f849 3b04 	str.w	r3, [r9], #4
 801ad52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ad56:	d8e5      	bhi.n	801ad24 <__mdiff+0x88>
 801ad58:	1b33      	subs	r3, r6, r4
 801ad5a:	3b15      	subs	r3, #21
 801ad5c:	f023 0303 	bic.w	r3, r3, #3
 801ad60:	3415      	adds	r4, #21
 801ad62:	3304      	adds	r3, #4
 801ad64:	42a6      	cmp	r6, r4
 801ad66:	bf38      	it	cc
 801ad68:	2304      	movcc	r3, #4
 801ad6a:	441d      	add	r5, r3
 801ad6c:	445b      	add	r3, fp
 801ad6e:	461e      	mov	r6, r3
 801ad70:	462c      	mov	r4, r5
 801ad72:	4544      	cmp	r4, r8
 801ad74:	d30e      	bcc.n	801ad94 <__mdiff+0xf8>
 801ad76:	f108 0103 	add.w	r1, r8, #3
 801ad7a:	1b49      	subs	r1, r1, r5
 801ad7c:	f021 0103 	bic.w	r1, r1, #3
 801ad80:	3d03      	subs	r5, #3
 801ad82:	45a8      	cmp	r8, r5
 801ad84:	bf38      	it	cc
 801ad86:	2100      	movcc	r1, #0
 801ad88:	440b      	add	r3, r1
 801ad8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ad8e:	b191      	cbz	r1, 801adb6 <__mdiff+0x11a>
 801ad90:	6117      	str	r7, [r2, #16]
 801ad92:	e79d      	b.n	801acd0 <__mdiff+0x34>
 801ad94:	f854 1b04 	ldr.w	r1, [r4], #4
 801ad98:	46e6      	mov	lr, ip
 801ad9a:	0c08      	lsrs	r0, r1, #16
 801ad9c:	fa1c fc81 	uxtah	ip, ip, r1
 801ada0:	4471      	add	r1, lr
 801ada2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801ada6:	b289      	uxth	r1, r1
 801ada8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801adac:	f846 1b04 	str.w	r1, [r6], #4
 801adb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801adb4:	e7dd      	b.n	801ad72 <__mdiff+0xd6>
 801adb6:	3f01      	subs	r7, #1
 801adb8:	e7e7      	b.n	801ad8a <__mdiff+0xee>
 801adba:	bf00      	nop
 801adbc:	0801c683 	.word	0x0801c683
 801adc0:	0801c705 	.word	0x0801c705

0801adc4 <__ulp>:
 801adc4:	b082      	sub	sp, #8
 801adc6:	ed8d 0b00 	vstr	d0, [sp]
 801adca:	9a01      	ldr	r2, [sp, #4]
 801adcc:	4b0f      	ldr	r3, [pc, #60]	@ (801ae0c <__ulp+0x48>)
 801adce:	4013      	ands	r3, r2
 801add0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801add4:	2b00      	cmp	r3, #0
 801add6:	dc08      	bgt.n	801adea <__ulp+0x26>
 801add8:	425b      	negs	r3, r3
 801adda:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801adde:	ea4f 5223 	mov.w	r2, r3, asr #20
 801ade2:	da04      	bge.n	801adee <__ulp+0x2a>
 801ade4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801ade8:	4113      	asrs	r3, r2
 801adea:	2200      	movs	r2, #0
 801adec:	e008      	b.n	801ae00 <__ulp+0x3c>
 801adee:	f1a2 0314 	sub.w	r3, r2, #20
 801adf2:	2b1e      	cmp	r3, #30
 801adf4:	bfda      	itte	le
 801adf6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801adfa:	40da      	lsrle	r2, r3
 801adfc:	2201      	movgt	r2, #1
 801adfe:	2300      	movs	r3, #0
 801ae00:	4619      	mov	r1, r3
 801ae02:	4610      	mov	r0, r2
 801ae04:	ec41 0b10 	vmov	d0, r0, r1
 801ae08:	b002      	add	sp, #8
 801ae0a:	4770      	bx	lr
 801ae0c:	7ff00000 	.word	0x7ff00000

0801ae10 <__b2d>:
 801ae10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae14:	6906      	ldr	r6, [r0, #16]
 801ae16:	f100 0814 	add.w	r8, r0, #20
 801ae1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801ae1e:	1f37      	subs	r7, r6, #4
 801ae20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ae24:	4610      	mov	r0, r2
 801ae26:	f7ff fd4b 	bl	801a8c0 <__hi0bits>
 801ae2a:	f1c0 0320 	rsb	r3, r0, #32
 801ae2e:	280a      	cmp	r0, #10
 801ae30:	600b      	str	r3, [r1, #0]
 801ae32:	491b      	ldr	r1, [pc, #108]	@ (801aea0 <__b2d+0x90>)
 801ae34:	dc15      	bgt.n	801ae62 <__b2d+0x52>
 801ae36:	f1c0 0c0b 	rsb	ip, r0, #11
 801ae3a:	fa22 f30c 	lsr.w	r3, r2, ip
 801ae3e:	45b8      	cmp	r8, r7
 801ae40:	ea43 0501 	orr.w	r5, r3, r1
 801ae44:	bf34      	ite	cc
 801ae46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ae4a:	2300      	movcs	r3, #0
 801ae4c:	3015      	adds	r0, #21
 801ae4e:	fa02 f000 	lsl.w	r0, r2, r0
 801ae52:	fa23 f30c 	lsr.w	r3, r3, ip
 801ae56:	4303      	orrs	r3, r0
 801ae58:	461c      	mov	r4, r3
 801ae5a:	ec45 4b10 	vmov	d0, r4, r5
 801ae5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae62:	45b8      	cmp	r8, r7
 801ae64:	bf3a      	itte	cc
 801ae66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ae6a:	f1a6 0708 	subcc.w	r7, r6, #8
 801ae6e:	2300      	movcs	r3, #0
 801ae70:	380b      	subs	r0, #11
 801ae72:	d012      	beq.n	801ae9a <__b2d+0x8a>
 801ae74:	f1c0 0120 	rsb	r1, r0, #32
 801ae78:	fa23 f401 	lsr.w	r4, r3, r1
 801ae7c:	4082      	lsls	r2, r0
 801ae7e:	4322      	orrs	r2, r4
 801ae80:	4547      	cmp	r7, r8
 801ae82:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801ae86:	bf8c      	ite	hi
 801ae88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801ae8c:	2200      	movls	r2, #0
 801ae8e:	4083      	lsls	r3, r0
 801ae90:	40ca      	lsrs	r2, r1
 801ae92:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801ae96:	4313      	orrs	r3, r2
 801ae98:	e7de      	b.n	801ae58 <__b2d+0x48>
 801ae9a:	ea42 0501 	orr.w	r5, r2, r1
 801ae9e:	e7db      	b.n	801ae58 <__b2d+0x48>
 801aea0:	3ff00000 	.word	0x3ff00000

0801aea4 <__d2b>:
 801aea4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801aea8:	460f      	mov	r7, r1
 801aeaa:	2101      	movs	r1, #1
 801aeac:	ec59 8b10 	vmov	r8, r9, d0
 801aeb0:	4616      	mov	r6, r2
 801aeb2:	f7ff fc13 	bl	801a6dc <_Balloc>
 801aeb6:	4604      	mov	r4, r0
 801aeb8:	b930      	cbnz	r0, 801aec8 <__d2b+0x24>
 801aeba:	4602      	mov	r2, r0
 801aebc:	4b23      	ldr	r3, [pc, #140]	@ (801af4c <__d2b+0xa8>)
 801aebe:	4824      	ldr	r0, [pc, #144]	@ (801af50 <__d2b+0xac>)
 801aec0:	f240 310f 	movw	r1, #783	@ 0x30f
 801aec4:	f7fd fec6 	bl	8018c54 <__assert_func>
 801aec8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801aecc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801aed0:	b10d      	cbz	r5, 801aed6 <__d2b+0x32>
 801aed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801aed6:	9301      	str	r3, [sp, #4]
 801aed8:	f1b8 0300 	subs.w	r3, r8, #0
 801aedc:	d023      	beq.n	801af26 <__d2b+0x82>
 801aede:	4668      	mov	r0, sp
 801aee0:	9300      	str	r3, [sp, #0]
 801aee2:	f7ff fd0c 	bl	801a8fe <__lo0bits>
 801aee6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801aeea:	b1d0      	cbz	r0, 801af22 <__d2b+0x7e>
 801aeec:	f1c0 0320 	rsb	r3, r0, #32
 801aef0:	fa02 f303 	lsl.w	r3, r2, r3
 801aef4:	430b      	orrs	r3, r1
 801aef6:	40c2      	lsrs	r2, r0
 801aef8:	6163      	str	r3, [r4, #20]
 801aefa:	9201      	str	r2, [sp, #4]
 801aefc:	9b01      	ldr	r3, [sp, #4]
 801aefe:	61a3      	str	r3, [r4, #24]
 801af00:	2b00      	cmp	r3, #0
 801af02:	bf0c      	ite	eq
 801af04:	2201      	moveq	r2, #1
 801af06:	2202      	movne	r2, #2
 801af08:	6122      	str	r2, [r4, #16]
 801af0a:	b1a5      	cbz	r5, 801af36 <__d2b+0x92>
 801af0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801af10:	4405      	add	r5, r0
 801af12:	603d      	str	r5, [r7, #0]
 801af14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801af18:	6030      	str	r0, [r6, #0]
 801af1a:	4620      	mov	r0, r4
 801af1c:	b003      	add	sp, #12
 801af1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af22:	6161      	str	r1, [r4, #20]
 801af24:	e7ea      	b.n	801aefc <__d2b+0x58>
 801af26:	a801      	add	r0, sp, #4
 801af28:	f7ff fce9 	bl	801a8fe <__lo0bits>
 801af2c:	9b01      	ldr	r3, [sp, #4]
 801af2e:	6163      	str	r3, [r4, #20]
 801af30:	3020      	adds	r0, #32
 801af32:	2201      	movs	r2, #1
 801af34:	e7e8      	b.n	801af08 <__d2b+0x64>
 801af36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801af3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801af3e:	6038      	str	r0, [r7, #0]
 801af40:	6918      	ldr	r0, [r3, #16]
 801af42:	f7ff fcbd 	bl	801a8c0 <__hi0bits>
 801af46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801af4a:	e7e5      	b.n	801af18 <__d2b+0x74>
 801af4c:	0801c683 	.word	0x0801c683
 801af50:	0801c705 	.word	0x0801c705

0801af54 <__ratio>:
 801af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af58:	b085      	sub	sp, #20
 801af5a:	e9cd 1000 	strd	r1, r0, [sp]
 801af5e:	a902      	add	r1, sp, #8
 801af60:	f7ff ff56 	bl	801ae10 <__b2d>
 801af64:	9800      	ldr	r0, [sp, #0]
 801af66:	a903      	add	r1, sp, #12
 801af68:	ec55 4b10 	vmov	r4, r5, d0
 801af6c:	f7ff ff50 	bl	801ae10 <__b2d>
 801af70:	9b01      	ldr	r3, [sp, #4]
 801af72:	6919      	ldr	r1, [r3, #16]
 801af74:	9b00      	ldr	r3, [sp, #0]
 801af76:	691b      	ldr	r3, [r3, #16]
 801af78:	1ac9      	subs	r1, r1, r3
 801af7a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801af7e:	1a9b      	subs	r3, r3, r2
 801af80:	ec5b ab10 	vmov	sl, fp, d0
 801af84:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801af88:	2b00      	cmp	r3, #0
 801af8a:	bfce      	itee	gt
 801af8c:	462a      	movgt	r2, r5
 801af8e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801af92:	465a      	movle	r2, fp
 801af94:	462f      	mov	r7, r5
 801af96:	46d9      	mov	r9, fp
 801af98:	bfcc      	ite	gt
 801af9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801af9e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801afa2:	464b      	mov	r3, r9
 801afa4:	4652      	mov	r2, sl
 801afa6:	4620      	mov	r0, r4
 801afa8:	4639      	mov	r1, r7
 801afaa:	f7e7 fe81 	bl	8002cb0 <__aeabi_ddiv>
 801afae:	ec41 0b10 	vmov	d0, r0, r1
 801afb2:	b005      	add	sp, #20
 801afb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801afb8 <__copybits>:
 801afb8:	3901      	subs	r1, #1
 801afba:	b570      	push	{r4, r5, r6, lr}
 801afbc:	1149      	asrs	r1, r1, #5
 801afbe:	6914      	ldr	r4, [r2, #16]
 801afc0:	3101      	adds	r1, #1
 801afc2:	f102 0314 	add.w	r3, r2, #20
 801afc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801afca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801afce:	1f05      	subs	r5, r0, #4
 801afd0:	42a3      	cmp	r3, r4
 801afd2:	d30c      	bcc.n	801afee <__copybits+0x36>
 801afd4:	1aa3      	subs	r3, r4, r2
 801afd6:	3b11      	subs	r3, #17
 801afd8:	f023 0303 	bic.w	r3, r3, #3
 801afdc:	3211      	adds	r2, #17
 801afde:	42a2      	cmp	r2, r4
 801afe0:	bf88      	it	hi
 801afe2:	2300      	movhi	r3, #0
 801afe4:	4418      	add	r0, r3
 801afe6:	2300      	movs	r3, #0
 801afe8:	4288      	cmp	r0, r1
 801afea:	d305      	bcc.n	801aff8 <__copybits+0x40>
 801afec:	bd70      	pop	{r4, r5, r6, pc}
 801afee:	f853 6b04 	ldr.w	r6, [r3], #4
 801aff2:	f845 6f04 	str.w	r6, [r5, #4]!
 801aff6:	e7eb      	b.n	801afd0 <__copybits+0x18>
 801aff8:	f840 3b04 	str.w	r3, [r0], #4
 801affc:	e7f4      	b.n	801afe8 <__copybits+0x30>

0801affe <__any_on>:
 801affe:	f100 0214 	add.w	r2, r0, #20
 801b002:	6900      	ldr	r0, [r0, #16]
 801b004:	114b      	asrs	r3, r1, #5
 801b006:	4298      	cmp	r0, r3
 801b008:	b510      	push	{r4, lr}
 801b00a:	db11      	blt.n	801b030 <__any_on+0x32>
 801b00c:	dd0a      	ble.n	801b024 <__any_on+0x26>
 801b00e:	f011 011f 	ands.w	r1, r1, #31
 801b012:	d007      	beq.n	801b024 <__any_on+0x26>
 801b014:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b018:	fa24 f001 	lsr.w	r0, r4, r1
 801b01c:	fa00 f101 	lsl.w	r1, r0, r1
 801b020:	428c      	cmp	r4, r1
 801b022:	d10b      	bne.n	801b03c <__any_on+0x3e>
 801b024:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b028:	4293      	cmp	r3, r2
 801b02a:	d803      	bhi.n	801b034 <__any_on+0x36>
 801b02c:	2000      	movs	r0, #0
 801b02e:	bd10      	pop	{r4, pc}
 801b030:	4603      	mov	r3, r0
 801b032:	e7f7      	b.n	801b024 <__any_on+0x26>
 801b034:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b038:	2900      	cmp	r1, #0
 801b03a:	d0f5      	beq.n	801b028 <__any_on+0x2a>
 801b03c:	2001      	movs	r0, #1
 801b03e:	e7f6      	b.n	801b02e <__any_on+0x30>

0801b040 <__sread>:
 801b040:	b510      	push	{r4, lr}
 801b042:	460c      	mov	r4, r1
 801b044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b048:	f000 f9e0 	bl	801b40c <_read_r>
 801b04c:	2800      	cmp	r0, #0
 801b04e:	bfab      	itete	ge
 801b050:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b052:	89a3      	ldrhlt	r3, [r4, #12]
 801b054:	181b      	addge	r3, r3, r0
 801b056:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b05a:	bfac      	ite	ge
 801b05c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b05e:	81a3      	strhlt	r3, [r4, #12]
 801b060:	bd10      	pop	{r4, pc}

0801b062 <__swrite>:
 801b062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b066:	461f      	mov	r7, r3
 801b068:	898b      	ldrh	r3, [r1, #12]
 801b06a:	05db      	lsls	r3, r3, #23
 801b06c:	4605      	mov	r5, r0
 801b06e:	460c      	mov	r4, r1
 801b070:	4616      	mov	r6, r2
 801b072:	d505      	bpl.n	801b080 <__swrite+0x1e>
 801b074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b078:	2302      	movs	r3, #2
 801b07a:	2200      	movs	r2, #0
 801b07c:	f000 f9b4 	bl	801b3e8 <_lseek_r>
 801b080:	89a3      	ldrh	r3, [r4, #12]
 801b082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b086:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b08a:	81a3      	strh	r3, [r4, #12]
 801b08c:	4632      	mov	r2, r6
 801b08e:	463b      	mov	r3, r7
 801b090:	4628      	mov	r0, r5
 801b092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b096:	f000 b9cb 	b.w	801b430 <_write_r>

0801b09a <__sseek>:
 801b09a:	b510      	push	{r4, lr}
 801b09c:	460c      	mov	r4, r1
 801b09e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0a2:	f000 f9a1 	bl	801b3e8 <_lseek_r>
 801b0a6:	1c43      	adds	r3, r0, #1
 801b0a8:	89a3      	ldrh	r3, [r4, #12]
 801b0aa:	bf15      	itete	ne
 801b0ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b0ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b0b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b0b6:	81a3      	strheq	r3, [r4, #12]
 801b0b8:	bf18      	it	ne
 801b0ba:	81a3      	strhne	r3, [r4, #12]
 801b0bc:	bd10      	pop	{r4, pc}

0801b0be <__sclose>:
 801b0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0c2:	f000 b95f 	b.w	801b384 <_close_r>
	...

0801b0c8 <fiprintf>:
 801b0c8:	b40e      	push	{r1, r2, r3}
 801b0ca:	b503      	push	{r0, r1, lr}
 801b0cc:	4601      	mov	r1, r0
 801b0ce:	ab03      	add	r3, sp, #12
 801b0d0:	4805      	ldr	r0, [pc, #20]	@ (801b0e8 <fiprintf+0x20>)
 801b0d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b0d6:	6800      	ldr	r0, [r0, #0]
 801b0d8:	9301      	str	r3, [sp, #4]
 801b0da:	f7ff f929 	bl	801a330 <_vfiprintf_r>
 801b0de:	b002      	add	sp, #8
 801b0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 801b0e4:	b003      	add	sp, #12
 801b0e6:	4770      	bx	lr
 801b0e8:	20000494 	.word	0x20000494

0801b0ec <_realloc_r>:
 801b0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0f0:	4680      	mov	r8, r0
 801b0f2:	4615      	mov	r5, r2
 801b0f4:	460c      	mov	r4, r1
 801b0f6:	b921      	cbnz	r1, 801b102 <_realloc_r+0x16>
 801b0f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b0fc:	4611      	mov	r1, r2
 801b0fe:	f7fc b86b 	b.w	80171d8 <_malloc_r>
 801b102:	b92a      	cbnz	r2, 801b110 <_realloc_r+0x24>
 801b104:	f7fe fc10 	bl	8019928 <_free_r>
 801b108:	2400      	movs	r4, #0
 801b10a:	4620      	mov	r0, r4
 801b10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b110:	f000 f9bb 	bl	801b48a <_malloc_usable_size_r>
 801b114:	4285      	cmp	r5, r0
 801b116:	4606      	mov	r6, r0
 801b118:	d802      	bhi.n	801b120 <_realloc_r+0x34>
 801b11a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801b11e:	d8f4      	bhi.n	801b10a <_realloc_r+0x1e>
 801b120:	4629      	mov	r1, r5
 801b122:	4640      	mov	r0, r8
 801b124:	f7fc f858 	bl	80171d8 <_malloc_r>
 801b128:	4607      	mov	r7, r0
 801b12a:	2800      	cmp	r0, #0
 801b12c:	d0ec      	beq.n	801b108 <_realloc_r+0x1c>
 801b12e:	42b5      	cmp	r5, r6
 801b130:	462a      	mov	r2, r5
 801b132:	4621      	mov	r1, r4
 801b134:	bf28      	it	cs
 801b136:	4632      	movcs	r2, r6
 801b138:	f7fd fd6c 	bl	8018c14 <memcpy>
 801b13c:	4621      	mov	r1, r4
 801b13e:	4640      	mov	r0, r8
 801b140:	f7fe fbf2 	bl	8019928 <_free_r>
 801b144:	463c      	mov	r4, r7
 801b146:	e7e0      	b.n	801b10a <_realloc_r+0x1e>

0801b148 <__swbuf_r>:
 801b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b14a:	460e      	mov	r6, r1
 801b14c:	4614      	mov	r4, r2
 801b14e:	4605      	mov	r5, r0
 801b150:	b118      	cbz	r0, 801b15a <__swbuf_r+0x12>
 801b152:	6a03      	ldr	r3, [r0, #32]
 801b154:	b90b      	cbnz	r3, 801b15a <__swbuf_r+0x12>
 801b156:	f7fc fd19 	bl	8017b8c <__sinit>
 801b15a:	69a3      	ldr	r3, [r4, #24]
 801b15c:	60a3      	str	r3, [r4, #8]
 801b15e:	89a3      	ldrh	r3, [r4, #12]
 801b160:	071a      	lsls	r2, r3, #28
 801b162:	d501      	bpl.n	801b168 <__swbuf_r+0x20>
 801b164:	6923      	ldr	r3, [r4, #16]
 801b166:	b943      	cbnz	r3, 801b17a <__swbuf_r+0x32>
 801b168:	4621      	mov	r1, r4
 801b16a:	4628      	mov	r0, r5
 801b16c:	f000 f82a 	bl	801b1c4 <__swsetup_r>
 801b170:	b118      	cbz	r0, 801b17a <__swbuf_r+0x32>
 801b172:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b176:	4638      	mov	r0, r7
 801b178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b17a:	6823      	ldr	r3, [r4, #0]
 801b17c:	6922      	ldr	r2, [r4, #16]
 801b17e:	1a98      	subs	r0, r3, r2
 801b180:	6963      	ldr	r3, [r4, #20]
 801b182:	b2f6      	uxtb	r6, r6
 801b184:	4283      	cmp	r3, r0
 801b186:	4637      	mov	r7, r6
 801b188:	dc05      	bgt.n	801b196 <__swbuf_r+0x4e>
 801b18a:	4621      	mov	r1, r4
 801b18c:	4628      	mov	r0, r5
 801b18e:	f7ff fa7d 	bl	801a68c <_fflush_r>
 801b192:	2800      	cmp	r0, #0
 801b194:	d1ed      	bne.n	801b172 <__swbuf_r+0x2a>
 801b196:	68a3      	ldr	r3, [r4, #8]
 801b198:	3b01      	subs	r3, #1
 801b19a:	60a3      	str	r3, [r4, #8]
 801b19c:	6823      	ldr	r3, [r4, #0]
 801b19e:	1c5a      	adds	r2, r3, #1
 801b1a0:	6022      	str	r2, [r4, #0]
 801b1a2:	701e      	strb	r6, [r3, #0]
 801b1a4:	6962      	ldr	r2, [r4, #20]
 801b1a6:	1c43      	adds	r3, r0, #1
 801b1a8:	429a      	cmp	r2, r3
 801b1aa:	d004      	beq.n	801b1b6 <__swbuf_r+0x6e>
 801b1ac:	89a3      	ldrh	r3, [r4, #12]
 801b1ae:	07db      	lsls	r3, r3, #31
 801b1b0:	d5e1      	bpl.n	801b176 <__swbuf_r+0x2e>
 801b1b2:	2e0a      	cmp	r6, #10
 801b1b4:	d1df      	bne.n	801b176 <__swbuf_r+0x2e>
 801b1b6:	4621      	mov	r1, r4
 801b1b8:	4628      	mov	r0, r5
 801b1ba:	f7ff fa67 	bl	801a68c <_fflush_r>
 801b1be:	2800      	cmp	r0, #0
 801b1c0:	d0d9      	beq.n	801b176 <__swbuf_r+0x2e>
 801b1c2:	e7d6      	b.n	801b172 <__swbuf_r+0x2a>

0801b1c4 <__swsetup_r>:
 801b1c4:	b538      	push	{r3, r4, r5, lr}
 801b1c6:	4b29      	ldr	r3, [pc, #164]	@ (801b26c <__swsetup_r+0xa8>)
 801b1c8:	4605      	mov	r5, r0
 801b1ca:	6818      	ldr	r0, [r3, #0]
 801b1cc:	460c      	mov	r4, r1
 801b1ce:	b118      	cbz	r0, 801b1d8 <__swsetup_r+0x14>
 801b1d0:	6a03      	ldr	r3, [r0, #32]
 801b1d2:	b90b      	cbnz	r3, 801b1d8 <__swsetup_r+0x14>
 801b1d4:	f7fc fcda 	bl	8017b8c <__sinit>
 801b1d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1dc:	0719      	lsls	r1, r3, #28
 801b1de:	d422      	bmi.n	801b226 <__swsetup_r+0x62>
 801b1e0:	06da      	lsls	r2, r3, #27
 801b1e2:	d407      	bmi.n	801b1f4 <__swsetup_r+0x30>
 801b1e4:	2209      	movs	r2, #9
 801b1e6:	602a      	str	r2, [r5, #0]
 801b1e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b1ec:	81a3      	strh	r3, [r4, #12]
 801b1ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b1f2:	e033      	b.n	801b25c <__swsetup_r+0x98>
 801b1f4:	0758      	lsls	r0, r3, #29
 801b1f6:	d512      	bpl.n	801b21e <__swsetup_r+0x5a>
 801b1f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b1fa:	b141      	cbz	r1, 801b20e <__swsetup_r+0x4a>
 801b1fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b200:	4299      	cmp	r1, r3
 801b202:	d002      	beq.n	801b20a <__swsetup_r+0x46>
 801b204:	4628      	mov	r0, r5
 801b206:	f7fe fb8f 	bl	8019928 <_free_r>
 801b20a:	2300      	movs	r3, #0
 801b20c:	6363      	str	r3, [r4, #52]	@ 0x34
 801b20e:	89a3      	ldrh	r3, [r4, #12]
 801b210:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b214:	81a3      	strh	r3, [r4, #12]
 801b216:	2300      	movs	r3, #0
 801b218:	6063      	str	r3, [r4, #4]
 801b21a:	6923      	ldr	r3, [r4, #16]
 801b21c:	6023      	str	r3, [r4, #0]
 801b21e:	89a3      	ldrh	r3, [r4, #12]
 801b220:	f043 0308 	orr.w	r3, r3, #8
 801b224:	81a3      	strh	r3, [r4, #12]
 801b226:	6923      	ldr	r3, [r4, #16]
 801b228:	b94b      	cbnz	r3, 801b23e <__swsetup_r+0x7a>
 801b22a:	89a3      	ldrh	r3, [r4, #12]
 801b22c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b234:	d003      	beq.n	801b23e <__swsetup_r+0x7a>
 801b236:	4621      	mov	r1, r4
 801b238:	4628      	mov	r0, r5
 801b23a:	f000 f84c 	bl	801b2d6 <__smakebuf_r>
 801b23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b242:	f013 0201 	ands.w	r2, r3, #1
 801b246:	d00a      	beq.n	801b25e <__swsetup_r+0x9a>
 801b248:	2200      	movs	r2, #0
 801b24a:	60a2      	str	r2, [r4, #8]
 801b24c:	6962      	ldr	r2, [r4, #20]
 801b24e:	4252      	negs	r2, r2
 801b250:	61a2      	str	r2, [r4, #24]
 801b252:	6922      	ldr	r2, [r4, #16]
 801b254:	b942      	cbnz	r2, 801b268 <__swsetup_r+0xa4>
 801b256:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b25a:	d1c5      	bne.n	801b1e8 <__swsetup_r+0x24>
 801b25c:	bd38      	pop	{r3, r4, r5, pc}
 801b25e:	0799      	lsls	r1, r3, #30
 801b260:	bf58      	it	pl
 801b262:	6962      	ldrpl	r2, [r4, #20]
 801b264:	60a2      	str	r2, [r4, #8]
 801b266:	e7f4      	b.n	801b252 <__swsetup_r+0x8e>
 801b268:	2000      	movs	r0, #0
 801b26a:	e7f7      	b.n	801b25c <__swsetup_r+0x98>
 801b26c:	20000494 	.word	0x20000494

0801b270 <__ascii_wctomb>:
 801b270:	4603      	mov	r3, r0
 801b272:	4608      	mov	r0, r1
 801b274:	b141      	cbz	r1, 801b288 <__ascii_wctomb+0x18>
 801b276:	2aff      	cmp	r2, #255	@ 0xff
 801b278:	d904      	bls.n	801b284 <__ascii_wctomb+0x14>
 801b27a:	228a      	movs	r2, #138	@ 0x8a
 801b27c:	601a      	str	r2, [r3, #0]
 801b27e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b282:	4770      	bx	lr
 801b284:	700a      	strb	r2, [r1, #0]
 801b286:	2001      	movs	r0, #1
 801b288:	4770      	bx	lr

0801b28a <__swhatbuf_r>:
 801b28a:	b570      	push	{r4, r5, r6, lr}
 801b28c:	460c      	mov	r4, r1
 801b28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b292:	2900      	cmp	r1, #0
 801b294:	b096      	sub	sp, #88	@ 0x58
 801b296:	4615      	mov	r5, r2
 801b298:	461e      	mov	r6, r3
 801b29a:	da0d      	bge.n	801b2b8 <__swhatbuf_r+0x2e>
 801b29c:	89a3      	ldrh	r3, [r4, #12]
 801b29e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b2a2:	f04f 0100 	mov.w	r1, #0
 801b2a6:	bf14      	ite	ne
 801b2a8:	2340      	movne	r3, #64	@ 0x40
 801b2aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b2ae:	2000      	movs	r0, #0
 801b2b0:	6031      	str	r1, [r6, #0]
 801b2b2:	602b      	str	r3, [r5, #0]
 801b2b4:	b016      	add	sp, #88	@ 0x58
 801b2b6:	bd70      	pop	{r4, r5, r6, pc}
 801b2b8:	466a      	mov	r2, sp
 801b2ba:	f000 f873 	bl	801b3a4 <_fstat_r>
 801b2be:	2800      	cmp	r0, #0
 801b2c0:	dbec      	blt.n	801b29c <__swhatbuf_r+0x12>
 801b2c2:	9901      	ldr	r1, [sp, #4]
 801b2c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b2c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b2cc:	4259      	negs	r1, r3
 801b2ce:	4159      	adcs	r1, r3
 801b2d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b2d4:	e7eb      	b.n	801b2ae <__swhatbuf_r+0x24>

0801b2d6 <__smakebuf_r>:
 801b2d6:	898b      	ldrh	r3, [r1, #12]
 801b2d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b2da:	079d      	lsls	r5, r3, #30
 801b2dc:	4606      	mov	r6, r0
 801b2de:	460c      	mov	r4, r1
 801b2e0:	d507      	bpl.n	801b2f2 <__smakebuf_r+0x1c>
 801b2e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b2e6:	6023      	str	r3, [r4, #0]
 801b2e8:	6123      	str	r3, [r4, #16]
 801b2ea:	2301      	movs	r3, #1
 801b2ec:	6163      	str	r3, [r4, #20]
 801b2ee:	b003      	add	sp, #12
 801b2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b2f2:	ab01      	add	r3, sp, #4
 801b2f4:	466a      	mov	r2, sp
 801b2f6:	f7ff ffc8 	bl	801b28a <__swhatbuf_r>
 801b2fa:	9f00      	ldr	r7, [sp, #0]
 801b2fc:	4605      	mov	r5, r0
 801b2fe:	4639      	mov	r1, r7
 801b300:	4630      	mov	r0, r6
 801b302:	f7fb ff69 	bl	80171d8 <_malloc_r>
 801b306:	b948      	cbnz	r0, 801b31c <__smakebuf_r+0x46>
 801b308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b30c:	059a      	lsls	r2, r3, #22
 801b30e:	d4ee      	bmi.n	801b2ee <__smakebuf_r+0x18>
 801b310:	f023 0303 	bic.w	r3, r3, #3
 801b314:	f043 0302 	orr.w	r3, r3, #2
 801b318:	81a3      	strh	r3, [r4, #12]
 801b31a:	e7e2      	b.n	801b2e2 <__smakebuf_r+0xc>
 801b31c:	89a3      	ldrh	r3, [r4, #12]
 801b31e:	6020      	str	r0, [r4, #0]
 801b320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b324:	81a3      	strh	r3, [r4, #12]
 801b326:	9b01      	ldr	r3, [sp, #4]
 801b328:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b32c:	b15b      	cbz	r3, 801b346 <__smakebuf_r+0x70>
 801b32e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b332:	4630      	mov	r0, r6
 801b334:	f000 f848 	bl	801b3c8 <_isatty_r>
 801b338:	b128      	cbz	r0, 801b346 <__smakebuf_r+0x70>
 801b33a:	89a3      	ldrh	r3, [r4, #12]
 801b33c:	f023 0303 	bic.w	r3, r3, #3
 801b340:	f043 0301 	orr.w	r3, r3, #1
 801b344:	81a3      	strh	r3, [r4, #12]
 801b346:	89a3      	ldrh	r3, [r4, #12]
 801b348:	431d      	orrs	r5, r3
 801b34a:	81a5      	strh	r5, [r4, #12]
 801b34c:	e7cf      	b.n	801b2ee <__smakebuf_r+0x18>

0801b34e <memmove>:
 801b34e:	4288      	cmp	r0, r1
 801b350:	b510      	push	{r4, lr}
 801b352:	eb01 0402 	add.w	r4, r1, r2
 801b356:	d902      	bls.n	801b35e <memmove+0x10>
 801b358:	4284      	cmp	r4, r0
 801b35a:	4623      	mov	r3, r4
 801b35c:	d807      	bhi.n	801b36e <memmove+0x20>
 801b35e:	1e43      	subs	r3, r0, #1
 801b360:	42a1      	cmp	r1, r4
 801b362:	d008      	beq.n	801b376 <memmove+0x28>
 801b364:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b368:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b36c:	e7f8      	b.n	801b360 <memmove+0x12>
 801b36e:	4402      	add	r2, r0
 801b370:	4601      	mov	r1, r0
 801b372:	428a      	cmp	r2, r1
 801b374:	d100      	bne.n	801b378 <memmove+0x2a>
 801b376:	bd10      	pop	{r4, pc}
 801b378:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b37c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b380:	e7f7      	b.n	801b372 <memmove+0x24>
	...

0801b384 <_close_r>:
 801b384:	b538      	push	{r3, r4, r5, lr}
 801b386:	4d06      	ldr	r5, [pc, #24]	@ (801b3a0 <_close_r+0x1c>)
 801b388:	2300      	movs	r3, #0
 801b38a:	4604      	mov	r4, r0
 801b38c:	4608      	mov	r0, r1
 801b38e:	602b      	str	r3, [r5, #0]
 801b390:	f7e8 ffc4 	bl	800431c <_close>
 801b394:	1c43      	adds	r3, r0, #1
 801b396:	d102      	bne.n	801b39e <_close_r+0x1a>
 801b398:	682b      	ldr	r3, [r5, #0]
 801b39a:	b103      	cbz	r3, 801b39e <_close_r+0x1a>
 801b39c:	6023      	str	r3, [r4, #0]
 801b39e:	bd38      	pop	{r3, r4, r5, pc}
 801b3a0:	2000792c 	.word	0x2000792c

0801b3a4 <_fstat_r>:
 801b3a4:	b538      	push	{r3, r4, r5, lr}
 801b3a6:	4d07      	ldr	r5, [pc, #28]	@ (801b3c4 <_fstat_r+0x20>)
 801b3a8:	2300      	movs	r3, #0
 801b3aa:	4604      	mov	r4, r0
 801b3ac:	4608      	mov	r0, r1
 801b3ae:	4611      	mov	r1, r2
 801b3b0:	602b      	str	r3, [r5, #0]
 801b3b2:	f7e8 ffbf 	bl	8004334 <_fstat>
 801b3b6:	1c43      	adds	r3, r0, #1
 801b3b8:	d102      	bne.n	801b3c0 <_fstat_r+0x1c>
 801b3ba:	682b      	ldr	r3, [r5, #0]
 801b3bc:	b103      	cbz	r3, 801b3c0 <_fstat_r+0x1c>
 801b3be:	6023      	str	r3, [r4, #0]
 801b3c0:	bd38      	pop	{r3, r4, r5, pc}
 801b3c2:	bf00      	nop
 801b3c4:	2000792c 	.word	0x2000792c

0801b3c8 <_isatty_r>:
 801b3c8:	b538      	push	{r3, r4, r5, lr}
 801b3ca:	4d06      	ldr	r5, [pc, #24]	@ (801b3e4 <_isatty_r+0x1c>)
 801b3cc:	2300      	movs	r3, #0
 801b3ce:	4604      	mov	r4, r0
 801b3d0:	4608      	mov	r0, r1
 801b3d2:	602b      	str	r3, [r5, #0]
 801b3d4:	f7e8 ffbe 	bl	8004354 <_isatty>
 801b3d8:	1c43      	adds	r3, r0, #1
 801b3da:	d102      	bne.n	801b3e2 <_isatty_r+0x1a>
 801b3dc:	682b      	ldr	r3, [r5, #0]
 801b3de:	b103      	cbz	r3, 801b3e2 <_isatty_r+0x1a>
 801b3e0:	6023      	str	r3, [r4, #0]
 801b3e2:	bd38      	pop	{r3, r4, r5, pc}
 801b3e4:	2000792c 	.word	0x2000792c

0801b3e8 <_lseek_r>:
 801b3e8:	b538      	push	{r3, r4, r5, lr}
 801b3ea:	4d07      	ldr	r5, [pc, #28]	@ (801b408 <_lseek_r+0x20>)
 801b3ec:	4604      	mov	r4, r0
 801b3ee:	4608      	mov	r0, r1
 801b3f0:	4611      	mov	r1, r2
 801b3f2:	2200      	movs	r2, #0
 801b3f4:	602a      	str	r2, [r5, #0]
 801b3f6:	461a      	mov	r2, r3
 801b3f8:	f7e8 ffb7 	bl	800436a <_lseek>
 801b3fc:	1c43      	adds	r3, r0, #1
 801b3fe:	d102      	bne.n	801b406 <_lseek_r+0x1e>
 801b400:	682b      	ldr	r3, [r5, #0]
 801b402:	b103      	cbz	r3, 801b406 <_lseek_r+0x1e>
 801b404:	6023      	str	r3, [r4, #0]
 801b406:	bd38      	pop	{r3, r4, r5, pc}
 801b408:	2000792c 	.word	0x2000792c

0801b40c <_read_r>:
 801b40c:	b538      	push	{r3, r4, r5, lr}
 801b40e:	4d07      	ldr	r5, [pc, #28]	@ (801b42c <_read_r+0x20>)
 801b410:	4604      	mov	r4, r0
 801b412:	4608      	mov	r0, r1
 801b414:	4611      	mov	r1, r2
 801b416:	2200      	movs	r2, #0
 801b418:	602a      	str	r2, [r5, #0]
 801b41a:	461a      	mov	r2, r3
 801b41c:	f7e8 ff45 	bl	80042aa <_read>
 801b420:	1c43      	adds	r3, r0, #1
 801b422:	d102      	bne.n	801b42a <_read_r+0x1e>
 801b424:	682b      	ldr	r3, [r5, #0]
 801b426:	b103      	cbz	r3, 801b42a <_read_r+0x1e>
 801b428:	6023      	str	r3, [r4, #0]
 801b42a:	bd38      	pop	{r3, r4, r5, pc}
 801b42c:	2000792c 	.word	0x2000792c

0801b430 <_write_r>:
 801b430:	b538      	push	{r3, r4, r5, lr}
 801b432:	4d07      	ldr	r5, [pc, #28]	@ (801b450 <_write_r+0x20>)
 801b434:	4604      	mov	r4, r0
 801b436:	4608      	mov	r0, r1
 801b438:	4611      	mov	r1, r2
 801b43a:	2200      	movs	r2, #0
 801b43c:	602a      	str	r2, [r5, #0]
 801b43e:	461a      	mov	r2, r3
 801b440:	f7e8 ff50 	bl	80042e4 <_write>
 801b444:	1c43      	adds	r3, r0, #1
 801b446:	d102      	bne.n	801b44e <_write_r+0x1e>
 801b448:	682b      	ldr	r3, [r5, #0]
 801b44a:	b103      	cbz	r3, 801b44e <_write_r+0x1e>
 801b44c:	6023      	str	r3, [r4, #0]
 801b44e:	bd38      	pop	{r3, r4, r5, pc}
 801b450:	2000792c 	.word	0x2000792c

0801b454 <abort>:
 801b454:	b508      	push	{r3, lr}
 801b456:	2006      	movs	r0, #6
 801b458:	f000 f848 	bl	801b4ec <raise>
 801b45c:	2001      	movs	r0, #1
 801b45e:	f7e8 ff19 	bl	8004294 <_exit>

0801b462 <_calloc_r>:
 801b462:	b570      	push	{r4, r5, r6, lr}
 801b464:	fba1 5402 	umull	r5, r4, r1, r2
 801b468:	b93c      	cbnz	r4, 801b47a <_calloc_r+0x18>
 801b46a:	4629      	mov	r1, r5
 801b46c:	f7fb feb4 	bl	80171d8 <_malloc_r>
 801b470:	4606      	mov	r6, r0
 801b472:	b928      	cbnz	r0, 801b480 <_calloc_r+0x1e>
 801b474:	2600      	movs	r6, #0
 801b476:	4630      	mov	r0, r6
 801b478:	bd70      	pop	{r4, r5, r6, pc}
 801b47a:	220c      	movs	r2, #12
 801b47c:	6002      	str	r2, [r0, #0]
 801b47e:	e7f9      	b.n	801b474 <_calloc_r+0x12>
 801b480:	462a      	mov	r2, r5
 801b482:	4621      	mov	r1, r4
 801b484:	f7fd fb24 	bl	8018ad0 <memset>
 801b488:	e7f5      	b.n	801b476 <_calloc_r+0x14>

0801b48a <_malloc_usable_size_r>:
 801b48a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b48e:	1f18      	subs	r0, r3, #4
 801b490:	2b00      	cmp	r3, #0
 801b492:	bfbc      	itt	lt
 801b494:	580b      	ldrlt	r3, [r1, r0]
 801b496:	18c0      	addlt	r0, r0, r3
 801b498:	4770      	bx	lr

0801b49a <_raise_r>:
 801b49a:	291f      	cmp	r1, #31
 801b49c:	b538      	push	{r3, r4, r5, lr}
 801b49e:	4605      	mov	r5, r0
 801b4a0:	460c      	mov	r4, r1
 801b4a2:	d904      	bls.n	801b4ae <_raise_r+0x14>
 801b4a4:	2316      	movs	r3, #22
 801b4a6:	6003      	str	r3, [r0, #0]
 801b4a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b4ac:	bd38      	pop	{r3, r4, r5, pc}
 801b4ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b4b0:	b112      	cbz	r2, 801b4b8 <_raise_r+0x1e>
 801b4b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b4b6:	b94b      	cbnz	r3, 801b4cc <_raise_r+0x32>
 801b4b8:	4628      	mov	r0, r5
 801b4ba:	f000 f831 	bl	801b520 <_getpid_r>
 801b4be:	4622      	mov	r2, r4
 801b4c0:	4601      	mov	r1, r0
 801b4c2:	4628      	mov	r0, r5
 801b4c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b4c8:	f000 b818 	b.w	801b4fc <_kill_r>
 801b4cc:	2b01      	cmp	r3, #1
 801b4ce:	d00a      	beq.n	801b4e6 <_raise_r+0x4c>
 801b4d0:	1c59      	adds	r1, r3, #1
 801b4d2:	d103      	bne.n	801b4dc <_raise_r+0x42>
 801b4d4:	2316      	movs	r3, #22
 801b4d6:	6003      	str	r3, [r0, #0]
 801b4d8:	2001      	movs	r0, #1
 801b4da:	e7e7      	b.n	801b4ac <_raise_r+0x12>
 801b4dc:	2100      	movs	r1, #0
 801b4de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b4e2:	4620      	mov	r0, r4
 801b4e4:	4798      	blx	r3
 801b4e6:	2000      	movs	r0, #0
 801b4e8:	e7e0      	b.n	801b4ac <_raise_r+0x12>
	...

0801b4ec <raise>:
 801b4ec:	4b02      	ldr	r3, [pc, #8]	@ (801b4f8 <raise+0xc>)
 801b4ee:	4601      	mov	r1, r0
 801b4f0:	6818      	ldr	r0, [r3, #0]
 801b4f2:	f7ff bfd2 	b.w	801b49a <_raise_r>
 801b4f6:	bf00      	nop
 801b4f8:	20000494 	.word	0x20000494

0801b4fc <_kill_r>:
 801b4fc:	b538      	push	{r3, r4, r5, lr}
 801b4fe:	4d07      	ldr	r5, [pc, #28]	@ (801b51c <_kill_r+0x20>)
 801b500:	2300      	movs	r3, #0
 801b502:	4604      	mov	r4, r0
 801b504:	4608      	mov	r0, r1
 801b506:	4611      	mov	r1, r2
 801b508:	602b      	str	r3, [r5, #0]
 801b50a:	f7e8 feb3 	bl	8004274 <_kill>
 801b50e:	1c43      	adds	r3, r0, #1
 801b510:	d102      	bne.n	801b518 <_kill_r+0x1c>
 801b512:	682b      	ldr	r3, [r5, #0]
 801b514:	b103      	cbz	r3, 801b518 <_kill_r+0x1c>
 801b516:	6023      	str	r3, [r4, #0]
 801b518:	bd38      	pop	{r3, r4, r5, pc}
 801b51a:	bf00      	nop
 801b51c:	2000792c 	.word	0x2000792c

0801b520 <_getpid_r>:
 801b520:	f7e8 bea0 	b.w	8004264 <_getpid>

0801b524 <round>:
 801b524:	ec51 0b10 	vmov	r0, r1, d0
 801b528:	b570      	push	{r4, r5, r6, lr}
 801b52a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801b52e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 801b532:	2a13      	cmp	r2, #19
 801b534:	460b      	mov	r3, r1
 801b536:	4605      	mov	r5, r0
 801b538:	dc1b      	bgt.n	801b572 <round+0x4e>
 801b53a:	2a00      	cmp	r2, #0
 801b53c:	da0b      	bge.n	801b556 <round+0x32>
 801b53e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801b542:	3201      	adds	r2, #1
 801b544:	bf04      	itt	eq
 801b546:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 801b54a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 801b54e:	2200      	movs	r2, #0
 801b550:	4619      	mov	r1, r3
 801b552:	4610      	mov	r0, r2
 801b554:	e015      	b.n	801b582 <round+0x5e>
 801b556:	4c15      	ldr	r4, [pc, #84]	@ (801b5ac <round+0x88>)
 801b558:	4114      	asrs	r4, r2
 801b55a:	ea04 0601 	and.w	r6, r4, r1
 801b55e:	4306      	orrs	r6, r0
 801b560:	d00f      	beq.n	801b582 <round+0x5e>
 801b562:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 801b566:	fa41 f202 	asr.w	r2, r1, r2
 801b56a:	4413      	add	r3, r2
 801b56c:	ea23 0304 	bic.w	r3, r3, r4
 801b570:	e7ed      	b.n	801b54e <round+0x2a>
 801b572:	2a33      	cmp	r2, #51	@ 0x33
 801b574:	dd08      	ble.n	801b588 <round+0x64>
 801b576:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801b57a:	d102      	bne.n	801b582 <round+0x5e>
 801b57c:	4602      	mov	r2, r0
 801b57e:	f7e7 f8b7 	bl	80026f0 <__adddf3>
 801b582:	ec41 0b10 	vmov	d0, r0, r1
 801b586:	bd70      	pop	{r4, r5, r6, pc}
 801b588:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 801b58c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801b590:	40f4      	lsrs	r4, r6
 801b592:	4204      	tst	r4, r0
 801b594:	d0f5      	beq.n	801b582 <round+0x5e>
 801b596:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 801b59a:	2201      	movs	r2, #1
 801b59c:	408a      	lsls	r2, r1
 801b59e:	1952      	adds	r2, r2, r5
 801b5a0:	bf28      	it	cs
 801b5a2:	3301      	addcs	r3, #1
 801b5a4:	ea22 0204 	bic.w	r2, r2, r4
 801b5a8:	e7d2      	b.n	801b550 <round+0x2c>
 801b5aa:	bf00      	nop
 801b5ac:	000fffff 	.word	0x000fffff

0801b5b0 <_init>:
 801b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5b2:	bf00      	nop
 801b5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5b6:	bc08      	pop	{r3}
 801b5b8:	469e      	mov	lr, r3
 801b5ba:	4770      	bx	lr

0801b5bc <_fini>:
 801b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5be:	bf00      	nop
 801b5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5c2:	bc08      	pop	{r3}
 801b5c4:	469e      	mov	lr, r3
 801b5c6:	4770      	bx	lr
